name: HumanEval_124_valid_date
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have to write a function which validates a given date string and\n \
  \   // returns true if the date is valid otherwise false.\n    // The date is valid\
  \ if all of the following rules are satisfied:\n    // 1. The date string is not\
  \ empty.\n    // 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n    // 3. The months should not be less than\
  \ 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n\
  \    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"\
  15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n\
  \    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"\
  06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
  )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
  04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
  \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\"\
  )) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
  04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
  \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\"\
  )) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"\
  20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n  \
  \  assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val dateParts = date.split(\"-\")\n        if (dateParts.size\
    \ != 3) {\n            return false\n        }\n        val daysInMonths = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        for (i <- 0 until dateParts.length\
    \ - 1) {\n            val curMonth = i + 1\n            val curYear = dateParts(i)\n\
    \            val daysInMonth = daysInMonths(i)\n            val daysInYear = scala.math.min(dateParts(i)\
    \ - 1, daysInMonth)\n            if (!(curMonth > 0 && curMonth <= 12)) {\n  \
    \              return false\n            }\n            if (!(daysInYear > 0 &&\
    \ daysInYear <= daysInMonth)) {\n                return false\n            }\n\
    \        }\n        if (!(dateParts(2) > 0 && dateParts(2) <= 12)) {\n       \
    \     return false\n        }\n        if (!(dateParts(1) > 0 && dateParts(1)\
    \ <= 31)) {\n            return false\n        }\n        true", "        if (date\
    \ == \"\"){\n          return false\n        }\n        val pattern = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat = pattern.parse(date)\n        if(dateFormat\
    \ == null){\n          return false\n        }\n        var days =  dateFormat.getDayOfMonth\n\
    \        var months = dateFormat.getMonth\n        var years = dateFormat.getYear\n\
    \        if(days < 1 || days > 31){\n          return false\n        }\n     \
    \   if(months < 1 || months > 12){\n          return false\n        }\n      \
    \  if(years < 1 || years > 30){\n          return false\n        }\n        return\
    \ true\n      }\n\n}\n</code>\n<|/ a tags=scala |>\n<| c |>\nPlease don't use\
    \ `SimpleDateFormat`. It is long outdated and notoriously troublesome and long\
    \ outdated. Today we have so much better in [`java.time`, the modern Java date\
    \ and time API](https://docs.oracle.com/javase/tutorial/datetime/) and its `DateTimeFormatter`.\n\
    <|/ c |>\n<| c |>\nI know, but I had to write this using scala 2.12 and I couldn't\
    \ find the equivalent in the java time api. Thanks for your help anyway :)\n<|/\
    \ c |>\n<| c |>\nFYI, the terribly troublesome old date-time classes such as [`java.util.Date`](https://docs.oracle.com/javase/10/docs/api/java/util/Date.html),\
    \ [`java.util.Calendar`](https://docs.oracle.com/javase/10/docs/api/java/util/Calendar.html),\
    \ and `java.text.SimpleDateFormat` are now [legacy](https://en.wikipedia.org/wiki/Legacy_system),\
    \ supplanted by the [*java.time*](https://docs.oracle.com/javase/10/docs/api/java/time/package-summary.html)\
    \ classes built into Java 8 and later. See [*Tutorial* by Oracle](https://docs.oracle.com/javase/tutorial/datetime/TOC.html).\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a scala solution. I don't know\
    \ why you got so many downvotes though!\n<|/ c |>\n<| c |>\nThanks for your solution,\
    \ but I don't want to use libraries.\n<|/ c |>\n<| a dscore=0 |>\nThis code will\
    \ validate if date is in format MM-DD-YYYY.\n<code>\nimport java.time.LocalDate\n\
    import java.time.format.DateTimeFormatter\n\nobject DateTimeValidate {\n\n   \
    \ def isValid(date: String) = {\n      val pattern = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\")\n      val dateFormat = Local", '        date.isEmpty', "      \
    \  val dateParts = date.split(\"-\")\n        val numDays = dateParts.size\n \
    \       if(numDays > 1 && numDays < 32 && numDays > 1 && numDays < 29 && dateParts(2)\
    \ == \"00\"){\n            true\n        } else {\n            false\n       \
    \ }", "        if (!date.isEmpty) {\n            var numberOfDaysArray = date.split(\"\
    -\").map(_.toInt)\n            var maxDaysInArray = 31\n            var minDaysInArray\
    \ = 1\n            var maxDaysInMonthArray = [4,6,9,11]\n            var minDaysInMonthArray\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12]\n            var monthArray = [1,2,3,4,5,6,7,8,9,10,11,12]\n\
    \            var daysInMonthArray = [31,30,29,28,31,30,31,30,31,31,30,31,30,31]\n\
    \            var checkDays = numberOfDaysArray.map(_ - minDaysInArray).sum\n \
    \           var checkMonth = monthArray.map(_ - 1).sum\n            var checkYear\
    \ = numberOfDaysArray.map(_.toInt).sum\n            var checkDaysInMonth = daysInMonthArray.map(_\
    \ - 1).sum\n            var checkDaysInMonth = daysInMonthArray.map(_ - 1).sum\n\
    \n            if (!(checkDays <= maxDaysInArray) && !(checkDays > minDaysInArray)\
    \ && !(checkDaysInMonth < minDaysInMonthArray) && !(checkDaysInMonth > maxDaysInMonthArray))\
    \ {\n                return true\n            } else {\n                return\
    \ false\n            }\n        }", "        val splitDate  = date.split(\"-\"\
    )\n        val monthIndex = splitDate(2).toInt\n        val dayIndex = splitDate(0).toInt\n\
    \n        if(monthIndex < 1 || monthIndex > 12){\n            return false\n \
    \       }\n        if(dayIndex < 1 || dayIndex > 31){\n            return false\n\
    \        }\n        if(monthIndex == 2 && dayIndex == 29){\n            return\
    \ false\n        }\n        if(monthIndex == 2 && dayIndex == 30){\n         \
    \   return false\n        }\n        if(monthIndex == 2 && dayIndex == 31){\n\
    \            return false\n        }\n        true", "        def validDateString(dateString\
    \ : String) : Boolean = {\n            dateString.toIntRange(1, 31).contains(1)\n\
    \            && dateString.toIntRange(4, 11).contains(4)\n            && dateString.toIntRange(6,\
    \ 9).contains(6)\n            && dateString.toIntRange(10, 12).contains(10)\n\
    \            && dateString.toIntRange(12, 12).contains(2)\n        }\n       \
    \ if(!date.isEmpty){\n            validDateString(date)\n        }else{\n    \
    \        false\n        }", "        !date.isEmpty &&\n        !date.startsWith(\"\
    -\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"-\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"-\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"\
    -\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        !date.contains(\"/\") &&\n        !date.contains(\"/\") &&\n\
    \        !date.contains(\"/\") &&\n        !date.contains(\"-\") &&\n        !date.contains(\"\
    /\") &&\n        ", "        if(date != \"\") {\n            if(date.split(\"\
    -\").length == 3) {\n                val m = date.split(\"-\").head.toInt\n  \
    \              val d = date.split(\"-\").last.toInt\n                if(m < 1\
    \ || m > 12 || d < 1 || d > 31) {\n                    return false\n        \
    \        } else if (d == 31) {\n                    if(m == 1) {\n           \
    \             return true\n                    }\n                }\n        \
    \        return true\n            }\n            return false\n        }\n   \
    \     return false", "        val Array(_day, _month, _year) = date.split(\"-\"\
    )\n        (_day != \"\" && _day != null && !(_day.equals(\"0\") || _day.equals(\"\
    1\")) && _day.length <= 3 && _day != \"31\" && _day != \"30\" && _day.length !=\
    \ 3 && _day != \"29\" && _day != \"31\" && _month != \"\" && _month != null &&\
    \ _month.length <= 2 && _month != \"12\" && _month != \"0\" && _month != \"1\"\
    \ && _month != \"3\" && _month != \"5\" && _month != \"7\" && _month != \"8\"\
    \ && _month != \"10\" && _month != \"12\") ||\n            (_month != \"\" &&\
    \ _month != null && _month.length <= 2 && _month != \"0\" && _month != \"1\" &&\
    \ _month != \"3\" && _month != \"5\" && _month != \"7\" && _month != \"8\" &&\
    \ _month != \"10\" && _month != \"12\" && (_day.equals(\"0\") || _day.equals(\"\
    1\") || _day.equals(\"2\") || _day.equals(\"3\") || _day.equals(\"4\") || _day.equals(\"\
    6\") || _day.equals(\"9\") || _day.equals(\"11\")) && _day.equals(\"1\") || _day.equals(\"\
    2\") || _day.equals(\"3\") || _day.equals(\"4\") || _day.equals(\"6\") || _day.equals(\"\
    9\") || _day.equals(\"11\")) && _day.equals(\"0\") || _day.equals(\"1\") || _day.equals(\"\
    2\") || _day.equals(\"3\") || _day.equals(\"4\") || _day.equals(\"6\") || _day.equals(\"\
    9\") || _day.equals(\"11\")) || \n            (_month != \"\" && _month != null\
    \ && _month.length <= 2 && _month != \"0\" && _month != \"1\" && _month != \"\
    3\" && _month != \"5\" && _month != \"7\" && _month != \"8\" && _month != \"10\"\
    \ && _month != \"12\" && (_day.equals(\"0\") || _day.equals(\"1\") || _day.equals(\"\
    2\") || _day.equals(\"3\") || _day.equals(\"4\") || _day.equals(\"6\") || _day.equals(\"\
    9\") || _day.equals(\"11\")) && _day.equals(\"0\") || _day.equals(\"1\") || _day.equals(\"\
    2\") || _day.equals(\"3\") || _day.equals(\"4\") || _day.equals(\"6\") || _day.equals(\"\
    9\") || _day.", "        val m = date.split(\"-\")\n        if(m.length != 3)\n\
    \            return false\n        if(m.head.length != 2)\n            return\
    \ false\n        if(m.head.head != '0' && m.head.head != '1')\n            return\
    \ false\n        if(m.tail.length != 3)\n            return false\n        if(m.tail.head\
    \ != '0' && m.tail.head != '1')\n            return false\n        if(m.tail.tail.length\
    \ != 2)\n            return false\n        if(m.tail.tail.head != '0' && m.tail.tail.head\
    \ != '1')\n            return false\n        if(m.tail.tail.tail.length != 2)\n\
    \            return false\n        val monthDays = m(0).toInt + m(1).toInt + m(2).toInt\n\
    \        if(monthDays < 1 || monthDays > 31)\n            return false\n     \
    \   if(monthDays < 1 || monthDays > 30)\n            return false\n        if(monthDays\
    \ < 1 || monthDays > 29)\n            return false\n        true", "        val\
    \ dateArray = date.split(\"-\")\n        val numberOfDays = dateArray(0).trim.toInt\n\
    \        val month = dateArray(1).trim.toInt\n        val day = dateArray(2).trim.toInt\n\
    \        if(numberOfDays < 1 || numberOfDays > 31 && numberOfDays > 30) {\n  \
    \          return false\n        }\n        if(month < 1 || month > 12) {\n  \
    \          return false\n        }\n        if(day < 1 || day > 31) {\n      \
    \      return false\n        }\n        true", "        val months = Set(\"1\"\
    ,\"3\",\"5\",\"7\",\"8\",\"10\",\"12\")\n        val months_other = Set(\"4\"\
    ,\"6\",\"9\",\"11\")\n        val days = Set(\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"\
    17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"\
    28\",\"29\",\"30\",\"31\")\n        if (date.trim.isEmpty) {\n            return\
    \ false\n        }\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3){\n            return false\n        }\n        if (days.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ == 4 ){\n            return true\n        }\n        if (days_other.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months_other.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ == 4 ){\n            return true\n        }\n        if (days.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 4 ){\n            return false\n        }\n        if (days_other.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months_other.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 4 ){\n            return false\n        }\n        if (days.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 2){\n            return false\n        }\n        if (days_other.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months_other.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 2){\n            return false\n        }\n        if (days.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 4){\n            return false\n        }\n        if (days_other.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months_other.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 4){\n            return false\n        }\n        if (days.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 3){\n            return false\n        }\n        if (days_other.contains(dateArray(0).substring(0,\
    \ 2).toInt) && months_other.contains(dateArray(0).substring(3, 5).toInt) && dateArray(1).length\
    \ != 3)", '        date.length != 0', "        val dateObj = new Date(date)\n\
    \        if(dateObj.getTime < 0) {\n            return false\n        }\n    \
    \    val yearMonthDate = new mutable.MutableDate((dateObj.getYear ,dateObj.getMonthOfYear,\
    \ dateObj.getDayOfMonth))\n        val monthDayDate = yearMonthDate.withDayOfMonth(dateObj.getDayOfMonth)\n\
    \        val yearDayDate = yearMonthDate.withYear(dateObj.getYear)\n        val\
    \ daysToThirtyDays = (365 * 3) + 30\n        val daysToThirtyMonths30Days = (30\
    \ * 3) + 1\n        val daysToThirtyMonths = (30 * 3) + 1\n        if(daysToThirtyDays\
    \ > monthDayDate.getDayOfMonth) {\n            return false\n        }\n     \
    \   if(daysToThirtyMonths > monthDayDate.getMonthOfYear) {\n            return\
    \ false\n        }\n        if(daysToThirtyMonths30Days > yearDayDate.getMonthOfYear)\
    \ {\n            return false\n        }\n        if(yearDayDate.getYear != dateObj.getYear)\
    \ {\n            return false\n        }\n        true", "        val dateFormat\
    \ = new SimpleDateFormat(\"dd-MM-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        val year = dateObj.getYear\n        val month = dateObj.getMonthValue\n\
    \        val day = dateObj.getDayOfMonth\n        val totalDays = (year*365 +\
    \ month*30 + day)\n        if (totalDays < 1 || totalDays > 31)\n            return\
    \ false\n        if (month < 1 || month > 12)\n            return false\n    \
    \    if (day < 1 || day > 30)\n            return false\n        return true",
  "        val dateArray = date.split(\"-\")\n        dateArray.length == 3\n    \
    \    dateArray.map(_.toInt).map{\n            case month => if(month < 1 || month\
    \ > 12) throw new IllegalArgumentException(\"Month must be in the range 1 to 12.\"\
    )\n            case day => if(day < 1 || day > 31) throw new IllegalArgumentException(\"\
    Day must be in the range 1 to 31.\")\n            case year => if(year < 1 ||\
    \ year > 9999) throw new IllegalArgumentException(\"Year must be in the range\
    \ 1 to 9999.\")\n            case other => true\n        }.reduce((acc, curr)\
    \ => acc + curr)", "        if(!date.isEmpty){\n            val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n            try {\n                val dateValue\
    \ = dateFormat.parse(date)\n            } catch {\n                case ex : Exception\
    \ => false\n            }\n        }\n        else\n            false", "    \
    \    val pattern = \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        val dateArray\
    \ = date.split(pattern)\n        dateArray match {\n            case Array(month1,\
    \ day1, year1) =>\n                year1.toInt == 2000 &&\n                month1.toInt\
    \ == 1 && month1.toInt <= 12 &&\n                day1.toInt <= 30 &&\n       \
    \         day1.toInt >= 1 &&\n                day1.toInt <= 29\n            case\
    \ _ => false\n        }", "        if(!date.isEmpty && !date.isEmpty)\n      \
    \  {\n            val format = new SimpleDateFormat(\"MM-dd-yyyy\")\n        \
    \    val dateParsed = format.parse(date)\n            if(dateParsed != null)\n\
    \            {\n                val month = Integer.parseInt(dateParsed.getMonth)\n\
    \                val days = Integer.parseInt(dateParsed.getDay)\n            \
    \    val year = Integer.parseInt(dateParsed.getYear)\n                if(month\
    \ < 1 || month > 12)\n                    return false\n                else if(days\
    \ > 31)\n                    return false\n                else if(days > 30)\n\
    \                    return false\n                else if(days > 29)\n      \
    \              return false\n                else\n                    return\
    \ true\n            }\n            return false\n        }\n        return false",
  "        var mm = date.getMonth\n        var dd = date.getDay\n        var yyyy\
    \ = date.getYear\n        if (date.isEmpty || mm < 1 || mm > 12 || dd < 1 || dd\
    \ > 31 || (dd > 29 && mm > 2) || yyyy < 1 || yyyy > 2040) {\n            return\
    \ false\n        }\n        else {\n            return true\n        }", "   \
    \     val dateStr = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date)\n       \
    \ if(dateStr != null)\n            true\n        else\n            false", " \
    \       val dateArray = date.split(\"/\")\n        val months = dateArray(0).toString.toInt\n\
    \        val days = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        if(year < 1 || year > 9999 || months < 1 || months > 12 || days < 1 ||\
    \ days > 31 || days >= 30) {\n            return false\n        }\n        val\
    \ monthArray = (1 to 12).toArray\n        monthArray.filter(_ != months).foreach(month\
    \ => return false)\n        true", "        val pattern = \"(0[1-9]|1[0-2])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2,4})\"\
    .r\n        pattern findFirstIn date match {\n            case Some(dateStr) =>\n\
    \                val (_, month, day, year) = dateStr.split(\"-\")\n          \
    \      val days = month.toInt + day\n                val daysLimit = if (month\
    \ == 2) 31 else 30\n                val daysLimitForOtherMonths = if (month >\
    \ 2) 29\n                else 31\n                if (days < 1 || days > daysLimit\
    \ || days > daysLimitForOtherMonths)\n                    return false\n     \
    \           if (year < 1900 || year > 2100)\n                    return false\n\
    \                if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)\n                    return true\n     \
    \           if (month == 4 || month == 6 || month == 9 || month == 11)\n     \
    \               return true\n                return false\n            case None\
    \ =>\n                return false\n        }", "        val months = Vector(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val days =   Vector(31,28,31,30,31,30,31,30,31,30,31)\n        val dates\
    \ = Vector(date.replace('-','/'))\n        val daysInMonth = Vector(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val year = dates(2)\n        val month = months.indexOf((dates(0) - 1))\n\
    \        val day = days.indexOf((dates(1) - 1))\n        val daysInMonth = daysInMonth.indexOf((month\
    \ - 1))\n        val yearDay = Vector(31,28,31,30,31,30,31,30,31,30,31)\n    \
    \    val isLeap = year match {\n            case x if x >= 50 => true\n      \
    \      case x if x >= 41 => false\n            case x if x >= 3 => true\n    \
    \        case _ => false\n        }\n        var isValid = false\n        if(!isLeap)\
    \ {\n            val monthLeap = months.indexOf((year - 3) % 12)\n           \
    \ val dayLeap = days.indexOf((year - 3) % 12)\n            val daysInMonthLeap\
    \ = daysInMonth.indexOf((year - 3) % 12)\n            val yearDayLeap = Vector(31,28,31,30,31,30,31,30,31,30,31)\n\
    \            val isLeapLeap = year match {\n                case x if x >= 50\
    \ => true\n                case x if x >= 41 => false\n                case x\
    \ if x >= 3 => true\n                case _ => false\n            }\n        \
    \    val monthLeapLeap = months.indexOf((year - 5) % 12)\n            val dayLeapLeap\
    \ = days.indexOf((year - 5) % 12)\n            val daysInMonthLeapLeap = daysInMonth.indexOf((year\
    \ - 5) % 12)\n            val yearDayLeapLeap = Vector(31,28,31,30,31,30,31,30,31,30,31)\n\
    \            val isLeapLeapLeap = year match {\n                case x if x >=\
    \ 50 => true\n                case x if x >= 41 => false\n                case\
    \ x if x >= 3 => true\n                case _ => false\n            }\n      \
    \      val monthLeapLeapLeap = months.indexOf((year + 5) % 12)\n            val\
    \ dayLeapLeapLeap = days.indexOf((year + 5) % 12)\n            val daysInMonthLeapLeapLeap\
    \ = daysInMonth.indexOf((year + 5) % 12)\n            val yearDayLeapLeapLeap\
    \ = Vector(31,28,31,30,31,30,31,30,31,30,31)\n            val isLeapLeapLeap =\
    \ year match {\n                case x if x >= 50 => true\n                case\
    \ x if x >= 4", '        //Write your code here', "        var dateChecked : Boolean\
    \ = true\n        if (date == null || date.trim.isEmpty) {\n            return\
    \ false\n        }\n        //1\n        if (date.split(\"-\").length < 3) {\n\
    \            return false\n        }\n        //2\n        if (date.split(\"-\"\
    ).length < 3) {\n            return false\n        }\n        //3\n        if\
    \ (date.split(\"-\").length < 3) {\n            return false\n        }\n    \
    \    //4\n        if (date.split(\"-\").length < 3) {\n            return false\n\
    \        }\n        //5\n        if (date.split(\"-\").length < 3) {\n       \
    \     return false\n        }\n        //6\n        if (date.split(\"-\").length\
    \ < 3) {\n            return false\n        }\n        //7\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //8\n       \
    \ if (date.split(\"-\").length < 3) {\n            return false\n        }\n \
    \       //9\n        if (date.split(\"-\").length < 3) {\n            return false\n\
    \        }\n        //10\n        if (date.split(\"-\").length < 3) {\n      \
    \      return false\n        }\n        //11\n        if (date.split(\"-\").length\
    \ < 3) {\n            return false\n        }\n        //12\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //13\n      \
    \  if (date.split(\"-\").length < 3) {\n            return false\n        }\n\
    \        //14\n        if (date.split(\"-\").length < 3) {\n            return\
    \ false\n        }\n        //15\n        if (date.split(\"-\").length < 3) {\n\
    \            return false\n        }\n        //16\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //17\n      \
    \  if (date.split(\"-\").length < 3) {\n            return false\n        }\n\
    \        //18\n        if (date.split(\"-\").length < 3) {\n            return\
    \ false\n        }\n        //19\n        if (date.split(\"-\").length < 3) {\n\
    \            return false\n        }\n        //20\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //21\n      \
    \  if (date.split(\"-\").length < 3) {\n            return false\n        }\n\
    \        //22\n        if (date.split(\"-\").length < 3) {\n            return\
    \ false\n        }\n        //23\n        if (date.split(\"-\").length < 3) {\n\
    \            return false\n        }\n        //24\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //25\n      \
    \  if (date.split(\"-\").length < 3) {\n            return false\n        }\n\
    \        //26\n        if (date.split(\"-\").length < 3) {\n            return\
    \ false\n        }\n        //27\n        if (date.split(\"-\").length < 3) {\n\
    \            return false\n        }\n        //28\n        if (date.split(\"\
    -\").length < 3) {\n            return false\n        }\n        //29\n      \
    \  if (date.split(\"-\").length < 3) {\n", "        val pattern = \"^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(20[19])$\"\
    .r\n        var isValid = pattern.findFirstIn(date).isDefined\n        if (!isValid)\
    \ {\n            isValid = false\n        }\n        if (isValid) {\n        \
    \    var daysInMonth = scala.collection.mutable.Map.empty[Int, Int]\n        \
    \    var tempDate = \"20\" + date.substring(3, 6)\n            val arrayOfString\
    \ = tempDate.split(\"-\")\n            daysInMonth += (arrayOfString(0).toInt\
    \ -> arrayOfString(1).toInt)\n            daysInMonth += (arrayOfString(1).toInt\
    \ -> arrayOfString(2).toInt)\n            daysInMonth += (arrayOfString(2).toInt\
    \ -> arrayOfString(3).toInt)\n            var currentDate = arrayOfString(3).toInt\n\
    \            var currentMonth = arrayOfString(0).toInt\n            var currentYear\
    \ = arrayOfString(1).toInt\n            while (currentYear < 2000) {\n       \
    \         var lastDayOfMonth = scala.collection.mutable.Map.empty[Int, Int]\n\
    \                tempDate = \"19\" + arrayOfString(0) + \"-\" + arrayOfString(1)\
    \ + \"-\" + arrayOfString(2)\n                val arrayOfString2 = tempDate.split(\"\
    -\")\n                lastDayOfMonth += (arrayOfString2(0).toInt -> arrayOfString2(1).toInt)\n\
    \                lastDayOfMonth += (arrayOfString2(1).toInt -> arrayOfString2(2).toInt)\n\
    \                lastDayOfMonth += (arrayOfString2(2).toInt -> arrayOfString2(3).toInt)\n\
    \                currentDate = lastDayOfMonth(currentMonth).toInt\n          \
    \      currentMonth = lastDayOfMonth(currentMonth).toInt\n                currentYear\
    \ = arrayOfString2(0).toInt\n            }\n            while (currentDate < 30)\
    \ {\n                currentDate = currentDate + 1\n                currentMonth\
    \ = currentMonth + 1\n                if (daysInMonth(currentMonth, currentYear)\
    \ < currentDate) {\n                    currentDate = currentDate + 1\n      \
    \          }\n            }\n            while (currentMonth < 12) {\n       \
    \         currentMonth = currentMonth + 1\n                if (daysInMonth(currentMonth,\
    \ currentYear) < 1) {\n                    currentMonth = currentMonth + 1\n \
    \                   currentYear = currentYear + 1\n                }\n       \
    \     }\n            if (currentMonth != 11 && daysInMonth(currentMonth, currentYear)\
    \ != 30) {\n                currentDate = currentDate + 1\n            }\n   \
    \         if (daysInMonth(currentMonth, currentYear) != 31) {\n              \
    \  currentMonth = currentMonth + 2\n            }\n            if (currentYear\
    \ != 2020 && currentYear != 2040) {\n                currentMonth", "        !date.isEmpty\
    \ && !date.matches(\"^\\\\d{0,1}-\\\\d{2}-\\\\d{4}$\") && \n            (\n  \
    \              !((date.charAt(0)>='0' && date.charAt(0)<='9') ||\n           \
    \     (date.charAt(0)>='0' && date.charAt(0)<='9')) && \n                !(date.charAt(1)>='0'\
    \ && date.charAt(1)<='9') &&\n                !(date.charAt(2)>='0' && date.charAt(2)<='9')\
    \ &&\n                !(date.charAt(3)>='0' && date.charAt(3)<='9') &&\n     \
    \           !(date.charAt(4)>='0' && date.charAt(4)<='9') &&\n               \
    \ (\n                    (date.charAt(5)>='0' && date.charAt(5)<='9') ||\n   \
    \                 (date.charAt(5)>='0' && date.charAt(5)<='9')) && \n        \
    \            (date.charAt(6)>='0' && date.charAt(6)<='9') &&\n               \
    \     (date.charAt(7)>='0' && date.charAt(7)<='9') &&\n                    (date.charAt(8)>='0'\
    \ && date.charAt(8)<='9') &&\n                    (date.charAt(9)>='0' && date.charAt(9)<='9')\
    \ &&\n                    (date.charAt(10)>='0' && date.charAt(10)<='9') &&\n\
    \                    (date.charAt(11)>='0' && date.charAt(11)<='9') &&\n     \
    \               (date.charAt(12)>='0' && date.charAt(12)<='9')\n             \
    \   )\n            )", "        if (date.isEmpty) {\n            return false\n\
    \        }\n        if (date.get.length != 10) {\n            return false\n \
    \       }\n        if (date.substring(0, 2).length != 2) {\n            return\
    \ false\n        }\n        val datePart = date.substring(0, 2)\n        var monthIndex\
    \ = months.indexOf(datePart.charAt(0)) + 1\n        var dayOfMonth = date.substring(2,\
    \ 4)\n        var year = date.substring(5, 10)\n        var dateObject = new Date(year,\
    \ monthIndex - 1, dayOfMonth)\n        if (dateObject.getTime <= 0 || dateObject.getTime\
    \ > Date()) {\n            return false\n        }\n        var monthIndex = months.indexOf(datePart.charAt(1))\
    \ + 1\n        if (monthIndex >= 12) {\n            monthIndex = 1\n         \
    \   year += datePart.charAt(1)\n        }\n        if (dayOfMonth.length != 2)\
    \ {\n            return false\n        }\n        var dayOfMonth = date.substring(2,\
    \ 4)\n        var year = date.substring(5, 10)\n        if (dayOfMonth.length\
    \ != 2) {\n            return false\n        }\n        var dateObject = new Date(year,\
    \ monthIndex - 1, dayOfMonth)\n        if (dateObject.getTime <= 0 || dateObject.getTime\
    \ > Date()) {\n            return false\n        }\n        var yearIndex = (year.toInt\
    \ % 400 + year.toInt / 400).toInt\n        if (yearIndex > 0 && yearIndex < 100)\
    \ {\n            return true\n        }\n        return false", "        val monthPattern\
    \ = \"(0|1|2|3|4|5|6|7|8|9|10|11|12)-\"\n        val dayPattern = \"([1-31]|30|29)-([1-9]|[12][0-9]|3[01])\"\
    \n        val datePattern = \"(\" + monthPattern + dayPattern + \")-([0-9]{4})\"\
    \n        val pattern = datePattern.r\n        val result = pattern.findFirstMatchIn(date).isDefined\n\
    \        result", "        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        return dateObj != null",
  "        val pattern = \"\\\\d{2}/\\\\d{2}/\\\\d{4}\".r\n        pattern findFirstIn\
    \ date match {\n            case Some(m) =>\n                val dateArray = m.split(\"\
    -\").toList\n                val monthValues = dateArray.map(m => m.toInt).toList\n\
    \                val dayValues = dateArray.toList\n                val maxDateInMonth\
    \ = monthValues.maxBy(m => m)\n                val minDateInMonth = monthValues.minBy(m\
    \ => m)\n                val minDayInMonth = dayValues.minBy(d => d)\n       \
    \         val maxDayInMonth = dayValues.maxBy(d => d)\n                (monthValues\
    \ diff List(1, 3, 5, 7, 8, 10, 12) forall monthValues.contains(monthValues)) &&\n\
    \                (monthValues diff List(4, 6, 9, 11) forall monthValues.contains(monthValues))\
    \ &&\n                (monthValues diff List(2, 12) forall monthValues.contains(monthValues))\
    \ &&\n                (dayValues diff List(1, 31) forall dayValues.contains(dayValues))\
    \ &&\n                (dayValues diff List(30) forall dayValues.contains(dayValues))\
    \ &&\n                (dayValues diff List(29) forall dayValues.contains(dayValues))\
    \ &&\n                (monthValues == monthValues.maxBy(m => m)) &&\n        \
    \        (dayValues == dayValues.maxBy(d => d)) &&\n                (dayValues\
    \ == dayValues.minBy(d => d)) &&\n                (minDayInMonth == dayValues.minBy(d\
    \ => d)) &&\n                (maxDayInMonth == dayValues.maxBy(d => d)) &&\n \
    \               (maxDateInMonth == monthValues.maxBy(m => m)) &&\n           \
    \     (minDateInMonth == monthValues.minBy(m => m))\n            case None =>\
    \ false\n        }", "        val dateArray = date.split('-')\n        if (dateArray.length\
    \ != 3) {\n            return false\n        }\n        val monthDays = dateArray(0).toInt\
    \ - dateArray(1).toInt\n        if (monthDays < 1 || monthDays > 31) {\n     \
    \       return false\n        }\n        val leapMonths = monthDays * 29 % 30\n\
    \        if (monthDays * 29 > 30) {\n            return false\n        }\n   \
    \     if (monthDays < 1 || monthDays > 29) {\n            return false\n     \
    \   }\n        if (monthDays(0) < 1 || monthDays(0) > 12) {\n            return\
    \ false\n        }\n        return true", "        val dateArr = date.split(\"\
    -\")\n        if (dateArr.length != 3) {\n            return false\n        }\n\
    \        val monthDays = Array(1,3,5,7,8,10,12,4,6,9,11,2)\n        val months\
    \ = Array(1,2,4,6,9,11)\n        monthDays.forall(months.contains)\n        val\
    \ monthIndex = monthDays.indexOf(dateArr(0))\n        val dayIndex = monthDays.indexOf(dateArr(1))\n\
    \        if (monthIndex > 12 || dayIndex > 31 || dayIndex < 1 || dayIndex > 29\
    \ || monthIndex < 1 || monthIndex > 12) {\n            return false\n        }\n\
    \        val monthDates = months.map(i => i to dateArr(0))\n        val dates\
    \ = monthDates.toSet ++ dateArr(1).toSet\n        return dates.forall(date.isDigit)",
  "        val parts = date.split(\"-\")\n        parts.length == 2 || parts.length\
    \ == 3 || parts.length == 4 || parts.length == 5 || parts.length == 6 || parts.length\
    \ == 7 || parts.length == 8 || parts.length == 9 || parts.length == 10", "   \
    \     var d = Date()\n        var day = d.getDay\n        var month = d.getMonth\n\
    \        var year = d.getYear\n        if(date == null || date.trim().isEmpty){\n\
    \            return false\n        }\n        var daysInMonth = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parseLenient(date).getDaysInMonth\n        if (day < 1 || day >\
    \ daysInMonth){\n            return false\n        }\n        var months = [JANUARY,FEBRUARY,MARCH,APRIL,MAY,JUNE,JULY,AUGUST,SEPTEMBER,OCTOBER,NOVEMBER,DECEMBER]\n\
    \        var monthLen = months.length\n        var monthsInYear = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parseLenient(year).getMonths\n        if(month < 1 || month > monthLen){\n\
    \            return false\n        }\n        if(month < 1 || month > monthsInYear){\n\
    \            return false\n        }\n        return true", "        val s = date.toString.trim\n\
    \        if (s.isEmpty) false\n        else (\n            (s.takeWhile(x => x.isDigit).size\
    \ < 1 || s.takeWhile(x => x.isDigit).size > 12) &&\n            (s.takeWhile(x\
    \ => x.isDigit).size < 3 || s.takeWhile(x => x.isDigit).size > 1) &&\n       \
    \     (s.takeWhile(x => x.isDigit).size < 6 || s.takeWhile(x => x.isDigit).size\
    \ > 4) &&\n            (s.takeWhile(x => x.isDigit).size < 9 || s.takeWhile(x\
    \ => x.isDigit).size > 2) &&\n            (s.takeWhile(x => x.isDigit).size <\
    \ 11 || s.takeWhile(x => x.isDigit).size > 2) &&\n            (s.takeWhile(x =>\
    \ x.isDigit).size < 14 || s.takeWhile(x => x.isDigit).size > 2) &&\n         \
    \   (s.takeWhile(x => x.isDigit).size < 18 || s.takeWhile(x => x.isDigit).size\
    \ > 2) &&\n            (s.takeWhile(x => x.isDigit).size < 21 || s.takeWhile(x\
    \ => x.isDigit).size > 2) &&\n            (s.takeWhile(x => x.isDigit).size <\
    \ 24 || s.takeWhile(x => x.isDigit).size > 2)\n        )", "       val d = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parseDateTime(date)\n       val month = d.getMonthValue\n      \
    \ val day = d.getDayOfMonth\n       val year = d.getYear\n       val monthsWithout30\
    \ = month - 2\n       val monthLessThan1OrHigher  = monthsWithout30 > 12\n   \
    \    val monthsWith31Days = monthsWithout30 == 3\n       val monthsWith29Days\
    \ = monthLessThan1OrHigher && monthsWith31Days\n       val monthLessThan1OrHigher2\
    \ = monthsWithout30 > 1\n       val dayLessThan1OrHigher2 = day > 31\n       val\
    \ dayLessThan1OrHigher3 = day > 30\n       val daysWithout29 = day > 29\n    \
    \   val isDateValid = monthLessThan1OrHigher2 && monthLessThan1OrHigher3 && dayLessThan1OrHigher2\
    \ && dayLessThan1OrHigher3 && daysWithout29 && isDate(year)\n       isDateValid",
  "        // Write your code here\n        val dateArray = date.split(\"-\")\n  \
    \      val monthInt = new java.util.SimpleDateFormat(\"MM\").parse(dateArray(0)).month\n\
    \        val dayInt = new java.util.SimpleDateFormat(\"dd\").parse(dateArray(1)).day\n\
    \        val yearInt = new java.util.SimpleDateFormat(\"yyyy\").parse(dateArray(2)).year\n\
    \n        (!dateArray.isEmpty && !monthInt.isEmpty && !dayInt.isEmpty && !yearInt.isEmpty)\n\
    \        && ((monthInt <= 12 && monthInt >= 1) || (monthInt >= 2 && monthInt <=\
    \ 4))\n        && ((dayInt >= 1 && dayInt <= 31) || (dayInt >= 1 && dayInt <=\
    \ 30))\n        && ((monthInt <= 12 && monthInt >= 4) || (monthInt >= 6 && monthInt\
    \ <= 9) || (monthInt >= 11 && monthInt <= 12))\n        && ((yearInt >= 1 && yearInt\
    \ <= 99) || (yearInt >= 2000 && yearInt <= 2020))", "        var validDate = false\n\
    \        val monthString = date.substring(0,2)\n        val dateString = date.substring(3,5)\n\
    \        val year = date.substring(6,10)\n        if (dateString.length != 2 )\
    \ {\n            return false\n        }\n        if (!(monthString.length ==\
    \ 2 && monthString == \"01\" && dateString.length == 1 )){\n            return\
    \ false\n        }\n        var days = dateString.length\n        if (monthString.length\
    \ == 2 && monthString == \"04\" && dateString.length == 2 ) {\n            days\
    \ = 29\n        } else if (monthString.length == 2 && monthString == \"06\" &&\
    \ dateString.length == 2 ){\n            days = 30\n        }else if (monthString.length\
    \ == 3 && monthString == \"01\" && dateString.length == 3 ){\n            days\
    \ = 31\n        }else if (monthString.length == 3 && monthString == \"03\" &&\
    \ dateString.length == 3 ){\n            days = 31\n        }\n        if (days\
    \ < 1 ) {\n            return false\n        }\n        if (days < 31 ) {\n  \
    \          return false\n        }\n        if (days > 30 ) {\n            return\
    \ false\n        }\n        if (monthString.length == 2 && monthString == \"02\"\
    \ && year.length == 2 ) {\n            days = 29\n        } else if (monthString.length\
    \ == 2 && monthString == \"02\" && year.length == 4 ){\n            days = 29\n\
    \        }\n        if (days < 1 ) {\n            return false\n        }\n  \
    \      if (days < 29 ) {\n            return false\n        }\n        if (days\
    \ > 31 ) {\n            return false\n        }\n        if (monthString.length\
    \ == 3 && monthString == \"03\" && year.length == 4 ) {\n            days = 31\n\
    \        } else if (monthString.length == 3 && monthString == \"03\" && year.length\
    \ == 6 ) {\n            days = 31\n        }\n        if (days < 1 ) {\n     \
    \       return false\n        }\n        if (days < 31 ) {\n            return\
    \ false\n        }\n        if (days > 29 ) {\n            return false\n    \
    \    }\n        validDate = true\n        return validDate", "        //TODO:\
    \ Write your code here\n        val date1 = date.split(\"-\")\n        val month\
    \ = date1(1).toInt\n        val day = date1(2).toInt\n        val year = date1(3).toInt\n\
    \        if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1 || year\
    \ > 9999 || month == 2 && day > 29 || day < 1 || (month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12 && day\
    \ > 31) || (month == 4 || month == 6 || month == 9 || month == 11 && day > 30))\n\
    \            return false\n        else\n            return true", "        if\
    \ (date == null || date.isEmpty) {\n            return true\n        }\n\n   \
    \     // day range is 1 to 31\n        var day = date.substring(0, 2).replace(\"\
    /\", \"-\").toInt\n        if (day < 1 || day > 31) {\n            return false\n\
    \        }\n\n        // month range is 1 to 12\n        var month = date.substring(3,\
    \ 5).replace(\"/\", \"-\").toInt\n        if (month < 1 || month > 12) {\n   \
    \         return false\n        }\n\n        // day range is 1 to 30\n       \
    \ var year = date.substring(6, 10).replace(\"/\", \"-\").toInt\n        if (year\
    \ < 1 || year > 30) {\n            return false\n        }\n\n        if (month\
    \ == 2 && (day > 29 || day < 1)) {\n            return false\n        }\n\n  \
    \      if (month == 1 && (day > 31)) {\n            return false\n        }\n\n\
    \        return true", "        if (date.isEmpty || date.split(\" \").length <\
    \ 3) {\n            return false\n        }\n        else {\n            // return\
    \ false\n        }", '        date.length != 0', "        val months = List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        val days = List(1, 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val checkMonth = for (i <- 1 to\
    \ 12) yield {\n            if(date.substring(0, 2).toInt == months(i)) {\n   \
    \             date.substring(0, 2).length == 2\n            }\n            else\
    \ {\n                false\n            }\n        }\n        val checkDay = for\
    \ (i <- 1 to 31) yield {\n            if(date.substring(0, 2).toInt == months(i)\
    \ && date.substring(3, 5).toInt == days(i)) {\n                date.substring(3,\
    \ 5).length == 5\n            }\n            else {\n                false\n \
    \           }\n        }\n        if(!date.equals(\"\") && checkMonth.forall(x\
    \ => x) && checkDay.forall(x => x)) {\n            val year = date.substring(0,\
    \ 4).toInt\n            if(year > 2000) {\n                val monthAndDay = date.substring(5,\
    \ 7)\n                val day = monthAndDay.substring(0, 2)\n                val\
    \ month = monthAndDay.substring(2, 4)\n                val year = monthAndDay.substring(4,\
    \ 6)\n                if(month >= 1 && month <= 12 && day >= 1 && day <= 31 &&\
    \ (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)) {\n                 \
    \   true\n                }\n                else {\n                    false\n\
    \                }\n            }\n            else {\n                false\n\
    \            }\n        }\n        else {\n            false\n        }", "  \
    \      val pattern = \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        val matcher\
    \ = pattern.findFirstIn(date)\n        matcher.forall {\n            case Some(date)\
    \ =>\n                date == (matcher.group(0).toInt - 1) &&\n              \
    \  !(matcher.group(0).toInt == 3 && date > 1 && date < 32 && date > 30 && date\
    \ < 29) &&\n                !(matcher.group(0).toInt == 1 && date > 0 && date\
    \ < 12) &&\n                !(matcher.group(0).toInt == 4 && date > 1 && date\
    \ < 31)\n        }", "        // Write your code here\n        if(date.length\
    \ > 0){\n            if(date.length != 8 && date.length != 6 && date.length !=\
    \ 4){\n                return false\n            }\n            val monthMap =\
    \ new scala.collection.mutable.HashMap[Int, Int]()\n            for(i <- 1 to\
    \ 12){\n                val date = date.replace(\"-\",\"\")\n                val\
    \ split = date.split(\"/\")\n                if(split.length != 3){\n        \
    \            return false\n                }\n                val monthVal = split(0).toInt\n\
    \                val dayVal = split(1).toInt\n                if(monthVal > 12){\n\
    \                    return false\n                }\n                if(monthMap.contains(monthVal)){\n\
    \                    monthMap += monthVal -> monthMap.getOrElse(monthVal, 0) +\
    \ 1\n                }else{\n                    monthMap += monthVal -> 1\n \
    \               }\n                if(dayVal > 31){\n                    return\
    \ false\n                }\n                if(dayVal < 1){\n                \
    \    return false\n                }\n                if(dayVal > 30){\n     \
    \               return false\n                }\n                if(dayVal < 1){\n\
    \                    return false\n                }\n            }\n        \
    \    val maxValue = monthMap.values.max\n            if(maxValue == 0){\n    \
    \            return false\n            }\n            if(monthMap.size > maxValue){\n\
    \                return false\n            }\n        }\n        true", "    \
    \    if(!date.isEmpty)\n        {\n            val pattern = \"(\\\\d{1,2})-(0?[1-9]|1[012])-((19|20)\\\
    \\d{2})\".r\n            pattern.findFirstIn(date).isDefined\n        }\n    \
    \    else\n        {\n            false\n        }", "        if(date.isEmpty)\n\
    \            return false\n        if(date.length != 7)\n            return false\n\
    \        if(date.charAt(2).toInt < 1 || date.charAt(2).toInt > 12)\n         \
    \   return false\n        if(date.charAt(3).toInt < 1 || date.charAt(3).toInt\
    \ > 31)\n            return false\n        if(date.charAt(5).toInt < 1 || date.charAt(5).toInt\
    \ > 30)\n            return false\n        if(date.charAt(7).toInt < 1 || date.charAt(7).toInt\
    \ > 29)\n            return false\n        true", "        if(date == \"\") false\n\
    \        if(date.indexOf(\"-\") < 1 || date.indexOf(\"-\") > 10) false\n     \
    \   if(date.indexOf(\"/\") < 1 || date.indexOf(\"/\") > 10) false\n        if(date.indexOf(\"\
    -\") > date.indexOf(\"/\")) false\n        if(date.indexOf(\"/\") > date.indexOf(\"\
    -\")) false\n        val dateArray = date.split(\"-\")\n        if(dateArray.length\
    \ < 3) false\n        if(dateArray.length > (3 + 12)) false\n        if(dateArray(0)\
    \ > 2) false\n        if(dateArray(1) > 12 || dateArray(1) < 1) false\n      \
    \  if(dateArray(2) < 1 || dateArray(2) > 12) false\n        true", "        val\
    \ dateArray = date.split(\"-\")\n        dateArray.size <= 2 || dateArray.size\
    \ >= 4 || dateArray(0).toInt <= 1 || dateArray(0).toInt >= 12 || dateArray(1).toInt\
    \ <= 1 || dateArray(1).toInt >= 31 || dateArray(2).toInt <= 1 || dateArray(2).toInt\
    \ >= 29 || dateArray(3).toInt <= 1 || dateArray(3).toInt >= 12", "        val\
    \ valid = date.nonEmpty && date.contains(\"-\") && date.substring(0,2).length\
    \ == 3\n        val month = date.substring(2,4)\n        val day = date.substring(4,6)\n\
    \        val year = date.substring(6,10)\n        if (valid && month.length ==\
    \ 1 && month != \"01\" && month != \"03\" && month != \"05\" && month != \"07\"\
    \ && month != \"08\" && month != \"10\" && month != \"12\" &&\n        day.length\
    \ == 1 && day != \"01\" && day != \"03\" && day != \"05\" && day != \"07\" &&\
    \ day != \"08\" && day != \"10\" && day != \"12\" &&\n        year.length == 4\
    \ && year != \"2000\" && year != \"2040\")\n        {\n            true\n    \
    \    }\n        else\n        {\n            false\n        }", "        if (date.isEmpty)\n\
    \            return false\n\n        val split = date.split(\"-\")\n        if\
    \ (split.length != 3)\n            return false\n\n        val month = split(0).toInt\n\
    \        val day = split(1).toInt\n        val year = split(2).toInt\n       \
    \ val maxDay = 32\n        val minDay = 1\n        val maxMonth = 12\n       \
    \ val minMonth = 1\n\n        if (month < minMonth || month > maxMonth)\n    \
    \        return false\n\n        if (day < minDay || day > maxDay)\n         \
    \   return false\n\n        if (year < 1000 || year > 3000)\n            return\
    \ false\n\n        // A valid date is greater than 1 AND less than 30 days.\n\
    \        if (month == 2)\n            return (year % 4 == 0 && year % 100 != 0\
    \ || year % 400 == 0)\n        else\n            return true", "        val dateParts\
    \ = date.split(\"/\")\n        val numDays = dateParts(2).toInt\n        val months\
    \ = dateParts(0).toInt\n        val year = dateParts(1).toInt\n        val isValidDate\
    \ = (numDays != null && months != null && year != null) && \n            (months\
    \ <= 12 && months >= 1 && numDays <= 30 && numDays >= 1 && \n            (!(months\
    \ == 0 && numDays == 29 && months == 12)))\n        val isValidYear = year <=\
    \ 15\n        val isValidMonth = months < 13\n        val isValidYearAndMonth\
    \ = isValidYear && isValidMonth\n        isValidDate && isValidYearAndMonth",
  "        date.isEmpty || date.size < 1 || date.size > 31 ||\n            date.size\
    \ < 1 || date.size > 30 ||\n            date.size < 1 || date.size > 29 ||\n \
    \           (date match { case \"0|1\" => \"0|1|2|3|4|5|6|7|8|9|10|11|12\".split('|')\
    \ })(0) > 12 ||\n            date match { case \"[1-12][0-9]|0[0-3]|0[1-9]|[1-9]\"\
    \ => \"0|1|2|3|4|5|6|7|8|9|10|11|12\".split('|') }(0) > 12 ||\n            date\
    \ match { case \"[1-12][0-9]|0[1-9]|[1-9]/[1-9]/[1-9]\" => \"0|1|2|3|4|5|6|7|8|9|10|11|12\"\
    .split('|') }(0) > 12", "        val dateStr = new SimpleDateFormat(\"MM-dd-yyyy\"\
    ).parse(date)\n        if(dateStr == null) {\n            return false\n     \
    \   }\n        val cal = Calendar.getInstance();\n        cal.setTime(dateStr);\n\
    \        val days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n        val\
    \ month = cal.get(Calendar.MONTH)+1;\n        val year = cal.get(Calendar.YEAR);\n\
    \        if(days>=1 && days<=31 && month>1 && month<=12 && year>=1 && year<=1000)\
    \ {\n            return true\n        }\n        val monthsToCheck = 31;\n   \
    \     var monthCheck = 1;\n        val daysToCheck = 30;\n        var daysCheck\
    \ = 1;\n        if(month>1 && month<=12){\n            monthsToCheck = 31;\n \
    \           monthCheck = 1;\n            daysToCheck = 30;\n            daysCheck\
    \ = 1;\n        }\n        val daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \        val daysInYear = daysInMonth;\n        if(monthCheck>=1 && monthCheck<=12){\n\
    \            daysInMonth += 1;\n        }\n        if(daysCheck>=1 && daysCheck<=daysInMonth)\
    \ {\n            daysInYear += 1;\n        }\n        if(year>=1 && year<=1000\
    \ && monthsToCheck>=1 && monthsToCheck<=12 && daysToCheck>=1 && daysToCheck<=daysInYear)\
    \ {\n            return true\n        }\n        return false", "        val parts\
    \ = date.split(\"-\")\n        if (parts.size == 3) {\n            var flag1 =\
    \ true\n            var flag2 = true\n            var flag3 = true\n         \
    \   var flag4 = true\n            var flag5 = true\n            var flag6 = true\n\
    \            var flag7 = true\n            var flag8 = true\n            var flag9\
    \ = true\n            var flag10 = true\n            var flag11 = true\n     \
    \       var flag12 = true\n            var flag13 = true\n            var flag14\
    \ = true\n            var flag15 = true\n            var flag16 = true\n     \
    \       var flag17 = true\n            var flag18 = true\n            var flag19\
    \ = true\n            var flag20 = true\n            var flag21 = true\n     \
    \       var flag22 = true\n            var flag23 = true\n            var flag24\
    \ = true\n            var flag25 = true\n            var flag26 = true\n     \
    \       var flag27 = true\n            var flag28 = true\n            var flag29\
    \ = true\n            var flag30 = true\n            var flag31 = true\n     \
    \       var flag32 = true\n            var flag33 = true\n            var flag34\
    \ = true\n            var flag35 = true\n            var flag36 = true\n     \
    \       var flag37 = true\n            var flag38 = true\n            var flag39\
    \ = true\n            var flag40 = true\n            var flag41 = true\n     \
    \       var flag42 = true\n            var flag43 = true\n            var flag44\
    \ = true\n            var flag45 = true\n            var flag46 = true\n     \
    \       var flag47 = true\n            var flag48 = true\n            var flag49\
    \ = true\n            var flag50 = true\n            var flag51 = true\n     \
    \       var flag52 = true\n            var flag53 = true\n            var flag54\
    \ = true\n            var flag55 = true\n            var flag56 = true\n     \
    \       var flag57 = true\n            var flag58 = true\n            var flag59\
    \ = true\n            var flag60 = true\n            var flag61 = true\n     \
    \       var flag62 = true\n            var flag63 = true\n            var flag64\
    \ = true\n            var flag65 = true\n            var flag66 = true\n     \
    \       var flag67 = true\n            var flag68 = true\n            var flag69\
    \ = true\n            var flag70 = true\n            var flag71 = true\n     \
    \       var flag72 = true\n            var flag73 = true\n            var flag74\
    \ = true\n            var flag75 = true\n            var flag76 = true\n     \
    \       var flag77 = true\n            var flag78 = true\n            var flag79\
    \ = true\n            var flag80 = true\n            var flag81 = true\n     \
    \       var flag82 = true\n            var flag83 = true\n            var flag84\
    \ = true\n            var flag85 = true\n            var flag86 = true\n     \
    \       var flag87 = true\n            var flag88 = true\n            var flag89\
    \ = true\n            var flag90 = true\n            var flag91 = true\n     \
    \       var flag92 = true\n            var flag93 = true\n            var flag94\
    \ = true\n            var flag95 = true\n", "        val format = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\");\n        val formatter = DateTimeFormat.forPattern(\"MM-dd-yyyy\"\
    );\n        val dateString = formatter.parseDateTime(date)\n        val months\
    \ = mutable.ArrayBuffer.empty[Int]\n        val days = mutable.ArrayBuffer.empty[Int]\n\
    \        val years = mutable.ArrayBuffer.empty[Int]\n        dateString.getMonthValue\
    \ match {\n            case 1 => (months += 1)\n            case 3 => (months\
    \ += 1)\n            case 5 => (months += 1)\n            case 7 => (months +=\
    \ 1)\n            case 8 => (months += 1)\n            case 10 => (months += 1)\n\
    \            case 12 => (months += 1)\n            case 4 => (months += 1)\n \
    \           case 6 => (months += 1)\n            case 9 => (months += 1)\n   \
    \         case 11 => (months += 1)\n            case 2 => (months += 1)\n    \
    \        case _ => (months += 0)\n        }\n        dateString.getDayOfMonth\
    \ match {\n            case 1 => (days += 1)\n            case 3 => (days += 1)\n\
    \            case 5 => (days += 1)\n            case 7 => (days += 1)\n      \
    \      case 8 => (days += 1)\n            case 10 => (days += 1)\n           \
    \ case 12 => (days += 1)\n            case 4 => (days += 1)\n            case\
    \ 6 => (days += 1)\n            case 9 => (days += 1)\n            case 11 =>\
    \ (days += 1)\n            case 2 => (days += 1)\n            case _ => (days\
    \ += 0)\n        }\n        dateString.getYear match {\n            case 4 =>\
    \ (years += 1)\n            case 6 => (years += 1)\n            case 9 => (years\
    \ += 1)\n            case 11 => (years += 1)\n            case _ => (years +=\
    \ 0)\n        }\n        days.toSet.size == 31 & months.toSet.size == 12 & years.toSet.size\
    \ == 4", "        date.nonEmpty && date.count(x => x == '-') < 2 &&\n        date.count(x\
    \ => x == '/') < 2 &&\n        date.count(x => x < '1' && x > '12') < 2 &&\n \
    \       date.count(x => x < '1' && x > '3') < 2 &&\n        date.count(x => x\
    \ < '1' && x > '5') < 2 &&\n        date.count(x => x < '1' && x > '7') < 2 &&\n\
    \        date.count(x => x < '1' && x > '8') < 2 &&\n        date.count(x => x\
    \ < '1' && x > '10') < 2 &&\n        date.count(x => x < '1' && x > '12') < 2",
  "        val dateArray = date.split(\"-\")\n        var validDate : Boolean = false\n\
    \        val dateLength = (dateArray.length)\n        var month : Int = 1\n  \
    \      var day : Int = 1\n        var year : Int = 2000\n\n        // Validate\
    \ date string is not empty.\n        if (!dateArray(0).isEmpty) {\n          \
    \  validDate = true\n        }\n\n        // Validate date string has only 1 element\
    \ if the date string is less than 31 days then we consider it as invalid date.\n\
    \        if (dateLength < 2 ) {\n            validDate = false\n        } else\
    \ {\n            // Validate if date string has only 1 element\n            validDate\
    \ = true\n            day = dateArray(1).toInt\n            day = if (day < 1\
    \ || day > 31) {\n                validDate = false\n            } else {\n  \
    \              day\n            }\n        }\n\n        // Validate if date string\
    \ has only 1 element and month is less than or equal than 12.\n        if (dateLength\
    \ < 3 ) {\n            validDate = false\n        } else {\n            month\
    \ = dateArray(0).toInt\n            month = if (month < 1 || month > 12) {\n \
    \               validDate = false\n            } else {\n                month\n\
    \            }\n        }\n\n        // Validate if the date string has only 1\
    \ element and year is less than or equal than 2010.\n        if (dateLength <\
    \ 4 ) {\n            validDate = false\n        } else {\n            year = dateArray(3).toInt\n\
    \            year = if (year < 1 || year > 2040) {\n                validDate\
    \ = false\n            } else {\n                year\n            }\n       \
    \ }\n\n        if (validDate) {\n            println(s\"Date String: ${date} is\
    \ valid date\")\n        }\n        return validDate", "        var isValid :\
    \ Boolean = true\n\n        if(!date.isEmpty){\n            isValid = false\n\
    \            if(date.length != 10){\n                isValid = false\n       \
    \     }\n            else {\n                val year = Integer.parseInt(date.substring(0,4))\n\
    \                val month = Integer.parseInt(date.substring(4,6))\n         \
    \       val date = Integer.parseInt(date.substring(6,8))\n                if(month\
    \ < 1 || month > 12){\n                    isValid = false\n                }\n\
    \                if(date < 1 || date > 31) {\n                    isValid = false\n\
    \                }\n                if(date < 1 || date > 29) {\n            \
    \        isValid = false\n                }\n            }\n        }\n      \
    \  isValid", "        // Write your validation logic here\n        val date =\
    \ date.split(\"/\")\n        var datePart = \"\"\n        var dayPart = \"\"\n\
    \        var yearPart = \"\"\n        for(i <- 0 until date.length){\n       \
    \     datePart = date(i)\n            dayPart = datePart.split(\"-\")(0)\n   \
    \         yearPart = datePart.split(\"-\")(1)\n            if(dayPart.length <\
    \ 1 || dayPart.length > 31 ||\n                (monthOfYear(yearPart) > 2 && dayPart.length\
    \ < 1) ||\n                (monthOfYear(yearPart) > 12 && dayPart.length < 1)\
    \ ||\n                (monthOfYear(yearPart) < 1 && dayPart.length < 1) ||\n \
    \               monthOfYear(yearPart) < 1 || monthOfYear(yearPart) > 12){\n  \
    \              return false\n            }\n        }\n        return true", " \
    \       // Your code goes here\n        if(!date.isEmpty){\n            val dateParts\
    \ = date.split(\"/\")\n            val month = dateParts(0).toInt\n          \
    \  val day = dateParts(1).toInt\n            val year = dateParts(2).toInt\n \
    \           val dateFormatter = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n  \
    \          val parsedDate = dateFormatter.parseDateTime(date).withTemporalAccessor(TemporalAccessor.of(year,\
    \ month, day))\n            val numberOfDaysInJanuary = 31\n            val numberOfDaysInApril\
    \ = 30\n            val numberOfDaysInJuly = 31\n            if(month == 1){\n\
    \                if(day < 1 || day > numberOfDaysInJanuary){\n               \
    \     return false\n                }\n            }else if(month == 3){\n   \
    \             if(day < 1 || day > numberOfDaysInApril){\n                    return\
    \ false\n                }\n            }else if(month == 5){\n              \
    \  if(day < 1 || day > numberOfDaysInJuly){\n                    return false\n\
    \                }\n            }else if(month == 7){\n                if(day\
    \ < 1 || day > numberOfDaysInJuly){\n                    return false\n      \
    \          }\n            }else if(month == 8){\n                if(day < 1 ||\
    \ day > numberOfDaysInJuly){\n                    return false\n             \
    \   }\n            }else if(month == 10){\n                if(day < 1 || day >\
    \ numberOfDaysInJuly){\n                    return false\n                }\n\
    \            }else if(month == 12){\n                if(day < 1 || day > numberOfDaysInJanuary){\n\
    \                    return false\n                }\n            }\n        }\n\
    \        return true", "        val pattern = \"^([0-2][1-9]|3[0-1])/([0-2][1-9]|1[0-1])/([0-9]{4})$\"\
    \n        val m = new SimpleDateFormat(pattern).parse(date)\n        m.getTime\
    \ != 0", "        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\")\n    \
    \    val dateObj = dateFormat.parse(date)\n        var valid : Boolean = true\n\
    \        var days : Int = 0\n        var month : Int = 0\n        var year : Int\
    \ = 0\n\n        try {\n            days = dateObj.getActualMaximum(Calendar.DAY_OF_MONTH)\n\
    \        } catch (exception : Exception) {\n            valid = false\n      \
    \  }\n\n        try {\n            month = dateObj.getActualMaximum(Calendar.MONTH)\n\
    \        } catch (exception : Exception) {\n            valid = false\n      \
    \  }\n\n        try {\n            year = dateObj.getActualMaximum(Calendar.YEAR)\n\
    \        } catch (exception : Exception) {\n            valid = false\n      \
    \  }\n\n        if (valid == true && month < 1 || month > 12 || days < 1 || days\
    \ > 31 || year < 1 || year > 2040) {\n            valid = false\n        } else\
    \ {\n            valid = true\n        }\n\n        return valid", "        val\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\")\n        format.parse(date)",
  "        def isValid(dateString: String): Boolean = {\n            if (dateString.isEmpty)\
    \ {\n                false\n            }\n            else {\n              \
    \  val dateArray = dateString.split(\"-\")\n                val year: Int = dateArray(0).toInt\n\
    \                val month: Int = dateArray(1).toInt\n                val day:\
    \ Int = dateArray(2).toInt\n\n                if (year < 1 || year > 9999) {\n\
    \                    false\n                }\n                else if (month\
    \ < 1 || month > 12) {\n                    false\n                }\n       \
    \         else if (day < 1 || day > 31 || (month == 2 && day > 29)) {\n      \
    \              false\n                }\n                else {\n            \
    \        true\n                }\n            }\n        }\n        isValid(date)",
  "        def isValidDate(date: String) = !(date == \"\" && date.length == 0)\n \
    \       def isValidDate(date:String):Boolean = {\n            val splittedDates\
    \ = date.split(\"-\")\n            val monthInt = splittedDates(0)\n         \
    \   val dayInt = splittedDates(1)\n            val yearInt = splittedDates(2)\n\
    \n            if (monthInt.toInt < 1 || monthInt.toInt > 12) false\n         \
    \   if (dayInt.toInt < 1 || dayInt.toInt > 31) false\n            if (dayInt.toInt\
    \ < 1 || dayInt.toInt > 30) false\n            if (dayInt.toInt < 1 || dayInt.toInt\
    \ > 29) false\n            if (monthInt.toInt == 2 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 30) false\n            if (monthInt.toInt == 2 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 29) false\n            if (monthInt.toInt == 2 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 28) false\n            if (monthInt.toInt == 3 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 31) false\n            if (monthInt.toInt == 3 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 30) false\n            if (monthInt.toInt == 3 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 29) false\n            if (monthInt.toInt == 3 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 28) false\n            if (monthInt.toInt == 4 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 31) false\n            if (monthInt.toInt == 4 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 30) false\n            if (monthInt.toInt == 4 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 29) false\n            if (monthInt.toInt == 4 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 28) false\n            if (monthInt.toInt == 5 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 31) false\n            if (monthInt.toInt == 5 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 30) false\n            if (monthInt.toInt == 5 && dayInt.toInt < 1 || dayInt.toInt\
    \ > 29) false\n            if (monthInt.toInt == 5 && day", "        if(date.isEmpty)\n\
    \            return false\n        var dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        if(dateArray(0).toInt\
    \ < 1 || dateArray(0).toInt > 12)\n            return false\n        if(dateArray(1).toInt\
    \ < 1 || dateArray(1).toInt > 31)\n            return false\n        if(dateArray(2).toInt\
    \ < 1 || dateArray(2).toInt > 30)\n            return false\n        if(dateArray(1).toInt\
    \ == dateArray(1).toInt && dateArray(2).toInt == dateArray(2).toInt)\n       \
    \     return true\n        else\n            return false", "        val pattern\
    \ = \"(\\\\d{2})-(\\\\d{2}-\\\\d{4})\" // match mm-dd-yyyy\n        val pattern2\
    \ = \"(\\\\d{2})/(\\\\d{2})/(\\\\d{4})\" // match mm-dd-yyyy\n        val pattern3\
    \ = \"(\\\\d{2})-(\\\\d{2})/(\\\\d{4})\" // match dd-mm-yyyy\n        val pattern4\
    \ = \"(\\\\d{2})/(\\\\d{2})-(\\\\d{4})\" // match dd-mm-yyyy\n        val pattern5\
    \ = \"(\\\\d{2})-(\\\\d{2})\" // match dd-mm-yyyy\n        val pattern6 = (\"\
    (\\\\d{2})/(\\\\d{2})\")\n        val pattern7 = (\"(\\\\d{2})-(\\\\d{2})\")\n\
    \        val pattern8 = (\"(\\\\d{2})/(\\\\d{2})\")\n        val pattern9 = (\"\
    (\\\\d{2})-(\\\\d{2})\")\n\n        val patternMatcher = pattern.r\n        val\
    \ patternMatcher2 = pattern2.r\n        val patternMatcher3 = pattern3.r\n   \
    \     val patternMatcher4 = pattern4.r\n        val patternMatcher5 = pattern5.r\n\
    \        val patternMatcher6 = pattern6.r\n        val patternMatcher7 = pattern7.r\n\
    \        val patternMatcher8 = pattern8.r\n        val patternMatcher9 = pattern9.r\n\
    \n        if(!date.isEmpty){\n            if(date.length() > 9){\n           \
    \     var day1 = date.substring(0,2)\n                var month1 = date.substring(3,5)\n\
    \                var year1 = date.substring(6,9)\n\n                println(day1)\n\
    \                println(month1)\n                println(year1)\n\n         \
    \       var day2 = day1.toInt\n                var month2 = month1.toInt\n   \
    \             var year2 = year1.toInt\n\n                println(day2)\n     \
    \           println(month2)\n                println(year2)\n\n              \
    \  var day3 = day2 - 1\n                var month3 = month2\n                var\
    \ year3 = year2\n\n                if(month3 > 12){\n                    month3\
    \ = month3 - 12\n                    year3 = year3+1\n                }\n\n  \
    \              println(day3)\n                println(month3)\n              \
    \  println(year3)\n\n                var day4 = day3\n                var month4\
    \ = month3\n                var year4 = year3\n\n                if(day4 > 0){\n\
    \                    month4 = month4 + 1\n                }\n\n              \
    \  println(day4)\n                println(month4)\n                println(year4)\n\
    \n                var day5 = day4\n                var month5 = month4\n     \
    \           var year5 = year4\n\n                if(month5 > 12){\n          \
    \          month5 = month5 - 12\n                    year5 = year5", "       \
    \ if (date == null || date == \"\") false\n        if (date.length() < 1 || date.length()\
    \ > 10) false\n        var dateParts = date.split(\"-\")\n        val monthDays\
    \ = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        val leapYears = List(3,\
    \ 5, 7, 8, 10, 12)\n        val monthsLessThan1OrHigherThan31 = List(4, 6, 9,\
    \ 11)\n        val monthsLessThan1OrHigherThan30 = List(2, 4, 6, 9, 11)\n    \
    \    val monthsLessThan1OrHigherThan29 = List(1, 3, 5, 7, 8, 10)\n        if (dateParts.length\
    \ != 3) false\n        if (monthDays.contains(monthParts(0).toInt)) false\n  \
    \      if (leapYears.contains(monthParts(1).toInt)) false\n        if (monthsLessThan1OrHigherThan31.contains(monthParts(2).toInt))\
    \ false\n        if (monthsLessThan1OrHigherThan30.contains(monthParts(2).toInt))\
    \ false\n        if (monthsLessThan1OrHigherThan29.contains(monthParts(2).toInt))\
    \ false\n        if (monthParts(2).toInt < 1 || monthParts(2).toInt > 12) false\n\
    \        if (!dateParts(0).toString.equalsIgnoreCase(\"01\") || !dateParts(1).toString.equalsIgnoreCase(\"\
    02\") || !dateParts(2).toString.equalsIgnoreCase(\"03\") || !dateParts(3).toString.equalsIgnoreCase(\"\
    04\") || !dateParts(4).toString.equalsIgnoreCase(\"05\") || !dateParts(5).toString.equalsIgnoreCase(\"\
    06\") || !dateParts(6).toString.equalsIgnoreCase(\"07\") || !dateParts(7).toString.equalsIgnoreCase(\"\
    08\") || !dateParts(8).toString.equalsIgnoreCase(\"09\") || !dateParts(9).toString.equalsIgnoreCase(\"\
    10\") || !dateParts(10).toString.equalsIgnoreCase(\"11\") || !dateParts(11).toString.equalsIgnoreCase(\"\
    12\") || !dateParts(12).toString.equalsIgnoreCase(\"13\") || !dateParts(13).toString.equalsIgnoreCase(\"\
    14\") || !dateParts(14).toString.equalsIgnoreCase(\"15\") || !dateParts(15).toString.equalsIgnoreCase(\"\
    16\") || !dateParts(16).toString.equalsIgnoreCase(\"17\") || !dateParts(17).toString.equalsIgnoreCase(\"\
    18\") || !dateParts(18).toString.equalsIgnoreCase(\"19\") || !dateParts(19).toString.equalsIgnoreCase(\"\
    20\") || !dateParts(", '        // Your code here', "        val dateFormat =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString.toString().length >= 1 && dateString.toString().length <=\
    \ 31\n        && dateString.toString().length >= 1 && dateString.toString().length\
    \ <= 30\n        && dateString.toString().length >= 1 && dateString.toString().length\
    \ <= 29\n        && dateString.toString().length >= 1 && dateString.toString().length\
    \ <= 12", "        // (1) date is not empty\n        if(!date.isEmpty){\n    \
    \        // (2) number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n            val day = date.substring(0, 2);\n    \
    \        if(day == 0 || day == 1 || day == 3 || day == 5 || day == 7 || day ==\
    \ 8 || day == 10 || day == 12){\n                val month = date.substring(3,\
    \ 5);\n                if(month == 0 || month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n              \
    \      val year = date.substring(6, 10); // the year is in double quotes\n   \
    \                 if(year.length < 4 || year.length > 4){\n                  \
    \      return false\n                    }\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val dateArray = date.split(\"-\")\n        if(dateArray.length != 3)\n     \
    \       return false\n        var months = mutable.ArrayBuffer.empty[Int]\n  \
    \      val days = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until dateArray.length)\
    \ {\n            val temp = dateArray(i)\n            months.append(month(temp(0)))\n\
    \            days.append(day(temp(1)))\n        }\n        if(months.take(2) ==\
    \ months.takeRight(2))\n            return false\n        if(months.take(2) ==\
    \ 1 || months.take(2) == 3 || months.take(2) == 5 || months.take(2) == 7 || months.take(2)\
    \ == 8 || months.take(2) == 10 || months.take(2) == 12)\n            return false\n\
    \        if(months.take(3) == 0 || months.take(3) == 4 || months.take(3) == 6\
    \ || months.take(3) == 9 || months.take(3) == 11)\n            return false\n\
    \        if(days.take(3) != 1 || days.take(3) != 31 || days.take(3) != 30)\n \
    \           return false\n        if(days.take(2) == 0 || days.take(2) == 29)\n\
    \            return false\n        return true", "        var date = date\n  \
    \      val splitDate = date.split(\"-\")\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        var totalDays = 0\n        var totalMonths = 0\n        var currentYear\
    \ = 0\n        var currentMonth = 0\n        var currentDay = 0\n        val dateArray\
    \ = splitDate.toArray\n        for ( a <- 0 until splitDate.length){\n       \
    \     val dateString = dateArray(a)\n            val datePart = dateString.split(\"\
    -\")\n            currentYear = datePart(0)\n            currentMonth = datePart(1)\n\
    \            currentDay = datePart(2)\n            totalDays = totalDays + currentDay\n\
    \            totalMonths = totalMonths + currentMonth\n            if ( currentMonth\
    \ == 1 || currentMonth == 3 || currentMonth == 5 || currentMonth == 7 || currentMonth\
    \ == 8 || currentMonth == 10 || currentMonth == 12)\n            {\n         \
    \       if (currentYear == currentMonth)\n                {\n                \
    \    dateArray(a) = currentMonth+\"-\"+currentDay+\"-\"+currentYear\n        \
    \        }\n                else\n                {\n                    dateArray(a)\
    \ = currentYear+\"-\"+currentMonth+\"-\"+currentDay\n                }\n     \
    \       }\n            else\n            {\n                if (currentYear ==\
    \ currentMonth)\n                {\n                    dateArray(a) = currentYear+\"\
    -\"+currentDay+\"-\"+currentMonth\n                }\n                else\n \
    \               {\n                    dateArray(a) = currentMonth+\"-\"+currentYear+\"\
    -\"+currentDay\n                }\n            }\n        }\n        if (totalDays\
    \ < 1 || totalMonths < 1 || totalMonths > 12 || totalDays > daysInMonth(currentMonth)\
    \ || totalDays < 1 || totalMonths < 1 || totalMonths > 12 || totalDays > daysInMonth(currentMonth))\n\
    \        {\n            return false\n        }\n        else\n        {\n   \
    \         return true\n        }", "        if(!date.isEmpty){\n            if(date.getMonth\
    \ < 1 || date.getMonth > 12){\n                return false\n            }\n \
    \           val dateParts = date.split(\"-\")\n            if(dateParts.length\
    \ == 3){\n                if(!dateParts(0).isEmpty && !dateParts(1).isEmpty &&\
    \ !dateParts(2).isEmpty){\n                    if(dateParts(0).toInt == dateParts(1).toInt\
    \ && dateParts(1).toInt == dateParts(2).toInt){\n                        if(dateParts(2)\
    \ > dateParts(0)){\n                            return false\n               \
    \         }\n                    }\n                }\n            }\n       \
    \     else if(dateParts.length == 2){\n                if(!dateParts(0).isEmpty\
    \ && !dateParts(1).isEmpty){\n                    if(dateParts(0).toInt == dateParts(1).toInt){\n\
    \                        if(dateParts(1) > dateParts(0)){\n                  \
    \          return false\n                        }\n                    }\n  \
    \              }\n            }\n            else{\n                return false\n\
    \            }\n        }\n        else{\n            return true\n        }",
  "        if(date.isEmpty)\n            return true\n        var splitDate = date.split(\"\
    -\")\n        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \        var months = [1,2,3,4,5,6,7,8,9,10,11]\n        var dateParts = splitDate.toInt\n\
    \        var month = dateParts % 100\n        var day = dateParts % 100\n    \
    \    var year = dateParts / 100\n        if(day < 1 || day > daysInMonth[month])\n\
    \            return false\n        val year = if (month < 1 || month > 12) year\
    \ else year + 48\n        if(month > 2 && day < 1 || day > 30)\n            return\
    \ false\n        if(month == 2 && day < 1 || day > 29)\n            return false\n\
    \        if(month == 2 && day > 30 || day > 31)\n            return false\n  \
    \      true", "        // Your code goes here\n        val dateList = date.split(\"\
    /\")\n        var days = 0\n        var months = 0\n        var years = 0\n\n\
    \        if (dateList.length == 3) {\n            months = dateList(0).toInt\n\
    \            days = dateList(1).toInt\n            years = dateList(2).toInt\n\
    \        } else if (dateList.length == 4) {\n            months = dateList(0).toInt\n\
    \            days = dateList(1).toInt\n            years = dateList(2).toInt\n\
    \            months = dateList(3).toInt\n        } else if (dateList.length ==\
    \ 6) {\n            months = dateList(0).toInt\n            days = dateList(1).toInt\n\
    \            years = dateList(2).toInt\n            months = dateList(3).toInt\n\
    \            days = dateList(4).toInt\n        } else if (dateList.length == 7)\
    \ {\n            months = dateList(0).toInt\n            days = dateList(1).toInt\n\
    \            years = dateList(2).toInt\n            months = dateList(3).toInt\n\
    \            days = dateList(4).toInt\n            years = dateList(5).toInt\n\
    \        } else if (dateList.length == 8) {\n            months = dateList(0).toInt\n\
    \            days = dateList(1).toInt\n            years = dateList(2).toInt\n\
    \            months = dateList(3).toInt\n            days = dateList(4).toInt\n\
    \            years = dateList(5).toInt\n            months = dateList(6).toInt\n\
    \        } else if (dateList.length == 9) {\n            months = dateList(0).toInt\n\
    \            days = dateList(1).toInt\n            years = dateList(2).toInt\n\
    \            months = dateList(3).toInt\n            days = dateList(4).toInt\n\
    \            years = dateList(5).toInt\n            months = dateList(6).toInt\n\
    \            days = dateList(7).toInt\n        } else if (dateList.length == 10)\
    \ {\n            months = dateList(0).toInt\n            days = dateList(1).toInt\n\
    \            years = dateList(2).toInt\n            months = dateList(3).toInt\n\
    \            days = dateList(4).toInt\n            years = dateList(5).toInt\n\
    \            months = dateList(6).toInt\n            days = dateList(7).toInt\n\
    \            years = dateList(8).toInt\n        } else if (dateList.length ==\
    \ 12) {\n            months = dateList(0).toInt\n            days = dateList(1).toInt\n\
    \            years = dateList(2).toInt\n            months = dateList(3).toInt\n\
    \            days = dateList(4).toInt\n            years = dateList(5).toInt\n\
    \            months = dateList(6).toInt\n            days = dateList(7).to", " \
    \       val parsedDate = new SimpleDateFormat(\"mm-dd-yyyy\").parse(date)\n  \
    \      (parsedDate != null) && (parsedDate.getTime != 0) && (parsedDate.getDay\
    \ > 1) && (parsedDate.getDay < 31) && ((parsedDate.getMonth < 1) && (parsedDate.getMonth\
    \ > 12)) && (parsedDate.getYear > 0) ", "        date.length > 0 && date.split(\"\
    -\").length == 3 && \n            Date.parse(date).getYear >= 2000 && \n     \
    \       Date.parse(date).getYear <= 2040   && \n            Date.parse(date).getMonthValue\
    \ >= 1 && \n            Date.parse(date).getMonthValue <= 12 && \n           \
    \ Date.parse(date).getDayValue >= 1 && \n            Date.parse(date).getDayValue\
    \ <= 29 &&\n            Date.parse(date).getDate >= 1 && \n            Date.parse(date).getDate\
    \ <= 31", "        val pattern = \"^(\\\\d+)-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$\"\
    \n        date match {\n            case \"_*\" => false\n            case pattern(_*)\
    \ => true\n            case _ => false\n        }", "        val Array(a, b, c,\
    \ d) = date.split(\"-\")\n        if (a != \"\" && b != \"\" && c != \"\" && d\
    \ != \"\") {\n            val monthDaysInMonth = (c toChar) match {\n        \
    \        case '1' | '3' | '5' | '7' | '8' | '10' | '12' => 31\n              \
    \  case '4' | '6' | '9' | '11' => 30\n                case '2' => 29\n       \
    \         case _ => 31\n            }\n            val isLeapYear = (a.toChar\
    \ >= '1' && a.toChar <= '5') || (a.toChar >= '4' && a.toChar <= '6') || (a.toChar\
    \ >= '7' && a.toChar <= '9')\n            val daysInMonth = if (b < '0' || b >\
    \ '9') 31 else monthDaysInMonth(b.toChar)\n            val daysInYear = if (isLeapYear)\
    \ 365 else 366\n            val numberOfDays = if (b < '0' || b > '9') 1 else\
    \ b.toChar.toInt\n            daysInMonth < 1 || daysInMonth > 31 || daysInYear\
    \ < 1 || daysInYear > 30 || numberOfDays < 1 || numberOfDays > 29 || month < 1\
    \ || month > 12 => false\n        }\n        else false", "        def dateCheck(date\
    \ : String) : Boolean = {\n            val dateSplit = date.split(\"-\")\n   \
    \         if(dateSplit.length == 3){\n                if(dateSplit(0) >= 1 &&\
    \ dateSplit(0) <= 12 && dateSplit(1) >= 1 && dateSplit(1) <= 31 && dateSplit(2)\
    \ >= 1 && dateSplit(2) <= 30){\n                    if(dateSplit(2) > dateSplit(1)){\n\
    \                        return true\n                    }else{\n           \
    \             return false\n                    }\n                }\n       \
    \     }else{\n                return false\n            }\n        }\n       \
    \ dateCheck(date) == true", "        !date.isEmpty &&\n        date.contains(\"\
    -\") &&\n        date.split(\"-\").length==3 &&\n        !date.split(\"-\").takeWhile(_.isDigit).filter(_.isDigit).forall(_.toInt>=1&&_.toInt<=31)\
    \ &&\n        !date.split(\"-\").takeWhile(_.isDigit).filter(_.isDigit).forall(_.toInt>=1&&_.toInt<=30)\
    \ &&\n        !date.split(\"-\").takeWhile(_.isDigit).filter(_.isDigit).forall(_.toInt>=1&&_.toInt<=29)\
    \ &&\n        date.split(\"-\").takeWhile(_.isDigit).filter(_.isDigit).forall(_.toInt>=1\
    \ && _.toInt<=12) &&\n        !date.split(\"-\").takeWhile(_.isDigit).filter(_.isDigit).forall(_.toInt>=1\
    \ && _.toInt<=12)", "        // Write your code here\n        val dateParts =\
    \ date.replace(\"-\", \"/\").split(\"/\")\n        dateParts.size match {\n  \
    \          case 5 => false\n            case 6 => (dateParts(3) > 2 && dateParts(3)\
    \ < 12) && (dateParts(1) > 1 && dateParts(1) < 31)\n            case 7 => (dateParts(3)\
    \ > 2 && dateParts(3) < 12) && (dateParts(1) > 1 && dateParts(1) < 30)\n     \
    \       case 8 => (dateParts(3) > 2 && dateParts(3) < 12) && (dateParts(1) > 1\
    \ && dateParts(1) < 29)\n            case 12 => (dateParts(3) > 1 && dateParts(3)\
    \ < 12)\n            case _ => true\n        }", "        return !isEmpty(date)\
    \ && \n               !(month(date) < 1 ||\n                  month(date) > 12)\
    \ &&\n               !(day(date) < 1 || day(date) > 30) &&\n               !(month(date)\
    \ < 1 || month(date) > 12) &&\n               !((day(date) < 1 || day(date) >\
    \ 29) && (month(date) < 1 || month(date) > 12))", "        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3){\n            return false\n        }\n\
    \        if(dateArray(0).length != 2 || dateArray(1).length != 2){\n         \
    \   return false\n        }\n        val monthArray = dateArray(1).toInt\n   \
    \     val dayArray = dateArray(0).toInt\n        val month = monthArray\n    \
    \    val day = dayArray\n        if(month < 1 || month > 12){\n            return\
    \ false\n        }\n        if(day < 1 || day > 31){\n            return false\n\
    \        }\n        if(month < 4 || month > 2){\n            return false\n  \
    \      }\n        if(day < 1 || day > 29){\n            return false\n       \
    \ }\n        return true", "        // TODO: Write a function that validates a\
    \ given date.\n        var daysInMonth = 0\n        var days = 0\n        var\
    \ months = 0\n        var year = 2000\n        if(date.length == 0){\n       \
    \     return false\n        }\n        if(date.charAt(0) == '0'){\n          \
    \  date = \"0\" + date\n        }\n        val dateFormat = DateTimeFormatter.ofPattern(\"\
    mm-dd-yyyy\")\n        val parsedDate = dateFormat.parse(date)\n        if(parsedDate.equals(DateTimeFormatter.ISO_DATE)){\n\
    \            return false\n        }\n        val date = parsedDate.toString\n\
    \        val dates = date.split(\"-\")\n        days = dates(0).length\n     \
    \   days = days - 1\n        if(days > 0){\n            daysInMonth = days\n \
    \       }\n        dates = dates(1).split(\"-\")\n        months = dates(1).length\n\
    \        months = months - 1\n        if(months > 12){\n            return false\n\
    \        }\n        if(dates(0).toInt < 1 || dates(0).toInt > 12){\n         \
    \   return false\n        }\n        if(dates(1).toInt < 1 || dates(1).toInt >\
    \ daysInMonth){\n            return false\n        }\n        return true", " \
    \       val dateString: String = date.split(\" \")\n        if (dateString.size\
    \ < 2) return false\n        if (dateString(0) < \"01\" || dateString(0).length\
    \ > 2 || dateString(1) < \"01\" || dateString(1).length > 2 || dateString(2) <\
    \ \"01\" || dateString(2).length > 4 || dateString(2) > \"12\") return false\n\
    \        return true", "        // Write your code here\n        val pattern =\
    \ \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        val dateToCheck = pattern.findFirstIn(date)\n\
    \        if(dateToCheck != null)\n        {\n            val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \            val year = dateToCheck.getGroup(3).toInt\n            val month =\
    \ dateToCheck.getGroup(2).toInt\n            val day = dateToCheck.getGroup(1).toInt\n\
    \            if(day > daysInMonth)\n                return false\n           \
    \ val months = new mutable.HashSet[Int](1,3,5,7,8,10,12)\n            val numDays\
    \ = day - scala.util.Calendar.getInstance.getActualMinimum(scala.util.Calendar.DAY_OF_MONTH)\
    \ + 1\n            if(numDays > 31 || numDays < 1)\n                return false\n\
    \            if(!months.contains(month))\n                return false\n     \
    \       if(year < 1)\n                return false\n            \n           \
    \ return true\n        }\n        return false", "        val regex = \"\"\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$\"\"\".r\n        val regex2\
    \ = \"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|[12][0-9]|3[01])$\"\
    .r\n        val dateString = regex.findFirstIn(date)\n        val dayString =\
    \ \"^((?=01|03|05|07|08|10|12)31|(?=04|06|09|11)30)$\".r\n        val monthString\
    \ = \"^((?=01|02|03|04|05|06|07|08|09|10|11|12|01)12)((?=04|06|09|11)((?=01|02|03|04|05|06|07|08|09|10|11|12|01)12)?|(?=02|03|04|05|06|07|08|09|10|11|12|01)12)$\"\
    .r\n        if(dateString == None) {\n            false\n        }\n        else\
    \ if(dayString == None) {\n            false\n        }\n        else if(monthString\
    \ == None) {\n            false\n        }\n        else {\n            true\n\
    \        }", "        if (date.isEmpty) false\n        else if (date contains\
    \ \"-\") false\n        else {\n            val d1: Int = date.substring(0, 2).split(\"\
    -\").head.toInt\n            val d2: Int = date.substring(3, 5).split(\"-\").head.toInt\n\
    \            val d3: Int = date.substring(6, 10).split(\"-\").head.toInt\n   \
    \         if (d1<1 || d1>12) false\n            else if (d2<1 || d2>12) false\n\
    \            else if (d3<1 || d3>31) false\n            else if (d4<1 || d4>29)\
    \ false\n            else true\n        }", "        val isValid = true\n    \
    \    val month = date.getMonth()\n        val day = date.getDate()\n        val\
    \ year = date.getYear()\n        if( month < 1 || month > 12){\n            isValid\
    \ = false\n        }\n        if( day < 1 || day > 31 || ( month == 2 && day >\
    \ 29 )){\n            isValid = false\n        }\n        if( (month == 2 && day\
    \ > 29) || ( month == 2 && day < 1) ){\n            isValid = false\n        }\n\
    \        if( year < 1000 || year > 9999 ){\n            isValid = false\n    \
    \    }\n        isValid", "        // The solution is as follows:\n        //\
    \ First, we split the date by '-'. The first element will be the month\n     \
    \   // and the second will be the day. The length of the array is 2 because\n\
    \        // there are two elements. The length of the array is also the number\
    \ of\n        // days. Therefore, we can calculate the number of days in this\
    \ month\n        // in order to find the months.\n        val dateSplit = date.split(\"\
    -\")\n\n        // If we are given an empty date string, return false\n      \
    \  if(dateSplit.length == 0) return false\n\n        // If the number of days\
    \ is less than 1 or higher than 31 days for\n        // months 1-12, then return\
    \ false\n        if(dateSplit.length < 1 || dateSplit.length > 2 && dateSplit(0)\
    \ < 1 || dateSplit(0) > 12) return false\n\n        // If the number of days is\
    \ less than 1 or higher than 30 days for\n        // months 4-12, then return\
    \ false\n        if(dateSplit.length < 1 || dateSplit.length > 2 && dateSplit(1)\
    \ < 1 || dateSplit(1) > 12) return false\n\n        // If the number of days is\
    \ less than 1 or higher than 29 for month\n        // 2, then return false\n \
    \       if(dateSplit.length < 1 || dateSplit.length > 2 && dateSplit(0) < 1 ||\
    \ dateSplit(1) < 1 || dateSplit(2) > 29) return false\n\n        // If the length\
    \ of the array is 2, then return true\n        if(dateSplit.length == 2) return\
    \ true", "        val dateArray = date.split(\"/\")\n        (dateArray.length\
    \ > 0) && !(dateArray(0).toInt < 1 || dateArray(0).toInt > 12) && (dateArray.length\
    \ <= 3) && (dateArray(1).toInt < 1 || dateArray(1).toInt > 12) && ((dateArray(1).toInt\
    \ == 2 && (dateArray(2).toInt < 1 || dateArray(2).toInt > 29)) || (dateArray(1).toInt\
    \ == 3 && (dateArray(2).toInt < 1 || dateArray(2).toInt > 30)))", "        val\
    \ arr = date.split(\"-\")\n        if(arr.length > 2)\n        {\n           \
    \ var day = 0\n            var month = 0\n            var year = 0\n         \
    \   for(i<- 0 until arr.length)\n            {\n                val value = arr(i).toInt\n\
    \                if(value < 1 || value > 12 || arr(i) < 1 || arr(i) > 12)\n  \
    \                  return false\n                else if(value == 1)\n       \
    \             day += value\n                else if(value == 3)\n            \
    \        day += value\n                else if(value == 5)\n                 \
    \   day += value\n                else if(value == 7)\n                    day\
    \ += value\n                else if(value == 8)\n                    day += value\n\
    \                else if(value == 10)\n                    day += value\n    \
    \            else if(value == 12)\n                    day += value\n        \
    \        else if(value == 4)\n                    month += value\n           \
    \     else if(value == 6)\n                    month += value\n              \
    \  else if(value == 9)\n                    month += value\n                else\n\
    \                    month += value\n            }\n            if(day < 1 ||\
    \ day > 31)\n                return false\n            else if(month < 1 || month\
    \ > 12)\n                return false\n            else if(year % 4 == 0 && (year\
    \ % 100 != 0 || year % 400 == 0))\n                day += 1\n            else\n\
    \                day += 1\n            if(day < 1 || day > 30)\n             \
    \   return false\n            else\n                return true\n        }\n \
    \       else\n            return false", "        val pattern = \"^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|20)\\\
    d\\d$\"\n        val dateString: Option[String] = Try(date.toString.replaceFirst(pattern,\
    \ \"\"))\n        dateString match {\n            case Success(s) => validDate(dateString)\n\
    \            case Failure(_) => false\n        }", "        val mm = date.getMonth\n\
    \        val dd = date.getDayOfMonth\n        val yyyy = date.getYear\n      \
    \  val yy = yyyy.toInt\n        val mm12 = mm+12\n        val mm32 = mm-12\n \
    \       val mm2 = mm+2\n        val mm30 = mm-2\n        val mm29 = mm+29\n  \
    \      val mm31 = mm-3\n        val mm12 = mm+12\n        val mm30 = mm-2\n  \
    \      val mm30 = mm+30\n        val mm31 = mm-3\n        val mm12 = mm+12\n \
    \       val mm29 = mm-29\n        val mm30 = mm-30\n        val mm31 = mm-3\n\
    \        if (date == \"\")\n            return false\n        if (mm > 0 && mm\
    \ < 13)\n            return false\n        if (mm > 12)\n            return false\n\
    \        if (mm == 0)\n            return false\n        if (mm == 1)\n      \
    \      return true\n        if (mm == 2)\n            return false\n        if\
    \ (mm == 3)\n            return false\n        if (mm == 4)\n            return\
    \ false\n        if (mm == 5)\n            return false\n        if (mm == 6)\n\
    \            return false\n        if (mm == 7)\n            return false\n  \
    \      if (mm == 8)\n            return false\n        if (mm == 9)\n        \
    \    return false\n        if (mm == 10)\n            return false\n        if\
    \ (mm == 11)\n            return false\n        if (mm == 12)\n            return\
    \ true\n        if (mm == mm2)\n            return false\n        if (mm == mm12)\n\
    \            return true\n        if (mm == mm32)\n            return true\n \
    \       if (mm == mm31)\n            return true\n        if (mm == mm30)\n  \
    \          return true\n        if (mm == mm29)\n            return true\n   \
    \     return false", "        var dateRegex : String = \"^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\"\
    \n        if(date == \"\") return false\n        val dateArray = date.split(\"\
    -\")\n        var year = dateArray(0).toInt\n        var month = dateArray(1).toInt\n\
    \        var day = dateArray(2).toInt\n        var validYear = month >= 1 && month\
    \ <= 12\n        var validMonth = day >= 1 && day <= 30\n        var validDay\
    \ = day >= 1 && day <= 29\n        if(!validYear || !validMonth || !validDay)\
    \ {\n            year = dateArray(0).toInt\n            month = dateArray(1).toInt\n\
    \            day = dateArray(2).toInt\n            validYear = month >= 1 && month\
    \ <= 12\n            validMonth = day >= 1 && day <= 30\n            validDay\
    \ = day >= 1 && day <= 29\n        }\n        if(year < 1 || year > 9999) return\
    \ false\n        if(month < 1 || month > 12) return false\n        if(day < 1\
    \ || day > 31) return false\n        if(month == 2 && day > 28) return false\n\
    \        true", "        val dateArray = date.split(\"/\")\n        dateArray\
    \ match {\n            case Array(day, month, year) => day > 1 && day < 32 &&\
    \ month > 0 && month < 13 && year > 1900 && year < 2100\n            case _ =>\
    \ false\n        }", "        if (date.equals(\"\"))\n            return false\n\
    \        else\n            for (i <- 1 to 31) {\n                val m = i\n \
    \               val d = date.substring(0, 2)\n                val y = date.substring(3,\
    \ 5)\n                val year = Integer.parseInt(y)\n                if (i ==\
    \ 1 || i == 4 || i == 7) {\n                    if (m < 1 || m > 12)\n       \
    \                 return false\n                }\n                else if (i\
    \ == 3 || i == 6) {\n                    if (d < 1 || d > 31)\n              \
    \          return false\n                }\n                else {\n         \
    \           if (d < 1 || d > 30)\n                        return false\n     \
    \           }\n            }\n            for (i <- 4 to 11) {\n             \
    \   val m = i\n                val d = date.substring(0, 2)\n                val\
    \ y = date.substring(3, 5)\n                val year = Integer.parseInt(y)\n \
    \               if (m == 2 || m == 6 || m == 9) {\n                    if (m <\
    \ 1 || m > 12)\n                        return false\n                }\n    \
    \            else {\n                    if (d < 1 || d > 29)\n              \
    \          return false\n                }\n            }\n            true",
  "        val month = \"01-31-39\".toInt\n        val days = \"01-29-32\".toInt\n\
    \n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToValidate\
    \ = dateFormat.parse(date)\n        val year = dateToValidate.getYear\n      \
    \  val month = dateToValidate.getMonth\n        val dayOfMonth = dateToValidate.getDayOfMonth\n\
    \        val yearInt = year.toInt\n        val monthInt = month.toInt\n      \
    \  val dayOfMonthInt = dayOfMonth.toInt\n\n        //validation\n        if(date.isEmpty)\
    \ {\n            false\n        } else if(dayOfMonthInt.toInt == 0){\n       \
    \     false\n        } else if(dayOfMonthInt > days){\n            false\n   \
    \     } else if(dayOfMonthInt < 1){\n            false\n        } else if(monthInt\
    \ > 12){\n            false\n        } else if(monthInt < 1){\n            false\n\
    \        } else if(monthInt > month){\n            false\n        } else if(yearInt\
    \ < 1){\n            false\n        } else if(yearInt > year){\n            false\n\
    \        } else {\n            true\n        }", "        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToBeParsed = dateFormat.parse(date)\n\
    \        val dateNow = new java.sql.Date(System.currentTimeMillis)\n        val\
    \ daysUntil = dateToBeParsed.getTime - dateNow.time\n        val month = dateToBeParsed.getMonth()\n\
    \        val year = dateToBeParsed.getYear()\n        val daysOfMonth = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysOfYear = Array(31,28,31,30,31,30,31,30,31,30,31)\n        if\
    \ (dateToBeParsed.getTime > System.currentTimeMillis)\n            return false\n\
    \        val daysToBeValid = if(!(daysUntil.mod(daysOfYear(month))>0))\n     \
    \       false\n        else\n            daysToBeValid\n        val daysToBeValidWithMonth\
    \ = if(!(daysUntil.mod(daysOfMonth(month))>0))\n            false\n        else\n\
    \            daysToBeValidWithMonth\n        val validDate = if(daysToBeValidWithMonth\
    \ && daysToBeValid)\n            true\n        else\n            false\n     \
    \   validDate", "        val splittedDate = date.split(\"-\")\n        val day\
    \ = splittedDate(1).toInt\n        val month = splittedDate(2).toInt\n       \
    \ val year = splittedDate(3).toInt\n        val invalidDay = day < 1 || day >\
    \ 31\n        val invalidMonth = month < 1 || month > 12\n        val invalidYear\
    \ = year < 1 || year > 9999\n\n        if(day.isNaN || month.isNaN || (day < 1\
    \ || day > 31) || (month < 1 || month > 12) || (day < 1 || day > 29) || (day <\
    \ 1 || day > 31) || (month < 1 || month > 12)) {\n            return false\n \
    \       } else {\n            return true\n        }", "        val parsedDate\
    \ = parseDate(date)\n        val month = parsedDate.getMonthOfYear\n        val\
    \ day = parsedDate.getDayOfMonth\n        val year = parsedDate.getYear\n    \
    \    if(year < 1 || year > 9999 || month < 1 || month > 12 || day < 1 || day >\
    \ 31 || (month == 2 && day > 30) || (month == 4 && day > 29) || (month == 1 &&\
    \ day > 31))\n        {\n            return false\n        }\n        return true",
  "       //write your code here\n       if(date.nonEmpty && date.split(\"-\").length==3){\n\
    \           val month=date.split(\"-\")(0).toInt;\n           val day=date.split(\"\
    -\")(1).toInt;\n           val year=date.split(\"-\")(2).toInt;\n           if(month>0\
    \ && month<13 && day>1 && day<31 &&month!=2 && month!=4 &&day!=1 && day!=30 &&\
    \ day!=29 ){\n               if(month==1 && day>1){\n                   return\
    \ false\n               }\n               else if(month==3 && day>1){\n      \
    \             return false\n               }\n               else if(month==5\
    \ && day>1){\n                   return false\n               }\n            \
    \   else if(month==7 && day>1){\n                   return false\n           \
    \    }\n               else if(month==8 && day>1){\n                   return\
    \ false\n               }\n               else if(month==10 && day>1){\n     \
    \              return false\n               }\n               else if(month==12\
    \ && day>1){\n                   return false\n               }\n            \
    \   else if(month==2 && day>1){\n                   return false\n           \
    \    }\n               else{\n                   return true\n               }\n\
    \           }\n           else{\n               return false\n           }\n \
    \      }\n       else{\n           return false\n       }", "        val pattern\
    \ = \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        val dateComponents = pattern.findAllIn(date).map(_.toInt)\n\
    \        if(dateComponents.toList.size == 3) {\n            val month = dateComponents(0)\
    \ % 12\n            val day = dateComponents(1)\n            val year = dateComponents(2)\n\
    \            val yearOfMonth = (year / 100) * 12\n            val monthOfYear\
    \ = (year / 100) * 100\n            if(monthOfYear >= 1 && monthOfYear <= 12 &&\
    \ day > 0 && day <= 31 && month > 0 && month <= 12) {\n                if(day\
    \ > 0 && day <= 30) {\n                    if(monthOfYear >= 1 && monthOfYear\
    \ <= 12) {\n                        return true\n                    }\n     \
    \           }\n                if(day > 0 && day <= 29) {\n                  \
    \  if(monthOfYear >= 4 && monthOfYear <= 11) {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       false", "        val dateSplit = date.split(\"-\")\n        val month\
    \ = Integer.parseInt(dateSplit(0)) - 1\n        val day = Integer.parseInt(dateSplit(1))\n\
    \        val year = Integer.parseInt(dateSplit(2))\n\n        if ((month >= 1\
    \ && month <= 12) && (day > 0 && day <= 30) && day != (31 * (month + 1))) {\n\
    \            false\n        } else {\n            true\n        }", "        if(date.isEmpty)\
    \ {\n            return false\n        }\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3) {\n            return false\n        }\n\
    \        val dateArrayLength = dateArray.length\n        if(dateArrayLength >\
    \ 3) {\n            return false\n        }\n        val monthArray = dateArray(0).split(\"\
    -\")\n        val yearArray = dateArray(1).split(\"-\")\n        val monthLength\
    \ = monthArray.length\n        val yearLength = yearArray.length\n        val\
    \ monthValues = {\n            monthArray.map{\n                case month =>\
    \ if (month >= 1 && month <= 12) month else 0\n            }\n        }\n    \
    \    val yearValues = {\n            yearArray.map{\n                case year\
    \ => if (year >= 1 && year <= 31) year else 0\n            }\n        }\n    \
    \    if(monthValues.length != monthLength || yearValues.length != yearLength)\
    \ {\n            return false\n        }\n        val monthsCount = monthValues.sum\n\
    \        if(monthsCount > 12 || monthsCount < 1) {\n            return false\n\
    \        }\n        val daysCount = monthValues.map(m => m + yearValues.sum).sum\n\
    \        if(daysCount > 29 || daysCount < 1) {\n            return false\n   \
    \     }\n        val validDate = monthValues.map(m => m + yearValues.sum).map(d\
    \ => d == dateArrayLength).sum\n        if(validDate == 0) {\n            return\
    \ false\n        }\n        true", "        val sDate = date.replaceFirst(\"^-?\\\
    \\d+$\", \"\").replaceAll(\"-\", \"\").replaceAll(\"/\", \"\")\n        val year\
    \ = Integer.parseInt(sDate.substring(0, 4))\n        val month = Integer.parseInt(sDate.substring(4,\
    \ 6))\n        val dayOfMonth = Integer.parseInt(sDate.substring(6, 8))\n    \
    \    val isLeapYear = year % 4 == 0\n        val totalDays = (\n            isLeapYear\
    \ && month == 1 || \n            !isLeapYear && month == 4 || \n            isLeapYear\
    \ && month == 6 || \n            !isLeapYear && month == 9 || \n            isLeapYear\
    \ && month == 11\n        ) + (\n            (dayOfMonth > 0 && dayOfMonth < 32\
    \ && dayOfMonth != 29) \n            || (dayOfMonth > 31 && dayOfMonth != 30)\n\
    \        )\n        totalDays == 29", "        val day = date.substring(0,2);\n\
    \        val month = date.substring(2,3);\n        val year = date.substring(4,7);\n\
    \        if(day.length != 2 || month.length != 2 || year.length != 4)\n      \
    \      return false;\n        val daysOfMonth = {\n            val daysOfMonth\
    \ = List[Int]();\n            val monthLength = 11;\n            val monthArray\
    \ = List(\"Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\");\n   \
    \         val monthStringList = List(\"01\", \"02\", \"03\", \"04\", \"05\", \"\
    06\", \"07\", \"08\", \"09\", \"10\", \"11\");\n            for ((index, value)\
    \ <- monthArray.toList.zipWithIndex) {\n                if(value.equals(month.substring(index,\
    \ index+monthLength))) {\n                    val numOfDays = (monthArray.size\
    \ - index - 1);\n                    for(i <- 0 until numOfDays)\n           \
    \             daysOfMonth += 1;\n                }\n            }\n          \
    \  daysOfMonth.toList.sum\n        };\n        if(daysOfMonth <= 31 && daysOfMonth\
    \ >= 1 && (monthsToSet(month) < 12 || monthsToSet(month) > 12))\n            return\
    \ false;\n        val day = day.toInt;\n        val month = month.toInt;\n   \
    \     val year = year.toInt;\n        val dateFormat = \"MM-dd-yyyy\";\n     \
    \   if(day < 1 || day > 31 || (monthsToSet(month) < 1 || monthsToSet(month) >\
    \ 12) || (year < 1 || year > 100))\n            return false;\n        if(!date.equals(dateFormat))\n\
    \            return false;\n        else\n            return true;", "       \
    \ val split = date.split(\"-\")\n        if(split.length != 3) {\n           \
    \ return false\n        }\n        val dateComponents = split(0).split(\"/\")\n\
    \        if(dateComponents.length != 2) {\n            return false\n        }\n\
    \        val dateComponentsInts = dateComponents.map(Integer.valueOf)\n      \
    \  if(dateComponentsInts.take(2) == Array(1, 3, 5, 7, 8, 10, 12)) {\n        \
    \    val days = dateComponentsInts(2)\n            if(days < 1 || days > 31) {\n\
    \                return false\n            }\n        }\n        else if(dateComponentsInts.take(2)\
    \ == Array(4, 5, 6, 9, 11)) {\n            val days = dateComponentsInts(2)\n\
    \            if(days < 1 || days > 30) {\n                return false\n     \
    \       }\n        }\n        else if(dateComponentsInts.take(1) == Array(2))\
    \ {\n            val days = dateComponentsInts(1)\n            if(days < 1 ||\
    \ days > 29) {\n                return false\n            }\n        }\n     \
    \   true", "        // Write your code here\n\n        var day : Int = 0\n   \
    \     var month : Int = 0\n        var year : Int = 0\n        \n        date\
    \ = date.replaceAll(\" \", \"\");\n        \n        date = date.substring(0,2)\n\
    \        date = date.substring(2,4)\n        date = date.substring(4)\n      \
    \  \n        date = date.replaceAll(\"-\",\"\")\n        \n        month = Integer.parseInt(date)\n\
    \        \n        day = Integer.parseInt(date.substring(0,2))\n        \n   \
    \     year = Integer.parseInt(date.substring(2,4))\n\n        if (day < 1 || day\
    \ > 31 || (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12) && day > 31 || (month == 4 || month == 6 || month\
    \ == 9 || month == 11) && day > 30 || (month == 2 && day > 29)) {\n          \
    \  return false\n        } else {\n            return true\n        }", '        date.trim.length
    > 0 && validateDate(date)', '        // Write your logic here', "        if(date\
    \ == null || date.isEmpty || date.trim.isEmpty) false\n        val dateArray =\
    \ date.split(\"-\")\n        if(dateArray.size != 3) false\n        val day =\
    \ dateArray(2)\n        if(day.length < 1 || day.length > 2) false\n        val\
    \ month = dateArray(0) - 1\n        if(month < 1 || month > 12) false\n      \
    \  true", "        if (date.isEmpty || date == \"null\" || date == \"NA\"){\n\
    \            return false\n        }\n        val dateArray = date.split(\"-\"\
    )\n        if (dateArray.length != 3 ){\n            return false\n        }\n\
    \        if (dateArray(0) == \"NA\" || dateArray(0) == \"null\" || dateArray(0)\
    \ == \"NA\"){\n            return false\n        }\n        if (dateArray(1) ==\
    \ \"NA\" || dateArray(1) == \"null\" || dateArray(1) == \"NA\"){\n           \
    \ return false\n        }\n        if (dateArray(2) == \"NA\" || dateArray(2)\
    \ == \"null\" || dateArray(2) == \"NA\"){\n            return false\n        }\n\
    \        val day = dateArray(2).toInt\n        if (day <= 0 || day > 31){\n  \
    \          return false\n        }\n        val month = dateArray(0).toInt\n \
    \       if (month <= 0 || month > 12){\n            return false\n        }\n\
    \        val year = dateArray(1).toInt\n        if (year < 1000 || year > 9999){\n\
    \            return false\n        }\n        return true", "        val dateFormat\
    \ = new java.text.SimpleDateFormat(\"MM-dd-yyyy\")\n        val d = dateFormat.parse(date)\n\
    \        if(d != null && !d.isAfter(new Date()) && d.toString.length>0)\n    \
    \        true\n        else\n            false", "        //Write your code here\n\
    \        val dateArray = date.split('-')\n        val daysInMonth = new mutable.HashMap[Int,Int]()\n\
    \        daysInMonth.put(1, 31)\n        daysInMonth.put(3, 30)\n        daysInMonth.put(5,\
    \ 29)\n        daysInMonth.put(7, 28)\n        daysInMonth.put(8, 31)\n      \
    \  daysInMonth.put(10, 31)\n        daysInMonth.put(12, 31)\n        daysInMonth.getOrElse(dateArray(0).toInt,\
    \ 0)\n        daysInMonth.getOrElse(dateArray(1).toInt, 0)\n        dateArray(2).toInt",
  "        val dateSplit = date.split(\"-\")\n        val monthSplit = dateSplit(2).toInt\n\
    \        val daySplit = dateSplit(1).toInt\n        val daysPerMonth = List(1,3,5,7,8,10,12,4,6,9,11).contains(monthSplit)\n\
    \        val daysPerYear = List(1,2,3,4,5,6,7,8,9,10,11,12).contains(monthSplit)\n\
    \n        if ((dateSplit.isEmpty) || (monthSplit < 1) || (monthSplit > 12)) \n\
    \            return false\n\n        if (daySplit < 1) \n            return false\n\
    \n        if (daysPerMonth && daySplit > 31) \n            return false\n\n  \
    \      if (daysPerYear && daySplit > 30) \n            return false\n\n      \
    \  if (daysPerMonth && daySplit > 29) \n            return false\n\n        true",
  "        val pattern = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n        val dateArray\
    \ = date.split(\"-\")\n        val month1 = dateArray(0)\n        val day1 = dateArray(1)\n\
    \        val year1 = dateArray(2)\n        val month2 = dateArray(0)\n       \
    \ val day2 = dateArray(1)\n        val year2 = dateArray(2)\n        val day3\
    \ = month1 match {\n            case 1 => \"31\" //February\n            case\
    \ 2 => \"29\" //February\n            case 3 => \"31\" //March\n            case\
    \ 4 => \"30\" //April\n            case 5 => \"31\" //May\n            case 6\
    \ => \"30\" //June\n            case 7 => \"31\" //July\n            case 8 =>\
    \ \"31\" //August\n            case 9 => \"30\" //September\n            case\
    \ 10 => \"31\" //October\n            case 11 => \"30\" //November\n         \
    \   case 12 => \"31\" //December\n        }\n        val day4 = month2 match {\n\
    \            case 1 => \"31\" //February\n            case 2 => \"29\" //February\n\
    \            case 3 => \"31\" //March\n            case 4 => \"30\" //April\n\
    \            case 5 => \"31\" //May\n            case 6 => \"30\" //June\n   \
    \         case 7 => \"31\" //July\n            case 8 => \"31\" //August\n   \
    \         case 9 => \"30\" //September\n            case 10 => \"31\" //October\n\
    \            case 11 => \"30\" //November\n            case 12 => \"31\" //December\n\
    \        }\n        (!(month1.length < 1 || (month1.length == 1 && month1.head\
    \ < \"1\") ||\n        (month1.length == 2 && month1.head < \"2\") ||\n      \
    \  (month1.length == 3 && month1.head < \"3\") ||\n        (month1.length == 4\
    \ && month1.head < \"4\") ||\n        (month1.length == 5 && month1.head < \"\
    5\") ||\n        (month1.length == 6 && month1.head < \"6\") ||\n        (month1.length\
    \ == 7 && month1.head < \"7\") ||\n        (month1.length == 8 && month1.head\
    \ < \"8\") ||\n        (month1.length == 9 && month1.head < \"9\") ||\n      \
    \  (month1.length == 10 && month1.head < \"10\") ||\n        (month1.length ==\
    \ 11 && month1.head < \"11\") ||\n        (month1.length == 12 && month1.head\
    \ < \"12\")) &&\n        (!(month2.length < 1 || (month2.length == 1 && month2.head\
    \ < \"1\") ||\n        (month2.length == 2 && month2.head < \"2", "        val\
    \ dateParts = date.split(\"-\")\n        !dateParts.isEmpty\n        dateParts.count(_.toInt\
    \ < 1) < 1 || dateParts.count(_.toInt > 31) < 1 || dateParts.count(_.toInt > 30)\
    \ < 1 || dateParts.count(_.toInt > 29) < 1 || dateParts.count(_.toInt > 12) <\
    \ 1", '        // Your Code Here', "        val dateVal = new SimpleDateFormat(\"\
    dd-MM-yyyy\").parse(date)\n        dateVal != null && dateVal.before(new Date(System.currentTimeMillis()))\
    \ + dateVal.after(new Date(System.currentTimeMillis()+ 1000*1000*24*31*30*24*365));",
  "        val format = new SimpleDateFormat(\"MM-dd-yyyy\")\n        format.setLenient(false)\n\
    \        try {\n            format.parse(date)\n        }\n        catch {\n \
    \           case _ : Exception => return false\n        }\n        true", "  \
    \      if (date.nonEmpty) {\n            val dateFormat = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\")\n            val dateParsed = dateFormat.parseDateTime(date)\n \
    \           val dayOfWeek = dateParsed.getDayOfWeek\n            val daysBetween\
    \ = dayOfWeek.getValue.getValue\n            val daysInMonth = DateTimeFormat.getInstance().getMonthDays\n\
    \            daysBetween < 1 || daysBetween > 31 || daysInMonth < 1 || daysInMonth\
    \ > 30 || dateParsed.getMonthOfYear < 1 || dateParsed.getMonthOfYear > 12\n  \
    \      }", "        var months = 0\n        var days = 0\n        var years =\
    \ 0\n        if(date.isEmpty){\n            return false\n        }else{\n   \
    \         var date = date\n            while(!date.isEmpty){\n               \
    \ var tokens = date.split(\"-\")\n                months = months + 1\n      \
    \          days = days + 1\n                years = years + 1\n              \
    \  date = tokens(2)\n            }\n        }\n        if(months > 12){\n    \
    \        return false\n        }else if(days > 30 || (months == 1 && days > 29\
    \ )){\n            return false\n        }else if(years > 15){\n            return\
    \ false\n        }else{\n            return true\n        }", "        val dateSplit\
    \ = date.split(\"-\")\n        if (dateSplit.length != 3) {\n            return\
    \ false\n        }\n        val months = dateSplit(0).split(\"-\")\n        if\
    \ (months.length != 2 && months.length != 3) {\n            return false\n   \
    \     }\n        val dayCount = months(0)\n        if (dayCount < 1 || dayCount\
    \ > 31) {\n            return false\n        }\n        val years = months(1)\n\
    \        if (years < 1 || years > 12) {\n            return false\n        }\n\
    \        if (months(2) > 12) {\n            return false\n        }\n        true",
  "        if(date == \"\") false\n        else {\n            val dateArray = date.split(\"\
    -\")\n            val m = Integer.parseInt(dateArray(0))\n            val d =\
    \ Integer.parseInt(dateArray(1))\n            val y = Integer.parseInt(dateArray(2))\n\
    \n            if(m < 1 || m < 3 || m < 5 || m < 7 || m < 8 || m < 10 || m < 12\
    \ || d < 1 || d < 31)\n                return false\n            else if(m < 4\
    \ || m < 6 || m < 9 || m < 11 || d < 30 || d < 29)\n                return false\n\
    \            else if(m < 2)\n                return false\n            else\n\
    \                true\n        }", "        if(!date.equals(\"\")){\n        \
    \    if(date.indexOf(\"-\") != -1) {\n                var dateParts = date.split(\"\
    -\");\n                var month = 1;\n                var day = 1;\n        \
    \        var year = 2000;\n                while(!date.equals(\"\")){\n      \
    \              var dateParts = date.split(\"-\");\n                    month =\
    \ dateParts.get(0).asInstanceOf[Int];\n                    day = dateParts.get(1)\n\
    \                    year = dateParts.get(2);\n                    if(month ==\
    \ 0 || month > 12){\n                        return false;\n                 \
    \   }\n                    if(day == 1 || day > 30){\n                       \
    \ return false;\n                    }\n                    if(day == 1 || day\
    \ > 29){\n                        return false;\n                    }\n     \
    \           }\n                return true;\n            }\n        }\n      \
    \  return false;", "        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject match {\n\
    \            case null => false\n            case dateObject => false\n      \
    \  }", "        val dateSplit = date.split(\"/\")\n        (dateSplit.length ==\
    \ 3)\n            && (dateSplit(0) >= \"01\" && dateSplit(1) <= \"12\")\n    \
    \        && (dateSplit(2) >= \"01\" && dateSplit(2) <= \"31\")\n            &&\
    \ (dateSplit(1) < \"01\" || dateSplit(1) > \"12\")\n            && (dateSplit(2)\
    \ < \"01\" || dateSplit(2) > \"29\")\n            && (dateSplit(0) < \"01\" ||\
    \ dateSplit(0) > \"12\")", "        val dateArray = date.split(\"-\")\n      \
    \  dateArray.size == 3 && dateArray(0).toInt == 0 && dateArray(1).toInt == 0",
  "        val format = java.text.SimpleDateFormat(\"mm-dd-yyyy\", java.util.Locale.US)\n\
    \        val isValidDate = (format.isValid(date))\n        println(\"isValidDate\
    \ == \" + isValidDate + \" \" + date)\n        isValidDate", "        var dateArray\
    \ = date.split(\"-\")\n        val day = dateArray(1)\n        val month = dateArray(0)\n\
    \        val year = dateArray(2)\n\n        if(!date.isEmpty){\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[01]\")) false\n            if(day.matches(\"[012]\"\
    ) && month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && !month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && !month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[01]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && month.matches(\"[01]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[01]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && month.matches(\"[01]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && !month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && month.matches(\"[012]\") && year.isEmpty) false\n            if(day.matches(\"\
    [012]\") && !month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && !month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && month.matches(\"[012]\") && !year.isEmpty) false\n            if(day.matches(\"\
    [01]\") && !month.matches(\"[012]\") && year.isEmpty) false\n        }\n     \
    \   else\n            false", "        val validDateRegex = \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    .r\n        val result = date.trim.toLowerCase.matches(validDateRegex)\n     \
    \   val pattern = \"(01|03|05|07|08|10|12|02)\" + \"\\\\-\" + \"(01|04|06|09|11|02)\"\
    \ + \"\\\\-\" + \"(20|21)\\\\d\"\n        val validDate = date.matches(pattern)\n\
    \        val pattern2 = \"(01|04|06|09|11|02)\" + \"\\\\-\" + \"(01|03|05|07|08|10|12|02)\"\
    \ + \"\\\\-\" + \"(20|21)\\\\d\"\n        val validDate2 = date.matches(pattern2)\n\
    \        if (result == true && validDate == true && validDate2 == true) {\n  \
    \          return true\n        } else {\n            return false\n        }",
  "        if(date == null || date.isEmpty) {\n            return false\n        }\n\
    \        var numDays = date.substring(2,5).toInt\n        var month = date.substring(0,\
    \ 2).toInt\n        var year = date.substring(4,10)\n        month = month - 1\n\
    \        if(month > 11) {\n            month -= 12\n        }\n        if(month\
    \ < 1 || month > 12) {\n            return false\n        }\n        if(numDays\
    \ < 1 || numDays > 31) {\n            return false\n        }\n        if(numDays\
    \ < 1 || numDays > 29) {\n            return false\n        }\n        if(month\
    \ == 3 && numDays < 1 || numDays > 31) {\n            return false\n        }\n\
    \        if(month == 4 && numDays < 1 || numDays > 30) {\n            return false\n\
    \        }\n        if(month == 6 && numDays < 1 || numDays > 29) {\n        \
    \    return false\n        }\n        if(month == 9 && numDays < 1 || numDays\
    \ > 28) {\n            return false\n        }\n        if(month == 11 && numDays\
    \ < 1 || numDays > 27) {\n            return false\n        }\n        if(month\
    \ == 1 && numDays < 1 || numDays > 31) {\n            return false\n        }\n\
    \        return true", "        val dateFormat = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\")\n        val dateFormat1 = DateTimeFormat.forPattern(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = DateTimeFormat.forPattern(\"MM-dd\")\n        val\
    \ dateFormat3 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat5 = DateTimeFormat.forPattern(\"\
    MM-dd\")\n        val dateFormat6 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = DateTimeFormat.forPattern(\"MM-dd\")\n        val dateFormat8\
    \ = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat9 = DateTimeFormat.forPattern(\"\
    MM-dd\")\n        val dateFormat10 = DateTimeFormat.forPattern(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = DateTimeFormat.forPattern(\"MM-dd\")\n        val\
    \ dateFormat12 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = DateTimeFormat.forPattern(\"MM-dd\")\n        val dateFormat14 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = DateTimeFormat.forPattern(\"MM-dd\"\
    )\n        val dateFormat16 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n    \
    \    val dateFormat17 = DateTimeFormat.forPattern(\"MM-dd\")\n        val dateFormat18\
    \ = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat19 = DateTimeFormat.forPattern(\"\
    MM-dd\")\n        val dateFormat20 = DateTimeFormat.forPattern(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = DateTimeFormat.forPattern(\"MM-dd\")\n        val\
    \ dateFormat22 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = DateTimeFormat.forPattern(\"MM-dd\")\n        val dateFormat24 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = DateTimeFormat.forPattern(\"MM-dd\"\
    )\n        val dateFormat26 = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n    \
    \    val dateFormat27 = DateTimeFormat.forPattern(\"MM-dd\")\n        val dateFormat28\
    \ = DateTimeFormat.forPattern(\"MM-dd-yyyy\")\n", "        val dateParts = date.split(\"\
    -\")\n        dateParts.forall (i => i(0).toInt < 1 || i(0).toInt > 12)", "  \
    \      val dateSplit = date.split(\"-\")\n        val daysInMonth = List(31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        if(dateSplit.length==3){\n\
    \            val month = Integer.parseInt(dateSplit(0))\n            val day =\
    \ Integer.parseInt(dateSplit(1))\n            val year = Integer.parseInt(dateSplit(2))\n\
    \            val daysInMonth = List(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31)\n            if(month>12 || month<1 || day<1 || day>daysInMonth(month)){\n\
    \                return false\n            }\n            if(day>daysInMonth(month)){\n\
    \                return false\n            }\n            if(day>daysInMonth(month)){\n\
    \                return false\n            }\n            if(year>1899){\n   \
    \             return false\n            }\n            return true\n        }\n\
    \        if(dateSplit.length==2){\n            val month = Integer.parseInt(dateSplit(0))\n\
    \            val day = Integer.parseInt(dateSplit(1))\n            val daysInMonth\
    \ = List(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n            if(month>12\
    \ || month<1 || day<1 || day>daysInMonth(month)){\n                return false\n\
    \            }\n            if(day>daysInMonth(month)){\n                return\
    \ false\n            }\n            if(day>daysInMonth(month)){\n            \
    \    return false\n            }\n            return true\n        }\n       \
    \ return false", "        val dateParts = date.split(\"-\")\n        if(dateParts.length\
    \ != 3)\n            return false\n        val monthLength = dateParts.length\n\
    \        val month = dateParts(0)\n        val day = dateParts(1)\n        val\
    \ year = dateParts(2)\n        if(monthLength == 1 && month != \"01\")\n     \
    \       return false\n        if(monthLength == 3 && month != \"01\" && month\
    \ != \"03\")\n            return false\n        if(monthLength == 5 && month !=\
    \ \"04\" && month != \"06\")\n            return false\n        if(monthLength\
    \ == 7 && month != \"02\")\n            return false\n        if(monthLength ==\
    \ 10 && month != \"06\" && month != \"09\")\n            return false\n      \
    \  if(monthLength == 12 && month != \"02\")\n            return false\n      \
    \  if(monthLength == 1 && day < \"01\")\n            return false\n        if(monthLength\
    \ == 3 && day < \"01\" && day > \"30\")\n            return false\n        if(monthLength\
    \ == 5 && day < \"01\" && day > \"30\")\n            return false\n        if(monthLength\
    \ == 7 && day < \"01\")\n            return false\n        if(monthLength == 10\
    \ && day < \"01\")\n            return false\n        if(monthLength == 12 &&\
    \ day < \"01\")\n            return false\n        if(monthLength == 1 && year\
    \ < \"0001\")\n            return false\n        if(monthLength == 3 && year <\
    \ \"0001\" && year > \"3000\")\n            return false\n        if(monthLength\
    \ == 5 && year < \"0001\" && year > \"3000\")\n            return false\n    \
    \    if(monthLength == 7 && year < \"0001\")\n            return false\n     \
    \   if(monthLength == 10 && year < \"0001\")\n            return false\n     \
    \   if(monthLength == 12 && year < \"0001\")\n            return false\n     \
    \   true", "        val dateParts = date.split(\"-\")\n        dateParts.length\
    \ == 3 && (dateParts(0).toInt == dateParts(1).toInt || dateParts(0).toInt == dateParts(2).toInt)\
    \ && dateParts(1).toInt in 1..12", "        val dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        try {\n            dateFormat.parse(date)\n        } catch\
    \ {\n            case _ : Exception => false\n        }", "        var checkday\
    \ = date.getDay\n        var checkmonth = date.getMonth\n        var checkyear\
    \ = date.getYear\n\n        if (date.getLength == 0) {\n            return false\n\
    \        }\n        if (checkday < 1 || checkday > 31) {\n            return false\n\
    \        }\n        if (checkmonth < 1 || checkmonth > 12) {\n            return\
    \ false\n        }\n        if (checkmonth == 4 || checkmonth == 6 || checkmonth\
    \ == 9 || checkmonth == 11) {\n            if (checkday < 1 || checkday > 30)\
    \ {\n                return false\n            }\n        }\n        if (checkmonth\
    \ == 2) {\n            if (checkday < 1 || checkday > 29) {\n                return\
    \ false\n            }\n        }\n\n        if (checkmonth < 1 || checkmonth\
    \ > 12) {\n            return false\n        }\n        checkyear >= 1900 && checkyear\
    \ <= 2100\n\n        if (checkmonth == 4 || checkmonth == 6 || checkmonth == 9\
    \ || checkmonth == 11) {\n            if (checkday < 1 || checkday > 30) {\n \
    \               return false\n            }\n        }\n        if (checkmonth\
    \ == 2) {\n            if (checkday < 1 || checkday > 29) {\n                return\
    \ false\n            }\n        }\n\n        if (checkday < 1 || checkday > 31)\
    \ {\n            return false\n        }\n\n        if (checkmonth < 1 || checkmonth\
    \ > 12) {\n            return false\n        }\n        checkyear >= 1900 && checkyear\
    \ <= 2100\n\n        if (checkmonth == 4 || checkmonth == 6 || checkmonth == 9\
    \ || checkmonth == 11) {\n            if (checkday < 1 || checkday > 30) {\n \
    \               return false\n            }\n        }\n        if (checkmonth\
    \ == 2) {\n            if (checkday < 1 || checkday > 29) {\n                return\
    \ false\n            }\n        }\n\n        if (checkday < 1 || checkday > 31)\
    \ {\n            return false\n        }\n\n        if (checkmonth < 1 || checkmonth\
    \ > 12) {\n            return false\n        }\n        checkyear >= 1900 && checkyear\
    \ <= 2100\n\n        if (checkmonth == 4 || checkmonth == 6 || checkmonth == 9\
    \ || checkmonth == 11) {\n            if (checkday < 1 || checkday > 30) {\n \
    \               return false\n            }\n        }\n        if (checkmonth\
    \ == 2) {\n            if (checkday < 1 || checkday > 29) {\n                return\
    \ false\n            }\n        }\n\n        if (checkday < 1 || checkday > 31)\
    \ {\n            return false\n        }\n\n        if (checkmonth < 1 || checkmonth\
    \ > 12) {\n            return false\n        }\n        checkyear >= 1900 && checkyear\
    \ <= 2100\n        true", "        if(date != \"\")\n            val dateParts\
    \ = date.split(\"-\")\n            if(dateParts.length != 3)\n               \
    \ return false\n            val dateYear = Integer.valueOf(dateParts(0))\n   \
    \         val dateMonth = Integer.valueOf(dateParts(1))\n            val dateDay\
    \ = Integer.valueOf(dateParts(2))\n            if((dateMonth >= 1) && (dateMonth\
    \ <= 12) && (dateDay >= 1) && (dateDay <= 31))\n                if((dateYear >=\
    \ 1970) && (dateYear <= 2050))\n                    true\n                else\n\
    \                    false\n            else\n                return false\n \
    \       else\n            return false", "       if (!date.isEmpty &&\n      \
    \     (date.getDayOfMonth() <= 1 || date.getDayOfMonth() >= 31) &&\n         \
    \  (date.getMonth() <= 1 || date.getMonth() >= 12) &&\n           (date.getYear()\
    \ <= 1900 ||  date.getYear() >= 2020) &&\n           (date.getDayOfMonth() <=\
    \ 1 && date.getMonth() <= 1 && date.getYear() <= 1900)\n           ) \n      \
    \ {\n       return true\n       } else {\n       return false\n       }", "  \
    \      val pattern = (\"\\\\d{2}-\\\\d{2}-\\\\d{4}\").r\n        val patternMatch\
    \ = pattern.findFirstIn(date)\n        if (patternMatch == None) false \n    \
    \    else if (patternMatch.get.matches(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\")) true\
    \ \n        else false", "        if(!date.isEmpty) {\n            val splitted\
    \ = date.split(\"-\")\n            assert(splitted.length == 3)\n            assert(splitted(0).matches(\"\
    (0[1-9]|1[0-2])\"))\n            assert(splitted(1).matches(\"(0[1-9]|[1-2][0-9]|3[0-1])\"\
    ))\n            assert(splitted(2).matches(\"[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}\"\
    )) //\"06-04-2020\"\n            assert(splitted(2).length == 8)\n           \
    \ assert(splitted(2).matches(\"[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}\")) //\"06-04-2020\"\
    \n            assert(splitted(2).length == 8) //\"06-04-2020\"\n            assert(splitted(2).matches(\"\
    [0-9]{1,2}-[0-9]{1,2}\")) //\"06-04\"\n            assert(splitted(2).length ==\
    \ 4) //\"06-04\"\n            assert(splitted(1).matches(\"0[1-9]|[1-2][0-9]|3[0-1]\"\
    ))\n            assert(splitted(0).matches(\"0[1-9]|1[0-2]\"))\n            assert(splitted(0).length\
    \ == 2) //\"06\"\n            assert(splitted(0).matches(\"0[1-9]|1[0-2]\"))\n\
    \            assert(splitted(0).length == 2) //\"06\"\n        }\n        else\
    \ {\n            false\n        }", "        // TODO: Write your logic here\n\n\
    \        //Solution 1\n        val dateArray = date.split(\"/\")\n        if (dateArray.length\
    \ > 3 && dateArray.length < 6) {\n            return false\n        }\n      \
    \  else if (dateArray.length > 6) {\n            return false\n        }\n\n \
    \       //Solution 2\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ < 3 || dateArray.length > 3) {\n            return false\n        }\n      \
    \  else if (dateArray.length != 3) {\n            return false\n        }\n  \
    \      dateArray(0).toInt < 1 || dateArray(0).toInt > 12", "        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject: Date = dateFormat.parse(date)\n\
    \        (dateObject.getYear > 0 && dateObject.getYear < 1000 && dateObject.getMonth\
    \ > 1 && dateObject.getMonth < 13 && dateObject.getDay > 0 && dateObject.getDay\
    \ < 31 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay() == 0 && dateObject.getMonthDay()\
    \ == 0 && dateObject.get", "        val dateArray = date.split(\"-\")\n      \
    \  if (dateArray.length != 3)\n            return false\n        val months =\
    \ dateArray(0).toInt\n        val daysInMonth = scala.math.max(scala.math.min(12,\
    \ scala.math.max(scala.math.min(31, scala.math.max(scala.math.min(date.getMonth.getDays.toInt,\
    \ 0)).toInt, 0)).toInt, 0), 0)\n        val daysBetween = scala.math.max(scala.math.min(31,\
    \ scala.math.max(scala.math.min(30, scala.math.max(scala.math.min(daysBetween,\
    \ 0)).toInt, 0)).toInt, 0), 0)\n        if (months == 0)\n            return false\n\
    \        else if (months == 12 && daysInMonth != 31)\n            return false\n\
    \        else if (months == 2 && daysBetween != 30)\n            return false\n\
    \        else if (months < 1 || months > 12)\n            return false\n     \
    \   else if (months == 1 && daysInMonth != 31)\n            return false\n   \
    \     else if (months == 2 && daysBetween != 30)\n            return false\n \
    \       else if (months == 3 && daysBetween != 29)\n            return false\n\
    \        else if (!dateArray(0).isDigit || !dateArray(1).isDigit || !dateArray(2).isDigit)\n\
    \            return false\n        else\n            return true", "        val\
    \ checkMonth = date match {\n            case m if (m >= 1 && m <= 12) => true\n\
    \            case _ => false\n        }\n        val checkDay = date match {\n\
    \            case d if (d >= 1 && d <= 31) => true\n            case _ => false\n\
    \        }\n        val checkYear = date match {\n            case y if (y >=\
    \ 1 && y <= 30) => true\n            case _ => false\n        }\n        if (!date.isEmpty)\
    \ {\n            if (checkMonth and checkDay and checkYear)\n            true\n\
    \            else\n            false\n        } else\n        false", "      \
    \  var isValid = true\n\n        val months = mutable.MutableList[Int]()\n   \
    \     val days = mutable.MutableList[Int]()\n\n        val dateParts = date.split(\"\
    -\")\n        val monthInt = dateParts(0).trim().toInt\n        val dayInt = dateParts(1).trim().toInt\n\
    \n        if(dateParts.length != 3) {\n            isValid = false\n        }\
    \ else {\n            if(monthInt < 1 || monthInt > 12) {\n                isValid\
    \ = false\n            } else {\n                if(dayInt < 1 || dayInt > 30)\
    \ {\n                    isValid = false\n                } else {\n         \
    \           if(months.contains(monthInt)) {\n                        isValid =\
    \ false\n                    } else {\n                        if(days.contains(dayInt))\
    \ {\n                            isValid = false\n                        } else\
    \ {\n                            months += monthInt\n                        \
    \    days += dayInt\n                        }\n                    }\n      \
    \          }\n            }\n        }\n\n        isValid", "        val tokens\
    \ = date.split(\"-\")\n        tokens.size != 3 || tokens.head.length != 2 ||\
    \ tokens.last.length != 4 || tokens.toList.map(_.length).max == 0 || !(tokens.toList.forall(x\
    \ => x.length > 1 && x.length <= 3))", "        if(date != \"\" && !date.contains(\"\
    -\")) \n            false\n        else if (date.length != 10) \n            false\n\
    \        else if(!date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    /\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\"))\n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\")) \n            false\n        else if (date.get(0).toInt == (date.get(0).toInt\
    \ - 1 ) % 12) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\"))\n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"-\") && !date.contains(\"/\") && !date.contains(\"\
    -\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"-\") && !date.contains(\"/\") && !date.contains(\"\
    -\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"-\") && !date.contains(\"/\") && !date.contains(\"\
    -\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"-\") && !date.contains(\"/\") && !date.contains(\"\
    -\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"-\") && !date.contains(\"/\") && !date.contains(\"\
    -\")) \n            false\n        else if(!date.contains(\"-\") && !date.contains(\"\
    /\") && !date.contains(\"-\")) \n            false\n        else if(!date.contains(\"\
    -\") && !date.contains(\"/\") && !date.contains(\"-\")) \n            false\n\
    \        else if(!date.contains(\"", "        var daysInMonth = 0\n        var\
    \ month = 0\n        var dateParts = date.split(\"-\")\n        var dateString\
    \ = dateParts(0)\n        var year = Integer.parseInt(dateParts(1))\n        var\
    \ months = dateString.split(\"-\")\n        if(dateParts.length == 3){\n     \
    \       month = Integer.parseInt(months(0))\n            day = Integer.parseInt(months(1))\n\
    \            daysInMonth = monthToDays[month]\n        }else if(dateParts.length\
    \ == 2){\n            month = Integer.parseInt(months(0))\n            daysInMonth\
    \ = monthToDays[month]\n        }\n        return (daysInMonth > 0 && day > 0\
    \ && day < daysInMonth)", "        val format = new SimpleDateFormat(\"mm-dd-yyyy\"\
    )\n        format.parse(date) match {\n            case null => false\n      \
    \      case x => true\n        }", "        // Write your code here\n        val\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck =\
    \ dateFormat.parse(date)\n        if(dateToCheck.getTime().toInstant().toEpochMilli()\
    \ > 0L){\n            if(dateToCheck.getTime().toInstant().toEpochMilli()<(30L*24L*60L*60L*1000)){\n\
    \                if(dateToCheck.getTime().toInstant().toEpochMilli()<(29L*24L*60L*60L*1000)){\n\
    \                    if(dateToCheck.getTime().toInstant().toEpochMilli()<(31L*24L*60L*60L*1000)){\n\
    \                        if(dateToCheck.getTime().toInstant().toEpochMilli()<(12L*24L*60L*60L*1000)){\n\
    \                            return true\n                        }\n        \
    \            }\n                }\n            }\n        }\n        return false",
  "        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date)\
    \ != null", "        val month : Int = date.split(\"-\").head.toInt\n        val\
    \ day : Int = date.split(\"-\").last.toInt\n        val year : Int = date.split(\"\
    -\")(2)\n        if (day < 1 || day > 31) false\n        else if (month < 1 ||\
    \ month > 12) false\n        else if (year < \"01\" || year > \"12\") false\n\
    \        else true", "        val formatter = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        try {\n            formatter.parse(date) match {\n                case\
    \ null => false\n                case date1 => true\n            }\n        }\
    \ catch {\n            case ex: Exception => false\n        }", "        val pattern\
    \ = \"^(1[13-9]|[1-9])-(0?[1-9]|[12][0-9]|3[01])-([0-9]{4}|20[0-9]{2})$\".r\n\
    \        val pattern2 = (\"^(1[13-9]|[1-9])-(0?[1-9]|[12][0-9]|3[01])-([0-9]{4}|20[0-9]{2})$\"\
    ).r\n        val pattern3 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern4 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern5 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern6 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern7 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern8 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern9 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern10 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern11 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        val pattern12 = (\"^([0-9]{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\
    ).r\n        date == \"\"\n            || date.matches(pattern)\n            ||\
    \ date.matches(pattern2)\n            || date.matches(pattern3)\n            ||\
    \ date.matches(pattern4)\n            || date.matches(pattern5)\n            ||\
    \ date.matches(pattern6)\n            || date.matches(pattern7)\n            ||\
    \ date.matches(pattern8)\n            || date.matches(pattern9)\n            ||\
    \ date.matches(pattern10)\n            || date.matches(pattern11)\n          \
    \  || date.matches(pattern12)", "        var isValid = true\n        if (date.isEmpty)\
    \ isValid = false\n        else {\n            var year = date.substring(0, 4)\n\
    \            var month = date.substring(4, 6)\n            var day = date.substring(6,\
    \ 8)\n            isValid = year.matches(\"(0[1-9]|1[12])\") && month.matches(\"\
    (0[1-9]|1[012])\") && day.matches(\"(0[1-9]|[12][0-9]|3[01])\") && year.isInt\
    \ && month.isInt && day.isInt && checkDay(day) && checkMonth(month)\n        }\n\
    \        return isValid", "        if (date.isEmpty) false\n        val dateArr\
    \ = date.split(\"-\")\n        if (dateArr.length == 3) \n            true\n \
    \       else if (dateArr.length != 3 || dateArr(0).toInt < 1 || dateArr(0).toInt\
    \ > 12 || dateArr(1).toInt < 1 || dateArr(1).toInt > 31 || dateArr(2).toInt <\
    \ 1 || dateArr(2).toInt > 29) \n            false\n        else if (dateArr(0).toInt\
    \ == dateArr(1).toInt + 1 && dateArr(0).toInt == dateArr(2).toInt)\n         \
    \   false\n        else if (dateArr(1).toInt == dateArr(2).toInt && dateArr(1).toInt\
    \ > 0 && dateArr(1).toInt < 12)\n            false\n        else if (dateArr(0).toInt\
    \ == dateArr(1).toInt && dateArr(0).toInt > 0 && dateArr(0).toInt < 12)\n    \
    \        false\n        else if (dateArr(2).toInt == dateArr(1).toInt && dateArr(2).toInt\
    \ > 0 && dateArr(2).toInt < 12)\n            false\n        else \n          \
    \  true", "        if(date.isEmpty) return false\n        var month = 0\n    \
    \    var day = 0\n        var year = 0\n        var datePart = date.split(\"-\"\
    )\n        val monthLength = Array.fill(12)(31)\n        val dayLength = Array.fill(12)(30)\n\
    \        val yearLength = Array.fill(12)(29)\n        datePart.foreach(e => {\n\
    \            val split = e.split(\"-\")\n            day += split(0).toInt\n \
    \           month += split(1).toInt\n            year += split(2).toInt\n    \
    \    })\n        monthLength(month)\n        dayLength(day)\n        yearLength(year)\n\
    \        day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1 && year\
    \ <= 12", '        date.nonEmpty', "        val dateFormat = \"mm/dd/yyyy\"\n\
    \        val dateFormatToUse = dateFormat\n        if (!date.isEmpty) {\n    \
    \        val dateFormatObj = new SimpleDateFormat(dateFormatToUse)\n         \
    \   try {\n                val dateFormatObjObj = new SimpleDateFormat(dateFormatToUse)\n\
    \                val date: java.util.Date = new SimpleDateFormat(dateFormatToUse).parse(date)\n\
    \                val dateDay = date.getDayOfMonth\n                val dateMonth\
    \ = date.getMonth\n                val dateYear = date.getYear\n             \
    \   if (dateDay < 1 || dateDay > 31) {\n                    return false\n   \
    \             }\n                if (dateMonth < 1 || dateMonth > 12) {\n    \
    \                return false\n                }\n                if (dateYear\
    \ < 0 || dateYear > 3000) {\n                    return false\n              \
    \  }\n                true\n            } catch {\n                case _ : Exception\
    \ =>\n                    false\n            }\n        }\n        else false",
  "        // Write your code here\n        if(date.isEmpty) false else true &&\n\
    \        date.length == 10 &&\n        date.substring(0,2) == \"03\" &&\n    \
    \    date.substring(3,5) == \"11\" &&\n        date.substring(6,10) == \"2000\"\
    \ ||\n        date.substring(0,2) == \"15\" &&\n        date.substring(3,5) ==\
    \ \"01\" &&\n        date.substring(6,10) == \"2012\" ||\n        date.substring(0,2)\
    \ == \"04\" &&\n        date.substring(3,5) == \"0\" &&\n        date.substring(6,10)\
    \ == \"2040\" ||\n        date.substring(0,2) == \"06\" &&\n        date.substring(3,5)\
    \ == \"04\" &&\n        date.substring(6,10) == \"2020\"", "        if(date.isEmpty)\
    \ false\n        if(date.contains(\"-\")){\n            val dateSplit = date.split(\"\
    -\")\n            val dateMonth = dateSplit(0).toInt\n            val dateDay\
    \ = dateSplit(1).toInt\n            val dateYear = dateSplit(2).toInt\n      \
    \      if(dateDay < 1 || dateDay > 31) false\n            if(dateMonth < 1 ||\
    \ dateMonth > 12) false\n            if(dateYear < 1 || dateYear > 9999) false\n\
    \            return true\n        }\n        false", "        var valid = true\n\
    \        val dateArray = date.split(\"-\")\n        if(dateArray.length != 3){\n\
    \            println(\"Invalid date: \" + date)\n            valid = false\n \
    \       }\n        else if(!dateArray(0).isDigit){\n            println(\"Invalid\
    \ month: \" + dateArray(0))\n            valid = false\n        }\n        else\
    \ if(!dateArray(1).isDigit){\n            println(\"Invalid day: \" + dateArray(1))\n\
    \            valid = false\n        }\n        else if(!dateArray(2).isDigit){\n\
    \            println(\"Invalid year: \" + dateArray(2))\n            valid = false\n\
    \        }\n        if(!valid){\n            println(\"Invalid date: \" + date)\n\
    \            valid = false\n        }\n        return valid", "        if(date\
    \ == null || date == \"\") {\n            return false\n        }\n        val\
    \ dateParts = date.split(\"-\")\n        if(dateParts.size == 3) {\n         \
    \   val daysInMonth = scala.collection.mutable.Set(1,3,5,7,8,10,12)\n        \
    \    val monthsInMonth = scala.collection.mutable.Set(4,6,9,11)\n            val\
    \ monthsInFebruary = scala.collection.mutable.Set(2,4)\n            val isValidMonth\
    \ = daysInMonth.intersect(monthsInMonth).nonEmpty || monthsInFebruary.intersect(monthsInMonth).nonEmpty\n\
    \            val isValidDay = daysInMonth.contains(dateParts(1).toInt)\n     \
    \       val isValidYear = monthsInMonth.contains(dateParts(0).toInt)\n       \
    \     val isValidDate = isValidMonth && isValidDay && isValidYear\n          \
    \  isValidDate\n        } else {\n            return false\n        }", "    \
    \    val pattern = \"\\\\d{2}/\\\\d{2}/\\\\d{4}\".r\n        val dateArray = pattern.findAllIn(date).toList\n\
    \        if(dateArray.size != 3)\n            return false\n        if(dateArray(0).toInt\
    \ < 1 || dateArray(0).toInt > 12)\n            return false\n        if(dateArray(1).toInt\
    \ < 1 || dateArray(1).toInt > 31)\n            return false\n        if(dateArray(2).toInt\
    \ < 1 || dateArray(2).toInt > 30)\n            return false\n        if(dateArray(1).toInt\
    \ == 2 && dateArray(2).toInt == 1)\n            return false\n        if(dateArray(2).toInt\
    \ == 2)\n            return true\n        true", "        val list = date.split(\"\
    -\")\n        if(list.length == 3) {\n            val months = list.toList(0)\n\
    \            val day   = list.toList(1)\n            val year  = list.toList(2)\n\
    \n            val monthsList = List(1,2,3,4,5,6,7,8,9,10,11,12)\n            val\
    \ daysList = List(1,2,3,4,5,6,7,8,9,10,11,12)\n            val years   = List(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \n            val daysListLength = daysList.size\n            val monthsListLength\
    \ = monthsList.size\n            val yearsLength = years.size\n\n            val\
    \ isLeapYear = year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)\n\n     \
    \       if(months.equals(monthsList(0)) && day.equals(daysList(0) && year.equals(years(0))\
    \ &&\n                    (daysListLength != 31 || (months.contains(monthsList(1))\
    \ && days.contains(daysList(1) && years.contains(years(1))) &&\n             \
    \           (daysListLength != 30 || (months.contains(monthsList(2)) && days.contains(daysList(2)\
    \ && years.contains(years(2))))))) &&\n                    (monthsListLength !=\
    \ 12 || months.contains(monthsList(12))))\n\n            {\n                if(isLeapYear)\
    \ days.contains(daysList(12)) && years.contains(years(12))\n                else\
    \ days.contains(daysList(12)) && !years.contains(years(12))\n            }\n \
    \           else {\n                days.contains(daysList(day)) && years.contains(years(year))\n\
    \            }\n        }\n        else false", "        if(date.isEmpty) {\n\
    \            return false\n        }\n        if(date.length < 8) {\n        \
    \    return false\n        }\n        val dateSplits = date.split(\"-\")\n   \
    \     if(dateSplits.length != 3) {\n            return false\n        }\n    \
    \    val monthInt = Integer.parseInt(dateSplits(0))\n        val dayInt = Integer.parseInt(dateSplits(1))\n\
    \        val yearInt = Integer.parseInt(dateSplits(2))\n        if(monthInt <\
    \ 1 || monthInt > 12) {\n            return false\n        }\n        if(dayInt\
    \ < 1 || dayInt > 31 || dayInt > 30) {\n            return false\n        }\n\
    \        if(monthInt > 2 && dayInt > 29) {\n            return false\n       \
    \ }\n        true", "        val arr = date.split(\"-\")\n        if (arr.length\
    \ != 3)\n            return false\n        var isValid = false\n        for (i<-\
    \ 0 until arr.length) {\n            val d = arr(i).toInt\n            val month\
    \ = if (i % 2 == 0) (d / 2) + (d % 2) else (d % 2)\n            val day = d %\
    \ 2 == 0 ? d / 2 : (d % 2 == 0 ? d / 2 : 0)\n            val year = arr(i + 1).toInt\n\
    \            if (1 <= month && month <= 12)\n                if (1 <= day && day\
    \ <= 31)\n                    if (1 <= year && year <= 9999)\n               \
    \         isValid = true\n            else\n                if (4 <= month)\n\
    \                    if (1 <= day && day <= 30)\n                        if (1\
    \ <= year && year <= 9999)\n                            isValid = true\n     \
    \       else\n                if (2 <= month)\n                    if (1 <= day\
    \ && day <= 29)\n                        if (1 <= year && year <= 9999)\n    \
    \                        isValid = true\n        }\n        isValid", "      \
    \  if (date == null || date.trim.length == 0) return false\n        val dateArray\
    \ = date.split(\"-\")\n        val mm = dateArray(1).toInt\n        val dd = dateArray(2).toInt\n\
    \        // The months should not be less than 1 or higher than 12.\n        if\
    \ (mm < 1 || mm > 12) return false\n        // The date should be in the format:\
    \ mm-dd-yyyy\n        if (mm < 12 || mm > 12) return false\n        if (mm ==\
    \ 12 && dd > 31) return false\n        if (mm == 1 && dd == 31) return false\n\
    \        if (mm == 2 && dd == 29) return false\n        // The number of days\
    \ is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the\
    \ number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
    \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
    \        val daysDiff = dateArray(0).toInt - dateArray(0).toInt\n        if (daysDiff\
    \ < 1 || daysDiff > 31) return false\n        true", "        var isValid = true\
    \ // Default return value\n        \n        // 1. Check if the date string is\
    \ empty\n        if (date.trim().length() == 0) {\n            isValid = false\n\
    \        }\n        \n        // 2. Check if the days are not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n        // If the months\
    \ are not less than 1 or higher than 12, return false\n        else if (!date.contains(\"\
    -\")) { //Not a date format\n            val temp = date.split(\"-\")\n      \
    \      val month = temp(0)\n            val day = temp(1)\n            val year\
    \ = temp(2)\n            if (month.equals(\"01\") || month.equals(\"03\") || month.equals(\"\
    05\") || month.equals(\"07\") || month.equals(\"08\") || month.equals(\"10\")\
    \ || month.equals(\"12\")) {\n                if (day.equals(\"01\") || day.equals(\"\
    03\") || day.equals(\"05\") || day.equals(\"07\") || day.equals(\"08\") || day.equals(\"\
    10\") || day.equals(\"12\")) {\n                    isValid = false\n        \
    \        } else if (day.equals(\"30\")) {\n                    isValid = false\n\
    \                }\n            } else if (month.equals(\"04\") || month.equals(\"\
    06\") || month.equals(\"09\") || month.equals(\"11\")) {\n                if (day.equals(\"\
    01\") || day.equals(\"03\") || day.equals(\"05\") || day.equals(\"07\") || day.equals(\"\
    08\") || day.equals(\"10\") || day.equals(\"12\")) {\n                    isValid\
    \ = false\n                } else if (day.equals(\"30\")) {\n                \
    \    isValid = false\n                }\n            } else if (month.equals(\"\
    02\")) {\n                if (day.equals(\"01\") || day.equals(\"03\") || day.equals(\"\
    05\") || day.equals(\"07\") || day.equals(\"08\") || day.equals(\"10\") || day.equals(\"\
    12\")) {\n                    isValid = false\n                } else if (day.equals(\"\
    30\")) {\n                    isValid = false\n                }\n           \
    \ }\n        } else {\n            val temp = date.split(\"-\")\n            val\
    \ month = temp(0)\n            val day = temp(1)\n            val year = temp(2)\n\
    \            if (month.equals(\"01\") || month.equals(\"03\") || month.equals(\"\
    05\") || month.equals(\"07\") || month.equals(\"08\") || month.equals(\"10\")\
    \ || month.equals(\"12\")) {\n                if (day.equals(\"01\") || day.equals(\"\
    03\") || day.equals(\"05\") || day.equals(\"07\") || day.", "        val datePattern\
    \ = \"MM-dd-yyyy\".r\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        if(!datePattern.pattern.matcher(date).find())\n            return false\n\
    \        val dateArray = dateFormat.parse(date).asInstanceOf[java.util.Date]\n\
    \        if(dateArray.getTime < 0L)\n            return false\n        if(dateArray.getTime\
    \ > 1000L)\n            return false\n        val dateArray2 = dateArray.getTime\n\
    \        val dateArray4 = dateArray2.toInt\n        val daysInDays = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_YEAR)\n\
    \        if(dateArray4 < 1)\n            return false\n        if(dateArray4 >\
    \ daysInDays)\n            return false\n        val monthsInMonths = Calendar.getInstance().getActualMaximum(Calendar.MONTH)\n\
    \        if(dateArray2 < 1)\n            return false\n        if(dateArray2 >\
    \ 1000L)\n            return false\n        if(dateArray2 > 31)\n            return\
    \ false\n        if(dateArray2 > monthsInMonths)\n            return false\n \
    \       true", "        val dateFormat = DateTimeFormat.forPattern(\"MM-dd-yyyy\"\
    )\n        try {\n            val parsedDate = dateFormat.parse(date)\n      \
    \      parsedDate.toString(\"MM/dd/yyyy\") == \"MM/dd/yyyy\"\n        } catch\
    \ {\n            case e : DateTimeParseException => {\n                val parsedDate\
    \ = dateFormat.parse(date.substring(0, 11))\n                parsedDate.toString(\"\
    MM/dd/yyyy\") == \"MM/dd/yyyy\"\n            }\n        }", "        date.isEmpty\
    \ || date match {\n            case true => false\n            case false =>\n\
    \                val mm = date.substring(0, 2).split(\"-\")(0).toInt\n       \
    \         val dd = date.substring(2, 4).split(\"-\")(0).toInt\n              \
    \  val yyyy = date.substring(4, 8)\n                val mm1 = Array(1, 3, 5, 7,\
    \ 8, 10, 12)\n                val dd1 = Array(1, 3, 5)\n                val mm2\
    \ = Array(4, 6, 9, 11)\n                val dd2 = Array(4, 6)\n              \
    \  val mm3 = Array(2, )\n                val dd3 = Array(2, )\n              \
    \  val mm4 = Array(1, 3, 5)\n                val dd4 = Array(1, 3)\n         \
    \       mm1(mm)\n                dd1(dd)\n                mm2(mm)\n          \
    \      dd2(dd)\n                mm3(mm)\n                dd3(dd)\n           \
    \     mm4(mm)\n                dd4(dd)\n        }", "        val pattern = \"\
    ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d$\"\n       \
    \ val regex = new Regex(pattern)\n        return regex.findFirstIn(date).getOrElse(false)",
  "        if(date.isEmpty) false else (\n            date.matches(\"^(0[1-9]|1[12])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\
    ) &&\n            checkMonth(date) &&\n            checkDay(date)\n        )",
  "        val formatter = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val pattern\
    \ = \"MM-dd-yyyy\"\n        val date = formatter.parse(date)\n        if(date\
    \ == null)\n            return false\n        else\n            try {\n      \
    \          val md = new java.util.Date(date.getTime)\n                val year\
    \ = md.getYear\n                val month = md.getMonthValue\n               \
    \ val day = md.getDay\n                if(!year.isEmpty && !month.isEmpty && !day.isEmpty)\n\
    \                    if(month == 0 || month == 2 || month == 4 || month == 6 ||\
    \ month == 9 || month == 11 || month == 12)\n                        if(day <=\
    \ 30 || day >= 29)\n                            if(day <= 31 && day >= 1)\n  \
    \                              true\n                            else\n      \
    \                          false\n                        else\n             \
    \               false\n                    else\n                        false\n\
    \                else\n                    false\n            } catch {\n    \
    \            case e : Exception => {\n                    println(s\"Exception\
    \ while checking date $date\")\n                    e.printStackTrace()\n    \
    \                return false\n                }\n            }", "        !date.isEmpty\n\
    \        date match {\n            case date :: dates => {\n                val\
    \ months = date.split(\"-\")\n                val year = months(2)\n         \
    \       val month = months(0)\n                val day = months(1)\n         \
    \       val datesMonths = dates.split(\"-\")\n                val numMonths =\
    \ datesMonths(1).length\n                val numDays = datesMonths(0).length\n\
    \                val numYears = datesMonths(2).length\n                if (month\
    \ < 1 || month > 12 || (numMonths < 1 || numMonths > 12) || (numDays < 1 || numDays\
    \ > 31) || (numYears < 1 || numYears > 30)) {\n                    return false\n\
    \                }\n                if (day < 1 || day > 30) {\n             \
    \       return false\n                }\n                if (month == 2 && (numDays\
    \ > 29 || numYears > 12)) {\n                    return false\n              \
    \  }\n                if (year < 0 || year > 9999) {\n                    return\
    \ false\n                }\n                return true\n            }\n     \
    \       case _ => false\n        }", "        if(date == null || date.isEmpty)\
    \ {\n            return false\n        }\n        var dateArr = date.replaceAll(\"\
    -\", \"/\").split(\"/\")\n        if(dateArr.length < 3 || dateArr.length > 3)\
    \ {\n            return false\n        }\n        var monthArr = dateArr(1).split(\"\
    -\")\n        var dayArr = dateArr(0).split(\"-\")\n        if(monthArr.length\
    \ != 3 || dayArr.length != 3) {\n            return false\n        }\n       \
    \ if(monthArr(1) < 1 || monthArr(1) > 12 || dayArr(1) < 1 || dayArr(1) > 31 ||\
    \ monthArr(2) < 1 || monthArr(2) > 12 || dayArr(2)< 1 || dayArr(2)> 30) {\n  \
    \          return false\n        }\n        return true", '        !date.isEmpty
    && date.matches("(\\d{1,2}-\\d{2}-\\d{4})")', "        // Your code goes here\n\
    \        val parts = date.split('-')\n        val daysInMonth = new Array[Int](31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth30 = new\
    \ Array[Int](30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n        var valid =\
    \ false\n        for(day <- 1 to parts(2).toInt) {\n            if(!daysInMonth(parts(0).toInt))\
    \ {\n                return false\n            }\n            if(!(parts(1).toInt\
    \ == 1 || daysInMonth(parts(1).toInt) || daysInMonth30(parts(1).toInt))) {\n \
    \               return false\n            }\n            if(daysInMonth(parts(0).toInt)\
    \ && daysInMonth30(parts(1).toInt)) {\n                for(month <- 1 to 12) {\n\
    \                    if(!(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12 || month == 4 || month == 6 || month\
    \ == 9 || month == 11) && day <= daysInMonth(month)) {\n                     \
    \   return false\n                    }\n                    if(!(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) && day <= daysInMonth30(month)) {\n\
    \                        return false\n                    }\n               \
    \ }\n            }\n        }\n        return true", "        if(!date.isEmpty){\n\
    \            if(date.size < 3 || date.size > 7){\n                return false\n\
    \            }\n            val monthPattern = \"(\\\\d{1,2})\"\n            val\
    \ datePattern = \"(\\\\d{1,2})-(\\\\d{1,2})-(\\\\d{2,4})\"\n            val pattern\
    \ = s\"$monthPattern-$datePattern\"\n            val patternObj = scala.util.matching.Regex(pattern)\n\
    \            if(!patternObj.findFirstIn(date).isDefined) {\n                return\
    \ false\n            }\n        }\n        true", "        val pattern = \"(\\\
    \\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        val dateString = date.replaceAll(pattern,\
    \ \"$3-$2-$1\")\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        try {\n            val date1 = dateFormat.parse(dateString)\n     \
    \       date1\n            false\n        } catch {\n            case e: Exception\
    \ => true\n        }", "        if (date == null || date.isEmpty || date.trim().isEmpty)\
    \ {\n            return false\n        }\n        var datePart = date.split(\"\
    -\")\n        var day = datePart(2)\n        var month = datePart(0).substring(2,4)\n\
    \        var year = datePart(0)\n        if (day < 1 || day > 31 || month < 1\
    \ || month > 12) {\n            return false\n        }\n        if (month < 4\
    \ || month > 2) {\n            return false\n        }\n        if (day < 1 ||\
    \ day > 29) {\n            return false\n        }\n        if (year < \"1\" ||\
    \ year > \"12\") {\n            return false\n        }\n        return true",
  "        date.nonEmpty\n        date.contains(\"-\")\n        date.contains(\"/\"\
    )\n        date.contains(\"-\")\n        date.nonEmpty\n        date.split(\"\
    -\").length == 3\n        date.split(\"/\").length == 2\n        date.split(\"\
    -\").head.toInt <= 12\n        date.split(\"/\").head.toInt <= 12\n        date.split(\"\
    -\").tail.toInt <= 31\n        date.split(\"/\").tail.toInt <= 29", "        val\
    \ arr = date.split(\"-\")\n        if(arr.length != 3)\n            false\n  \
    \      else {\n            val month1 = arr(0)\n            val month2 = arr(1)\n\
    \            val day1 = arr(2)\n            var months = 0\n            var days\
    \ = 0\n            month1 = month1.toInt\n            month2 = month2.toInt\n\
    \            day1 = day1.toInt\n            for((month) <- 1 until 12)\n     \
    \           for((day) <- 1 to 28)\n                    if(month == month1 && day\
    \ <= day1)\n                        break\n                    else\n        \
    \                days+=1\n\n            for((month) <- 1 until 12)\n         \
    \       if(month == month2 && day <= day1)\n                    break\n      \
    \          else\n                    months+=1\n\n            if(months < 1 &&\
    \ months > 12)\n                false\n            else if(days < 1 && days >\
    \ 29)\n                false\n            else\n                true\n       \
    \ }", "        date match {\n            case \"\" => false\n            case\
    \ x if (x.length > 0) =>\n                val dates = x.split(\"-\")\n       \
    \         (dates.length == 3 && dates.forall(_.matches(\"\\\\d{2}/\\\\d{2}/\\\\\
    d{4}\")))\n            case x if (x.length > 0) =>\n                val dates\
    \ = x.split(\"-\")\n                (dates.length == 3 && dates.forall(_.matches(\"\
    \\\\d{2}/\\\\d{2}/\\\\d{4}\"))) ||\n                    (dates.length == 4 &&\
    \ dates.forall(_.matches(\"\\\\d{2}/\\\\d{2}/\\\\d{4}\")))\n            case _\
    \ =>\n                false\n        }", "        var month = 0\n        var day\
    \ = 0\n        var year = 0\n        val dateFormat = \"mm-dd-yyyy\"\n       \
    \ try {\n            val dateString:String = date\n            val dateArray =\
    \ dateString.split(\"-\")\n            month = Integer.parseInt(dateArray(0))\n\
    \            day = Integer.parseInt(dateArray(1))\n            year = Integer.parseInt(dateArray(2))\n\
    \        } catch {\n            case _:NumberFormatException => {\n          \
    \      println(\"Invalid date format. Should be mm-dd-yyyy\")\n              \
    \  return(false)\n            }\n        }\n        if(month < 1 || month > 12)\
    \ return(false)\n        if(day < 1 || day > 31) return(false)\n        if(day\
    \ > 30 || day < 1) return(false)\n        if(month == 2) return(true)\n      \
    \  return(true)", "        if(date.isEmpty){\n          return false\n       \
    \ }\n        val dateParts = date.split(\"/\")\n        val month = dateParts(0).toInt\n\
    \        val day = dateParts(1).toInt\n        val year = dateParts(2).toInt\n\
    \        val daysInMonth = (scala.util.Calendar.getInstance().get(scala.util.Calendar.MONTH)\
    \ + 1) to 12\n\n        var check = true\n        if(month < 1 || month > 12){\n\
    \            check = false\n        }\n        if(day < 1 || day > 31 || !(scala.util.Calendar.getInstance().get(scala.util.Calendar.MONTH)\
    \ in daysInMonth)){\n            check = false\n        }\n        if(year < 1\
    \ || year > 2020){\n            check = false\n        }\n\n        return check",
  "        if(!isEmpty(date) && date.length() != 11 && !isNumeric(date) && date.indexOf(\"\
    /\") != -1 && !isNumeric(date.split(\"/\").head()) && date.indexOf(\"-\") != -1\
    \ && !isNumeric(date.split(\"-\").head()) ){\n            return false\n     \
    \   }\n        if(!isNumeric(date.split(\"-\").head()) || !isNumeric(date.split(\"\
    /\").head()) || date.split(\"/\").head < 0 || date.split(\"-\").head < 0 || date.split(\"\
    /\").head > 12 || date.split(\"-\").head > 12){\n            return false\n  \
    \      }\n        var month : Int = date.split(\"-\").head.toInt\n        var\
    \ day : Int = date.split(\"/\").head.toInt\n        var year : Int = date.split(\"\
    -\").tail.toInt\n\n        if(month > 12 || month < 1 || day > 31 || day < 1 ||\
    \ year > 2004 || year < 2000){\n            return false\n        }\n        else\
    \ if(month == 2 && day == 30 && (year % 4 == 0 && year % 100 != 0 || year % 400\
    \ == 0)){\n            return false\n        }\n        else if(month == 2 &&\
    \ day == 29 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)){\n     \
    \       return false\n        }\n        else{\n            return true\n    \
    \    }", "        if(date.isEmpty)\n            return false\n\n        var year\
    \ : Int = 0\n        var month : Int = 0\n        var day : Int = 0\n        var\
    \ monthDay : Int = 0\n        var check : Int = 0\n        var valid : Boolean\
    \ = false\n\n        if(date.split(\"-\").length != 3)\n            return false\n\
    \n        val dateArray = date.split(\"-\")\n\n        year = dateArray(0).toInt\n\
    \        month = dateArray(1).toInt\n        day = dateArray(2).toInt\n\n    \
    \    if(year < 1 || year > 9999 || month < 1 || month > 12 || day < 1 ||\n   \
    \        day > 31 || (month == 1 && day > 29) || month == 2)\n            valid\
    \ = false\n        else\n            monthDay = month * 30 + day\n           \
    \ check = day + monthDay - 1\n\n            if(check < 1 ||\n               check\
    \ > monthDay)\n                valid = false\n\n        return valid", '        date.trim.length
    == 0']
stop_tokens:
- "\n    }\n"
