name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"\
  1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["      // Define a pattern to extract the valid file's name\n      val\
    \ pattern = Pattern.compile(\"^[^.]+[.](txt|exe|dll)$\")\n      // Define a pattern\
    \ to extract the substring before the dot\n      val pattern1 = Pattern.compile(\"\
    ^[^.]+\")\n      // Define a pattern to extract the substring after the dot\n\
    \      val pattern2 = Pattern.compile(\"[.]([^.]+)\")\n      // Extract the substring\
    \ before the dot from the given file name\n      val substr_before_dot = pattern1.findFirstIn(file_name)\n\
    \      // Extract the substring after the dot from the given file name\n     \
    \ val substr_after_dot = pattern2.findFirstIn(substr_before_dot)\n      // Extract\
    \ the valid file's name\n      val file_name = substr_after_dot.group(0)\n   \
    \   // Return the result\n      if(file_name.length > 3 && file_name.contains('.')){\n\
    \        if(substr_after_dot.group(0).equals(\".\")){\n          if(file_name.startsWith(\"\
    a\") || file_name.startsWith(\"A\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n          if(file_name.startsWith(\"\
    0\") || file_name.startsWith(\"9\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n        }\n      }\n      \"\
    No\"", "        var result : String = \"No\"\n        if (file_name.count(_.isDigits)\
    \ < 3){\n            result = \"No\"\n        }else if (file_name.contains(\"\
    .\")){\n            val file_name = file_name.split(\".\").head\n            if\
    \ (file_name.forall(_.matches(\"[a-zA-Z]+\"))) {\n                val file_name\
    \ = file_name.split(\".\").last\n                if (file_name.contains(\"txt\"\
    ) || file_name.contains(\"exe\") || file_name.contains(\"dll\")){\n          \
    \          result = \"Yes\"\n                }else{\n                    result\
    \ = \"No\"\n                }\n            }else{\n                result = \"\
    No\"\n            }\n        }else{\n            result = \"No\"\n        }\n\
    \        return result", "        var status = \"No\";\n        if (file_name.length\
    \ > 3 || file_name.indexOf('.') == -1 || file_name.charAt(0) == '0' || file_name.charAt(0)\
    \ == '9') {\n            status = \"Yes\";\n        }\n        if (file_name.indexOf('.')\
    \ != -1 && file_name.charAt(file_name.indexOf('.') + 1) != '.') {\n          \
    \  status = \"No\";\n        }\n        if (file_name.substring(0, 1) == ('A'\
    \ || 'a' || 'B' || 'b' || 'C' || 'c' || 'D' || 'd' || 'E' || 'e' || 'F' || 'f'\
    \ || 'G' || 'g' || 'H' || 'h' || 'I' || 'i' || 'J' || 'j' || 'K' || 'k' || 'L'\
    \ || 'l' || 'M' || 'm' || 'N' || 'n' || 'O' || 'o' || 'P' || 'p' || 'Q' || 'q'\
    \ || 'R' || 'r' || 'S' || 's' || 'T' || 't' || 'U' || 'u' || 'V' || 'v' || 'W'\
    \ || 'w' || 'X' || 'x' || 'Y' || 'y' || 'Z' || 'z') {\n            status = \"\
    No\";\n        }\n        if (file_name.substring(file_name.indexOf('.') + 1)\
    \ != ('txt' || 'exe' || 'dll')) {\n            status = \"No\";\n        }\n \
    \       return status;", "        var file_name : String = \"No\"\n        var\
    \ first_letter : String = null\n        var dot_counter : Int = 0\n        var\
    \ dot_counter : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter\
    \ : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter : Int\
    \ = 0\n        \n        if(file_name.length() > 3) {\n            file_name =\
    \ null\n        }\n        else {\n            \n            first_letter = file_name.charAt(0)\n\
    \            \n            dot_counter = file_name.lastIndexOf('.')\n        \
    \    \n            if(dot_counter < 0) {\n                file_name = null\n \
    \           }\n            \n            else {\n                dot_counter =\
    \ file_name.lastIndexOf('.', dot_counter + 1)\n                \n            \
    \    if(dot_counter < 0) {\n                    file_name = null\n           \
    \     }\n                \n                else {\n                    dot_counter\
    \ = file_name.indexOf('.')\n                    \n                    if(dot_counter\
    \ < 0) {\n                        file_name = null\n                    }\n  \
    \                  \n                    else {\n                        dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                        \n      \
    \                  if(dot_counter < 0) {\n                            file_name\
    \ = null\n                        }\n                        \n              \
    \          else {\n                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                            \n                           \
    \ if(dot_counter < 0) {\n                                file_name = null\n  \
    \                          }\n                            \n                 \
    \           else {\n                                dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                \n                       \
    \         if(dot_counter < 0) {\n                                    file_name\
    \ = null\n                                }\n                                \n\
    \                                else {\n                                    dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                                \
    \    \n                                    if(dot_counter < 0) {\n           \
    \                             file_name = null\n                             \
    \       }\n                                    \n                            \
    \        else {\n                                        dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                        \n               \
    \                         if(dot_counter < 0) {\n                            \
    \                file_name = null\n                                        }\n\
    \                                        \n                                  \
    \      else {\n                                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                            \n           \
    \                                 if(dot_counter < 0) {\n                    \
    \                            file_name = null\n                              \
    \              }\n                                            \n             \
    \                               else {\n                                     \
    \           dot_counter = file_name.indexOf('.', dot_counter + 1)\n          \
    \                                      \n                                    \
    \            if(dot_counter < 0) {\n                                         \
    \           file_name = null\n                                               \
    \ }\n                                                \n                      \
    \                          else {\n                                          \
    \          dot_counter = file_name.indexOf('.', dot_counter + 1)\n           \
    \                                         \n                                 \
    \                   if(dot_counter < 0) {\n                                  \
    \                      file_name = null\n                                    \
    \                }\n                                                    \n   \
    \                                                 else {\n                   \
    \                                     dot_counter = file_name.indexOf('.', dot_counter\
    \ + 1)\n                                                        \n           \
    \                                             if(dot_counter < 0) {\n        \
    \                                                    file_name = null\n      \
    \                                                  }\n                       \
    \                                 \n                                         \
    \               else {\n                                                     \
    \       dot_counter = file_name.indexOf('.', dot_counter + 1)\n              \
    \                                              \n                            \
    \                                if(dot_counter < 0) {\n                     \
    \                                           file_name = null\n               \
    \                                             }\n                            \
    \                                \n", "        var result : String = \"No\"\n\
    \        var index : Int = 0\n        var dot_count : Int = 0\n        val file_name\
    \ = file_name.trim\n        if (file_name =~ \"^([A-Za-z])+([0-9]+)(\\\\.txt|\\\
    \\.exe|\\\\.dll)$\") {\n            index = file_name.indexOf(\".\")\n       \
    \     if (index >= 0) {\n                val dot_index = file_name.indexOf(\"\
    .\", index + 1)\n                if (dot_index >= 0) {\n                    dot_count\
    \ = dot_index - index\n                    if (dot_count > 3) {\n            \
    \            result = \"No\"\n                    }\n                    else\
    \ {\n                        result = \"Yes\"\n                    }\n       \
    \         }\n            }\n            else {\n                result = \"No\"\
    \n            }\n        }\n        return result", "         if (!file_name contains\
    \ '.') \n              file_name \n         else if (file_name length <= 3) \n\
    \              \"No\" \n         else if (!file_name startsWith ('a')) \n    \
    \          \"No\" \n         else if (!(file_name contains ('d')) \n         \
    \     \"No\" \n         else if (!(file_name contains ('e')) \n              \"\
    No\" \n         else if (!(file_name contains ('x')) \n              \"No\" \n\
    \         else if (!(file_name contains ('t')) \n              \"No\" \n     \
    \    else if (!(file_name contains ('t')) \n              \"No\"\n         else\
    \ if (!(file_name contains ('f')) \n              \"No\" \n         else if (!(file_name\
    \ contains ('s')) \n              \"No\" \n         else if (!(file_name contains\
    \ ('r')) \n              \"No\" \n         else if (!(file_name contains ('t'))\
    \ \n              \"No\"\n         else \"Yes\"", "        // Your code goes here\n\
    \        val s = file_name.split(\"\\\\.\").length\n        if(s <= 3) \"No\"\
    \ else \"Yes\"", "        if(file_name match {\n            case file_name : String\
    \ if (file_name matches \".*[0-9][0-9]*\" &&\n                               \
    \      file_name matches \".*[A-Za-z].*\" &&\n                               \
    \      file_name contains \".\" && \n                                     file_name\
    \ startsWith \"[0-9]\" && \n                                     file_name endsWith\
    \ \"[A-Za-z]\") => \"Yes\"\n            case file_name : String if (file_name\
    \ contains \".\") => \"Yes\"\n            case file_name : String if (file_name\
    \ startsWith \"[0-9]\") => \"Yes\"\n            case file_name : String if (file_name\
    \ endsWith \"[A-Za-z]\") => \"Yes\"\n            case file_name : String if (file_name\
    \ startsWith \"a\" && file_name contains \"b\") => \"Yes\"\n            case file_name\
    \ : String if (file_name startsWith \"A\" && file_name contains \"B\") => \"Yes\"\
    \n            case _ => \"No\"\n        }) ", "        val file_name = file_name.trim\n\
    \        if(file_name.length()==0) {\n            \"No\"\n        }\n        else\
    \ if(file_name.indexOf(\".\") < 0 ) {\n            \"No\"\n        }\n       \
    \ else if(file_name.substring(0,1) < \"a\" || file_name.substring(0,1) > \"z\"\
    \ ){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-1)!=\
    \ \".\" && file_name.substring(0,1).equals(\".\")){\n            \"No\"\n    \
    \    }\n        else if(file_name.substring(file_name.length-2)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-3)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-4)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-5)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\") && file_name.substring(4,5).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-6)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\") && file_name.substring(4,5).equals(\"\
    .\") && file_name.substring(5,6).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-7)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\") && file_name.substring(4,5).equals(\"\
    .\") && file_name.substring(5,6).equals(\".\") && file_name.substring(6,7).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-8)!=\"\
    .\" && file_name.substring(0,1).", "        val regex = \"\"\"^[0-9]{1,3}\\.[a-z][^\\\
    .]+\\.(txt|exe|dll)$\"\"\".r\n        if(file_name !~ regex) {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"", "        val pattern = \"\"\"(\\\
    d{1,3})\\.(txt|exe|dll)\"\"\".r\n        val matched = file_name.matches(pattern)\n\
    \        if(matched) (\"Yes\") else (\"No\")", "        val names = file_name.split(\"\
    \\\\.\") \n        val firstName = names(0).split(\"\")\n        if (firstName.length\
    \ == 0)\n          return \"No\"\n        if (firstName.length > 3)\n        \
    \  return \"No\"\n        if (!(firstName.head >= 'a' && firstName.head <= 'z')\
    \ && !(firstName.head >= 'A' && firstName.head <= 'Z'))\n          return \"No\"\
    \n        if (!names(1).contains('.') || names(1).split('.').head == \"\") \n\
    \          return \"No\"\n        if (names(1).split('.').head != \"txt\" && names(1).split('.').head\
    \ != \"exe\" && names(1).split('.').head != \"dll\")\n            return \"No\"\
    \n        return \"Yes\"", "    \timport scala.collection.mutable.ListBuffer\n\
    \        val fileName = file_name // make a local variable that is only used in\
    \ this method\n        val nameChars = fileName.split(\"\").toList\n        //\
    \ Checks to see if there are more than three digits in the file\n        if (nameChars.length\
    \ > 3) {\n            val noDigits = fileName.substring(0, fileName.length-1)\n\
    \            if (nameChars.count(_ > 0) > 2) {\n                return \"No\"\n\
    \            }\n        }\n        // Checks if the name only contains one dot\n\
    \        if (fileName.indexOf('.') == -1) {\n            return \"No\"\n     \
    \   }\n        // Checks to see if the name starts with a letter\n        if (nameChars.count(_\
    \ > 0) < nameChars.length + 1) {\n            return \"No\"\n        }\n     \
    \   // Checks to see if the name contains one of the 3 extensions\n        val\
    \ ext = fileName.substring(fileName.length-3, fileName.length)\n        if (ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n            return \"Yes\"\
    \n        }\n        return \"No\"", "        val file_list = file_name.split(\"\
    \")\n        if(file_list.length <> 3) {\n            return \"No\"\n        }\n\
    \        if(file_list.tail.count(x => x == \".\") != 1) {\n            return\
    \ \"No\"\n        }\n        if(file_list.head == \"\" || file_list.head < 'a'\
    \ || file_list.head > 'z') {\n            return \"No\"\n        }\n        if(file_list.tail.filter(x\
    \ => x !=\".\").filter(x => x != \"txt\" && x != \"exe\" && x != \"dll\").count(x\
    \ => x == \"\") != 1) {\n            return \"No\"\n        }\n        \"Yes\"",
  "        if(file_name = null || file_name.length < 3 || file_name.indexOf('.') !=\
    \ -1 || file_name.substring(0, 1) == '0' || file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).toLowerCase().indexOf(\"a\") == -1){\n             return \"No\"\n    \
    \    }\n        else{\n            val s = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1)\n            val subs = s.split(\",\")\n            if(subs.contains(\"\
    txt\") || subs.contains(\"exe\") || subs.contains(\"dll\")){\n               \
    \ return \"Yes\"\n            }\n            else{\n                return \"\
    No\"\n            }\n        }", "        var valid = True\n        if(file_name\
    \ != ''){\n            if(!file_name.matches(\"[0-9]\")){\n                valid\
    \ = False\n            }\n            if(!file_name.contains('.')){\n        \
    \        valid = False\n            }\n            if(!file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\")){\n                valid = False\n            }\n \
    \           if(!file_name.substring(1, file_name.length).matches(\"(txt|exe|dll)\"\
    )){\n                valid = False\n            }\n        }\n        if(!valid){\n\
    \            return \"No\"\n        }else{\n            return \"Yes\"\n     \
    \   }", "        val pattern = \"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\.exe$|^[0-9]{1,3}\\\
    .dll$\"\n        val matcher = pattern.r findFirstIn file_name\n        matcher.map(fileName\
    \ => if (fileName != \"\" && fileName.charAt(0) > 'a' && fileName.charAt(0) >\
    \ 'z') \"Yes\" else \"No\")", "        val regex = \"\"\"^((?!\\d{3})(?!\\.)[a-zA-Z].*\\\
    .[a-zA-Z]{2,3})$\"\"\".r\n        val isFileValid = regex.findFirstIn(file_name).isDefined\n\
    \        val isDotFound = file_name.indexOf('.') != -1\n        val isNotEmpty\
    \ = file_name.nonEmpty\n        val isSingleLetter = file_name.startsWith('a')\n\
    \        val isNotLetter = file_name.startsWith('A')\n        val isValid = \n\
    \            isFileValid &&\n            isDotFound &&\n            isNotEmpty\
    \ &&\n            isSingleLetter &&\n            isNotLetter \n        regex.findFirstIn(file_name).map(str\
    \ => s\"Yes\").getOrElse(s\"No\")", "        def isValid(name : String) : Boolean\
    \ = \n            name.size <= 3 || name.contains(\".\") && name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\") &&\n            (name.substring(0,name.lastIndexOf('.')).toSet\
    \ == Set(\"txt\", \"exe\", \"dll\") || \n            name.substring(0,name.lastIndexOf('.')).toSet\
    \ == Set(\"txt\", \"exe\", \"dll\"))\n        isValid(file_name) ? \"Yes\" : \"\
    No\"", "    \tif (file_name.length() > 3 || file_name.lastIndexOf('.') < 0 ||\
    \ file_name.substring(0, 1).isEmpty) {\n    \t\treturn \"No\"\n    \t}\n    \t\
    var dot : String = _\n    \tvar file_name : String = _\n    \tvar dot_pos : int\
    \ = -1\n    \tfor (i <- 1 to file_name.length-1) {\n    \t\tif (file_name(i) !=\
    \ '.') return \"No\"\n    \t}\n    \tfor (i <- 1 to file_name.length-1) {\n  \
    \  \t\tif (file_name(i) != '.') {\n    \t\t\tdot_pos = i\n    \t\t\tbreak\n  \
    \  \t\t}\n    \t}\n    \tif (dot_pos == -1) dot = \".\"\n    \telse {\n    \t\t\
    for (i <- 1 to dot_pos) {\n    \t\t\tif (file_name(i) < 'a' || file_name(i) >\
    \ 'z') return \"No\"\n    \t\t}\n    \t}\n    \tif (file_name.substring(dot_pos+1).matches(\"\
    txt|exe|dll\")) return \"Yes\"\n    \telse return \"No\"", "        val index\
    \ = fileName.lastIndexOf('.')\n        if (index == -1) {\n            \"No\"\n\
    \        } else {\n            if (index == 0 || fileName.substring(0,1) == \"\
    \") {\n                \"No\"\n            } else if(fileName.substring(0,1) <\
    \ 'a' || fileName.substring(0,1) > 'z') {\n                \"No\"\n          \
    \  } else if(fileName.substring(0,1) > 'a' && fileName.substring(0,1) < 'z') {\n\
    \                \"No\"\n            } else if(fileName.substring(0,2) == \"..\"\
    ) {\n                \"No\"\n            } else if(fileName.substring(index) <>\
    \ \"txt\" && fileName.substring(index) <> \"exe\" && fileName.substring(index)\
    \ <> \"dll\") {\n                \"No\"\n            } else if(fileName.substring(index,2)\
    \ == \"..\") {\n                \"No\"\n            } else {\n               \
    \ \"Yes\"\n            }\n        }", "        val file_name = file_name.substring(0,file_name.lastIndexOf('.')-1)\n\
    \        if (file_name.length==3 && file_name.substring(0,1).equals('0') && file_name.substring(0,1)\
    \ !='9' ) \n            return (\"No\")\n        else if (file_name.contains('.')==false\
    \ && file_name.substring(0,1).equals('a') && file_name.substring(0,1) !='z' &&\
    \ file_name.substring(0,1) !='A') \n            return (\"No\")\n        else\
    \ if (file_name.contains('.')==true && file_name.substring(0,1).equals('0') &&\
    \ file_name.substring(0,1) !='9' ) \n            return (\"No\")\n        else\
    \ \n            return (\"Yes\")", "        if(file_name == \"\" || file_name.length()\
    \ != 6){\n          return \"No\"\n        }\n        \n        var file_extension\
    \ = file_name.substring(file_name.lastIndexOf('.') + 1)\n        \n        if(file_extension.equals(\"\
    exe\") || file_extension.equals(\"dll\") || file_extension.equals(\"txt\")){\n\
    \          return \"Yes\"\n        } else {\n          return \"No\"\n       \
    \ }", "        if(file_name.matches(\"[0-9]{3}\")){\n            if(file_name.contains(\"\
    .\")){\n                if(file_name.indexOf(\".\") > 1)\n                   \
    \ return \"No\"\n                else if(file_name.charAt(0).toUpperCase == (file_name.charAt(0).toLowerCase))\n\
    \                    return \"No\"\n                else\n                   \
    \ return \"Yes\"\n            }\n        }\n        else\n            return \"\
    No\"", "        // write your code here\n        val file_list = file_name.split(\"\
    \\\\.\").map(_.head.toInt)\n        val file_name = file_name.split(\"\\\\.\"\
    ).last\n        val result = if (file_name.length() > 3) \"Yes\" else \"No\"\n\
    \        val dot_name = file_list.last.substring(0,1)\n        val file_name =\
    \ file_list.last.substring(1,file_list.length-1)\n        val ext = file_list.last.substring(file_list.length-1,file_list.length)\n\
    \        if (dot_name == \".\" && file_name != \"exe\" && file_name != \"dll\"\
    ) \"Yes\" else \"No\"", "        var flag = false\n        var file_name = file_name.trim()\n\
    \        var temp_name = \"\"\n        var extension = \"\"\n        var dot_count\
    \ = 0\n        val file_name = file_name.trim()\n        // if file name is more\
    \ than 3 characters long, return \"No\"\n        if (file_name.length() <= 3)\
    \ {\n            flag = false\n        }\n        // if the file name is only\
    \ contains one dot ('.'), return \"No\"\n        else if (file_name.indexOf(\"\
    .\") == -1) {\n            flag = false\n        }\n        // if the file name\
    \ contains only empty substring, return \"No\"\n        else if (file_name.trim.isEmpty)\
    \ {\n            flag = false\n        }\n        // if the file name doesn't\
    \ start with a letter from the latin alphabet or \n        // doesn't end with\
    \ one of these strings(['txt', 'exe', 'dll']), return \"No\"\n        else if\
    \ (file_name.trim.length > 3 || file_name.trim.startsWith(\"a\") || file_name.trim.startsWith(\"\
    b\") || file_name.trim.startsWith(\"c\") || file_name.trim.startsWith(\"d\") ||\
    \ file_name.trim.startsWith(\"e\") || file_name.trim.startsWith(\"f\") || file_name.trim.startsWith(\"\
    g\") || file_name.trim.startsWith(\"h\") || file_name.trim.startsWith(\"i\") ||\
    \ file_name.trim.startsWith(\"j\") || file_name.trim.startsWith(\"k\") || file_name.trim.startsWith(\"\
    l\") || file_name.trim.startsWith(\"m\") || file_name.trim.startsWith(\"n\") ||\
    \ file_name.trim.startsWith(\"o\") || file_name.trim.startsWith(\"p\") || file_name.trim.startsWith(\"\
    q\") || file_name.trim.startsWith(\"r\") || file_name.trim.startsWith(\"s\") ||\
    \ file_name.trim.startsWith(\"t\") || file_name.trim.startsWith(\"u\") || file_name.trim.startsWith(\"\
    v\") || file_name.trim.startsWith(\"w\") || file_name.trim.startsWith(\"x\") ||\
    \ file_name.trim.startsWith(\"y\") || file_name.trim.startsWith(\"z\")) {\n  \
    \          flag = false\n        }\n        // if the file name doesn't contain\
    \ '.', return \"No\"\n        else if (file_name.indexOf('.') > -1) {\n      \
    \      flag = false\n        }\n        else {\n            temp_name = file_name.substring(0)\n\
    \            // count the number of dots in the file name\n            dot_count\
    \ = temp_name.lastIndexOf(\".\")\n            // if dot_count is equal to 0\n\
    \            if (dot_count == -1) {\n                temp_name = temp_name.substring(1)\n\
    \                // if file name contains any extension, get the extension name\n\
    \                if (temp", "      val splitName = file_name.split(\"\\\\.\")\n\
    \      if (splitName.length > 2) {\n        if (splitName(0) matches \"^[a-z]+$\"\
    \ && splitName(1) != \"\") {\n          if (splitName(2) matches \"^(exe|dll)$\"\
    ) {\n            return \"Yes\"\n          } else {\n            return \"No\"\
    \n          }\n        } else {\n          return \"No\"\n        }\n      } else\
    \ {\n        return \"No\"\n      }", "        // Only change code below this\
    \ line\n        if( file_name.contains(\".\")){\n            if( !file_name.substring(0,1).matches(\"\
    [a-z]\") ||\n               file_name.substring(0,1).matches(\"[A-Z]\")){\n  \
    \              return \"No\"\n            } else{\n                return \"Yes\"\
    \n            }\n        } else{\n            return \"No\"\n        }", "   \
    \     var flag = file_name match {\n            case \"\" => \"No Name\"\n   \
    \         case _ => true\n        }\n        var name = file_name\n        var\
    \ counter = 0;\n        var letter_index = 0;\n        while (name.length > 0)\
    \ {\n            letter_index = 0\n            while (name.charAt(0) < '0' ||\
    \ name.charAt(0) > '9') {\n                letter_index += 1\n               \
    \ name =  name.substring(letter_index)\n            }\n            name =  name.substring(0,letter_index)\n\
    \            if (flag == true) {\n                if (name.contains(\".\") ==\
    \ true) {\n                    name =  name.substring(0,name.lastIndexOf(\".\"\
    ))\n                }\n                if (name.length != 3) {\n             \
    \       name = \"No Name\"\n                }\n                if (name != \"\
    No Name\" && name.charAt(0) < 'a' || name.charAt(0) > 'z') {\n               \
    \     name = \"No Name\"\n                }\n                if (name != \"No\
    \ Name\" && name.charAt(name.length-1) < 'a' || name.charAt(name.length-1) > 'z')\
    \ {\n                    name = \"No Name\"\n                }\n             \
    \   counter = counter + 1;\n                if (counter > 3) {\n             \
    \       flag = \"No\"\n                }\n            }\n        }\n        return\
    \ flag", "        val len = file_name.length\n        if (len >= 3 && file_name.contains(\"\
    .\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(len-2,len).contains(\"\
    txt|exe|dll\"))\n            \"Yes\"\n        else\n            \"No\"", "   \
    \     val fileName = file_name.trim()\n        var check = False\n        if (fileName.length()\
    \ > 3 && !fileName.contains(\".\")){\n            check = True\n        }\n  \
    \      if (fileName.contains(\".\")){\n            check = True\n        }\n \
    \       if (check){\n            for (i <- 0 to fileName.length() - 1) {\n   \
    \             val letter = fileName.charAt(i)\n                val alphaNum =\
    \ letter.toInt\n                if (letter.isLetter && alphaNum >= 'a' && alphaNum\
    \ <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n        \
    \        }\n                else{\n                    check = False\n       \
    \         }\n            }\n        }\n        if (check){\n            check\
    \ = True\n        }\n        if (check){\n            for (i <- 0 to fileName.length()\
    \ - 1) {\n                val letter = fileName.charAt(i)\n                val\
    \ alphaNum = letter.toInt\n                if (letter.isLetter && alphaNum >=\
    \ 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <=\
    \ 'Z'){\n                }\n                else{\n                    check =\
    \ False\n                }\n            }\n        }\n        if (check){\n  \
    \          check = True\n        }\n        if (check){\n            for (i <-\
    \ 0 to fileName.length() - 1) {\n                val letter = fileName.charAt(i)\n\
    \                val alphaNum = letter.toInt\n                if (letter.isLetter\
    \ && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A'\
    \ && alphaNum <= 'Z'){\n                }\n                else{\n           \
    \         check = False\n                }\n            }\n        }\n       \
    \ if (check){\n            check = True\n        }\n        if (check){\n    \
    \        for (i <- 0 to fileName.length() - 1) {\n                val letter =\
    \ fileName.charAt(i)\n                val alphaNum = letter.toInt\n          \
    \      if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter\
    \ && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n               \
    \ else{\n                    check = False\n                }\n            }\n\
    \        }\n        if (check){\n            check = True\n        }\n       \
    \ if (check){\n            for (i <- 0 to fileName.length() - 1) {\n         \
    \       val letter = fileName.charAt(i)\n                val alphaNum = letter.toInt\n\
    \                if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' ||\
    \ letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n\
    \                else{\n                    check = False\n                }\n\
    \            }\n        }\n        if (check){\n", "        val split_name = file_name.split(\"\
    \\\\.\")\n        if (split_name.length != 3 || split_name(0).isEmpty) {\n   \
    \         return \"No\"\n        }\n        if (split_name(1).isEmpty) {\n   \
    \         return \"No\"\n        }\n        if (!(split_name(1) match {\n    \
    \        case s if s.head < 'a' || s.head > 'z' =>\n                \"No\"\n \
    \           case s if s.head < 'A' || s.head > 'Z' =>\n                \"No\"\n\
    \            case s =>\n                \"Yes\"\n            })) {\n         \
    \   return \"No\"\n        }\n        if (split_name(2) != \"exe\" && split_name(2)\
    \ != \"dll\") {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        val file_name = file_name.toLowerCase\n        val length = file_name.length\n\
    \        val hasNumber = (length < 40 || length.startsWith(\"0\") || length.startsWith(\"\
    .\"))\n        val hasDot = file_name contains '.'\n        val dotIndex = file_name\
    \ lastIndexOf '.'\n        val isLetter = file_name contains 'a' || 'b' || 'c'\
    \ || 'd' || 'e' || 'f' || 'g' || 'h' || 'i' || 'j' || 'k' || 'l' || 'm' || 'n'\
    \ || 'o' || 'p' || 'q' || 'r' || 's' || 't' || 'u' || 'v' || 'w' || 'x' || 'y'\
    \ || 'z'\n        val isTxt = file_name contains \"txt\" || \"txt\" || \"txt\"\
    \n        val isExe = file_name contains \"exe\" || \"exe\" || \"exe\" || \"exe\"\
    \n        val isDll = file_name contains \"dll\" || \"dll\" || \"dll\"\n     \
    \   if (hasNumber || hasDot || dotIndex == -1 || !isLetter || !isTxt || !isExe\
    \ || !isDll) {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        if (file_name.length > 3) {\n            // if file_name.length > 3, then\
    \ \n            //    1) check that file_name.split('.').length == 1\n       \
    \     //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"No\" \n        } else {\n            // if file_name.length\
    \ < 3, then \n            //    1) check that file_name.split('.').length == 2\n\
    \            //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"Yes\" \n        }", "        val pattern = \"^\\\\\
    d{0,3}\\\\.[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}$\"\n        val\
    \ pattern3 = \"^[a-z]{1}$\"\n        if(file_name.matches(pattern)){\n       \
    \     return \"Yes\"\n        }\n        else if(file_name.matches(pattern2)){\n\
    \            return \"No\"\n        }\n        else if(file_name.matches(pattern3)){\n\
    \            return \"No\"\n        }\n        else return \"No\"", "        if\
    \ (file_name.length > 3) {\n            val file_name = file_name.dropRight(3).dropLeft(1)\n\
    \            file_name match {\n                case \"\" => return \"No\"\n \
    \               case _ => return \"Yes\"\n            }\n        }\n        file_name\
    \ match {\n            case \".\" => return \"No\"\n            case _ => return\
    \ \"Yes\"\n        }", "        val dotpos = file_name.indexOf(\".\")\n      \
    \  if(dotpos == -1) \n            No\n        else if(file_name.substring(0,dotpos)\
    \ == \"\") \n            No\n        else if(file_name.substring(0,dotpos) not\
    \ in  ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\
    \ && \n                file_name.substring(dotpos,dotpos + 2) in List(\"txt\"\
    ,\"exe\",\"dll\") \n             ) \n            No\n        else\n          \
    \  Yes", "        if(file_name == null) {\n          \"No\"\n        }\n     \
    \   else {\n          val pattern = \"[0-9]{1,3}\\\\.[a-zA-Z]+\"\n          val\
    \ pattern1 = \"^[a-zA-Z]+\"\n          val pattern2 = \"^[a-zA-Z]+$\"\n      \
    \    val pattern3 = \"^[a-zA-Z]+.[a-zA-Z]+$\"\n          val pattern4 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+\"\n          val pattern5 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n  \
    \        val pattern6 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern7\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern8 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern9 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n \
    \         val pattern10 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern11\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern12 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern13 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern14 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern15\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern16 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern17 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern18 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern19\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern20 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern21 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern22 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern23\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern24 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern25 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern26 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern27\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern28 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern29 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern30 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern31\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern32 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern33 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern34 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern35\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern36", "        // Your\
    \ code here\n        var validFileName = false\n        if(file_name.contains(\"\
    .\")){\n            if(file_name.length>3){\n                for(c <- file_name.toCharArray){\n\
    \                    if(c<='9' && c>='0')\n                        return validFileName\
    \ \n                    if(c != '.')\n                        return validFileName\n\
    \                }\n            }\n        }\n        if(file_name.contains(\"\
    .txt\") || file_name.contains(\".exe\") || file_name.contains(\".dll\")){\n  \
    \          validFileName=true\n        }\n        if(!validFileName)\n       \
    \     return \"No\"\n        return \"Yes\"", "        val regexp = \"\"\"^[a-z0-9]+\\\
    .[a-z0-9]+$\"\"\".r\n        val pattern = regexp.findFirstIn(file_name).get\n\
    \        if (file_name != pattern) {\n            return \"No\"\n        } else\
    \ {\n            return \"Yes\"\n        }", "      val re = scala.util.matching.Regex(\"\
    \"\"^(?!.*\\.)[a-zA-z][a-zA-z.]*\\.(txt|exe|dll)$\"\"\")\n      if(re.findFirstIn(file_name).isDefined){\n\
    \        \"Yes\"\n      }\n      else {\n        \"No\"\n      }", "        val\
    \ name_list = file_name.split(\"\\\\.\").toList\n        if (name_list.length\
    \ < 3 || name_list.last == \"\" || name_list.last.charAt(0) < 'a' || name_list.last.charAt(0)\
    \ > 'z' || name_list.last.substring(0,1) < 'a' || name_list.last.substring(0,1)\
    \ > 'z' || name_list.last.substring(1, name_list.last.length).split(\"[a-zA-Z]\"\
    ).length != name_list.last.length || name_list.last.substring(1, name_list.last.length)\
    \ != \"txt\" || name_list.last.substring(1, name_list.last.length) != \"exe\"\
    \ || name_list.last.substring(1, name_list.last.length) != \"dll\") {\n      \
    \      return \"No\"\n        }\n        else {\n            return \"Yes\"\n\
    \        }", "        val pattern = \"[0-9]{3}\\.[a-zA-Z].*\" // 3 digits followed\
    \ by . followed by 1 letter from latin alphabet\n        val pattern2 = \"\"\"\
    ^[a-zA-Z].+[.]txt|dll|exe\"\"\"\n        val pattern3 = \"^[a-zA-Z].+[.]txt|dll|exe\"\
    \n        file_name match {\n            case pattern() => \"Yes\"\n         \
    \   case pattern2() => \"No\"\n            case pattern3() => \"No\"\n       \
    \     case _ => \"No\"\n        }", "        var flag = false;\n        var count\
    \ = file_name.length()\n        for (i<- 0 to count-2){\n            if(!((file_name(i)\
    \ == '0') || (file_name(i) == '1') || (file_name(i) == '2') || (file_name(i) ==\
    \ '3') || (file_name(i) == '4') || (file_name(i) == '5') || (file_name(i) == '6')\
    \ || (file_name(i) == '7') || (file_name(i) == '8') || (file_name(i) == '9'))){\n\
    \                flag = true;\n            }\n        }\n        if(!flag){\n\
    \            flag = false;\n            for (i<- 0 to count-1){\n            \
    \    if(!((file_name(i) == '.') || (file_name(i) == '\\''))){\n              \
    \      flag = true;\n                }\n            }\n        }\n        if(!flag){\n\
    \            flag = false;\n            for (i<- 0 to count-1){\n            \
    \    if(file_name(i).charAt(0) > 'z' ||\n                        file_name(i).charAt(0)\
    \ > 'Z' ||\n                        file_name(i).charAt(0) > 'a' ||\n        \
    \                file_name(i).charAt(0) > 'A'){\n                    flag = true;\n\
    \                }\n            }\n        }\n        if(!flag){\n           \
    \ flag = false;\n            for (i<- 0 to count-1){\n                if(file_name(i).length()\
    \ > 3 || \n                        file_name(i).charAt(0) > '9'){\n          \
    \          flag = true;\n                }\n            }\n        }\n       \
    \ if(flag){\n            return \"No\";\n        }\n        return \"Yes\";",
  "        val pattern = \"\"\"[0-9]{1,3}\\.[a-z][a-z]+\"\"\"\n        if (file_name\
    \ == \"\" || file_name == \".\" || file_name.dropWhile(x => x == \".\").isEmpty)\
    \ {\n            \"No\"\n        } else if (file_name.dropWhile(x => x == \".\"\
    ).takeWhile(x => x >= 'a' && x <= 'z').nonEmpty &&\n                   file_name.takeWhile(x\
    \ => x >= 'a' && x <= 'z').dropWhile(x => x == \".\").forall(x => pattern.findFirstMatchIn(x)\
    \ != None))\n            \"Yes\"\n        else\n            \"No\"", "       \
    \ var correct = false\n        var file_name = file_name.trim\n        // Check\
    \ all conditions\n        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val num = \"0123456789\"\n        for (i <- 0 until file_name.length\
    \ - 1) {\n            if(file_name(i) != \".\" && file_name(i).length() > 1 &&\
    \ \n              file_name(i).charAt(0) > '9' || \n              file_name(i).charAt(0)\
    \ > 'Z' || \n              file_name(i).charAt(0) > 'A' || \n              file_name(i).charAt(0)\
    \ > 'Z') {\n                println(\"Invalid file name $file_name\")\n      \
    \          correct = false\n            }\n            if(file_name(i) == \".\"\
    ) {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).isEmpty) {\n \
    \               println(\"Invalid file name $file_name\")\n                correct\
    \ = false\n            }\n            if(!letters.contains(file_name(i).charAt(0)))\
    \ {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).indexOf('.') <\
    \ 0) {\n                println(\"Invalid file name $file_name\")\n          \
    \      correct = false\n            }\n            if(!(num.contains(file_name(i).substring(1)))\
    \ ) {\n                println(\"Invalid file name $file_name\")\n           \
    \     correct = false\n            }\n        }\n        if(correct) {\n     \
    \       println(\"Valid file $file_name\")\n        } else {\n            println(\"\
    Invalid file $file_name\")\n        }", "        if (file_name.length > 3 || file_name.substring(0,1).isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"A\" || \n            file_name.substring(0,2)\
    \ == \"9\" && file_name.substring(0,2) != \"0\" || \n            file_name.substring(0,2)\
    \ != \"1\" || file_name.substring(0,3) != \".\") {\n            return \"No\"\n\
    \        }\n        if (file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"exe\" &&\n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"dll\" || \n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"txt\") {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        val fileNameStr = file_name\n        val fileName = fileNameStr.substring(0,\
    \ fileNameStr.lastIndexOf(\".\"))\n        val substr = fileNameStr.substring(fileNameStr.lastIndexOf(\"\
    .\") + 1)\n        val fileExt = fileNameStr.substring(fileNameStr.lastIndexOf(\"\
    .\") + 1, fileNameStr.length)\n\n        // If the file's name contains less than\
    \ three digits, return \"No\"\n        if (fileNameStr.length < 3) {\n       \
    \     return \"No\"\n        }\n\n        // If the file's name contains more\
    \ than three digits, return \"No\"\n        if (fileNameStr.length > 3) {\n  \
    \          return \"No\"\n        }\n\n        // If the file does not contain\
    \ dot ('.'), return \"No\"\n        if (fileName.indexOf('.') == -1) {\n     \
    \       return \"No\"\n        }\n\n        // If the file's extension does not\
    \ meet the requirements, return \"No\"\n        if (fileExt.length != 3 && fileExt.length\
    \ != 4) {\n            return \"No\"\n        }\n\n        // If the file's name\
    \ starts with letters from the latin alphabet ('a'-'z' and\n        // 'A'-'Z'),\
    \ return \"No\"\n        if (fileName.charAt(0) < 'a' || fileName.charAt(0) >\
    \ 'z' && fileName.charAt(0) < 'A' || fileName.charAt(0) > 'Z') {\n           \
    \ return \"No\"\n        }\n\n        // If the file's name contains the substring\
    \ 'txt' or 'exe' or 'dll', return\n        // \"Yes\"\n        val fileExtArray\
    \ = Array(fileExt.toLowerCase(), fileExt.toLowerCase(), fileExt.toLowerCase())\n\
    \        var isCorrect = false\n        for (ext <- fileExtArray) {\n        \
    \    if (fileName.contains(ext)) {\n                isCorrect = true\n       \
    \         break\n            }\n        }\n        if (isCorrect) {\n        \
    \    return \"Yes\"\n        } else {\n            return \"No\"\n        }",
  "        if (file_name.length == 0)\n            throw new IllegalArgumentException(\"\
    file_name should not be empty\")\n        else if (file_name.split(\".\").length\
    \ < 2)\n            throw new IllegalArgumentException(\"file_name should have\
    \ one dot '.'\")\n        else if (file_name.split(\".\").head.nonEmpty && \n\
    \                !file_name.split(\".\").head.head.matches(\"^[A-Za-z]\"))\n \
    \           throw new IllegalArgumentException(\"file's name should start with\
    \ a letter from the latin alphabet\")\n        else if (file_name.split(\".\"\
    ).last.nonEmpty && \n                (file_name.split(\".\").last.head != \"txt\"\
    \ && \n                file_name.split(\".\").last.head != \"exe\" && \n     \
    \           file_name.split(\".\").last.head != \"dll\"))\n            throw new\
    \ IllegalArgumentException(\"file's name should end with 'txt', 'exe' or 'dll'\"\
    )\n        else{\n            val valid = file_name.split(\".\").last.head ==\
    \ \"txt\" || file_name.split(\".\").last.head == \"exe\" || file_name.split(\"\
    .\").last.head == \"dll\"\n            if (valid)\n                return \"Yes\"\
    \n            else\n                return \"No\"\n        }", "         //TODO:\
    \ Implement me!\n         return \"Yes\"", "        // Create a mutable variable\
    \ to hold the valid string and initialize it \n        // to 'No'.\n        var\
    \ valid : String = \"No\"\n        // Create a mutable variable to hold the valid\
    \ string and initialize it to 'Yes'.\n        var valid : String = \"Yes\"\n \
    \       // Create a mutable variable to hold the file's name and initialize it\
    \ \n        // to an empty string.\n        var file_name : String = \"\"\n  \
    \      // Create a mutable variable to hold the file's name and initialize it\
    \ \n        // to the file's name.\n        var file_name : String = \"\"\n  \
    \      // Create a mutable variable to hold the characters of the file name and\
    \ initialize it \n        // to an empty mutable collection.\n        var file_name_chars\
    \ : mutable.MutableList[Char] = mutable.MutableList[Char]()\n        // Create\
    \ a mutable variable to hold the characters of the file name and initialize it\
    \ \n        // to the file's name.\n        var file_name_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char](file_name)\n        // Create a mutable variable\
    \ to hold the characters of the valid string and initialize it \n        // to\
    \ an empty mutable collection.\n        var valid_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char]()\n        // Create a mutable variable to hold\
    \ the characters of the valid string and initialize it \n        // to the valid\
    \ string.\n        var valid_chars : mutable.MutableList[Char] = mutable.MutableList[Char](valid)\n\
    \        // Create a mutable variable to hold the characters of the file name\
    \ and initialize it \n        // to the file's name.\n        var file_name_chars\
    \ : mutable.MutableList[Char] = mutable.MutableList[Char](file_name)\n       \
    \ // Create a mutable variable to hold the characters of the valid string and\
    \ initialize it \n        // to the valid string.\n        var valid_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char](valid)\n        // Iterate through the characters\
    \ of the valid string.\n        for (i_valid_char <- 0 until valid_chars.length)\
    \ {\n            // Create a temporary variable to hold the character of the valid\
    \ string.\n            var tmp_valid_char = valid_chars(i_valid_char)\n      \
    \      // Iterate through the characters of the file name.\n            for (i_file_name_char\
    \ <- 0 until file_name_chars.length) {\n                // Create a temporary\
    \ variable to hold the character of the file name.\n                var tmp_file_name_char\
    \ = file_name_chars(i_file_name_char)\n                // Check if the current\
    \ character of the file name is \n                // equal to the current character\
    \ of the valid string.\n                if (tmp_file_name_char == tmp_valid_char)\
    \ {\n                    // If the current character of the valid string is \n\
    \                    // equal to 'x', and the current character of the file name\
    \ is \n                    // equal to 'x', then the current character of the\
    \ valid string is \n                    // equal to 'y'.\n                   \
    \ if (tmp_valid_char == \"x\") {\n                        valid == \"Yes\"\n \
    \                       // If the current character of the valid string is \n\
    \                        // equal to 'x', ", "        def isValid(name : String):\
    \ Boolean = {\n            val parts = name.split(\"\\\\.\");\n            parts.length\
    \ == 1 && parts.head.isEmpty || parts.length == 2 &&\n                parts.head.nonEmpty\
    \ && parts(0) match {\n                    case Character('a') | Character('z')\
    \ | Character('A') | Character('Z') => true;\n                    case _ => false;\n\
    \                }\n        }\n        val parts = file_name.split(\"\\\\.\");\n\
    \        if (parts.length == 1 && parts.head.isEmpty) {\n            return \"\
    No\"\n        } else if (parts.length == 2 && !parts.head.isEmpty) {\n       \
    \     val part0 = parts.head\n            if (!isValid(part0)) return \"No\"\n\
    \            val part1 = parts.last\n            if (part1 match {\n         \
    \       case Character('.') => isValid(part0) && (part1 match {\n            \
    \        case Character('t') | Character('x') | Character('t') => true;\n    \
    \                case Character('e') | Character('x') | Character('e') => true;\n\
    \                    case Character('.') => true;\n                    case _\
    \ => false;\n                }) \n                case _ => isValid(part0)\n \
    \           })\n        }\n        return \"Yes\"", "       val invalid = mutable.Set[Char]()\n\
    \       val parts = file_name.split(\"\\\\.\") // split the file name into parts\
    \ delimited by a '.'\n       val numOfNumbers = parts.count(_.matches(\"[0-9]+\"\
    ))\n       val emptyStrings = parts.count(_.isEmpty())\n       val startWithLetter\
    \ = parts.count(x => x.startsWith(\"a\") || x.startsWith(\"A\"))\n       val endingWithExtension\
    \ = parts.count(x => x.endsWith(\"txt\") || x.endsWith(\"exe\") || x.endsWith(\"\
    dll\"))\n       val numOfDots = parts.count(_.contains(\".\"))\n       val hasLetter\
    \ = parts.count(_.matches(\"[a-zA-Z]+\"))\n       val hasDot = parts.count(_.contains(\"\
    .\"))\n       val length = parts.length\n       if(length>3) return \"No\"\n \
    \      if(numOfDots > 1) return \"No\"\n       if(!emptyStrings) return \"No\"\
    \n       if(!startWithLetter) return \"No\"\n       if(!endingWithExtension) return\
    \ \"No\"\n       if(hasLetter) return \"No\"\n       if(hasDot) return \"No\"\n\
    \       if(!numOfNumbers) return \"No\"\n       if(invalid.contains(Char('.')))\
    \ return \"No\"\n       if(invalid.contains(Char('_'))) return \"No\"\n      \
    \ if(invalid.contains(Char('0'))) return \"No\"\n       if(invalid.contains(Char('1')))\
    \ return \"No\"\n       if(invalid.contains(Char('a'))) return \"No\"\n      \
    \ if(invalid.contains(Char('A'))) return \"No\"\n       \"Yes\"", "    \tval length\
    \ = file_name.length\n    \tif (length > 3) return \"No\"\n    \tif (file_name\
    \ == \".\") return \"No\"\n    \tif (file_name.substring(0, 1) == \".\" || file_name.substring(length-1,\
    \ length) != \".\") return \"No\"\n    \tif (file_name.substring(0,1).isEmpty\
    \ || file_name.substring(0,1) >= 'a' || file_name.substring(0,1) <= 'z' || file_name.substring(0,1)\
    \ >= 'A' || file_name.substring(0,1) <= 'Z') return \"No\"\n    \tif (file_name.substring(length-1,length)\
    \ != \"txt\" || file_name.substring(length-1,length) != \"exe\" || file_name.substring(length-1,length)\
    \ != \"dll\") return \"No\"\n    \t\"Yes\"", "        var check = \"\"\n     \
    \   for (x <- 0 until file_name.length) {\n            val c = file_name.charAt(x)\n\
    \            if (c == '.') {\n                val sub = file_name.substring(x,\
    \ x + 1)\n                check += sub\n            }\n            else if (c\
    \ >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n                check += c\n\
    \            }\n            else {\n                check += \".\"\n         \
    \   }\n        }\n        \n        if (check.length >= 3 && check.length > 0\
    \ && !check.startsWith(\".\") && check.length != 0) {\n            for (x <- 0\
    \ until check.length) {\n                val c = check.charAt(x)\n           \
    \     if (c == '.') {\n                    val sub = check.substring(x, x + 1)\n\
    \                    check += sub\n                }\n                else if\
    \ (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n                    check\
    \ += c\n                }\n                else {\n                    check +=\
    \ \".\"\n                }\n            }\n        }\n        check", "      \
    \  var result : String = \"\"\n        var valid = file_name match {\n       \
    \     case x if x.length < 3 => \"No\"\n            case x if x.indexOf('.') <\
    \ 1 => \"No\"\n            case x if !x.startsWith('a') && !x.startsWith('A')\
    \ => \"No\"\n            case x if x.substring(0,1) != x.substring(0,1).toLower\
    \ => \"No\"\n            case x if x.substring(x.indexOf('.') + 1).contains(\"\
    exe\") => result = x.substring(x.indexOf('.') + 1).contains(\"exe\")\n       \
    \     case x if x.substring(x.indexOf('.') + 1).contains(\"dll\") => result =\
    \ x.substring(x.indexOf('.') + 1).contains(\"dll\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"txt\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    txt\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"log\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"log\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"config\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"config\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"zip\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    zip\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"jar\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"jar\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"conf\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"conf\")\n            case x if x.substring(x.indexOf('.') +\
    \ 1).contains(\"xml\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    xml\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => ", "        val fileNameLength = file_name.length\n        var isValid =\
    \ true\n        for (i <- 0 until fileNameLength) {\n            if (file_name(i).isDigit)\
    \ {\n                if (i > 0) {\n                    isValid = false\n     \
    \               return\"No\"\n                }\n            }\n            else\
    \ if (file_name(i) != \".\") {\n                isValid = false\n            \
    \    return\"No\"\n            }\n            else if (file_name(i).isEmpty) {\n\
    \                isValid = false\n                return\"No\"\n            }\n\
    \            else if (file_name(i).toLowerCase != \"a\" && file_name(i).toLowerCase\
    \ != \"b\" &&\n                     file_name(i).toLowerCase != \"c\" && file_name(i).toLowerCase\
    \ != \"d\" &&\n                     file_name(i).toLowerCase != \"e\" && file_name(i).toLowerCase\
    \ != \"f\" &&\n                     file_name(i).toLowerCase != \"g\" && file_name(i).toLowerCase\
    \ != \"h\" &&\n                     file_name(i).toLowerCase != \"i\" && file_name(i).toLowerCase\
    \ != \"j\" &&\n                     file_name(i).toLowerCase != \"k\" && file_name(i).toLowerCase\
    \ != \"l\" &&\n                     file_name(i).toLowerCase != \"m\" && file_name(i).toLowerCase\
    \ != \"n\" &&\n                     file_name(i).toLowerCase != \"o\" && file_name(i).toLowerCase\
    \ != \"p\" &&\n                     file_name(i).toLowerCase != \"q\" && file_name(i).toLowerCase\
    \ != \"r\" &&\n                     file_name(i).toLowerCase != \"s\" && file_name(i).toLowerCase\
    \ != \"t\" &&\n                     file_name(i).toLowerCase != \"u\" && file_name(i).toLowerCase\
    \ != \"v\" &&\n                     file_name(i).toLowerCase != \"w\" && file_name(i).toLowerCase\
    \ != \"x\" &&\n                     file_name(i).toLowerCase != \"y\" && file_name(i).toLowerCase\
    \ != \"z\") {\n                isValid = false\n                return\"No\"\n\
    \            }\n        }\n        return\"Yes\"", "        val file_name =\n\
    \            if (file_name.isEmpty) return(\"No\")\n            else { file_name\
    \ match {\n                case s if s.contains(\".\") && (s.charAt(0) != 'a'\
    \ && s.charAt(0) != 'z' && s.charAt(0) != 'A' && s.charAt(0) != 'Z') =>\n    \
    \                return(\"No\")\n                case _ =>\n                 \
    \   if (file_name.toString.replaceFirst(\"^[0-9]\", \"\")\n                  \
    \              .head\n                                .matches(\"^[a-zA-Z]+\"\
    )) return(\"Yes\")\n                    else return(\"No\")\n            }}",
  "        // Write your solution here\n        val nameArray = file_name.split(\"\
    \\\\.\")\n        if(nameArray.length != 3 || nameArray(0).isEmpty() || nameArray(0).first\
    \ < 'a' || nameArray(0).first > 'z' || nameArray(1).isEmpty() || nameArray(1).first\
    \ < 'a' || nameArray(1).first > 'z' || nameArray(2).isEmpty() || nameArray(2).first\
    \ != 'txt' || nameArray(2).first != 'exe' || nameArray(2).first != 'dll'){\n \
    \           return \"No\"\n        }\n        else{\n            return \"Yes\"\
    \n        }", "       val nums = fileName.split('.').map(_.toInt).toSet\n    \
    \   if(nums.size==0 || nums.toList.isEmpty || nums.toList.head.head < 'a' || nums.toList.head.head\
    \ > 'z'){\n       \treturn \"No\"\n       }\n       val last = nums.toList.last\n\
    \       if(last.last!='e' && last.last!='E' && last.last!='x' && last.last!='X'\
    \ && last.last!='m' && last.last!='M'){\n       \treturn \"No\"\n       }\n  \
    \     val first = fileName.substring(0,fileName.indexOf('.')+1)\n       val validFirst\
    \ = ('A'..'Z').filter(x => x!=first.head).exists(x => x!=first.last)\n       val\
    \ validLast = ('a'..'z').filter(x => x!=last.last).exists(x => x!=last.head)\n\
    \       if(!validFirst || !validLast){\n       \treturn \"No\"\n       }\n   \
    \    \"Yes\"", "        val pattern = Pattern.compile(\n            \"[0-9]{1,3}[.][^\\\
    .]{0,1}|\" +\n            \"^[a-zA-z].{0,1}\"\n        )\n        if (!pattern.matcher(file_name).matches())\
    \ {\n            return \"No\"\n        }\n        if (!file_name.contains('.'))\
    \ {\n            return \"No\"\n        }\n        if (!file_name.substringBefore('.').isEmpty)\
    \ {\n            return \"No\"\n        }\n        val file = file_name.substringBefore('.')\n\
    \        if (!file.matches(\"^[a-zA-Z]+\")) {\n            return \"No\"\n   \
    \     }\n        val file_extension = file_name.substringAfter('.')\n        if\
    \ (!file_extension.contains('.') || file_extension.contains(' ')) {\n        \
    \    return \"No\"\n        }\n        if (file_extension.contains(\"txt\") ||\
    \ file_extension.contains(\"exe\") || file_extension.contains(\"dll\")) {\n  \
    \          return \"Yes\"\n        } else {\n            return \"No\"\n     \
    \   }", "        var result : String = \"No\"\n        // Get rid of the file\
    \ extension.\n        file_name split ('.') foreach { x => x take 1 foreach {\
    \ y => if (y == '.') file_name replace (y, '') } }\n        // Get rid of any\
    \ leading '.'\n        file_name split ('.') foreach { x => x take 1 foreach {\
    \ y => if (y == '.') file_name replace (y, '') } }\n        // Get rid of any\
    \ trailing '.'\n        file_name split ('.') foreach { x => x take 1 foreach\
    \ { y => if (y == '.') file_name replace (y, '') } }\n        // Make sure the\
    \ file name is made up of only one '.'\n        if(file_name split ('\\.').length\
    \ < 1) file_name = file_name + \".\"\n        // Make sure the substring before\
    \ the dot is made up of only letters (a-z and A-Z)\n        if (file_name split\
    \ ('\\.')(0).filter(x => x >= 'a' && x <= 'z') != file_name split ('\\.')(0).filter(x\
    \ => x >= 'A' && x <= 'Z')) \"No\"\n        else result = \"Yes\"\n        return\
    \ result", "        def digit(c : Char) : Boolean = c >= '0' && c <= '9'\n   \
    \     def dot(c : Char) : Boolean = c >= '.'\n        def startsWithLetter(c:\
    \ Char) : Boolean = c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\n        def\
    \ endsWithFileType(c: Char) : Boolean = c >= 't' && c <= 'z' || c >= 'T' && c\
    \ <= 'Z' || c >= 'e' && c <= 'z' || c >= 'E' && c <= 'Z' || c == '.' || c == ','\n\
    \n        val fileNameWithoutDot = file_name filterNot (c => dot(c)) filterNot\
    \ (c => digit(c))\n        val fileNameWithDot = file_name.drop(1) filterNot (c\
    \ => digit(c)) filterNot (c => dot(c))\n        val fileNameWithoutDotParts =\
    \ fileNameWithoutDot.map(c => c match {\n            case c if !startsWithLetter(c)\
    \ => c\n            case c if !endsWithFileType(c) => c\n            case c if\
    \ c == ',' => \"0\"\n            case c if c == '.' => \"0\"\n            case\
    \ c => \"1\"\n        })\n        val fileNameWithDotParts = fileNameWithDot.map(c\
    \ => c match {\n            case c if !startsWithLetter(c) => c\n            case\
    \ c if !endsWithFileType(c) => c\n            case c if c == ',' => \"0\"\n  \
    \          case c if c == '.' => \"0\"\n            case c => \"1\"\n        })\n\
    \n        (fileNameWithoutDotParts ++ fileNameWithDotParts).size <= 3", "    \
    \    if (file_name.split(\"[.]\").length != 2) return \"No\"\n        if (file_name.split(\"\
    [.]\")(0) == \"\") return \"No\"\n        if (file_name.split(\"[.]\")(0).startsWith(\"\
    a\") || file_name.split(\"[.]\")(0).startsWith(\"A\")) return \"No\"\n       \
    \ if (file_name.split(\"[.]\")(0).startsWith(\"0\") || file_name.split(\"[.]\"\
    )(0).startsWith(\"9\")) return \"No\"\n        if (file_name.split(\"[.]\")(1).contains(\"\
    exe\") || file_name.split(\"[.]\")(1).contains(\"dll\")) return \"Yes\"\n    \
    \    return \"No\"", "      var correct = false // true if string is valid\n \
    \     val str = \"\" + file_name // convert the file_name from String to String\n\
    \      var i = -1\n      val maxFileName = 100\n      while(!correct && i < maxFileName)\
    \ {\n        i += 1\n        str = str.replaceAll(\"\\\\D\", \"\")\n        str\
    \ = str.replaceAll(\"\\\\.\", \"\")\n        val dotIndex = str.indexOf(\".\"\
    )\n        if (dotIndex != -1) {\n          val beforeDot = str.substring(0, dotIndex)\n\
    \          val afterDot = str.substring(dotIndex + 1)\n          val isLetter\
    \ = beforeDot.matches(\"[a-zA-z]\")\n          val isDigit = beforeDot.matches(\"\
    [0-9]\")\n          val isSingleDot = afterDot.matches(\"[.]\")\n          if\
    \ (isLetter && isDigit && isSingleDot) {\n            val fileExtension = afterDot\n\
    \            if (fileExtension == \"txt\" || fileExtension == \"exe\" || fileExtension\
    \ == \"dll\") {\n              correct = true\n            }\n          } else\
    \ {\n            val fileExtension = str\n            if (fileExtension == \"\
    txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n           \
    \   correct = true\n            }\n          }\n        }\n      }\n      if (correct)\
    \ {\n        \"Yes\"\n      } else {\n        \"No\"\n      }", "        val numDot\
    \ = file_name.count { c => c == '.' }\n        if (numDot > 3) \"No\"\n      \
    \  else if (numDot == 0) \"No\"\n        else {\n            val firstLetter =\
    \ file_name.charAt(0)\n            val firstLetterCap = firstLetter.toLower\n\
    \            if (firstLetter != 'a' && firstLetter != 'b' && firstLetter != 'c'\
    \ &&\n                firstLetter != 'd' && firstLetter != 'e' && firstLetter\
    \ != 'f' &&\n                firstLetter != 'g' && firstLetter != 'h' && firstLetter\
    \ != 'i' &&\n                firstLetter != 'j' && firstLetter != 'k' && firstLetter\
    \ != 'l' &&\n                firstLetter != 'm' && firstLetter != 'n' && firstLetter\
    \ != 'o' &&\n                firstLetter != 'p' && firstLetter != 'q' && firstLetter\
    \ != 'r' &&\n                firstLetter != 's' && firstLetter != 't' && firstLetter\
    \ != 'u' &&\n                firstLetter != 'v' && firstLetter != 'w' && firstLetter\
    \ != 'x' &&\n                firstLetter != 'y' && firstLetter != 'z') {\n   \
    \             return \"No\"\n            }\n            var isValid = true\n \
    \           var subString = \"\"\n            var checker = true\n           \
    \ var firstLetterCap = file_name.charAt(0)\n            var lastLetterCap = file_name.charAt(file_name.length-1)\n\
    \            var checker = true\n            val stringToCheck = file_name\n \
    \           var i = 2\n            while (i <= stringToCheck.length) {\n     \
    \           val letter = stringToCheck.charAt(i)\n                val letterCap\
    \ = letter.toLower\n                if (letter == '.') {\n                   \
    \ if (checker == false) {\n                        isValid = false\n         \
    \               break\n                    }\n                    checker = false\n\
    \                }\n                if (letter == '.') {\n                   \
    \ checker = true\n                }\n                if (letterCap >= 'a' && letterCap\
    \ <= 'z') {\n                    if (firstLetterCap == letterCap) {\n        \
    \                firstLetterCap = letterCap\n                    } else {\n  \
    \                      isValid = false\n                        break\n      \
    \              }\n                } else if (letterCap >= 'A' && letterCap <=\
    \ 'Z') {\n                    if (firstLetterCap == letterCap) {\n           \
    \             firstLetterCap = letterCap\n                    } else {\n     \
    \                   isValid = false\n                        break\n         \
    \           }\n                } else {\n                    isValid = false\n\
    \                    break\n                }\n                subString += letter\n\
    \                i += 1\n            }\n            if (isValid && firstLetterCap\
    \ == 'a') {\n                if (subString.toLowerCase == \"txt\") {\n       \
    \             return \"Yes\"\n                } else if (subString.toLowerCase\
    \ == \"exe\") {\n                    return ", "        val count = file_name.toCharArray.drop(3).sum\n\
    \        var isFileNameValid = false\n        if(count == 0){\n            isFileNameValid\
    \ = true\n        }\n        else if(count >= 3 && file_name.indexOf('.')>=1){\n\
    \            isFileNameValid = true\n        }\n        else if(!file_name.drop(1).isEmpty){\n\
    \            val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n\
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \            isFileNameValid = beforeDot != \"\" && afterDot != \"\" && beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a' && afterDot.charAt(0) < 'z' && afterDot.charAt(0)\
    \ > 'a'\n        }\n        if(isFileNameValid){\n            if(file_name.drop(1).isEmpty){\n\
    \                return \"Yes\"\n            }\n            else{\n          \
    \      val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n    \
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \                if(!beforeDot.isEmpty){\n                    if(beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a'){\n                        return \"No\"\n\
    \                    }\n                }\n                if(!afterDot.isEmpty){\n\
    \                    if(beforeDot.charAt(0) < 'z' && beforeDot.charAt(0) > 'a'){\n\
    \                        return \"No\"\n                    }\n              \
    \  }\n                if(afterDot != \"exe\" && afterDot != \"dll\" && afterDot\
    \ != \"txt\"){\n                    return \"No\"\n                }\n       \
    \         else{\n                    return \"Yes\"\n                }\n     \
    \       }\n        }\n        else{\n            return \"No\"\n        }", " \
    \       if (file_name.length > 3) {\n             return \"No\"\n        }\n \
    \       val dotIndex = file_name.indexOf(\".\");\n        if (dotIndex == 0) {\n\
    \             return \"No\"\n        }\n        val dotString: String = file_name.substring(0,\
    \ dotIndex);\n        val firstChar: Char = dotString.charAt(0);\n        if (firstChar\
    \ < 'a' || firstChar > 'z') {\n             return \"No\"\n        }\n       \
    \ val lastChar: Char = dotString.charAt(dotString.length-1);\n        if (lastChar\
    \ < 'a' || lastChar > 'z') {\n             return \"No\"\n        }\n        val\
    \ fileNameNoExtension: String= dotString.substring(1);\n        var isValid =\
    \ false;\n        if (fileNameNoExtension.contains(\"txt\") || fileNameNoExtension.contains(\"\
    exe\") || fileNameNoExtension.contains(\"dll\") ) {\n             isValid = true;\n\
    \        }\n        if (fileNameNoExtension.length > 3 ) {\n             isValid\
    \ = false;\n        }\n        return if (isValid) \n             \"Yes\" \n \
    \       else\n             \"No\"", "        val name = file_name.substring(0,\
    \ file_name.length - 1)\n        val index = name.lastIndexOf('.')\n        if\
    \ (index > 0) {\n            val length = name.length - index\n            val\
    \ letters = name.substring(0, index).toCharArray\n            if (letters.length\
    \ == 1 && letters(0) == 'a' && letters(1) == 'z') \n                if (length\
    \ == 2) \n                    val dotIndex = name.indexOf('.')\n             \
    \       val lastIndex = dotIndex + 1\n                    if (lastIndex <= name.length\
    \ && name.substring(lastIndex - 1, lastIndex).toString == \"txt\" || name.substring(lastIndex\
    \ - 1, lastIndex).toString == \"exe\" || name.substring(lastIndex - 1, lastIndex).toString\
    \ == \"dll\") {\n                        return \"Yes\"\n                    }\
    \ else { \n                        return \"No\"\n                    }\n    \
    \        } else \n                if (length == 0) \n                    return\
    \ \"No\"\n        }\n        \"No\"", "        val numOfDigits = file_name.count\
    \ { x => x <='9' }\n        if(numOfDigits <= 3)\n            \"No\"\n       \
    \ else if(file_name.contains(\".\"))\n            \"No\"\n        else if(file_name.substringBefore(\"\
    .\").isEmpty)\n            \"No\"\n        else if(!((file_name.substringBefore(file_name.indexOf(\"\
    .\")).matches(\"^[a-zA-Z]\"))))\n            \"No\"\n        else if(!file_name.substringAfter(\"\
    .\") in List(\"txt\", \"exe\", \"dll\"))\n            \"No\"\n        else\n \
    \           \"Yes\"", "        if (fileName.split(\".\").length <= 1 || \"..\"\
    .equals(file_name.split(\".\").head) || !file_name.split(\".\").head.head.equals(\"\
    a\") || !file_name.split(\".\").last.contains(\"txt\") || !file_name.split(\"\
    .\").last.contains(\"exe\") || !file_name.split(\".\").last.contains(\"dll\"))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"", "        val\
    \ file_name = file_name\n        val file_name = file_name.toDouble\n        val\
    \ file_name = file_name.toInt\n        val file_name = file_name.toDouble.toChar\n\
    \        val file_name = file_name.toDouble.toChar\n        val file_name = file_name.toDouble.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar\n        val\
    \ file_name = file_name.toDouble.toChar.toChar.toChar.toChar\n        val file_name\
    \ = file_name.toDouble.toChar.toChar.toChar.toChar.toChar\n        val file_name\
    \ = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar\n        val\
    \ file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.to",
  "        var fileName : String = \"No\"\n        var dotIndex = 0\n        val dotIndex\
    \ = file_name.indexOf('.');\n        if (dotIndex != -1) {\n            var firstLetter\
    \ = file_name.substring(0, dotIndex);\n            val firstLetterCode = firstLetter.toCharArray().map(_.toInt)\n\
    \            if (firstLetterCode == 0)\n                return \"No\";\n     \
    \       var lastLetter = file_name.substring(dotIndex + 1);\n            val lastLetterCode\
    \ = lastLetter.toCharArray().map(_.toInt)\n            if (lastLetterCode != 0\
    \ && !(lastLetterCode == 1 && (firstLetterCode == 65 || firstLetterCode == 66\
    \ || firstLetterCode == 67 || firstLetterCode == 68 || firstLetterCode == 69 ||\
    \ firstLetterCode == 70)))\n                return \"No\";\n            var fileNameLength\
    \ = file_name.length - dotIndex - 1\n            var hasOnlyOneDot = false\n \
    \           val hasOnlyOneDot = file_name.substring(0, dotIndex) == \".\"\n  \
    \          if (hasOnlyOneDot)\n                fileNameLength = file_name.length\n\
    \            val fileNameCheck = file_name match {\n                case \"txt\"\
    \ => true\n                case \"exe\" => true\n                case \"dll\"\
    \ => true\n                case _ => false\n            }\n            if (!hasOnlyOneDot\
    \ || fileNameLength <= 3 || fileNameCheck == false)\n                return \"\
    No\"\n            fileName = \"Yes\"\n        }\n        return fileName", " \
    \       var result = (\"No\")\n        if(file_name.nonEmpty) {\n            if(file_name.length\
    \ >= 4) {\n                var dotPosition = file_name.indexOf(\".\")\n      \
    \          if(dotPosition != -1) {\n                    var startWith = file_name.substring(0,\
    \ dotPosition)\n                    var lastChar = file_name.substring(dotPosition,\
    \ file_name.length)\n                    var fileExtension = lastChar.toLowerCase\
    \ \n                    if(startWith.length == 1 || startWith.length == 2 || startWith.length\
    \ == 3 || startWith.length == 4) {\n                        if(fileExtension ==\
    \ \"txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n       \
    \                     result = (\"Yes\")\n                        }\n        \
    \            }\n                }\n            }\n        }\n        return result",
  "        def isValidFile(file_name : String): Boolean = {\n            var ok =\
    \ false\n            // Split file name into filename and extension\n        \
    \    val parts = file_name.split(\".\")\n            // check file name\n    \
    \        val length = parts.length\n            if (length != 2) {\n         \
    \       return false\n            }\n            val file_name = parts(0)\n  \
    \          val extension = parts(1)\n            // Check whether file name contains\
    \ only digits\n            if (file_name.matches(\"\\\\d+\")) {\n            \
    \    // Check whether file name contains only valid letters\n                val\
    \ letters = file_name.toCharArray\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) < 'a' || letters(i) > 'z') {\n       \
    \                 return false\n                    }\n                }\n   \
    \         }\n            // Check whether file name contains only one dot\n  \
    \          if (file_name.contains(\".\")) {\n                val dot_index = file_name.indexOf(\"\
    .\")\n                val first_character = if (dot_index >= 0) file_name(dot_index)\
    \ else 0\n                if (dot_index > 0 && first_character == 0) return false\n\
    \            }\n            // Check whether file name starts with letter from\
    \ latin alphabet\n            val chars = file_name.toCharArray\n            if\
    \ (chars.length > 1 && chars(0) == 'a' && chars(1) == 'z') return true\n     \
    \       if (chars.length > 1 && chars(0) == 'A' && chars(1) == 'Z') return true\n\
    \            return false\n        }\n\n        // if file name is not valid,\
    \ return false\n        if (!isValidFile(file_name)) {\n            return \"\
    No\"\n        }\n        // if file name passed the test, return true\n      \
    \  return \"Yes\"", "        // Your code goes here\n        val pattern = \"\\\
    \\d{3}\\\\.\\\\w+\"\n        val result = file_name.toString.matches(pattern)\n\
    \        if(result){\n            if(file_name.toString.substring(0,1) == file_name.toString.charAt(0))\
    \ {\n                if(!file_name.toString.substring(0,1) == file_name.toString.charAt(1)\
    \ || \"txt\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"exe\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"dll\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))){\n\
    \                    return \"No\"\n                }else{\n                 \
    \   return \"Yes\"\n                }\n            }else{\n                return\
    \ \"No\"\n            }\n        }\n        return \"No\"", "        // Your code\
    \ goes here\n        val dots = file_name.split(\"\\\\.\").length\n        if\
    \ (dots > 3 || file_name != file_name.split(\"\\\\.\").last){\n            return\
    \ \"No\"\n        }\n        if(file_name.indexOf(\".\") == 0 || file_name.substring(0,1)\
    \ == \".\" || file_name.substring(0,2) == \".txt\"){\n            return \"No\"\
    \n        }\n        if(file_name.substring(file_name.lastIndexOf(\".\") + 1).toLowerCase\
    \ != \"exe\" || file_name.substring(0,1) == \".\" || file_name.substring(0,2)\
    \ == \".dll\"){\n            return \"No\"\n        }\n        return \"Yes\"",
  "        var valid : Boolean = true\n        val file_name : String = (file_name\
    \ split \".\").length == 1 \n        if(!file_name) {\n            valid = false\n\
    \        }\n        if(file_name.contains(\".\")) {\n            val subString\
    \ = file_name.substring(0, file_name.indexOf(\".\"))\n            val subString\
    \ = subString.toUpperCase().toCharArray\n            val firstChar = subString(0)\n\
    \            val firstCharIsLetter = firstChar.isLetter\n            if(subString.length\
    \ == 1) {\n                if(!firstCharIsLetter) {\n                    valid\
    \ = false\n                }\n            }\n            else {\n            \
    \    var valid : Boolean = false\n                var i : Int = 0\n          \
    \      for(i = 1; i < subString.length; i++) {\n                    val letter\
    \ = subString(i)\n                    val letterIsLetter = letter.isLetter\n \
    \                   if(!firstCharIsLetter && !letterIsLetter) {\n            \
    \            valid = false\n                    }\n                }\n       \
    \         if(!valid) {\n                    valid = false\n                }\n\
    \            }\n        }\n        if(!valid) {\n            valid = \"No\"\n\
    \        }\n        valid", "        if (file_name.length <= 3) {\n          \
    \  return \"No\"\n        } else if (file_name.indexOf('.') == -1) {\n       \
    \     return \"No\"\n        } else if (file_name.substring(0, 1).toInt == 0 ||\
    \ file_name.substring(file_name.length-1, file_name.length).toInt == 0 || file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'TXT' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'EXE' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'DLL') {\n            return \"No\"\n   \
    \     } else {\n            return \"Yes\"\n        }", "      var check : Boolean\
    \ = true\n      var newname : String = \"\"\n      for (i <- 0 until fileName.length())\
    \ {\n        if (check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i))) {\n          newname += file_name.charAt(i)\n\
    \        }\n      }\n      if (newname.length < 3 && newname != \"\" && !check(newname.charAt(0)))\
    \ {\n        return \"No\"\n      }\n      else if (newname.length >= 3 && newname\
    \ != \"\" && !check(newname.charAt(0))) {\n        return \"No\"\n      }\n  \
    \    else if (newname.length >= 2 && newname != \"\" && !check(newname.charAt(0)))\
    \ {\n        return \"No\"\n      }\n      else {\n        return \"Yes\"\n  \
    \    }", "        var result = \"No\";\n        var count = file_name.length;\n\
    \        var letterCount = 0;\n        var digitCount = 0;\n\n        while(count\
    \ > 0) {\n            if(file_name contains \"\\.\") {\n                result\
    \ = \"Yes\";\n                break;\n            }\n            else if(file_name.substring(0,1)\
    \ == \".\") {\n                result = \"No\";\n                break;\n    \
    \        }\n            else if ((file_name.substring(0,1) >='a' && file_name.substring(0,1)\
    \ <='z') \n                    || (file_name.substring(0,1) >='A' && file_name.substring(0,1)\
    \ <='Z')) {\n                letterCount++;\n            }\n            else if\
    \ ((file_name.substring(0,1) >='0' && file_name.substring(0,1) <='9')) {\n   \
    \             digitCount++;\n            }\n            else if ((file_name.substring(0,1)\
    \ >='a' && file_name.substring(0,1) <='z') \n                    || (file_name.substring(0,1)\
    \ >='A' && file_name.substring(0,1) <='Z')\n                    || (file_name.substring(0,1)\
    \ >='0' && file_name.substring(0,1) <='9')) {\n                result = \"No\"\
    ;\n                break;\n            }\n            else {\n               \
    \ result = \"No\";\n                break;\n            }\n            count--;\n\
    \        }\n        if(letterCount == 0 && digitCount == 0) {\n            result\
    \ = \"Yes\";\n        }\n        return result;", "        // Your code here\n\
    \        val fileList = file_name.toList\n        val dotPos = fileList.indexWhere(_\
    \ == '.')\n        if (dotPos > 1) {\n            fileList(0)\n        }\n   \
    \     else {\n            if (fileList.head == \"\") fileList.head\n        }",
  "        if (file_name.length > 3) {\n            return \"No\"\n        }\n   \
    \     if (file_name.contains(\".\")) {\n            return \"No\"\n        }\n\
    \        if (file_name.substring(0, 1) == ('A'..'Z') || file_name.substring(0,\
    \ 1) == ('a'..'z')) {\n            return \"No\"\n        }\n        if (file_name.substringBeforeDot().isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substringAfterDot().toSet.size\
    \ == 3) {\n            return \"No\"\n        }\n        return \"Yes\"", "  \
    \      // Your code here\n        val fileName = file_name split '.'\n       \
    \ if(fileName.count(_ < '0') >= 3 || fileName.count(_ < 'A') >= 1 || fileName.count(_\
    \ > 'Z') >= 1) \"No\"\n        else if(fileName.count(_ > 'Z') >= 1) \"No\"\n\
    \        else \"Yes\"", "        var file_name : String = \"invalid\"\n      \
    \  var isValid : Boolean = false\n        if(file_name.contains(\".\") && file_name.substring(0,\
    \ 1).isLetter){\n            val index = file_name.indexOf(\".\") + 1\n      \
    \      val sub_string = file_name.substring(0, index)\n            val extension\
    \ = file_name.substring(index)\n            if(sub_string.length == 2 && sub_string.contains(\"\
    0\") && sub_string.contains(\"9\") && sub_string.contains(\".\")){\n         \
    \       if(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")){\n                    isValid = true\n                }\n            }\n\
    \        }\n        if(!isValid){\n            return \"No\"\n        }else{\n\
    \            return \"Yes\"\n        }", "        if(file_name.matches(\"^[0-9]{1,3}[^.]+[.][^.]+[.][^.]+$\"\
    ))\n        {\n            if(file_name.indexOf('.') >= 0)\n            {\n  \
    \              var a = file_name.substring(0, file_name.indexOf('.'));\n     \
    \           var b = file_name.substring(file_name.lastIndexOf('.'));\n       \
    \         if(a.matches(\"^[a-zA-z]+\"))\n                {\n                 \
    \   if(b.toString.toUpperCase().contains(\".txt\") || b.toString.toUpperCase().contains(\"\
    .exe\") || b.toString.toUpperCase().contains(\".dll\"))\n                    {\n\
    \                        return \"Yes\";\n                    }\n            \
    \    }\n            }\n        }\n        return \"No\";", "        // TODO :\
    \ Implement the condition check here\n        if(!(file_name.length > 3 && file_name.contains(\"\
    .\")))\n            return \"No\"\n        if(file_name.indexOf(\".\") > 0 &&\
    \ !(file_name.substring(0,1).isLetter && file_name.substring(0,1).isLower) &&\
    \ file_name.substring(0,1) != \"\" && !(file_name.substring(0,4).equals(\"example\"\
    ) || file_name.substring(0,4).equals(\"1example\") || file_name.substring(0,4).equals(\"\
    examples\")))\n            return \"No\"\n        if(!(\"txt\" == file_name.substring(0,4)\
    \ || \"exe\" == file_name.substring(0,4) || \"dll\" == file_name.substring(0,4)))\n\
    \            return \"No\"\n        \"Yes\"", "        def validator(name : String)\
    \ : Boolean = \n            name.matches(\"^[0-9]{3}$\") && name.indexOf('.')\
    \ == 1 && name.substring(0, 1).matches('[A-Za-z]') && \n            name.substring(name.lastIndexOf('.')).toSet.contains('exe')\
    \ && name.substring(name.lastIndexOf('.')).contains('txt') \n            && name.substring(name.lastIndexOf('.')).contains('dll')\
    \ \n        if(validator(file_name)) \"Yes\" else \"No\"", "        val dotPos\
    \ = file_name.lastIndexOf('.')\n        if(dotPos < 0)\n            file_name\n\
    \        else\n            if(dotPos == 0)\n                file_name\n      \
    \      else\n                if(file_name.dropRight(1) != \"txt\" && file_name.dropRight(1)\
    \ != \"exe\" && file_name.dropRight(1) != \"dll\")\n                    file_name\n\
    \                else\n                    if(file_name.dropLeft(1) != \"a\")\n\
    \                        file_name\n                    else\n               \
    \         if(file_name.dropLeft(1) != \"A\")\n                            file_name\n\
    \                        else\n                            if(file_name.dropRight(1)\
    \ != \"0\")\n                                file_name\n                     \
    \       else\n                                file_name", "        val regex =\
    \ \"\"\"^(?!.{3,}\\.)[a-z].+\\.(exe|dll|txt)$\"\"\".r\n        val res = regex.findFirstIn(file_name).getOrElse(\"\
    \")\n        println(res)\n        res", "        if (file_name.trim.isEmpty)\
    \ {\n            return \"No\"\n        } else if (file_name.indexOf('.')==-1)\
    \ {\n            return \"No\"\n        } else if (file_name.substring(0,1) <\
    \ 'a' || file_name.substring(0,1) > 'z') {\n            return \"No\"\n      \
    \  } else if (file_name.substring(file_name.indexOf('.')).matches(\"[^\\.]\"))\
    \ {\n            return \"No\"\n        } else if (file_name.substring(file_name.indexOf('.')).matches(\"\
    [^\\.][^\\.]\")) {\n            return \"No\"\n        } else if (file_name.substring(0,2).matches(\"\
    ^[0-9]\")) {\n            return \"No\"\n        } else {\n            return\
    \ \"Yes\"\n        }", "        // Write your code here\n        var name : String\
    \ = \"\"\n        var index = 0\n        while (index < file_name.length) {\n\
    \            name += file_name(index)\n            if (index != file_name.length\
    \ - 1) {\n                name += \"/\";\n            }\n            index +=\
    \ 1\n        }\n        val dotIndex = name.lastIndexOf(\".\")\n        if (dotIndex\
    \ != -1) {\n            var i = 0\n            val fileName = name.substring(0,dotIndex)\n\
    \            val extension = name.substring(dotIndex + 1, name.length)\n     \
    \       val checkValidFileName = extension match {\n                case _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => true\n                case _ =>\
    \ false\n            }\n            if (checkValidFileName && fileName.contains(\"\
    0\") && fileName.contains(\"9\")) {\n                println(\"true\")\n     \
    \       }\n            else{\n                println(\"false\")\n           \
    \ }\n        }\n        else{\n            println(\"false\")\n        }", " \
    \       val length = file_name.size // Returns length of string\n        if (length\
    \ <= 3 || (length != 3 && file_name.contains(\".\") == false) || (length == 0\
    \ && (file_name.substring(0,1).isEmpty)) || (length == 0 && (file_name.substring(0,1).isDigit(true)\
    \ == false) || (length >= 3 && file_name.substring(0,1).toUpperCase == \"A\" &&\
    \ file_name.substring(1,2).toUpperCase != \"B\" && file_name.substring(1,2).toUpperCase\
    \ != \"C\" && file_name.substring(1,2).toUpperCase != \"D\" && file_name.substring(1,2).toUpperCase\
    \ != \"E\" && file_name.substring(1,2).toUpperCase != \"F\" && file_name.substring(1,2).toUpperCase\
    \ != \"G\" && file_name.substring(1,2).toUpperCase != \"H\" && file_name.substring(1,2).toUpperCase\
    \ != \"I\" && file_name.substring(1,2).toUpperCase != \"J\" && file_name.substring(1,2).toUpperCase\
    \ != \"K\" && file_name.substring(1,2).toUpperCase != \"L\" && file_name.substring(1,2).toUpperCase\
    \ != \"M\" && file_name.substring(1,2).toUpperCase != \"N\" && file_name.substring(1,2).toUpperCase\
    \ != \"O\" && file_name.substring(1,2).toUpperCase != \"P\" && file_name.substring(1,2).toUpperCase\
    \ != \"Q\" && file_name.substring(1,2).toUpperCase != \"R\" && file_name.substring(1,2).toUpperCase\
    \ != \"S\" && file_name.substring(1,2).toUpperCase != \"T\" && file_name.substring(1,2).toUpperCase\
    \ != \"U\" && file_name.substring(1,2).toUpperCase != \"V\" && file_name.substring(1,2).toUpperCase\
    \ != \"W\" && file_name.substring(1,2).toUpperCase != \"X\" && file_name.substring(1,2).toUpperCase\
    \ != \"Y\" && file_name.substring(1,2).toUpperCase != \"Z\" && file_name.substring(1,2).toUpperCase\
    \ != \"A\" && file_name.substring(1,2).toUpperCase != \"B\" && file_name.substring(1,2).toUpperCase\
    \ != \"C\" && file_name.substring(1,2).toUpperCase != \"D\" && file_name.substring(1,2).toUpperCase\
    \ != \"E\" && file_name.substring(1,2).toUpperCase != \"F\" && file_name.substring(1,2).toUpperCase\
    \ != \"G\" && file_name.substring(1,2).toUpperCase != \"H\" && file_name.substring(1,2).toUpperCase\
    \ != \"I\" && file_name.substring(1,2).toUpperCase != \"J\" && file_name.substring(1,2).toUpperCase\
    \ != \"K\" && file_name.substring(1,2).toUpperCase != \"L\" && file_name.substring(1,2).toUpperCase\
    \ != \"M\" && file_name.substring(1,2).toUpperCase != \"N\" && file_name.substring(1,2).toUpperCase\
    \ != \"O\" && file_name", "        var isValid = false\n        val file_name\
    \ = file_name.trim()\n        val length = file_name.length\n        if (length\
    \ == 3 && file_name.contains(\".\") == true && file_name.split(\".\").length ==\
    \ 1 && file_name.substring(0, 1).toLowerCase != \"a\" && file_name.substring(0,\
    \ 1).toLowerCase != \"a\" && file_name.substring(0, 1).toLowerCase != \"a\" &&\
    \ file_name.substring(0,2).toUpperCase != \"A\" && file_name.substring(0,2).toUpperCase\
    \ != \"A\" && file_name.substring(0,2).toUpperCase != \"A\")\n            isValid\
    \ = true\n        if (length != 3)\n            isValid = false\n        if (isValid)\n\
    \            \"Yes\"\n        else\n            \"No\"", "        var fileCheck\
    \ : Boolean = true\n        var fileCheck1 : Boolean = true\n        val length\
    \ : Int = file_name.length()\n        val dotIndex : Int = file_name.indexOf(\"\
    .\")\n        val firstLetterIndex : Int = file_name.indexOf(\"a\", 0)\n     \
    \   val substring : String = file_name.substring(0,dotIndex)\n        if (length\
    \ == 0){\n            fileCheck = false\n        }\n        if (dotIndex < 0){\n\
    \            fileCheck1 = false\n        }\n        if (firstLetterIndex < 0){\n\
    \            fileCheck1 = false\n        }\n        if (substring.isEmpty){\n\
    \            fileCheck1 = false\n        }\n        if (substring.charAt(0) <\
    \ 'a' || substring.charAt(0) > 'z'){\n            fileCheck1 = false\n       \
    \ }\n        val substring_1 : String = file_name.substring(dotIndex + 1)\n  \
    \      if (substring_1.isEmpty){\n            fileCheck1 = false\n        }\n\
    \        val fileCheck2 = substring_1.contains(\".txt\") || substring_1.contains(\"\
    .exe\") || substring_1.contains(\".dll\")\n        if (fileCheck == true && fileCheck1\
    \ == true && fileCheck2 == true){\n            return(\"Yes\")\n        }\n  \
    \      return(\"No\")", "        var file_name = file_name\n        if (file_name.length()\
    \ > 3) {\n            file_name.substring(0, 3)\n        }\n        else {\n \
    \           file_name\n        }\n        val pos = file_name.lastIndexOf('.')\n\
    \        val sub_string = file_name.substring(0, pos)\n        val file_name =\
    \ file_name.substring(pos + 1)\n        if (sub_string.length() > 1 & sub_string.substring(0,\
    \ 1) == '_') {\n            \"No\"\n        }\n        else {\n            val\
    \ file_letter = file_name.charAt(0)\n            if (file_letter in ('A'..'Z')\
    \ || file_letter in ('a'..'z')) {\n                \"Yes\"\n            }\n  \
    \          else {\n                \"No\"\n            }\n        }", "      //\
    \ Validate file name, and return 'Yes' if the file's name is valid, and return\
    \ 'No' otherwise.\n      val valid_chars = Set(\n        \"0123456789\".toList,\
    \ \n        \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toList,\n\
    \        \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toList,\n  \
    \      \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toList\n     \
    \ )\n\n      val pattern = \"^\\\\w{3}\\\\.\\\\w+$\".r\n      val result = pattern.findFirstIn(file_name)\
    \ != None\n      if (result == false || valid_chars -- file_name.split(\"\\\\\
    .\").head == Set.empty)\n        \"No\"\n      else\n        \"Yes\"", "     \
    \   val regex = \"\"\"[a-zA-Z]\"\"\".r\n        val splitted = file_name.split(regex)\n\
    \        val len = splitted.size\n        val dot = splitted(0)\n        val firstLetter\
    \ = dot.substring(0, 1)\n        val fileExtension = dot.substring(1, 3)\n   \
    \     val containsDot = splitted.contains(\".\")\n        val isValid = len >\
    \ 1 &&\n                      len <= 3 &&\n                      firstLetter !=\
    \ \"\" &&\n                      firstLetter != \"a\" &&\n                   \
    \   firstLetter != \"A\" &&\n                      fileExtension == \"txt\" ||\n\
    \                      fileExtension == \"exe\" ||\n                      fileExtension\
    \ == \"dll\"\n        isValid.toString ", "        var result : String = null\n\
    \        var isValid : Boolean = false\n\n        if (file_name.contains(\".\"\
    )) {\n            if (file_name.contains(\"0\") || file_name.contains(\"9\"))\
    \ {\n                return \"No\"\n            }\n            val file_name :\
    \ String = file_name.substring(0, file_name.indexOf(\".\"))\n            val substring\
    \ : String = file_name.substringBefore(\".\")\n            if (substring.length\
    \ > 0 && substring.matches(\"[a-zA-Z]+\")) {\n                val substring_upper\
    \ : String = substring.substring(0, 1).toString.toUpperCase\n                val\
    \ substring_lower : String = substring.substring(0, 1).toLowerCase\n         \
    \       if (substring_upper != \"A\" || substring_lower != \"A\") {\n        \
    \            return \"No\"\n                }\n                val extension :\
    \ String = file_name.substringAfterLast(\".\")\n                if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            \
    \        isValid = true\n                }\n            }\n        }\n       \
    \ if (isValid) {\n            result = \"Yes\"\n        }\n        return result",
  "        val strArr = new Array[String](4)\n        val strArr_temp = new Array[String](4)\n\
    \        val numArr = new Array[Int](2)\n        val numArr_temp = new Array[Int](2)\n\
    \        for (i <- 0 until strArr.length) {\n            if (i <= strArr.length\
    \ - 1) {\n                strArr(i) = file_name(i)\n            }\n        }\n\
    \        for (i <- 0 until numArr.length) {\n            if (i <= numArr.length\
    \ - 1) {\n                numArr(i) = file_name.indexOf('.', i)\n            }\n\
    \        }\n        if (numArr_temp.length == 2) {\n            if (numArr_temp(0)\
    \ == 0 && numArr_temp(1) == 4) {\n                return \"Yes\"\n           \
    \ }\n        }\n        val numArr_temp2 = new Array[Int](2)\n        val numArr_temp2_temp\
    \ = new Array[Int](2)\n        for (i <- 0 until strArr_temp.length) {\n     \
    \       if (i <= strArr_temp.length - 1) {\n                strArr_temp(i) = file_name.substring(i,\
    \ i + 1)\n            }\n        }\n        for (i <- 0 until numArr_temp2.length)\
    \ {\n            if (i <= numArr_temp2.length - 1) {\n                numArr_temp2(i)\
    \ = file_name.indexOf('.', i + 1)\n            }\n        }\n        if (numArr_temp2_temp.length\
    \ == 2) {\n            if (numArr_temp2_temp(0) == 0 && numArr_temp2_temp(1) ==\
    \ 4) {\n                return \"Yes\"\n            }\n        }\n        if (strArr.length\
    \ > 3) {\n            return \"No\"\n        }\n        if (numArr.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (strArr_temp.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (numArr_temp2.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (strArr_temp.length > 0\
    \ && numArr_temp2.length > 0 && strArr_temp(0) == numArr_temp2(0)) {\n       \
    \     return \"Yes\"\n        }\n        return \"No\"", "        // Your code\
    \ goes here\n        val count = 1\n        var count = 0\n        var letters\
    \ = 0\n        val chars = file_name map { c => c toLowerCase }\n        val char1\
    \ = chars.head\n        val char2 = chars.last\n        val char3 = chars.dropRight(1)\n\
    \        val char4 = char3(0)\n        val char5 = chars.last\n        val char6\
    \ = chars.dropRight(1)\n        val char7 = char6(0)\n        val char8 = chars.last\n\
    \        val char9 = chars.dropRight(1)\n        val char10 = char9(0)\n     \
    \   val char11 = chars.last\n        val char12 = chars.dropRight(1)\n       \
    \ val char13 = char13(0)\n        val char14 = chars.last\n        val char15\
    \ = chars.dropRight(1)\n        val char16 = char16(0)\n        val char17 = chars.last\n\
    \        val char18 = chars.dropRight(1)\n        val char19 = char19(0)\n   \
    \     val char20 = chars.last\n        val char21 = chars.dropRight(1)\n     \
    \   val char22 = chars.last\n        val char23 = chars.dropRight(1)\n       \
    \ val char24 = char24(0)\n        val char25 = chars.last\n        val char26\
    \ = chars.dropRight(1)\n        val char27 = chars.last\n        val char28 =\
    \ chars.dropRight(1)\n        val char29 = chars.last\n        val char30 = chars.last\n\
    \        val char31 = chars.last\n        val char32 = chars.last\n        val\
    \ char33 = chars.last\n        val char34 = chars.last\n        val char35 = chars.last\n\
    \        val char36 = chars.last\n        val char37 = chars.last\n        val\
    \ char38 = chars.last\n        val char39 = chars.last\n        val char40 = chars.last\n\
    \        val char41 = chars.last\n        val char42 = chars.last\n        val\
    \ char43 = chars.last\n        val char44 = chars.last\n        val char45 = chars.last\n\
    \        val char46 = chars.last\n        val char47 = chars.last\n        val\
    \ char48 = chars.last\n        val char49 = chars.last\n        val char50 = chars.last\n\
    \        val char51 = chars.last\n        val char52 = chars.last\n        val ",
  "        var isValid : String = \"No\"\n        var dotCount : Int = 0\n       \
    \ var fileName : String = \"\"\n        for ((c, i) => fileName.length < 3 ||\
    \ c != '.' || c.toInt < 0 || c > 9 || i == 0) \n        {\n            fileName\
    \ += c\n        }\n        for ((c, i) => i < fileName.indexOf(\".\"))\n     \
    \   {\n            if (c == '.')\n            {\n                dotCount += 1\n\
    \            }\n            else\n            {\n                dotCount = 0\n\
    \            }\n        }\n        if (dotCount == 0)\n        {\n           \
    \ if (fileName.indexOf(\".\") != -1)\n            {\n                isValid +=\
    \ \"Yes\"\n            }\n            else\n            {\n                isValid\
    \ += \"No\"\n            }\n        }\n        else\n        {\n            isValid\
    \ = \"No\"\n        }\n        isValid", "        // Your code goes here\n   \
    \     var fileNameList: Array[String] = new Array[String](0)\n        fileNameList\
    \ = file_name split ('.') //split name into array\n        if (fileNameList.length\
    \ > 3) {\n            return \"No\"\n        }\n        if (fileNameList.length\
    \ < 2) {\n            return \"No\"\n        }\n        if (!(fileNameList(0).startsWith(\"\
    a\") || fileNameList(0).startsWith(\"A\"))) {\n            return \"No\"\n   \
    \     }\n        if (fileNameList(1).length == 0 || fileNameList(1).startsWith(\"\
    0\") || fileNameList(1).startsWith(\"1\")) {\n            return \"No\"\n    \
    \    }\n        if ((fileNameList(2).length == 1 && (fileNameList(2) == \"exe\"\
    \ || fileNameList(2) == \"dll\"))) {\n            return \"Yes\"\n        }\n\
    \        if ((fileNameList(2).length == 2 && (fileNameList(2) == \"txt\" || fileNameList(2)\
    \ == \"dll\"))) {\n            return \"Yes\"\n        }\n        return \"No\"",
  "        var isNameValid = false\n        var fileNameValidity = ()\n        if(fileName.contains(\"\
    .\")) {\n            var fileNameArray = file_name.split(\"\\\\.\");\n       \
    \     if(fileNameArray.length < 2) {\n                fileNameValidity = \"No\"\
    \n            } else {\n                var firstChar = fileNameArray(0) match\
    \ {\n                    case \"a\" | \"A\" => true\n                    case\
    \ c => false\n                }\n                if(firstChar == false) {\n  \
    \                  fileNameValidity = \"No\"\n                } else {\n     \
    \               var secondChar = fileNameArray(1) match {\n                  \
    \      case \"a\" | \"A\" => true\n                        case c => false\n \
    \                   }\n                    if(secondChar == false) {\n       \
    \                 fileNameValidity = \"No\"\n                    } else {\n  \
    \                      var thirdChar = fileNameArray(2) match {\n            \
    \                case \"a\" | \"A\" => true\n                            case\
    \ c => false\n                        }\n                        if(thirdChar\
    \ == false) {\n                            fileNameValidity = \"No\"\n       \
    \                 } else {\n                            fileNameValidity = \"\
    Yes\"\n                        }\n                    }\n                }\n \
    \           }\n        } else {\n            isNameValid = true\n        }\n \
    \       if(isNameValid == true) {\n            return fileNameValidity\n     \
    \   } else {\n            return \"No\"\n        }", "        var count = 0\n\
    \        if(file_name.length >= 3 || file_name.indexOf('.') != -1 && file_name.substring(0,\
    \ 1) == file_name.substring(0, 1).toUpper && file_name.substring(1, file_name.length).split(\"\
    \\.\").length > 1){\n            for(i <- 0 until file_name.indexOf('.')){\n \
    \               if(file_name.charAt(i) == file_name.charAt(i))\n             \
    \       count += 1\n            }\n        }\n        if(count == 2 || count ==\
    \ 4)\n            return \"Yes\"\n        else\n            return \"No\"", " \
    \       var correct = false \n        var n = file_name.indexOf(\".\") \n    \
    \    if (n < 1 || n > 3 || file_name.substring(0, 1) == \"0\" || file_name.substring(0,\
    \ 1) != \"a\" || file_name.substring(n - 1, n) != \"txt\"){\n            correct\
    \ = false\n        }else{\n            correct = true \n        }\n        return\
    \ if(correct){\"Yes\"}else{(\"No\")}", "        if (!file_name.matches(\"[0-9]{3}\"\
    )) {\n            return \"No\"\n        }\n        var dot : String = \"\"\n\
    \        var file_name : String = \"\"\n        val dot_start : Int = file_name.indexOf(\"\
    .\") + 1\n        val dot_end : Int = file_name.indexOf(\".\", dot_start)\n  \
    \      val file_start : Int = file_name.indexOf(\".\")\n        val file_end :\
    \ Int = file_name.length\n        if(dot_start == -1 || dot_end == -1 || dot_end\
    \ < dot_start || file_start < 1 || file_end < 1) {\n            return \"No\"\n\
    \        } else {\n            dot = file_name.substring(dot_start, dot_end)\n\
    \            val file_name = file_name.substring(file_start, file_end)\n     \
    \       val valid = \n                (file_name.contains(\".\") && \n       \
    \          ((file_name.contains(\".\") &&\n                  file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && \n                  file_name.substring(1,3).matches(\"[0-9]\"\
    ))) || \n                 (file_name.contains(\".\") && \n                  file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && \n                  file_name.substring(1,3).matches(\"[0-9]\"\
    ) &&\n                  file_name.substring(3,5).matches(\"txt|exe|dll\"))) \n\
    \            if(valid) {\n                return \"Yes\"\n            } else {\n\
    \                return \"No\"\n            }\n        }", "        val s = file_name\
    \ splitAt 1\n        val dot = file_name splitAt 2 indexOfFirst '.'\n        if\
    \ (dot == -1) return \"No\"\n        val file_name = file_name splitAt dot + 1\n\
    \        if (file_name.nonEmpty) {\n            val firstChar = file_name head\n\
    \            val lastChar = file_name last\n            if (firstChar < 'a' ||\
    \ firstChar > 'z' || lastChar < 'a' || lastChar > 'z') return \"No\"\n       \
    \     if (firstChar == lastChar) return \"No\"\n            if (firstChar == '.')\
    \ return \"Yes\"\n            val first_letter = if (firstChar <= 'Z') firstChar\
    \ else 'a'\n            val last_letter = if (lastChar <= 'Z') lastChar else 'a'\n\
    \            if (first_letter <= last_letter) return \"No\"\n        }\n     \
    \   \"Yes\"", "        val chars = file_name drop 3 drop 1 take 1\n        if\
    \ (file_name contains \".\") {\n            if (file_name start with (\"0\") ||\
    \ file_name start with (\"1\") || file_name start with (\"2\")) {\n          \
    \      if (file_name drop 1 drop 1 take 1 not in (List(\"txt\", \"exe\", \"dll\"\
    ))) {\n                    return \"No\"\n                }\n            }\n \
    \       }\n        if (chars startWith (\"a\") || chars startWith (\"b\") || chars\
    \ startWith (\"c\") || chars startWith (\"d\")\n            || chars startWith\
    \ (\"e\") || chars startWith (\"f\") || chars startWith (\"g\") || chars startWith\
    \ (\"h\")\n            || chars startWith (\"i\") || chars startWith (\"j\") ||\
    \ chars startWith (\"k\") || chars startWith (\"l\")\n            || chars startWith\
    \ (\"m\") || chars startWith (\"n\") || chars startWith (\"o\") || chars startWith\
    \ (\"p\")\n            || chars startWith (\"q\") || chars startWith (\"r\") ||\
    \ chars startWith (\"s\") || chars startWith (\"t\")\n            || chars startWith\
    \ (\"u\") || chars startWith (\"v\") || chars startWith (\"w\") || chars startWith\
    \ (\"x\")\n            || chars startWith (\"y\") || chars startWith (\"z\"))\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"", "        var\
    \ correct = false \n        var index = file_name.length\n        while(index\
    \ > 0 && !correct){\n            val value = file_name(index)\n            if(value.matches(\"\
    [0-9]+\")){\n                correct = true\n            }\n            else if(!value.contains(\"\
    .\") || value.substring(0, 1) == \".\" || value.substring(0,1) != \"a\" || value.substring(0,1)\
    \ != \"z\"){\n                correct = false\n            }\n            else{\n\
    \                val sub = value.substring(1)\n                if(sub.split(\"\
    .\").length >  1 && (sub.split(\".\").head.toInt == 0 || sub.split(\".\").head.toInt\
    \ > 9)){\n                    correct = false\n                }\n           \
    \ }\n            index--\n        }\n        if(!correct){\n            return\
    \ \"No\"\n        }\n        else{\n            return \"Yes\"\n        }", " \
    \       if(file_name != null && !file_name isEmpty) {\n            val split_name\
    \ = file_name.split(\"\\\\.\") match {\n                case Array(name, extension)\
    \ =>\n                    if(name.length > 3 || name.length < 3 || name.head ==\
    \ null || name.head != \"a\" || name.head != \"b\" || name.head != \"c\" || name.head\
    \ != \"d\" || name.head != \"e\" || name.head != \"f\" || name.head != \"g\" ||\
    \ name.head != \"h\" || name.head != \"i\" || name.head != \"j\" || name.head\
    \ != \"k\" || name.head != \"l\" || name.head != \"m\" || name.head != \"n\" ||\
    \ name.head != \"o\" || name.head != \"p\" || name.head != \"q\" || name.head\
    \ != \"r\" || name.head != \"s\" || name.head != \"t\" || name.head != \"u\" ||\
    \ name.head != \"v\" || name.head != \"w\" || name.head != \"x\" || name.head\
    \ != \"y\" || name.head != \"z\") {\n                        return (\"No\")\n\
    \                    }\n                    if(extension.forall(_.toString.toInt\
    \ == 0)) {\n                        return (\"No\")\n                    }\n \
    \                   if(extension.length != 1 || extension.toString.toInt == 0\
    \ || extension.toString.toInt == 1) {\n                        return (\"No\"\
    )\n                    }\n                    val before = name.subseq(0,1)\n\
    \                    val after = name.substring(extension.length)\n          \
    \          if(before.forall(_.toString.toInt >= 97 && _.toString.toInt <= 122)\
    \ || after.forall(_.toString.toInt >= 65 && _.toString.toInt <= 90) || after.forall(_.toString.toInt\
    \ == 95)) {\n                        return (\"No\")\n                    }\n\
    \                    val before2 = before.substring(0,1)\n                   \
    \ val after2 = after.substring(extension.length)\n                    if(before2.forall(_.toString.toInt\
    \ >= 97 && _.toString.toInt <= 122) || after2.forall(_.toString.toInt >= 65 &&\
    \ _.toString.toInt <= 90) || after2.forall(_.toString.toInt == 95)) {\n      \
    \                  return (\"No\")\n                    }\n                  \
    \  if(before2 != \"a\" && before2 != \"b\" && before2 != \"c\" && before2 != \"\
    d\" && before2 != \"e\" && before2 != \"f\" && before2 != \"g\" && before2 !=\
    \ \"h\" && before2 != \"i\" && before2 != \"j\" && before2 != \"k\" && before2\
    \ != \"l\" && before2 != \"m\" && before2 != \"n\" && before2 != \"o\" && before2\
    \ != \"p\" && before2 != \"q\" && before2 != \"r\" && before2 != \"s\" && before2\
    \ != \"t\" && before2 != \"u\" && before2 != \"v\" && before2 ", "        if (file_name.startsWith(\"\
    .\") && file_name.length >= 4 && file_name.split(\"\\\\.\").length == 1 &&\n \
    \               file_name.split(\"\\\\.head\").forall(_.nonEmpty) && file_name.split(\"\
    \\\\.last\").forall(_.forall(_.isLetter)) &&\n                file_name.split(\"\
    \\\\.last\").forall(file_name.split(\"\\\\.last\").forall(_.nonEmpty))) {\n  \
    \          return (\"Yes\")\n        } else {\n            return (\"No\")\n \
    \       }", "        val pattern = Pattern.compile(\"(0[0-9]{1})([0-9]{3})(\\\\\
    .)(?!\\\\..*\\\\d)(ex|exe|dll)\");\n        val file_ext = file_name split '.';\n\
    \        if (file_ext.length == 1) \"Yes\" else file_ext exists { ext => \n  \
    \          val matcher = pattern.matcher(ext)\n            if (matcher.matches)\
    \ \"Yes\" else file_name contains (\".\") ? \"No\" : \"No\"\n        }", "   \
    \     if (file_name.length < 3) \"No\"\n        else if (file_name.substring(0,1).isEmpty)\
    \ \"No\"\n        else if (file_name.substring(0,1).toInt == 0)\n        || (file_name.substring(0,1).toInt\
    \ == 10 && file_name.substring(1,2) < 'z' || \n        file_name.substring(0,1).toInt\
    \ == 11 && file_name.substring(1,2) < 'z') \"No\"\n        else if (file_name.substring(0,2).toInt\
    \ > 10 || file_name.substring(0,2).toInt < 1)\n            \"No\"\n        else\
    \ if (file_name.substring(0,3).toInt > 3 || file_name.substring(0,3).toInt < 4)\n\
    \            \"No\"\n        else if (file_name.substring(0,4).toInt > 4 || file_name.substring(0,4).toInt\
    \ < 5)\n            \"No\"\n        else if (file_name.substring(0,4).toInt >\
    \ 6 || file_name.substring(0,4).toInt < 7)\n            \"No\"\n        else if\
    \ (file_name.substring(0,4).toInt > 8 || file_name.substring(0,4).toInt < 9)\n\
    \            \"No\"\n        else if (file_name.substring(0,4).toInt > 10 || file_name.substring(0,4).toInt\
    \ < 11)\n            \"No\"\n        else if (file_name.substring(0,4).toInt >\
    \ 12 || file_name.substring(0,4).toInt < 13)\n            \"No\"\n        else\
    \ if (file_name.substring(0,4).toInt > 14 || file_name.substring(0,4).toInt <\
    \ 15)\n            \"No\"\n        else if (file_name.substring(0,5).toInt > 5\
    \ || file_name.substring(0,5).toInt < 6)\n            \"No\"\n        else if\
    \ (file_name.substring(0,5).toInt > 7 || file_name.substring(0,5).toInt < 8)\n\
    \            \"No\"\n        else if (file_name.substring(0,5).toInt > 9 || file_name.substring(0,5).toInt\
    \ < 10)\n            \"No\"\n        else if (file_name.substring(0,5).toInt >\
    \ 11 || file_name.substring(0,5).toInt < 12)\n            \"No\"\n        else\
    \ if (file_name.substring(0,6).toInt > 6 || file_name.substring(0,6).toInt < 7)\n\
    \            \"No\"\n        else if (file_name.substring(0,6).toInt > 8 || file_name.substring(0,6).toInt\
    \ < 9)\n            \"No\"\n        else if (file_name.substring(0,6).toInt >\
    \ 10 || file_name.substring(0,6).toInt < 11)\n            \"No\"\n        else\
    \ if (file_name.substring(0,6).toInt > 12 || file_name.substring(0,6).toInt <\
    \ 13)\n            \"No\"\n        else if (file_name.substring(0,6).toInt > 14\
    \ || file_name.substring(0,6).toInt < 15)\n            \"No\"\n        else if\
    \ (file_name.substring(0,7).toInt > ", "        var result : String = \"No\";\n\
    \        \n        var file_name : String = file_name;\n        var first_digit\
    \ = 0\n        var second_digit = 0\n        var third_digit = 0\n        var\
    \ third_digit_start : Int = 0\n        var fourth_digit_end : Int = 0\n      \
    \  var fourth_digit : Int = 0\n\n        if (file_name.length < 3) \n        \
    \    { result = \"No\"; }\n\n        else if (file_name.contains(\".\")) \n  \
    \          { result = \"No\"; }\n\n        else if (file_name.indexOf(\".\") >\
    \ 0) \n            {\n                first_digit = file_name.indexOf(\".\");\n\
    \                second_digit = file_name.length -(first_digit - 1);\n       \
    \         third_digit = file_name.lastIndexOf(\".\");\n                third_digit_start\
    \ = file_name.indexOf(\".\") - 1;\n                fourth_digit = file_name.indexOf(\"\
    .\") - 1;\n                fourth_digit_end = file_name.indexOf(\".\") + 1;\n\
    \            }\n        else \n            {\n                first_digit = file_name.indexOf(\"\
    .\");\n                second_digit = file_name.length -(first_digit - 1);\n \
    \               third_digit = 0;\n                third_digit_start = 0;\n   \
    \             fourth_digit_end = 0;\n                fourth_digit = 0;\n     \
    \       }\n\n        // Now we are only interested in checking the first two digits,\
    \ and checking\n        // the last two digits\n        if (first_digit >= 0 &&\
    \ first_digit <= 9)\n            {\n                if (second_digit < 9 && second_digit\
    \ >= 0) \n                    {\n                        if (third_digit > 0 &&\
    \ third_digit <= 9 && third_digit_start > 0 && third_digit_start <= 9 && third_digit\
    \ <= fourth_digit && third_digit <= fourth_digit_end && second_digit >= 0)\n \
    \                           {\n                                if (second_digit\
    \ == 0 && third_digit == 0 && first_digit == 0 && fourth_digit == 0)\n       \
    \                             {\n                                        result\
    \ = \"Yes\"\n                                    }\n                         \
    \   }\n                    }\n            }\n        \n        file_name", " \
    \       if (file_name.length > 3) {\n            return \"No\"\n        } else\
    \ {\n            var dotPos = file_name.lastIndexOf(\".\")\n            if (dotPos\
    \ < 1) {\n                return \"No\"\n            }\n            var firstChar\
    \ = file_name.charAt(0)\n            if (firstChar < 'a' || firstChar > 'z') {\n\
    \                return \"No\"\n            }\n            var firstTwoChars =\
    \ file_name.substring(0, 2)\n            if (firstTwoChars.isEmpty || firstTwoChars.contains(\"\
    .\")) {\n                return \"No\"\n            }\n            \n        \
    \    var endPos = file_name .lastIndexOf(\".\")\n            var lastChar = file_name.charAt(endPos)\n\
    \            var allowedExtensions = Set(List(\"txt\", \"exe\", \"dll\"))\n  \
    \          if (!allowedExtensions.contains(lastChar)) {\n                return\
    \ \"No\"\n            }\n            \n            return \"Yes\"\n        }",
  "        var is_valid = false // true if the file's name is valid\n        var dot_pos\
    \ = -1 // the position of the dot '.'\n        var name_first_char :String = \"\
    \" // the first letter of file_name\n        var name_substring :String = \"\"\
    \ // the substring before dot\n        var name_substring_valid_chars :[String]\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        // 1.\
    \ check the number of digits in file_name\n        if (file_name.length() > 3)\
    \ {\n            is_valid = false\n        }\n        // 2. check the file's name\
    \ contains exactly one dot\n        else if (((file_name.indexOf(\".\") > 0) ||\
    \ (file_name.indexOf(\".\") == file_name.length - 1)) &&\n            (file_name.indexOf(\"\
    .\") > 0) &&\n            file_name.lastIndexOf(\".\") == file_name.length - 1)\
    \ {\n            is_valid = true\n        }\n        // 3. check the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet\n        else if (file_name.indexOf(\".\") > 0) {\n            dot_pos\
    \ = file_name.indexOf(\".\") - 1\n            name_first_char = file_name.substring(0,\
    \ dot_pos)\n            if (!((name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit",
  "        val invalid = Array('9','.','0',\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\").filter(x => !file_name.contains(x))\n\
    \        if(invalid.length > 3)\n        {\n            file_name match {\n  \
    \          case file_name if file_name.contains(\".\") && file_name.substring(0,1).matches(\"\
    ^[a-zA-Z]\") && file_name.substring(0,3).matches(\"[0-9]+\") =>\n            \
    \    return(\"Yes\")\n            case _ =>\n                return(\"No\")\n\
    \            }\n        }\n        else\n        {\n            return(\"No\"\
    )\n        }", "        var res = file_name match {\n            case _ if !file_name.contains('.')\
    \ => \n                throw new Exception(\"The file's name should be like 'example.exe'\"\
    )\n            case _ if (file_name.indexOf('.') <= 0) => \n                throw\
    \ new Exception(\"The file's name should start with a letter from the latin alphabet\"\
    )\n            case _ if (!file_name.substring(0, 1).matches(\"[a-zA-Z]\") ||\
    \ \n                !file_name.substring(file_name.lastIndexOf('.') + 1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\")) =>\n                throw new Exception(\"The file's\
    \ name should end in 'exe' or 'dll'\")\n            case _ if (file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\") && \n                !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\")) => \n                throw new Exception(\"The file's\
    \ name should only contain one dot, and end with 'exe' or 'dll'\")\n         \
    \   case _ if (!file_name.substring(0, 1).matches(\"[a-zA-Z]\") && !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\")) =>\n                throw new Exception(\"The file's\
    \ name should only contain one dot, and start with a letter from the latin alphabet\"\
    )\n            case _ if (file_name.substring(0, 1).matches(\"[a-zA-Z]\") && \n\
    \                !file_name.substring(1).matches(\"[a-zA-Z]{3}|.exe|.dll\")) =>\n\
    \                throw new Exception(\"The file's name should only contain one\
    \ dot, and start with a letter from the latin alphabet\")\n            case _\
    \ if (!file_name.substring(0, 1).matches(\"[a-zA-Z]\") && !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\") && \n                !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll|.txt|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe",
  "        var counter = 1;\n        var file_name : String = \"1\" + file_name;\n\
    \        while (file_name != \"1\" + file_name){\n            if (file_name !=\
    \ \"1\" + file_name){\n                file_name += \"0\";\n            }\n  \
    \          file_name += \"1\";\n            counter += 1\n        }\n        val\
    \ pattern = \"[a-zA-z][a-zA-z]*.(txt|exe|dll)\"\n        if (file_name.contains(pattern)\
    \ == true && counter == 1 && file_name.length > 3 && file_name.substring(0, 1).isLetter\
    \ == true && file_name.substring(1).contains(\".\") == true && file_name.substring(file_name.length-1,\
    \ file_name.length).contains(\".\") == true && file_name.substring(file_name.length-2,\
    \ file_name.length).contains(\".\") == true){\n            return \"Yes\"\n  \
    \      }\n        else{\n            return \"No\"\n        }", "        // Write\
    \ your code here\n        val splitName = file_name.split(\"\\\\.\").map(_.toInt)\n\
    \        val hasDot = splitName.length == 1\n        val hasDigit = splitName.tail.exists(_.toString.matches(\"\
    [0-9]\"))\n        val hasLetter = splitName.tail.exists(_.toString.matches(\"\
    [a-zA-Z]\"))\n        if (!hasDot && !hasDigit && !hasLetter) \"No\" else \"Yes\"",
  "        if(file_name.contains(\".\")){\n            if(file_name.substring(0,1).isEmpty){\n\
    \                return \"No\"\n            }else if(file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"A\"){\n                return \"No\"\
    \n            }else if(file_name.substring(0,1) != \"z\" && file_name.substring(0,1)\
    \ != \"Z\"){\n                return \"No\"\n            }else if(file_name.substring(0,file_name.indexOf(\"\
    .\")).length != 4){\n                return \"No\"\n            }\n          \
    \  var names : List[String] = file_name.substring(0,file_name.indexOf(\".\")).split(\"\
    \\\\.\").toList\n            if(names.length == 0 || names.indexOf(\"exe\") !=\
    \ -1 || names.indexOf(\"dll\") != -1){\n                return \"No\"\n      \
    \      }\n            return names.length == 1? \"Yes\" : \"No\"\n        }\n\
    \        return \"Yes\"", "        if (!file_name.matches(\"[0-9]{3}\")) {\n \
    \           return \"No\"\n        }\n        if (!file_name.contains(\".\")){\n\
    \            return \"No\"\n        }\n        if (file_name.substring(0, 1) ==\
    \ \"\") {\n            return \"No\"\n        }\n        if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).toString.toLowerCase != \"exe\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toString.toLowerCase != \"dll\") {\n            return \"No\"\n    \
    \    }\n        \"Yes\"", "      val split_string = file_name.split(\"\\\\.\"\
    )\n      if (split_string.size != 2) return \"No\"\n      if (split_string.last\
    \ != \"txt\" && split_string.last != \"exe\" && split_string.last != \"dll\")\
    \ return \"No\"\n      if (split_string.head == \"\") return \"No\"\n      if\
    \ (split_string.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      val split_string2 = split_string.head.split(\"[\\\\W]\"\
    )\n      if (split_string2.length != 1 || split_string2.head == \"\") return \"\
    No\"\n      if (split_string2.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      val split_string3 = split_string2.head.split(\"[\\\\W]\"\
    )\n      if (split_string3.length != 1 || split_string3.head == \"\") return \"\
    No\"\n      if (split_string3.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      \"Yes\"", "        val pattern = \"\"\"[0-9]+\"\"\".r\n\
    \        if (!pattern.pattern.matcher(file_name).matches()) return \"No\"\n  \
    \      var dot = file_name.indexOf('.', 0).toInt\n        if (dot < 0) dot = 0\n\
    \        var subString = file_name.substring(dot)\n        if (subString.isEmpty)\
    \ subString = \"\"\n        val alphabet = \"\"\"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]\"\
    \"\".r\n        if (!alphabet.pattern.matcher(subString).matches()) return \"\
    No\"\n        if (subString.toString.length <= 3 && !\"0123456789\".r.matcher(subString).matches())\
    \ return \"No\"\n        if (subString.indexOf('.') != 0) return \"No\"\n    \
    \    if (subString.toString.length != 3 && subString.toString.length != 4 && subString.toString.length\
    \ != 5 && subString.toString.length != 6 && subString.toString.length != 7 &&\
    \ subString.toString.length != 8 && subString.toString.length != 9) return \"\
    No\"\n        if (subString.toString.substring(0, 1) != \"a\" && subString.toString.substring(0,\
    \ 1) != \"b\" && subString.toString.substring(0, 1) != \"c\" && subString.toString.substring(0,\
    \ 1) != \"d\" && subString.toString.substring(0, 1) != \"e\" && subString.toString.substring(0,\
    \ 1) != \"f\" && subString.toString.substring(0, 1) != \"g\" && subString.toString.substring(0,\
    \ 1) != \"h\" && subString.toString.substring(0, 1) != \"i\" && subString.toString.substring(0,\
    \ 1) != \"j\" && subString.toString.substring(0, 1) != \"k\" && subString.toString.substring(0,\
    \ 1) != \"l\" && subString.toString.substring(0, 1) != \"m\" && subString.toString.substring(0,\
    \ 1) != \"n\" && subString.toString.substring(0, 1) != \"o\" && subString.toString.substring(0,\
    \ 1) != \"p\" && subString.toString.substring(0, 1) != \"q\" && subString.toString.substring(0,\
    \ 1) != \"r\" && subString.toString.substring(0, 1) != \"s\" && subString.toString.substring(0,\
    \ 1) != \"t\" && subString.toString.substring(0, 1) != \"u\" && subString.toString.substring(0,\
    \ 1) != \"v\" && subString.toString.substring(0, 1) != \"w\" && subString.toString.substring(0,\
    \ 1) != \"x\" && subString.toString.substring(0, 1) != \"y\" && subString.toString.substring(0,\
    \ 1) != \"z\") return \"No\"\n        if (subString.substring(subString.length\
    \ - 1) != \"txt\" && subString.substring(subString.length - 1) != \"exe\" && subString.substring(subString.length\
    \ - 1) != \"dll\") return \"No\"\n        return \"Yes\"", "        if(fileName.split(\"\
    \\\\.\").length != 3) {\n            return \"No\"\n        }\n        var valid\
    \ = true\n        for(i <- 1 until fileName.split(\"\\\\.\").length) {\n     \
    \       if(fileName.split(\"\\\\.\")(i).length == 0 || fileName.split(\"\\\\.\"\
    )(i).charAt(0) < 'a' || fileName.split(\"\\\\.\")(i).charAt(0) > 'z') {\n    \
    \            valid = false\n                break\n            }\n           \
    \ \n            if(fileName.split(\"\\\\.\")(i).length == 1 && fileName.split(\"\
    \\\\.\")(i).charAt(0) == '.') {\n                valid = false\n             \
    \   break\n            }\n        }\n        if(!valid) {\n            return\
    \ \"No\"\n        }\n        val validExtensions = mutable.List(\"txt\", \"exe\"\
    , \"dll\")\n        var ext = fileName.split(\"\\\\.\").last\n        ext = ext.substring(0,ext.length-1)\n\
    \        if(!validExtensions.contains(ext)) {\n            return \"No\"\n   \
    \     }\n        return \"Yes\"", "        var valid_name : String = \"No\"\n\
    \        val file_list = file_name split '\\\\'\n        if (file_list.length\
    \ <= 3) {\n            val file_name = file_list(0)\n            var valid_name\
    \ = \"No\"\n            val file_list = file_name split '.'\n            if (file_list.length\
    \ > 1) {\n                var file_name : String = \"\"\n                val file_name\
    \ = file_list(0)\n                var valid_name = \"No\"\n                var\
    \ i = 0\n                var letter_index = scala.util.control.Breaks._\n    \
    \            for (i <- 0 until file_list.length-1) {\n                    val\
    \ letter = file_list(i).toLowerCase \n                    letter_index = if (letter_index.control(letter))\
    \ \n                        letter_index.break\n                    letter_index.next\n\
    \                }\n                if (letter_index.break()) {\n            \
    \        valid_name = \"No\"\n                } else if (letter_index.break())\
    \ {\n                    valid_name = \"Yes\"\n                } else {\n    \
    \                valid_name = \"No\"\n                }\n            } else {\n\
    \                valid_name = \"No\"\n            }\n        } else {\n      \
    \      valid_name = \"No\"\n        }\n        return valid_name", "        var\
    \ file_name = file_name + \".\"\n        val split = file_name.split(\"\\\\.\"\
    ).toList\n        val fileNameLength = split.length\n        if (fileNameLength\
    \ > 3) {\n            return \"No\"\n        }\n        var num = 0\n        for\
    \ (i <- 0 until split.length) {\n            val s = split(i)\n            val\
    \ length = s.length\n            if (length == 0) continue\n            if (s.toInt\
    \ >= 0 && s.toInt <= 9) {\n                num = num * 10 + s.toInt\n        \
    \    } else {\n                return \"No\"\n            }\n        }\n     \
    \   val subString = split.head\n        if (subString.isEmpty) {\n           \
    \ return \"No\"\n        }\n        if (subString.toChar != 'a' && subString.toChar\
    \ != 'b' && subString.toChar != 'c' && subString.toChar != 'd' && subString.toChar\
    \ != 'e' && subString.toChar != 'f' && subString.toChar != 'g' && subString.toChar\
    \ != 'h' && subString.toChar != 'i' && subString.toChar != 'j' && subString.toChar\
    \ != 'k' && subString.toChar != 'l' && subString.toChar != 'm' && subString.toChar\
    \ != 'n' && subString.toChar != 'o' && subString.toChar != 'p' && subString.toChar\
    \ != 'q' && subString.toChar != 'r' && subString.toChar != 's' && subString.toChar\
    \ != 't' && subString.toChar != 'u' && subString.toChar != 'v' && subString.toChar\
    \ != 'w' && subString.toChar != 'x' && subString.toChar != 'y' && subString.toChar\
    \ != 'z') {\n            return \"No\"\n        }\n        var num2 = 0\n    \
    \    for (i2 <- 0 until split.length - 1) {\n            val s2 = split(i2)\n\
    \            val length2 = s2.length\n            if (length2 == 0) continue\n\
    \            if (s2.toChar >= 'a' && s2.toChar <= 'z') {\n                num2\
    \ = num2 * 26 + s2.toChar - 'a'\n            } else if (s2.toChar >= 'A' && s2.toChar\
    \ <= 'Z') {\n                num2 = num2 * 26 + s2.toChar - 'A'\n            }\
    \ else {\n                return \"No\"\n            }\n        }\n        if\
    \ (num + num2 != 25) {\n            return \"No\"\n        }\n        if (split.last.toInt\
    \ >= 0 && split.last.toInt <= 9) {\n            var num3 = 0\n            for\
    \ (i3 <- split.length - 2 until split.length) {\n                val s3 = split(i3)\n\
    \                val length3 = s3.length\n                if (length3 == 0) ",
  "        // Create a mutable list to store all the valid strings in it.\n      \
    \  // Add all valid filenames into it in a loop. \n        val valid_file_names\
    \ = mutable.MutableList[String]()\n        for (file <- fileName) {\n        \
    \    if (file.length() > 3) \n                valid_file_names += file\n     \
    \       else if (file.indexOf('.') != -1) \n                valid_file_names +=\
    \ file.substring(0, file.indexOf('.'))\n            else \n                valid_file_names\
    \ += file\n        }\n        // Now the list is complete, use 'contains' function\
    \ to check the validity of \n        // the file's name.\n        if (valid_file_names.contains(\"\
    exe\") || valid_file_names.contains(\"dll\") \n            || valid_file_names.contains(\"\
    txt\")) {\n            return \"Yes\"\n        }\n        else \"No\"", "    \
    \  file_name match {\n        case (name @ if (name.length < 3) || (name.contains(\"\
    .\") && name.length < (file_name indexOf(\".\"))))\n          if (\"exe\".contains(name)\
    \ || \"dll\".contains(name)) || \"txt\".contains(name) => \"Yes\"\n        case\
    \ _ => \"No\"\n      }", "        // Convert file's name to a list of digits and\
    \ letters\n        val digits = file_name.split(\"\").map(_.toInt)\n        val\
    \ letters = file_name.split(\"\").map(_.toUpperCase().toChar)\n        // Count\
    \ number of digits in file's name\n        var count = 0\n        for(i <- 0 to\
    \ digits.length-1){\n            if(digits(i) < 0 || digits(i) > 9){\n       \
    \         return \"No\"\n            }\n            count += 1\n        }\n  \
    \      // Count number of letters in file's name\n        var letterCount = 0\n\
    \        for(i <- 0 to letters.length-1){\n            if(letters(i) < 'a' ||\
    \ letters(i) > 'z' || letters(i) < 'A' || letters(i) > 'Z'){\n               \
    \ return \"No\"\n            }\n            letterCount += 1\n        }\n    \
    \    // If file's name is valid (count of digits == count of letters and count\
    \ of letters <= 3) \n        // return 'Yes'\n        if(count == letterCount\
    \ && count <= 3){\n            return \"Yes\"\n        }\n        return \"No\"",
  "        var file_name = file_name.toUpperCase()\n        var file_name : String\n\
    \        if ((file_name.contains(\".\"))) {\n            file_name.split(\".\"\
    ).length == 1\n        } else {\n            file_name.matches(\"[0-9][0-9][0-9]\\\
    \\.*\")\n        }", "        // Solution code goes here\n        if (file_name.contains(\"\
    .\")){\n            if (file_name.substring(0, 1).isEmpty){\n                return\
    \ \"No\"\n            }\n            if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"a\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"b\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"c\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"d\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"e\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    f\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"g\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"h\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"i\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"j\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"k\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"l\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"m\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"n\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    o\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"p\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"q\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"r\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"s\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"t\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"u\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"v\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"w\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    x\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"y\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"z\"){\n\
    \                return \"No\"\n            }\n        }\n        return \"Yes\"",
  "        if(file_name.length() == 3 && file_name != \"..\" && file_name.indexOf(\"\
    .\") > 0 && file_name.substring(0, 1) != \"_\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1, file_name.length()) in List(\"txt\", \"exe\", \"dll\"))\n          \
    \  \"Yes\"\n        else\n            \"No\"", "        // your code here\n  \
    \      val index = file_name.indexOf(\".\")\n        val index2 = file_name.indexOf(\"\
    .\", index+1)\n        val index3 = file_name.indexOf(\".\", index2+1)\n     \
    \   if (index == -1) \"No\"\n        if (index2 == -1) \"No\"\n        if (index3\
    \ == -1) \"No\"\n        if (file_name(index+1) != file_name(index2)) \"No\"\n\
    \        if (file_name(index2) != file_name(index3)) \"No\"\n        if (file_name(index2)\
    \ < 'a' || file_name(index2) > 'z') \"No\"\n        if (file_name(index3) < 'a'\
    \ || file_name(index3) > 'z') \"No\"\n        if (file_name(index3) == file_name(index2))\
    \ \"No\"\n        if (file_name(index2).length() == 0) \"No\"\n        if (file_name(index2).contains(\"\
    .\")) \"No\"\n        if (file_name(index2).substring(0, 1).isEmpty) \"No\"\n\
    \        if (file_name(index2).substring(0, 1).toString.toLowerCase != \"a\")\
    \ \"No\"\n        if (file_name(index3).length() == 0) \"No\"\n        if (file_name(index3).contains(\"\
    .\")) \"No\"\n        if (file_name(index3).substring(0, 1).isEmpty) \"No\"\n\
    \        if (file_name(index3).substring(0, 1).toString.toLowerCase != \"a\")\
    \ \"No\"\n        else file_name(index2) == file_name(index3) ? \"Yes\" : \"No\"",
  "        val parts = file_name.split(\"\\\\.\")\n        var result = \"\"\n   \
    \     if(parts.length == 1) {\n            result = \"\"\n        } else if(parts.length\
    \ == 2) {\n            result = parts(0)\n        } else if(parts.length == 3)\
    \ {\n            val digit_count = parts(2).length - 1\n            if(digit_count\
    \ == 3) {\n                val first_letter_count = 0\n                val letters\
    \ = parts(2).toCharArray\n                for(letter <- letters) {\n         \
    \           if(letter == 'a' || letter == 'A') {\n                        first_letter_count\
    \ += 1\n                    } else if(letter == 'b' || letter == 'B') {\n    \
    \                    first_letter_count += 1\n                    } else if(letter\
    \ == 'c' || letter == 'C') {\n                        first_letter_count += 1\n\
    \                    } else if(letter == 'd' || letter == 'D') {\n           \
    \             first_letter_count += 1\n                    } else if(letter ==\
    \ 'e' || letter == 'E') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'f' || letter == 'F') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'g' || letter == 'G') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'h' || letter == 'H') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'i' || letter == 'I') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'j' || letter == 'J') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'k' || letter == 'K') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'l' || letter == 'L') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'm' || letter == 'M') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'n' || letter == 'N') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'o' || letter == 'O') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'p' || letter == 'P') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'q' || letter == 'Q') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'r' || letter == 'R') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 's' || letter == 'S') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 't' || letter == 'T') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'u' || letter == 'U') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'v' || letter == 'V') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'w' || letter == 'W') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'x' || letter == 'X') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'y' || letter == 'Y') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == '", "        val regex = \"\"\"\\.?([^.])$\"\
    \"\".r\n        val regex2 = \"\"\"^[a-zA-Z][a-z]+$\"\"\".r\n        val regex3\
    \ = \"\"\"^(?!\\.)[a-z]+\"\"\".r\n        val regex4 = \"\"\"^[0-9]+$\"\"\".r\n\
    \        \n        val result = if(regex.findFirstIn(file_name).isEmpty) \n  \
    \                      \"No\" \n                else if (regex.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex2.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex3.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex4.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex.findFirstIn(file_name).matches(\"\
    [0-9]\"))\n                        \"No\"\n                else if (regex2.findFirstIn(file_name).matches(\"\
    [a-zA-Z]\"))\n                        \"No\"\n                else if (regex3.findFirstIn(file_name).matches(\"\
    [a-zA-Z]+\"))\n                        \"No\"\n                else if (regex4.findFirstIn(file_name).matches(\"\
    [0-9]+\"))\n                        \"No\"\n                else\n           \
    \             \"Yes\"\n        return result", "    \tval file_name = file_name.trim\n\
    \    \tval dotIndex = file_name.indexOf(\".\")\n    \tif (dotIndex == -1) file_name\n\
    \    \telse if (dotIndex == 0 && (file_name.length > 1 && file_name.charAt(1)\
    \ < 'a' || file_name.charAt(1) > 'z')) file_name\n    \telse file_name + \".exe\"",
  "      val pat = \"\"\"^[0-9]*\\.[a-zA-Z].*$\"\"\".r\n      val pat2 = \"\"\"^[a-zA-Z].*\\\
    .(txt|exe|dll)\"\"\".r\n      pat.findFirstIn(file_name).map( _.toString.toInt).getOrElse(\"\
    No\")\n      pat2.findFirstIn(file_name).map( _.toString.toInt).getOrElse(\"No\"\
    )", "        val arr = file_name.split(\"\")\n        val arr1 = arr(0)\n    \
    \    var x = 1\n        val arr2 = arr1.split(\".\")\n        while(arr2.length\
    \ > 0){\n            val arr3 = arr2(0) \n            while(arr3.length > 0){\n\
    \                if(x != 0){\n                    val y = arr3\n             \
    \       val z = arr3(1)\n                    if(z =='.' && x >= 1 && y >= 'a'\
    \ && y <= 'z' || z == '.' && y >= 'a' && y <= 'z'){\n                        return\
    \ \"Yes\"\n                    }\n                }\n                x = x + 1\n\
    \                arr3 = arr2(x + 1)\n            }\n            x = 1\n      \
    \      arr2 = arr2(x + 1)\n        }\n        return \"No\"", "        val name_parts\
    \ = file_name split \"_\"\n        if (name_parts.length == 2) {\n           \
    \ if (name_parts.head == \"\") {\n                return \"No\"\n            }\n\
    \            if (name_parts.last == \"\") {\n                return \"No\"\n \
    \           }\n            if (name_parts.last != \"exe\" && name_parts.last !=\
    \ \"dll\" && \n                    name_parts.last != \"txt\") {\n           \
    \     return \"No\"\n            }\n            if (name_parts.head.length >=\
    \ 3 && name_parts.last.length >= 3 &&\n                    name_parts.head !=\
    \ \"\" && name_parts.last != \"dll\" &&\n                    name_parts.last !=\
    \ \"exe\" && name_parts.last != \"txt\") {\n                val first_character\
    \ = name_parts.head.head\n                if (first_character != 'a' && first_character\
    \ != 'b' &&\n                        first_character != 'c' && first_character\
    \ != 'd' &&\n                        first_character != 'e' && first_character\
    \ != 'f' &&\n                        first_character != 'g' && first_character\
    \ != 'h' &&\n                        first_character != 'i' && first_character\
    \ != 'j' &&\n                        first_character != 'k' && first_character\
    \ != 'l' &&\n                        first_character != 'm' && first_character\
    \ != 'n' &&\n                        first_character != 'o' && first_character\
    \ != 'p' &&\n                        first_character != 'q' && first_character\
    \ != 'r' &&\n                        first_character != 's' && first_character\
    \ != 't' &&\n                        first_character != 'u' && first_character\
    \ != 'v' &&\n                        first_character != 'w' && first_character\
    \ != 'x' &&\n                        first_character != 'y' && first_character\
    \ != 'z') {\n                    return \"No\"\n                }\n          \
    \  }\n        }\n        return \"Yes\"", "        // Your code here\n       \
    \ val file_name : String = file_name\n        val numDigits = file_name.filterNot(_.isDigit)\n\
    \        val dotIndex = file_name.indexOf('.', 3) \n        val subStringBeforeDot\
    \ = file_name.substring(0, dotIndex)\n        val subStringAfterDot = file_name.substring(dotIndex)\n\
    \        val isContainingLetters = subStringBeforeDot.forall(_.isLetter)\n   \
    \     val isExecutable = subStringAfterDot.toString.toUpperCase == \"EXE\" ||\
    \ subStringAfterDot.toString.toUpperCase == \"DLL\"\n        val isContainingFileExtension\
    \ = subStringAfterDot match {\n            case \"TXT\" | \"DLL\" | \"EXE\" =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }\n\n        if (isContainingLetters\
    \ && !(isContainingFileExtension && isExecutable)) {\n            \"No\"\n   \
    \     } else {\n            \"Yes\"\n        }", "        val fileName = file_name\
    \ match {\n            case x : String if x.length >= 3 => x\n            case\
    \ x if x.length == 1 => x\n            case _ => \"\"\n        }\n        val\
    \ dotIndex = fileName.indexOf(\".\", 0)\n        if (dotIndex == -1) (fileName\
    \ == \"exe\" || fileName == \"dll\") else \"No\"", "        val nums = file_name\
    \ match {\n            case x if x.matches(\"[1-9]+[0-9]*\") => x.toInt\n    \
    \        case x => -1\n        }\n        if (nums == -1) return \"No\"\n    \
    \    val dots = file_name match {\n            case x if x.matches(\".*\\\\.\"\
    ) => true\n            case _ => false\n        }\n        val start = file_name\
    \ match {\n            case x if x.matches(\"^[a-zA-Z]\") => true\n          \
    \  case _ => false\n        }\n        val end = file_name match {\n         \
    \   case x if x.matches(\"[a-zA-Z0-9]$\") => true\n            case _ => false\n\
    \        }\n        if (!dots && !start && !end) return \"No\"\n        if (nums\
    \ < 0 || nums > 9) return \"No\"\n        if (dots && (nums > 1 || start || end))\
    \ return \"No\"\n        if (nums == 9 && dots && start && !end) return \"No\"\
    \n        if (nums == 10 && dots && start) return \"No\"\n        if (nums ==\
    \ 10 && dots && end) return \"No\"\n        if (nums == 10 && dots && start &&\
    \ end) return \"No\"\n        if (nums == 10 && dots && start) return \"No\"\n\
    \        if (nums == 10 && dots && end) return \"No\"\n        if (nums == 10)\
    \ return \"Yes\"", '        if (file_name.contains(".") && file_name.split(".").length==1
    && file_name.split(".").head.length>0 && file_name.split(".").head.toCharArray.forall(_.isLetter))
    "Yes" else "No"', "        val regex = \"\"\"^[\\d\\w\\.]+$\"\"\".r\n        if(file_name\
    \ != null && regex.findFirstIn(file_name).isDefined) \n            \"Yes\"\n \
    \       else\n            \"No\"", "        if (file_name matches \"\\\\d+\".r)\
    \ \n            \"Yes\"\n        else if (file_name matches \"\\\\..*\".r)\n \
    \           \"No\"\n        else if (file_name matches \"[a-zA-Z].*\".r)\n   \
    \         \"Yes\"\n        else\n            \"No\"", "        file_name match\
    \ {\n            case s if s.indexOf('.') != 0 => \"No\"\n            case s if\
    \ s.length < 3 => \"No\"\n            case s if s.substring(0, 1).toUpperCase\
    \ != 'A' =>\n                \"No\"\n            case s if s.substring(s.length\
    \ - 1) != \"exe\" &&\n                s.substring(s.length - 1) != \"dll\" =>\n\
    \                \"No\"\n            case s if s.substring(s.length - 2) != \"\
    txt\" =>\n                \"No\"\n            case s => \n                \"Yes\"\
    \n        }", "        val dotIndex = fileName.indexOf(\".\");\n        if(dotIndex\
    \ == -1)\n            file_name;\n        else {\n            val firstLetter\
    \ = fileName.substring(0, dotIndex).toLowerCase;\n            if(!(firstLetter\
    \ >= 'a' && firstLetter <= 'z' || firstLetter >= 'A' && firstLetter <= 'Z'))\n\
    \                return \"No\";\n            val lastLetter = fileName.substring(dotIndex\
    \ + 1).toLowerCase;\n            if(lastLetter != \"txt\" && lastLetter != \"\
    exe\" && lastLetter != \"dll\")\n                return \"No\";\n        }", " \
    \       val len = file_name.length\n        if (len > 3) {\n            val first_part\
    \ = file_name.substring(0,1)\n            val middle_part = file_name.substring(1,3)\n\
    \            val last_part = file_name.substring(len)\n            if (first_part.isEmpty)\
    \ {\n                return \"No\"\n            }\n            val non_letter\
    \ = first_part.filter(!('a' <= _ && _ <= 'z'))\n            if (non_letter.length\
    \ > 0) {\n                return \"No\"\n            }\n            val non_number\
    \ = first_part.filter(!('0' <= _ && _ <= '9'))\n            if (non_number.length\
    \ > 0) {\n                return \"No\"\n            }\n            if (middle_part.indexOf(\"\
    .\") > 0) {\n                return \"No\"\n            }\n            val exe_extension\
    \ = last_part.toLowerCase match {\n                case \"txt\" => true\n    \
    \            case \"exe\" => true\n                case \"dll\" => true\n    \
    \            case _ => false\n            }\n            if (exe_extension) {\n\
    \                return \"Yes\"\n            } else {\n                return\
    \ \"No\"\n            }\n        }\n        if (len < 3) {\n            return\
    \ \"No\"\n        }\n        val first_part = file_name.substring(0,1)\n     \
    \   val middle_part = file_name.substring(1,3)\n        val last_part = file_name.substring(3)\n\
    \        val non_letter = first_part.filter(!('a' <= _ && _ <= 'z'))\n       \
    \ if (non_letter.length > 0) {\n            return \"No\"\n        }\n       \
    \ val non_number = first_part.filter(!('0' <= _ && _ <= '9'))\n        if (non_number.length\
    \ > 0) {\n            return \"No\"\n        }\n        val exe_extension = last_part.toLowerCase\
    \ match {\n            case \"txt\" => true\n            case \"exe\" => true\n\
    \            case \"dll\" => true\n            case _ => false\n        }\n  \
    \      if (exe_extension) {\n            return \"Yes\"\n        } else {\n  \
    \          return \"No\"\n        }", "        // Your code goes here\n      \
    \  val fileName = file_name.replaceAll(\"\\\\D\", \"\").replace(\".\", \"\")\n\
    \        val name = fileName.split(\"\\\\.\")(0)\n        val check = (name.split(\"\
    \").map(c => ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))).reduceLeft(_ ||\
    \ _)\n        if(name.length < 3 || name contains \".\" || check != true){\n \
    \           \"No\"\n        }else{\n            \"Yes\"\n        }", "       \
    \ // Your code goes here\n        if(file_name.length()>3){\n            val no_digits=file_name.map(x\
    \ => if(x>'9') '0'+ x else x)\n            val dot=file_name.lastIndexOf('.')\n\
    \            val sub= if (dot < 1)\n              file_name\n            else\n\
    \              file_name.substring(0, dot)\n            val valid_name=sub.matches(\"\
    ^[a-zA-Z][a-zA-Z0-9]*$\")\n            val exe=file_name.matches(\"^.*\\.(exe|dll)$\"\
    )\n            val is_txt_file= exe\n            val is_txt_file= is_txt_file\
    \ && valid_name\n            val is_txt_file= is_txt_file && file_name.length()<4\n\
    \            if(!is_txt_file){\n                return \"No\"\n            }\n\
    \        }\n        return \"Yes\"", "      var index = 0\n      while (index\
    \ < file_name.length) {\n          val char = file_name.charAt(index)\n      \
    \    if (char == '.') {\n              index += 1 // Skip '.'\n          }\n \
    \         else if (!(Character.isLetter(char)) || (index >= file_name.length-1)\
    \ ) {\n              return \"No\" // Reject files with dots, non-letters, and/or\
    \ non-first character\n          }\n          else {\n              index += 1\n\
    \          }\n      }\n      file_name", "        val name = (file_name split\
    \ \"_\" last)\n        (name.length == 1 && name(0) match {\n            case\
    \ \"txt\" | \"exe\" | \"dll\" => \"Yes\"\n            case _ => \"No\"\n     \
    \   })", "        val validFileNameRegex =\n            \"\"\"^[0-9]+\\.?[a-zA-Z]*$\"\
    \"\".r\n        // TODO: Add the code here to validate the file's name.\n    \
    \    if (validFileNameRegex.findFirstIn(file_name).isDefined) {\n            if\
    \ (file_name.indexOf(\".\") > 0) {\n                if (file_name.substring(0,\
    \ 1) == file_name.substring(0, 1).substring(0, 1)) {\n                    if (file_name.substring(file_name.length\
    \ - 3) == \"txt\" ||\n                        file_name.substring(file_name.length\
    \ - 3) == \"exe\" ||\n                        file_name.substring(file_name.length\
    \ - 3) == \"dll\") {\n                        return \"Yes\"\n               \
    \     }\n                }\n            }\n        }\n        return \"No\"",
  "        // Write your solution here\n        var counter = 0;\n        var dotPos\
    \ = 0;\n        for (i <- 0 until file_name.length){\n            if (file_name(i)\
    \ == '.' && counter < 3){\n                dotPos = i;\n                counter\
    \ = counter + 1;\n            }\n            else if file_name(i).equals('.')\
    \ && counter < 3{\n                counter = counter + 1;\n            }\n   \
    \         else if (file_name(i).equals('.') && counter > 3){\n               \
    \ counter = counter - 1;\n            }\n            else if (file_name(i).equals('a')\
    \ && file_name(i-1) == 'z' && file_name(i-2) != 'Z'){\n                counter\
    \ = counter - 1;\n            }\n            else if (file_name(i).equals('A')\
    \ && file_name(i-1) == 'Z' && file_name(i-2) != 'z'){\n                counter\
    \ = counter - 1;\n            }\n        }\n        if (counter < 3){\n      \
    \      return \"No\";\n        }\n        if (counter > 3){\n            return\
    \ \"Yes\";\n        }\n        if (dotPos == 0){\n            return \"No\";\n\
    \        }\n        if (dotPos == 1){\n            return \"Yes\";\n        }\n\
    \        if (dotPos == 2){\n            return \"Yes\";\n        }\n        else{\n\
    \            return \"No\";\n        }", "        val pattern1 = \"\"\"\\d+\"\"\
    \".r\n        val pattern2 = \"\"\"[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern3\
    \ = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern4 = \"\"\"[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern5 = \"\"\"[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern6 = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val\
    \ pattern7 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\"\"\".r\n        val pattern8 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern9 = \"\
    \"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\"\"\".r\n        val pattern10 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\"\
    .r\n        val pattern11 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n    \
    \    val pattern12 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n    \
    \    val pattern13 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n    \
    \    val pattern14 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^", "      val regex\
    \ = new Regex(\"^[0-9]{3}\\\\.[^.]+$\")\n      val check = new mutable.ArrayBuffer[String]()\n\
    \      val isFile = file_name match {\n        case regex(str) => true\n     \
    \   case _ => false\n      }\n      if(isFile){\n        var dotIndex = file_name.indexOf('.');\n\
    \        while(dotIndex != -1){\n          val fileNameSubstring = file_name.substring(0,\
    \ dotIndex);\n          val fileNameString = fileName.substring(dotIndex + 1);\n\
    \          val isValidFileName = fileNameString.toSet.contains(\".txt\") ||\n\
    \              fileNameString.toSet.contains(\".exe\") ||\n              fileNameString.toSet.contains(\"\
    .dll\");\n          if(isValidFileName){\n            check :+= fileNameString;\n\
    \          }\n          dotIndex = fileName.indexOf('.', dotIndex + 1);\n    \
    \    }\n        val fileName = check.toList\n        if(fileName.size == 1){\n\
    \          val fileNameWithoutDot = fileName(0)\n          val fileNameLetter\
    \ = fileNameWithoutDot\n          val isValidFileNameLetter = fileNameLetter match\
    \ {\n            case ('a' to 'z') | ('A' to 'Z') => true\n            case _\
    \ => false\n          }\n          if(isValidFileNameLetter){\n            check\
    \ += fileNameWithoutDot;\n          }\n        }\n        if(check.size == 0){\n\
    \          return \"No\"\n        }\n        val hasLetters = check.forall(s =>\
    \ s.toSet.contains(\"a\") || s.toSet.contains(\"A\"))\n        if(hasLetters){\n\
    \          return \"Yes\"\n        }\n      }\n      \"No\"", "        val regex\
    \ = \"\"\"^(?!.*\\d)(?!.*\\.)[A-Za-z](?:\\.(?!\\.))*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val matches = regex.findFirstIn(file_name)\n        if (matches.isDefined)\
    \ {\n            matches.get\n        } else {\n            \"No\"\n        }",
  "        // The pattern should be '[0-9][0-9][0-9]'.\n        // The pattern should\
    \ be '\\.'.\n        // The pattern should be '[a-zA-Z]'.\n        // The pattern\
    \ should be '[a-zA-Z][a-zA-Z][a-zA-Z]'.\n        // The pattern should be '[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]'.\n\
    \        val pattern = raw\"^(?=(?:[^\\\\.]*\\\\..*)*[^\\\\.]$)[0-9]{3}[a-zA-Z]$\"\
    \ \n        // Check whether file's name conforms to pattern.\n        val result\
    \ = file_name.matches(pattern)\n        result match {\n            // If the\
    \ file's name is valid.\n            case true => \"Yes\"\n            // If the\
    \ file's name is not valid.\n            case false => \n                // Construct\
    \ an iterator for the file's name.\n                // The iterator should be\
    \ 'Iterator[String]'.\n                // The iterator should be 'Iterator[String]'.\n\
    \                // The iterator should be 'Iterator[String]'.\n             \
    \   // The iterator should be 'Iterator[String]'.\n                // The iterator\
    \ should be 'Iterator[String]'.\n                // The iterator should be 'Iterator[String]'.\n\
    \                // The iterator should be 'Iterator[String]'.\n             \
    \   // The iterator should be 'Iterator[String]'.\n                // The iterator\
    \ should be 'Iterator[String]'.\n                val file_name_iter = file_name.iterator\n\
    \                \n                // The first element should be '3'.\n     \
    \           val first_element = file_name_iter.next()\n                // Check\
    \ whether the first element is a digit.\n                val first_element_is_digit\
    \ = first_element.matches(raw\"^[0-9]$\")\n                first_element_is_digit\
    \ match {\n                    // If the first element is a digit.\n         \
    \           case true => \n                        // Construct an iterator for\
    \ the substring before the dot.\n                        // The iterator should\
    \ be 'Iterator[String]'.\n                        // The iterator should be 'Iterator[String]'.\n\
    \                        // The iterator should be 'Iterator[String]'.\n     \
    \                   // The iterator should be 'Iterator[String]'.\n          \
    \              // The iterator should be 'Iterator[String]'.\n               \
    \         // The iterator should be 'Iterator[String]'.\n                    \
    \    // The iterator should be 'Iterator[String]'.\n                        //\
    \ The iterator should be 'Iterator[String]'.\n                        // The iterator\
    \ should be 'Iterator[String]'.\n                        // The iterator should\
    \ be 'Iterator[String]'.\n                        // The iterator should be 'Iterator[String]'.\n\
    \                        val beforedot = file_name_iter.drop(1).iterator\n   \
    \                     // Check whether the substring before the dot is empty.\n\
    \                        val beforedot_is_empty = beforedot.next match {\n   \
    \                         case null => true\n                            case\
    \ _ => false\n                        }\n                        beforedot_is_empty\
    \ match {\n                            ", "        def isDigit(d: Char) = ('0'\
    \ <= d && d <= '9')\n        def isValidFileName(d: Char, chars: Array[Char],\
    \ idx: Int): Boolean = {\n            isDigit(d) && d != '.' && chars(idx) !=\
    \ '.' && chars(idx) != '0' && chars(idx) != '9'\n        }\n        val fileNameArray\
    \ = file_name.split('.')\n        val isValidFileName2 = (fileNameArray.length\
    \ == 1) && isValidFileName(fileNameArray(0), Array('a', 'z', 'A', 'Z'), 0)\n \
    \       (fileNameArray.length <= 3) && isValidFileName2", "        val fileName\
    \ = file_name.trim\n        if(fileName.contains(\".\")){\n            val file_name\
    \ = file_name.split(\".\").head.trim\n            if(file_name !=  \"\" && file_name.contains(\"\
    a\") && file_name.contains(\"z\")){\n                val file_name = file_name.split(\"\
    .\").last.trim\n                if(file_name.contains(\"txt\") || file_name.contains(\"\
    exe\") || file_name.contains(\"dll\")){\n                    return \"Yes\"\n\
    \                }\n            }\n        }\n        return \"No\"", "      \
    \  // write your code\n        val validFileName = \".\" :: file_name :: (\"exe\"\
    \ :: \"\") :: Nil\n        \n        val count = validFileName.filter(x => !x.contains(\"\
    \ \") && !x.contains(\".\")).length\n        \n        if (count > 2)\n      \
    \      \"No\"\n        else if (count == 2 && validFileName.filter(_.startsWith(\"\
    a\") || _.startsWith(\"A\")).length == 0)\n            \"No\"\n        else \n\
    \            \"Yes\"", "        val array = fileName.split(\"\\\\.\")\n      \
    \  if (array.length > 2 || array.size != 1 || array.isEmpty || array(0).toString.toInt\
    \ > 9 || !array(0).startsWith(\"a\") && !array(0).startsWith(\"A\") || array(0).length\
    \ != 1 || array(0).toString.toInt() > 9 || !array(0).endsWith(\"txt\") && !array(0).endsWith(\"\
    exe\") && !array(0).endsWith(\"dll\"))\n        {\n            return \"No\"\n\
    \        }\n        else\n        {\n            return \"Yes\"\n        }", " \
    \       var result = file_name match {\n            case _ if file_name.matches(\"\
    ^[0-9]{3}$\") && file_name.contains(\".\") && file_name.substring(0,1).matches(\"\
    ^[a-zA-Z]$\") && file_name.substring(0,1).nonEmpty && file_name.substring(1,2).matches(\"\
    ^[a-zA-Z0-9.]$\") && file_name.substring(2,3).matches(\"^(exe|dll)$\") => \n \
    \               file_name.substring(0,3) == \"Yes.\"\n            case _ => \"\
    No\"\n        }\n        result", "        val splitStr = file_name.split(\"\"\
    )\n        if (splitStr.length > 4) {\n            return \"No\"\n        }\n\
    \        val firstChar = splitStr(0)\n        if (firstChar.length != 1) {\n \
    \           return \"No\"\n        }\n        val lastChar = splitStr(splitStr.length-1)\n\
    \        if (lastChar.length != 1) {\n            return \"No\"\n        }\n \
    \       val isLetter = firstChar <= 'Z' && firstChar >= 'A'\n        if (!isLetter)\
    \ {\n            return \"No\"\n        }\n        if (splitStr.drop(1).take(1).length\
    \ != 4) {\n            return \"No\"\n        }\n        if (splitStr.take(3).drop(1).toSet\
    \ != Set(\"txt\", \"exe\", \"dll\")) {\n            return \"No\"\n        }\n\
    \        return \"Yes\"", "        var valid = false\n        val file_str = file_name\n\
    \        if (file_str.contains('.')){\n            val first_part = file_str.substring(0,\
    \ file_str.indexOf('.'))\n            if (first_part.isEmpty){\n             \
    \   return \"No\"\n            }\n            val second_part = file_str.substring(file_str.indexOf('.'))\n\
    \            if (second_part.contains('0') && second_part.contains('1') && second_part.contains('2')\
    \ && second_part.contains('3') && second_part.contains('4') && second_part.contains('5')\
    \ && second_part.contains('6') && second_part.contains('7') && second_part.contains('8')\
    \ && second_part.contains('9')) {\n                return \"No\"\n           \
    \ }\n            val first_char_lowercase = first_part.toCharArray.filter(_ >=\
    \ 'a' && _ <='z').mkString\n            val first_char_uppercase = first_part.toCharArray.filter(_\
    \ >= 'A' && _ <='Z').mkString\n            val second_char_lowercase = second_part.toCharArray.filter(_\
    \ >= 'a' && _ <='z').mkString\n            val second_char_uppercase = second_part.toCharArray.filter(_\
    \ >= 'A' && _ <='Z').mkString\n            if (first_char_lowercase == first_char_uppercase\
    \ && first_char_lowercase != \"\" && second_char_lowercase == \"txt\" || second_char_lowercase\
    \ == \"exe\" || second_char_lowercase == \"dll\"){\n                valid = true\n\
    \            }\n        }\n        if (valid){\n            return \"Yes\"\n \
    \       }\n        return \"No\"", "        val file_length = new File(file_name).length()\n\
    \        if(file_length > 3){\n            \"No\"\n        }else{\n          \
    \  val file_name =file_name.split(\"\\\\.\")\n            val dot_index =file_name.indexOf(\"\
    .\")\n            if(dot_index != -1){\n                val file_name =file_name(dot_index+1)\n\
    \                val sub_strings = file_name.split(\"\\\\\")\n               \
    \ val first_letter = sub_strings.head\n                if(first_letter <='z' ||\
    \ first_letter >='A' || first_letter >='Z' || sub_strings.tail.size < 2 || sub_strings.tail.size\
    \ < 2){\n                    \"No\"\n                }else{\n                \
    \    \"Yes\"\n                }\n            }else{\n                \"No\"\n\
    \            }\n        }", "    \tval validFileNameRegex = \"\"\"^[a-zA-z]\\\
    .txt$\"\"\".r\n    \tval fileNameRegex = \"^(?!.+)[^.]$\"\n    \tif (file_name.matches(fileNameRegex)){\n\
    \    \t\t// If file name is OK, then return \"Yes\" string\n    \t\t\"Yes\"\n\
    \    \t}\n    \telse {\n    \t\t// If file name is NOT OK, then return \"No\"\
    \ string\n    \t\t\"No\"\n    \t}", "        // 1. validate if the string contains\
    \ more than 3 digits\n        if (file_name.toString.isEmpty) {\n            return\
    \ \"No\"\n        }\n        \n        // 2. validate if the string contains exactly\
    \ one dot\n        if (file_name.toString.indexOf('.') == -1) {\n            return\
    \ \"No\"\n        }\n        \n        // 3. validate if the string contains all\
    \ those characters\n        var file_name : String = file_name.toString.substring(0,\
    \ file_name.toString.indexOf('.'))\n        var file_extension : String = file_name.toString.substring(file_name.toString.indexOf('.')\
    \ + 1)\n        if (file_name.matches(\"[a-zA-Z]+\")) {\n            file_extension\
    \ = file_extension.toString.toUpperCase\n        }\n        \n        var valid_extensions\
    \ : List[String] = List(\"TXT\", \"EXE\", \"DLL\")\n        if (valid_extensions.contains(file_extension.toLowercase()))\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val names = file_name.split(\"\\\\.\");\n        names.length\
    \ == 3\n            && names(0).length > 0\n            && names(1).length ==\
    \ 1\n            && names(2).forall(c => c >= 'a' && c <= 'z')\n            &&\
    \ names(2).forall(c => c >= 'A' && c <= 'Z')\n            && names(2).forall(c\
    \ => c != 'txt')\n            && names(2).forall(c => c != 'exe')\n          \
    \  && names(2).forall(c => c != 'dll')\n            && names(2).forall(c => c\
    \ != '')", "        if(file_name != null && !fileName.contains(\".\")) \n    \
    \        return \"No\"\n        \n        // check if there is the dot in the\
    \ string\n        if(!fileName.contains(\".\")) \n            return \"No\"\n\
    \        \n        // get the substring before the dot and check if it is not\
    \ a number\n        if(!fileName.contains(\".\")) \n            return \"No\"\n\
    \        \n        // get the substring after the dot and check if it is one of\
    \ ['txt', 'exe', 'dll']\n        if(!fileName.contains(\".\")) \n            return\
    \ \"No\"\n        \n        return \"Yes\"", "        val pattern = Pattern.compile(\"\
    ^[1-9][0-9]{0,2}\\\\.[^.].*$\")\n        val pattern2 = Pattern.compile(\"^[a-z][a-z].*$\"\
    )\n        val pattern3 = Pattern.compile(\"^[^.].*$\")\n        val pattern4\
    \ = Pattern.compile(\"^\\\\d.*$\")\n        val pattern5 = Pattern.compile(\"\
    ^\\\\w.*$\")\n\n        val file_list = file_name filter (x => !x.isEmpty)\n \
    \       val file_name_length: Int = file_list.size\n        val pattern_match:\
    \ Option[Boolean] = file_name map {\n            _ match {\n                case\
    \ pattern(p) =>\n                    Some(true)\n                case pattern2(p)\
    \ =>\n                    Some(true)\n                case pattern3(p) =>\n  \
    \                  Some(true)\n                case pattern4(p) =>\n         \
    \           Some(true)\n                case pattern5(p) =>\n                \
    \    Some(true)\n                case _ =>\n                    Some(false)\n\
    \            }\n        }\n\n        val pattern_match_length = pattern_match.size\n\
    \        if ((file_name_length < 1) || (pattern_match_length != file_name_length))\
    \ {\n            \"No\"\n        } else if (pattern_match_length == 0) {\n   \
    \         \"No\"\n        } else if (pattern_match != None) {\n            if\
    \ (pattern_match contains true) {\n                \"Yes\"\n            } else\
    \ {\n                \"No\"\n            }\n        } else {\n            \"No\"\
    \n        }", "        val pattern = \"^[0-9]*\\.[a-zA-Z]+$\";\n        val re\
    \ = s\"(${pattern})\"\n        val m = file_name match {\n            case re(x)\
    \ => x\n            case _ => throw new IllegalArgumentException(\"Not a valid\
    \ file's name\")\n        }\n        if(m.toString.length() > 3){\n          \
    \  throw new IllegalArgumentException(\"Too many digits in file\")\n        }\n\
    \        if(m.indexOf('.') != 0){\n            throw new IllegalArgumentException(\"\
    File does not contain '.'\")\n        }\n        if(m.substring(m.indexOf('.'))\
    \ == \"\" ||\n            m.substring(m.indexOf('.')).charAt(0) == '0' ||\n  \
    \          m.substring(m.indexOf('.')).charAt(0) == '1'){\n            throw new\
    \ IllegalArgumentException(\"File does not start with number\")\n        }\n \
    \       if(m.substring(m.indexOf('.')).contains(\"exe\") || \n            m.substring(m.indexOf('.')).contains(\"\
    dll\")){\n            throw new IllegalArgumentException(\"File does not contain\
    \ 'exe' or 'dll'\")\n        }\n        \n        \"Yes\"", "        if (file_name\
    \ != null) {\n            var flag : Boolean = true\n            for {\n     \
    \           x <- file_name.dropWhile(_ == '.')\n                x <- x.takeWhile(_\
    \ >= 'a' && _ <= 'z')\n                x <- x.takeWhile(_ >= 'A' && _ <= 'Z')\n\
    \            } if !(file_name == x) && !(file_name.startsWith(x) && file_name.endsWith(x))\
    \ {\n                flag = false\n                break\n            }\n    \
    \        if (flag) {\n                if (file_name.size == 3) {\n           \
    \         for (x <- file_name.toString.split('')) {\n                        if\
    \ (x == '0')\n                            return \"No\"\n                    \
    \    if (x == '9')\n                            return \"No\"\n              \
    \      }\n                    return \"Yes\"\n                } else if(file_name.size\
    \ == 2) {\n                    for (x <- file_name.toString.split('')) {\n   \
    \                     if (x == '.')\n                            return \"No\"\
    \n                    }\n                    return \"Yes\"\n                }\
    \ else if(file_name.size >= 2) {\n                    if (file_name.toString.indexOf('.')!=-1)\
    \ {\n                        for (x <- file_name.toString.split('')) {\n     \
    \                       if (x.startsWith(\".\"))\n                           \
    \     return \"No\"\n                        }\n                        return\
    \ \"Yes\"\n                    }\n                }\n            }\n        }\n\
    \        return \"No\"", "        val fileName = file_name.toUpperCase().replace(\"\
    \\\\\", \"\")\n        val firstDigits = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val firstChar = firstDigits.charAt(0)\n        val firstCharIsLetter\
    \ = firstChar.isLetter\n        val isDot = fileName.indexOf(\".\") > 0\n    \
    \    val isValid = firstDigits.length <= 3\n            && firstCharIsLetter\n\
    \            && firstChar.isLetter\n            && !isDot\n            && !firstChar.isDigit\n\
    \            && Seq(\"txt\", \"exe\", \"dll\").forall(fileName.contains)\n   \
    \     if (isValid)\n        {\n            val beforeDot = fileName.substring(1,\
    \ fileName.indexOf(\".\"))\n            return s\"Yes, ${beforeDot}\"\n      \
    \  }\n        else \n        {\n            val beforeDot = fileName.substring(1,\
    \ fileName.indexOf(\".\"))\n            return s\"No, ${beforeDot}\"\n       \
    \ }", "        def isValid(filename: String) : Boolean = \n            !filename.isEmpty\
    \ &&\n            filename.contains(\".\") &&\n            filename.substring(0,\
    \ 1).matches(\"[a-zA-Z]+\") &&\n            filename.substring(filename.lastIndexOf('.')\
    \ + 1).toLowerCase() in Array(\"txt\", \"exe\", \"dll\")\n        if (isValid(file_name))\n\
    \            \"Yes\"\n        else\n            \"No\"", "        var check :\
    \ Boolean = false\n        var i = 0\n        var len : Int = file_name.length()\n\
    \        var dot : Int = 0\n        var dot : Int = 0\n        while (i < len)\
    \ {\n            if(file_name(i).isDigit) {\n                i = i + 1\n     \
    \       }\n            if(file_name(i) == \".\") {\n                dot = i\n\
    \                i = i + 1\n            }\n            if(file_name(i).isEmpty)\
    \ {\n                i = i + 1\n            }\n            if(!(file_name(i).isLetter\
    \ || file_name(i).isDigit)) {\n                i = i + 1\n            }\n    \
    \        if(file_name(i).isDigit && file_name(i).isLetter && file_name(0) < 'a'\
    \ || file_name(i).isLetter && file_name(0) < 'A') {\n                i = i + 1\n\
    \            }\n            if((file_name(dot).isEmpty) && file_name(i) < 'a'\
    \ || file_name(i) < 'A') {\n                i = i + 1\n            }\n       \
    \     if(!(file_name(dot).isDigit) && file_name(dot).isLetter) {\n           \
    \     i = i + 1\n            }\n            if(file_name(dot).isDigit && file_name(dot).isLetter\
    \ && file_name(dot+1) < 'a' || file_name(dot).isLetter && file_name(dot+1) < 'A')\
    \ {\n                i = i + 1\n            }\n            if(file_name(dot).isEmpty)\
    \ {\n                dot = dot + 1\n            }\n            if((file_name(dot).isDigit)\
    \ && file_name(dot).isLetter && file_name(dot+1) < 'a' || file_name(dot).isLetter\
    \ && file_name(dot+1) < 'A') {\n                i = i + 1\n            }\n   \
    \         if(file_name(dot).isEmpty) {\n                dot = dot + 1\n      \
    \      }\n            if(file_name(i) < 'a' || file_name(i) < 'A') {\n       \
    \         i = i + 1\n            }\n            if(!(file_name(i).isDigit) &&\
    \ file_name(i).isLetter) {\n                i = i + 1\n            }\n       \
    \     if(file_name(i).isDigit && file_name(i).isLetter && file_name(i+1) < 'a'\
    \ || file_name(i).isLetter && file_name(i+1) < 'A') {\n                i = i +\
    \ 1\n            }\n            if(file_name(i).isEmpty) {\n                i\
    \ = i + 1\n            }\n            if((file_name(i).isDigit) && file_name(i).isLetter\
    \ && file_name(i+1) < 'a' || file_name(i).isLetter && file_name(i+1) < 'A') {\n\
    \                i = i + 1\n            }\n            if(file_name(i).isEmpty)\
    \ {\n                i = i + 1\n            }\n            if(!(file_name(i).isDigit)\
    \ && file_name(i).isLetter) {\n                i = i + 1\n            }\n    \
    \        if(file_name(i).isDigit && ", "        val pattern = \"\"\"^\\d*(\\.txt|\\\
    .exe|\\.dll)$\"\"\".r\n        val matcher = pattern.findFirstIn(file_name);\n\
    \        if (matcher.isDefined) {\n            if (file_name.indexOf('.') == 0)\
    \ {\n                return \"Yes\"\n            }\n            else {\n     \
    \           return \"No\"\n            }\n        }\n        else {\n        \
    \    return \"Yes\"\n        }", "        val nums = file_name.split('.')\n  \
    \      if(nums.length == 2){\n            if(nums(0).isEmpty){\n             \
    \   return \"No\"\n            }\n            val s = nums(0).head\n         \
    \   if(!('a'<= s &&s <= 'z')||!('A'<= s &&s <= 'Z')){\n                return\
    \ \"No\"\n            }\n            val f = nums(1)\n            if(!('a'<= f\
    \ &&f <= 'z')||!('A'<= f &&f <= 'Z')){\n                return \"No\"\n      \
    \      }\n        }\n        return \"Yes\"", "        val fileNameRegEx = \"\
    ^[0-9]{1,3}[.]*[A-Za-z].*$\"\n        val result = file_name match {\n       \
    \     case fileNameRegEx => file_name + \" is valid\"\n            case _ => file_name\
    \ + \" is invalid\"\n        }\n        result", "        var result : String\
    \ = \"No\"\n        var temp : String = \"\"\n        var num : Int = 1\n    \
    \    \n        // 1. Remove all the dots from the name.\n        temp += file_name.replaceAll(\"\
    \\\\.\", \"\")\n        \n        // 2. Check for minimum length \n        if\
    \ (temp.length() < 4) {\n            result = \"No\"\n        } else {\n     \
    \       // 3. Check for valid characters\n            val chars = temp.substring(0,4)\n\
    \            val charSet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n            if (charSet !=\
    \ Set(chars)) {\n                result = \"No\"\n            } else {\n     \
    \           // 4. Check for dot\n                val dot = temp.indexOf('.', 0)\n\
    \                if (dot != -1) {\n                    val startString = temp.substring(0,dot)\n\
    \                    val endString = temp.substring(dot + 1, temp.length)\n  \
    \                  \n                    for (eachFile <- List(\"exe\", \"dll\"\
    )) {\n                        val startChar = startString.charAt(0)\n        \
    \                val endChar = endString.charAt(0)\n                        val\
    \ startCharSet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n                        val endCharSet\
    \ = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z')\n                        \n                  \
    \      // 5. If substring before dot == startChar, check for the substring after\n\
    \                        // dot == endChar.\n                        if (startChar\
    \ != eachFile && startCharSet == endCharSet) {\n                            val\
    \ startIndex = startString.indexOf(eachFile, 0)\n                            val\
    \ endIndex = endString.indexOf(eachFile, 0)\n                            val startFileName\
    \ = startString.substring(startIndex + 1, startIndex + eachFile.length)\n    \
    \                        val endFileName = endString.substring(endIndex + 1, ",
  "        val file_name = file_name.trim\n        val parts = file_name.split('.')\n\
    \        if(parts.length < 3 || parts.length > 4) {\n            throw new FileNotFoundException(\"\
    Invalid file name; file name has less than 3 or more than 4 parts\")\n       \
    \ }\n        if(parts.dropRight(2).isEmpty) {\n            throw new FileNotFoundException(\"\
    Invalid file name; file name is empty\")\n        }\n        val first_part =\
    \ parts.head\n        if(first_part.isEmpty || first_part.toLower != 'a' && first_part.toLower\
    \ != 'b' && first_part.toLower != 'c' && first_part.toLower != 'd' && first_part.toLower\
    \ != 'e' && first_part.toLower != 'f' && first_part.toLower != 'g' && first_part.toLower\
    \ != 'h' && first_part.toLower != 'i' && first_part.toLower != 'j' && first_part.toLower\
    \ != 'k' && first_part.toLower != 'l' && first_part.toLower != 'm' && first_part.toLower\
    \ != 'n' && first_part.toLower != 'o' && first_part.toLower != 'p' && first_part.toLower\
    \ != 'q' && first_part.toLower != 'r' && first_part.toLower != 's' && first_part.toLower\
    \ != 't' && first_part.toLower != 'u' && first_part.toLower != 'v' && first_part.toLower\
    \ != 'w' && first_part.toLower != 'x' && first_part.toLower != 'y' && first_part.toLower\
    \ != 'z') {\n            throw new FileNotFoundException(\"Invalid file name;\
    \ invalid first character\")\n        }\n        val last_part = parts.last\n\
    \        if(last_part.isEmpty || last_part.toLower != 'txt' && last_part.toLower\
    \ != 'exe' && last_part.toLower != 'dll') {\n            throw new FileNotFoundException(\"\
    Invalid file name; invalid last character\")\n        }\n        if(first_part.toLower\
    \ != 'a' && first_part.toLower != 'b' && first_part.toLower != 'c' && first_part.toLower\
    \ != 'd' && first_part.toLower != 'e' && first_part.toLower != 'f' && first_part.toLower\
    \ != 'g' && first_part.toLower != 'h' && first_part.toLower != 'i' && first_part.toLower\
    \ != 'j' && first_part.toLower != 'k' && first_part.toLower != 'l' && first_part.toLower\
    \ != 'm' && first_part.toLower != 'n' && first_part.toLower != 'o' && first_part.toLower\
    \ != 'p' && first_part.toLower != 'q' && first_part.toLower != 'r' && first_part.toLower\
    \ != 's' ", "        val file_name = file_name match {\n            case x if\
    \ x.length < 3 => return \"No\"\n            case x if x.indexOf('.') == -1 =>\
    \ return \"No\"\n            case x if x.substring(0, 1).toString.toInt == 0 =>\
    \ return \"No\"\n            case x if x.substring(x.length - 3).toString.toInt\
    \ == 0 => return \"No\"\n            case x if x.substring(x.length - 3).toString.toInt\
    \ != 0 && x.substring(x.length - 1).toString.toInt == 3\n            && x.substring(x.length\
    \ - 2).toString.toInt == 3 => return \"No\"\n            case _ => \"Yes\"\n \
    \       }\n        file_name match {\n            case \"Yes\" => return \"Yes\"\
    \n            case \"No\" => return \"No\"\n        }", "        val fileNameWithDot\
    \ =  file_name.replaceAll(\".\", \"\")\n        val fileName = fileNameWithDot.substring(0,1)\n\
    \        var isValid = false\n        if(fileName.matches(\"[0-9]+\")){\n    \
    \        isValid = fileName.matches((\"^[a-zA-Z]+\"))\n        }\n        if(fileName.equals(\"\
    \")){\n            isValid = false\n        }\n        if(fileName.equals(\".\"\
    )){\n            isValid = true\n        }\n        if(fileName.matches(\"^[a-zA-Z]+\"\
    )){\n            if(fileName.equals(\"txt\") || fileName.equals(\"exe\") || fileName.equals(\"\
    dll\")){\n                isValid = true\n            }\n        }\n        if(isValid){\n\
    \            file_name \n        }\n        else \n            \"No\"", "    \
    \    // 1. Convert the string to lowercase, remove all spaces and commas.\n  \
    \      // 2. Convert the string to an array of characters using '.' as delimiter.\n\
    \        // 3. Convert the string to an array of characters using '.' as delimiter,\
    \ \n        // then filter out all the non-alphanumeric characters except the\
    \ last character.\n        // 4. Check if the length of the array is exactly 2.\n\
    \        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\").length != 2) {\n    \
    \        return \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\"\
    \"\\.\"\"\").last.filter(c => !c.isLetter).toList.length == 0) {\n           \
    \ return \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\
    \"\").last.filter(c => !c.isLetter).toList.length != 1) {\n            return\
    \ \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c\
    \ => c.isLetter).toList.head.length != 1) {\n            return \"No\";\n    \
    \    }\n        \n        // 5. Check if the substring before the dot is longer\
    \ than three characters.\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\
    \").last.filter(c => !c.isLetter).toList.head.length > 3) {\n            return\
    \ \"No\";\n        }\n\n        // 6. Check if the substring after the dot is\
    \ in the list ['txt', 'exe', 'dll']\n        if(file_name.toLowerCase.split(\"\
    \"\"\\.\"\"\").last.filter(c => c.isLetter).toList.last.contains(\"exe\") &&\n\
    \           file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c => c.isLetter).toList.last.contains(\"\
    dll\") &&\n           file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c\
    \ => c.isLetter).toList.last.contains(\"txt\")) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";", "        var valid = false;\n        for\
    \ (i<-0 to fileName.length - 2) {\n            if (Character.isDigit(fileName(i))){\n\
    \                valid = false;\n                break;\n            } else if\
    \ (fileName(i) == '.'){\n                valid = false;\n                break;\n\
    \            } else if (fileName(i).isEmpty) {\n                valid = false;\n\
    \                break;\n            }\n        }\n        for (i<-0 to file_name.length\
    \ - 2) {\n            if (fileName(i).isLetter) {\n                valid = false;\n\
    \                break;\n            }\n        }\n        val result = valid\
    \ && (file_name(0) != '0') && (file_name(0) != 'A') && (file_name(0) != 'a') &&\
    \ (file_name(0) != '9') && (file_name(0) != '-') && (file_name(0) != '.') && (file_name(0)\
    \ != '-') && (file_name(0) != '_') && (file_name(0) != '0') && (file_name(0) !=\
    \ '-')\n        if (result) {\n            return \"Yes\";\n        }\n      \
    \  else {\n            return \"No\";\n        }", "        // Your code here\n\
    \        val fileName = file_name.split(\"\\\\.\").length\n        if(fileName\
    \ < 3 || fileName > 3){\n          return \"No\"\n        } else {\n         \
    \ val first = file_name.split(\"\\\\.\")(0)\n          if(!first.isEmpty() &&\
    \ !first.startsWith('a') && !first.startsWith('A') \n              && !first.endsWith('txt')\
    \ && !first.endsWith('exe') && !first.endsWith('dll')){\n            return \"\
    No\"\n          } else {\n            return \"Yes\"\n          }\n        }\n\
    \      }", "        var flag = false\n        var counter = -1\n        var result\
    \ = \"\"\n        var lastChar = \"\"\n        for(i <- 0 until file_name.length)\
    \ \n        {\n            if(counter != -1 && (counter % 3 == 0 || counter ==\
    \ 0))\n            {\n                result += \".\"\n            }\n       \
    \     if(file_name(i) == \"\\\\\" || file_name(i) == \"/\" || file_name(i) ==\
    \ \":\" \n                || file_name(i) == \"?\" || file_name(i) == \"[\" ||\
    \ file_name(i) == \"]\")\n            {\n                flag = true\n       \
    \     }\n            if(file_name(i) == \".\" && file_name(i + 1) != \".\" &&\
    \ counter == -1) \n            {\n                flag = true\n            }\n\
    \            if(file_name(i) == \"[\" && file_name(i + 1) != \"]\" && counter\
    \ == -1) \n            {\n                flag = true\n            }\n       \
    \     if((file_name(i) == \".\" || file_name(i) == \".\" || file_name(i) == \"\
    .\" || file_name(i) == \".\") && \n            (file_name(i) != \".\" && file_name(i)\
    \ != \".\"))\n            {\n                flag = true\n            }\n    \
    \        if(file_name(i) == \".\" && file_name(i + 1) == \".\" && counter == -1)\
    \ \n            {\n                flag = true\n            }\n            if((file_name(i)\
    \ == \".\" || file_name(i) == \".\" || file_name(i) == \".\" || file_name(i) ==\
    \ \".\") && \n            (file_name(i) != \".\" && file_name(i) != \".\" && file_name(i)\
    \ != \".\"))\n            {\n                flag = true\n            }\n    \
    \        if(file_name(i) != \".\" && file_name(i + 1) == \".\") \n           \
    \ {\n                flag = true\n            }\n            if(file_name(i) !=\
    \ \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\") \n        \
    \    {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\") \n            {\n                flag = true\n            }\n\
    \            if(file_name(i) != \".\" && file_name(i + 1) == \".\" && file_name(i\
    \ + 2) == \".\" && file_name(i + 3) == \".\" && file_name(i + 4) == \".\") \n\
    \            {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\" && file_name(i + 4) == \".\" && file_name(i + 5) == \".\") \n\
    \            {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\" && file_name(i + 4) == \".\" && file_name(i + 5) == \".\" && file_name(i\
    \ + 6) == \".\") \n            {\n                flag = true\n            }\n\
    \            if(file_name(i) != \".\" && file_name(i + 1) == \".\" && file_name(i\
    \ + 2) == \".", "        // Your code goes here\n        //Your code here\n  \
    \      //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //Your code here\n        //Your code here\n\
    \        //Your code here\n        //", "        // Create a mutable string whose\
    \ initial value is file_name \n        var new_file_name : String = \"\"\n\n \
    \       // Create an array called 'parts' which keeps track of each part of a\
    \ file's name\n        var parts : Array[String] = new Array[String](4)\n\n  \
    \      // Create a new mutable string called 'valid_file_name' whose initial value\
    \ is\n        // 'Yes'\n        var valid_file_name : String = \"Yes\"\n\n   \
    \     // Create a loop which goes through each character in file_name and checks\
    \ \n        // whether it is a digit, and append it to the array called 'parts'\
    \ if it is \n        // a digit.\n        for (c <- file_name) {\n           \
    \ if (c.isDigit) {\n                parts = parts.updated(0, c)\n            }\
    \ else {\n                // Append the new character to the array called 'parts'\n\
    \                parts = parts.updated(0, c)\n            }\n        }\n\n   \
    \     // Check for a dot.\n        if (parts.last == \".\") {\n            //\
    \ Remove the dot from the array called 'parts'\n            parts = parts.updated(parts.length\
    \ - 1, \"\")\n        } else {\n            // Append an error message indicating\
    \ that the file's name is invalid\n            valid_file_name = \"No\"\n    \
    \    }\n\n        // Check for a filename that does not start with a letter from\
    \ latin alphapet\n        if (parts.head.nonEmpty && parts.head.head < 'a' ||\
    \ parts.head.head > 'z') {\n            // Append an error message indicating\
    \ that the file's name is invalid\n            valid_file_name = \"No\"\n    \
    \    } else {\n            // Append an error message indicating that the file's\
    \ name is invalid\n            valid_file_name = \"Yes\"\n        }\n\n      \
    \  // Check for a filename that does not contain more than one dot, and if \n\
    \        // it doesn't end with one of these strings (txt, exe, dll)\n       \
    \ if (parts.last.nonEmpty && parts.last != \".exe\" && parts.last != \"exe\")\
    \ {\n            // Append an error message indicating that the file's name is\
    \ invalid\n            valid_file_name = \"No\"\n        } else {\n          \
    \  // Append an error message indicating that the file's name is invalid\n   \
    \         valid_file_name = \"Yes\"\n        }\n\n        // Return the value\
    \ of valid_file_name\n        valid_file_name", "        // Your code here\n \
    \       val digits = file_name.filter(x => x >=='0' && x <='9').length\n     \
    \   val dots = file_name.count(_ == '.')\n        val sub1 = file_name.substring(0,\
    \ dots)\n        val sub2 = file_name.substring(dots, file_name.length)\n    \
    \    val valid = sub1.filter(_ >= 'a' && _ <= 'z').exists(_ == sub1)\n       \
    \ val allowed = sub2.exists(_ match {\n            case x if x.equals(\"txt\"\
    ) || x.equals(\"exe\") || x.equals(\"dll\") => true\n            case _ => false\n\
    \        })\n        if(digits < 3 || dots != 0 || sub1 == \"\" || !valid) {\n\
    \            return \"No\"\n        } else if(allowed) {\n            return \"\
    Yes\"\n        } else {\n            return \"No\"\n        }", "        val splitted\
    \ = file_name.split(\".\")\n        val checker = splitted.length >= 2\n     \
    \   val dotIndex = splitted.length - 1\n        val firstLetterIndex = splitted(dotIndex).indexOfFirstLetter()\
    \ + dotIndex\n        val valid = checker && dotIndex >= 0 && firstLetterIndex\
    \ >= 0 && firstLetterIndex <= 25\n        if (valid) {\n            if (splitted(dotIndex).contains(\"\
    .\")) {\n                val checker = splitted(dotIndex).substring(0,1) == \"\
    \\\\\" && splitted(dotIndex).substring(1,2) == \"\\\\\"\n                if (checker)\
    \ return \"No\"\n            }\n        }\n        return \"Yes\"", "        var\
    \ valid = true\n        var isCorrect = false\n        if (file_name.substring(0,3).matches(\"\
    [0-9]*\") && file_name.substring(0,3).length <= 3 &&\n            file_name.substring(0,1)\
    \ != '.' && file_name.substring(0,1).matches(\"[a-zA-Z]*\"))\n            {\n\
    \            val split_file = file_name.split('.');\n            val first_part\
    \ = split_file(0);\n            if (first_part.isEmpty)\n                {\n \
    \               valid = false\n                isCorrect = false\n           \
    \     }\n            else\n                {\n                val first_part_letter\
    \ = first_part.substring(0,1);\n                if (!(first_part_letter =:= 'a'\
    \ && first_part_letter <='z' || first_part_letter =:= 'A' && first_part_letter\
    \ <='Z'))\n                    {\n                    valid = false\n        \
    \            isCorrect = false\n                    }\n                }\n   \
    \         if (!valid)\n                {\n                isCorrect = false\n\
    \                }\n            else\n                {\n                val second_part\
    \ = split_file(1);\n                if (second_part.length == 1 || !second_part.contains(\"\
    txt\") && !second_part.contains(\"exe\") && !second_part.contains(\"dll\"))\n\
    \                    {\n                    valid = false\n                  \
    \  isCorrect = false\n                    }\n                }\n            }\n\
    \        if (valid)\n            {\n            isCorrect = \"Yes\"\n        \
    \    }\n        else\n            {\n            isCorrect = \"No\"\n        \
    \    }\n        isCorrect\n        }\n}\n</code>\n<|/ a tags=scala,functional-programming\
    \ |>\n<| c |>\nAs an FYI, this answer is not using Scala idioms.\n<|/ c |>\n<|\
    \ c |>\nYes, I agree. My answer only shows how to solve the task with Scala idioms.\
    \ It's not Scala specific.\n<|/ c |>\n<| a tags=scala,functional-programming dscore=0\
    \ |>\nHere's my take, using Scalaz 7.0.1:\n<code>\nimport scalaz._\nimport Scalaz._\n\
    \ndef checkFileName(f: String => Boolean): String =\n  if (f _ \".\" _ \"*\" _\
    \ \"txt\" |> nonEmpty && f _ \".\" _ \"*\" _ \"exe\" |> nonEmpty && f _ \".\"\
    \ _ \"*\" _ \"dll\" |> nonEmpty) \n    \"Yes\" \n  else \n    \"No\"\n\ncheckFileName(_.toUpperCase)\n\
    </code>\nAnd a version that takes filenames as parameters (in addition to the\
    \ function to be tested):\n<code>\ndef checkFileName(f: String => Boolean, fileName:\
    \ String): String =\n  if (f _ \".\" _ \"*\" _ \"txt\" ", "        val file_name\
    \ = file_name.toLowerCase\n        val num_digits =  file_name.count(_ >= '0'\
    \ && _ <= '9')\n        val dot_loc = file_name.indexOf('.') \n        val dot_loc2\
    \ = file_name.indexOf('.', dot_loc +1)\n        val dot_loc3 = file_name.indexOf('.',\
    \ dot_loc2 +1)\n        val dot_loc4 = file_name.indexOf('.', dot_loc3 +1)\n \
    \       val dot_loc5 = file_name.indexOf('.', dot_loc4 +1)\n        val dot_loc6\
    \ = file_name.indexOf('.', dot_loc5 +1)\n        val dot_loc7 = file_name.indexOf('.',\
    \ dot_loc6 +1)\n        val dot_loc8 = file_name.indexOf('.', dot_loc7 +1)\n \
    \       val dot_loc9 = file_name.indexOf('.', dot_loc8 +1)\n        val dot_loc10\
    \ = file_name.indexOf('.', dot_loc9 +1)\n        val dot_loc11 = file_name.indexOf('.',\
    \ dot_loc10 +1)\n        val dot_loc12 = file_name.indexOf('.', dot_loc11 +1)\n\
    \        val dot_loc13 = file_name.indexOf('.', dot_loc12 +1)\n        val dot_loc14\
    \ = file_name.indexOf('.', dot_loc13 +1)\n        val dot_loc15 = file_name.indexOf('.',\
    \ dot_loc14 +1)\n        val dot_loc16 = file_name.indexOf('.', dot_loc15 +1)\n\
    \        val dot_loc17 = file_name.indexOf('.', dot_loc16 +1)\n        val dot_loc18\
    \ = file_name.indexOf('.', dot_loc17 +1)\n        val dot_loc19 = file_name.indexOf('.',\
    \ dot_loc18 +1)\n        val dot_loc20 = file_name.indexOf('.', dot_loc19 +1)\n\
    \        val dot_loc21 = file_name.indexOf('.', dot_loc20 +1)\n        val dot_loc22\
    \ = file_name.indexOf('.', dot_loc21 +1)\n        val dot_loc23 = file_name.indexOf('.',\
    \ dot_loc22 +1)\n        val dot_loc24 = file_name.indexOf('.', dot_loc23 +1)\n\
    \        val dot_loc25 = file_name.indexOf('.', dot_loc24 +1)\n        val dot_loc26\
    \ = file_name.indexOf('.', dot_loc25 +1)\n        val dot_loc27 = file_name.indexOf('.',\
    \ dot_loc26 +1)\n        val dot_loc28 = file_name.indexOf('.', dot_loc27 +1)\n\
    \        val dot_loc29 = file_name.indexOf('.', dot_loc28 +1)\n        val dot_loc30\
    \ = file_name.indexOf('.', dot_loc29 +1)\n        val dot_loc31 = file_name.indexOf('.',\
    \ dot_loc30 +1)\n        val dot_loc32 = file_name.", "        if (file_name.length()\
    \ > 3 || file_name.substring(0,1).isEmpty){\n            file_name = \"No\"\n\
    \        }\n        else if(file_name.substring(0,1) != 'a' || file_name.substring(0,1)\
    \ != 'b' \n                || file_name.substring(0,1) != 'c' || file_name.substring(0,1)\
    \ != 'd' \n                || file_name.substring(0,1) != 'e' || file_name.substring(0,1)\
    \ != 'f'\n                || file_name.substring(0,1) != 'g' || file_name.substring(0,1)\
    \ != 'h' \n                || file_name.substring(0,1) != 'i' || file_name.substring(0,1)\
    \ != 'j' \n                || file_name.substring(0,1) != 'k' || file_name.substring(0,1)\
    \ != 'l' \n                || file_name.substring(0,1) != 'm' || file_name.substring(0,1)\
    \ != 'n'\n                || file_name.substring(0,1) != 'o' || file_name.substring(0,1)\
    \ != 'p' \n                || file_name.substring(0,1) != 'q' || file_name.substring(0,1)\
    \ != 'r' \n                || file_name.substring(0,1) != 's' || file_name.substring(0,1)\
    \ != 't'\n                || file_name.substring(0,1) != 'u' || file_name.substring(0,1)\
    \ != 'v' \n                || file_name.substring(0,1) != 'w' || file_name.substring(0,1)\
    \ != 'x' \n                || file_name.substring(0,1) != 'y' || file_name.substring(0,1)\
    \ != 'z'){\n            file_name = \"No\"\n        }\n        else if (!file_name.substring(1,file_name.length).contains(\"\
    .\")){\n            file_name = \"No\"\n        }\n        else{\n           \
    \ file_name = \"Yes\"\n        }", "        // Implement your solution here\n\
    \        val pattern = \"\"\"^[0-9]{3,}\\.[a-z]{1,3}\"\"\".r\n        if(file_name\
    \ == null || file_name.length < 1 || pattern.findFirstIn(file_name).getOrElse(\"\
    \") != \"\")\n            \"No\"\n        else\n            \"Yes\"", "      \
    \  var result = new Array[String](2)\n        var found = 0\n        var error\
    \ = 0\n        var dot = 0\n        val file_name = file_name.toLowerCase()\n\
    \        val file_count = file_name.length\n        for (i<-0 until file_count){\n\
    \            if(file_name(i) == '_'){\n                error += 1\n          \
    \      result += (\"_\")\n            }\n            if (file_name(i) > '9' ||\
    \ file_name(i) < '0'){\n                error += 1\n                result +=\
    \ (\"_\")\n            }\n            if (file_name(i) == '.' && found == 0 &&\
    \ dot != 0){\n                error += 1\n                result += (\"_\")\n\
    \            }\n            if (file_name(i) == '_'){\n                found +=\
    \ 1\n            }\n            if (file_name(i) == '.' && found == 0){\n    \
    \            dot += 1\n            }\n        }\n        if(file_count == error){\n\
    \            result(0) = \"No\"\n        }else{\n            if(file_count - error\
    \ == 0){\n                result(0) = \"Yes\"\n            }else{\n          \
    \      result(0) = \"No\"\n            }\n        }\n        result(1) = error\n\
    \        return result(0)", "        // Your code here\n        val parts = file_name.split(\"\
    \\\\.\") // splits file_name at \".\" and returns a List\n        val file_name\
    \ = parts(0) // extracts file_name from List\n        val file_name = file_name.substring(0,1)\
    \ // extracts first letter from file_name\n        val file_name = file_name.substring(0,1)\
    \ // extracts first letter from file_name\n        val check = true\n        for\
    \ (c <- file_name.toCharArray) {\n            if (c.toInt < '0' || c.toInt > '9')\
    \ check = false\n            else if (\"a\"!=\"z\"!=\"A\"!=\"Z\") { check = false;\
    \ break } // if c is not a letter\n        }\n        val check = true\n     \
    \   val parts = file_name.split(\"\\\\.\") // splits file_name at \".\" and returns\
    \ a List\n        val file_name = parts(0) // extracts file_name from List\n \
    \       val file_name = file_name.substring(0,1) // extracts first letter from\
    \ file_name\n        val file_name = file_name.substring(0,1) // extracts first\
    \ letter from file_name\n        if (check) \n            if (file_name != \"\
    exe\" && file_name != \"dll\" && file_name != \"txt\") \n                \"No\"\
    \n            else \"Yes\"\n        else \n            \"No\"", "        val splitFileName\
    \ = file_name.split(\"\\\\.\") // Split by \".\"\n        val fileName = splitFileName(0).toLowerCase\
    \ // First string in split by \".\"\n        val dotIndex = fileName.indexOf('.')\
    \ // Find index of \".\"\n        val fileNameWithoutDot = fileName.substring(0,\
    \ dotIndex).toLowerCase // First string before \".\"\n        val fileNameNoDigits\
    \ = fileNameWithoutDot.replaceAll(\"[0-9]\", \"\") // Delete all \"0\" and \"\
    9\"\n        val fileNameLettersOnly = fileNameNoDigits.replaceAll(\"[^a-z]\"\
    , \"\") // Delete all chars other than \"a\" and \"z\"\n        val fileNameContainsDot\
    \ = fileNameLettersOnly.contains('.') // Check if fileName contains \".\"\n  \
    \      val fileNameContainsFile = fileName.contains(\".txt\") || fileName.contains(\"\
    .exe\") || fileName.contains(\".dll\")\n        if (fileNameNoDigits.length <\
    \ 1 || fileNameNoDigits.length > 3 || fileNameContainsDot || fileNameContainsFile)\
    \ {\n            return \"No\"\n        }\n        else {\n            return\
    \ \"Yes\"\n        }"]
stop_tokens:
- "\n    }\n"
