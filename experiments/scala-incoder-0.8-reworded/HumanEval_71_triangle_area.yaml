name: HumanEval_71_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return the area of\n\
  \    // the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    // than the third side.\n    //\
  \ Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>>\
  \ triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b\
  \ : Long, c : Long) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
  \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
  \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
  \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
  \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
  \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
  \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
completions: ["        // Triangle is valid if a+b > c and a+c > b+c\n        if((a+b)\
    \ > c && (a+c) > b && b+c > a){\n            (a+b+c) / 2.0\n        } else {\n\
    \            -1.0f\n        }", "        // Write your code here\n        return\
    \ -1f", "        if ((a + b + c) > ((a * b) + (b * c) + (c * a)))\n          \
    \  return a / b * c / a\n        else\n            return -1.0", "        val\
    \ triangleArea = if (a + b > c) (a * b / c) else -1\n        Math.round(triangleArea\
    \ * 100f) / 100f", "        var area : Float = -1\n\n        if (a + b > c &&\
    \ a + c > b && b + c > a) {\n            area = ((a + b) * (b + c)) / (2 * (a\
    \ + b + c))\n            area = Math.round(100 * area) / 100\n        }\n    \
    \    area", "        if( a + b > c )\n            return -1\n        val area\
    \ = math.sqrt( a*a + b*b )\n        area", "        // The sum of two sides is\
    \ greater than the third side\n        if (a + b > c) -1f else a.toFloat/b.toFloat\
    \ * c.toFloat", "        if (a + b > c) {\n            if (a + c > b) {\n    \
    \            if (b + c > a) {\n                    val area = a / (a + b + c)\n\
    \                    area + if (area == 0) -1 else area\n                } else\
    \ {\n                    -1\n                }\n            } else {\n       \
    \         -1\n            }\n        } else {\n            -1\n        }", " \
    \       val sum = (a + b + c).toFloat\n        var area : Float = -1\n       \
    \ if (a > b) \n            if (b > c) \n                area = sum\n         \
    \   else\n                area = -b\n        else\n            if (c > b) \n \
    \               area = sum\n            else\n                area = a\n     \
    \   (area.toDouble * Math.sqrt(area/2)).toFloat", "        val area = (c*(b-a)+a*c-b*b)/2d\n\
    \        if ( (a-b) >= (c - b)) {\n            area\n        } else {\n      \
    \      -1l\n        }", "        // TODO: Write your code here\n        var x1,y1,x2,y2,x3,y3\n\
    \        if ((a+b)>c) x1=x2,x2=a,x3=b,x1=y2,y2=b,y3=c,y1=x3,x3=y1\n        else\
    \ x1=a,x2=b,x3=c,x1=y1,y2=c,y3=x2,y1=x3\n        return (x1+y1+x2+y2+x3+y3)/4.0f",
  "        if((b - c).gt(a)){\n            return -1f\n        }\n        val area\
    \ = (b*b) - (4*a*c)\n        if(area < 0){\n            return -1f\n        }\n\
    \        val sqA = a*a\n        val sqB = b * b\n        val sqC = c * c\n   \
    \     val sides = Array(sqA + sqB, sqB, sqC - sqA)\n        val a = sides.product\n\
    \        if(a < 0){\n            return -1f\n        }\n        return a", " \
    \       //Write your code here\n        val area = (a*a + b*b + c*c - a*a) / (2l*2l)\n\
    \        return Math.round(area * 1000) / 1000", "        if (a + b > c) {\n \
    \           (c-a)/(b-c)\n        } else {\n            -1\n        }", "     \
    \   val p = a*b*c\n        val s = (a+b+c) * (a+b+c-p)\n        if (s > (a + b\
    \ + c - p)) {\n            return s\"${s/1000.0}f\".toFloat\n        } else {\n\
    \            return -1.0f\n        }", "        var area = 0\n        if (a +\
    \ b > c) {\n            area += (c * (b - c))\n        }\n        if (a + c >\
    \ b) {\n            area += (b * (a - b))\n        }\n        if ((b + c) > a)\
    \ {\n            area += (a * (c - b))\n        }\n        return area / 2", " \
    \       val s = (a + b + c) / 2\n        if(s > a) { \n            val a = s +\
    \ (b - a) / 2\n            val b = s + (c - b) / 2\n            val c = s + (d\
    \ - c) / 2\n            val d = s + (e - d) / 2\n            val e = s + (f -\
    \ e) / 2\n            val f = s + (g - f) / 2\n            val g = s + (h - g)\
    \ / 2\n            val h = s + (i - h) / 2\n            val i = s + (j - i) /\
    \ 2\n            val j = s + (k - j) / 2\n            val k = s + (l - k) / 2\n\
    \            val l = s + (m - l) / 2\n            val m = s + (n - m) / 2\n  \
    \          val n = s + (o - n) / 2\n            val o = s + (p - o) / 2\n    \
    \        val p = s + (q - p) / 2\n            val q = s + (r - q) / 2\n      \
    \      val r = s + (s - r) / 2\n            (a + b + c + d + e + f + g + h + i\
    \ + j + k + l + m + n + o + p + q + r) / 9.0\n        } else {\n            -1\n\
    \        }", "        if((a + b + c) == 0) return 0\n        if(a > b) if((b -\
    \ c) > 0) return (a + b) * c else -1\n        if(a > c) if((c - b) > 0) return\
    \ (a + c) * b else -1\n        if(b > c) if((b - a) > 0) return (b + c) * a else\
    \ -1\n        return -1", "        var sum = a+b+c\n        val valid = sum >\
    \ c\n        if(valid){\n            val a1 = sum-(a+b+c)\n            val b1\
    \ = b-(a+b+c)\n            val c1 = c-(a+b+c)\n            val s = (sum - a1*a1\
    \ - b1*b1 - c1*c1) / (2.0*a*b*c)\n            if(s==0) return 0.0f\n         \
    \   return Math.sqrt(s).toFloat\n        }else return -1.0f", "        if( a+b\
    \ > c && a+c > b && a+b+c > a )\n            if(b+c > a && b+a > c && b+c+a >\
    \ b)\n                (a+b+c)/2.0\n            else\n                -1.0\n  \
    \      else\n            -1.0", "        if(a + b > c) {\n            return 0.0f\n\
    \        }\n        if(a + c > b) {\n            return 0.0f\n        }\n    \
    \    if(b + c > a) {\n            return 0.0f\n        }\n        val area = (a\
    \ + b + c) / 2.0\n        if (area < 0.0f || area > 360.0f) {\n            return\
    \ -1.0f\n        }\n        return area.toFloat / 180.0f * Math.PI", "       \
    \ // Use a HashSet to keep track of seen sides\n        val sides = mutable.HashSet[Int]()\n\
    \        \n        // Test for valid sides\n        if((a+b) > c) {\n        \
    \    return -1.0\n        }\n        \n        // Store the sides encountered\
    \ and remove any duplicates\n        sides += a\n        sides += b\n        sides\
    \ += c\n        sides.toList\n        .sortWith((x, y) => x-y)\n        .distinct.map(x\
    \ => math.pow(2,x)).sum.toFloat", "        if(a+b+c <= (a + b + c)/2)\n      \
    \      ((a + b + c) * 0.09).round\n        else -1l", "        val area = math.sqrt((a*a\
    \ + b*b + c*c)) * 2f\n        return area.toFloat", "        val a = a / 1000\n\
    \        val b = b / 1000\n        val c = c / 1000\n        var totalArea = 0.0f\n\
    \n        val biggerArea = BigDecimal.ONE.divide(BigDecimal.TEN)\n        val\
    \ biggerArea = biggerArea.setScale(2, BigDecimal.RoundingMode.HALF_UP)\n     \
    \   val biggerArea = biggerArea.divide(biggerArea)\n\n        val biggerArea2\
    \ = BigDecimal.ONE.divide(BigDecimal.TEN)\n        val biggerArea2 = biggerArea2.setScale(2,\
    \ BigDecimal.RoundingMode.HALF_UP)\n        val biggerArea2 = biggerArea2.divide(biggerArea2)\n\
    \n        val biggerArea3 = BigDecimal.ONE.divide(BigDecimal.TEN)\n        val\
    \ biggerArea3 = biggerArea3.setScale(2, BigDecimal.RoundingMode.HALF_UP)\n   \
    \     val biggerArea3 = biggerArea3.divide(biggerArea3)\n\n        val area1 =\
    \ a.multiply(b)\n        val area2 = b.multiply(c)\n        val area3 = c.multiply(a)\n\
    \        val area4 = area1.multiply(area2)\n        val area5 = area2.multiply(area3)\n\
    \        val area6 = area3.multiply(area4)\n        val area7 = area1.multiply(area5)\n\
    \        val area8 = area5.multiply(area6)\n        val area9 = area6.multiply(area7)\n\
    \        val area10 = area7.multiply(area8)\n        val area11 = area8.multiply(area9)\n\
    \        val area12 = area9.multiply(area10)\n        val area13 = area10.multiply(area11)\n\
    \        val area14 = area11.multiply(area12)\n        val area15 = area12.multiply(area13)\n\
    \        val area16 = area13.multiply(area14)\n        val area17 = area14.multiply(area15)\n\
    \        val area18 = area15.multiply(area16)\n        val area19 = area16.multiply(area17)\n\
    \        val area20 = area17.multiply(area18)\n        val area21 = area18.multiply(area19)\n\
    \        val area22 = area19.multiply(area20)\n        val area23 = area20.multiply(area21)\n\
    \        val area24 = area21.multiply(area22)\n        val area25 = area22.multiply(area23)\n\
    \        val area26 = area23.multiply(area24)\n        val area27 = area24.multiply(area25)\n\
    \        val area28 = area25.multiply(area26)\n        val area29 = area26.multiply(",
  "        var area : Float = 0.0f\n        // Check if sum of any two sides is greater\
    \ than third side\n        if(a+b > c) {\n            // Sum two sides\n     \
    \       val mid = (a+b)/2\n            val left = a - mid\n            val right\
    \ = b - mid\n            \n            // Check if sum of two sides equals to\
    \ third side\n            if(left*left + right*right == a*c) {\n             \
    \   // If so, get the area of triangle formed by two\n                // sides\n\
    \                area = 0.5f * mid*(left + right) / 2\n            }\n       \
    \ }\n        area", "        if ((a + b + c) == 0)\n            return 0.0f\n\n\
    \        val s = a + b + c\n        val sSqr = s * s\n        val e1 = (a + b)\
    \ / 2.0f\n        val e2 = (a + c) / 2.0f\n        val e3 = (b + c) / 2.0f\n\n\
    \        if (s > 0 && e1 >= e2 && e1 >= e3)\n            return 1.0f * sqrtf(sqrtf(sSqr))\n\
    \        else if (s > 0 && e2 >= e3 && e2 >= e1)\n            return 2.0f * sqrtf(sqrtf(sSqr))\n\
    \        else\n            return -1.0f", "        val l1 = Math.abs(a) + Math.abs(b)\n\
    \        val l2 = Math.abs(a) + Math.abs(c)\n        val l3 = Math.abs(b) + Math.abs(c)\n\
    \        if(l1 > l2 && l1 > l3){\n            (a * a)/(l1 + l2 + l3)\n       \
    \ }\n        else if(l2 > l3){\n            (b * b)/(l1 + l2 + l3)\n        }\n\
    \        else{\n            (Math.sqrt(Math.pow(Math.abs(a) + Math.abs(b), 2)\
    \ + Math.pow(Math.abs(a) + Math.abs(c), 2)))\n        }", "        if(a+b > c)\
    \ {\n            if(b+c > a) {\n                if(a+c > b) {\n              \
    \      if(a+b+c > 3) {\n                        math.sqrt(a*a + b*b + c*c).toFloat\n\
    \                    } else {\n                        -1\n                  \
    \  }\n                } else {\n                    -1\n                }\n  \
    \          } else {\n                -1\n            }\n        } else {\n   \
    \         -1\n        }", "        // Check that the triangle is valid \n    \
    \    if (c > a + b) \n            return -1l\n        else if (b > a + c) \n \
    \           return -1l\n        else if (c > a + b) \n            return -1l\n\
    \        else {\n            // Calculate area of the triangle. Area = Sqrt( (A2\
    \ + B2 - C2) / 2A )\n            // Calculate area of the triangle using square-root\
    \ of Pythagorean theorem. \n            val area = (math.sqrt(a*a + b*b) - a*b).toFloat\n\
    \            // Round the area to the nearest half integer \n            val roundedArea\
    \ = area.round / 2\n            // Return rounded area \n            if (roundedArea\
    \ == area) roundedArea else -1f\n        }", "        val a = math.abs(a)\n  \
    \      val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a+b+c\n\
    \        if (sum <= a)\n            math.round(a*b/sum)\n        else\n      \
    \      -1l", "        if((a + b + c) >= 1){\n            return 0.0f\n       \
    \ }\n        if(a == 0 || b == 0 || c == 0){\n            return -1l\n       \
    \ }\n        val l = (a + b + c) / 2\n        val area1 = sqrt(a * a + b * b)\n\
    \        val area2 = sqrt(c * c + l * l)\n        val area = area1 * area2\n \
    \       if(area >= 1l){\n            return area.toFloat\n        }else{\n   \
    \         return -1l\n        }", "        val a = (a*b)/c\n        val b = (b*c)/a\n\
    \        val c = (c*a)/b\n        if ((a + b > c) || (a + c > b) || (b + c > a))\
    \ {\n            return -1\n        }\n        return (math.round(a*1000000d)\
    \ / 1000000.0)", "        val a = a.toFloat / 2\n        val b = b.toFloat / 2\n\
    \        val c = c.toFloat / 2\n        \n        if (a + b <= c) {\n        \
    \    if (b + c <= a) {\n                return (a + b + c) / 2\n            }\
    \ else {\n                return (a + b + c) / 2\n            }\n        } else\
    \ {\n            if (c + a <= b) {\n                return (a + b + c) / 2\n \
    \           } else {\n                return (a + b + c) / 2\n            }\n\
    \        }", "      val minArea = Math.min(Math.min(a, b), c)\n      val maxArea\
    \ = Math.max(Math.max(a, b), c)\n      val areaOfTriangle = minArea * maxArea\n\
    \      Math.round(areaOfTriangle * 100.0) / 100.0", "        val sumAB = a + b\n\
    \        val sumAC = a + c\n        val sumBA = b + a\n        val sumBC = b +\
    \ c\n        val sumCA = c + a\n        val sumBC = c + b\n        if (sumAB <=\
    \ sumAC && sumAB <= sumBC && sumAB <= sumBA && sumAB <= sumCA && sumAB <= sumBC){\n\
    \            val area = sumAB * ((sumAC - sumBA) * ((sumBC - sumCA) * ((sumAB\
    \ - sumBC) * ((sumAB - sumCA) * 0.5f))))\n            area / 2f \n        }else{\n\
    \            -1f\n        }", "        var area : Float = Float.PositiveInfinity\n\
    \        area += math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n        area -= math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(a, 2))\n        area /= 2\n        return area", "        if(a+b\
    \ > c)\n            (a+b)/2\n        else if(b+c > a)\n            (b+c)/2\n \
    \       else\n            0", '        if (a > b + c) 1f else 0f', "        val\
    \ aSq = a * a\n        val bSq = b * b\n        val cSq = c * c\n        val aSquared\
    \ = aSq + bSq + cSq\n        val aSquare = aSq - aSquared\n        val bSquare\
    \ = bSq - aSquared\n        val cSquare = cSq - aSquared\n        (aSquare + bSquare\
    \ + cSquare <= aSquared) ? \n        (aSquare / 2l) + (bSquare / 2l) + (cSquare\
    \ / 2l) \n        : -1l", "        val ab = a + b\n        val ac = a + c\n  \
    \      val bc = b + c\n        val isTriangle = (ab >= ac) && (bc >= ab)\n   \
    \     val area = (ab * bc) / 2l\n        if(isTriangle) {\n            area\n\
    \        } else {\n            -1\n        }", "        val first = a\n      \
    \  val second = b\n        val third = c\n        if ((first > second) && (first\
    \ > third) && (second > third)) (first*second*third).toFloat / \n            ((first*second)*(third)).toFloat\n\
    \        else -1.0", "        if((a + b + c) == 0)\n            return -1\n\n\
    \        if((a + b + c) > 0)\n            return ((a + b + c)/2)\n\n        var\
    \ sum : Long = 0\n        var sum2 = 0\n        var sum3 = 0\n\n        for(i\
    \ <- 0 to a)\n            sum += i\n\n        for(i <- a to b + 1)\n         \
    \   sum2 += i\n\n        for(i <- b to c + 1)\n            sum3 += i\n\n     \
    \   if(sum > sum2)\n            return ((sum*sum)/2)\n\n        return -1", " \
    \       val a1 = b - a\n        val c1 = c - a\n        val s = (a1 + c1) * (a1\
    \ + c1)\n        if(s <= 0) {\n            return -1\n        }\n        val t\
    \ = Math.sqrt(s / 2)\n        val u = (a + b + c) / 2\n        val v = (b + c\
    \ + a) / 2\n        val w = Math.sqrt((b + c) * (c + a))\n        if(w == 0) {\n\
    \            return -1\n        }\n        val area = t * (u - v) * (u - v) /\
    \ w\n        return Math.round(area.toFloat * 100) / 100", "        if(a.lt(0)\
    \ || b.lt(0) || c.lt(0)) -1f\n        else ((a.toFloat*b.toFloat)/c.toFloat).toInt",
  "        var sum = 0L\n        var isvalid = false\n        while (!isvalid){\n\
    \            if (a > b + c) isvalid = false\n            if (b > a + c) isvalid\
    \ = false\n            if (c > a + b) isvalid = false\n            sum = sum +\
    \ a\n            sum = sum + b\n            sum = sum + c\n            a = sum\n\
    \            b = sum\n            c = sum\n            if (a > c + b) isvalid\
    \ = false\n            if (b > a + c) isvalid = false\n            if (c > a +\
    \ b) isvalid = false\n        }\n        Math.sqrt(sum / 2)", "        val l1\
    \ = Math.sqrt(a * b) // length\n        val l2 = Math.sqrt(a * c)\n        val\
    \ l3 = Math.sqrt(b * c)\n        if(l1 != 0f && l2 != 0f && l3 != 0f){\n     \
    \       if(a + b > c){\n                val p1 = new Point(b, a / b)\n       \
    \         val p2 = new Point(c, a / c)\n                val p3 = new Point(c,\
    \ b / c)\n                val p4 = new Point(b, b / b)\n                val p5\
    \ = new Point(a, a / a)\n                val p6 = new Point(a, b / b)\n      \
    \          val p7 = new Point(a, a / b)\n                val p8 = new Point(a,\
    \ b / c)\n                val p9 = new Point(a, b / a)\n                val p10\
    \ = new Point(b, a / c)\n                val p11 = new Point(b, a / b)\n     \
    \           val p12 = new Point(b, a / c)\n                val p13 = new Point(c,\
    \ a / a)\n                val p14 = new Point(c, a / b)\n                val p15\
    \ = new Point(c, b / a)\n                val p16 = new Point(c, b / c)\n     \
    \           val p17 = new Point(b, a / a)\n                val p18 = new Point(b,\
    \ a / c)\n                val p19 = new Point(c, b / a)\n                val p20\
    \ = new Point(c, b / c)\n                val p21 = new Point(c, a / a)\n     \
    \           val p22 = new Point(c, a / b)\n                val p23 = new Point(c,\
    \ b / a)\n                val p24 = new Point(c, b / c)\n                val p25\
    \ = new Point(b, a / a)\n                val p26 = new Point(b, a / c)\n     \
    \           val p27 = new Point(b, a / b)\n                val p28 = new Point(c,\
    \ b / a)\n                val p29 = new Point(c, b / c)\n                val p30\
    \ = new Point(c, a / a)\n                val p31 = new Point(c, a / b)\n     \
    \           val p32 = new Point(c, b / a)\n                val p33 = new Point(c,\
    \ b / c)\n                val p34 = new Point(a, a / a)\n                val p35\
    \ = new Point(a, a / b)\n                val p36 = new Point(a, a / c)\n     \
    \           val p37 = new Point(b, a / a)\n                val p38 = new Point(b,\
    \ a / c)\n                val p39 = new Point(b, a / b)\n                val p40\
    \ = new Point(c, a / a)\n                val p41 = new Point(c, a / b)\n     \
    \           val ", "        if (a+b>c || c+b>a || a+c>b){\n            return\
    \ -1.0\n        }\n        val s = (a + b + c) * 0.5\n        val area = (s *\
    \ (s-a) * (s-b) * (s-c)) / (s * 6)\n        area", "        if(isTriangle(a, b,\
    \ c)) {\n            val sab = scala.math.sqrt((a * a) + (b * b))\n          \
    \  val scc = scala.math.sqrt(c * c)\n            val area = sab * scc\n      \
    \      area.toFloat * 100f\n        } else {\n            -1\n        }", "  \
    \      if((a + b > c) && (a + c > b) && (b + c > a)) {\n            a / (a + b\
    \ + c)\n        } else {\n            -1\n        }", "        if (a+b > c) {\n\
    \            (a + b - c) / 2f\n        } else {\n            -1f\n        }",
  "        val area = (a + b + c) / 2.0\n        if ((a+b > c) && a+c > b) area else\
    \ -1", "        var area = 0.0f\n        if (a >= b && b >= c) {\n           \
    \ area = (a+b+c) / 2.0\n        } else\n        if (b >= a && a >= c) {\n    \
    \        area = (b+c+a) / 2.0\n        } else\n        if (c >= a && a >= b) {\n\
    \            area = (c+a+b) / 2.0\n        }\n        area = area * 100.0\n  \
    \      area = area.toFloat\n        return area", "        var area : Float =\
    \ 0\n        if (a + b > c) {\n            area = Math.abs(Math.sqrt((Math.pow(a,\
    \ 2) + (Math.pow(b, 2))))) \n        }\n        else if (a + c > b) {\n      \
    \      area = Math.abs(Math.sqrt((Math.pow(a, 2) + (Math.pow(c, 2))))) \n    \
    \    }\n        else if (b + c > a) {\n            area = Math.abs(Math.sqrt((Math.pow(b,\
    \ 2) + (Math.pow(c, 2))))) \n        }\n        else \n            area = -1\n\
    \        area match {\n            case x if x == Math.pow(10, 2) => \n      \
    \          area match {\n                    case 0 | 1 => area\n            \
    \        case -1 => -1\n                    case x => x\n                }\n \
    \           case x if x == -Math.pow(10, 2) => \n                area match {\n\
    \                    case 0 | 1 => -1\n                    case -1 => -1\n   \
    \                 case x => x\n                }\n            case x => x\n  \
    \      }", "        // If the sum of any two sides equals the third side, return\
    \ the sum\n        if (a + b > c || a + c > b || b + c > a) return 0\n       \
    \ // Two triangles cannot form a triangle\n        if (a + b > c) return -1\n\
    \        // Return area of a triangle\n        (a + b + c) / 2", "        var\
    \ sum1 = a + b\n        var sum2 = a + c\n        var sum3 = c + b\n        if\
    \ (sum1 == sum2 && sum1 == sum3) {\n            return a / (a + c + b)\n     \
    \   }\n        else if (sum1 == sum2 || sum1 == sum3 || sum1 == a + c || sum1\
    \ == a + b) {\n            return -1l\n        }\n        else {\n           \
    \ return -1l\n        }", "        if (a + b > c && b + c > a && c + a > b){\n\
    \            1.0 * math.sqrt((b * b) - (4 * a * c)).toFloat\n        } else {\n\
    \            -1.0\n        }", "        val a1 = a * a \n        val b1 = b *\
    \ b\n        val c1 = c * c\n        val s1 = a1 + b1 + c1\n        val a2 = a\
    \ * a \n        val b2 = b * b\n        val c2 = c * c\n        val s2 = a2 +\
    \ b2 + c2\n        val a3 = a * a\n        val b3 = b * b\n        val c3 = c\
    \ * c\n        val s3 = a3 + b3 + c3\n        val validTriangle = (s1 >= s3) &&\
    \ (s2 >= s3)\n        val totalArea = if (validTriangle) {\n            (s1 +\
    \ s2 + s3) / 2\n        }\n        else {\n            -1\n        }\n       \
    \ totalArea", "        if (a + b > c) {\n            if (a + c > b) {\n      \
    \          if (b + c > a) \n                    (a * b) / c \n               \
    \ else\n                    -1\n            } else\n                -1\n     \
    \   } else\n            -1", "        if (a + b > c) {\n            Math.sqrt(\
    \ Math.pow((a + b), 2) / (Math.pow(c, 2) + Math.pow((a + b), 2)))\n        } else\
    \ {\n            -1\n        }", "        def isTriangle(a : Long, b : Long, c\
    \ : Long) : Boolean = {\n            val sides = (a + b + c).toDouble\n      \
    \      if (sides > 0) {\n                var area : Double = 0\n             \
    \   var side : Double = 0\n                var i : Int = 0\n                var\
    \ j : Int = 0\n                while (i < a || j < b || j < a) {\n           \
    \         if (sides > 0) {\n                        if (i >= a && j >= b && j\
    \ < c) {\n                            side = (a + b + c) / 2.0 - i\n         \
    \               }\n                        else if (i >= a && j >= c) {\n    \
    \                        side = i - j\n                        }\n           \
    \             else if (i >= b && j < c) {\n                            side =\
    \ j - i\n                        }\n                        else if (i < a &&\
    \ j >= c) {\n                            side = j - a\n                      \
    \  }\n                        else {\n                            side = i - j\n\
    \                        }\n                        area += side * side\n    \
    \                    i += 1\n                        j += 1\n                \
    \    }\n                }\n                if (i == a && j == b) {\n         \
    \           area > 0\n                }\n                else {\n            \
    \        area > 0\n                }\n            }\n            else {\n    \
    \            true\n            }\n        }\n        if (isTriangle(a, b, c))\
    \ {\n            Math.sqrt(a * a * c / b * b + b * b * c / a * a)\n        }\n\
    \        else {\n            -1l\n        }", "        if( a > b && a > c )\n\
    \        {\n            if( b > c )\n            {\n                val sum =\
    \ a + b\n                if( sum > c )\n                    sum - c\n        \
    \        else\n                    -1.0f\n            }\n            else\n  \
    \              -1.0f\n        }\n        else\n            -1.0f", "      if (a\
    \ < 0 || b < 0 || c < 0) return -1\n      val a = abs(a); val b = abs(b); val\
    \ c = abs(c)\n      if (a + b > c) a + b\n      else a < b + c ? a : b + c", " \
    \       var valid : Boolean = true\n        var area : Float = 0\n        val\
    \ a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val abc = a + b + c\n        if((abc > a) && (abc > b)) {\n         \
    \   if((abc > c)) {\n                area = abc*(a+b+c)/2\n            } else\
    \ {\n                area = abc/2\n            }\n        } else if ((abc > b)\
    \ && (abc > c)) {\n            area = abc/2\n        } else if ((abc > c)) {\n\
    \            area = abc/2\n        }\n        valid = (area < 0f)\n        if(area\
    \ < 0) {\n            area = -1l\n        }\n        area", "        val validTriangle\
    \ = if (a + b > c) c else b\n        (validTriangle - a).abs * (validTriangle\
    \ - b).abs * (validTriangle - c).abs", "        if (a <= 0 || b <= 0 || c <= 0)\n\
    \            return -1.0\n        val sum = a + b + c\n        if (sum < a ||\
    \ sum < b || sum < c)\n            return -1.0\n        val area = (a + b) * 0.5\
    \ * (c + a) * (c + b) * (b + c) * 0.5\n        area.get", "        val l: Long\
    \ = if (a + b > c) (a+b) else (c+b)\n        val area: Float = (l * a * b) / (a\
    \ * b)\n        if (a >= b + c) area else -1", "        val n1 = a - b\n     \
    \   val n2 = c - b\n        val n3 = a -c\n        val sum = n1 + n2 + n3\n  \
    \      val area: Float = if (sum > 0) sum / (2l) else -1\n        area / 2.0",
  "        if(a < 0 || b < 0 || c < 0)\n            -1\n        else if(a + b > c)\n\
    \            -1\n        else {\n            var sum = a + b\n            sum\
    \ += c\n            var area = sum * (b + c) / 2\n            return Math.round(area\
    \ / 100d) / 2\n        }", "        val ab = a.toFloat\n        val bc = b.toFloat\n\
    \        val cd = c.toFloat\n        if ((ab + bc) > cd)\n            (ab + bc)\
    \ * 0.5f\n        else\n            -1l", "        def sum(x:Long, y: Long, z:\
    \ Long) : Long = x + y + z\n        val abc = sum(a, b, c) \n        if (abc <\
    \ 0)\n            -1\n        else\n            (c / abc)", "        def triangleAreaIter(a:\
    \ Long, b: Long, c : Long, result : Float) : Float = {\n            val mid =\
    \ (a + b + c)/2\n            if(b >= c && c >= a) {\n                return mid\n\
    \            }\n            else if(a >= c && b >= c) {\n                return\
    \ triangleAreaIter(b,c,mid,result) \n            }\n            else {\n     \
    \           return triangleAreaIter(a,b,mid,result)\n            }\n        }\n\
    \        triangleAreaIter(a,b,c,0)", "        if(a.sum > b.sum && b.sum > c.sum)\
    \ \n            ((b.sum - a.sum) * (c.sum - b.sum)) / (b.sum - a.sum)\n      \
    \  else \n            if(a.sum > c.sum && c.sum > b.sum) \n                ((a.sum\
    \ - b.sum) * (c.sum - b.sum)) / (a.sum - b.sum)\n            else \n         \
    \       if(a.sum > b.sum && b.sum > c.sum) \n                    ((a.sum - c.sum)\
    \ * (b.sum - c.sum)) / (a.sum - b.sum)\n                else\n               \
    \     -1", "        var lsum : Long = a + b + c\n        if (lsum < 0l) {\n  \
    \          lsum = -lsum\n        }\n        var hsum : Long = a + b + c\n    \
    \    if (hsum < 0l) {\n            hsum = -lhsum\n        }\n        var s = a\
    \ * hsum / lsum\n        return Math.round(s * 100) / 100", "      val valid =\
    \ (a+b > c) && (a+c > b) && (b+c > a)\n      if (valid) \n        (a+b+c) / 2f\n\
    \      else -1", "        var acumulator = 0.0f\n        var bcumulator = 0.0f\n\
    \        var ccumulator = 0.0f\n        for(a <- 0 to a){\n            for(i <-\
    \ 0 to a){\n                for(j <- 0 to a){\n                    acumulator\
    \ += (a+i+j)*(i+j+a)*(i+j+b)\n                }\n            }\n        }\n  \
    \      for(i <- 0 to a){\n            for(j <- 0 to b){\n                bcumulator\
    \ += (i+j)*(i+j+b)*(i+j+c)\n            }\n        }\n        for(j <- 0 to b){\n\
    \            for(i <- 0 to c){\n                ccumulator += (j+i)*(j+i+c)(j+i+a)\n\
    \            }\n        }\n        acumulator - (bcumulator - ccumulator)", " \
    \       // Check sum of all sides is greater than 3rd side\n        if ((a + b\
    \ > c) && (a + c > b) && (b + c > a)) {\n            // Sum all sides of triangle\
    \ and divide by 3\n            return ((a + b + c) / 3f.toFloat)\n        }\n\
    \        // Otherwise return -1\n        return -1f", "        val ab = a + b\n\
    \        val bc = b + c\n        val bca = b + c\n        val ac = a\n       \
    \ if ((ab > bc) && (ab > bca) && (bc > ac)) bc / ab\n        else -1", "     \
    \   val a = Math.abs(a)\n        val b = Math.abs(b)\n        val c = Math.abs(c)\n\
    \        val area = if(a+b+c > 0) (a * b * 0.5) else -1\n        area.toFloat",
  "        val area = (a*b+c*c)*(0.5f*((a + b) * (c - b) * (c - a)))\n        area.toFloat",
  "        val sum = a + b + c\n        if(sum > 0)\n            sum / (2 * a * b)\
    \ \n        else\n            -1l", "        var triArea = 0.0f\n        // Sum\
    \ two sides\n        val sideA = a + b\n        val sideB = a + c\n        val\
    \ sideC = c + b\n        val sumOfSides = sideA + sideB + sideC\n        // Check\
    \ if sum of two sides is greater than the third side\n        if (sumOfSides >\
    \ sideC) {\n            // If YES, calculate area of triangle (use formula for\
    \ hypotenuse)\n            // Note: Area is defined as the hypotenuse divided\
    \ by the length of each side.\n            val hypotenuse = sideB * sideB - sideA\
    \ * sideC\n            // Round triangle area to 2 decimal points\n          \
    \  triArea = ((hypotenuse * sideA) / sumOfSides).round\n        }\n        triArea",
  "        if (a + b > c) {\n            val x = (a+c)/2\n            val y = (b+c)/2\n\
    \            val z = (a+b)/2\n            (math.sqrt(Math.pow(x-y,2) + Math.pow(z-y,2))\
    \ - math.sqrt(Math.pow(x-z,2) + Math.pow(y-z,2)))/(2l).toFloat\n        }\n  \
    \      else -1", "        var sum : Long = 0\n        val min = Math.min(a, Math.min(b,\
    \ c))\n        val max = Math.max(a, Math.max(b, c))\n        for (i <- 0 until\
    \ min) {\n            sum += (Math.pow(max-i, 2)).toLong\n        }\n        sum.toFloat\
    \ / (Math.sqrt(Math.pow(max+a,2) + Math.pow(max+b,2) + Math.pow(max+c,2))).toFloat",
  "        val ab : Float = a/b\n        val bc : Float = b/c\n        val ac : Float\
    \ = a/c\n        if(ab > bc && ab > ac)\n            ab\n        else\n      \
    \      if(ac > bc)\n                ac\n            else\n                -1l",
  "        if (a + b > c) -1\n        else if (b + c > a) -1\n        else if (c +\
    \ a > b) -1\n        else ((a * b * c) / Math.sqrt((a * a) + (b * b) + (c * c))).toFloat",
  "        if(a + b > c) {\n            return -1.0\n        }\n        if(a + c >\
    \ b) {\n            return -1.0\n        }\n        if(b + c > a) {\n        \
    \    return -1.0\n        }\n        val area = (a + b) * (c + b) * (a + c) /\
    \ 2\n        return area.toFloat / 2.0", "        var area : Float = 0.0f\n  \
    \      val aValid = (a+b+c) > 3l\n        val bValid = (a+b+c) > 3l\n        val\
    \ cValid = (a+b+c) > 3l\n        if (aValid && bValid && cValid) \n          \
    \  area = (a + b + c).floor\n        else area = -1l\n        (area / 2l).toFloat",
  "        val sum = a + b + c\n        if (sum >= 6l) {\n            return (sum.toDouble\
    \ / 3l) * ((a * b + c) / 3l)\n        }\n        return -1f", "        // Check\
    \ if any two sides are equal\n        if ((a*a + b*b) == (c*c)) {\n          \
    \  // Return sum of two sides if they form a triangle\n            return (a+b+c)\
    \ / 2.0\n        } else {\n            // Return -1\n            return -1.0\n\
    \        }", "        if (a+b>c && b+c>a && a+c>b) return ((a + b + c)/2.0).toFloat\n\
    \        else return -1.0", "        // Initialize area variable to -1\n     \
    \   var area : Float = -1\n\n        // Initialize lengths to 0\n        var lengthA\
    \ : Float = 0\n        var lengthB : Float = 0\n        var lengthC : Float =\
    \ 0\n\n        // Initialize sum of sides to 0\n        var sumA : Float = 0\n\
    \        var sumB : Float = 0\n        var sumC : Float = 0\n\n        // Initialize\
    \ variable to keep track of which side is greater\n        var greaterSideA :\
    \ Int = 1\n        var greaterSideB : Int = 1\n        var greaterSideC : Int\
    \ = 1\n\n        // Set up counter for number of sides that are less than the\
    \ sum of\n        // the other two sides\n        var counterLessA : Int = 0\n\
    \        var counterLessB : Int = 0\n        var counterLessC : Int = 0\n\n  \
    \      // Set up counter for number of sides that are greater than the sum of\n\
    \        // the other two sides\n        var counterGreaterA : Int = 0\n     \
    \   var counterGreaterB : Int = 0\n        var counterGreaterC : Int = 0\n\n \
    \       // Set up counter for number of sides that are equal\n        var counterEqual\
    \ : Int = 0\n\n        // Set up counter for number of sides that are greater\
    \ than the sum of\n        // the other two sides\n        var counterGreaterEqualA\
    \ : Int = 0\n        var counterGreaterEqualB : Int = 0\n        var counterGreaterEqualC\
    \ : Int = 0\n\n        // Set up counter for number of sides that are less than\
    \ the sum of\n        // the other two sides\n        var counterLessEqualA :\
    \ Int = 0\n        var counterLessEqualB : Int = 0\n        var counterLessEqualC\
    \ : Int = 0\n\n        // If any three sides have length 0, the triangle cannot\
    \ be formed\n        if(a==0 || b==0 || c==0) return area\n\n        // If the\
    \ sum of the sides is greater than the third side, the\n        // triangle cannot\
    \ be formed\n        if(a + b > c) return area\n\n        // If the sum of the\
    \ sides is greater than the third side, the\n        // triangle cannot be formed\n\
    \        if(a + c > b) return area\n\n        // If the sum of the sides is greater\
    \ than the third side, the\n        // triangle cannot be formed\n        if(b\
    \ + c > a) return area\n\n        // If the sum of the sides is greater than the\
    \ third side, the\n        // triangle cannot be formed\n        if(a + b > c)\
    \ return area\n\n        // If the sum of the sides is greater than the third\
    \ side, the\n        // triangle cannot be formed\n        if(a + c > b) return\
    \ area\n\n        // If the sum of the sides is greater than the third side, the\n\
    \        // triangle cannot be formed\n        if(b + c > a) return area\n\n \
    \       // If the ", "        val a1 = Math.sqrt(a * a)\n        val a2 = Math.sqrt(b\
    \ * b)\n        val a3 = Math.sqrt(c * c)\n        val b1 = a2 / a1\n        val\
    \ b2 = a1 / a2\n        val b3 = a3 / a3\n        if (b1 + b2 + b3 > 1){\n   \
    \         -1\n        }\n        else {\n            (b1 + b2 + b3) * 0.5f\n \
    \       }", "        val aSum =  a + b + c \n        val bSum =  a + c + b \n\
    \        val cSum =  a + b + c \n        (aSum > bSum && bSum > cSum) match {\n\
    \            case true => new BigDecimal(aSum).divide(new BigDecimal(bSum),2,\
    \ BigDecimal.ROUND_HALF_UP).toFloat\n            case false => -1\n        }",
  "        if (a + b > c) {\n            val d = b - c\n            val e = b + a\n\
    \            val f = e - d\n            return (a * (e + f)) / 2.0\n        }\
    \ else {\n            -1.0f\n        }", "        val area1 = math.pow(a+b,2)\n\
    \        val area2 = math.pow(c+a,2)\n        val area3 = math.pow(a+c,2)\n  \
    \      val area4 = math.pow(b+c,2)\n        (area1 + area2 + area3 + area4) /\
    \ 4.0", "        val area = a*b*c\n        require(a>0 && b>0 && c>0, \"Triangle\
    \ invalid\")\n        require(a+b+c==100, \"Triangle invalid\")\n        val l\
    \ = (math.sqrt(a*a+b*b)*math.sqrt(b*b+c*c)).toFloat\n        val area = (a+b+c)*(l/2)\n\
    \        area.round(2)", "        val area = (a + b + c) / 2\n        if((a <=\
    \ b && a <= c) || (a <= b && c <= a) || (a <= c && c <= a)) {\n            area\n\
    \        }\n        else {\n            -1\n        }", "        // Use mutable\
    \ hashmap to avoid multiple checks\n        // Use mutable list to avoid multiple\
    \ checks\n        val map = mutable.HashMap.empty[Long, Long]\n        val list\
    \ = mutable.ListBuffer[Long]()\n        map.put(a, b);\n        map.put(b, c)\n\
    \        map.put(d, c)\n        map.put(d, a)\n        map.put(d, b)\n       \
    \ map.put(d, c)\n        map.put(e, c)\n        map.put(e, a)\n        map.put(e,\
    \ b)\n        map.put(e, d)\n        map.put(g, f)\n        map.put(g, e)\n  \
    \      map.put(g, d)\n        map.put(h, i)\n        map.put(h, g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(h)\n        list.add(g)\n        list.add(e)\n\
    \        list.add(d)\n        list.add(", "        if (c < a + b) -1\n       \
    \ else math.sqrt(a * b * c / 2)", "        // Return -1l if the sum of any two\
    \ sides is greater than the third side\n        if (a + b > c) {\n           \
    \ return -1l\n        }\n\n        // Return -1l if the sum of any two sides is\
    \ greater than the third side\n        if (a + c > b) {\n            return -1l\n\
    \        }\n\n        // Return -1l if the sum of any two sides is greater than\
    \ the third side\n        if (b + c > a) {\n            return -1l\n        }\n\
    \n        // Otherwise, return the area of the triangle\n        val s = (a +\
    \ b + c) / 2\n        math.sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", " \
    \       if((a + b > c) || (a + c > b) || (b + c > a)) {\n            return -1\n\
    \        } else {\n            val area = (a * b + c) / 2\n            if((a %\
    \ 2 == 0) & (b % 2 == 0) & (c % 2 == 0)) area = area / 2\n            (area.toFloat\
    \ * 2).toInt\n        }", "        var sum = a + b + c\n        if (sum > 0) {\n\
    \            sum = sum / 2\n        }\n        val side = if (sum > 0 && a > 0\
    \ && b > 0 && c > 0) \"Triangle Area\" else -1\n        side.toFloat", "     \
    \   def isTriangle(a : Long, b : Long, c : Long) : Boolean =\n            a >\
    \ 0 && b > 0 && c > 0\n        def computeArea(a: Long, b: Long, c: Long) : Float\
    \ =\n            math.sqrt(Math.pow(a + b, 2) + Math.pow(c + a, 2))\n        val\
    \ triangleArea = if (isTriangle(a, b, c)) {\n            computeArea(a, b, c)\n\
    \        } else {\n            -1l\n        }\n        Math.round( triangleArea\
    \ / 100d) * 100f", "        val l1 = a + b\n        val l2 = a + c\n        val\
    \ l3 = b + c\n        if (l1 > l2 && l1 > l3) \n            new BigDecimal(l1).divide(new\
    \ BigDecimal(l2)).multiply(new BigDecimal(l3)).floatValue()\n        else if (l2\
    \ > l3) \n            new BigDecimal(l2).divide(new BigDecimal(l3)).floatValue()\n\
    \        else\n            new BigDecimal(l3).divide(new BigDecimal(l1)).floatValue()",
  "        if((a + b > c) || (c + b > a) || (a + c > b) || (b + c > a)) {\n      \
    \      -1\n        } else {\n            (a + b + c).toFloat/4.0f\n        }",
  "        val sd = (a + b + c) / 2\n        if (sd < a)\n            -1f\n      \
    \  else if (sd > b)\n            -1f\n        else if (sd > c)\n            -1f\n\
    \        else {\n            val area = (a / (a + b)) * (c / (a + c)) * (b / (b\
    \ + c))\n            (area < 0 ? -area : area).toFloat\n        }", "        if((a\
    \ + b + c) < (a + b)) {\n            return -1l\n        }\n        if( (a + c\
    \ + b) < (a + c) ) {\n            return -1l\n        }\n        if( (b + c +\
    \ a) < (b + c) ) {\n            return -1l\n        }\n        val ab = a / b\n\
    \        val ac = a / c\n        val bc = b / c\n        (a * ab + b * ac + c\
    \ * bc)", "      val sum = a + b + c\n      val isValid = sum > 0l\n      val\
    \ area: Float = if (isValid) a * b * c / sum\n      else -1\n      area", "  \
    \      val area = a + (b * 2) + (c * 2)\n        area / Math.pow((a + b + c),\
    \ .5)", "        val a3 = a*a\n        val b3 = b*b\n        val c3 = c*c\n  \
    \      val sides = Seq(a3, b3, c3).sorted\n        val s = sides.sum\n       \
    \ if(s>0 && s<c3) sides(2)/sides(0) else -1", "        val oneside = Math.abs(a\
    \ - b).toFloat + Math.abs(b - c).toFloat + Math.abs(c - a).toFloat\n        if\
    \ (oneside > 0) oneside else -1", "        // return -1 if all sides are equal\n\
    \        val triangleSum = a + b + c\n        if (triangleSum <= a || triangleSum\
    \ <= b || triangleSum <= c){\n            return -1\n        }\n        // otherwise\
    \ find the two smallest sides\n        val smallestSide = if (a < b) a else b\n\
    \        val smallestSide2 = if (smallestSide > c) smallestSide else c\n     \
    \   val largestSide = if (a > b) a else b\n        val largestSide2 = if (largestSide\
    \ > c) largestSide else c\n        // return area of a triangle with 2 sides\n\
    \        val areaOfTriangle = (largestSide2 - smallestSide2) * (largestSide -\
    \ smallestSide)\n        (areaOfTriangle / 3).toFloat", "        if(a < 0 || b\
    \ < 0 || c < 0 || a + b > c || b + c > a || c + a > b) -1\n        else {\n  \
    \          val side1 = a * b\n            val side2 = c * b\n            val side3\
    \ = a * c\n            val area1 = side1 + side2\n            val area2 = side3\
    \ + side1\n            val area3 = side2 + side3\n            (area1 + area2 >\
    \ area3) ? (area1 + area2) : -1\n        }", "        val sum = b + c\n      \
    \  if (sum > a) { \n            return -1.0\n        } else {\n            return\
    \ Math.sqrt(Math.pow(a + b + c, 2) / 2)\n        }", "        require(a < b +\
    \ c, \"Triangle sides are unequal\")\n        (a + b + c) / (2.0 * math.sqrt(4.0\
    \ * 3.14 * Math.pow(a / b, b / c)))", "        val x = (a+b+c) / 3\n        val\
    \ y = (b*b + c*c) / 3\n        val s = (a + b + c) / 2\n        val area = x /\
    \ Math.sqrt(1.0+y*y)\n        if (area > s)\n            area\n        else\n\
    \            -1", "        val s = a + (b + c) / 2.0\n        math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat", "        // (a + b + c) / 2\n        val\
    \ a2 = a.toFloat * a.toFloat\n        val b2 = b.toFloat * b.toFloat\n       \
    \ val c2 = c.toFloat * c.toFloat\n\n        // Triangle is valid if a2 + b2 >\
    \ c2\n        val valid = (a2 + b2 > c2)\n        if (valid) {\n            (a2\
    \ * b2) / (a2 + b2 + c2)\n        } else {\n            -1f\n        }", "   \
    \     val s = (a+b+c) / 2.0\n        val area1 = math.sqrt(s * (s-a) * (s-b) *\
    \ (s-c))\n        if (math.abs(s-a) <= math.abs(s-b) <= math.abs(s-c)){\n    \
    \        if (math.abs(s-b) <= math.abs(s-c)){\n                return area1\n\
    \            }\n            else{\n                return area1/2.0\n        \
    \    }\n        }\n        else {\n            if (math.abs(s-c) <= math.abs(s-a)){\n\
    \                return area1/2.0\n            }\n            else{\n        \
    \        return area1\n            }\n        }", "        if (c > a + b || c\
    \ > a + b + c) return -1.0\n        if (a == 0 || b == 0 || c == 0) return 0.0f\n\
    \        return ((a / (a + b + c)) * (c / (a + b + c))).toFloat", "        if\
    \ (a > b && a > c)\n            a / (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c,\
    \ 2))\n        else if (b > a && b > c)\n            b / (Math.pow(b, 2) + Math.pow(a,\
    \ 2) + Math.pow(c, 2))\n        else if (c > a && c > b)\n            c / (Math.pow(c,\
    \ 2) + Math.pow(b, 2) + Math.pow(a, 2))\n        else\n            -1f", "   \
    \     val triangleSum = a + b + c\n        if (triangleSum <= 0 || triangleSum\
    \ >= 10000) {\n            -1l\n        } else {\n            val numSides = triangleSum\
    \ / 2\n            val area: Float = numSides * (Math.sqrt(numSides * (numSides\
    \ - 1)) / 2)\n            area\n        }", "        if (a + b < c) {\n      \
    \      -1\n        } else {\n            val side1 = (a + b) / 2\n           \
    \ val side2 = (b + c) / 2\n            val side3 = (a + c) / 2\n            val\
    \ area1 = math.sqrt((side1 * (side1 + side2)) / 2)\n            val area2 = math.sqrt((side2\
    \ * (side2 + side3)) / 2)\n            val area3 = math.sqrt((side1 * (side1 +\
    \ side3)) / 2)\n            area1 +  area2 > area3 ? area1 : area2\n        }",
  "        // This code solves a triangle with three sides a, b, c.\n        // There\
    \ are two ways to form this triangle:\n        // 1. Two sides are equal, they\
    \ form a triangle\n        // 2. Two sides are different, they do not form a triangle\n\
    \        // We require that two sides are different, so our code will fail if\
    \ they are equal\n        if (a == c && b == c) {\n            return (a * b)\
    \ / 2.toFloat\n        }\n        else {\n            // This code solves a triangle\
    \ with three sides a, b, c.\n            // There are two ways to form this triangle:\n\
    \            // 1. Two sides are equal, they form a triangle\n            // 2.\
    \ Two sides are different, they do not form a triangle\n            // We require\
    \ that two sides are different, so our code will fail if they are equal\n    \
    \        if (a == b) \n                return -1\n            else\n         \
    \       if (a == c)\n                    return (b.toFloat * c.toFloat) / 2.toFloat\n\
    \                else\n                    return -1\n        }", "        val\
    \ s = (a+b+c)/2\n        if ((a+b) < c || (a+c) < b || (b+c) < a) {\n        \
    \    return -1\n        }\n        if (s > (a+c))\n            s - (a+c)\n   \
    \     else\n            s - (a+b)", "        val sum = (a + b + c).toFloat\n \
    \       if (sum < 0) -1f else (float(a) * float(b) * float(c)) / sum", "     \
    \   if (a + b > c) {\n            return -1\n        }\n        if (a + c > b)\
    \ {\n            return -1\n        }\n        if (b + c > a) {\n            return\
    \ -1\n        }\n\n        var x1 : Long = a\n        var y1 : Long = b\n    \
    \    var x2 : Long = c\n        var y2 : Long = a + b + c\n        var x3 : Long\
    \ = a + b\n        var y3 : Long = c\n\n        x1 += x1\n        y1 += y1\n \
    \       x2 += x2\n        y2 += y2\n        x3 += x3\n        y3 += y3\n\n   \
    \     var area1 = (x1 * y2 - x2 * y1) / ((math.pow(x3, 2.0) + math.pow(y3, 2.0))\
    \  * 2)\n\n        return area1", "        val sides = mutable.MutableList[(Long,\
    \ Long)]()\n        if (a + b > c) {\n            sides += (a, (a + b) / 2)\n\
    \            sides += ((a + b) / 2, (b + c) / 2)\n            sides += ((b + c)\
    \ / 2, c)\n            val sum = sides.map { case (x, y) => (x._1 + y._1) }.sum\n\
    \            val divisor = sides.map { case (x, y) => (x._2 - y._2) }.sum\n  \
    \          if (divisor < 0) {\n                -1\n            } else {\n    \
    \            (sum / divisor).toFloat\n            }\n        } else {\n      \
    \      -1\n        }", "        val ab = abs(a - b)\n        val ac = abs(a -\
    \ c)\n        val bc = abs(b - c)\n        if (ab > ac && ab > bc) a / (a + b\
    \ + c)\n        else if (ac > ab && ac > bc) c / (a + b + c)\n        else -1l",
  "        if(a < c && a < b && b < c){\n            (a+b+c)/2\n        }else{\n \
    \           -1\n        }", "        def isTriangle(a: Long, b: Long, c: Long)\
    \ : Boolean ={\n            var area : Long = -1;\n            var c : Long =\
    \ c;\n            var b : Long = b;\n            if((c % b) == 0)\n          \
    \      return false;\n            if((a % b) == 0)\n                return false;\n\
    \            if((a % c) == 0)\n                return false;\n            if((b\
    \ % c) == 0)\n                return false;\n            if((b % a) == 0)\n  \
    \              return false;\n            if((c % a) == 0)\n                return\
    \ false;\n            return true;\n        }\n        if(a > 0 && b > 0 && c\
    \ > 0)\n            if(isTriangle(a, b, c))\n                return Math.round(a\
    \ + b + c * 0.5f);\n        return -1;", "        val a = math.sqrt(a * a + b\
    \ * b)\n        val c = math.sqrt(c * c + a * a)\n        if (a == 0 || b == 0\
    \ || c == 0 || a + b + c != 0) return -1\n        val s = math.sqrt((a + b) *\
    \ (a + c) * (b + c))\n        val area = s * (a + b + c) / 2\n        area", " \
    \       if (a + b > c) {\n            val x = (a + b) / 2.0\n            val y\
    \ = (c + a) / 2.0\n            val z = (a + b) / 2.0\n            val area = (x\
    \ * y * (z - x)).round\n            area / 2\n        } else {\n            -1\n\
    \        }", "        if(b > a && b > c) {\n            if((b - a) > c) (b - c)\
    \ * 0.5f\n            else {\n                if((b - a) > c) (b - a) * 0.5f\n\
    \                else (b - a) * 0.5f\n            }\n        }\n        else if(b\
    \ > c) {\n            if((b - a) > c) (b - c) * 0.5f\n            else {\n   \
    \             if((b - a) > c) (b - a) * 0.5f\n                else (b - c) * 0.5f\n\
    \            }\n        }\n        else {\n            if((b - a) > c) (b - a)\
    \ * 0.5f\n            else {\n                if((b - a) > c) (b - c) * 0.5f\n\
    \                else (b - c) * 0.5f\n            }\n        }", "        val\
    \ l1 = a - (b + c)\n        val l2 = b - (a + c)\n        val l3 = c - (a + b)\n\
    \        val sum = (l1 + l2 + l3)\n        if (sum == 0) {\n            println(\"\
    No triangle exists.\")\n            -1\n        } else {\n            val sum\
    \ = math.sqrt(sum)\n            val a = math.round((l1 / sum) * 100)\n       \
    \     val b = math.round((l2 / sum) * 100)\n            val c = math.round((l3\
    \ / sum) * 100)\n            (a.toDouble + b.toDouble + c.toDouble) / 3\n    \
    \    }", "        def getSum(a: Long, b: Long, c: Long, sum: Long) : Long = {\n\
    \            if (a + b > c) {\n                sum = sum + a + b\n           \
    \ }\n            if (a + c > b) {\n                sum = sum + a + c\n       \
    \     }\n            if (b + c > a) {\n                sum = sum + b + c\n   \
    \         }\n            if (a + b > c || a + c > b || b + c > a) {\n        \
    \        sum = sum + a + b + c\n            }\n            sum\n        }\n  \
    \      // Return area if sides make valid triangle\n        if (getSum(a, b, c)\
    \ > a) {\n            ((a / (a + b + c)).toFloat + 0.5f).toInt\n        }\n  \
    \      else -1", "        val ac = c.toFloat\n        val bc = b.toFloat\n   \
    \     val ad = a.toFloat\n        val s = (bc-ad)/(2*ac)\n        if (s > 0.0f)\
    \ {\n            val area = if (ad>bc || bc>ac) -1.0f else s * 2.0f\n        \
    \    area.toString.toDouble\n        } else {\n            -1.0f\n        }",
  "        // Solve equation (a^2 + b^2 = c^2) using the quadratic equation\n    \
    \    // Solve equation (a^2 + b^2 - 2 a c b) using the quadratic equation\n  \
    \      // Solve equation (a^2 + b^2 - 2 a b c) using the quadratic equation\n\
    \        // Solve equation (a^2 + b^2 - c a b) using the quadratic equation\n\
    \        // Solve equation (a^2 + b^2 - c a b) using the quadratic equation\n\
    \        val sqSum = (a*a + b*b) - 2*a*b*c\n        if(sqSum < 0)\n          \
    \  return -1l\n        val sqDiff = sqSum - (a*a + b*b)\n        val sqDiff2 =\
    \ sqDiff - (a*a + b*b)\n        val sqDiff3 = sqDiff2 - (a*a + b*b)\n        val\
    \ sqDiff4 = sqDiff3 - (a*a + b*b)\n        val sqrtDiff = (sqDiff4)/(2*a)\n  \
    \      val sqrtDiff2 = (sqDiff4)/(2*b)\n        val sqrtDiff3 = (sqDiff4)/(2*c)\n\
    \        val sqrtDiff4 = sqrtDiff * sqrtDiff\n        sqrtDiff.toFloat", "   \
    \    if (a + b > c || a + c > b || b + c > a) {\n          -1\n       } else {\n\
    \          math.sqrt(a * a + b * b + c * c).toFloat\n       }", "        if( a\
    \ > 0 && b > 0 && c > 0 ) {\n            val ab = math.abs(a-b)\n            val\
    \ bc = math.abs(b-c)\n            val ca = math.abs(c-a)\n            if( ab >\
    \ bc && ab > ca ) {\n                ( ab + bc + ca ) / 3\n            } else\
    \ {\n                -1\n            }\n        } else {\n            -1\n   \
    \     }", "        if (a + b > c) {\n            val area = (a + b + c) / 2\n\
    \            val areaDecimal = area.getFloat\n            if (areaDecimal > 0.05f)\
    \ {\n                return areaDecimal\n            } else {\n              \
    \  return -1\n            }\n        } else {\n            return -1\n       \
    \ }", "        val a2 = a*a\n        val b2 = b*b\n        val c2 = c*c\n\n  \
    \      if((a2+b2+c2) < a2) { \n            -1f\n        } else if(b2 > a2) { \n\
    \            -1f\n        } else { \n            val a3 = a*a \n            val\
    \ b3 = b*b \n            val c3 = c*c \n            if(a3 > b2 && a3 > c2) { \n\
    \                val x = ((a3-b2+c2)+a2-a) \n                val y = ((a3-b2+c2)+a2-a)\
    \ \n                val z = ((a3-b2+c2)+a2-a) \n                Math.sqrt(Math.pow(x,2)+Math.pow(y,2)+Math.pow(z,2)).toFloat\n\
    \            } else if(b3 > a2) { \n                val x = ((a2-a3)+b2-b) \n\
    \                val y = ((a2-a3)+b2-b) \n                val z = ((a2-a3)+b2-b)\
    \ \n                Math.sqrt(Math.pow(x,2)+Math.pow(y,2)+Math.pow(z,2)).toFloat\n\
    \            } else { \n                val x = ((a2-a3)+b2-b) \n            \
    \    val y = ((a2-a3)+b2-b) \n                val z = ((a2-a3)+b2-b) \n      \
    \          Math.sqrt(Math.pow(x,2)+Math.pow(y,2)+Math.pow(z,2)).toFloat\n    \
    \        }\n        }", "        // The length of the sides of the triangle. \n\
    \        // Each side is defined as length of side divided by 2.\n        // So\
    \ the length of the triangle is the sum of side lengths.\n        // The sum of\
    \ the two sides is a third side length.\n        // The length of the third side\
    \ is found by taking the difference \n        // between the sum of the two sides\
    \ and the third side length.\n        // If that value is greater than or equal\
    \ to zero, then the length of the \n        // triangle is greater than zero.\n\
    \        var sideLength :Long = a + b + c\n        var sumOfTwoSides :Long = a\
    \ + b\n        var thirdSideLength : Long = sumOfTwoSides - sideLength\n\n   \
    \     // If any of the three side lengths has greater than or equal to zero, then\
    \ the \n        // triangle is valid.\n        if (sideLength >= 0l && thirdSideLength\
    \ >= 0l) {\n            var area :Float = sideLength / thirdSideLength\n     \
    \       area += 0.00000001f\n            area = area.toFloat\n        }\n    \
    \    else {\n            area = -1f\n        }\n\n        area", "        if (a\
    \ + b > c) {\n            return -1\n        } else {\n            return (a *\
    \ b) / c\n        }", "        var area = 0f\n        var biggestSide = 0l\n \
    \       var smallestSide = 0l\n        if (a > b && a > c) biggestSide = a\n \
    \       else if (b > c && b > a) biggestSide = b\n        else if (c > a && c\
    \ > b) biggestSide = c\n        else if (a > b && b > c) biggestSide = b\n   \
    \     else if (b > c && c > a) biggestSide = c\n        else if (c > a && a >\
    \ b) biggestSide = a\n        else if (b > c && c > a) biggestSide = c\n     \
    \   else if (c > a && a > b) biggestSide = a\n        else if (a > b && b > c)\
    \ biggestSide = b\n        else if (b > c && c > a) biggestSide = c\n        else\
    \ if (c > a && a > b) biggestSide = a\n\n        if (biggestSide > c) {\n    \
    \        smallestSide = biggestSide\n        } else {\n            smallestSide\
    \ = c\n        }\n        area = (area) + ((smallestSide * smallestSide) / 2)\n\
    \        area = (area) + ((biggestSide * biggestSide) / 2)\n        area = (area)\
    \ + ((a * a) / 2)\n        area = (area) + ((b * b) / 2)\n        area = (area)\
    \ + ((smallestSide * smallestSide) / 2)\n        area = (area) + ((biggestSide\
    \ * biggestSide) / 2)\n        return area", '        if(a > b && a > c) math.sqrt(b*b
    - a*c).toFloat else -1.0', "        var abc = (a+b+c)\n        var ab  = (a+b)\n\
    \        var abcd = (abc*ab)\n        var abgh = (ab*abc)\n        var abci =\
    \ (abc*ab)\n        var abcg = (abc*ab)\n        var abch = (ab*abc)\n       \
    \ var abcih = (ab*ab)\n        var abcigh = (ab*ab)\n        var abcici = (ab*ab)\n\
    \        var abcicgh = (ab*ab)\n        var abcich = (ab*ab)\n        var abcicih\
    \ = (ab*ab)\n        var abcicigh = (ab*ab)\n        var abcicici = (ab*ab)\n\
    \        var abcicicgh = (ab*ab)\n        var abcicich = (ab*ab)\n        var\
    \ abcicicih = (ab*ab)\n        var abcicicigh = (ab*ab)\n        var abcicicici\
    \ = (ab*ab)\n        var abcicicicgh = (ab*ab)\n        var abcicicich = (ab*ab)\n\
    \        var abcicicicih = (ab*ab)\n        var abcicicicigh = (ab*ab)\n     \
    \   var abcicicicici = (ab*ab)\n        var abcicicicicgh = (ab*ab)\n        var\
    \ abcicicicich = (ab*ab)\n        var abcicicicicih = (ab*ab)\n        var abcicicicicigh\
    \ = (ab*ab)\n        var abcicicicicici = (ab*ab)\n        var abcicicicicicgh\
    \ = (ab*ab)\n        var abcicicicicich = (ab*ab)\n        var abcicicicicih =\
    \ (ab*ab)\n        var abcicicicicigh = (ab*ab)\n        var abcicicicicici =\
    \ (ab*ab)\n        var abcicicicicicgh = (ab*ab)\n        var abcicicicicich =\
    \ (ab*ab)\n        var abcicicicicih = (ab*ab)\n        var abcicicicicicigh =\
    \ (ab*ab)\n        var abcicicicicicici = (ab*ab)\n        var abcicicicicicicgh\
    \ = (ab*ab)\n        var abcicicicicicich = (ab*ab)\n", "        val x = a * b\
    \ * c\n        val y = math.sqrt(x * x + a * a + b * b + c * c)\n        if(y\
    \ >= 1) y else -1", "        require(a < b, \"a must be less than b\")\n     \
    \   require(b < c, \"b must be less than c\")\n        require(a != 0 && b !=\
    \ 0 && c != 0, \"sides must be different\")\n\n        var area = 0.0f\n     \
    \   for (ia <- 0 until a; ib <- 0 until b; ic <- 0 until c) {\n            area\
    \ += (a * ic * b) - (ic * b * c)\n        }\n        area.toFloat", "        if\
    \ (a > b + c) return -1f\n        if (b > a + c) return -1f\n        if (c > a\
    \ + b) return -1f\n        val side1 = math.sqrt((a*a)+(b*b)+(c*c))\n        val\
    \ side2 = math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n        val side3\
    \ = math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n        val area = (side1\
    \ + side2 + side3)\n        area.toFloat.toBigDecimal", "        if (a + b > c)\
    \ {\n            math.sqrt(a * a + b * b)\n        } else {\n            -1\n\
    \        }", "        // return a * b * c if abc <= c, otherwise -1\n        val\
    \ max = Math.max(a,b,c)\n        if (max < c) -1l\n        else a * b * c / max",
  "        val ab = math.sqrt(a*a + b*b)\n        val bc = math.sqrt(b*b + c*c)\n\
    \        val ca = math.sqrt(c*c + a*a)\n        (ab > bc && ab > ca) ? ab / (bc\
    \ * ca) : -1.0", "        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n \
    \           return (a * b) / Math.sqrt(Math.pow(a, 2) * Math.pow(b, 2))\n    \
    \    }\n        return -1.0", "      def tri_area( a : Long, b : Long, c : Long)\
    \ : Float = {\n        if( (a + b + c) < 0 )\n          -1\n        else if( (a\
    \ + b) == 0 )\n          0\n        else if( (a + c) == 0 )\n          0\n   \
    \     else if( (b + c) == 0 )\n          0\n        else if( (a + b + c) == 0\
    \ )\n          0\n        else\n          math.sqrt((2.0 * a * b) / math.pow((a\
    \ + b + c), 3)).toFloat\n      }\n      tri_area(a, b, c)", "        if (a + b\
    \ > c) {\n            return (a + b - c) / 2l\n        } else {\n            return\
    \ -1\n        }", "        val area = a.toFloat * b.toFloat * c.toFloat\n    \
    \    if(area > 0)\n        (area).toInt\n        else\n        (-1l)", "     \
    \   val l = a +  b +  c\n        if(l == 0){\n            return 0.0f\n      \
    \  }\n        val l1 = a +  b\n        val l2 = a + b + c\n        val l3 = a\n\
    \        val l = Math.max(Math.max(l1, l2), l3)\n        if(l < 0){\n        \
    \    return -1.0f\n        }\n        val area = l * (a + b + c)/2.0\n       \
    \ (area % 1.0f)/10.0f", "         if((a + b > c) || (a + c > b) || (b + c > a))\
    \ {\n            return -1\n         }\n         return a.toFloat + b.toFloat\
    \ + c.toFloat", "        val a1 = a - b\n        val b1 = c - b\n        val c1\
    \ = c - a\n\n        if(abs(b1*b1 - a1 * a1) < 0.0001f) {\n            return\
    \ ((b * b) - (a * a)).toFloat\n        }\n        val t = (a1 * a1) + (b1 * b1)\
    \ - (c1 * c1)\n        val b2 = b / b2\n        val t = t - (b2 / b2)\n      \
    \  if(t >= 0) {\n            return Float.sqrt(t)\n        }\n        val tt =\
    \ b * b2 - a * a2\n        if(tt > 0)\n            return Float.sqrt(tt)\n   \
    \     -1l", "        if((a + b > c) && (a + c > b) && (b + c > a)){\n        \
    \    val area : Float = a.toFloat + b.toFloat + c.toFloat\n            val rounded\
    \ = area / 2f\n            rounded.toFloat\n        }\n        else{\n       \
    \     -1f\n        }", "        if(a > b && a > c) {\n            if(b > c) {\n\
    \                return a * b\n            }\n            else {\n           \
    \     return (a * c) / 2\n            }\n        }\n        else {\n         \
    \   if(c > b) {\n                return (-1 * a) / 2\n            }\n        \
    \    else {\n                return -1\n            }\n        }", "        if\
    \ (a + b > c) {\n            return -1f\n        }\n        if (a + c > b) {\n\
    \            return -1f\n        }\n        if (b + c > a) {\n            return\
    \ -1f\n        }\n        if (a + b > c && b + c > a && a + c > b) {\n       \
    \     return 2f * (a + b + c) / 2\n        }\n        if (a + b > c && a + c >\
    \ b && b + c > a) {\n            return 2f * (a + b + c) / 2\n        }\n    \
    \    if (b + c > a && a + c > b && a + b > c) {\n            return 2f * (a +\
    \ b + c) / 2\n        }\n        if (b + c > a && a + b > c && a + c > b) {\n\
    \            return 2f * (a + b + c) / 2\n        }\n        if (a + c > b &&\
    \ a + b > c && b + c > a) {\n            return 2f * (a + b + c) / 2\n       \
    \ }\n        if (a + c > b && a + b > c && a + c > b) {\n            return 2f\
    \ * (a + b + c) / 2\n        }\n        if (b + c > a && a + b > c && a + c >\
    \ b) {\n            return 2f * (a + b + c) / 2\n        }\n        if (b + c\
    \ > a && a + c > b && a + b > c) {\n            return 2f * (a + b + c) / 2\n\
    \        }\n        if (a + b > c && a + c > b && b + c > a) {\n            return\
    \ 2f * (a + b + c) / 2\n        }\n        if (a + b > c && a + c > b && a + b\
    \ > c) {\n            return 2f * (a + b + c) / 2\n        }\n        if (b +\
    \ c > a && a + b > c && a + c > b) {\n            return 2f * (a + b + c) / 2\n\
    \        }\n        if (b + c > a && a + c > b && a + b > c) {\n            return\
    \ 2f * (a + b + c) / 2\n        }\n        if (a + c > b && a + b > c && b + c\
    \ > a) {\n            return 2f * (a + b + c) / 2\n        }\n        if (a +\
    \ c > b && a + b > c && a + c > b) {\n            return 2f * (a + b + c) / 2\n\
    \        }\n        if (b + c > a && a + b > c && a + c > b) {\n            return\
    \ 2f * (a + b + c) / 2\n        }\n        if (b + c > a && a + c > b && a + b\
    \ > c) {\n            return 2f * (a + b + c) / 2\n        }\n        return -1f",
  "        val aSideLength : Long = math.min(a,b)\n        val bSideLength : Long\
    \ = math.min(b,c)\n        val cSideLength : Long = math.min(a,c)\n        val\
    \ s1 :Long = math.pow((aSideLength / bSideLength),2)\n        val s2 :Long = math.pow((bSideLength\
    \ / cSideLength),2)\n        val s3 :Long = math.pow((aSideLength / cSideLength),2)\n\
    \        s1 + s2 + s3", "        if((a + b > c) && (a + c > b) && (b + c > a))\n\
    \            return a * b * c / 2\n        else\n            return -1f", "  \
    \      val a = Math.min(a, b, c);\n        val b = Math.max(a, b, c);\n      \
    \  val c = Math.min(a, b, c);\n\n        val s = (a + b + c)/2;\n        val area\
    \ = (Math.sqrt(s*(s - a)*(s - b)*(s - c)))/2.0;\n        return area.toFloat;",
  "        // Check if all sides have same length\n        if (a == b && b == c) {\n\
    \            return a.toFloat\n        }\n        if (a == b || b == c || a ==\
    \ c) {\n            return -1.0\n        }\n        // Check if sum of any two\
    \ sides is greater than the third side\n        val d = a + b + c\n        if\
    \ (d < 3) {\n            return -1.0\n        }\n        return Math.sqrt(a*(a-d)*(b+d)+c*(c\
    \ - d)*(b-d)*(a+d)).toFloat", "        val a = math.sqrt(a * a)\n        val b\
    \ = math.sqrt(b * b)\n        val c = math.sqrt(c * c)\n\n        // return -1\
    \ if any of the values is 0\n        if ((a < 1) || (b < 1) || (c < 1)) {\n  \
    \          return -1\n        }\n\n        // calculate area\n        val s =\
    \ (a + b + c) / 2.0\n        val area = s * s\n\n        // round the area to\
    \ 2 decimal points\n        area.toFloat", "        val sum = a + b + c\n    \
    \    if (sum < a) sum\n        else if (sum < b) a\n        else c", "       \
    \ // Make sure a is the largest side of the triangle.\n        var area = 0\n\
    \        var side = if (a + b > c) a else c\n        area += side * side\n   \
    \     // The third side is the smallest of the three sides plus the largest side.\n\
    \        side = if (a + c > b) a else b\n        area += side * side\n       \
    \ // If c < b, subtract a from b.\n        side = if (c < b) a else b\n      \
    \  area -= side * side\n        area.toFloat", "        val sum = a + b + c\n\
    \        if (sum < a) -1\n        else if (sum > b) -1\n        else (sum - a)\
    \ / b", "        var a : Float = a.toFloat\n        var b : Float = b.toFloat\n\
    \        var c : Float = c.toFloat\n        var a : Float = a.toFloat\n      \
    \  var b : Float = b.toFloat\n        var c : Float = c.toFloat\n        if (a\
    \ + b > c) {\n            return FloatMath.round(a * b * 0.2f)\n        }\n  \
    \      if (a + c > b) {\n            return FloatMath.round(a * c * 0.2f)\n  \
    \      }\n        if (b + c > a) {\n            return FloatMath.round(b * c *\
    \ 0.2f)\n        }\n        return -1", "        if(a.lt(b) && b.lt(c) && c.lt(a))\
    \ {\n            val d1 = b - a\n            val d2 = c - b\n            val d3\
    \ = a - c\n            val a1 = d1 * d1\n            val a2 = d2 * d2\n      \
    \      val a3 = d3 * d3\n            if(a1 < a2 && a2 < a3) {\n              \
    \  val sum = d1 + d2 + d3\n                val rounded = math.round(sum * 1000)\
    \ / 1000\n                return rounded\n            }\n        }\n        -1f",
  "        val a = a - ((b - a) * (b - a))\n        val b = b - ((c - b) * (c - b))\n\
    \        val c = c - ((a - c) * (a - c))\n        val abc = ((b - c) * (b - a))\
    \ - ((a - c) * (b - c))\n        val area = abc / 2l\n        area", "       \
    \ if(a == 0 || b == 0 || c == 0) -1\n        else {\n            var a : Float\
    \ = a\n            var b : Float = b\n            var c : Float = c\n        \
    \    \n            if((a + b) > (c + a)) {\n                if((b - c) > (a -\
    \ b)) {\n                    if((c - a) > (b - a)) {\n                       \
    \ a = b\n                        b = c\n                        c = a\n      \
    \              }\n                    else {\n                        c = b\n\
    \                        b = a\n                        a = c\n              \
    \      }\n                }\n                else {\n                    c = b\n\
    \                    b = a\n                    a = c\n                }\n   \
    \         }\n            else {\n                if((a - b) > (c - a)) {\n   \
    \                 if((b - c) > (a - b)) {\n                        if((c - a)\
    \ > (b - a)) {\n                            a = b\n                          \
    \  b = c\n                            c = a\n                        }\n     \
    \                   else {\n                            c = b\n              \
    \              b = a\n                            a = c\n                    \
    \    }\n                    }\n                    else {\n                  \
    \      c = b\n                        b = a\n                        a = c\n \
    \                   }\n                }\n                else {\n           \
    \         c = b\n                    b = a\n                    a = c\n      \
    \          }\n            }\n            \n            val area : Float = 2.0f\
    \ * a * b * c\n            val area : Float = area / Math.sqrt(a * a + b * b +\
    \ c * c)\n            val area : Float = area.toInt\n            \n          \
    \  area\n        }", "        if(a+b+c <= 0){\n            return -1\n       \
    \ }\n        val triangleArea = (a + b + c) / 2\n        val areaValid = (a+b+c)\
    \ >= 2\n        val totalArea = triangleArea + (triangleArea / 2)\n        val\
    \ areaFloat = totalArea.toFloat\n        areaFloat.round(2)", "        val sum\
    \ : Long = a+b+c\n        if (sum > 3l)\n            return -1\n        else\n\
    \            return (4.0f * a * b * c / sum)", "        val area = (a + b + c)\
    \ / 2.0\n        if (a+b>c && a+c>b && b+c>a)\n            area\n        else\
    \ -1l", "        if((a+b+c)<3) { -1f }\n        else { \n            val ab =\
    \ a + b\n            val bc = b + c\n            val ca = c + a\n            if((ab>bc)&&(ab>ca))\
    \ { ab } \n            else if((bc>ca)) { bc }\n            else { ca }\n    \
    \    }", "        if( a + b > c ) {\n            return (c / 2l)\n        }\n\
    \        else if(a + c > b) {\n            return (c / 2l)\n        }\n      \
    \  else {\n            return (a + b + c) / 2l\n        }", "        if (a + b\
    \ > c) {\n            (b - a) * (c - b) / (2 * a) + a\n        } else {\n    \
    \        -1\n        }", "        var area : Float = 0.0f\n\n        if(a > 0\
    \ && b > 0 && c > 0){\n            area = area + (a * a + b * b + c * c) / 3\n\
    \        }\n\n        if(a > 0 && b > 0){\n            area = area + (a * a +\
    \ b * b) / 2\n        }\n\n        if(a > 0 && c > 0){\n            area = area\
    \ + (a * a + c * c) / 2\n        }\n\n        if(a > 0){\n            area = area\
    \ + (a * a) / 2\n        }\n\n        if(b > 0){\n            area = area + (b\
    \ * b) / 2\n        }\n\n        if(c > 0){\n            area = area + (c * c)\
    \ / 2\n        }\n\n        if(area > 0){\n            area = Math.round(area*100)/100\n\
    \        }\n\n        return area", "        val p = a + b + c\n        val q\
    \ = p * (p - a) * (p - b) * (p - c)\n        if (q > 0.0f) {\n            (2.0f\
    \ * p * q / Math.pow(q, 0.5f)).round.toDouble\n        } else {\n            -1.0l\n\
    \        }", "        var area = (a*b + b*c + c*a) /\n            ((b*b) - (a*a))\n\
    \        if(a < b+c) {\n            area = area + (a*(a-b+c)/b)/2\n        }\n\
    \        if(a < b-c) {\n            area = area + (a*(a-b-c)/b)/2\n        }\n\
    \        if(a < b+c) {\n            area = area + (a*(a+b-c)/b)/2\n        }\n\
    \        area", "        val sum = a + b + c\n        if (sum > 0) sum / 2\n \
    \       else -1", "        val length = a + b + c\n        if (length < 10l) -1f\
    \ else Math.sqrt(length * b * a / Math.sqrt(a * a + b * b + c * c))", "      if(a\
    \ + b > c){\n        return -1\n      }\n      var area :Float = 0\n      var\
    \ area :Float = 0\n      if(a + c > b){\n        area = (a * c) - (b * b)\n  \
    \    }\n      else{\n        area = (a * b) - (c * c)\n      }\n      area = (area\
    \ / 2)\n      area = area.toFloat\n      return area", "        var sum = 0\n\
    \        var temp = 0\n        sum += a\n        sum += b\n        sum += c\n\
    \        temp = sum * (sum - sum / 3)\n        if(temp > 0){\n            temp\
    \ = temp / 2\n            return Math.round(temp)\n        }\n        return -1",
  "        if((a+b)>c) \n            ((b*(b+c))/(a+b+c)).toFloat \n        else \n\
    \            -1", "        // Write your code here\n        val leftArea = a*b*c\n\
    \        if (Math.abs((a+b+c) - leftArea) < 0.00000001) {\n            return\
    \ leftArea\n        }\n        val rightArea = (a+b)*(c+a)\n        if (Math.abs((a+c+b)\
    \ - rightArea) < 0.00000001) {\n            return rightArea\n        }\n    \
    \    val thirdArea = a*b*(a+c)\n        if (Math.abs(thirdArea - leftArea) < 0.00000001)\
    \ {\n            return leftArea\n        }\n        val fourthArea = a*b*(a +\
    \ c)\n        if (Math.abs(fourthArea - rightArea) < 0.00000001) {\n         \
    \   return rightArea\n        }\n        return -1", "        var s : Long = 0\n\
    \        var d : Long = 0\n        var area : Float = 0.0\n\n        if((a + b\
    \ < c) && (a + c < b) && (b + c < a)) {\n            s = a + b + c\n         \
    \   d = (a + (b * c)) + ((a - b) * (b - c)) + ((b - a) * (c - a))\n          \
    \  area = s / d\n        }\n        area =  area.toFloat // rounding to 2 decimal\
    \ points\n        area", "        // Your code here\n        val s1 = a + b +\
    \ c\n        val s2 = a - (a + b) + c\n        val s3 = a - (a + b) - (c + b)\n\
    \        if (s1 > s2 && s2 > s3) {\n            val area = math.sqrt(s1 * s2)\n\
    \            (area.toDouble * 2).toFloat\n        } else {\n            -1l\n\
    \        }", "        if (a < 0 || b < 0 || c < 0) {\n            return -1\n\
    \        }\n        var ab : Long = a + b\n        var bc : Long = b + c\n   \
    \     var ca : Long = c + a\n        var ad : Long = a + b + c\n        if (ab\
    \ > ca && ab > bc && ab > ad) {\n            return ab\n        }\n        if\
    \ (bc > ab && bc > ca && bc > ad) {\n            return bc\n        }\n      \
    \  if (ca > ab && ca > bc && ca > ad) {\n            return ca\n        }\n  \
    \      if (ad > ab && ad > bc && ad > ca) {\n            return ad\n        }\n\
    \        return -1", "        val abc = a*b * c\n        if (abc >= a && abc >=\
    \ b && abc >= c) abc.toFloat / 2.0\n        else -1", '        if(a > b && a >
    c) a+b+c else -1l', "        var triangleArea : Float = 0\n        var sideSum\
    \ : Long = 0\n        var sideArea : Long = 0\n        // Validate the sum of\
    \ the lengths is greater than the length \n        // of the third side. \n  \
    \      if(a + b > c) {\n            triangleArea = -1\n        } else {\n    \
    \        // Find out which side has the most length.\n            if(a + c > b)\
    \ {\n                sideSum = a\n                sideArea = a * b \n        \
    \    } else if(a + c > c) {\n                sideSum = c\n                sideArea\
    \ = c * c \n            } else {\n                sideSum = b\n              \
    \  sideArea = b * b\n            }\n            // Find out the area of triangle\
    \ based on area of sides.\n            triangleArea = sideArea / sideSum\n   \
    \     }\n        // Return the area rounded to 2 decimal points.\n        triangleArea.toFloat.toString.substring(0,2) ",
  "      val a = Math.abs(a)\n      val b = Math.abs(b)\n      val c = Math.abs(c)\n\
    \      val abc = a * a + b * b + c * c\n      if (abc > 0)\n        abc / Math.sqrt(abc)\n\
    \      else\n        -1l", "        val a = math.max(a,b)\n        val b = math.min(a,b)\n\
    \        val c = math.max(a,c)\n        val d = math.min(a,c)\n        val sum\
    \ = math.max(b,c)\n        val area = (a + b + c + d) / 4.0\n        val isValid\
    \ = sum > d\n        return math.max(area,-1f)", "        val abs = Math.abs(a-b)\n\
    \        val acb = Math.abs(c-b)\n        if (abs > acb) {\n            val abs\
    \ = Math.abs(a-c)\n            val acb = Math.abs(b-c)\n            if (abs >\
    \ acb) {\n                (a+b+c)/2\n            } else {\n                -1\n\
    \            }\n        } else {\n            -1\n        }"]
stop_tokens:
- "\n    }\n"
