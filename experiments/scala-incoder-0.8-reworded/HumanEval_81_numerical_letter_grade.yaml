name: HumanEval_81_numerical_letter_grade
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // It is the last week of the semester and the teacher has to give the grades\n\
  \    // to students. The teacher has been making her own algorithm for grading.\n\
  \    // The only problem is, she has lost the code she used for grading.\n    //\
  \ She has given you a list of GPAs for some students and you have to write \n  \
  \  // a function that can output a list of letter grades using the following table:\n\
  \    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7\
  \                A \n    // > 3.3                A- \n    // > 3.0             \
  \   B+\n    // > 2.7                B \n    // > 2.3                B-\n    // >\
  \ 2.0                C+\n    // > 1.7                C\n    // > 1.3           \
  \     C-\n    // > 1.0                D+ \n    // > 0.7                D \n    //\
  \ > 0.0                D-\n    // 0.0                E\n    // Example:\n    //\
  \ >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat,\
  \ 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n\
  \    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
  \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
  D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
  D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
  E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
  \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
  \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        val gpaList = grades.toList\n\
    \        val length = gpaList.size\n        val aList = List[String]()\n     \
    \   var sum = 0\n        for(i <- 0 until length) {\n            sum = sum + gpaList(i)\n\
    \        }\n        var letterGrade = \"\"\n        val gradeTable = Map(0 ->\
    \ \"E\",\n                    3 -> \"C\",\n                    6 -> \"B\",\n \
    \                   9 -> \"A\")\n        for(i <- 0 until length) {\n        \
    \    if(gpaList(i) < sum) {\n                val index = (sum - gpaList(i)).toInt\n\
    \                val grade = gradeTable(index)\n                letterGrade =\
    \ letterGrade + grade\n            } else {\n                val index = (sum\
    \ - gpaList(i)).toInt\n                val grade = gradeTable(index)\n       \
    \         letterGrade = letterGrade + grade + \"-\"\n            }\n        }\n\
    \        aList = aList :+ letterGrade\n        aList", "        val result: mutable.MutableList[String]\
    \ = mutable.MutableList[String]()\n        for(grade <- grades) {\n          \
    \  if (grade < 3.0) result.add(\"F\")\n            else if (grade < 3.3) result.add(\"\
    D-\")\n            else if (grade < 3.7) result.add(\"C\")\n            else if\
    \ (grade < 4.0) result.add(\"B-\")\n            else if (grade < 4.3) result.add(\"\
    B-\")\n            else if (grade < 4.7) result.add(\"B-\")\n            else\
    \ if (grade < 5.0) result.add(\"B-\")\n            else if (grade < 5.3) result.add(\"\
    A-\")\n            else if (grade < 5.7) result.add(\"A-\")\n            else\
    \ if (grade < 6.0) result.add(\"A-\")\n            else if (grade < 6.3) result.add(\"\
    A-\")\n            else if (grade < 6.7) result.add(\"A-\")\n            else\
    \ if (grade < 7.0) result.add(\"A-\")\n            else result.add(\"A-\")\n \
    \       }\n        result.toList", "        grades.toList.sortWith((a, b) => a\
    \ < b).map (g => {\n            val grade = g.toString.toDouble\n            val\
    \ letterGrade = if(grade < 0.0) (\"D\") else if (grade > 0.7) (\"D\") else if\
    \ (grade > 1.0) (\"C\") else if (grade > 1.3) (\"C\") else if (grade > 1.7) (\"\
    C\") else if (grade > 2.0) (\"C\") else if (grade > 2.3) (\"C\") else if (grade\
    \ > 2.7) (\"C\") else if (grade > 3.0) (\"C\") else if (grade > 3.3) (\"C\") else\
    \ if (grade > 3.7) (\"C\") else if (grade > 4.0) (\"C\") else if (grade > 4.3)\
    \ (\"C\") else if (grade > 4.7) (\"C\") else if (grade > 5.0) (\"C\") else if\
    \ (grade > 5.3) (\"C\") else if (grade > 5.7) (\"C\") else if (grade > 6.0) (\"\
    C\") else if (grade > 6.3) (\"C\") else if (grade > 6.7) (\"C\") else if (grade\
    \ > 7.0) (\"C\") else if (grade > 7.3) (\"C\") else if (grade > 7.7) (\"C\") else\
    \ if (grade > 8.0) (\"C\") else if (grade > 8.3) (\"C\") else if (grade > 8.7)\
    \ (\"C\") else if (grade > 9.0) (\"C\") else if (grade > 9.3) (\"C\") else if\
    \ (grade > 9.7) (\"C\") else if (grade > 10.0) (\"C\") else if (grade > 10.3)\
    \ (\"C\") else if (grade > 10.7) (\"C\") else if (grade > 11.0) (\"C\") else if\
    \ (grade > 11.3) (\"C\") else if (grade > 11.7) (\"C\") else if (grade > 12.0)\
    \ (\"C\") else if (grade > 12.3) (\"C\") else if (grade > 12.7) (\"C\") else if\
    \ (grade > 13.0) (\"C\") else if (grade > 13.3) (\"C\") else if (grade > 13.7)\
    \ (\"C\") else if (grade > 14.0) (\"C\") else if (grade > 14.3) (\"C\") else if\
    \ (grade > 14.7) (\"C\") else if (grade > 15.0) (\"C\") else if (grade > 15.3)\
    \ (\"C\") else if (grade > 15.7) (\"C\") else if (grade > 16.0) (\"C\") else if\
    \ (grade > 16.3) (\"C\") else if (grade > 16.7) (\"C\") else if (grade > 17.0)\
    \ (\"C\") else if (grade > 17.3) (\"C\") else if (", "        val gradesGrouped\
    \ = grades.groupBy(g => math.ceil(g))\n        var gpas : Map[Int, List[Float]]\
    \ = gradesGrouped.mapValues( _.sortWith(math.signum))\n        gpas ++= gpas ++\
    \ List(grades.last, grades.head +- 1).groupBy(g => math.floor(g))\n        val\
    \ letterGrades : Map[Int, String] = gpas map { case (k, v) => (k, 'D') -> if (v.length\
    \ < 2) v.toString.reverse else v.sortWith(math.signum).reverse } ++ Map(0 -> 'E')\n\
    \        val gpaList : List[Float] = gpas map {case (k,v) => v}.toList\n     \
    \   val letterGradeList : List[String] = letterGrades map {case (k,v) => v}.toList\n\
    \        val gradesSorted = gpaList sortWith(math.signum)\n        gpaList.zip(letterGradeList).map{case\
    \ (grade, letter) => (grade,letter)}.toList", '        ', "        def gradeEquation(f:\
    \ Float => String) : List[String] = {\n            val list = new ListBuffer[String]()\n\
    \            val minGrade = grades.min\n            val maxGrade = grades.max\n\
    \            val gradeDiff = maxGrade - minGrade\n            for(i <- grades.indices)\
    \ list += f(grades(i)) \n            list += f\"$minGrade\" + if (gradeDiff >\
    \ 0) \"+\" else \"\"\n            list.toList\n        }\n        def gradeEquation(f:\
    \ Float => String) : List[String] = {\n            val list = new ListBuffer[String]()\n\
    \            val minGrade = grades.min\n            val maxGrade = grades.max\n\
    \            val gradeDiff = maxGrade - minGrade\n            for(i <- grades.indices)\
    \ list += f(grades(i)) \n            list += f\"$minGrade\" + if (gradeDiff >\
    \ 0) \"+\" else \"\"\n            list.toList\n        }\n        gradeEquation(x\
    \ => \"A\"+x.toString.toList.map(x => x match {case 0 => \"-\";case x => \"+\"\
    }).getOrElse(\"\"))", "        val gradesSorted = grades.sortWith(_.toInt < _.toInt)\n\
    \        val gpaSum = gradesSorted.foldLeft(0f){(acc, value) => acc + value}\n\
    \        val gpaAverage = gradesSorted.foldLeft(1f){(acc, value) =>\n        \
    \    acc + (value / gradesSorted.length)\n        }\n        val gpaSumDecimal\
    \ = math.round(gpaSum)\n        val gpaAverageDecimal = math.round(gpaAverage)\n\
    \        val gpaSum = math.round(gpaSum)\n        val gpaAverage = math.round(gpaAverage)\n\
    \        val gpaDiff = math.abs(gpaSum - gpaAverage)\n        val gpaLetterGrades\
    \ = List.fill(gradesSorted.length)(\"E\")\n        val gpaLetterGradesLetters\
    \ = List.fill(gradesSorted.length)(\"A+\", \"B\", \"C-\", \"C\", \"A-\", \"D+\"\
    , \"D\", \"D-\")\n        if(gpaSumDecimal == 0.0) {\n            gradesSorted.foreach(gpaLetterGrades(_)\
    \ += \"-\")\n        } else {\n            gradesSorted.foreach(gpaLetterGrades(_)\
    \ += gpaLetterGradesLetters(math.round(gpaSumDecimal))))\n        }\n        gradesSorted.map(letter\
    \ => letter -> gpaLetterGrades(gradesSorted.indexOf(letter))).toList", '        grades.map(grade
    => if (grade > 0 && grade < 3.0) "A+" else if (grade > 3.0 && grade < 4.0) "A"
    else if (grade > 4.0 && grade < 5.0) "A-" else if (grade > 5.0 && grade < 6.0)
    "B+" else if (grade > 6.0 && grade < 7.0) "B" else if (grade > 7.0 && grade <
    8.0) "B-" else if (grade > 8.0 && grade < 9.0) "C+" else if (grade > 9.0 && grade
    < 10.0) "C" else if (grade > 10.0 && grade < 11.0) "C-" else if (grade > 11.0
    && grade < 12.0) "D+" else if (grade > 12.0) "D" else "D-" ).filter(_.nonEmpty)',
  "        val minGrade = grades.min\n        val maxGrade = grades.max\n\n      \
    \  if(minGrade < 0.5 && maxGrade < 0.5) {\n            return gradeEquation(grades.map(x\
    \ => (x/10.0).round(2).asInstanceOf[String]))\n        } else if (minGrade < 0.5\
    \ && maxGrade > 0.5) {\n            return gradeEquation(grades.map(x => (x/10.0).round(2).asInstanceOf[String])\
    \ ++ List(\"\"))\n        } else if (minGrade > 0.5 && maxGrade < 0.5) {\n   \
    \         return gradeEquation(grades.map(x => (x/10.0).round(2).asInstanceOf[String])\
    \ ++ List(\"\")) \n        } else if (minGrade > 0.5 && maxGrade > 0.5) {\n  \
    \          return gradeEquation(grades.map(x => (x/10.0).round(2).asInstanceOf[String])\
    \ ++ List(\"\"))\n        } else {\n            return gradeEquation(grades.map(x\
    \ => (x/10.0).round(2).asInstanceOf[String]) ++ List(\"\"))\n        }", "   \
    \   grades.flatMap { grade => \n         if(grade >= 3.7) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 3.3) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 3) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 2.7) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 2.3) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 2) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 1.7) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 1) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade >= 0.7) {\n             List(s\"\
    A+\", s\"A\", s\"A-\", s\"B+\", s\"B\", s\"B-\", s\"C+\", s\"C\", s\"C-\", s\"\
    D+\", s\"D\", s\"D-\")\n         } else if(grade == 0) {\n             List(s\"\
    E\", s)\n         }\n      }", "        var result : List[String] = Nil\n    \
    \    // Start with a list that contains only the grades of the first student\n\
    \        var firstStudentGrades : List[Float] = grades.init\n\n        // For\
    \ each student except the last one, find the grades \n        // of the student\
    \ with the highest GPA (Highest Average)\n        // and add them to a list\n\
    \        var maxGrade : Float = 0.0\n        var maxStudentGrade : List[Float]\
    \ = Nil\n        for (i <- grades.indices until grades.length-1){\n          \
    \  // Find the students highest grade\n            if (firstStudentGrades.head\
    \ > grades(i)) {\n                maxGrade = firstStudentGrades.head\n       \
    \         maxStudentGrade = firstStudentGrades.tail\n            } else {\n  \
    \              maxGrade = grades(i)\n                maxStudentGrade = Nil\n \
    \           }\n            // If a new student with a higher average is found,\n\
    \            // then add the new student to a list with all of the highest grades\n\
    \            firstStudentGrades = maxStudentGrade\n        }\n        // For each\
    \ student\n        for (i <- grades.indices until grades.length-1){\n        \
    \    // If this student has a higher average than the last student,\n        \
    \    // then add the letter grade to the list\n            if ((maxGrade > grades(i))\
    \ && (firstStudentGrades.head > grades(i))) {\n                result :+= maxStudentGrade(0)\n\
    \                maxStudentGrade = Nil\n            } else {\n               \
    \ // If this student has a lower average than the last student, \n           \
    \     // then add the letter grade to the list\n                if ((maxGrade\
    \ < grades(i)) && (firstStudentGrades.head < grades(i))) {\n                 \
    \   result :+= maxStudentGrade(0)\n                    maxStudentGrade = Nil\n\
    \                }\n            }\n        }\n        // For the last student,\
    \ if the last student has a higher average than \n        // all other students,\
    \ add D-\n        if (grades.last > maxGrade) {\n            result :+= (\"D-\"\
    )\n        }\n        // Return the list\n        result", "        grades.map\
    \ {grade => \n            val gradeA: Float = grade match {\n                case\
    \ 4.0 => \"A+\"\n                case higherThan3.7 => \"A\"\n               \
    \ case higherThan3.3 => \"A-\"\n                case higherThan3.0 => \"B+\"\n\
    \                case higherThan2.7 => \"B\"\n                case higherThan2.3\
    \ => \"B-\"\n                case higherThan2.0 => \"C+\"\n                case\
    \ higherThan1.7 => \"C\"\n                case higherThan1.3 => \"C-\"\n     \
    \           case higherThan1.0 => \"D+\"\n                case higherThan0.7 =>\
    \ \"D\"\n                case higherThan0.0 => \"D-\"\n                case 0.0\
    \ => \"E\"\n            }\n            val gradeB: Float = grade match {\n   \
    \             case higherThan4.0 => \"A+\"\n                case higherThan3.7\
    \ => \"A\"\n                case higherThan3.3 => \"A-\"\n                case\
    \ higherThan3.0 => \"B+\"\n                case higherThan2.7 => \"B\"\n     \
    \           case higherThan2.3 => \"B-\"\n                case higherThan2.0 =>\
    \ \"C+\"\n                case higherThan1.7 => \"C\"\n                case higherThan1.3\
    \ => \"C-\"\n                case higherThan1.0 => \"D+\"\n                case\
    \ higherThan0.7 => \"D\"\n                case higherThan0.0 => \"D-\"\n     \
    \           case 0.0 => \"E\"\n            }\n            val gradeC: Float =\
    \ grade match {\n                case higherThan4.0 => \"A+\"\n              \
    \  case higherThan3.7 => \"A\"\n                case higherThan3.3 => \"A-\"\n\
    \                case higherThan3.0 => \"B+\"\n                case higherThan2.7\
    \ => \"B\"\n                case higherThan2.3 => \"B-\"\n                case\
    \ higherThan2.0 => \"C+\"\n                case higherThan1.7 => \"C\"\n     \
    \           case higherThan1.3 => \"C-\"\n                case higherThan1.0 =>\
    \ \"D+\"\n                case higherThan0.7 => \"D\"\n                case higherThan0.0\
    \ => \"D-\"\n                case 0.0 => \"E\"\n            }\n            val\
    \ gradeD: Float = grade match {\n                case higherThan4.0 => \"A+\"\n\
    \                case higherThan3.7 => \"A\"\n                case higherThan3.3\
    \ => \"A-\"\n                case higherThan3.0 => \"B+\"\n                case\
    \ higherThan2.7 => \"B\"\n                case higherThan2.3 => \"B-\"\n     \
    \           case higherThan2.0 => \"C+\"\n                case higherThan1.7 =>\
    \ \"C\"\n                case higherThan", "        val gradesSet = grades.toSet\n\
    \        if (gradesSet.size == 0) List(\"E\")\n        else if (gradesSet contains\
    \ 4l) List(\"A+\")\n        else if (gradesSet contains 3l) List(\"A\")\n    \
    \    else if (gradesSet contains 2l) List(\"A-\")\n        else if (gradesSet\
    \ contains 1f) List(\"B+\")\n        else if (gradesSet contains 1.7f) List(\"\
    B\")\n        else if (gradesSet contains 1.5f) List(\"B-\")\n        else if\
    \ (gradesSet contains 1f) List(\"C+\")\n        else if (gradesSet contains 1l)\
    \ List(\"C\")\n        else if (gradesSet contains 0.9f) List(\"C-\")\n      \
    \  else if (gradesSet contains 0.7f) List(\"D+\")\n        else if (gradesSet\
    \ contains 0.5f) List(\"D\")\n        else if (gradesSet contains 0.3f) List(\"\
    D-\")\n        else List(\"E\")", "        val gradesMap : Map[Float, String]\
    \ = grades.map(x => (x, getLetter(x)))\n        grades.filterNot(x => x == 0).map(x\
    \ => getLetter(gradesMap.get(x)))", "        val gradeArray = grades.toArray\n\
    \        val gradeIndex = new Array[Int](gradeArray.length)\n        val minGrade\
    \ = gradeArray(0)\n        val maxGrade = gradeArray(0)\n        var minIndex\
    \ = 0\n        var maxIndex = 0\n        for ( i <- 0 until gradeArray.length\
    \ ) {\n            if ( gradeArray(i) < minGrade ) minGrade = gradeArray(i)\n\
    \            if ( gradeArray(i) > maxGrade ) maxGrade = gradeArray(i)\n      \
    \      if ( gradeArray(i) < minGrade ) minIndex = i\n            if ( gradeArray(i)\
    \ > maxGrade ) maxIndex = i\n        }\n\n        var gradeSum = gradeArray(0)\n\
    \        for ( i <- 0 until gradeArray.length ) {\n            gradeSum = gradeSum\
    \ + gradeArray(i)\n        }\n        val gradeMean = gradeSum / gradeArray.length\n\
    \        for ( i <- 0 until gradeArray.length ) {\n            val grade = gradeArray(i)\
    \ - gradeMean\n            if ( grade < 0 ) grade = grade * -1\n            val\
    \ gradePercent = (grade * 100f / minGrade).toInt\n            if ( gradePercent\
    \ < 0 ) gradePercent = gradePercent * -1\n            if ( gradePercent < 1 )\
    \ {\n                if ( grade < minGrade ) gradePercent = 0\n              \
    \  else if ( grade > maxGrade ) gradePercent = 100\n                else gradePercent\
    \ = gradePercent * -1\n            }\n            gradeIndex(maxIndex) = gradePercent\
    \ + 65\n            gradeIndex(maxIndex + 1) = gradePercent + 66\n           \
    \ gradeIndex(maxIndex + 2) = gradePercent + 67\n            gradeIndex(maxIndex\
    \ + 3) = gradePercent + 68\n            gradeIndex(maxIndex + 4) = gradePercent\
    \ + 69\n            gradeIndex(maxIndex + 5) = gradePercent + 70\n           \
    \ gradeIndex(maxIndex + 6) = gradePercent + 71\n            gradeIndex(maxIndex\
    \ + 7) = gradePercent + 72\n            gradeIndex(maxIndex + 8) = gradePercent\
    \ + 73\n            gradeIndex(maxIndex + 9) = gradePercent + 74\n           \
    \ gradeIndex(maxIndex + 10) = gradePercent + 75\n            gradeIndex(maxIndex\
    \ + 11) = gradePercent + 76\n            gradeIndex(maxIndex + 12) = gradePercent\
    \ + 77\n            gradeIndex(maxIndex + 13) = gradePercent + 78\n          \
    \  gradeIndex(maxIndex", "        if (grades.isEmpty) \n            grades.toList\n\
    \        else {\n            grades.head match {\n                case 0.toFloat\
    \ => (grades.filter(_ <= 4.0).map(_+\"\").toList)\n                case _ => grades.filter(_\
    \ > 4.0).zipWithIndex.map( \n                    (x:Float, i:Int) => \n      \
    \                  if ((x < 3.0 && x >= 3.3)) {\n                            if\
    \ (x < 3.3) {\n                                x.toFloat + \"\"\n            \
    \                } else {\n                                if (x < 3.0) {\n  \
    \                                  if (x < 3.7) {\n                          \
    \              x.toFloat + \"\"\n                                    } else {\n\
    \                                        if (x < 3.1) {\n                    \
    \                        x.toFloat + \"\"\n                                  \
    \      } else {\n                                            if (x < 3.3) {\n\
    \                                                x.toFloat + \"\"\n          \
    \                                  } else {\n                                \
    \                if (x < 2.7) {\n                                            \
    \        x.toFloat + \"\"\n                                                } else\
    \ {\n                                                    if (x < 2.3) {\n    \
    \                                                    x.toFloat + \"\"\n      \
    \                                              } else {\n                    \
    \                                    if (x < 2.0) {\n                        \
    \                                    x.toFloat + \"\"\n                      \
    \                                  } else {\n                                \
    \                            if (x < 1.7) {\n                                \
    \                                x.toFloat + \"\"\n                          \
    \                                  } else {\n                                \
    \                                if (x < 1.3) {\n                            \
    \                                        x.toFloat + \"\"\n                  \
    \                                              } else {\n                    \
    \                                                if (x < 1.0) {\n            \
    \                                                            x.toFloat + \"\"\n\
    \                                                                    } else {\n\
    \                                                                        x.toFloat\
    \ + \"\"\n                                                                   \
    \ }\n                                                                }\n     \
    \                                                       }\n                  \
    \                                      }\n                                   \
    \                 }\n                                                }\n     \
    \                                       }\n                                  \
    \      }\n                                    }\n                            \
    \    } else {\n                                    if (x < 2.7) {\n          \
    \                              x.toFloat + \"\"\n                            \
    \        } else {\n                                        x.toFloat + \"\"\n\
    \                                    }\n                                }\n  \
    \                          }\n                        } else {\n             \
    \               if (x < 2.3) {\n                                x.toFloat + \"\
    \"\n                            } else {\n                                if (x\
    \ < 2.0) {\n                                    if (x < 1.7) {\n             \
    \                           x.toFloat + \"\"\n                               \
    \     } else {\n                                        if (x < 1.3) {\n     \
    \                                       x.toFloat + \"\"\n                   \
    \                     } else {\n                                            if\
    \ (x < 1.0) {\n                                                x.toFloat + \"\"\
    \n                                            } else {\n                     \
    \                           x.toFloat + \"\"\n                               \
    \             }\n                                        }\n                 \
    \                   }\n                                } else {\n            \
    \                        if (x < 1.7) {\n                                    \
    \    x.toFloat + \"\"\n                                    } else {\n        \
    \                                x.toFloat + \"\"\n                          \
    \          }\n                                }\n                            }\n\
    \                        }\n                    ).filter(_ != 0).map(_._1+\"\"\
    ).toList\n            }\n        }", '        // Implement this function', " \
    \       val min = grades.min\n        val max = grades.max\n        val sum =\
    \ grades.sum\n\n        val letterGrades = (0 until grades.size).map{i =>\n  \
    \          val delta = if (max > i) 1 else 0\n            val grade = grades(i)\
    \ + delta\n            val letter = if (grade < 1) \"E\" else if (grade < 3) \"\
    D\" else if (grade < 5) \"C-\" else if (grade < 7) \"B-\" else if (grade < 9)\
    \ \"B-\" else if (grade < 11) \"C-\" else \"B-\"\n            (grade.abs, letter)\n\
    \        }\n\n        val result = (0 until letterGrades.size).map{i =>\n    \
    \        val grade = sum - letterGrades(i)(0).abs\n            val letter = letterGrades(i)(1)\n\
    \            letter\n        }\n\n        result.reverse", "        val gradeCount\
    \ = grades.size\n        val gradeMean = grades.sum / gradeCount\n        val\
    \ gradesSorted: Array[Float] = grades.sortWith(_ < _)\n        val gradesMeanSquared\
    \ = grades.map(x => x * x).sum / gradeCount\n        val gradesVariance = gradesMeanSquared.map(x\
    \ => x - gradeMean)\n        val gradesDeviations = grades.map(x => (x - gradeMean)\
    \ / gradesVariance)\n        val gradesDeviationsNorm = gradesDeviations.map(x\
    \ => math.abs(x))\n        val gradesDeviationsNormSum = gradesDeviationsNorm.sum\n\
    \        val gradesDeviationsNormAvg = gradesDeviationsNorm.map(x => x / gradesDeviationsNormSum)\n\
    \        val gradesDeviationsNormMax = gradesDeviationsNorm.map(x => math.max(x))\n\
    \n        val gradesDeviationsNormAvg = gradesDeviationsNorm.map(x => x / gradesDeviationsNormSum)\n\
    \        val gradesDeviationsNormMax = gradesDeviationsNorm.map(x => math.max(x))\n\
    \n        val gradesDeviationsNormAvg2 = gradesDeviationsNorm.map(x => x / gradesDeviationsNormSum)\n\
    \        val gradesDeviationsNormMax2 = gradesDeviationsNorm.map(x => math.max(x))\n\
    \n        // Find the letter grade with the highest deviation\n        val letterGrades\
    \ = grades.map(x => {\n            val gradesDeviationSum = gradesDeviationsNorm.sum\n\
    \            val gradesDeviationSumAvg = gradesDeviationSum.map(x => x / gradesDeviationSumSum)\n\
    \            val gradesDeviationSumMax = gradesDeviationSum.map(x => math.max(x))\n\
    \            val gradesDeviationSumMaxAvg = gradesDeviationSumMax.map(x => x /\
    \ gradesDeviationSumMax.sum)\n            val gradesDeviationSumMaxAvg = gradesDeviationSumMax.map(x\
    \ => x / gradesDeviationSumMax.sum)\n            val gradesDeviationSumMaxAvg\
    \ = gradesDeviationSumMax.map(x => x / gradesDeviationSumMax.sum)\n          \
    \  if (gradesDeviationSumMaxAvg < 0.05) {", "        val gradesCopy = grades\n\
    \        val sortedGrades = gradesCopy.sortWith((a, b) => a.toLong - b.toLong)\n\
    \        val gradesIncrement = Array(\n            0.0f, 1.0f, 2.0f, 3.0f, 4.0f,\
    \ 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f, 13.0f, 14.0f, 15.0f, 16.0f,\
    \ 17.0f, 18.0f, 19.0f, 20.0f, 21.0f, 22.0f, 23.0f, 24.0f, 25.0f, 26.0f, 27.0f,\
    \ 28.0f, 29.0f, 30.0f, 31.0f, 32.0f, 33.0f, 34.0f, 35.0f, 36.0f, 37.0f, 38.0f,\
    \ 39.0f, 40.0f, 41.0f, 42.0f, 43.0f, 44.0f, 45.0f, 46.0f, 47.0f, 48.0f, 49.0f,\
    \ 50.0f, 51.0f, 52.0f, 53.0f, 54.0f, 55.0f, 56.0f, 57.0f, 58.0f, 59.0f, 60.0f,\
    \ 61.0f, 62.0f, 63.0f, 64.0f, 65.0f, 66.0f, 67.0f, 68.0f, 69.0f, 70.0f, 71.0f,\
    \ 72.0f, 73.0f, 74.0f, 75.0f, 76.0f, 77.0f, 78.0f, 79.0f, 80.0f, 81.0f, 82.0f,\
    \ 83.0f, 84.0f, 85.0f, 86.0f, 87.0f, 88.0f, 89.0f, 90.0f, 91.0f, 92.0f, 93.0f,\
    \ 94.0f, 95.0f, 96.0f, 97.0f, 98.0f, 99.0f, 100.0f, 101.0f, 102.0f, 103.0f, 104.0f,\
    \ 105.0f, 106.0f, 107.0f, 108.0f, 109.0f, 110.0f, 111.0f, 112.0f, 113.0f, 114.0f,\
    \ 115.0f, 116.0f, 117.0f, 118.0f, 119.0f, 120.0f, 121.0f, 122.0f, 123.0f, 124.0f,\
    \ 125.0f, 126.0f, 127.0f, 128.0f, 129.0f, 130.0f, 131.0f, 132.0f, 133.0f, 134.0f,\
    \ 135.0f, 136.0f, 137.0f, 138.0f, 139.0f, 140.0f, 141.0f, 142.0f, 143.0f, 144.0f,\
    \ 145.0f, 146.0f, 147.0f, 148.0f, 149.0f, 150.0f, 151.0f, 152.0f, 153.0f, 154.0f,\
    \ 155.0f, 156.0f, 157.0f, 158.0f, 159.0f, ", "        grades match {\n       \
    \     case Nil => Nil\n            case x :: Nil => Nil\n            case x ::\
    \ y :: rest => if (x > y) \"A+\" else (\"A\" :: x).reverse\n            \n   \
    \         // If there is one value smaller than or equal to zero\n           \
    \ case x :: xs => if (x >= 0 && x <= 10) {\n                var list: List[String]\
    \ = Nil\n                var temp = 0.0f\n                val xlen = xs.length\n\
    \                var i = 0\n                // Calculate the value of each GPA\n\
    \                while (i < xlen) {\n                    temp = temp + (x(i) *\
    \ x(i))\n                    i += 1\n                }\n                // Get\
    \ the grade for each GPA\n                while (temp >= 0.0 && i < xlen) {\n\
    \                    temp -= (x(i) * x(i))\n                    i += 1\n     \
    \           }\n                // Return letter grade\n                if (temp\
    \ < 0.0) list.reverse\n                else {\n                    val a = temp.toInt\n\
    \                    if (a >= 0 && a <= 7) {\n                        list = list\
    \ :+ (\"A+\" :+ (a.toString + \"\"))\n                    } else if (a >= 8 &&\
    \ a<= 15) {\n                        list = list :+ (\"A-\" :+ (a.toString + \"\
    \"))\n                    } else if (a >= 16 && a<= 21) {\n                  \
    \      list = list :+ (\"B+\" :+ (a.toString + \"\"))\n                    } else\
    \ if (a >= 22 && a<= 27) {\n                        list = list :+ (\"B\" :+ (a.toString\
    \ + \"\"))\n                    } else if (a >= 28 && a<= 33) {\n            \
    \            list = list :+ (\"B-\" :+ (a.toString + \"\"))\n                \
    \    } else if (a >= 34 && a<= 39) {\n                        list = list :+ (\"\
    C+\" :+ (a.toString + \"\"))\n                    } else if (a >= 40 && a<= 45)\
    \ {\n                        list = list :+ (\"C\" :+ (a.toString + \"\"))\n \
    \                   } else if (a >= 46 && a<= 51) {\n                        list\
    \ = list :+ (\"C-\" :+ (a.toString + \"\"))\n                    } else if (a\
    \ >= 52 && a<= 57) {\n                        list = list :+ (\"D+\" :+ (a.toString\
    \ + \"\"))\n                    } else if (a >= 58 && a<= 63) {\n            \
    \            list = list :+ (\"D\" :+ (a.toString + \"\"))\n                 \
    \   } else if (a >= 64 && a<= 69) {\n                        list = list :+ (\"\
    D-\" :+ (a.toString + \"\"))\n                    } else if (a >= 70 && a<= 74)\
    \ {\n                        list = list :+ (\"E\" :+ (a.toString + \"\"))\n \
    \                   }\n                }\n            }\n            // If there\
    \ are two values greater than or equal to zero\n            case x :: y ", " \
    \     def toInt(i : Float) : Int = {\n        if (i == 0) 0 else i.toInt\n   \
    \   }\n      val x = grades.zipWithIndex\n      val length = grades.length\n \
    \     x.map { \n        case (grade, i) => toInt(grade).toString + if (i==0) \"\
    \" else (i.toString + \"-\")\n      }.map(s => s.length ==  0 \"\" + s.substring(s.length\
    \ - 1))", '      ', "        var gradesMap : Map[String, Int] = Map[String, Int]()\n\
    \        grades.foreach { grade => gradesMap(s\"$grade\"->1) }\n        grades.foreach\
    \ { grade =>\n            if (gradesMap.contains(s\"$grade\"->1)) gradesMap +=\
    \ (s\"$grade\"->gradesMap(s\"$grade\"->1) * 2)\n            else gradesMap +=\
    \ (s\"$grade\"->1) \n        }\n        grades.foreach { grade =>\n          \
    \  if (gradesMap.contains(s\"$grade\"->1)) gradesMap += (s\"$grade\"->gradesMap(s\"\
    $grade\"->1) * 2)\n            else gradesMap += (s\"$grade\"->1)\n        }\n\
    \        grades.foreach { grade =>\n            if (gradesMap.contains(s\"$grade\"\
    ->1)) gradesMap += (s\"$grade\"->gradesMap(s\"$grade\"->1) * 2)\n            else\
    \ gradesMap += (s\"$grade\"->1)\n        }\n        grades.foreach { grade =>\n\
    \            if (gradesMap.contains(s\"$grade\"->1)) gradesMap += (s\"$grade\"\
    ->gradesMap(s\"$grade\"->1) * 2)\n            else gradesMap += (s\"$grade\"->1)\n\
    \        }\n        grades.foreach { grade =>\n            if (gradesMap.contains(s\"\
    $grade\"->1)) gradesMap += (s\"$grade\"->gradesMap(s\"$grade\"->1) * 2)\n    \
    \        else gradesMap += (s\"$grade\"->1)\n        }\n        grades.foreach\
    \ { grade =>\n            if (gradesMap.contains(s\"$grade\"->1)) gradesMap +=\
    \ (s\"$grade\"->gradesMap(s\"$grade\"->1) * 2)\n            else gradesMap +=\
    \ (s\"$grade\"->1)\n        }\n        grades.foreach { grade =>\n           \
    \ if (gradesMap.contains(s\"$grade\"->1)) gradesMap += (s\"$grade\"->gradesMap(s\"\
    $grade\"->1) * 2)\n            else gradesMap += (s\"$grade\"->1)\n        }\n\
    \        grades.foreach { grade =>\n            if (gradesMap.contains(s\"$grade\"\
    ->1)) gradesMap += (s\"$grade\"->gradesMap(s\"$grade\"->1) * 2)\n            else\
    \ gradesMap += (s\"$grade\"->1)\n        }\n        grades.foreach { grade =>\n\
    \            if (gradesMap.contains(s\"$grade\"->1)) ", "        var min = grades.min\n\
    \        var max = grades.max\n        var total = 0\n        var totalSum = 0\n\
    \        var average = 0\n        var averageSum = 0\n        var grades = grades.map(\
    \ f => {\n            total = total + f\n            totalSum = totalSum + f\n\
    \        })\n        average = totalSum / grades.length\n        grades = grades.map(\
    \ f => {\n            averageSum = averageSum + f * (average - totalSum)\n   \
    \     })\n        grades = grades.map( f => {\n            val grade = if (f >\
    \ average) \"+\" else if (f < average) \"-\" else \"=\"\n            val percentage\
    \ = if (f < average) f.toInt * 100 - average else f.toInt * average - 100\n  \
    \          val gradeNumber = percentage / 100.0\n            val gradeString =\
    \ s\"$gradeNumber%${if (gradeString.isEmpty) \"\" else gradeString}%\"\n     \
    \       return gradeString\n        })\n        return grades", "        val gradesSize\
    \ = grades.size\n        val avg = (grades.sum / gradesSize).toFloat\n       \
    \ val diffs = grades.zipWithIndex.flatMap {\n            case (grade, index) =>\n\
    \                val nextGrade = grades(index + 1)\n                val difference\
    \ = grade - nextGrade\n                if (difference < 0) {\n               \
    \     List[String](grade.toString + \"+\", \"-\", nextGrade.toString + \"-\",\
    \ \"\", \"-\")\n                } else if (difference > 0) {\n               \
    \     List[String](grade.toString + \"+\", \"+\", nextGrade.toString + \"+\",\
    \ \"\", \"+\")\n                } else {\n                    List[String](grade.toString\
    \ + \"-\", \"-\", nextGrade.toString + \"-\", \"\", \"-\")\n                }\n\
    \        }\n        var grades : List[String] = List()\n        var lastGrade\
    \ : Float = 0.0\n        for (diff <- diffs) {\n            lastGrade = diff._2\n\
    \            if (diff._1.toString == diff._3.toString) {\n                grades\
    \ = diff._1 :: grades\n                grades.last\n            } else if (diff._1.toString\
    \ < diff._3.toString) {\n                grades = diff._1 :: grades\n        \
    \        grades.last\n            } else {\n                grades = diff._3 ::\
    \ grades\n                grades.last\n            }\n        }\n        grades.toList",
  "        val gradeMap : Map[Float, String] = Map(0.0 -> \"E\", 4.0 -> \"A+\", 3.7\
    \ -> \"A\", 3.3 -> \"A-\", 3.0 -> \"B+\", 2.7 -> \"B\", 2.3 -> \"B-\", 2.0 ->\
    \ \"C+\", 1.7 -> \"C\", 1.3 -> \"C-\", 1.0 -> \"D+\", 0.7 -> \"D\", 0.0 -> \"\
    D-\").withDefaultValue(\"E\")\n        val map = grades.map(gradeMap(_).toString)\n\
    \        val length = grades.length\n        (0 until length).map(i => i -> map.get(grades(i)))\n\
    \        .groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.map(_.charAt(0)))",
  '        // write your solution (fill in) here', "        def toGrade(n : Float)\
    \ : String =\n            if (n == 0.0) \"\"\n            else if (n > 2.0 &&\
    \ n < 3.0) \"B-\"\n            else if (n > 2.0 && n < 3.7) \"B-\"\n         \
    \   else if (n > 3.0 && n < 3.3) \"C+\"\n            else if (n > 3.0 && n < 3.7)\
    \ \"C+\"\n            else if (n > 3.0 && n < 3.3) \"C+\"\n            else if\
    \ (n > 3.0 && n < 3.0) \"C+\"\n            else if (n > 3.0 && n < 2.7) \"C+\"\
    \n            else if (n > 3.0 && n < 2.3) \"C+\"\n            else if (n > 3.0\
    \ && n < 2.0) \"C+\"\n            else if (n > 3.0 && n < 1.7) \"C+\"\n      \
    \      else if (n > 3.0 && n < 1.3) \"C+\"\n            else if (n > 3.0 && n\
    \ < 1.0) \"C+\"\n            else if (n > 3.0 && n < 0.7) \"C+\"\n           \
    \ else if (n > 3.0 && n < 0.0) \"C+\"\n            else if (n == 0.0) \"C\"\n\
    \            else if (n == 1.0) \"C\"\n            else if (n == 2.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            else if (n == 3.0) \"C\"\n            else if (n == 3.0) \"C\"\n\
    \            ", "        if (grades.isEmpty) List[String](\"E\")\n        else{\n\
    \            val sorted = grades.sortWith(_ < _)\n            var lastGrade =\
    \ sorted.last\n            var gradeString = List[String]()\n            while\
    \ (lastGrade > 0.0) {\n                gradeString ::= (lastGrade / lastGrade).toString.toUpperCase()\n\
    \                lastGrade = lastGrade - sorted((lastGrade / lastGrade).toFloat)\n\
    \            }\n            gradeString ::= lastGrade.toString.toUpperCase\n \
    \           gradeString\n        }", "        var gpa :List[Float] = List.empty\n\
    \        gpa = grades\n        var studentsGrades = List.empty\n        studentsGrades\
    \ = gradeEquation(gpa)\n        val students = studentsGrades.size + 1\n     \
    \   // The formula for letter grades is: \n        // gpa*100 + 50\n        //\
    \ The formula for numerical grades is \n        // gpa*10 + 5\n        var numGrades\
    \ = List.empty[String]\n        numGrades = studentsGrades.map(_.toString).zipWithIndex.map\
    \ { \n            case (grade : String, index : Int) => grade * 10 + index + 5\n\
    \        }\n        numGrades.toList.reverse.drop(1).map(_.toString).zip(studentsGrades).toList",
  "        var letterGrades: List[String] = Nil\n        var gpaSum = 0.0\n      \
    \  var gpaCount = 0\n        // Use a for loop \n        // to iterate through\
    \ the list of grades\n        for (grade <- grades) {\n            gpaSum += grade\n\
    \            gpaCount += 1\n            // If the gpaSum is greater than or equal\
    \ to 4.0,\n            // the letterGrades list will consist of \"A+\" etc.\n\
    \            if (gpaSum >= 4.0f) {\n                if (gpaCount == 1) letterGrades\
    \ = Nil\n                else letterGrades = List(\"A+\")\n                gpaSum\
    \ -= 4.0f\n                gpaCount = 1\n            } else if (gpaSum > 3.7f)\
    \ {\n                if (gpaCount == 1) letterGrades = Nil\n                else\
    \ letterGrades = List(\"A\")\n                gpaSum -= 3.7f \n              \
    \  gpaCount = 1\n            } else if (gpaSum > 3.2f) {\n                if (gpaCount\
    \ == 1) letterGrades = Nil\n                else letterGrades = List(\"A-\")\n\
    \                gpaSum -= 3.2f \n                gpaCount = 1\n            }\
    \ else if (gpaSum > 2.7f) {\n                if (gpaCount == 1) letterGrades =\
    \ Nil\n                else letterGrades = List(\"B+\")\n                gpaSum\
    \ -= 2.7f \n                gpaCount = 1\n            } else if (gpaSum > 2.3f)\
    \ {\n                if (gpaCount == 1) letterGrades = Nil\n                else\
    \ letterGrades = List(\"B\")\n                gpaSum -= 2.3f \n              \
    \  gpaCount = 1\n            } else if (gpaSum > 2.0f) {\n                if (gpaCount\
    \ == 1) letterGrades = Nil\n                else letterGrades = List(\"B-\")\n\
    \                gpaSum -= 2.0f \n                gpaCount = 1\n            }\
    \ else if (gpaSum > 1.7f) {\n                if (gpaCount == 1) letterGrades =\
    \ Nil\n                else letterGrades = List(\"C+\")\n                gpaSum\
    \ -= 1.7f\n                gpaCount = 1\n            } else if (gpaSum > 1.3f)\
    \ {\n                if (gpaCount == 1) letterGrades = Nil\n                else\
    \ letterGrades = List(\"C\")\n                gpaSum -= 1.3f \n              \
    \  gpaCount = 1\n            } else if (gpaSum > 1.0f) {\n                if (gpaCount\
    \ == 1) letterGrades = Nil\n                else letterGrades = List(\"C-\")\n\
    \                gpaSum -= 1.0f \n                gpaCount = 1\n            }\
    \ else if (gpaSum > 0.7f) {\n                if (gpaCoun", "        val gradesList\
    \ = grades.toList\n        val gradesMap = new mutable.LinkedHashMap[Float, String]\n\
    \        for (grade <- gradesList) {\n            if (gradesMap.contains(grade))\n\
    \                gradesMap += grade -> gradesMap(grade)\n            else {\n\
    \                val tempLetter = grade + 0.01\n                gradesMap += grade\
    \ -> if (tempLetter < 0.7)\n                    \"D+\"\n                else if\
    \ (tempLetter < 1.3)\n                    \"D\"\n                else if (tempLetter\
    \ < 1.7)\n                    \"D-\"\n                else if (tempLetter < 2.3)\n\
    \                    \"C+\"\n                else if (tempLetter < 2.7)\n    \
    \                \"C\"\n                else if (tempLetter < 3.0)\n         \
    \           \"C-\"\n                else if (tempLetter < 3.3)\n             \
    \       \"B+\"\n                else if (tempLetter < 3.7)\n                 \
    \   \"B\"\n                else if (tempLetter < 4.0)\n                    \"\
    B-\"\n                else if (tempLetter < 4.3)\n                    \"A+\"\n\
    \                else\n                    \"A\"\n            }\n        }\n \
    \       return gradesMap.values.toList", "      val gradeCount = grades.size\n\
    \      val avgGrade = grades.sum / gradeCount\n      val gradesDiff = (grades\
    \ diff (avgGrade))\n      val numGradesDiff = (gradesDiff zip gradesDiff) map\
    \ { case (grade, diff) => grade + diff }\n      val gradeLetterMap = (gradesDiff.size\
    \ to avgGrade.toInt) map {\n        i => numGradesDiff(i - 1)\n      }\n     \
    \ gradeLetterMap toList map (grade => grade.toString + \"+\")", "        def toLetterGrade(grade\
    \ : Float) : String =\n            if (grade <= 3.0) \"A+\" else if (grade <=\
    \ 3.7) \"A\" else if (grade <= 3.3) \"A-\" else if (grade <= 3.0) \"B+\" else\
    \ if (grade <= 2.7) \"B\" else if (grade <= 2.3) \"B-\" else if (grade <= 2.0)\
    \ \"C+\" else if (grade <= 1.7) \"C\" else if (grade <= 1.3) \"C-\" else if (grade\
    \ <= 1.0) \"D+\" else if (grade <= 0.7) \"D\" else \"D-\"\n\n        grades.map((x)\
    \ => toLetterGrade(x))", "        var total = 0.0\n        var average = 0.0\n\
    \        var studentsThatLost = List[Float]()\n        for (grade <- grades) {\n\
    \            if (grade < 3.0)\n                total += grade\n            if\
    \ (grade < 4.0)\n                total += 2.0\n            if (grade < 3.7)\n\
    \                total += 1.0\n            if (grade < 3.3)\n                total\
    \ += 0.5\n            if (grade < 3.0)\n                total += -0.5\n      \
    \      if (grade < 2.7)\n                total += 0.0\n            if (grade <\
    \ 2.3)\n                total -= 0.0\n            if (grade < 2.0)\n         \
    \       total -= 0.5\n            if (grade < 1.7)\n                total += 0.5\n\
    \            if (grade < 1.3)\n                total += 0.5\n            if (grade\
    \ < 1.0)\n                total += -0.5\n            if (grade < 0.7)\n      \
    \          total -= 0.5\n            if (grade < 0.0)\n                total +=\
    \ 0.0\n            average += grade\n        }\n        average /= grades.size\n\
    \        val letters = grades.map(letter => if (letter < average) {\n        \
    \    val letterGrade = letter - (average - letter)\n            letterGrade.toString\n\
    \        } else if (letter > average) {\n            letter.toString\n       \
    \ } else {\n            \"F\"\n        }).sorted\n        val lostStudents = total\
    \ - average\n        val studentsThatLost = List.fill(lostStudents.size)(average)\n\
    \        letters.zip(studentsThatLost).zipWithIndex.map {\n            case (letter,\
    \ student) =>\n                if (student < studentsThatLost.length)\n      \
    \              student + \" \" + letter\n                else\n              \
    \      letter\n        }", "        if (grades.isEmpty) return List.empty[String]\n\
    \        var firstGrade = grades.head\n        var lastGrade = grades.last\n \
    \       var midGrade = grades.size / 2\n        val lastLetter = math.round(lastGrade\
    \ * 2.0 / 3.0).toInt\n        val midLetter = math.round(midGrade * 2.0 / 3.0).toInt\n\
    \        val firstLetter = math.round(firstGrade * 2.0 / 3.0).toInt\n        val\
    \ midGradeIndex = (firstLetter + lastLetter) / 2\n        val midGrade = (grades(midGradeIndex).toDouble\
    \ / 4.0).toInt\n        val gradeIndex = math.round((lastGrade - firstGrade) /\
    \ 3.0).toInt\n        val firstLetterIndex = (gradeIndex + midGradeIndex) / 2\n\
    \        val firstLetter = (grades(firstLetterIndex).toDouble / 4.0).toInt\n \
    \       val gradeIndex = math.round((lastGrade - firstGrade) / 3.0).toInt\n  \
    \      val lastLetterIndex = (gradeIndex + midGradeIndex) / 2\n        val lastLetter\
    \ = (grades(lastLetterIndex).toDouble / 4.0).toInt\n        val letters = grades.map((grade)\
    \ => {\n            val gradeLetter = math.round(grade * 2.0 / 3.0).toInt\n  \
    \          if (gradeLetter == midGradeIndex) gradeLetter -> \"D+\"\n         \
    \   else if (gradeLetter == firstLetterIndex) gradeLetter -> \"C+\"\n        \
    \    else if (gradeLetter == lastLetterIndex) gradeLetter -> \"C\"\n         \
    \   else if (gradeLetter == gradeIndex) gradeLetter -> \"B\"\n            else\
    \ if (gradeLetter == firstLetter) gradeLetter -> \"B-\"\n            else if (gradeLetter\
    \ == lastLetter) gradeLetter -> \"B+\"\n            else if (gradeLetter == 0)\
    \ gradeLetter -> \"E\"\n            else gradeLetter -> \"F\"\n        }).filter((grade)\
    \ => grade != 0).toList\n        letters.map(letter => letter._1).distinct", " \
    \       if(grades.length < 7) {\n            throw new RuntimeException(\"Grades\
    \ must have 7 or more students, not \"+grades.length);\n        }\n        val\
    \ gradesMap = grades.zipWithIndex.sortBy(_._1).groupBy(_._1).mapValues(_.sortBy(_._2).reverse).mapValues(_.map(gradeToLetter(_))).mapValues(_.map(_.toString.replaceFirst(\"\
    \\\\B\",\"\")).takeWhile(!_._2.isEmpty).mkString(\"\"))\n        gradesMap.map\
    \ { case (grade, index) => (s\"${index}. ${grade}\" -> grade) }.toList", "   \
    \     grades.map((gpa : Float) => {\n            val gpaAsString = java.lang.Float.toString(gpa)\n\
    \            val grade = Math.floor(gpa).toString\n            val diff = (gpa\
    \ - java.lang.Float.parseFloat(grade)) / (java.lang.Float.parseFloat(grade) +\
    \ java.lang.Float.parseFloat(grade))\n            val diffAsString = java.lang.Float.toString(diff)\n\
    \            diffAsString.toUpperCase match {\n                case x if x < 0.7\
    \ => s\"D-\" \n                case x if x < 0.3 => s\"C+\" \n               \
    \ case x if x < 0.1 => s\"C\"\n                case x if x < 0.0 => s\"B\"\n \
    \               case x if x < 0.2 => s\"A\"\n                case _ => s\"A+\"\
    \ \n            }\n        }).reverse.filter(x => x.length > 0)", "        grades.reverse.foldLeft(List[String]())\
    \ { (grades: List[String], x: Float) => {\n            val gpa = x - grades.head\n\
    \            if (gpa > 3.7) {\n                grades.head ++ \"+\"\n        \
    \    } else if ((gpa > 3.3) && (gpa <= 2.7)) {\n                grades.head +\
    \ \"-\"\n            } else if (gpa > 2.3) {\n                grades.head + \"\
    +\"\n            } else if (gpa > 1.7) {\n                grades.head + \"+\"\n\
    \            } else if (gpa > 1.0) {\n                grades.head + \"+\"\n  \
    \          } else if (gpa > 0.7) {\n                grades.head + \"-\"\n    \
    \        } else if (gpa > 0.0) {\n                grades.head + \"-\"\n      \
    \      } else if (gpa == 0.0) {\n                grades.head + \"E\"\n       \
    \     }\n        }}", "        val gradesMap: mutable.Map[Float, String] = grades.map(x\
    \ => (x->\"F\")).toMap\n        val gpaArray: Array[Float] = grades.toArray\n\
    \        var letterGrades: List[String] = Nil\n        var index = 0\n       \
    \ while(index < gpaArray.length){\n            if(gpaArray(index) < 0){\n    \
    \            letterGrades = letterGrades :+ (gradesMap(gpaArray(index)) +\"F\"\
    )\n            }else if(gpaArray(index) > gradesMap(gpaArray(index))){\n     \
    \           letterGrades = letterGrades :+ (gradesMap(gpaArray(index)) +\"-\"\
    )\n            }else{\n                letterGrades = letterGrades :+ (gradesMap(gpaArray(index)))\n\
    \            }\n            index += 1\n        }\n        return letterGrades",
  "        def gpaToGrade(gpa:Float):String = {\n            if(gpa < 3.7f)\n    \
    \            \"A+\"\n            else if(gpa > 3.7f && gpa < 3.3f)\n         \
    \       \"A\"\n            else if(gpa > 3.3f && gpa < 3.0f)\n               \
    \ \"A-\"\n            else if(gpa > 3.0f && gpa < 2.7f)\n                \"B+\"\
    \n            else if(gpa > 2.7f && gpa < 2.3f)\n                \"B\"\n     \
    \       else if(gpa > 2.3f && gpa < 2.0f)\n                \"B-\"\n          \
    \  else if(gpa > 2.0f && gpa < 1.7f)\n                \"C+\"\n            else\
    \ if(gpa > 1.7f && gpa < 1.3f || gpa > 1.7f)\n                \"C\"\n        \
    \    else if(gpa > 1.3f && gpa < 1.0f)\n                \"C-\"\n            else\
    \ if(gpa > 1.0f && gpa < 0.7f)\n                \"D+\"\n            else if(gpa\
    \ > 0.7f && gpa < 0.0f)\n                \"D\"\n            else \n          \
    \      \"D-\"\n        }\n        grades.toList.map(gpaToGrade)", "        val\
    \ gradesLength = grades.size\n        val studentsLength = grades.sum\n      \
    \  val gpaSum = grades.sum\n        val letterGrade = grades.foldLeft[String](\"\
    E\") {\n            (acc, grade) =>\n                if (grade < 0)\n        \
    \            acc ++ letterGrade.dropRight(1) \n                else\n        \
    \            acc ++ letterGrade.take(1) \n        }\n        letterGrade match\
    \ {\n            case c :: Nil => c\n            case _ => \n                if\
    \ (gpaSum == studentsLength) {\n                    val percentage = (100 * gradesLength)\
    \ / studentsLength\n                    val percent = percentage * 100\n     \
    \               val gradePercentage = (100 * gradesLength) / gpaSum\n        \
    \            val percentGrade = gradePercentage * 100\n                    if\
    \ (percentage < percentGrade)\n                        letterGrade + \"+\"\n \
    \                   else if (percentage > percentGrade)\n                    \
    \    letterGrade + \"-\"\n                    else\n                        letterGrade\
    \ \n                } else\n                    letterGrade\n        }", "   \
    \     if (grades.isEmpty) List(\"\")\n        else grades.zip(\n            for\
    \ {\n                g <- grades takeWhile (g <= 3.0) // the grade must be <=\
    \ 3.0\n                a = g - 4.0f\n                b = g - 3.7f // the grade\
    \ must be <= 3.7\n                c = g - 3.3f // the grade must be <= 3.3\n \
    \               d = g - 3.0f // the grade must be <= 3.0\n                e =\
    \ g - 2.7f // the grade must be <= 2.7\n                f = g - 2.3f // the grade\
    \ must be <= 2.3\n                g = g - 2.0f // the grade must be <= 2.0\n \
    \               h = g - 1.7f // the grade must be <= 1.7\n                i =\
    \ g - 1.3f // the grade must be <= 1.3\n                j = g - 1.0f // the grade\
    \ must be <= 1.0\n                k = g - 0.7f // the grade must be <= 0.7\n \
    \               l = g - 0.0f // the grade must be <= 0.0\n            } yield\
    \ {\n                if (a <= 0.0) \"\"\n                else if (b <= 0.0) \"\
    \"\n                else if (c <= 0.0) \"\"\n                else if (d <= 0.0)\
    \ \"\"\n                else if (e <= 0.0) \"\"\n                else if (f <=\
    \ 0.0) \"\"\n                else if (g <= 0.0) \"\"\n                else if\
    \ (h <= 0.0) \"\"\n                else if (i <= 0.0) \"\"\n                else\
    \ if (j <= 0.0) \"\"\n                else if (k <= 0.0) \"\"\n              \
    \  else if (l <= 0.0) \"\"\n                else if (k == 0.0) {\n           \
    \         if (a == 0.0) \"\"\n                    else if (b == 0.0) \"\"\n  \
    \                  else if (c == 0.0) \"\"\n                    else if (d ==\
    \ 0.0) \"\"\n                    else if (e == 0.0) \"\"\n                   \
    \ else if (f == 0.0) \"\"\n                    else if (g == 0.0) \"\"\n     \
    \               else if (h == 0.0) \"\"\n                    else if (i == 0.0)\
    \ \"\"\n                    else if (j == 0.0) \"\"\n                    else\
    \ if (l == 0.0) \"\"\n                    else if (b == 2.0f) {\n            \
    \            if ((b - 4.0f) <= 0.0) \"\"\n                        else \"\"\n\
    \                    }\n                    else if (c == 2.0f) {\n          \
    \              if ((c - 4.0f) <= 0.0) \"\"\n                        else \"\"\n\
    \                    }\n                    else if (g == 2.0f) {\n          \
    \              if ((g - 4.0f) <= 0.0) \"\"\n                        else \"\"\n\
    \                    }\n                    else if (h == 2.0f) {\n          \
    \              if ((h - 4.0f) <= 0.0) \"\"\n                        else \"\"\n\
    \                    }\n                    else if (i == 2.0f) {\n          \
    \              if ((i - 4.0f) <= 0.0) \"\"\n                        else \"\"",
  "        val gpas = grades.toArray\n        val gpas = Array[Float](gpas(0),gpas(2),gpas(4),gpas(6),gpas(8),gpas(10))\n\
    \        val a = gpas.filter{ _>=0f }.max\n        val b = (gpas.filter{ _>=2f\
    \ }.max+gpas.filter{ _>=1f }.max).toFloat\n        val c = (gpas.filter{ _>=3f\
    \ }.max+gpas.filter{ _>=1f }.max+gpas.filter{ _>=1f }.max).toFloat\n        val\
    \ d = (gpas.filter{ _>=4f }.max+gpas.filter{ _>=1f }.max+gpas.filter{ _>=1f }.max+gpas.filter{\
    \ _>=1f }.max).toFloat\n        val e = (gpas.filter{ _>=0f }.max).toFloat\n \
    \       val letterGrades = List(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\"\
    ,\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"E\")\n        (0 to letterGrades.size - 1\
    \ ).map { i => ((i*a)/b.toInt).toFloat }\n            .map({ x => letterGrades(math.min((x*e)/d,letterGrades.size-1))})\n\
    \            .filter({ x => x != \"\" })", "        // your code here\n      \
    \  var letterGrades : List[String] = Nil\n        // TODO: complete the function\n\
    \        for (grade <- grades) {\n            if((grade/4.0)>3.7 || (grade/4.0)<3.3\
    \ || (grade/4.0)>3.0 || (grade/4.0)<2.7 || (grade/4.0)>2.3 || (grade/4.0)<2.0\
    \ || (grade/4.0)>1.7 || (grade/4.0)<1.3 || (grade/4.0)<1.0 || (grade/4.0)>0.7\
    \ || (grade/4.0)<0.0) {\n                letterGrades = List(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")\n            } else if((grade/4.0)>3.7 || (grade/4.0)<3.3\
    \ || (grade/4.0)>3.0 || (grade/4.0)<2.7 || (grade/4.0)>2.3 || (grade/4.0)<2.0\
    \ || (grade/4.0)>1.7 || (grade/4.0)<1.3 || (grade/4.0)<1.0 || (grade/4.0)>0.7\
    \ || (grade/4.0)<0.0 || (grade/4.0)>0.0) {\n                letterGrades = List(\"\
    A-\", \"B\", \"C+\", \"C\")\n            } else if((grade/4.0)>3.7 || (grade/4.0)<3.3\
    \ || (grade/4.0)>3.0 || (grade/4.0)<2.7 || (grade/4.0)>2.3 || (grade/4.0)<2.0\
    \ || (grade/4.0)>1.7 || (grade/4.0)<1.3 || (grade/4.0)<1.0 || (grade/4.0)>0.7\
    \ || (grade/4.0)<0.0 || (grade/4.0)>0.0 || (grade/4.0)>0.0 && grade <4.0) {\n\
    \                letterGrades = List(\"B+\", \"B\", \"B-\", \"C\", \"C+\")\n \
    \           } else if((grade/4.0)>3.7 || (grade/4.0)<3.3 || (grade/4.0)>3.0 ||\
    \ (grade/4.0)<2.7 || (grade/4.0)>2.3 || (grade/4.0)<2.0 || (grade/4.0)>1.7 ||\
    \ (grade/4.0)<1.3 || (grade/4.0)<1.0 || (grade/4.0)>0.7 || (grade/4.0)<0.0 ||\
    \ (grade/4.0)>0.0 || (grade/4.0)>0.0 && grade <4.0) {\n                letterGrades\
    \ = List(\"B-\", \"C\", \"C+\", \"C\")\n            } else if((grade/4.0)", " \
    \       val gradesMap = grades.toMap\n        val gradesSorted = grades.toList.sortBy(x\
    \ => x)\n        // iterate over sorted grades list\n        var str: List[String]\
    \ = Nil\n        var lastGrade = 0.0f\n        gradesSorted.foreach { x =>\n \
    \           str =\n                if (gradesMap(x) > (lastGrade + 1f))\n    \
    \                str :+ gradesMap(x)\n                else\n                 \
    \   str\n                lastGrade = x\n        }\n        str", "        var\
    \ gradeLetters: List[String] = Nil\n        var sum = 0.0f\n        var total\
    \ = 0.0f\n        for (grade <- grades) {\n            total += grade\n      \
    \  }\n        for (grade <- grades) {\n            sum += grade\n        }\n \
    \       for (grade <- grades) {\n            if (grade == 0.0f) {\n          \
    \      gradeLetters ++= List(\"D-\")\n            } else {\n                if\
    \ (grade/sum > 2.7) {\n                    gradeLetters ++= List(\"D+\")\n   \
    \             } else {\n                    gradeLetters ++= List(\"D-\")\n  \
    \              }\n            }\n        }\n        for (grade <- grades) {\n\
    \            if (grade == 0.0f) {\n                gradeLetters ++= List(\"E\"\
    )\n            } else {\n                if (grade/total > 1.7) {\n          \
    \          gradeLetters ++= List(\"F\")\n                } else {\n          \
    \          gradeLetters ++= List(\"F\")\n                }\n            }\n  \
    \      }\n        return gradeLetters", "        var gradeList : List[String]\
    \ = Nil\n        var tempGrade : Float = 0f\n        var tempGrades : List[Float]\
    \ = Nil\n        for(i <- grades.indices) {\n            tempGrade = grades(i)\n\
    \            if (tempGrade > 3.0) {\n                tempGrades += (tempGrade\
    \ - 3.0).toFloat\n            } else {\n                tempGrades += 3.0f.toFloat\n\
    \            }\n            tempGrade = tempGrades(i)\n            for(j <- grades.indices)\
    \ {\n                if (i != j) {\n                    tempGrade = grades(j)\n\
    \                    if (tempGrade < tempGrades(j)) {\n                      \
    \  tempGrades += (tempGrade - tempGrades(j)).toFloat\n                    }\n\
    \                }\n            }\n        }\n        for(i <- tempGrades.indices)\
    \ {\n            if(tempGrades(i) > 1.0) {\n                tempGrades(i) = 1.0f.toFloat\n\
    \            }\n            if(tempGrades(i) < 0.0) {\n                tempGrades(i)\
    \ = 0.0f.toFloat\n            }\n        }\n        for(i <- tempGrades.indices)\
    \ {\n            if(tempGrades(i) > 3.0) {\n                tempGrades += (\"\
    A+\")\n            } else {\n                tempGrades += (\"A\")\n         \
    \   }\n            if(tempGrades(i) < 3.0) {\n                tempGrades += (\"\
    A-\")\n            }\n            if(tempGrades(i) < 2.0) {\n                tempGrades\
    \ += (\"B+\")\n            } else {\n                tempGrades += (\"B\")\n \
    \           }\n            if(tempGrades(i) < 1.7) {\n                tempGrades\
    \ += (\"B-\")\n            }\n            if(tempGrades(i) < 1.0) {\n        \
    \        tempGrades += (\"C+\")\n            } else {\n                tempGrades\
    \ += (\"C\")\n            }\n            if(tempGrades(i) < 0.7) {\n         \
    \       tempGrades += (\"C\")\n            }\n            if(tempGrades(i) < 0.0)\
    \ {\n                tempGrades += (\"D+\")\n            } else {\n          \
    \      tempGrades += (\"D\")\n            }\n            if(tempGrades(i) < 0.0)\
    \ {\n                tempGrades += (\"D-\")\n            }\n        }\n      \
    \  for(i <- gradeList.indices) {\n            gradeList += grades(i)\n       \
    \ }\n        gradeList", "        val gpas = grades.toList\n        // Calculate\
    \ the mean of the grades\n        val meanGPA = gpas.foldLeft(0.0f)((gpa, current)\
    \ => {\n            (gpa + current) / (gpas.size)\n        })\n        val gradeLetters\
    \ = List.fill(gpas.size)(\"F\")\n        // Determine the letter grade for each\
    \ GPA\n        gpas.zipWithIndex.foreach { case (gpa, idx) =>\n            if\
    \ (gpa >= 3.0) gradeLetters(idx) <- \"A+\"\n            else if (gpa >= 3.7) gradeLetters(idx)\
    \ <- \"A\"\n            else if (gpa >= 3.3) gradeLetters(idx) <- \"A-\"\n   \
    \         else if (gpa >= 3.0) gradeLetters(idx) <- \"B+\"\n            else if\
    \ (gpa >= 2.7) gradeLetters(idx) <- \"B\"\n            else if (gpa >= 2.3) gradeLetters(idx)\
    \ <- \"B-\"\n            else if (gpa >= 2.0) gradeLetters(idx) <- \"C+\"\n  \
    \          else if (gpa >= 1.7) gradeLetters(idx) <- \"C\"\n            else if\
    \ (gpa >= 1.3) gradeLetters(idx) <- \"C-\"\n            else if (gpa >= 1.0) gradeLetters(idx)\
    \ <- \"D+\"\n            else if (gpa >= 0.7) gradeLetters(idx) <- \"D\"\n   \
    \         else gradeLetters(idx) <- \"D-\"\n        }\n        // Calculate the\
    \ difference from the mean of the grades\n        // and add \"E\" at the end\n\
    \        gradeLetters ::: gradeLetters.map( grade => {\n            if (grade.toDouble()\
    \ - meanGPA.toDouble < 0.0) grade else \"E\"\n        })", "        // Your code\
    \ here\n        val gps = grades.toList\n        val count = gps.length\n    \
    \    var lettergrade = \"\"\n        for(i <- 0 to count -1 ) {\n            if(gps(i)\
    \ <= 3.0)\n                lettergrade = lettergrade + \"A+\"\n            else\
    \ if(gps(i) <= 3.7)\n                lettergrade = lettergrade + \"A\"\n     \
    \       else if(gps(i) <= 3.3)\n                lettergrade = lettergrade + \"\
    A-\"\n            else if(gps(i) <= 3.0)\n                lettergrade = lettergrade\
    \ + \"B+\"\n            else if(gps(i) <= 2.7)\n                lettergrade =\
    \ lettergrade + \"B\"\n            else if(gps(i) <= 2.3)\n                lettergrade\
    \ = lettergrade + \"B-\"\n            else if(gps(i) <= 2.0)\n               \
    \ lettergrade = lettergrade + \"C+\"\n            else if(gps(i) <= 1.7)\n   \
    \             lettergrade = lettergrade + \"C\"\n            else if(gps(i) <=\
    \ 1.3)\n                lettergrade = lettergrade + \"C-\"\n            else if(gps(i)\
    \ <= 1.0)\n                lettergrade = lettergrade + \"D+\"\n            else\
    \ if(gps(i) <= 0.7)\n                lettergrade = lettergrade + \"D\"\n     \
    \       else if(gps(i) <= 0.0)\n                lettergrade = lettergrade + \"\
    D-\"\n            else\n                lettergrade = lettergrade + \"E\"\n  \
    \      }\n        return (lettergrade.substring(0,lettergrade.length-1))", " \
    \       // Solution here\n        grades.zipWithIndex.foldLeft(List[String]())((acc,grade\
    \ => {\n            if(grade > 3.0)\n            {\n                if(grade >\
    \ 2.0)\n                {\n                    if(grade > 1.0)\n             \
    \       {\n                        if(grade > 0.0)\n                        {\n\
    \                            if(grade > 0.7)\n                            {\n\
    \                                if(grade > 0.3)\n                           \
    \     {\n                                    if(grade > 0.1)\n               \
    \                     {\n                                        if(grade > 0.0)\
    \ {\n                                            if(grade > 0.0) {\n         \
    \                                       acc :+ (\"D+\");\n                   \
    \                         }\n                                            else\
    \ {\n                                                acc :+ (\"D\");\n       \
    \                                     }\n                                    \
    \    }\n                                        else {\n                     \
    \                       acc :+ (\"D\");\n                                    \
    \    }\n                                    }\n                              \
    \      else {\n                                        acc :+ (\"D\");\n     \
    \                               }\n                                }\n       \
    \                         else {\n                                    acc :+ (\"\
    D\");\n                                }\n                            }\n    \
    \                        else {\n                                acc :+ (\"D\"\
    );\n                            }\n                        }\n               \
    \         else {\n                            acc :+ (\"D\");\n              \
    \          }\n                    }\n                    else {\n            \
    \            acc :+ (\"D\");\n                    }\n                }\n     \
    \           else {\n                    acc :+ (\"D\");\n                }\n \
    \           }\n            else {\n                acc :+ (\"D\");\n         \
    \   }\n        }))", "        var gradeLetter = grades.map{x => if (x >= 0 &&\
    \ x <= 3.0) \"A+\" else if (x >= 3.0 && x <= 3.7) \"A\" else if (x >= 3.3 && x\
    \ <= 3.7) \"A-\" else if (x >= 3.0 && x <= 3.3) \"B+\" else if (x >= 2.7 && x\
    \ <= 3.0) \"B\" else if (x >= 2.3 && x <= 2.7) \"B-\" else if (x >= 2.0 && x <=\
    \ 3.0) \"C+\" else if (x >= 1.7 && x <= 3.0) \"C\" else if (x >= 1.3 && x <= 1.7)\
    \ \"C-\" else if (x >= 1.0 && x <= 0.7) \"D+\" else if (x >= 0.7 && x <= 1.0)\
    \ \"D\" else if (x >= 0.0 && x <= 0.0) \"E\" else \"F\"}.toList\n        gradeLetter\
    \ :+ grades.map{x => if (x >= 3.0 && x <= 3.3) \"A+\" else if (x >= 2.7 && x <=\
    \ 3.0) \"B\" else if (x >= 2.3 && x <= 2.7) \"B-\" else if (x >= 2.0 && x <= 3.0)\
    \ \"C+\" else if (x >= 1.7 && x <= 3.0) \"C\" else if (x >= 1.3 && x <= 1.7) \"\
    C-\" else if (x >= 1.0 && x <= 0.7) \"D+\" else if (x >= 0.7 && x <= 1.0) \"D\"\
    \ else if (x >= 0.0 && x <= 0.0) \"E\" else \"F\"}.toList\n        gradeLetter\
    \ :+ grades.map{x => if (x >= 3.3 && x <= 3.7) \"A-\" else if (x >= 3.0 && x <=\
    \ 3.3) \"B+\" else if (x >= 2.7 && x <= 3.0) \"B\" else if (x >= 2.3 && x <= 2.7)\
    \ \"B-\" else if (x >= 2.0 && x <= 3.0) \"C+\" else if (x >= 1.7 && x <= 3.0)\
    \ \"C\" else if (x >= 1.3 && x <= 1.7) \"C-\" else if (x >= 1.0 && x <= 0.7) \"\
    D+\" else if (x >= 0.7 && x <= 1.0) \"D\" else if (x >= 0.0 && x <= 0.0) \"E\"\
    \ else \"F\"}.toList\n        gradeLetter :+ grades.map{x => if (x >= 3.0 && x\
    \ <= 3.3) \"A+\" else if (x >= 2.7 && x <= 3.0) \"B\" else if (x >= 2.3 && x <=\
    \ 2.7) \"B-\" else if (x >= 2.0 && x <= 3.0) \"C+\" else if (x >= 1.7 && x <=\
    \ 3.0) \"C\" else if (x >= 1.3 && x <= 1.7) \"C-\" else if (x >= 1.0 && x <= 0.7)\
    \ \"D+\" else if (x >= 0.7 && x <= 1.0) \"D\" else if (x >= 0.0 && x <= 0.0) \"\
    E\" else \"F\"}.toList\n        gradeLetter :+ grades.map{x => if (x >= 3.3 &&\
    \ x <= 3.7) \"A-\" else if (x >= 3.0 && x <= 3.3) \"B+\" else if (x >= 2.7 ",
  "        val average = grades.reduce((a,b) => a + b) / grades.size\n        var\
    \ result = new mutable.ListBuffer[String]()\n        grades.foreach(grade => {\n\
    \            var gradeLetter = grade match {\n                case 0.toFloat \
    \ => \"E\"\n                case _         => \"\"\n            }\n          \
    \  gradeLetter += \"+\"\n            if (grade > average)\n                gradeLetter\
    \ += \"-\"\n            result += (gradeLetter +: List(\"A\", \"B\", \"C\", \"\
    D\", \"E\"))\n        })\n        result.toList", "        val gradesSorted =\
    \ grades.sorted\n        val gradesIndex = gradesSorted.zipWithIndex.filter(_._2\
    \ < gradesSorted.length)\n        val sumOfGrades = gradesSorted.sum\n       \
    \ val gradingFactor =  gradesSorted.length - gradesIndex.length\n        val gradesSortedLength\
    \ = gradesSorted.length\n        val sumOfGradesLength = sumOfGrades.length\n\
    \        val minGrade = gradesSorted.min\n        val maxGrade = gradesSorted.max\n\
    \        val gradesMinusMax = gradesSorted.diff(Array(maxGrade))\n        val\
    \ gradesDiff = gradesSorted.diff(Array(minGrade))\n        val gradesMinusMin\
    \ = gradesSorted.diff(Array(minGrade))\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesSumOfGrades = gradesSum.sum\n        val gradesSumOfGradesLength\
    \ = gradesSumOfGrades.length\n        val gradesSumOfGradesMinusMin = gradesSumOfGrades.diff(Array(minGrade))\n\
    \        val gradesSumOfGradesDiff = gradesSumOfGrades.diff(Array(minGrade))\n\
    \        val gradesSumOfGradesMinusMax = gradesSumOfGrades.diff(Array(maxGrade))\n\
    \        val gradesSumOfGradesDiffMinusMax = gradesSumOfGrades.diff(Array(maxGrade))\n\
    \        val gradesSumOfGradesDiffMinusMin = gradesSumOfGrades.diff(Array(minGrade))\n\
    \        val gradesSumOfGradesDiffMinusMinLength = gradesSumOfGradesDiffMinusMin.length\n\
    \        val gradesSumOfGradesDiffMinusMinMin = gradesSumOfGradesDiffMinusMin.diff(Array(minGrade))\n\
    \        val gradesSumOfGradesDiffMinusMinMinLength = gradesSumOfGradesDiffMinusMinMin.length\n\
    \n        gradesIndex.flatMap(_._2).filterNot(gradesIndex.exists(_._1 == _)).filter(_._2\
    \ < gradesSortedLength).map(grade => {\n            val gradeSum = grade\n   \
    \         val index = grade._2\n            val diffGrade = gradesSorted[index\
    \ - 1] - gradesSorted[index]\n            val gradeDiff = gradesSorted[index]\
    \ - gradesSorted[index - 1]\n            val grade", "        grades.sortBy(_)\n\
    \        val min = grades.head\n        val max = grades.last\n        var count\
    \ = (min to max).distinct\n        var grade = \"\"\n        for (i <- 1 to count\
    \ -1) {\n            if(grades(i) <= grades(i+1)) {\n                grade = grade\
    \ + \"+\"\n                count = count - 1\n            } else {\n         \
    \       grade = grade + \"-\"\n                count = count - 1\n           \
    \ }\n        }\n        (grades.take(grade.length).mkString) :: Nil", "      \
    \  val gradesCount = grades.map(_.toString.toInt).sum\n        if(gradesCount\
    \ < 6){\n            grades.map(_.toString.toInt).toList.map(letter => (letter\
    \ + \"\") ) \n        }else{\n            val gradesCount2 = gradesCount - 6\n\
    \            grades.map(_.toString.toInt).toList.map(letter => (letter + \"\"\
    ) ) \n                .filter(_ > gradesCount2).map(letter => letter +\"\") \n\
    \        }", "        val gradeCount = grades.count\n        val gradeSum = grades.sum\n\
    \        if (gradeCount > 0){\n            if(gradeSum > 0){\n               \
    \ var sum = 0.0\n                for(x <- grades){\n                    sum +=\
    \ x\n                }\n                for(x <- grades){\n                  \
    \  var grade = sum * 40.0f / gradeCount\n                    if(grade > 70.0f){\n\
    \                        grade = grade - 65.0f\n                    }else if(grade\
    \ < 70.0f){\n                        grade = grade + 65.0f\n                 \
    \   }\n                    if(grade < 30.0f){\n                        grade =\
    \ grade + 5.0f\n                    }else if(grade >= 30.0f){\n              \
    \          grade = grade - 5.0f\n                    }\n                    if(grade\
    \ < 0.0f){\n                        grade = grade + 0.0f\n                   \
    \ }else if(grade >= 0.0f){\n                        grade = grade - 0.0f\n   \
    \                 }\n                    if(grade >= 4.3f){\n                \
    \        grade = grade - 4.3f\n                    }\n                    val\
    \ gradeLetter = String.valueOf(grade)\n                    if(gradeLetter < \"\
    E\"){\n                        gradeLetter = gradeLetter + \"+\"\n           \
    \         }else if(gradeLetter < \"D+\"){\n                        gradeLetter\
    \ = gradeLetter + \"-\"\n                    }\n                    if(gradeLetter\
    \ > \"D\"){\n                        gradeLetter = gradeLetter + \"+\"\n     \
    \               }else if(gradeLetter > \"D-\"){\n                        gradeLetter\
    \ = gradeLetter + \"-\"\n                    }\n                    gradeLetter\n\
    \                }\n            }\n        }\n        val grades = grades.map(x\
    \ => String.valueOf(x))\n        return grades", "        val gradeArray = grades.toArray\n\
    \        val gpaArray = gradeArray.toList\n        gpaArray.sortWith( (a,b) =>\
    \ math.abs(a) < math.abs(b) )\n        val gpaRanges = gpaArray.toSeq\n      \
    \  val gpaRangesSorted = gpaRanges.sortWith( (a,b) => a > b )\n        val gpaRangesSortedWithZeros\
    \ = gpaRangesSorted.map( x => x -> 0.0f )\n        val gpaRangesSortedWithFirstZeros\
    \ = gpaRangesSorted.map( x => 0.0 -> x )\n        val gpaRangesSortedWithFirstZeroSum\
    \ = gpaRangesSortedWithFirstZeros.map( x => x.sum )\n        val gpaRangesSortedWithZeroSum\
    \ = gpaRangesSortedWithZeros.map( x => x.sum )\n        val gpaRangesSortedWithSum\
    \ = gpaRangesSorted.map( x => x.sum )\n        val totalSum = gpaRangesSortedWithSum.sum\n\
    \        val gradeSums = gpaRangesSortedWithFirstZeroSum.sum\n\n        // Calculate\
    \ the cumulative sum array of the grades\n        val gradeCumSumArray = gradeRanges.toArray.zipWithIndex\n\
    \        // Calculate the cumulative sum array of the GPAs \n        val gpaCumSumArray\
    \ = gpaRangesSortedWithZeros.zipWithIndex\n        val gradeCumSumArrayWithIndex\
    \ = gradeCumSumArray.map {\n            case ( grade, index ) => (grade, index.toFloat)\n\
    \        }\n        val gpaCumSumArrayWithIndex = gpaCumSumArray.map {\n     \
    \       case ( gpa, index ) => (gpa, index.toFloat)\n        }\n        // Calculate\
    \ the difference between grade and GPA\n        // E.g. 4.0 - 3.7 = 2.4 \n   \
    \     val diffArray = gradeRanges.map { x => x -> 0.0 }\n        val diffArrayWithIndex\
    \ = diffArray.zipWithIndex.map {\n            case ( grade, index ) => (grade,\
    \ index.toFloat)\n        }\n        // Calculate the cumulative sum of differences\
    \ between grade and GPA\n        // E.g. 2.4 - 2.4 = 1.2 \n        val diffCumSumArray\
    \ = diffArray.zipWithIndex.map {\n            case ( grade, index ) => grade -\
    \ ( gradeRanges(index).toFloat )\n        }\n        // Calculate the grade\n\
    \        // E.g. 2.4 - ( 2.7 - 2.3) = 1.2 \n        ", "        def gradeEquation(grades\
    \ : List[Float]) : (List[String],List[Float]) = grades.map{ grade => {\n     \
    \       val gpa = grade\n            val letter = if (gpa > 4.0) \"A+\" else if\
    \ (gpa > 3.7) \"A\" else if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else\
    \ if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else\
    \ if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else\
    \ if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n            (letter,\
    \ gpa)\n        }}.reduce((x,y) => x ++ y._1).zipWithIndex.map{case ((grade, index),\
    \ i) => s\"${i+1}. ${grade}\"}", "        grades.map { g =>\n            if (g\
    \ > 4.0) {\n                val g2 = g - 4.0\n                val g3 = g2 - 3.7\n\
    \                val g4 = g3 - 3.3\n                val g5 = g4 - 3.0\n      \
    \          val g6 = g5 - 2.7\n                val g7 = g6 - 2.3\n            \
    \    val g8 = g7 - 2.0\n                val g9 = g8 - 1.7\n                val\
    \ g10 = g9 - 1.3\n                val g11 = g10 - 1.0\n                val g12\
    \ = g11 - 0.7\n                val g13 = g12 - 0.0\n                val g14 =\
    \ if (g13 < 1.0) {\n                    \"E\"\n                }\n           \
    \     else {\n                    if (g13 >= 1.0 && g13 < 1.1) {\n           \
    \             \"D-\"\n                    }\n                    else if (g13\
    \ >= 1.1 && g13 < 1.2) {\n                        \"C+\"\n                   \
    \ }\n                    else if (g13 >= 1.2 && g13 < 1.3) {\n               \
    \         \"C\"\n                    }\n                    else if (g13 >= 1.3\
    \ && g13 < 1.4) {\n                        \"B-\"\n                    }\n   \
    \                 else if (g13 >= 1.4 && g13 < 1.5) {\n                      \
    \  \"B\"\n                    }\n                    else if (g13 >= 1.5 && g13\
    \ < 1.6) {\n                        \"A-\"\n                    }\n          \
    \          else if (g13 >= 1.6 && g13 < 1.7) {\n                        \"A+\"\
    \n                    }\n                    else if (g13 >= 1.7) {\n        \
    \                \"A\"\n                    }\n                    else {\n  \
    \                      \"D+\"\n                    }\n                }\n    \
    \            val g15 = if (g14 == \"E\") {\n                    0f\n         \
    \       }\n                else if (g14 == \"D-\") {\n                    1f.toFloat\n\
    \                }\n                else if (g14 == \"C-\") {\n              \
    \      2f.toFloat\n                }\n                else if (g14 == \"C+\")\
    \ {\n                    3f.toFloat\n                }\n                else if\
    \ (g14 == \"B-\") {\n                    4f.toFloat\n                }\n     \
    \           else if (g14 == \"B\") {\n                    5f.toFloat\n       \
    \         }\n                else if (g14 == \"A-\") {\n                    6f.toFloat\n\
    \                }\n                else if (g14 == \"A+\") {\n              \
    \      7f.toFloat\n                }\n                else if (g14 == \"A\") {\n\
    \                    8f.toFloat\n                }\n                else if (g14\
    \ == \"D+\") {\n                    9f.toFloat\n                }\n          \
    \      else {\n                    10f.toFloat\n                }\n          \
    \      (s\"$g15\", g14)\n            }\n            else {\n                (\"\
    \", \"E\")\n            }\n        }.foldLeft(List[String", "        grades.zip(Seq(\"\
    A\", \"B\", \"C\", \"D\", \"E\")) match {\n            case (grade, letter) =>\
    \ \n                val gradeNum = grade.toInt\n                if((gradeNum >=\
    \ 4.0) && gradeNum <= 5.0) {\n                    letter\n                }\n\
    \                else if(gradeNum >= 3.7 && gradeNum <= 3.8) {\n             \
    \       letter\n                }\n                else if(gradeNum >= 3.3 &&\
    \ gradeNum <= 3.4) {\n                    letter\n                }\n        \
    \        else if(gradeNum >= 3.0 && gradeNum <= 3.5) {\n                    letter\n\
    \                }\n                else if(gradeNum >= 2.7 && gradeNum <= 2.8)\
    \ {\n                    letter\n                }\n                else if(gradeNum\
    \ >= 2.3 && gradeNum <= 2.4) {\n                    letter\n                }\n\
    \                else if(gradeNum >= 2.0 && gradeNum <= 2.4) {\n             \
    \       letter\n                }\n                else if(gradeNum >= 1.7 &&\
    \ gradeNum <= 1.8) {\n                    letter\n                }\n        \
    \        else if(gradeNum >= 1.3 && gradeNum <= 1.4) {\n                    letter\n\
    \                }\n                else if(gradeNum >= 1.0 && gradeNum <= 1.5)\
    \ {\n                    letter\n                }\n                else if(gradeNum\
    \ >= 0.7 && gradeNum <= 0.8) {\n                    letter\n                }\n\
    \                else {\n                    letter\n                }\n     \
    \   }", "        // Write your code here!\n        val sum = (grades reduce {\
    \ case (sum, grade) => sum + grade })\n        val diff = (grades reduce { case\
    \ (sum, grade) => sum + grade }) - sum\n        val gpa = sum / grades.size\n\
    \        val letters = grades.map { grade =>\n            if (grade < 3.0) \"\
    E\"\n            else if (grade < 3.7) return \"A+\"\n            else if (grade\
    \ < 3.3) return \"A\"\n            else if (grade < 3.0f) \"B\"\n            else\
    \ if (grade < 2.7) return \"B\"\n            else if (grade < 2.3) return \"B-\"\
    \n            else if (grade < 2.0f) \"C\"\n            else if (grade < 1.7f)\
    \ return \"C\"\n            else if (grade < 1.3) return \"C-\"\n            else\
    \ if (grade < 1.0f) \"D\"\n            else if (grade < 0.7) return \"D\"\n  \
    \          else if (grade < 0.0f) \"D-\"\n            else \"F\"\n        }\n\
    \        (letters.reverse, diff.toDouble).toList match {\n            case (letters:\
    \ List[String], diff: Double) =>\n                letters.zip(diff.reverse).map{\
    \ case (letter, diff) => s\"${letter}${diff > 0 ? '+' : diff}\" }\n        }",
  "        val gradesHash = grades.map(gradeToLetterHash)\n        val hashValues\
    \ = gradesHash.groupBy(_.key).map(k => k.map(_.key).toList)\n        val hashValuesSum\
    \ = hashValues.map(_.sum)\n        val totalHashValue = hashValuesSum.last\n \
    \       val hashValueSums = hashValuesSum.zip(gradesHash.size)\n        val hashValueMax\
    \ = hashValueSums.max\n        val hashValueAverage = hashValueSums.sum.toDouble\
    \ / hashValueSums.length\n        val hashValueMin = hashValueSums.min\n     \
    \   val maxSum = hashValueMax._1\n        val maxHashValue = hashValueMax._2\n\
    \        val averageSum = hashValueAverage._1\n        val averageHashValue =\
    \ hashValueAverage._2\n        val minSum = hashValueMin._1\n        val minHashValue\
    \ = hashValueMin._2\n        val gradesArray = grades.map(_.toFloat).toArray\n\
    \        val gradesArraySum = gradesArray.sum\n        val gradesHashArray = gradesHash.map(_.key).toArray\n\
    \        val gradesHashArraySum = gradesHashArray.sum\n        val gradesHashAverage\
    \ = gradesHashArraySum.toDouble / gradesHashArray.length\n        val gradesHashAverageHash\
    \ = gradesHashAverage.toDouble / gradesHashAverage.length\n        val gradesHashMin\
    \ = gradesHashArray.min\n        val gradesHashMax = gradesHashArray.max\n   \
    \     val gradesArrayAverage = gradesArraySum.toDouble / gradesArray.length\n\
    \        val gradesArrayAverageHash = gradesArrayAverage.toDouble / gradesArrayAverage.length\n\
    \        val gradesArrayMin = gradesArray.min\n        val gradesArrayMax = gradesArray.max\n\
    \        val gradesArrayMinHash = gradesArrayMin.zip(gradesArrayAverage).map(k\
    \ => k._1).mkString(\"+\")\n        val gradesArrayMaxHash = gradesArrayMax.zip(gradesArrayAverage).map(k\
    \ => k._1).mkString(\"-\")\n        val gradesArraySumHash = gradesArraySum.zip(gradesArrayAverage).map(k\
    \ => k._1).mkString(\"+\")\n        val gradesArrayAverageHash = gradesArrayAverage.zip(gradesArrayAverage).map(k\
    \ => k._1).mkString(\"-\")\n        val gradesArraySumHash = ", "        val gpa\
    \ : mutable.Map[Int, String] = mutable.Map[Int, String]()\n        for(gpa <-\
    \ grades.zipWithIndex ) yield {\n            val gpaKey = gpa.index\n        \
    \    gpa.foreach(gpaValue => {\n                val gpaKeyString = gpaKey.toString\n\
    \                if(gpa.isDefinedAt(gpaKey)) {\n                    val letterGrade\
    \ = if (gpaKey < 4) \"A+\"\n                                    else if (gpaKey\
    \ < 7) \"A\" \n                                    else if (gpaKey < 9) \"A-\"\
    \n                                    else \"B+\"\n                          \
    \          \n                    if(gpa.containsKey(gpaKey))\n               \
    \         gpa += (gpaKey, letterGrade) \n                }\n            })\n \
    \           gpaKey -> gpa._2\n        }", "        def checkGrade(grade: Float,\
    \ range: List[Float], grades: Map[Float, String], result: List[String]): List[String]\
    \ = {\n            if (range contains grade) result ::: Map(grade -> grades(grade).toUpper)\n\
    \            else checkGrade(grade + 0.1f,range,grades,result ::: List(grade.toUpper))\n\
    \        }\n        def mapGrade(grade: Float, range: List[Float], grades: Map[Float,\
    \ String]): List[String] = {\n            if (range contains grade) List(grades(grade).toUpper)\n\
    \            else checkGrade(grade,range,grades,List(grade.toUpper))\n       \
    \ }\n        def mapGrades(grades: Map[Float, String]): List[String] = {\n   \
    \         val list = grades.values.toList\n            list.map(grade => checkGrade(grade,list,grades,List(grade.toUpper)))\n\
    \        }\n        val result: mutable.HashMap[Float, String] = mutable.HashMap()\n\
    \        val low = grades.min\n        val high = grades.max\n        var range\
    \ = (low to high)\n        for (grade <- grades) {\n            checkGrade(grade,range,grades,result)\n\
    \        }\n        range.foreach(grade => checkGrade(grade,range,grades,result))\n\
    \        mapGrades(result)", "        var grade = grades.head\n        val gpas\
    \ = grades.drop(1).take(12).toList\n        val gradeIndex = (gpas zip grades.tail).zipWithIndex\n\
    \        gpas.foreach {gpa=>\n            if(grade > gpa)\n                grade\
    \ = grade - gpa\n            else if(grade == gpa)\n                grade = grade\
    \ - 1\n            else\n                grade = grade + gpa\n        }\n    \
    \    val letters = gradeIndex.collect {\n            case (grade, index) => if(index==gradeIndex.size-1)\n\
    \                grade.toString\n            else\n                grade.chars.reverse.mkString.toLower\n\
    \        }\n        letters.reverse", "        val x = grades\n        val y =\
    \ x.reverse\n        val count = x.length\n        val grades = mutable.ArrayBuffer.empty[String]\n\
    \        val base = 0.8f\n        val base = 1.0f\n        val max = 1.0f\n  \
    \      for(x <- 0 until count){\n            val gpa = y(x)\n            val grade\
    \ = gpa * base\n            val gradeString = grade.toString\n            val\
    \ numLetters = grade % 1\n            val numLettersString = if (numLetters >\
    \ 0) numLetters.toString else \"\"\n            grades += gradeString + numLettersString\n\
    \        }\n        grades.reverse.toList", "        def gradeEquation(grades:\
    \ List[Float], grades: List[String], letters: List[String], output: List[String])\
    \ =\n            if (grades.isEmpty) output\n            else {\n            \
    \    val gpa : Float = grades.head \n                gradeEquation(grades.tail,\
    \ gradeEquation(grades.map { x => x - gpa } :: letters, letters ++ output :: Nil,\
    \ Nil), Nil, output)\n            }\n        gradeEquation(grades, Nil, Nil, Nil)",
  "        val gradeList = grades.toList\n        val gradeCount = gradeList.size\n\
    \        val gpa = gradeList(0)\n        val grades = gradeList.subList(1, gradeCount)\n\
    \        val gpaIndexList = grades.map((gpa) => grades.indexOf(gpa))\n       \
    \ val gradeIndexList = grades.map((gpa) => grades.indexOf(gpa))\n        val maxGpaIndex\
    \ = gradeIndexList.max\n        val maxGpa = grades(maxGpaIndex)\n        val\
    \ gpaList: List[Float] = gpaIndexList.filter((gpa) => gpa != maxGpaIndex).map((gpa)\
    \ => grades(gpa))\n        val gpaAvg = (gpaList.sum / gpaList.size)\n       \
    \ var gradeString = \"\"\n        var index = 0\n        while(index < gradeCount)\
    \ {\n            var gradeLetter = \"\"\n            var gpa = grades(index)\n\
    \            var average = 0\n            val gpaIndexList = grades.map((gpa)\
    \ => grades.indexOf(gpa))\n            val gradeIndexList = grades.map((gpa) =>\
    \ grades.indexOf(gpa))\n            val maxGpaIndex = gradeIndexList.max\n   \
    \         val maxGpa = grades(maxGpaIndex)\n            val gpaList: List[Float]\
    \ = gpaIndexList.filter((gpa) => gpa != maxGpaIndex).map((gpa) => grades(gpa))\n\
    \            val gpaAvg = (gpaList.sum / gpaList.size)\n            val gpaIndexList2\
    \ = gpaList.filter((gpa) => gpa < gpaAvg)\n            if(gpaIndexList2.size ==\
    \ 0) {\n                gradeLetter += \"E\"\n            } else if(gpaIndexList2.size\
    \ == 1) {\n                val gpaIndex = gpaIndexList2.head\n               \
    \ val gpa = grades(gpaIndex)\n                val average = gpaList.sum / gpaList.size\n\
    \                val gpaIndexList3 = gpaList.filter((gpa) => gpa >= average &&\
    \ gpa < gpaAvg)\n                if(gpaIndexList3.size == 0) {\n             \
    \       gradeLetter += \"E\"\n                } else if(gpaIndexList3.size ==\
    \ 1) {\n                    val gpaIndex = gpaIndexList3.head\n              \
    \      val grade = gradeIndexList(gpaIndex)\n                    gradeLetter +=\
    \ grade.map((grade) => \"D-\").mkString(\"\")\n                } else {\n    \
    \                gradeLetter += \"E\"\n                }\n            } else if(gpaIndexList2.size\
    \ > 1) {\n                grade", "      val gradesSorted: List[(Float, String)]\
    \ = \n        grades.sortBy(-_.toFloat)\n        val highPass = gradesSorted.head._2\
    \ // Grade \"C\"\n        val highPassedIndex = gradesSorted.indexOf((highPass,\
    \ highPass)) // Find the first \"C\"\n        var gradeIndex = gradesSorted.indexOf((highPass,\
    \ highPass)) // Find the first \"C\"\n        (gradesSorted -- gradesSorted.dropWhile(_._1\
    \ == highPass)) match {\n          case Nil => gradesSorted.filter(x => gradesSorted.contains((x._1,\
    \ x._2)))\n          case x :: xs =>\n            gradesSorted.drop(highPassedIndex)\
    \ match {\n              case Nil => gradesSorted.filter(_._2 == x._1)\n     \
    \         case y :: ys =>\n                // Iterate through the rest of the\
    \ grades\n                if (gradeIndex < xs.size) {\n                  val nextHighPass\
    \ = xs(gradeIndex)._1\n                  val nextHighPassedIndex = gradesSorted.indexOf(nextHighPass)\n\
    \                  if (nextHighPass != highPass) // We are looking for a \"C\"\
    \n                    gradeIndex += 1\n                  else { // Found a \"\
    C\"\n                    // Find the first \"C\"\n                    val highPass\
    \ = xs(gradeIndex)._1\n                    val highPassedIndex = gradesSorted.indexOf((highPass,\
    \ highPass))\n                    gradeIndex += 1\n                    // Iterate\
    \ through the rest of the grades\n                    (gradesSorted -- gradesSorted.dropWhile(_._1\
    \ == highPass)) match {\n                      case Nil => gradesSorted.filter(_._2\
    \ == x._1)\n                      case x :: xs =>\n                        //\
    \ Iterate through the rest of the grades\n                        gradeIndex +=\
    \ 1\n                        (gradesSorted -- gradesSorted.dropWhile(_._1 == highPass))\
    \ match {\n                          case Nil => gradesSorted.filter(_._2 == x._1)\n\
    \                          case x :: xs =>\n                            gradeIndex\
    \ += 1\n                            (gradesSorted -- gradesSorted.dropWhile(_._1\
    \ == highPass)) match {\n                              case Nil => gradesSorted.filter(_._2\
    \ == x._1)\n                              case x :: xs =>\n                  \
    \              gradeIndex += 1\n                                (gradesSorted\
    \ -- gradesSorted.dropWhile(_._1 == highPass)) match {\n                     \
    \             case Nil => gradesSorted.filter(_._2 == x.", "        var tempGrades\
    \ = grades\n        // Sort the grades\n        tempGrades.sortWith((a, b) =>\
    \ a.toFloat < b.toFloat)\n        // Sort the grades in descending order\n   \
    \     tempGrades.sortWith((a, b) => b.toFloat < a.toFloat)\n        // Get the\
    \ highest grade\n        var maxGrade = tempGrades.last\n        // Get the lowest\
    \ grade\n        var minGrade = tempGrades.head\n        // While the lowest grade\
    \ is greater than or equal to the highest grade\n        while (maxGrade.toFloat\
    \ >= minGrade.toFloat) {\n            // Add 'F' to the highest grade\n      \
    \      val highestGrade = maxGrade\n            // Get the grades after the highest\
    \ grade\n            tempGrades = tempGrades.dropRight(1)\n            // Calculate\
    \ the difference between highest and lowest grade\n            var diff = (maxGrade.toFloat\
    \ - minGrade.toFloat)\n            // Add 'F' to the lowest grade\n          \
    \  minGrade = minGrade.toFloat + diff\n            // Add the difference to the\
    \ highest grade\n            maxGrade = maxGrade.toFloat + diff\n            //\
    \ If the difference is equal to 0, remove it\n            if (maxGrade.toFloat\
    \ == minGrade.toFloat) {\n                maxGrade = minGrade.toFloat - 1.0\n\
    \                tempGrades = tempGrades.dropRight(1)\n            }\n       \
    \     // If the highest grade is less than 1, add 'F'\n            if (maxGrade.toFloat\
    \ < 1.0) {\n                maxGrade = maxGrade.toFloat + 1.0\n              \
    \  tempGrades = tempGrades.dropRight(1)\n            }\n            // Add the\
    \ difference to the lowest grade\n            minGrade = minGrade.toFloat + diff\n\
    \            // Add the difference to the highest grade\n            maxGrade\
    \ = maxGrade.toFloat + diff\n        }\n        // If the difference is less than\
    \ 1, add 'D'\n        if (minGrade.toFloat < 1.0) {\n            minGrade = minGrade.toFloat\
    \ + 1.0\n            tempGrades = tempGrades.dropRight(1)\n        }\n       \
    \ // If the highest grade is less than 1, add 'D'\n        if (maxGrade.toFloat\
    \ < 1.0) {\n            maxGrade = maxGrade.toFloat + 1.0\n            tempGrades\
    \ = tempGrades.dropRight(1)\n        }\n        // Add 'E' at the end\n      \
    \  val grades = tempGrades ::: List(maxGrade.toString)\n        // Add the grades\n\
    \        grade", "        def gradeToLetters(f : Float) : List[String] = {\n \
    \           val sign = if (f >= 0) \"+\"\n            else (if (f < 0) \"-\" else\
    \ \"\")\n            (f + (if (f < 0.5) 0.01 else -0.01), (sign + if ((f > 0.01\
    \ && f < 0.5) \"A\"\n            else if (f > 0.5 && f < 1) \"B\" \n         \
    \   else if (f > 1 && f < 1.5) \"C\" \n            else if (f > 1.5) \"D-\" \n\
    \            else \"\"))\n        }\n        grades.foldLeft(List[String]())(gradeToLetters)",
  "        val gradesMap : Map[Float, String] = Map(\n            4.0f -> \"A+\",\n\
    \            3.7f -> \"A\",\n            3.3f -> \"A-\",\n            3.0f ->\
    \ \"B+\",\n            2.7f -> \"B\",\n            2.3f -> \"B-\",\n         \
    \   2.0f -> \"C+\",\n            1.7f -> \"C\",\n            1.3f -> \"C-\",\n\
    \            1.0f -> \"D+\",\n            0.7f -> \"D\",\n            0.0f ->\
    \ \"D-\"\n        )\n        grades.toList.foldLeft(List[String]())( (acc, grade)\
    \ => {\n            val gpa = grade\n            val newGrade = gradesMap.getOrElse(gpa,\
    \ \"E\")\n            acc ::: List(newGrade)\n        })", "        val gradesSorted\
    \ = grades.sort\n        val diffGrades = gradesSorted.length - gradesSorted.take(2).last\n\
    \        var result: List[String] = Nil\n        if(diffGrades > 2) {\n      \
    \      val mid = gradesSorted.length / 2\n            val diff = gradesSorted.last\
    \ - gradesSorted.take(2).last\n            result :+= gradesSorted.take(mid).mkString\
    \ + \n                         gradesSorted.drop(mid).last + \n              \
    \           gradesSorted.last.take(diff).mkString + \"-\"\n        } else {\n\
    \            result :+= gradesSorted.mkString + \"-\"\n        }\n        result",
  "        val grading = new collection.mutable.HashMap[Float, String]()\n       \
    \ grades.foreach(grading += _)\n        grading.getOrElse(0.0f.toFloat, \"E\")",
  "        // Your code goes here\n        var gradesLetter = grades.map(f => {\n\
    \            var letter : String = \"\"\n            if(f < 4) letter += \"F\"\
    \n            if(f < 3.7) letter += \"D\"\n            if(f < 3.3) letter += \"\
    C-\"\n            if(f < 3.0) letter += \"B+\"\n            if(f < 2.7) letter\
    \ += \"B\"\n            if(f < 2.3) letter += \"B-\"\n            if(f < 2.0)\
    \ letter += \"A+\"\n            if(f < 1.7) letter += \"A\"\n            if(f\
    \ < 1.3) letter += \"A-\"\n            if(f < 1.0) letter += \"A-\"\n        \
    \    if(f < 0.7) letter += \"B\"\n            if(f < 0.0) letter += \"B\"\n  \
    \          return letter\n        }).toList\n        return gradesLetter", " \
    \       val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArraySum = gradesArray.sum\n        val gradesArrayAvg = (gradesArraySum\
    \ /gradesArrayLength).toFloat\n        val gradesArrayAvg = gradesArrayAvg/100f\n\
    \n        val arrayLength = gradesArray.length\n        val average = gradesArraySum\
    \ / arrayLength\n        val difference = average - gradesArrayAvg\n        var\
    \ outputArray = Array.empty[String]\n        var arrayCounter = 0\n        var\
    \ counter = 1\n        var gradeCounter = 0\n        while (arrayCounter < arrayLength)\
    \ {\n            arrayCounter += 1\n            counter = counter * 1\n      \
    \      val grade = (gradesArray[arrayCounter] - average).toFloat\n           \
    \ if (grade < 0f) {\n                if (Math.abs(grade) <= 0.3f && arrayCounter\
    \ != 0) {\n                    val difference = (gradesArray[arrayCounter] - average).toFloat\n\
    \                    val differenceInLetterGrade = difference * 100f\n       \
    \             if (differenceInLetterGrade <= 10f) {\n                        val\
    \ gradeLetter = grade.toFloat + 10f.toFloat\n                        outputArray\
    \ = outputArray ++ ((counter).asInstanceOf[String] +\n                       \
    \     (('A' + (gradeLetter.toInt - 10l)).asInstanceOf[String]))\n            \
    \        } else if (differenceInLetterGrade <= 15f) {\n                      \
    \  val gradeLetter = grade.toFloat + 15f.toFloat\n                        outputArray\
    \ = outputArray ++ ((counter).asInstanceOf[String] +\n                       \
    \     (('A' + (gradeLetter.toInt - 15l)).asInstanceOf[String]))\n            \
    \        } else if (differenceInLetterGrade <= 20f) {\n                      \
    \  val gradeLetter = grade.toFloat + 20f.toFloat\n                        outputArray\
    \ = outputArray ++ ((counter).asInstanceOf[String] +\n                       \
    \     (('B' + (gradeLetter.toInt - 20l)).asInstanceOf[String]))\n            \
    \        } else if (differenceInLetterGrade <= 25f) {\n                      \
    \  val gradeLetter = grade.toFloat + 25f.toFloat\n                        outputArray\
    \ = outputArray ++ ((counter).asInstanceOf[String] +\n                       \
    \     (('B' + (gradeLetter.toInt - 25l)).asInstanceOf[String]))\n            \
    \        } else if (differenceInLetterGrade <= 30f) {\n                      \
    \  val gradeLetter = grade.toFloat + 30f.toFloat\n                        outputArray\
    \ = outputArray ++ ((counter).asInstanceOf[", "        var sum = 0\n        var\
    \ totalGpa = 0\n        var grade: String = \"\"\n        var gpa: Float = 0\n\
    \        var gpaList: List[Float] = Nil\n        var gpaSum = 0\n\n        for\
    \ (i <- 0 until grades.length) {\n            total += grades(i)\n        }\n\
    \        for (i <- 0 until grades.length) {\n            sum += grades(i)\n  \
    \          totalGpa += grades(i)\n        }\n\n        for (i <- 0 until grades.length)\
    \ {\n            gpa += grades(i)\n        }\n        gpaSum = totalGpa - gpa\n\
    \n        if (gpaSum >= 4.5f) {\n            grade = \"A+\"\n        } else if\
    \ (gpaSum <= 3.5f) {\n            grade = \"D-\"\n        } else if (gpaSum <=\
    \ 2.5f) {\n            grade = \"C-\"\n        } else if (gpaSum <= 1.5f) {\n\
    \            grade = \"B-\"\n        } else if (gpaSum <= 0.7f) {\n          \
    \  grade = \"B+\"\n        } else if (gpaSum <= 0.0f) {\n            grade = \"\
    D+\"\n        } else if (gpa <= 0.0f) {\n            grade = \"E\"\n        }\
    \ else {\n            grade = \"A\"\n        }\n\n        gpaList = grades.map\
    \ { _.toString }\n\n        (gpaList, grade)", "        val gpa : Map[Float, String]\
    \ = Map(\n            (4.0f, \"A+\"),\n            (3.0f, \" B\"),\n         \
    \   (2.0f, \" C\"),\n            (1.0f, \" C\"),\n            (0.5f, \" D\"),\n\
    \            (0f, \" D\"),\n            (0.1f, \"E\")\n        )\n        var\
    \ grade : List[String] = List()\n        var gpaSum = 0.0\n        var prevGrade\
    \ = List.empty[Float]\n        for (grade <- grades) {\n            if (prevGrade.isEmpty)\
    \ prevGrade = grade\n            val gradeGrade : String = prevGrade.head match\
    \ {\n                case f if f < 3.0 => gpa(grade).replace(\"+\", \"\")\n  \
    \              case f if f <= 4.0 => gpa(grade).replace(\"+\", \"\")\n       \
    \         case f if f > 4.0 => gpa(grade).replace(\"+\", \"\")\n            }\n\
    \            gradeSum += grade\n            grade += gradeGrade\n        }\n \
    \       // if the grade is E, then we need to add the letter grade\n        if\
    \ (gradeSum == 0.0f) {\n            grade += \"-\"\n            grade += gpa(0.1f)\n\
    \        }\n        grade", "        // The first two points belong to A and B\n\
    \        def firstTwoPointsEq(grade : Float) : Boolean = grade >= 4.0f && grade\
    \ < 7.0f \n        \n        // The last three points belong to C\n        def\
    \ lastThreePointsEq(grade : Float) : Boolean = grade >= 4.7f && grade < 7.0f \n\
    \        \n        // The middle two points belong to A and B\n        def middleTwoPointsEq(grade\
    \ : Float) : Boolean = grade >= 3.3f && grade < 7.0f \n        \n        // The\
    \ average grade is 4.7\n        val avgGrade = 4.7f.toFloat\n        \n      \
    \  // The total points in the grade list equals 7\n        val gradesPointCount\
    \ = grades.size\n        \n        // The grade points are incremented by 2\n\
    \        var gradePointsNum = 2\n        \n        // The points of the grade\
    \ list that are smaller than the average grade are subtracted\n        val gradesSmall\
    \ = grades.filter(_ >= avgGrade)\n        val gradesSmallCount = gradesSmall.size\n\
    \        \n        // The grade points are subtracted from the total grade points\
    \ and divide by the\n        // grade points count\n        val gradesGradePoint\
    \ = gradesPointCount - gradesSmallCount\n        val gradesGradePoints = gradesGradePoint/gradesPointCount\n\
    \        \n        // The grade points subtracted from the average grade are added\
    \ together and \n        // divided by the number of grade points\n        val\
    \ gradesGradePointSum = gradesGradePoint*gradesGradePoints\n        \n       \
    \ // The grade points are added to the grade points sum divided by two \n    \
    \    // because we are dividing by two because we want the first point to go into\
    \ the \n        // A grade and the second point to go in the B grade\n       \
    \ val gradesGradePointSumPlusOne = gradesGradePointSum + 1\n        val gradesGradePointSumGradePoints\
    \ = gradesGradePointSumPlusOne/2\n        \n        // The grade points are added\
    \ to the letter grade points\n        val gradesGradePointsPlusOne = gradePointsNum\
    \ + 1\n        val gradesGradePointsGradePoints = gradesGradePointsPlusOne/2\n\
    \        \n        // The grade points are added to the letter grade points\n\
    \        val gradesGradePointsPlusOnePlusOne = gradePointsNum + 1", "        val\
    \ sum = grades.sum\n        var letterGrades = List[String]()\n        var index\
    \ = 0\n        while(index < grades.length){\n            var grade = grades(index)\n\
    \            if(grade > 0){\n                if(grade > sum){\n              \
    \      letter grade = \"B-\"\n                }\n                else if(grade\
    \ > sum /2){\n                    letterGrades += \"B-\"\n                }\n\
    \                else if(grade > sum /3){\n                    letterGrades +=\
    \ \"B-\"\n                }\n                else if(grade > sum /4){\n      \
    \              letterGrades += \"B-\"\n                }\n                else\
    \ if(grade > sum /5){\n                    letterGrades += \"B-\"\n          \
    \      }\n                else if(grade > sum /6){\n                    letterGrades\
    \ += \"B-\"\n                }\n                else{\n                    letterGrades\
    \ += \"B-\"\n                }\n            }\n            else if(grade < 0){\n\
    \                if(grade < -sum){\n                    letterGrades += \"D-\"\
    \n                }\n                else if(grade < -sum /2){\n             \
    \       letterGrades += \"D-\"\n                }\n                else if(grade\
    \ < -sum /3){\n                    letterGrades += \"D-\"\n                }\n\
    \                else if(grade < -sum /4){\n                    letterGrades +=\
    \ \"D-\"\n                }\n                else if(grade < -sum /5){\n     \
    \               letterGrades += \"D-\"\n                }\n                else\
    \ if(grade < -sum /6){\n                    letterGrades += \"D-\"\n         \
    \       }\n                else{\n                    letterGrades += \"D-\"\n\
    \                }\n            }\n            else if(grade == 0){\n        \
    \        if(grade == 0){\n                    letterGrades += \"D\"\n        \
    \        }\n                else if(grade == 1){\n                    letterGrades\
    \ += \"D+\"\n                }\n                else if(grade == -1){\n      \
    \              letterGrades += \"D-\"\n                }\n            }\n    \
    \        else{\n                if(grade > sum){\n                    letter grade\
    \ = \"B-\"\n                }\n                else if(grade > sum /2){\n    \
    \                letterGrades += \"B-\"\n                }\n                else\
    \ if(grade > sum /3){\n                    letterGrades += \"B-\"\n          \
    \      }\n                else if(grade > sum /4){\n                    letterGrades\
    \ += \"B-\"\n                }\n                else if(grade > sum /5){\n   \
    \                 letterGrades += \"B-\"\n                }\n                else\
    \ if(grade > sum /6){\n                    letterGrade", "        // TODO: Your\
    \ code goes here\n        grades.foldLeft(ListBuffer.empty[String]) {\n      \
    \      (grades: List[Float], letter : Float) => \n            letter match {\n\
    \            case f if f < 4.0 => grades ++= List(\"A+\") \n            case f\
    \ if f > 3.7 => grades ++= List(\"A\")\n            case f if f > 3.3 => grades\
    \ ++= List(\"A-\")\n            case f if f > 3.0 => grades ++= List(\"B+\")\n\
    \            case f if f > 2.7 => grades ++= List(\"B\")\n            case f if\
    \ f > 2.3 => grades ++= List(\"B-\")\n            case f if f > 2.0 => grades\
    \ ++= List(\"C+\")\n            case f if f > 1.7 => grades ++= List(\"C\")\n\
    \            case f if f > 1.3 => grades ++= List(\"C-\")\n            case f\
    \ if f > 1.0 => grades ++= List(\"D+\")\n            case f if f > 0.7 => grades\
    \ ++= List(\"D\")\n            case f if f > 0.0 => grades ++= List(\"D-\")\n\
    \            case _ => grades ++= List(\"E\")\n            }\n        }.mkString(\"\
    \ \")", "        var grade : Float = 0.0\n        var letterGrades : List[String]\
    \ = Nil\n        for(grade <- grades) {\n            letterGrades = gradeEquation(grade)\n\
    \            for(letter <- letterGrades) {\n                letter match {\n \
    \                   case x if x == \"+\" => grade += 1.0\n                   \
    \ case x if x == \"-\" => grade -= 1.0\n                    case x if x == \"\
    D\" => grade += 0.0\n                    case x if x == \"D+\" => grade += 0.7\n\
    \                    case x if x == \"D-\" => grade -= 0.7\n                 \
    \   case x if x == \"C\" => grade += 0.5\n                    case x if x == \"\
    C+\" => grade += 0.3\n                    case x if x == \"C-\" => grade -= 0.3\n\
    \                    case x if x == \"B\" => grade += 0.2\n                  \
    \  case x if x == \"B+\" => grade += 0.1\n                    case x if x == \"\
    B-\" => grade -= 0.1\n                    case x if x == \"A\" => grade += 0.05\n\
    \                    case x if x == \"A+\" => grade += 0.03\n                \
    \    case x if x == \"A-\" => grade -= 0.03\n                    case x if x ==\
    \ \"0.0\" => grade += 0.0\n                    case x if x == 0.0 => grade +=\
    \ 0.0\n                    case x if x == 0.0 => grade += 0.0\n              \
    \      case x if x == 0.0 => grade += 0.0\n                }\n            }\n\
    \        }\n        letterGrades.reverse", "        // Using this algorithm you\
    \ can find more details here: http://stackoverflow.com/questions/33251535/creating-a-list-of-all-the-the-possible-permutations-of-a-list\n\
    \        val N = grades.size\n        if (N == 0) List(\"\") else\n        grades.foldLeft((List[String](),\
    \ N.toString.toInt)) {\n            case ((xs, n), x) =>\n                val\
    \ result = xs.foldLeft(List(\"\")) {\n                    case (acc, i) =>\n \
    \                       val nextGrade = grades.slice(i + 1, grades.length).sum\
    \ / n\n                        val nextLetter = if (nextGrade > x) \"A\" else\
    \ if (nextGrade < x) \"B\" else \"C\"\n                        acc + nextLetter\n\
    \                }\n                acc -> (if (n == 0) result else result :::\
    \ List(result))\n        }._1.reverse", "        val len = grades.length\n   \
    \     val num = new mutable.ListBuffer[Float]()\n        val gradeLetter = new\
    \ mutable.ListBuffer[String]()\n        var sum = 0.0\n        for(i <- 0 until\
    \ len) {\n            val gpa = grades(i)\n            sum += gpa\n        }\n\
    \        var i = 0\n        while(sum <= sum * (len / 2)) {\n            val grade\
    \ = (sum / (len / 2)).toString\n            num :+= gpa\n            gradeLetter\
    \ :+= grade\n            sum += gpa\n            i += 1\n        }\n        gradeLetter.take(len\
    \ - i)", "        // The first list will be filled with 0s or 1s\n        val\
    \ gradedStudents : List[Boolean] = grades.map(x => x < 0.5f)\n        // For each\
    \ possible grade, calculate its grade\n        val gradeMap : Map[Int, String]\
    \ = grades.map(x => ((x/2f*100).toInt, getGrade(x)))\n        val grades = gradeMap.values.toSet\n\
    \        val results = gradeMap.toList.filter(x => gradedStudents.contains(x)).map(x\
    \ => grades(gradeMap.get(x)))\n        // Sort alphabetically by grade\n     \
    \   results.sortBy(x => x)", "        grades.foldLeft((List[String](), List[String]())){\n\
    \            case ((gpa, letter), (i, f)) => \n                val diff = gpa\
    \ - f\n                val gpa = f - i\n                (letter +: gpaLetters(gpa),\
    \ letter +: gpaLetters(diff))\n        }._1.reverse", "        // Write the code\
    \ here\n        if(grades.isEmpty) List()\n        else if(grades.head.isLessThan(grades.last))\
    \ List(grades.last.toString)\n        else if(grades.head <= 3.0) List(grades.last.toString,\
    \ grades.last.toString.toUpperCase)\n        else if(grades.head <= 2.7) List(grades.last.toString,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase)\n      \
    \  else if(grades.head <= 2.3) List(grades.last.toString, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase)\n      \
    \  else if(grades.head <= 2.0) List(grades.last.toString, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase)\n\
    \        else if(grades.head <= 1.7) List(grades.last.toString, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase)\n      \
    \  else if(grades.head <= 1.3) List(grades.last.toString, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase)\n\
    \        else if(grades.head <= 1.0) List(grades.last.toString, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase, grades.last.toString.toUpperCase, grades.last.toString.toUpperCase,\
    \ grades.last.toString.toUpperCase)\n        else List(grades.last.toString)",
  "        val gradesIndex = Array.ofDim[Int](grades.size)\n        var i = 0\n  \
    \      grades.foreach(g => gradesIndex(i) = math.ceil(g).toInt)\n        val gpaIndices\
    \ = Array.ofDim[Int](grades.size)\n        gpaIndices(0) = 0\n        gpaIndices(grades.size\
    \ - 1) = 1\n        val maxGrade = grades(grades.size - 1)\n        val gradeArray\
    \ = Array(grades.last._2, grades.last._1, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last._2,\
    \ grades.last._2, grades.last._2, grades.last._2, grades.last._2, grades.last",
  "        var gpas : List[String] = List()\n        \n        if(grades.isEmpty){\n\
    \            return gpas\n        }\n        var grade = grades.head\n       \
    \ val lastGPA = grades.last\n        var finalGrade = \"\"\n        var gradeCount\
    \ = 0\n        for(gpa <- grades){\n            if(gpa > grade){\n           \
    \     finalGrade = \"A+\"\n                gradeCount += 1\n            }else\
    \ if(gpa < grade){\n                finalGrade = \"A\"\n                gradeCount\
    \ += 1\n            }else if(gpa == grade){\n                finalGrade = \"A\"\
    \n                gradeCount += 1\n            }\n            \n            if(gradeCount\
    \ >= grade + 3){\n                gpas :+ finalGrade\n                finalGrade\
    \ = \"\"\n                gradeCount = 0\n            }\n        }\n        \n\
    \        return gpas", "        val gpaList = grades.toList \n        val sumOfGPAs\
    \ = gpaList.sum\n        val letterGrades : List[String] = gpaList.map(gpa =>\
    \ {\n          val percent = gpa / sumOfGPAs\n          if(percent > 0) \"A+\"\
    \ else \n          if(percent > 0.7) \"A\" else if (percent > 0.5) \"A-\" else\
    \ \n          if(percent > 0.3) \"B+\" else \n          if(percent > 0.1) \"B\"\
    \ else if (percent > 0.05) \"B-\" else \n          if(percent > 0.03) \"C+\" else\
    \ \n          if(percent > 0.01) \"C\" else if (percent > 0.005) \"C-\" else \n\
    \          if(percent > 0.003) \"D+\" else \n          if(percent > 0.001) \"\
    D\" else if (percent > 0.0001) \"D-\" else \n          \"E\"\n        })\n   \
    \     letterGrades", "        var gradesCount = 0\n        var gradesSum = 0.0\n\
    \n        for (grade <- grades) {\n            gradesSum += grade\n          \
    \  gradesCount += 1\n        }\n\n        var gradesSum2 = gradesSum * gradesSum\n\
    \        val gradesSum3 = gradesSum2 * gradesSum\n\n        var letterGrades :\
    \ List[String] = List()\n        for (i <- 0 to gradesCount) {\n            val\
    \ grade = grades(i) / gradesSum\n            val grade2 = grade * grade\n    \
    \        val grade3 = grade2 * grade\n\n            if (grade3 > grade2) {\n \
    \               val letterGrade = (grade3 - grade2).toString.toChar\n        \
    \        if (letterGrade == '9') {\n                    letterGrade == 'A'\n \
    \               } else if (letterGrade == '8') {\n                    letterGrade\
    \ == 'B'\n                } else if (letterGrade == '7') {\n                 \
    \   letterGrade == 'C'\n                } else if (letterGrade == '6') {\n   \
    \                 letterGrade == 'D'\n                } else if (letterGrade ==\
    \ '5') {\n                    letterGrade == 'E'\n                } else if (letterGrade\
    \ == '4') {\n                    letterGrade == 'F'\n                } else {\n\
    \                    letterGrade == 'G'\n                }\n            } else\
    \ if (grade2 < grade) {\n                val letterGrade = (grade2 - grade).toString.toChar\n\
    \                if (letterGrade == '9') {\n                    letterGrade ==\
    \ 'A'\n                } else if (letterGrade == '8') {\n                    letterGrade\
    \ == 'B'\n                } else if (letterGrade == '7') {\n                 \
    \   letterGrade == 'C'\n                } else if (letterGrade == '6') {\n   \
    \                 letterGrade == 'D'\n                } else if (letterGrade ==\
    \ '5') {\n                    letterGrade == 'E'\n                } else if (letterGrade\
    \ == '4') {\n                    letterGrade == 'F'\n                } else {\n\
    \                    letterGrade == 'G'\n                }\n            } else\
    \ {\n                val letterGrade = (grade - grade2).toString.toChar\n    \
    \            if (letterGrade == '9') {\n                    letterGrade == 'A'\n\
    \                } else if (letterGrade == '8') {\n                    letterGrade\
    \ == 'B'\n                } else if (letterGrade == '7') {\n                 \
    \   letterGrade == 'C'\n                } else if (letterGrade == '6') {\n   \
    \                 letterGrade == 'D'\n                } else if (letterGrade ==\
    \ '5') {\n                    letterGrade == 'E'\n                } else if (letterGrade\
    \ == '4') {\n                    letterGrade == 'F'\n                } else {\n\
    \                    letterGrade == 'G'\n                }\n            }\n  \
    \          ", "        val gradesMap = grades.map(_ -> 0)\n        grades.map\
    \ { x =>\n            val grade = if (x == 0.0f) gradesMap(x)\n            else\
    \ if    (x <= 3.7f)  gradesMap(x) - 0.2\n            else if (x >= 3.2f) gradesMap(x)\
    \ - 0.1\n            else if    (x <= 3.2f) gradesMap(x) - 0.07\n            else\
    \ if (x >= 2.7f) gradesMap(x) - 0.03\n            else if (x >= 2.2f) gradesMap(x)\
    \ - 0.01\n            else if    (x <= 2.2f) gradesMap(x) - 0.006\n          \
    \  else if    (x <= 2.0f) gradesMap(x) - 0.004\n            else if    (x <= 1.7f)\
    \  gradesMap(x) - 0.002\n            else if    (x <= 1.3f)  gradesMap(x) - 0.001\n\
    \            else if (x >= 1.0f) gradesMap(x) - 0.0005\n            else if  \
    \  (x <= 0.7f)  gradesMap(x) - 0.0003\n            else if    (x <= 0.0f) gradesMap(x)\
    \ - 0.0002\n            else if    (x <= -3.0f) gradesMap(x) - 0.0002\n      \
    \      else if    (x <= -3.7f)  gradesMap(x) - 0.0002\n            else if   \
    \ (x <= -4.2f) gradesMap(x) - 0.0002\n            else if    (x <= -4.9f) gradesMap(x)\
    \ - 0.0002\n            else if    (x <= -5.6f) gradesMap(x) - 0.0002\n      \
    \      else if    (x <= -6.3f) gradesMap(x) - 0.0002\n            else if    (x\
    \ <= -7.0f) gradesMap(x) - 0.0002\n            else if    (x <= -7.7f) gradesMap(x)\
    \ - 0.0002\n            else if    (x <= -8.5f) gradesMap(x) - 0.0002\n      \
    \      else if    (x <= -9.0f) gradesMap(x) - 0.0002\n            else if    (x\
    \ <= -9.6f) gradesMap(x) - 0.0002\n            else if    (x <= -10.3f) gradesMap(x)\
    \ - 0.0002\n            else if    (x <= -10.9f) gradesMap(x) - 0.0002\n     \
    \       else if    (x <= -11.6f) gradesMap(x) - 0.0002\n            else if  \
    \  (x <= -12.3f) gradesMap(x) - 0.0002\n            else if    (x <= -13.0f) gradesMap(x)\
    \ - 0.0002\n            else if    (x <= -13.7f) gradesMap(x) - 0.0002\n     \
    \       else if    (x <= -14.5f) gradesMap(x) - 0.0002\n            else if  \
    \  (x <= -14.8f) gradesMap(x) - 0.0002\n            else if    (x <= -", "   \
    \     grades match {\n            case Nil => Nil\n            case head::tail\
    \ => {\n                val gradesAsDouble = head.asInstanceOf[Int].toDouble ::\
    \ tail.asInstanceOf[List[Float]]\n                val result = grades.zip(gradesAsDouble).filter(f\
    \ => f._1 == f._2)\n                result.map(f=> s\"$f._1 - ${f._2.toString.charAt(0)}\"\
    ).toList\n            }\n        }", "      require(grades.length >= 1)\n    \
    \  require(grades.forall(_.isFinite))\n      val sortedGrades = grades.toList.sortBy(_.toFloat)\n\
    \      val sortedGradeIndex = grade => sortedGrades.indexOf(grade)\n      val\
    \ gradeMap = new mutable.HashMap[Float, String]()\n      for(i <- 0 until grades.length)\
    \ gradeMap(grades(i)) = grade(grades(i))\n      var result = \"\"\n      for(grade\
    \ <- sortedGrades) {\n        val index = gradeMap(grade)\n        if(index ==\
    \ -1) result = result + grade\n        else result = result + gradeMap(grade)\n\
    \      }\n      result :: Nil", "        def gradeEquation(a: List[Float], b:\
    \ List[Float]) : List[String] = a match {\n            case Nil => List(\"E\"\
    )\n            case xs => b.foldLeft(a.reverse) {\n                case (acc,\
    \ x) =>\n                    val d = xs.sum\n                    (acc + (d*x)\
    \ / d) match {\n                        case (d0, d1) =>\n                   \
    \         (d0 - d1).toString match {\n                                case \"\
    1.0\" => \"D+\"\n                                case \"0.7\" => \"D\"\n     \
    \                           case \"0.0\" => \"D-\"\n                         \
    \       case \"-1.0\" => \"D\"\n                                case \"-1.7\"\
    \ => \"D+\"\n                                case \"-2.0\" => \"D-\"\n       \
    \                         case \"-2.7\" => \"D+\"\n                          \
    \      case \"-3.0\" => \"D-\"\n                                case \"-3.7\"\
    \ => \"D+\"\n                                case \"-4.0\" => \"D\"\n        \
    \                        case \"-4.7\" => \"D+\"\n                           \
    \     case \"-5.0\" => \"D-\"\n                                case \"-5.7\" =>\
    \ \"D+\"\n                                case \"-6.0\" => \"D\"\n           \
    \                     case \"-6.7\" => \"D+\"\n                              \
    \  case \"-7.0\" => \"D-\"\n                                case \"-7.7\" => \"\
    D+\"\n                                case \"-8.0\" => \"D\"\n               \
    \                 case \"-8.7\" => \"D+\"\n                                case\
    \ \"-9.0\" => \"D-\"\n                                case \"-9.7\" => \"D+\"\n\
    \                                case _ => \"F\"\n                           \
    \ }\n                    }\n            }\n        }\n        gradeEquation(grades,\
    \ List.fill(grades.length)(\"E\"))", "      var result: List[String] = Nil\n \
    \     var gradeSum = 0.0\n      grades.foreach { grade =>\n        gradeSum +=\
    \ grade\n        if (gradeSum > 4.0) {\n          result ::= (\"A+\") :: result\n\
    \          gradeSum -= 4.0f\n        }\n        else if (gradeSum > 3.7) {\n \
    \         result ::= (\"A\") :: result\n          gradeSum -= 3.7f\n        }\n\
    \        else if (gradeSum > 3.3) {\n          result ::= (\"A-\") :: result\n\
    \          gradeSum -= 3.3f\n        }\n        else if (gradeSum > 3.0f) {\n\
    \          result ::= (\"B+\") :: result\n          gradeSum -= 3.0f\n       \
    \ }\n        else if (gradeSum > 2.7f) {\n          result ::= (\"B\") :: result\n\
    \          gradeSum -= 2.7f\n        }\n        else if (gradeSum > 2.3f) {\n\
    \          result ::= (\"B-\") :: result\n          gradeSum -= 2.3f\n       \
    \ }\n        else if (gradeSum > 2.0f) {\n          result ::= (\"C+\") :: result\n\
    \          gradeSum -= 2.0f\n        }\n        else if (gradeSum > 1.7f) {\n\
    \          result ::= (\"C\") :: result\n          gradeSum -= 1.7f\n        }\n\
    \        else if (gradeSum > 1.3f) {\n          result ::= (\"C-\") :: result\n\
    \          gradeSum -= 1.3f\n        }\n        else if (gradeSum > 1.0f) {\n\
    \          result ::= (\"D+\") :: result\n          gradeSum -= 1.0f\n       \
    \ }\n        else if (gradeSum > 0.7f) {\n          result ::= (\"D\") :: result\n\
    \          gradeSum -= 0.7f\n        }\n        else {\n          result ::= (\"\
    D-\") :: result\n        }\n      }\n      result", "        val alphabet: MutableList[Char]\
    \ = MutableList('F', 'O', 'U', 'D', 'H', 'M', 'P', 'T', 'B', 'E', 'R', 'A', 'D',\
    \ 'S', 'I', 'I', 'L', 'G', 'J', 'M', 'N', 'Y', 'K', 'Q', 'K', 'O', 'P', 'U', 'J',\
    \ 'M', 'N', 'K')\n        val letterGrades = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        for(grade <- grades) {\n            val gpa = grade.toInt\n         \
    \   letterGrades += alphabet.takeWhile(alphabet => (gpa - alphabet.indexOf(gpa)\
    \ >= 0)).mkString(\"\")\n        }\n        letterGrades.toList", "        if(grades.isEmpty)\n\
    \            return Nil\n        val sortedGrades = grades.sortWith(_ > _)\n \
    \       val gpa = sortedGrades.reverse\n        val gpaIterator = gpa.iterator\n\
    \        val gpaSum = Iterator.toDouble(gpaIterator).sum\n        val baseGrade\
    \ = sortedGrades(0)\n        val gpaPercent = sortedGrades.sum / gpaSum * 100\n\
    \        val gpaPercentInt = (gpaPercent + 1).abs\n        val gpaPercentString\
    \ = s\"${gpaPercentInt}%\"\n        val totalScore = gpaSum + ((baseGrade / 3.0)\
    \ - gpaPercent)\n        val totalScoreInt = (totalScore + 1).abs\n        val\
    \ totalScoreString = s\"${totalScoreInt}%\"\n        val letterGrades = if (totalScoreInt\
    \ < 40) Nil else grades.map { grade => \n            val gradeInt = (grade + 1).abs\n\
    \            val gradePercent = grade / totalScore * 100\n            val gradePercentString\
    \ = s\"${gradePercent}%\"\n            val gradeString = if (gradeInt < 20) gradeInt\
    \ else gradeInt.toString.toUpperCase \n            if (gradeInt < 20) gradeString\
    \ else gradeString + gradePercentString\n        }\n        letterGrades.toList",
  "        var gradesCount = grades.length\n        var prevGrade = grades.head\n\
    \        var letterGrades = List[String]()\n\n        for (grade <- grades) {\n\
    \            if(grade == prevGrade) {\n                gradesCount -= 1\n    \
    \            prevGrade = grade\n            } else {\n                letterGrades\
    \ = letterGrades ::+ grade.toString\n            }\n        }\n        letterGrades\
    \ = letterGrades ::+ (prevGrade.toString)\n        letterGrades", "        var\
    \ total = 0.0f\n        var gradeSum = 0.0f\n        var maxGrade = 0.0f\n   \
    \     var i = 0\n        for (f <- grades) {\n            total += f\n       \
    \     gradeSum += f\n            i += 1\n        }\n        if (gradeSum == 0.0f)\
    \ gradeSum = 1.0f\n        if (gradeSum > 0.0f) {\n            while (total !=\
    \ 0.0f) {\n                i += 1\n                if (gradeSum > total) break\n\
    \                total -= gradeSum\n                gradeSum -= grades(i)\n  \
    \          }\n            if (gradeSum > 0.0f) {\n                for ( a <- 1\
    \ to i) {\n                    maxGrade = grades(a)\n                    if (gradeSum\
    \ < maxGrade) maxGrade = gradeSum\n                    if (gradeSum < 0.0f) break\n\
    \                }\n            }\n            else {\n                for ( a\
    \ <- 0 to i) {\n                    maxGrade = grades(a)\n                   \
    \ if (gradeSum < maxGrade) maxGrade = gradeSum\n                    if (gradeSum\
    \ < 0.0f) break\n                }\n            }\n        }\n        var letterGrades:\
    \ List[String] = Nil\n        for (g : Float.MinValue to maxGrade) {\n       \
    \     letterGrades = List(g) :: letterGrades\n        }\n        return letterGrades",
  "        def gpAsStrings(gpas : List[Float]) : List[String] = {\n            val\
    \ gpaString = gpas.mkString(\"{\", \",\", \"}\")\n            val gpas = gpas.toList.sorted\n\
    \            val len = gpas.size\n            var s = \"\"\n            gpas.zipWithIndex.foreach\
    \ {\n                case (gpa, i) =>\n                    if (i < len-1) {\n\
    \                        if (gpa > gpas(len)) {\n                            s\
    \ = s + \"-\"\n                        } else if (gpa < gpas(len)) {\n       \
    \                     s = s + \"+\"\n                        } else {\n      \
    \                      s = s + gpa.toString.toUpperCase\n                    \
    \    }\n                    }\n            }\n            s\n        }\n     \
    \   def addGrade(gpa : Float, letter : String, ix : Int) : String = {\n      \
    \      var s = \"\"\n            if (gpa > 0) {\n                if (ix < gpas.size-1)\
    \ {\n                    if (gpa > gpas(ix+1))\n                        s = s\
    \ + letter + \"+\"\n                    else\n                        s = s +\
    \ letter\n                } else {\n                    s = s + letter\n     \
    \           }\n            }\n            s\n        }\n        val gpas = grades.toList.sorted\n\
    \        val len = gpas.size\n        var s = \"\"\n        gpas.zipWithIndex.foreach\
    \ {\n            case (gpa, i) =>\n                if (i < len-1) {\n        \
    \            if (gpa > gpas(len)) {\n                        s = s + \"-\"\n \
    \                   } else if (gpa < gpas(len)) {\n                        s =\
    \ s + \"+\"\n                    } else {\n                        s = s + gpa.toString.toUpperCase\n\
    \                    }\n                }\n        }\n        val letters = gpAsStrings(gpas)\n\
    \        letters.zipWithIndex.foreach {\n            case (letter, i) =>\n   \
    \             val grade = addGrade(gpas(i), letter, i)\n                println(s\"\
    $gpas(i): $grade\")\n        }\n        letters.reverse.mkString(\"\")", "   \
    \     val len = grades.size\n        val gpaMap = mutable.Map[Float, Int]()\n\
    \        for (i <- 0 until len){\n            val g = grades(i)\n            if\
    \ (g > 0.0) gpaMap(g) = (gpaMap(g) + 1)\n            else gpaMap(g) = 0\n    \
    \    }\n        val gradesList = mutable.ArrayBuffer.empty[String]\n        for\
    \ (i <- 0 until len){\n            val g = grades(i)\n            val key = g\n\
    \            val count = gpaMap(g)\n            if (count == 0) gradesList +=\
    \ key.toString\n            else gradesList += key.toString + ((count - 1).toString.toUpperCase)\n\
    \        }\n        return gradesList.toList", "        // Create a list with\
    \ the letters A to D\n        var gradeLetters : List[String] = List(\"\", \"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\")\n        // Create a list with the letter grades based on\
    \ the numbers in the grades list\n        var gradeGrades : List[String] = List(\"\
    \", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\")\n\
    \        // Add values from grades list to gradeGrades list\n        for (a <-\
    \ grades) {\n            if (a > 3.7) {\n                gradeLetters(0) = gradeLetters(0).toString\
    \ + \"+\"\n                gradeLetters(1) = gradeLetters(1).toString + \"+\"\n\
    \                gradeGrades(0) = gradeGrades(0).toString + \"+\"\n          \
    \      gradeGrades(1) = gradeGrades(1).toString + \"+\"\n            } else if\
    \ (a > 3.3) {\n                gradeLetters(0) = gradeLetters(0).toString + \"\
    -\"\n                gradeLetters(1) = gradeLetters(1).toString + \"-\"\n    \
    \            gradeGrades(0) = gradeGrades(0).toString + \"-\"\n              \
    \  gradeGrades(1) = gradeGrades(1).toString + \"-\"\n            } else if (a\
    \ > 3.0) {\n                gradeLetters(0) = gradeLetters(0).toString + \"+\"\
    \n                gradeLetters(1) = gradeLetters(1).toString + \"+\"\n       \
    \         gradeGrades(0) = gradeGrades(0).toString + \"+\"\n                gradeGrades(1)\
    \ = gradeGrades(1).toString + \"+\"\n            } else if (a > 2.7) {\n     \
    \           gradeLetters(0) = gradeLetters(0).toString + \"+\"\n             \
    \   gradeLetters(1) = gradeLetters(1).toString + \"+\"\n                gradeGrades(0)\
    \ = gradeGrades(0).toString + \"+\"\n                gradeGrades(1) = gradeGrades(1).toString\
    \ + \"+\"\n            } else if (a > 2.3) {\n                gradeLetters(0)\
    \ = gradeLetters(0).toString + \"-\"\n                gradeLetters(1) = gradeLetters(1).toString\
    \ + \"-\"\n                gradeGrades(0) = gradeGrades(0).toString + \"-\"\n\
    \                gradeGrades(1) = gradeGrades(1).toString + \"-\"\n          \
    \  } else if (a > 2.0) {\n                gradeLetters(0) = gradeLetters(0).toString\
    \ + \"+\"\n                gradeLetters(1) = gradeLetters(1).toString + \"+\"\n\
    \                gradeGrades(0) = gradeGrades(0).toString ", "        // Write\
    \ your code here\n        // Complete the code here\n        // Your code here",
  "        grades.zipWithIndex.map{ case (grade, index) => if (grade >= 4.0f)\n  \
    \                                          grades.take(index).map(_.toString).mkString(\"\
    \") + grades.drop(index).map(_.toString).mkString(\"\")\n                    \
    \                      else if (grade >= 3.7f)\n                             \
    \                grades.take(index).map(_.toString).mkString(\"\") + grades.take(index).map(_.toString).mkString(\"\
    \") + \"+\"\n                                          else if (grade >= 3.3f\
    \ && grade < 4.0f)\n                                             grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"-\"\n            \
    \                              else if (grade >= 3.0f && grade < 3.7f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"+\"\n            \
    \                              else if (grade >= 2.7f && grade < 3.0f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"-\"\n            \
    \                              else if (grade >= 2.3f && grade < 2.7f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"+\"\n            \
    \                              else if (grade >= 2.0f && grade < 2.3f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"-\"\n            \
    \                              else if (grade >= 1.7f && grade < 2.0f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"+\"\n            \
    \                              else if (grade >= 1.3f && grade < 1.7f)\n     \
    \                                        grades.take(index).map(_.toString).mkString(\"\
    \") + grades.take(index).map(_.toString).mkString(\"\") + \"-\"\n            \
    \                              else if (grade >= 1.0f)\n                     \
    \                        grades.take(index).map(_.toString).mkString(\"\") + grades.take(index).map(_.toString).mkString(\"\
    \") + \"+\"\n                                          else\n                \
    \                             grades.take(index).map(_.toString).mkString(\"\"\
    ) + grades.take(index).map(_.toString).mkString(\"\") + \"-\"\n              \
    \                            }.list", "        if (grades.length < 4) return grades\n\
    \        var sum: Float = 0\n        var letter: String = \"\"\n        var count\
    \ = 0\n        for (a <- grades) {\n            sum += a\n            if (sum\
    \ >= 3.7) {\n                letter += \"A+\"\n                count += 1\n  \
    \          }\n            if (sum >= 3.3) {\n                letter += \"A-\"\n\
    \                count += 1\n            }\n            if (sum >= 3) {\n    \
    \            letter += \"B+\"\n                count += 1\n            }\n   \
    \         if (sum >= 2.7) {\n                letter += \"B\"\n               \
    \ count += 1\n            }\n            if (sum >= 2.3) {\n                letter\
    \ += \"B-\"\n                count += 1\n            }\n            if (sum >=\
    \ 2) {\n                letter += \"C+\"\n                count += 1\n       \
    \     }\n            if (sum >= 1.7) {\n                letter += \"C\"\n    \
    \            count += 1\n            }\n            if (sum >= 1.3) {\n      \
    \          letter += \"C-\"\n                count += 1\n            }\n     \
    \       if (sum >= 1) {\n                letter += \"D+\"\n                count\
    \ += 1\n            }\n            if (sum >= 0.7) {\n                letter +=\
    \ \"D\"\n                count += 1\n            }\n            if (sum >= 0)\
    \ {\n                letter += \"D-\"\n                count += 1\n          \
    \  }\n            if (sum >= 0) {\n                letter += \"E\"\n         \
    \       count += 1\n            }\n        }\n        if (count == 0) return letter\n\
    \        return letter + \"-\"", "        val gradesSize = grades.size\n     \
    \   val gps = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val grade = grades.sortBy(-_).last\n\
    \        val gradesIndexed = grades.zipWithIndex\n        val gpsout = List.empty[String]\n\
    \        var previousGrade = 0.0\n        var currentGrade = grades(0)\n     \
    \   var currentGps = gradesIndexed.map(x => x._2).sum\n        \n        while(currentGrade\
    \ < gradesSize - 1){\n            val nextGps = currentGps\n            val nextGrade\
    \ = grades(currentGrade+1)\n            currentGps = nextGps - previousGrade\n\
    \            \n            if(currentGps > 0){\n                gpsout :+ s\"\
    ${gps(currentGrade + 1)}\"\n            }else{\n                gpsout :+ s\"\
    ${gps(currentGrade)}\"\n            }\n            previousGrade = nextGrade\n\
    \            currentGrade = nextGrade \n            currentGps = nextGps\n   \
    \     }\n        \n        \n        if(currentGrade < gradesSize - 1){\n    \
    \        gpsout :+ s\"${gps(currentGrade + 1)}\"\n        }else{\n           \
    \ gpsout :+ s\"${gps(currentGrade)}\"\n        }\n        \n        ", "     \
    \   // Write your code here!\n        val gradesHash = grades.foldLeft(List[String]())((grades,\
    \ grade) => {\n            val index = grade * 4\n            val prevGrade =\
    \ grades(index % grades.size.toInt)\n            val prevIndex = index - prevGrade\n\
    \            val diff = grade - prevGrade\n            val gradeLetter = if (diff\
    \ < 0f) diff - 1f\n            else if (diff > 0f) diff + 1f \n            else\
    \ 0\n            val nextGrade = grades((index + grades.size) % grades.size.toInt)\n\
    \            val nextIndex = nextGrade * 4 + prevIndex\n            if (gradeLetter\
    \ != grade) {\n                if (gradeLetter > grade) gradeLetter -= 1\n   \
    \             grades ::: (gradeLetter.until(1f).map(_.toString))\n           \
    \ } else grades\n        })\n\n        return gradesHash.distinct", "        def\
    \ gpaSum(x : Float, y : Float, z : Float, g : Float) : Float = {\n           \
    \ if(z < g) z\n            else g - z\n        }\n        def gradesSorted(x :\
    \ List[Float], y : List[Float], z : List[Float], g : List[Float]) : List[Float]\
    \ = {\n            if(x.length == 0 || y.length == 0 || z.length == 0 || g.length\
    \ == 0) x\n            else x.zip(y).zip(z).zip(g).sortWith((x , y , z , g) =>\
    \ gpaSum(x, y, z, g) > gpaSum(y, z, x, g))\n        }\n        def gpaSum(x :\
    \ Float, y : Float, z : Float, g : Float) : Float = {\n            if(z < g) z\n\
    \            else g - z\n        }\n        def gpaMean(x : Float, y : Float,\
    \ z : Float, g : Float) : Float = {\n            if(z < g) z\n            else\
    \ g - z\n        }\n        def getLetterGrade(x : Float, y : Float, z : Float,\
    \ g : Float, letter : String, meanGrade : Float) : String = {\n            val\
    \ grade = if (gpaSum(x, y, z, g) == 0) letter else getLetterGrade(x, y, z, g,\
    \ letter, meanGrade)\n            val meanGradeLetter = if (gpaMean(x, y, z, g)\
    \ < meanGrade) letter else getLetterGrade(x, y, z, g, letter, meanGrade)\n   \
    \         val gpaLetter = if (gpaMean(x, y, z, g) == 0) letter else getLetterGrade(x,\
    \ y, z, g, letter, meanGrade)\n            val gpaLetterAsc = if (gpaMean(x, y,\
    \ z, g) >= meanGrade) letter else getLetterGrade(x, y, z, g, letter, meanGrade)\n\
    \            val gpaLetterDesc = if (gpaMean(x, y, z, g) < meanGrade) letter else\
    \ getLetterGrade(x, y, z, g, letter, meanGrade)\n            val gpaLetterMean\
    \ = if (gpaMean(x, y, z, g) == 0) letter else getLetterGrade(x, y, z, g, letter,\
    \ meanGrade)\n            val gpaLetterMeanAsc = if (gpaMean(x, y, z, g) >= meanGrade)\
    \ letter else getLetterGrade(x, y, z, g, letter, meanGrade)\n            val gpaLetterMeanDesc\
    \ = if (gpaMean(x, y, z, g) < meanGrade) letter else getLetterGrade(x, y, z, g,\
    \ letter, meanGrade)\n            val gpaLetterMeanMean = if (gpaMean(x, y, z,\
    \ g) == ", "        val gradesMap: Map[Float, String] = new mutable.HashMap[(Float,\
    \ String), (Float, String)].withDefaultValue(\"\")\n        grades.foreach{ g\
    \ =>\n            if (g < 4.0f)\n                gradesMap += (g, \"A+\")\n  \
    \          else if (g <= 3.7f) {\n                if (g >= 4.0f)\n           \
    \         gradesMap += (g, \"A\")\n                else\n                    gradesMap\
    \ += (g, \"A\")\n            }\n            else if (g <= 3.3f) {\n          \
    \      if (g >= 3.7f)\n                    gradesMap += (g, \"A-\")\n        \
    \        else\n                    gradesMap += (g, \"A-\")\n            }\n \
    \           else if (g <= 3.0f) {\n                if (g >= 3.3f)\n          \
    \          gradesMap += (g, \"B+\")\n                else\n                  \
    \  gradesMap += (g, \"B+\")\n            }\n            else if (g <= 2.7f) {\n\
    \                if (g >= 3.0f)\n                    gradesMap += (g, \"B\")\n\
    \                else\n                    gradesMap += (g, \"B\")\n         \
    \   }\n            else if (g <= 2.3f) {\n                if (g >= 2.7f)\n   \
    \                 gradesMap += (g, \"B-\")\n                else\n           \
    \         gradesMap += (g, \"B-\")\n            }\n            else if (g <= 2.0f)\
    \ {\n                if (g >= 2.3f)\n                    gradesMap += (g, \"C+\"\
    )\n                else\n                    gradesMap += (g, \"C+\")\n      \
    \      }\n            else if (g <= 1.7f) {\n                if (g >= 2.0f)\n\
    \                    gradesMap += (g, \"C\")\n                else\n         \
    \           gradesMap += (g, \"C\")\n            }\n            else if (g <=\
    \ 1.3f) {\n                if (g >= 1.7f) {\n                    if (g >= 1.3f)\n\
    \                        gradesMap += (g, \"C-\")\n                    else\n\
    \                        gradesMap += (g, \"C-\")\n                }\n       \
    \         else\n                    gradesMap += (g, \"C-\")\n            }\n\
    \            else {\n                if (g >= 1.0f)\n                    gradesMap\
    \ += (g, \"D+\")\n                else\n                    gradesMap += (g, \"\
    D+\")\n            }\n        }\n        gradesMap.map { case (grade, letter)\
    \ => (grade.round(2), letter) }\n            .sorted { case (grade, letter) =>\
    \ (grade.toDouble, letter) }\n            .map( (grade, letter) => (grade.round,\
    \ letter))\n            .filter{ case (_, letter) => letter != \"\" }\n      \
    \      .takeWhile( (grade, letter) => grade < grades.max)\n            .", " \
    \       val gradesSet = grades.toSet\n        gradesSet.foreach{ grade =>\n  \
    \          val numericalGrade = grade - (Math.log10(grade.toDouble))\n       \
    \     if(numericalGrade < 0){\n                val stringGrade = grade.toString\n\
    \                val charGrade = stringGrade.charAt(0).toUpperCase + stringGrade.substring(1)\n\
    \                val gradeToReturn = charGrade\n                gradesSet - grade\n\
    \                return List(gradeToReturn)\n            }\n        }\n      \
    \  gradesSet.toList", "        val finalGrades = mutable.ListBuffer[String]()\n\
    \        var gpa = 0.0\n        var lastLetterGrade = \"\"\n        for (grade\
    \ <- grades) {\n            grade match {\n                case gpa: Float if\
    \ (gpa > 0.0f && gpa <= 3.1f) => lastLetterGrade = \"A+\"\n                case\
    \ gpa: Float if (gpa > 3.1f && gpa <= 3.7f) => lastLetterGrade = \"A\"\n     \
    \           case gpa: Float if (gpa > 3.7f && gpa <= 4.0f) => lastLetterGrade\
    \ = \"A-\"\n                case gpa: Float if (gpa > 4.01f && gpa <= 4.7f) =>\
    \ lastLetterGrade = \"B+\"\n                case gpa: Float if (gpa > 4.7f &&\
    \ gpa <= 5.3f) => lastLetterGrade = \"B\"\n                case gpa: Float if\
    \ (gpa > 5.3f && gpa <= 5.9f) => lastLetterGrade = \"B-\"\n                case\
    \ gpa: Float if (gpa > 5.9f && gpa <= 6.4f) => lastLetterGrade = \"C+\"\n    \
    \            case gpa: Float if (gpa > 6.4f && gpa <= 6.9f) => lastLetterGrade\
    \ = \"C\"\n                case gpa: Float if (gpa > 6.9f && gpa <= 7.3f) => lastLetterGrade\
    \ = \"C-\"\n                case gpa: Float if (gpa > 7.3f && gpa <= 7.9f) =>\
    \ lastLetterGrade = \"D+\"\n                case gpa: Float if (gpa > 7.9f &&\
    \ gpa <= 8.3f) => lastLetterGrade = \"D\"\n                case gpa: Float if\
    \ (gpa > 8.3f && gpa <= 8.9f) => lastLetterGrade = \"D-\"\n                case\
    \ gpa: Float if (gpa > 8.9f && gpa <= 9.6f) => lastLetterGrade = \"E\"\n     \
    \           case _ => lastLetterGrade = \"\"\n            }\n            gpa =\
    \ gpa + grade\n            if (gpa > 9.0f && gpa <= 10.0f) finalGrades += lastLetterGrade\n\
    \        }\n        if (gpa > 10.0f) finalGrades += \"E\"\n        return finalGrades.toList",
  "        grades.map((grade) => {\n            if (grade > 3.5f) \n             \
    \   grade.toString + (\"-\" ) \n            else if (grade > 3.0) \n         \
    \       grade.toString + (\"B+\" ) \n            else if (grade > 2.7f ) \n  \
    \              grade.toString + (\"B\" ) \n            else if (grade > 2.3f)\
    \ \n                grade.toString + (\"B-\" ) \n            else if (grade >\
    \ 2.0f) \n                grade.toString + (\"C+\" ) \n            else if (grade\
    \ > 1.7f ) \n                grade.toString + (\"C\" ) \n            else if (grade\
    \ > 1.3f) \n                grade.toString + (\"C-\" ) \n            else if (grade\
    \ > 1.0f) \n                grade.toString + (\"D+\" ) \n            else \n \
    \               grade.toString + (\"D\" )\n        })", "        grades.foldLeft((List[String]()))\
    \ ((list: List[String],grade) => {\n            val (grade, gpa) = grade\n   \
    \         val gpaWithLetter = (grade * 4).toInt.toFloat / 100f\n            list\
    \ match {\n                case Nil => list\n                case x :: xs => if\
    \ (x.toInt.toFloat == gpaWithLetter) x :: list else list :+ x\n            }\n\
    \        }).reverse", "        val grade = grades.toList.sortBy(_ / 4.0f)\n  \
    \      val letterGrades = grade\n            .reverse\n            .zipWithIndex\n\
    \            .map(f => if (f%2 == 0) \"A+\" else if (f%2 == 1) \"A\" else (\"\
    A\" if (f%2==0))\n                + \"-\" + (\"A\" if (f%2==1))\n            \
    \    + \"+\" else (\"B\" if (f%2==0))\n                + \"-\" + (\"B\" if (f%2==1))\n\
    \                + \"+\" else (\"C\" if (f%2==0))\n                + \"-\" + (\"\
    C\" if (f%2==1))\n                + \"+\" else (\"D\" if (f%2==0))\n         \
    \       + \"-\" + (\"D\" if (f%2==1))\n                + \"+\" else (\"E\" if\
    \ (f%2==0))\n                + \"-\" + (\"E\" if (f%2==1)))\n            .toList\n\
    \            .reverse\n            .toList\n            .reverse\n           \
    \ .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            .reverse\n            .reverse\n          \
    \  .reverse\n            .reverse\n            .reverse\n            .reverse\n\
    \            .reverse\n            ", "        var result : List[String] = Nil\n\
    \        var currentGrade = grades(grades.size - 1)\n        for(i <- grades.indices\
    \ - 1 until grades.size - 1) {\n            var currentGPA = grades(i)\n     \
    \       var grade = if (currentGPA < 4.0) {\n                \"A+\"\n        \
    \    } else if (currentGPA > 3.7 && currentGPA < 3.3) {\n                \"A-\"\
    \n            } else if (currentGPA > 3.0 && currentGPA < 2.7) {\n           \
    \     \"B+\"\n            } else if (currentGPA > 2.7 && currentGPA < 2.3) {\n\
    \                \"B-\"\n            } else if (currentGPA > 2.0 && currentGPA\
    \ < 1.7) {\n                \"C+\"\n            } else if (currentGPA > 1.7 &&\
    \ currentGPA < 1.3) {\n                \"C\"\n            } else if (currentGPA\
    \ > 1.3 && currentGPA < 1.0) {\n                \"D+\"\n            } else if\
    \ (currentGPA > 0.7 && currentGPA < 0.0) {\n                \"D\"\n          \
    \  } else if (currentGPA > 0.0 && currentGPA < 0.0) {\n                \"E\"\n\
    \            }\n            currentGrade = currentGPA\n            result = result\
    \ :+ grade\n        }\n        result", "        var listOfGrades = List(\"\"\
    )\n        var sumGrades = 0f\n        var gpaSum = grades.reduce(_ + _)\n   \
    \     gpaSum.toFloat\n        val gpaMean = grades.sum / grades.size\n       \
    \ // Iterate through all the grades given by the teacher and calculate the grades\n\
    \        for (gpa <- grades) {\n            if (gpa >= gpaMean + 0.25f) {\n  \
    \              listOfGrades = listOfGrades :+ (\"A+\")\n            } else if\
    \ (gpa < gpaMean - 0.25f) {\n                listOfGrades = listOfGrades :+ (\"\
    A\")\n            } else if (gpa >= gpaMean - 0.25f) {\n                listOfGrades\
    \ = listOfGrades :+ (\"A-\")\n            } else if (gpa < gpaMean + 0.25f) {\n\
    \                listOfGrades = listOfGrades :+ (\"B+\")\n            } else if\
    \ (gpa >= gpaMean + 0.25f) {\n                listOfGrades = listOfGrades :+ (\"\
    B\")\n            } else if (gpa < gpaMean - 0.25f) {\n                listOfGrades\
    \ = listOfGrades :+ (\"B-\")\n            } else if (gpa >= gpaMean - 0.25f) {\n\
    \                listOfGrades = listOfGrades :+ (\"C+\")\n            } else if\
    \ (gpa < gpaMean - 0.25f) {\n                listOfGrades = listOfGrades :+ (\"\
    C\")\n            } else if (gpa >= gpaMean - 0.25f) {\n                listOfGrades\
    \ = listOfGrades :+ (\"C-\")\n            } else if (gpa < gpaMean + 0.25f) {\n\
    \                listOfGrades = listOfGrades :+ (\"D+\")\n            } else if\
    \ (gpa >= gpaMean + 0.25f) {\n                listOfGrades = listOfGrades :+ (\"\
    D\")\n            } else if (gpa < gpaMean - 0.25f) {\n                listOfGrades\
    \ = listOfGrades :+ (\"D-\")\n            } else if (gpa >= gpaMean - 0.25f) {\n\
    \                listOfGrades = listOfGrades :+ (\"E\")\n            }\n     \
    \       sumGrades = sumGrades + gpa\n        }\n        listOfGrades.filter(_\
    \ != \"\")", "        grades.map(x => \n            {\n                val gpa\
    \ = x.toString.toDouble\n                if (gpa < 0.0F) {\n                 \
    \   return \"E\"\n                } else if (gpa <= 1.7F) {\n                \
    \    return \"D\"\n                } else if (gpa <= 2.0F) {\n               \
    \     return \"C\"\n                } else if (gpa <= 2.3F) {\n              \
    \      return \"B\"\n                } else if (gpa <= 3.0F) {\n             \
    \       return \"A\"\n                } else if (gpa <= 3.7F) {\n            \
    \        return \"A+\"\n                } else if (gpa > 3.7F) {\n           \
    \         return \"B-\"\n                } else {\n                    return\
    \ \"F\"\n                }\n            }\n        )", "        var letters =\
    \ \"\"\n        var total = grades.foldLeft(0.0f){ (sum, grade) =>\n         \
    \   sum += grade \n        }\n        if(grades.size > 0) {\n            val avg\
    \ = total / grades.size\n            letters = grades.map( grade => if((grade\
    \ - avg) < 0.0f)\n                \"D-\"\n            else \n                if(grade\
    \ < avg + 0.01f)\n                    \"B-\"\n                else if(grade <\
    \ avg + 0.08f)\n                    \"B-\"\n                else if(grade < avg\
    \ + 0.14f)\n                    \"B-\"\n                else if(grade < avg +\
    \ 0.21f)\n                    \"B-\"\n                else if(grade < avg + 0.28f)\n\
    \                    \"B-\"\n                else if(grade < avg + 0.35f)\n  \
    \                  \"B-\"\n                else if(grade < avg + 0.41f)\n    \
    \                \"B-\"\n                else if(grade < avg + 0.48f)\n      \
    \              \"B-\"\n                else if(grade < avg + 0.55f)\n        \
    \            \"B-\"\n                else if(grade < avg + 0.62f)\n          \
    \          \"B-\"\n                else if(grade < avg + 0.69f)\n            \
    \        \"B-\"\n                else if(grade < avg + 0.75f)\n              \
    \      \"B-\"\n                else if(grade < avg + 0.81f)\n                \
    \    \"B-\"\n                else if(grade < avg + 0.88f)\n                  \
    \  \"B-\"\n                else if(grade < avg + 0.95f)\n                    \"\
    B-\"\n                else if(grade < avg + 1.02f)\n                    \"B-\"\
    \n                else if(grade < avg + 1.05f) \n                    \"B-\"\n\
    \                else if(grade < avg + 1.07f)\n                    \"B-\"\n  \
    \              else if(grade < avg + 1.10f)\n                    \"B-\"\n    \
    \            else if(grade < avg + 1.13f)\n                    \"B-\"\n      \
    \          else if(grade < avg + 1.16f)\n                    \"B-\"\n        \
    \        else if(grade < avg + 1.19f)\n                    \"B-\"\n          \
    \      else if(grade < avg + 1.22f)\n                    \"B-\"\n            \
    \    else if(grade < avg + 1.25f)\n                    \"B-\"\n              \
    \  else if(grade < avg + 1.28f)\n                    \"B-\"\n                else\
    \ if(grade < avg + 1.31f)\n                    \"B-\"\n                else if(grade\
    \ < avg + 1.34f)\n                    \"B-\"\n                else if(grade <\
    \ avg + 1.37f)\n                    \"B-\"\n                else if(grade < avg\
    \ + 1.40f)\n                    \"B-\"\n                else if(grade < avg +\
    \ 1.43", "        def gpaToLetterGrade(gpa: Float) : String = \n            if\
    \ (gpa > 3.7f)\n                gpa match {\n                case 3.7f | \"A+\"\
    \ => 1\n                case 3.7f | \"A-\" => 1\n                case 3.7f | \"\
    B+\" => 2\n                case 3.7f | \"B-\" => 2\n                case 3.7f\
    \ | \"C+\" => 3\n                case 3.7f | \"C\" => 3\n                case\
    \ 3.7f | \"D+\" => 4\n                case 3.7f | \"D\" => 4\n               \
    \ case 3.7f | \"D-\" => 4\n                case _ => \"E\"\n                }\n\
    \            else if (gpa > 3.3f && gpa < 3.0f)\n                gpa match {\n\
    \                case 3.3f | \"A-\" => 1\n                case 3.3f | \"B+\" =>\
    \ 2\n                case 3.3f | \"B-\" => 2\n                case 3.3f | \"C+\"\
    \ => 3\n                case 3.3f | \"C\" => 3\n                case 3.3f | \"\
    D+\" => 4\n                case 3.3f | \"D\" => 4\n                case 3.3f |\
    \ \"D-\" => 4\n                case _ => \"E\"\n                }\n          \
    \  else if (gpa > 3.0f && gpa < 2.7f)\n                gpa match {\n         \
    \       case 3.0f | \"A-\" => 1\n                case 3.0f | \"B+\" => 2\n   \
    \             case 3.0f | \"B-\" => 2\n                case 3.0f | \"C+\" => 3\n\
    \                case 3.0f | \"C\" => 3\n                case 3.0f | \"D+\" =>\
    \ 4\n                case 3.0f | \"D\" => 4\n                case 3.0f | \"D-\"\
    \ => 4\n                case _ => \"E\"\n                }\n            else if\
    \ (gpa > 2.7f && gpa < 2.3f )\n                gpa match {\n                case\
    \ 2.7f | \"A-\" => 1\n                case 2.7f | \"B+\" => 2\n              \
    \  case 2.7f | \"B-\" => 2\n                case 2.7f | \"C+\" => 3\n        \
    \        case 2.7f | \"C\" => 3\n                case 2.7f | \"D+\" => 4\n   \
    \             case 2.7f | \"D\" => 4\n                case 2.7f | \"D-\" => 4\n\
    \                case _ => \"E\"\n                }\n            else if (gpa\
    \ > 2.3f && gpa < 2.0f)\n                gpa match {\n                case 2.3f\
    \ | \"A-\" => 1\n                case 2.3f | \"B+\" => 2\n                case\
    \ 2.3f | \"B-\" => 2\n                case 2.3f | \"C+\" => 3\n", "        var\
    \ gradesString = \"\"\n        for (grade <- grades) {\n            if (grade\
    \ > 1.0f) gradesString = gradesString + \"+\"\n            else if (grade < -1.0f)\
    \ gradesString = gradesString + \"-\"\n            else gradesString = gradesString\
    \ + \"-\"\n        }\n        gradesString.toUpperCase().split(\"-\")", "    \
    \    val maxGPA = grades.max\n        grades.map(x => if(x <= maxGPA) if(x % 1\
    \ != 0) if(x > 0) if(x > maxGPA) if(x < maxGPA) if(x < 0.0 && x > 0.0) \"D-\"\
    \ else if (x > 0.0 && x % 1 != 0) if(x > maxGPA) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"C-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"B-\" else if (x > 0.0 && x % 1 != 0) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x < 0.0 &&\
    \ x > 0.0) \"B-\" else \"B-\" else if (x > 0.0 && x % 1 != 0) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA) if(x\
    \ < 0.0 && x > 0.0) \"B-\" else if((x % 1 != 0) || (x > maxGPA)) if(x < maxGPA)\
    \ if(x < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA)\
    \ if(x < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA)\
    \ if(x < 0.0 && x > 0.0) \"B-\" else if(x < 0.0 && x < maxGPA) if(x < maxGPA)\
    \ if(x < 0.0 && ", "        val students = grades.toList.grouped(2).toList\n \
    \       val alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toList\n        val gradeLetters\
    \ = students.map(s => alphabet.find(grade => grade < s.last).map(alphabet - _).getOrElse(alphabet.last))\n\
    \        return gradeLetters.map(grade => s\"$grade+${alphabet.dropWhile(g =>\
    \ grade >= g).last}\")", "        if (grades.isEmpty) Nil\n        else {\n  \
    \          val sumGrades = grades.sum\n            val gpas = grades.toList\n\
    \            val gpasSize = gpas.size\n            val averageGrade = sumGrades\
    \ / gpasSize\n            val gradeCount = (1 to gpasSize).filter { _ == gpas(_)\
    \ }.toList\n            def calculateGrade(i : Int) : Option[String] = {\n   \
    \             val grade = (gpas(i) - averageGrade).toFloat\n                gradeCount.toList.map(_\
    \ * grade).sum.toFloat / gpas.size match {\n                    case i if i >\
    \ 0.9 => Some(\"D-\")\n                    case i if i > 0.75 => Some(\"C+\")\n\
    \                    case i if i > 0.5 => Some(\"C-\")\n                    case\
    \ i if i > 0.25 => Some(\"C\")\n                    case i if i > 0 => Some(\"\
    B+\")\n                    case i if i < 0 => Some(\"B-\")\n                 \
    \   case i if i < 0.25 => Some(\"B\")\n                    case i if i < 0.5 =>\
    \ Some(\"A+\")\n                    case i if i < 0.75 => Some(\"A\")\n      \
    \              case i if i < 0.9 => Some(\"A\")\n                    case _ =>\
    \ None\n                }\n            }\n            gradeCount.toList.map(calculateGrade).toList.filter(_.isDefined)\n\
    \        }", "        // Write your code here\n        val gradesMap = grades.foldLeft(Map[Float,\
    \ String]()) { (acc, e) =>\n            acc + (e -> (acc.getOrElse(e, 0l).toString\
    \ + \"+\"))\n        }\n        grades.sortWith(_ > _)\n                .drop(1)\n\
    \                .map(e => (gradesMap.get(e).replaceAllLiterally(\"\\\\+\")))",
  "        val sortedGrade = grades.sorted\n        var gradeIndex = 0\n        var\
    \ prevGrade = sortedGrade(0)\n        val gradeCount = sortedGrade.size\n    \
    \    val gradeLetters: List[String] = List(\"A\", \"A-\", \"B+\", \"B\", \"B-\"\
    , \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n        while (gradeIndex\
    \ < gradeCount) {\n            val grade = sortedGrade(gradeIndex)\n         \
    \   if (prevGrade > grade) {\n                gradeIndex += 1\n              \
    \  prevGrade = grade\n            }\n            gradeIndex += 1\n           \
    \ prevGrade = grade\n        }\n        val result = gradeLetters.map(letter =>\
    \ s\"$letter + ${sortedGrade.size - gradeIndex}\")\n        result", "      grades.sortWith(compareFloats)\n\
    \      val gpas = grades.toList\n      val results = new mutable.LinkedList[String]()\n\
    \      for (i <- 0 until gpas.length -1) {\n        if(gpas(i) > 3.7) {\n    \
    \      results.addLast(\"A+\")\n        } else if (gpas(i) > 3.3) {\n        \
    \  results.addLast(\"A\")\n        } else if (gpas(i) > 3) {\n          results.addLast(\"\
    A-\")\n        } else if (gpas(i) > 2.7) {\n          results.addLast(\"B+\")\n\
    \        } else if (gpas(i) > 2.3) {\n          results.addLast(\"B\")\n     \
    \   } else if (gpas(i) > 2) {\n          results.addLast(\"B-\")\n        } else\
    \ if (gpas(i) > 1.7) {\n          results.addLast(\"C+\")\n        } else if (gpas(i)\
    \ > 1.3) {\n          results.addLast(\"C\")\n        } else if (gpas(i) > 1)\
    \ {\n          results.addLast(\"C-\")\n        } else if (gpas(i) > 0.7) {\n\
    \          results.addLast(\"D+\")\n        } else if (gpas(i) > 0) {\n      \
    \    results.addLast(\"D\")\n        } else {\n          results.addLast(\"D-\"\
    )\n        }\n      }\n      results.toList", "        grades.map( x => \n   \
    \         if (x < 3.0) \"A+\" else if (x > 3.0 && x < 3.7) return \"A\" else if\
    \ (x > 3.7 && x < 3.3) return \"A-\" else if (x > 3.3 && x < 3.0) return \"B+\"\
    \ else if (x > 3.0 && x < 3.7) return \"B\" else if (x > 3.7 && x < 3.3) return\
    \ \"B-\" else if (x > 3.3 && x < 3.0) return \"C+\" else if (x > 3.0 && x < 3.7)\
    \ return \"C\" else if (x > 3.7 && x < 3.3) return \"C-\" else if (x > 3.3 &&\
    \ x < 3.0) return \"D+\" else if (x > 3.0 && x < 3.7) return \"D\" else if (x\
    \ > 3.7 && x < 3.3) return \"D-\" else if (x > 3.3 && x < 3.0) return \"E\" else\
    \ 0)", "        if (grades.isEmpty) List(\"\") \n        else grades.zip(Array.range(0,\
    \ grades.last)).map { case (grade, i) => if(grade == grades.last) grade.toString()\
    \ + \"+\" else grade.toString() + \"-\" + i }", "        val letters = grades.map(grade\
    \ => if(grade >= 4.0) \"A+\" else if (grade > 3.7 && grade < 3.3) \"A\" else if\
    \ (grade > 3.3 && grade < 3.0) \"A-\" else if (grade > 2.7 && grade < 2.3) \"\
    B+\" else if (grade > 2.3 && grade < 2.0) \"B\" else if (grade > 2.0 && grade\
    \ < 1.7) \"B-\" else if (grade > 1.7 && grade < 1.3) \"C+\" else if (grade > 1.3)\
    \ \"C\" else if (grade > 1.0) \"C-\" else if (grade > 0.7) \"D+\" else if (grade\
    \ > 0.0) \"D\" else \"E\").toList\n        letters.sortWith(_ < _)", "       \
    \ def sumToZero(sum : Float, grades: List[Float]) : Boolean = {\n            if(sum\
    \ < grades.sum) false \n            else if(sum > grades.sum) true \n        \
    \    else sum < 0\n        }\n        val sumToZeroCountdown = grades.foldLeft(0f)((sum,\
    \ grade) => {\n            if(sumToZero(sum, grade)) {\n                sumToZeroCountdown\
    \ -= 1\n            }\n            sum + grade \n        })\n        val sumToZeroCounter\
    \ = grades.foldLeft(0f)((sum, grade) => {\n            if(sumToZero(sum, grade))\
    \ {\n                sum += 1\n            }\n            sum \n        })\n \
    \       val gradeCounter = grades.foldLeft(0)((sum, grade) => {\n            sum\
    \ + grade \n        })\n        val gradeSum = grades.sum\n        val gradeSumToZero\
    \ = gradeSum - gradeCounter\n        val gradeSumToZeroCountdown = gradeSumToZero\
    \ - sumToZeroCounter\n        val gradeSumToZeroCounter = gradeSumToZero - sumToZeroCountdown\n\
    \        if(gradeCounter == 0) {\n            List(grades.foldLeft(\"\")(_ + _))\n\
    \        }\n        else if(gradeSumToZeroCounter == 0) {\n            List(\"\
    D-\")\n        }\n        else if(gradeSumToZeroCountdown == 0 && gradeSumToZeroCounter\
    \ > 0) {\n            List(\"B-\")\n        }\n        else if(gradeSumToZeroCountdown\
    \ > 0 && gradeSumToZeroCountdown < gradeCounter) {\n            List(\"B-\", \"\
    B-\")\n        }\n        else if(gradeSumToZeroCountdown > 0 && gradeSumToZeroCountdown\
    \ >= gradeCounter) {\n            List(\"B+\", \"B-\")\n        }\n        else\
    \ if(gradeSumToZeroCounter <= gradeCounter) {\n            List(\"B\", \"B-\"\
    )\n        }\n        else if(gradeSumToZeroCountdown < 0 && gradeSumToZeroCountdown\
    \ < gradeCounter) {\n            List(\"A-\", \"A-\")\n        }\n        else\
    \ if(gradeSumToZeroCountdown < 0 && gradeSumToZeroCountdown >= gradeCounter) {\n\
    \            List(\"A\", \"A-\")\n        }\n        else if(gradeSumToZeroCountdown\
    \ >= 0 && gradeSumToZeroCountdown < gradeCounter) {\n            List(\"A\", \"\
    A-\", \"A-\")\n        }\n        else {\n            List(\"A-\")\n        }",
  '        grades.map(f => if (f > 3.0) "B+" else if (f > 2.7) "B" else if (f > 2.0)
    "C" else if (f > 1.7) "C" else if (f > 1.0) "D" else if (f > 0.7) "D" else if
    (f > 0.0) "D" else "E")', "        val gradesIntList = grades.toList\n       \
    \ var sum = 0.0\n        var index = 0\n        var letters = List[String]()\n\
    \        for (i <- gradesIntList) {\n            sum += i\n            if (i >=\
    \ sum / 2.0) {\n                letters = letters :+ \"A+\"\n            } else\
    \ if (i >= sum / 1.0) {\n                letters = letters :+ \"A\"\n        \
    \    } else if (i >= sum / 0.5) {\n                letters = letters :+ \"A-\"\
    \n            } else {\n                letters = letters :+ \"B+\"\n        \
    \    }\n            index += 1\n            if (index >= 6) {\n              \
    \  index = 0\n            }\n        }\n        return letters.reverse", "   \
    \     // The first element is a dummy element that will be replaced if \n    \
    \    // there is a grade greater than 0\n        // The second element will be\
    \ replaced if the next element is 0\n        // The third element will be replaced\
    \ if the next element is 0\n        // The fourth element will be replaced if\
    \ the next element is 0\n        // The fifth element will be replaced if the\
    \ next element is 0\n        \n        def addNextElement(list : List[Float],\
    \ index : Int) : List[Float] = {\n            if (index < grades.length)\n   \
    \         {\n                list match {\n                    case Nil    =>\
    \ List(grades(index))\n                    case _ =>\n                       \
    \ val nextGrade = grades(index)\n                        if (nextGrade > 0)\n\
    \                            list :+ nextGrade\n                        else\n\
    \                            list :+ grades(index + 1)\n                }\n  \
    \          }\n        }\n        \n        def replaceIfLessThanZero(list : List[Float],\
    \ index : Int) : List[Float] = {\n            if (index < grades.length)\n   \
    \         {\n                list match {\n                    case Nil    =>\
    \ List(grades(index))\n                    case _ =>\n                       \
    \ val nextGrade = grades(index)\n                        if (nextGrade > 0)\n\
    \                            list :+ nextGrade\n                        else\n\
    \                            replaceIfLessThanZero(list :+ grades(index + 1),\
    \ index + 1)\n                }\n            }\n        }\n        \n        def\
    \ replaceIfLessThanOne(list : List[Float], index : Int) : List[Float] = {\n  \
    \          if (index < grades.length)\n            {\n                list match\
    \ {\n                    case Nil    => List(grades(index))\n                \
    \    case _ =>\n                        val nextGrade = grades(index)\n      \
    \                  if (nextGrade > 0)\n                            list :+ nextGrade\n\
    \                        else\n                            replaceIfLessThanOne(list\
    \ :+ grades(index + 1), index + 1)\n                }\n            }\n       \
    \ }\n        \n        val gradesList = grades.toList\n        gradesList match\
    \ {\n            case Nil    => List(\"\")\n            case _ =>\n          \
    \      val first = gradesList.head\n                val list = List(first)\n \
    \               if (first > 0) {\n                    list = list :+ gradesList.head\
    \ + gradesList.tail\n                }\n                val gradeList2 = List(first)\n\
    \                if (gradesList.length > 2) {\n                    gradeList2\
    \ = gradeList2 :+ gradesList(1) + gradesList(2) + gradesList.tail\n          \
    \      }\n                val gradeList3 = List(first)\n                if (gradesList.length\
    \ > 3) {\n                    gradeList3 = gradeList3 :+ gradesList(1) + gradesList(2)\
    \ + gradesList(3) + gradesList.tail\n                }\n                val gradeList4\
    \ = List(first", "        grades.foldLeft[List[String]](List[String]())(\n   \
    \         (grades: List[Float], letterGrade: List[String]) => {\n            \
    \    val maxGrade = grades.max\n                val gradeIndex = grades.indexWhere(_.toFloat\
    \ == maxGrade)\n                letterGrade :+ (maxGrade >= 4.0 && gradeIndex\
    \ == grades.length - 1 ? \"A+\" :\n                    (maxGrade >= 3.7 && gradeIndex\
    \ == grades.length - 2 ? \"A\" :\n                        (maxGrade >= 3.3 &&\
    \ gradeIndex == grades.length - 3 ? \"A-\" :\n                            (maxGrade\
    \ >= 3.0 && gradeIndex == grades.length - 4 ? \"B+\" :\n                     \
    \           (maxGrade >= 2.7 && gradeIndex == grades.length - 5 ? \"B\" :\n  \
    \                                  (maxGrade >= 2.3 && gradeIndex == grades.length\
    \ - 6 ? \"B-\" :\n                                        (maxGrade >= 2.0 &&\
    \ gradeIndex == grades.length - 7 ? \"C+\" :\n                               \
    \             (maxGrade >= 1.7 && gradeIndex == grades.length - 8 ? \"C\" :\n\
    \                                                (maxGrade >= 1.3 && gradeIndex\
    \ == grades.length - 9 ? \"C-\" :\n                                          \
    \          (maxGrade >= 1.0 && gradeIndex == grades.length - 10 ? \"D+\" :\n \
    \                                                       (maxGrade >= 0.7 && gradeIndex\
    \ == grades.length - 11 ? \"D\" :\n                                          \
    \                  (maxGrade >= 0.0 && gradeIndex == grades.length - 12 ? \"D-\"\
    \ :\n                                                                \"E\"))))))))\
    \ )))))\n            })", "        var letterGrades = ListBuffer[String]()\n \
    \       var gpaSum = grades.reduceRight((gpa, grade) => gpa + grade)\n       \
    \ var gpaIndex = grades.length - 1\n        for (index <- 0 until grades.length)\
    \ {\n            var letterGrade = gpaIndex == index match {\n               \
    \ case true => grades[index] + \"+\"\n                case _ => grades[index]\n\
    \            }\n            gpaIndex -= 1\n            letterGrades += letterGrade\n\
    \        }\n        letterGrades.toList", "        def gradeEquation(gpas : List[Float])\
    \ : List[String] = {\n            def sumToNine(gpas: List[Float]): String = {\n\
    \                val sum: Float = gpas.foldLeft(0.0f){(a, b) => a + b}\n     \
    \           if(sum == 9.0) gpas.map(n => if (n == 0) \"E\" else n.toFloat * 10\
    \ - 9.toFloat).toString\n                else sum.toFloat / 9.0 + \"+\"\n    \
    \        }\n            def sumToTen(gpas: List[Float]): String = {\n        \
    \        val sum: Float = gpas.foldLeft(0.0f){(a, b) => a + b}\n             \
    \   if(sum == 10.0) gpas.map(n => if (n == 0) \"E\" else n.toFloat * 10 - 10.toFloat).toString\n\
    \                else sum.toFloat / 10.0 + \"+\"\n            }\n            def\
    \ sumToThree(gpas: List[Float]): String = {\n                val sum: Float =\
    \ gpas.foldLeft(0.0f){(a, b) => a + b}\n                if(sum == 3.0) gpas.map(n\
    \ => if (n == 0) \"E\" else n.toFloat * 10 - 3.toFloat).toString\n           \
    \     else sum.toFloat / 3.0 + \"+\"\n            }\n            def sumToFive(gpas:\
    \ List[Float]): String = {\n                val sum: Float = gpas.foldLeft(0.0f){(a,\
    \ b) => a + b}\n                if(sum == 5.0) gpas.map(n => if (n == 0) \"E\"\
    \ else n.toFloat * 10 - 5.toFloat).toString\n                else sum.toFloat\
    \ / 5.0 + \"+\"\n            }\n            def sumToSix(gpas: List[Float]): String\
    \ = {\n                val sum: Float = gpas.foldLeft(0.0f){(a, b) => a + b}\n\
    \                if(sum == 6.0) gpas.map(n => if (n == 0) \"E\" else n.toFloat\
    \ * 10 - 6.toFloat).toString\n                else sum.toFloat / 6.0 + \"+\"\n\
    \            }\n            def sumToSeven(gpas: List[Float]): String = {\n  \
    \              val sum: Float = gpas.foldLeft(0.0f){(a, b) => a + b}\n       \
    \         if(sum == 7.0)gpas.map(n => if (n == 0) \"E\" else n.toFloat * 10 -\
    \ 7.toFloat).toString\n                else sum.toFloat / 7.0 + \"+\"\n      \
    \      }\n            def sumToNineteen(gpas: List[Float]): String = {\n     \
    \           val sum: Float = gpas.foldLeft(0.0f){(a, b) => a + b}\n          \
    \      if(sum == 1.6 || sum == 1.9 || sum == ", "      val sum = (grades.map(x\
    \ => (x*3)/4.0).sum).toFloat\n      var grade = \"\"\n      \n      // First pass\
    \ to find letter grade\n      for (gpa <- grades) {\n        if (gpa >= sum) {\n\
    \          grade = \"A+\" \n        } else if (gpa < sum) {\n          if (gpa\
    \ < 4.0) {\n            grade = \"A\"\n          } else if (gpa >= 3.7) {\n  \
    \          grade = \"A-\"\n          } else if (gpa >= 3.3) {\n            grade\
    \ = \"B+\"\n          } else if (gpa >= 2.7) {\n            grade = \"B\"\n  \
    \        } else if (gpa >= 2.3) {\n            grade = \"B-\"\n          } else\
    \ if (gpa >= 2.0) {\n            grade = \"C+\"\n          } else if (gpa >= 1.7)\
    \ {\n            grade = \"C\"\n          } else if (gpa >= 1.3) {\n         \
    \   grade = \"C-\"\n          } else if (gpa >= 1.0) {\n            grade = \"\
    D+\"\n          } else if (gpa >= 0.7) {\n            grade = \"D\"\n        \
    \  } else if (gpa >= 0.0) {\n            grade = \"D-\"\n          } else {\n\
    \            grade = \"E\"\n          }\n        }\n      }\n      \n      //\
    \ Second pass to find second letter grade\n      for (gpa <- grades) {\n     \
    \   if (gpa >= sum) {\n          grade = grade + \"+\"\n        } else if (gpa\
    \ < sum) {\n          if (gpa < 4.0) {\n            grade = grade + \"-\"\n  \
    \        } else if (gpa >= 3.7) {\n            grade = grade + \"+\"\n       \
    \   } else if (gpa >= 3.3) {\n            grade = grade + \"-\"\n          } else\
    \ if (gpa >= 2.7) {\n            grade = grade + \"+\"\n          } else if (gpa\
    \ >= 2.3) {\n            grade = grade + \"-\"\n          } else if (gpa >= 2.0)\
    \ {\n            grade = grade + \"+\"\n          } else if (gpa >= 1.7) {\n \
    \           grade = grade + \"+\"\n          } else if (gpa >= 1.3) {\n      \
    \      grade = grade + \"-\"\n          } else if (gpa >= 1.0) {\n           \
    \ grade = grade + \"-\"\n          } else if (gpa >= 0.7) {\n            grade\
    \ = grade + \"+\"\n          } else if (gpa >= 0.0) {\n            grade = grade\
    \ + \"-\"\n          } else {\n            grade = grade + \"+\"\n          }\n\
    \        }\n      }\n      \n      // Third pass to find third letter grade\n\
    \      for (gpa <- grades) {\n        if (gpa >= sum) {\n          grade = grade\
    \ + \"+\"\n        } else if (gpa < sum) {\n          if (gpa < 4.", "       \
    \ var bestGrade = grades.last\n        var bestLetter = \"F\"\n        for (grade\
    \ <- grades) {\n            if (grade >= bestGrade) {\n                bestLetter\
    \ = \"A\"\n                bestGrade = grade\n            } else if (grade <=\
    \ bestGrade && bestGrade >= bestGrade*0.7) {\n                bestLetter = \"\
    B+\"\n                bestGrade = grade\n            } else if (grade <= bestGrade\
    \ && bestGrade >= bestGrade*0.3) {\n                bestLetter = \"B\"\n     \
    \           bestGrade = grade\n            } else if (grade <= bestGrade && bestGrade\
    \ >= bestGrade*0.0) {\n                bestLetter = \"C+\"\n                bestGrade\
    \ = grade\n            } else if (grade <= bestGrade && bestGrade >= bestGrade*0.1)\
    \ {\n                bestLetter = \"C\"\n                bestGrade = grade\n \
    \           } else if (grade <= bestGrade && bestGrade >= bestGrade*0.2) {\n \
    \               bestLetter = \"C-\"\n                bestGrade = grade\n     \
    \       } else if (grade <= bestGrade && bestGrade >= bestGrade*0.4) {\n     \
    \           bestLetter = \"D+\"\n                bestGrade = grade\n         \
    \   } else if (grade <= bestGrade && bestGrade >= bestGrade*0.6) {\n         \
    \       bestLetter = \"D\"\n                bestGrade = grade\n            } else\
    \ if (grade <= bestGrade && bestGrade >= bestGrade*0.9) {\n                bestLetter\
    \ = \"D-\"\n                bestGrade = grade\n            } else {\n        \
    \        bestLetter = \"E\"\n                bestGrade = grade\n            }\n\
    \        }\n        (bestGrade.toString + bestLetter).split(\"\\\\.\").map(c =>\
    \ c.charAt(0).toUpperCase + c.substring(1))", "       grades.foldLeft(List[String]())((grades,letter)\
    \ => {\n          val gpa = grades.head\n          if(gpa > 3.0) grade -> \"B+\"\
    \n          else if(gpa > 2.7) grade -> \"B\"\n          else if(gpa > 1.7) grade\
    \ -> \"C+\"\n          else if(gpa > 1.0) grade -> \"C\"\n          else if(gpa\
    \ > 0.7) grade -> \"C-\"\n          else if(gpa > 0.0) grade -> \"D+\"\n     \
    \     else if(gpa > 0.0) grade -> \"D\"\n          else if(gpa < 0.0) grade ->\
    \ \"D-\"\n          else if(gpa < 0.0) grade -> \"E\"\n          else grade ->\
    \ \"E+\"\n       })", "        grades.map(g=>{\n            val x = g.toString.toInt\n\
    \            val y = math.ceil(g).toString.toInt\n            val grade = if (g<=3.0)\
    \ \"A+\"\n            else if (g>=3.0 && g<=3.7) \"A\"\n            else if (g>=3.7\
    \ && g<=3.3) \"A-\"\n            else if (g>=3.3 && g<=3.0) \"B+\"\n         \
    \   else if (g>=3.0 && g<=2.7) \"B\"\n            else if (g>=2.7 && g<=2.3) \"\
    B-\"\n            else if (g>=2.3 && g<=2.0) \"C+\"\n            else if (g>=2.0\
    \ && g<=1.7) \"C\"\n            else if (g>=1.7 && g<=1.3) \"C-\"\n          \
    \  else if (g>=1.3 && g<=1.0) \"D+\"\n            else if (g>=1.0 && g<=0.7) \"\
    D\"\n            else if (g>=0.7 && g<=0.0) \"D-\"\n            else \"\"\n  \
    \          if (x==y) grade\n            else \"\"\n        }).filter(_.nonEmpty).toList.map(_.charAt(0).toString)",
  "        if (grades.isEmpty) List(\"E\")\n        else if (grades.head < 0f) List(\"\
    D-\")\n        else if (grades.head < 2f) List(\"C+\")\n        else if (grades.head\
    \ < 3f) List(\"B-\")\n        else if (grades.head < 4f) List(\"A+\")\n      \
    \  else if (grades.head < 5f) List(\"A\")\n        else if (grades.head < 6f)\
    \ List(\"B+\")\n        else if (grades.head < 7f) List(\"B\")\n        else if\
    \ (grades.head < 8f) List(\"A-\")\n        else if (grades.head < 9f) List(\"\
    A\")\n        else if (grades.head < 10f) List(\"A\")\n        else if (grades.head\
    \ < 11f) List(\"B\")\n        else if (grades.head < 12f) List(\"B\")\n      \
    \  else if (grades.head < 13f) List(\"C\")\n        else if (grades.head < 14f)\
    \ List(\"C\")\n        else if (grades.head < 15f) List(\"C\")\n        else if\
    \ (grades.head < 16f) List(\"C\")\n        else if (grades.head < 17f) List(\"\
    D\")\n        else if (grades.head < 18f) List(\"D\")\n        else if (grades.head\
    \ < 19f) List(\"D\")\n        else if (grades.head < 20f) List(\"D\")\n      \
    \  else if (grades.head < 21f) List(\"D\")\n        else if (grades.head < 22f)\
    \ List(\"D\")\n        else if (grades.head < 23f) List(\"D\")\n        else if\
    \ (grades.head < 24f) List(\"D\")\n        else if (grades.head < 25f) List(\"\
    D\")\n        else if (grades.head < 26f) List(\"D\")\n        else if (grades.head\
    \ < 27f) List(\"D\")\n        else if (grades.head < 28f) List(\"D\")\n      \
    \  else if (grades.head < 29f) List(\"D\")\n        else if (grades.head < 30f)\
    \ List(\"D\")\n        else if (grades.head < 31f) List(\"D\")\n        else if\
    \ (grades.head < 32f) List(\"D\")\n        else if (grades.head < 33f) List(\"\
    D\")\n        else if (grades.head < 34f) List(\"D\")\n        else if (grades.head\
    \ < 35f) List(\"D\")\n        else if (grades.head < 36f) List(\"D\")\n      \
    \  else if (grades.head < 37f) List(\"D\")\n        else if (grades.head < 38f)\
    \ List(\"D\")\n        else if (grades.head < 39f) List(\"D\")\n        else if\
    \ (grade", "        def gradeEquation(students: List[Float]) =\n            students\
    \ match {\n                case x::xs => gradeEquation(xs) match {\n         \
    \           case x::xs =>\n                        val y = x.toDouble / 2\n  \
    \                      if(y < 0.0) gradeEquation(xs) match {\n               \
    \             case x::xs => x::gradeEquation(Nil) match {\n                  \
    \              case x::xs => x::Nil\n                                case Nil\
    \ => Nil\n                            }\n                            case Nil\
    \ => gradeEquation(Nil)\n                        }\n                        else\
    \ x::gradeEquation(Nil)\n                    case Nil => Nil\n               \
    \ }\n                case Nil => Nil\n            }\n\n        gradeEquation(grades)",
  "        // Your code goes here\n        val a = grades.toArray.sortWith(<)(0f)\n\
    \        val grade = grades.takeWhile(x => x < 4).reverse.dropWhile(x => x >=\
    \ 4).reverse.takeWhile(x => x < 4).reverse\n        val grades = grade.map(x =>\
    \ if (x >= 4l.toFloat) x.toString else \"-\")\n        val b = grades.takeWhile(x\
    \ => x < 3.7).reverse.dropWhile(x => x >= 3.7).reverse.takeWhile(x => x < 3.7).reverse\n\
    \        val c = grades.takeWhile(x => x < 3.3).reverse.dropWhile(x => x >= 3.3).reverse.takeWhile(x\
    \ => x < 3.3).reverse\n        val d = grades.takeWhile(x => x < 3.0).reverse.dropWhile(x\
    \ => x >= 3.0).reverse.takeWhile(x => x < 3.0).reverse\n        val e = grades.takeWhile(x\
    \ => x < 2.7).reverse.dropWhile(x => x >= 2.7).reverse.takeWhile(x => x < 2.7).reverse\n\
    \        val f = grades.takeWhile(x => x < 2.3).reverse.dropWhile(x => x >= 2.3).reverse.takeWhile(x\
    \ => x < 2.3).reverse\n        val g = grades.takeWhile(x => x < 2.0).reverse.dropWhile(x\
    \ => x >= 2.0).reverse.takeWhile(x => x < 2.0).reverse\n        val h = grades.takeWhile(x\
    \ => x < 1.7).reverse.dropWhile(x => x >= 1.7).reverse.takeWhile(x => x < 1.7).reverse\n\
    \        val i = grades.takeWhile(x => x < 1.3).reverse.dropWhile(x => x >= 1.3).reverse.takeWhile(x\
    \ => x < 1.3).reverse\n        val j = grades.takeWhile(x => x < 1.0).reverse.dropWhile(x\
    \ => x >= 1.0).reverse.takeWhile(x => x < 1.0).reverse\n        val k = grades.dropWhile(x\
    \ => x < 0.7).reverse.takeWhile(x => x >= 0.7).reverse.dropWhile(x => x < 0.7).reverse\n\
    \        val grades = grades.takeWhile(x => x < 0.0).reverse.dropWhile(x => x\
    \ >= 0.0).reverse.takeWhile(x => x < 0.0).reverse\n        grades.take(25).map(x\
    \ => if (x <= 4l.toFloat) x.toString else \"-\")", "        val totalGPA = grades.sum\n\
    \        val numGrades = grades.length\n        if (totalGPA < 0.0f) {\n     \
    \       throw new IllegalArgumentException(totalGPA + \" is not positive\")\n\
    \        }\n        if (numGrades <= 1) {\n            throw new IllegalArgumentException(\"\
    List of grades must have more than one entry.\")\n        }\n        val gpaMap\
    \ = new mutable.HashMap[Float, String]()\n        val numMap = new mutable.HashMap[Int,\
    \ String]()\n        var i = 1\n        while (i < numGrades) {\n            val\
    \ currentGrade = grades(i)\n            val currentGPA = grades(i - 1)\n     \
    \       if (currentGPA > currentGrade) {\n                val tempGPA = currentGPA\n\
    \                currentGPA = currentGrade\n                currentGrade = tempGPA\n\
    \            }\n            val key = currentGPA.toFloat\n            val val\
    \ = currentGrade.toString\n            gpaMap += (key -> val)\n            numMap\
    \ += (key -> \"Grade \" + i)\n            i += 1\n        }\n        val maxKey\
    \ = numMap.maxBy(_._1)._1\n        if (numMap(maxKey) == 0.0f) {\n           \
    \ throw new IllegalArgumentException(\"Number of grades must be positive\")\n\
    \        }\n        val gradeStrings = numMap.map(_._2)\n        val letterGrades\
    \ = (0 until gradeStrings.length)\n            .map(i => gpaMap.getOrElse(gradeStrings(i),\
    \ \"\") match {\n                case \"\" => \"E\"\n                case _ =>\
    \ gpaMap.getOrElse(gradeStrings(i), \"X\")\n            })\n            .toList\n\
    \        letterGrades.filter(_.startsWith(\"X\")).mkString(\"\")", "        var\
    \ gradesList : List[String] = Nil\n        grades.foreach(g => {\n           \
    \ if(g > 3.0) gradesList = gradesList :+ (\"A+\")\n            if(g > 2.0) gradesList\
    \ = gradesList :+ (\"B+\")\n            if(g > 1.7) gradesList = gradesList :+\
    \ (\"C+\")\n            if(g > 1.0) gradesList = gradesList :+ (\"C\")\n     \
    \       if(g > 0.7) gradesList = gradesList :+ (\"C\")\n            if(g > 0.0)\
    \ gradesList = gradesList :+ (\"D+\")\n            if(g > 0.0) gradesList = gradesList\
    \ :+ (\"D\")\n            if(g > 0.0) gradesList = gradesList :+ (\"D\")\n   \
    \         if(g > 0.0) gradesList = gradesList :+ (\"E\")\n        })\n       \
    \ gradesList", "        def gradeEquation(grades: List[ Float ]) = {\n       \
    \     val gradesCount = grades.size\n            var gradesSum : Float = 0f\n\
    \            var gradesAvg : Float = 0f\n            var gradesMax : Float = 0f\n\
    \            for (grade <- grades) {\n                gradesSum += grade\n   \
    \         }\n            gradesAvg = gradesSum / gradesCount\n            var\
    \ gradesGrade : String = \"-\" \n            for (i <- 0 until gradesCount) {\n\
    \                gradesGrade += (grades.filter(_ < i).sum * 2).toFloat / gradesCount\n\
    \            }\n            for (i <- 0 until gradesCount) {\n               \
    \ gradesMax += grades.filter(_ > i).sum\n            }\n            gradesGrade\
    \ = (gradesGrade / gradesCount).floor\n            gradesGrade += if(gradesGrade\
    \ == 0) \"E\" else if (gradesGrade == 1) \"D\" else if (gradesGrade == 2) \"C\"\
    \ else if (gradesGrade == 3) \"B\" else if (gradesGrade == 4) \"A\" else \"\"\n\
    \            val gradesMap : Map[Int,String] = Map(0 -> \"-\", 1 -> \"D\", 2 ->\
    \ \"C\", 3 -> \"B\", 4 -> \"A\")\n            (gradesGrade, gradesMap.getOrElse(gradesGrade,\"\
    -\"))\n        }\n        val gradesGrade = gradeEquation(grades)\n        gradesGrade._2",
  "      val sortedGrade = grades.toList\n      val sortedGradeMap = sortedGrade.toMap\n\
    \      val sortedGradeOrder = sortedGradeMap.keys.toList\n      val sortedGradeMapReverse\
    \ = sortedGradeMap.reverse\n      val sortedGradeOrderReverse = sortedGradeOrder.reverse\n\
    \      val newGradeMap = new mutable.HashMap[Int, String]()\n      var newGradeArray\
    \ = Array.empty[String]\n      var count = 0\n      for {\n        key <- 0 until\
    \ sortedGradeOrder.length\n      } yield {\n        val newKey = sortedGradeOrderReverse(key)\n\
    \        val newValue = sortedGradeMapReverse(newKey)\n        newGradeMap(newKey)\
    \ = newValue\n        count += 1\n        if (count == sortedGradeOrder.length)\n\
    \          newGradeArray = newGradeMap.values.toArray\n      }\n      newGradeArray",
  "        var grades : List[Float] = grades\n        for(i <- 0 until grades.size){\n\
    \            if(grades(i) > 4.0){\n                grades(i) = 4.0f\n        \
    \    }\n            if(grades(i) > 3.7){\n                grades(i) = 3.7f \n\
    \            }\n            if(grades(i) > 3.3){\n                grades(i) =\
    \ 3.3f\n            }\n            if(grades(i) > 3.0){\n                grades(i)\
    \ = 3.0f\n            }\n            if(grades(i) > 2.7){\n                grades(i)\
    \ = 2.7f \n            }\n            if(grades(i) > 2.3){\n                grades(i)\
    \ = 2.3f\n            }\n            if(grades(i) > 2.0){\n                grades(i)\
    \ = 2.0f\n            }\n            if(grades(i) > 1.7){\n                grades(i)\
    \ = 1.7f \n            }\n            if(grades(i) > 1.3){\n                grades(i)\
    \ = 1.3f \n            }\n            if(grades(i) > 1.0){\n                grades(i)\
    \ = 1.0f \n            }\n            if(grades(i) > 0.7){\n                grades(i)\
    \ = 0.7f \n            }\n            if(grades(i) > 0.0){\n                grades(i)\
    \ = 0.0f \n            }\n        }\n        var grades : List[Float] = grades\n\
    \        for(i <- 0 until grades.size){\n            if(grades(i) > 4.0){\n  \
    \              grades(i) = 4.0f\n            }\n            if(grades(i) > 3.7){\n\
    \                grades(i) = 3.7f \n            }\n            if(grades(i) >\
    \ 3.3){\n                grades(i) = 3.3f\n            }\n            if(grades(i)\
    \ > 3.0){\n                grades(i) = 3.0f\n            }\n            if(grades(i)\
    \ > 2.7){\n                grades(i) = 2.7f \n            }\n            if(grades(i)\
    \ > 2.3){\n                grades(i) = 2.3f\n            }\n            if(grades(i)\
    \ > 2.0){\n                grades(i) = 2.0f\n            }\n            if(grades(i)\
    \ > 1.7){\n                grades(i) = 1.7f \n            }\n            if(grades(i)\
    \ > 1.3){\n                grades(i) = 1.3f \n            }\n            if(grades(i)\
    \ > 1.0){\n                grades(i) = 1.0f \n            }\n            if(grades(i)\
    \ > 0.7){\n                grades(i) = 0.7f \n            }\n            if(grades(i)\
    \ > 0.0){\n                grades(i) = 0.0f \n            }\n        }\n     \
    \   var grades : List[Float] = grades\n        for(i <- 0 until grades.size){\n\
    \            if(grades(i) > 4.0){\n", "        val gradeArray = grades.toArray\n\
    \        val gradeSum = gradeArray.reduce((f1: Float, f2: Float) => f1 + f2)\n\
    \        val gradeAvg = gradeSum / gradeArray.size.toFloat\n        var gradeGrading:\
    \ Float = 0.toFloat\n        var letterGrading = \"F\"\n        gradeArray.foreach(f\
    \ => {\n            if (f < gradeAvg) {\n                if (gradeGrading < f)\
    \ {\n                    gradeGrading = f\n                    letterGrading =\
    \ String.valueOf((f - gradeAvg) / (f - gradeGrading))\n                }\n   \
    \         }\n        })\n        List(letterGrading)", "        var letters =\
    \ List[String]()\n        var gpa = grades.last\n        val gpaList = grades.take(grades.length\
    \ - 1)\n        var diff = 0.0\n        var gpaSum = 0.0\n        for (i <- 0\
    \ to grades.length - 1) {\n            diff = gpa - gpaList(i)\n            if\
    \ (diff < 0) {\n                diff += 5.0f\n            }\n            gpaSum\
    \ = gpaSum + diff * i\n        }\n        var average = if (gpaSum > 0.0) gpaSum\
    \ / gpa.length else 0.0f\n        for (i <- 0 to grades.length - 1) {\n      \
    \      diff = gpa - gpaList(i)\n            if (diff < 0) {\n                diff\
    \ += 5.0f\n            }\n            val gpaDiff = diff / gpa\n            val\
    \ averageDiff = average - averageList(i)\n            if (gpaDiff > averageDiff)\
    \ {\n                letters = letters :+ (\"D-\" :: scala.math.pow(gpaDiff, -1).toString)\n\
    \            } else if (gpaDiff < averageDiff) {\n                letters = letters\
    \ :+ (\"D+\" :: scala.math.pow(gpaDiff, -1).toString)\n            } else if (gpaDiff\
    \ == averageDiff) {\n                letters = letters :+ (\"D\" :: scala.math.pow(gpaDiff,\
    \ -1).toString)\n            } else if (gpaDiff == 0.0f) {\n                letters\
    \ = letters :+ (\"D\" :: scala.math.pow(gpaDiff, -1).toString)\n            }\n\
    \        }\n        for (i <- 0 to grades.length - 1) {\n            diff = gpa\
    \ - gpaList(i)\n            if (diff < 0) {\n                diff += 5.0f\n  \
    \          }\n            val gpaDiff = diff / gpa\n            val averageDiff\
    \ = average - averageList(i)\n            if (gpaDiff > averageDiff) {\n     \
    \           letters = letters :+ (\"C-\" :: scala.math.pow(gpaDiff, -1).toString)\n\
    \            } else if (gpaDiff < averageDiff) {\n                letters = letters\
    \ :+ (\"C+\" :: scala.math.pow(gpaDiff, -1).toString)\n            } else if (gpaDiff\
    \ == averageDiff) {\n                letters = letters :+ (\"C\" :: scala.math.pow(gpaDiff,\
    \ -1).toString)\n            } else if (gpaDiff == 0.0f) {\n                letters\
    \ = letters :+ (\"C\" :: scala.math.pow(gpaDiff, -1).toString)\n            }\n\
    \        }\n        for (i <- 0 to grades.length - 1) {\n            diff = gpa\
    \ - gpaList(i)\n            if (diff < 0) {\n                diff += 5.0f\n  \
    \          }\n            val gpaDiff = diff / g", "        // Create a map of\
    \ GPA => letter grade\n        val gradeMap : Map[Float,String] =\n          \
    \  grades.map{ grade => grade -> letterGrade(grade) }.toMap\n        // Collect\
    \ all grades with an odd grade\n        val oddGrades : Map[Float,String] = gradeMap.values.filter(_\
    \ % 2 == 0).map(x => x -> \"\").toMap\n        // Collect all grades with an even\
    \ grade\n        val evenGrades : Map[Float,String] = gradeMap.values.filter(_\
    \ % 2 == 1).map(x => x -> \"-\").toMap\n        // Create the output list\n  \
    \      oddGrades.keys.filter(!evenGrades.containsKey(_)).map(x => evenGrades(x))",
  "        //Use a map/filter/reduce to compute a list of letter grades\n        val\
    \ studentGrades = grades.filter( g => g.toFloat < 1.0f).toList\n        val gradeMap\
    \ = grades.map( g => g + \"%\").filter( g => g != \"0%\").map( g => (g.toFloat,g)).toMap\n\
    \        studentGrades.map( g => gradeMap(g) ).reduce( a => a.mkString( \", \"\
    \ ) )", '        // TODO: your implementation here', "        // Your code goes\
    \ here\n        return List[String]()", "      val gradingSystem = Map[String,\
    \ String](\n          \"4.0\" -> \"A+\",\n          \"3.7\" -> \"A\",\n      \
    \    \"3.3\" -> \"A-\",\n          \"3.0\" -> \"B+\",\n          \"2.7\" -> \"\
    B\",\n          \"2.3\" -> \"B-\",\n          \"2.0\" -> \"C+\",\n          \"\
    1.7\" -> \"C\",\n          \"1.3\" -> \"C-\",\n          \"1.0\" -> \"D+\",\n\
    \          \"0.7\" -> \"D\",\n          \"0.0\" -> \"D-\",\n          \"0.0\"\
    \ -> \"E\")\n      grades.map(grade => {\n        val value = gradingSystem get\
    \ grade.floor.toString match {\n          case Some(value) => value\n        \
    \  case None => \"\"\n        }\n        val gradeLetter = value.substring(1)\n\
    \        value.substring(0,1) match {\n          case first if first == \"0\"\
    \ => gradeLetter match {\n            case first if first == \"0\" => \"\"\n \
    \           case first if (first == \"+\" || first == \"-\") => first + gradeLetter\n\
    \            case _ => gradeLetter\n          }\n          case first if (first\
    \ == \"+\" || first == \"-\") => first + gradeLetter\n          case _ => gradeLetter\n\
    \        }\n      }).toList", "        var bestGrades: List[String] = Nil\n  \
    \      val sorted = grades.sorted\n        for (i <- sorted.indices) {\n     \
    \       val currentGrade = sorted.get(i)\n            val previous = sorted.lastOption.filterNot(_.toFloat\
    \ < currentGrade).head\n            val nextGrade = sorted.drop(i + 1).head\n\
    \            val gradeDifference = previous - currentGrade\n            val previousLetterGrade\
    \ = if(gradeDifference > 0) \"D-\" else if(gradeDifference < 0) \"D+\" else \"\
    D\"\n            val nextLetterGrade = if(nextGrade > currentGrade) \"B-\" else\
    \ if(nextGrade < currentGrade) \"B\" else \"B\"\n            val currentLetterGrade\
    \ = if(currentGrade > previous) \"C+\" else if(currentGrade < previous) \"C\"\
    \ else \"C\"\n            bestGrades ::=  if(bestGrades.isEmpty) List(previousLetterGrade,\
    \ currentLetterGrade) else List(previousLetterGrade, currentLetterGrade, nextLetterGrade)\n\
    \        }\n        bestGrades.toList", "        val gradesSum = grades.reduce((x,\
    \ y) => x + y);\n        val gradesLength = grades.length\n        val sum = (grades.reduce((x,\
    \ y) => x + y) / gradesLength)\n        if(gradesSum > 0) {\n            grades.map((grade,\
    \ index) => \n                if(sum < grade) {\n                    index.toString\n\
    \                } else if(sum == grade) {\n                    grades.take(index).map(_\
    \ + \"\").mkString(\"\")\n                } else if(sum >= grade) {\n        \
    \            grades.drop(index).map(_ + \"\").mkString(\"\")\n               \
    \ } else {\n                    grades.take(index).map(_ + \"\").mkString(\"\"\
    )\n                }\n            ).reverse\n        } else {\n            grades.map((grade,\
    \ index) =>\n                index.toString\n            ).reverse\n        }",
  "        val gradeCount = grades.count\n        val gradePercent = grades.sum /\
    \ gradeCount * 100\n        val maxGrade = grades.max\n        val minGrade =\
    \ grades.min\n        val gradeMean = grades.sum / gradeCount\n        val gradeVariance\
    \ = (grades.map(x => (x - gradeMean) * (x - gradeMean)).sum / gradeCount).toFloat\n\
    \        val gradeStandardDeviation = (grades.map(x => (x - gradeMean) * (x -\
    \ gradeMean)).toList.sum / gradeCount).toFloat\n\n        grades.map(x => Math.round(x\
    \ * 100) / 100.0).map(x => if (x < 0.0) \"%\" + (0.0 + x) else \"%\" + (x + 0.0)).mkString(\"\
    , \")", "        var totalGPA : Float = 0.toFloat\n        var gradeStrings :\
    \ List[String] = Nil\n        for(grade <- grades) {\n            totalGPA +=\
    \ grade\n            if(totalGPA < 0.toFloat) totalGPA = 0.toFloat\n         \
    \   if(totalGPA > 6.0.toFloat) totalGPA = (0.toFloat + totalGPA).toFloat\n   \
    \     }\n        for(grade <- grades) {\n            gradeStrings += numericalLetterGradeGrade(grade,totalGPA)\n\
    \        }\n        gradeStrings.reverse", "        var letterGrades: List[String]\
    \ = Nil\n        var numericalGrades = grades.toList\n        var gpas = numericalGrades.map(x\
    \ => x.toFloat)\n        var gpaIndex = 0\n        while (numericalGrades.nonEmpty)\
    \ {\n            var total = 0.0\n            var gpa = gpas(gpaIndex)\n     \
    \       while (num(gpa) >= num(grades(gpaIndex))) {\n                total +=\
    \ 1.0;\n                gpaIndex += 1\n                if (num(gpa) > num(grades(gpaIndex)))\
    \ {\n                    gpaIndex += 1\n                }\n            }\n   \
    \         letterGrades = letterGrades :+ String.format(\"%+.2f\", total * num(grades(gpaIndex))\
    \ * .01f) + \"*\"\n            if (gpaIndex + 1 < gpas.size) {\n             \
    \   numericalGrades = numericalGrades.drop(gpaIndex + 1)\n            }\n    \
    \        else {\n                numericalGrades = Nil\n            }\n      \
    \  }\n        return letterGrades", "        grades.sortWith(_ < _)\n        grades.reverse.zipWithIndex.collect\
    \ {\n            case (grade, index) if (grade >= 4.0) => s\"${index + 1}+ ${toLetter(grade)}\"\
    \n            case (grade, index) if (grade > 3.0) => s\"${index + 1}- ${toLetter(grade)}\"\
    \n            case (grade, index) if (grade <= 3.0) => s\"${index + 1}${toLetter(grade)}\"\
    \n            case (grade, index) => s\"${index + 1}\"\n        }", "        val\
    \ gradesMap = grades.zipWithIndex.map{case (grade,index) => (index+1,grade)}.toMap\n\
    \        val sortedGrades = grades.toList.sortBy(math.abs); \n        val resultGrades\
    \ = if(sortedGrades.head < sortedGrades.last) sortedGrades.map(x => gradesMap(x).getOrElse(\"\
    E\")).toList\n        else sortedGrades.map(x => gradesMap.get(x).get).getOrElse(\"\
    E\")\n        resultGrades.reverse", "        val sortedGrades = grades.sortWith(x\
    \ => x.toFloat)\n        val sortedGradesAsList = sortedGrades.toList\n      \
    \  val gpa = sortedGradesAsList.last - sortedGradesAsList.head\n        val letterGrades:\
    \ List[String] = \n            sortedGradesAsList.map((x,y) => {\n           \
    \     val difference = x - y\n                val modDifference = difference %\
    \ 1f\n                val percent = if (modDifference > 0.5f) 1f else 0f\n   \
    \             val result = if (modDifference == 0) \"F\" else if (percent > 0.7f)\
    \ \"A\" else \n                    \"A-\"\n                result + \n       \
    \         \" \" + if (x < y) \"C\" else if (x > y) \"B\" else \"A+\"}) \n    \
    \    if (gpa < 0)\n            letterGrades.reverse\n        else letterGrades",
  "        val gradesMap = grades.zipWithIndex.map(e => (e._2, e._1)).toMap\n    \
    \    val gradesSet = grades.toSet\n        val gradesLength = grades.length\n\
    \        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val letterGrades = new Array[String](gradesArrayLength)\n        val\
    \ index = gradesArray.indexWhere(e => e < 0)\n        if (index != -1) {\n   \
    \         val temp = gradesArray(index).toFloat\n            if (gradesMap.containsKey(temp))\
    \ {\n                val grade = gradesMap(temp)\n                for (i <- gradesArrayIndex\
    \ to gradesArrayLength) {\n                    if (gradesSet.contains(gradesArray(i).toFloat))\
    \ {\n                        letterGrades(i) = grade\n                    } else\
    \ if (gradesSet.contains(gradesArray(i + 1).toFloat)) {\n                    \
    \    letterGrades(i) = grade + \"+\"\n                    } else if (gradesSet.contains(gradesArray(i\
    \ + gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"-\"\n                    } else if (gradesSet.contains(gradesArray(i + 2\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"+\"\n                    } else if (gradesSet.contains(gradesArray(i + 3\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"-\"\n                    } else if (gradesSet.contains(gradesArray(i + 4\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"+\"\n                    } else if (gradesSet.contains(gradesArray(i + 5\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"-\"\n                    } else if (gradesSet.contains(gradesArray(i + 6\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"+\"\n                    } else if (gradesSet.contains(gradesArray(i + 7\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"-\"\n                    } else if (gradesSet.contains(gradesArray(i + 8\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"+\"\n                    } else if (gradesSet.contains(gradesArray(i + 9\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"-\"\n                    } else if (gradesSet.contains(gradesArray(i + 10\
    \ * gradesLength).toFloat)) {\n                        letterGrades(i) = grade\
    \ + \"+\"\n                    } else if (gradesSet.contains(grade", "       \
    \ val letterGrades = grades.map(grade => {\n            val gpa = grade * 4.0\n\
    \            val grading = (gpa > 3.7f && gpa < 3.3f) \n                || (gpa\
    \ > 3.3f && gpa < 3.0f) \n                || (gpa > 3.0f && gpa < 2.7f)\n    \
    \            || (gpa > 2.7f && gpa < 2.3f) \n                || (gpa > 2.3f &&\
    \ gpa < 2.0f)\n                || (gpa > 2.0f && gpa < 1.7f)\n               \
    \ || (gpa > 1.7f && gpa < 1.3f)\n                || (gpa > 1.3f && gpa < 1.0f)\n\
    \                || (gpa > 1.0f && gpa < 0.7f)\n                || (gpa > 0.7f\
    \ && gpa < 0.0f)\n                || (gpa < 0.0f)\n            val gradeLetter\
    \ = (grading ? \"A+\" : (gpa > 4.0f ? \"A-\" : (gpa > 3.0f ? \"B+\" : ((gpa >\
    \ 2.7f ? \"B\" : ((gpa > 2.3f ? \"B-\" : ((gpa > 2.0f ? \"C+\" : ((gpa > 1.7f\
    \ ? \"C\" : ((gpa > 1.3f ? \"C-\" : ((gpa > 1.0f ? \"D+\" : ((gpa > 0.7f ? \"\
    D\" : ((gpa > 0.0f ? \"D-\" : null)))))))))))))))\n            if (grade < 0)\n\
    \                gradeLetter + \"E\"\n            else\n                gradeLetter\n\
    \        }) \n\n        return letterGrades", "        val gradesTable = grades.zip(List('A+'\
    \ -> 3, 'A' -> 3, 'B+' -> 2, 'B' -> 2, 'C+' -> 1, 'C' -> 1, 'D+' -> 0, 'D' ->\
    \ 0, 'E' -> 0)).toMap\n        val (minGPA, maxGPA) = (grades.min, grades.max)\n\
    \        val range = (minGPA to maxGPA).toList\n        \n        val result =\
    \ range.reverse.map { grade =>\n            val currentGrade = grade - minGPA\n\
    \            val letterGrade = gradesTable(currentGrade)\n            s\"${letterGrade}\
    \ ${grade}\"\n        }.reverse\n        result", "        grades.tail.foldLeft(List[String]()){\n\
    \            case(acc, item) => {\n                acc :+ {\n                \
    \    val gpa = item\n                    val letter = if (item > 4.0) \"A+\" else\
    \ if (item > 3.7) \"A\" else if (item > 3.3) \"A-\" else if (item > 3.0) \"B+\"\
    \ else if (item > 2.7) \"B\" else if (item > 2.3) \"B-\" else if (item > 2.0)\
    \ \"C+\" else if (item > 1.7) \"C\" else if (item > 1.3) \"C-\" else if (item\
    \ > 1.0) \"D+\" else if (item > 0.7) \"D\" else if (item > 0.0) \"D-\" else \"\
    E\"\n                    s\"${item}$letter\"\n                }\n            }\n\
    \        }.reverse", "        var totalGpa = grades.reduce((a, b) => a + b)\n\
    \        var gpa = grades.reduce((a, b) => a + b)\n        var totalGrade = 0\n\
    \        var totalPercentage = 0\n        var letterGrades: List[String] = Nil\n\
    \        var totalLetterGrades: List[String] = Nil\n        while (totalGpa >\
    \ 0){\n            totalPercentage = totalGpa / gpa\n            letterGrades\
    \ = for (g of grades) yield {\n                val percent = totalPercentage.toFloat\
    \ * g\n                if (percent > 0) \"+\"\n                else if (percent\
    \ < 0) \"-\"\n                else g\n            }\n            totalLetterGrades\
    \ = totalLetterGrades ::: letterGrades\n            gpa = gpa.toFloat - totalPercentage.toFloat\n\
    \            totalGrade = totalGrade + 1\n        }\n        totalLetterGrades",
  "        val gradesSet = new mutable.HashSet[String]()\n        grades.foreach(g\
    \ => {\n            if ( g < 3.0)\n                gradesSet.add(\"B+\")\n   \
    \         else if( g < 3.7 )\n                gradesSet.add(\"B\")\n         \
    \   else if( g < 4.0 )\n                gradesSet.add(\"A+\")\n            else\
    \ if( g < 4.3 )\n                gradesSet.add(\"A\")\n            else if( g\
    \ < 4.6 )\n                gradesSet.add(\"A-\")\n            else if( g < 5.0\
    \ )\n                gradesSet.add(\"B\")\n            else if( g < 5.3 )\n  \
    \              gradesSet.add(\"B-\")\n            else if( g < 5.6 )\n       \
    \         gradesSet.add(\"B+\")\n            else if( g < 6.0 ) \n           \
    \     gradesSet.add(\"C+\")\n            else if( g < 6.3 )\n                gradesSet.add(\"\
    C\")\n            else if( g < 6.6 )\n                gradesSet.add(\"C-\")\n\
    \            else if( g < 7.0 )\n                gradesSet.add(\"D+\")\n     \
    \       else if( g < 7.3 )\n                gradesSet.add(\"D\")\n           \
    \ else if( g < 7.6 )\n                gradesSet.add(\"D-\")\n            else\
    \ if( g < 8.0 )\n                gradesSet.add(\"D+\")\n            else if( g\
    \ < 8.3 )\n                gradesSet.add(\"D\")\n            else if( g < 8.6\
    \ )\n                gradesSet.add(\"D-\")\n            else if( g < 9.0 )\n \
    \               gradesSet.add(\"E\")\n        })\n        gradesSet.map(a => a.toUpperCase()).filterNot(a\
    \ => a.startsWith(\"E\"))", "        val gradeList = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        for(grade <- grades){\n            val p = new BigDecimal(grade.asInstanceOf[Float]).pow(1/4.0f)\n\
    \            gradeList += p.intValue.toString.toChar\n        }\n        gradeList.reverse.map(\
    \ _ => \n                if((gradeList.length <= 8) && (gradeList.contains(0))\
    \ ) \"\" else gradeList.take(8).mkString(\"\")\n        )", "        val gradesGrouped\
    \ = grades.groupBy(x => math.abs(x)).sortBy(_._1).reverse\n        val sortedList\
    \ = gradesGrouped.map { case (grade, list) => grade.toString -> list.map(_.toString).sortBy(_.charAt(0))\
    \ }.flatten.toList\n        val gradesAndLetters = sortedList.map {\n        \
    \    case (grade, letters) => {\n                val letter = letters.filter(x\
    \ => x.charAt(0) == grade ).head\n                grade -> letter\n          \
    \  }\n        }\n        gradesAndLetters.toList.map { case (grade, letter) =>\
    \ letter }", "        var gradeCounter = grades.size\n        var result = new\
    \ mutable.LinkedList\n        for(i <- 0 until grades.size)\n            if (grades(i)\
    \ < 0.0f) \n                result.addFirst(\"E\")\n            else if (grades(i)\
    \ > 3.7f)\n                result.addLast(grades(i).toChar.toString + \"+\")\n\
    \            else if (grades(i) > 3.3f) \n                result.addLast(grades(i).toChar.toString\
    \ + \"-\")\n            else if (grades(i) > 2.0f)\n                result.addLast(grades(i).toChar.toString\
    \ + \"+\")\n            else if (grades(i) > 1.7f)\n                result.addLast(grades(i).toChar.toString)\n\
    \            else\n                result.addLast(grades(i).toChar.toString +\
    \ \"-\")\n        gradeCounter - result.size\n        result.toList", "      \
    \  val map = Map[Int, String]()\n        for (grade <- grades) {\n           \
    \ if (grade > 3.9) map(1) = \"B+\"\n            if (grade > 3.8) map(2) = \"B\"\
    \n            if (grade > 3.7) map(3) = \"B-\"\n            if (grade > 3.6) map(4)\
    \ = \"C+\"\n            if (grade > 3.5) map(5) = \"C\"\n            if (grade\
    \ > 3.4) map(6) = \"C-\"\n            if (grade > 3.3) map(7) = \"D+\"\n     \
    \       if (grade > 3.2) map(8) = \"D\"\n            if (grade > 3.1) map(9) =\
    \ \"D-\"\n            if (grade > 3.0) map(10) = \"E\"\n        }\n        map.toList.sortWith((x,y)\
    \ => (x._1 - y._1).abs).toList.map(_._2)", '        grades.map(g => if (g < 3.0)
    "A-" else if (g < 3.3) "A-" else if (g < 3.7) "A-" else if (g < 4.0) "A+" else
    if (g < 4.3) "A+" else if (g < 4.7) "A+" else if (g < 5.0) "A+" else if (g < 5.3)
    "A+" else if (g < 5.7) "A+" else if (g < 6.0) "A+" else if (g < 6.3) "A+" else
    if (g < 6.7) "A+" else if (g < 7.0) "A+" else if (g < 7.3) "A+" else if (g < 7.7)
    "A+" else if (g < 8.0) "A+" else if (g < 8.3) "A+" else if (g < 8.7) "A+" else
    if (g < 9.0) "A+" else if (g < 9.3) "A+" else if (g < 9.7) "A+" else if (g < 10.0)
    "A+" else if (g < 10.3) "A+" else if (g < 10.7) "A+" else if (g < 11.0) "A+" else
    if (g < 11.3) "A+" else if (g < 11.7) "A+" else if (g < 12.0) "A+" else if (g
    < 12.3) "A+" else if (g < 12.7) "A+" else if (g < 13.0) "A+" else if (g < 13.3)
    "A+" else if (g < 13.7) "A+" else if (g < 14.0) "A+" else if (g < 14.3) "A+" else
    if (g < 14.7) "A+" else if (g < 15.0) "A+" else if (g < 15.3) "A+" else if (g
    < 15.7) "A+" else if (g < 16.0) "A+" else if (g < 16.3) "A+" else if (g < 16.7)
    "A+" else if (g < 17.0) "A+" else if (g < 17.3) "A+" else if (g < 17.7) "A+" else
    if (g < 18.0) "A+" else if (g < 18.3) "A+" else if (g < 18.7) "A+" else if (g
    < 19.0) "A+" else if (g < 19.3) "A+" else if (g < 19.7) "A+" else ("B-"))', " \
    \       val n = grades.size \n        val a = grades(n-1)\n        val b = grades(n-2)\n\
    \        val c = grades(n-3)\n        val d = grades(n-4)\n        val e = grades(n-5)\n\
    \        val f = 0\n        val g = grades.last\n        val gradesArray = List.fill(n)(null).map(_\
    \ => \"\")\n        gradesArray(0) = \"A+\"\n        gradesArray(1) = \"A\"\n\
    \        gradesArray(2) = \"A-\"\n        gradesArray(3) = \"B+\"\n        gradesArray(4)\
    \ = \"B\"\n        gradesArray(5) = \"B-\"\n        gradesArray(6) = \"C+\"\n\
    \        gradesArray(7) = \"C\"\n        gradesArray(8) = \"C-\"\n        gradesArray(9)\
    \ = \"D+\"\n        gradesArray(10) = \"D\"\n        gradesArray(11) = \"D-\"\n\
    \        gradesArray(12) = \"E\"\n        val gradesArray2 = List.fill(n)(null).map(_\
    \ => \"\")\n        gradesArray2(0) = \"A+\"\n        gradesArray2(1) = \"B\"\n\
    \        gradesArray2(2) = \"C\"\n        gradesArray2(3) = \"D\"\n        gradesArray2(4)\
    \ = \"E\"\n        gradesArray2(5) = \"A\"\n        gradesArray2(6) = \"B\"\n\
    \        gradesArray2(7) = \"C\"\n        gradesArray2(8) = \"D\"\n        gradesArray2(9)\
    \ = \"E\"\n        val gradesArray3 = List.fill(n)(null).map(_ => \"\")\n    \
    \    gradesArray3(0) = \"A+\"\n        gradesArray3(1) = \"B\"\n        gradesArray3(2)\
    \ = \"C\"\n        gradesArray3(3) = \"D\"\n        gradesArray3(4) = \"E\"\n\
    \        gradesArray3(5) = \"A\"\n        gradesArray3(6) = \"B\"\n        gradesArray3(7)\
    \ = \"C\"\n        gradesArray3(8) = \"D\"\n        gradesArray3(9) = \"E\"\n\
    \        val gradesArray4 = List.fill(n)(null).map(_ => \"\")\n        gradesArray4(0)\
    \ = \"A+\"\n        gradesArray4(1) = \"B\"\n        gradesArray4(2) = \"C\"\n\
    \        gradesArray4(3) = \"D\"\n        gradesArray4(4) = \"E\"\n        gradesArray4(5)\
    \ = \"A\"\n        gradesArray", "        var numGrades: List[String] = List()\n\
    \        for (grade <- grades) {\n            if (grade > 4.0 && grade < 3.7)\
    \ {\n                numGrades = numGrades :+ (\"A+\" :+ \"A\")\n            }\
    \ else if (grade > 3.3 && grade < 3.0) {\n                numGrades = numGrades\
    \ :+ (\"A-\" :+ \"A\")\n            } else if (grade > 2.7 && grade < 2.3) {\n\
    \                numGrades = numGrades :+ (\"B+\" :+ \"B\")\n            } else\
    \ if (grade > 2.3 && grade < 2.0) {\n                numGrades = numGrades :+\
    \ (\"B\" :+ \"B\")\n            } else if (grade > 1.7 && grade < 1.3 ) {\n  \
    \              numGrades = numGrades :+ (\"C+\" :+ \"C\")\n            } else\
    \ if (grade > 1.3 && grade < 1.0) {\n                numGrades = numGrades :+\
    \ (\"C\" :+ \"C\")\n            } else if (grade > 0.7 && grade < 1.0) {\n   \
    \             numGrades = numGrades :+ (\"D+\" :+ \"D\")\n            } else if\
    \ (grade > 0.0 && grade < 0.0) {\n                numGrades = numGrades :+ (\"\
    D\" :+ \"D\")\n            } else if (grade > 0.0 && grade > 0.0) {\n        \
    \        numGrades = numGrades :+ (\"E\" :+ \"E\")\n            }\n        }\n\
    \        return numGrades", "        def sumAndDiff(grades: List[Float], grade:\
    \ Float) : List[Float] = {\n            val s = grades.sum\n            val d\
    \ = grades.diff(grade)\n            s diff d map { x =>\n                val remainder\
    \ = x - s\n                val difference = remainder.toFloat / d\n          \
    \      s.toString + if (remainder < 0) \"-\" + difference.toString else difference.toString\n\
    \            }\n        }\n        val gradesAndDifferences = grades zip sumAndDiff(grades,\
    \ grades.last)\n        gradesAndDifferences filter (_._1 > 0).map (g => s\"${g._1}${if\
    \ (g._2 < 0) \"-\" else \"\"}${g._2}\")", "        grades.foldLeft((List[String](),\
    \ List[String]())){\n            case ((acc1, acc2), grade) =>\n             \
    \   val gpa = grade / 2.0f\n                val gpaLetter = gpa.trunc\n      \
    \          val gpaLetterGrade = Letters.gpaLetterToLetter(gpaLetter)\n       \
    \         acc1 match {\n                    case (acc, (a)) => (gpaLetterGrade\
    \ :: acc, gpaLetterGrade :: acc1)\n                    case (acc, _) => (acc :+\
    \ gpaLetterGrade, acc :+ gpaLetterGrade)\n                }\n        }._1.reverse",
  "        val students = grades.toList.map { grade => grade / 10 }\n        val letters\
    \ = grades.map(grade => if(grade < 3.0) \"F\"\n        else if(grade < 3.7) \"\
    D\"\n        else if(grade < 3.3) \"C-\"\n        else if(grade < 3.0) \"B-\"\n\
    \        else if(grade < 2.7) \"B\"\n        else if(grade < 2.3) \"B-\"\n   \
    \     else if(grade < 2.0) \"A-\"\n        else if(grade < 1.7) \"A\"\n      \
    \  else if(grade < 1.3) \"A-\"\n        else if(grade < 1.0) \"A-\"\n        else\
    \ if(grade < 0.7) \"A\"\n        else if(grade < 0.0) \"F\"\n        else \"E\"\
    )\n        val gradeLetters = students zip letters map {case (grade, letter) =>\
    \ letter}\n        gradeLetters.toList.sortBy(_._1).reverse.map(i => i.last)",
  '        grades.filter( g => g <= 4.0f ).map( g => if (g > 3.0f) g else "A" ).filter(
    g => g <= 3.7f ).map( g => if (g > 3.3f) g else "A" ).filter( g => g <= 3.3f ).map(
    g => if (g > 3.0f) g else "B" ).filter( g => g <= 2.7f ).map( g => if (g > 2.3f)
    g else "B" ).filter( g => g <= 2.3f ).map( g => if (g > 2.0f) g else "C" ).filter(
    g => g <= 1.7f ).map( g => if (g > 1.3f) g else "C" ).filter( g => g <= 1.0f ).map(
    g => if (g > 0.7f) g else "D" ).filter( g => g <= 0.0f ).map( g => if (g > 0.0f)
    g else "D" ).filter( g => g == 0.0f ).map( g => if (g > 0.0f) g else "E" ).toList',
  "        var bestGrade = grades.head\n        var gradeFound = true\n        var\
    \ gradesString = grades.toString()\n        while(gradeFound) {\n            var\
    \ bestGradeIndex = gradesString.lastIndexOf(bestGrade.toString)\n            if(bestGradeIndex\
    \ == -1) {\n                gradeFound = false\n                bestGrade = grades.head\n\
    \                bestGradeIndex = gradesString.lastIndexOf(bestGrade.toString)\n\
    \            }\n            var grade = bestGrade\n            bestGrade = grades.tail.head\n\
    \            bestGradeIndex = gradesString.lastIndexOf(bestGrade.toString)\n \
    \           gradeFound = gradeFound\n            gradesString = gradesString.substring(bestGradeIndex\
    \ + 1)\n        }\n        bestGrade", "        var gradesToReturn : List[String]\
    \ = List[String]()\n        var currentGrade : Float = grades.head \n        var\
    \ gradeIndex = 1\n        // Iterate through the list\n        while(gradeIndex\
    \ < grades.size) {\n            currentGrade = grades(gradeIndex)\n          \
    \  // If the current grade is greater than the grade before it, add it\n     \
    \       // to the list of grades\n            if(currentGrade > currentGrade(gradeIndex\
    \ - 1)) {\n                gradesToReturn += currentGrade.asInstanceOf[String]\
    \ + \" \"\n            }\n            gradeIndex += 1\n        }\n        return\
    \ gradesToReturn", "        // The last element in the grades list will always\
    \ be 0.0\n        // This makes it easy to know when to stop the loop because\
    \ there is no\n        // need to continue to test the rest of the list.\n   \
    \     val index = grades.length - 1\n        val gpa = grades(index)\n       \
    \ grades.take(index).foldLeft(List[String]()) { (grading: List[String], x: Float)\
    \ => {\n            val gpa = grading(grading.length-1)\n            val letterGrade\
    \ = if (x<=gpa) {\n                if (x>3.7) {\n                    \"A+\"\n\
    \                }\n                else if (x>3.3) {\n                    \"\
    A\"\n                }\n                else if (x>3.0f) {\n                 \
    \   \"B+\"\n                }\n                else if (x>2.7) {\n           \
    \         \"B\"\n                }\n                else if (x>2.3) {\n      \
    \              \"B-\"\n                }\n                else if (x>2.0f) {\n\
    \                    \"C+\"\n                }\n                else if (x>1.7)\
    \ {\n                    \"C\"\n                }\n                else if (x>1.3)\
    \ {\n                    \"C-\"\n                }\n                else if (x>1.0f)\
    \ {\n                    \"D+\"\n                }\n                else if (x>0.7)\
    \ {\n                    \"D\"\n                }\n                else {\n  \
    \                  \"D-\"\n                }\n            }\n            grading\
    \ :+ letterGrade\n        }}", "        var total = 0.0\n        var count = 1\n\
    \        var grade = \"\"\n\n        for (i<- grades.indices) {\n            total\
    \ = total + grades(i)\n            count = count + 1\n        }\n\n        if\
    \ (total < 3.0) {\n            grade = \"E\"\n        } else if (total < 4.0)\
    \ {\n            if (count > 2) {\n                grade = \"D-\"\n          \
    \  } else {\n                grade = \"D\"\n            }\n        } else if (total\
    \ < 5.0) {\n            grade = \"C-\"\n        } else if (total < 6.0) {\n  \
    \          grade = \"C\"\n        } else if (total < 7.0) {\n            if (count\
    \ > 3) {\n                grade = \"B-\"\n            } else {\n             \
    \   grade = \"B\"\n            }\n        } else if (total < 8.0) {\n        \
    \    if (count > 4) {\n                grade = \"B+\"\n            } else {\n\
    \                grade = \"A+\"\n            }\n        } else if (total < 9.0)\
    \ {\n            grade = \"A\"\n        } else {\n            if (count > 5) {\n\
    \                grade = \"A-\"\n            } else {\n                grade =\
    \ \"A\"\n            }\n        }\n\n        grades.map{ g => \n            if\
    \ (g < 3.0) \"E\" else (g < 4.0) + (g < 5.0) \"D-\" else (g < 6.0) \n        \
    \        + (g < 7.0) + (g < 8.0) + (g < 9.0) \"C-\" \n                else (g\
    \ < 10.0) + (g < 11.0) \"C\" \n                else (g < 12.0) + (g < 13.0) \"\
    B-\" \n                else (g < 14.0) + (g < 15.0) \"B\" \n                else\
    \ (g < 16.0) + (g < 17.0) \"A+\" \n                else (g < 18.0) \"A\" \n  \
    \              else (g < 19.0) \"A-\" \n                else (g < 20.0) \"A\"\
    \ \n                else (\"E\")\n        }.filterNot(_ == \"E\")", "        val\
    \ gpas = grades.toList\n        val gpaSet = gpas.toSet\n        gpas.filter(x\
    \ => gpaSet.contains(x))", "        val letterGrades = grades.map(letter => if\
    \ (letter > 3.0 || letter < 0.0) letter.toString else if (letter < 2.3) \"A-\"\
    \ else if (letter < 3.0) \"A-\" else if (letter < 3.7) return \"A+\" else if (letter\
    \ < 4.0) \"A\" else if (letter < 4.3) \"A\" else if (letter < 4.7) \"A+\" else\
    \ if (letter < 5.0) \"B+\" else if (letter < 5.3) \"B\" else if (letter < 5.7)\
    \ \"B\" else if (letter < 6.0) \"B+\" else if (letter < 6.3) \"B+\" else if (letter\
    \ < 6.7) \"B+\" else if (letter < 7.0) \"B-\" else if (letter < 7.3) \"B\" else\
    \ if (letter < 7.7) \"B\" else if (letter < 8.0) return \"B-\" else if (letter\
    \ < 8.3) \"B+\" else if (letter < 8.7) \"B+\" else if (letter < 9.0) return \"\
    B-\" else if (letter < 9.3) \"B-\" else if (letter < 9.7) \"B\" else if (letter\
    \ < 10.0) return \"C+\" else if (letter < 10.3) \"C\" else if (letter < 10.7)\
    \ \"C+\" else if (letter < 11.0) return \"C-\" else if (letter < 11.3) \"C\" else\
    \ if (letter < 11.7) \"C+\" else if (letter < 12.0) return \"C\" else if (letter\
    \ < 12.3) \"C-\" else if (letter < 12.7) \"C\" else null )\n        letterGrades.filter(x\
    \ => x != null).toList", "        val gradesArray = grades.toArray\n        val\
    \ gradesArrayLength = gradesArray.length\n        var sum = 0.toFloat\n      \
    \  for(i <- 0 until gradesArrayLength) {\n            val currentGrade = gradesArray(i)\n\
    \            sum += currentGrade\n        }\n        val average = sum / gradesArrayLength\n\
    \        val gradeList = new mutable.LinkedList[String]\n        for(i <- 0 until\
    \ gradesArrayLength) {\n            val currentGrade = gradesArray(i)\n      \
    \      val currentLetterGrade = if(currentGrade <= average) letterGrade(currentGrade)\
    \ else \"D\"\n            gradeList.add(currentLetterGrade)\n        }\n     \
    \   gradeList.map(_.toUpperCase)", "        var temp = 0\n        var tempGrade\
    \ = 0\n        var tempGradeString = \"\"\n        var studentGrade = grades.head\n\
    \        var studentGPA = grades.last\n\n        var grades: List[String] = new\
    \ List[String]()\n        var gradeLength = 0\n        for(grade <- grades) {\n\
    \            gradeLength += 1\n            temp += grade\n        }\n\n      \
    \  for(grade <- grades) {\n            if(grade >= 3.0f) {\n                tempGrade\
    \ = grade - 3.0f\n                tempGradeString = \"A+\"\n            } else\
    \ if(grade >= 2.0f) {\n                tempGrade = grade - 2.0f\n            \
    \    tempGradeString = \"A-\"\n            } else if(grade >= 1.0f) {\n      \
    \          tempGrade = grade - 1.0f\n                tempGradeString = \"B+\"\n\
    \            } else if(grade >= 0.7f) {\n                tempGrade = grade - 0.7f\n\
    \                tempGradeString = \"B\"\n            } else if(grade >= 0.3f)\
    \ {\n                tempGrade = grade - 0.3f\n                tempGradeString\
    \ = \"B-\"\n            } else if(grade >= 0.0f) {\n                tempGrade\
    \ = grade - 0.0f\n                tempGradeString = \"C+\"\n            } else\
    \ if(grade >= -0.0f) {\n                tempGrade = grade - 0.0f\n           \
    \     tempGradeString = \"C\"\n            } else if(grade < 0.0f) {\n       \
    \         tempGrade = grade - 0.0f\n                tempGradeString = \"C-\"\n\
    \            } else if(grade >= -0.3f) {\n                tempGrade = grade -\
    \ 0.3f\n                tempGradeString = \"D+\"\n            } else if(grade\
    \ >= -0.7f) {\n                tempGrade = grade - 0.7f\n                tempGradeString\
    \ = \"D\"\n            } else if(grade >= -1.0f) {\n                tempGrade\
    \ = grade - 1.0f\n                tempGradeString = \"D-\"\n            } else\
    \ if(grade >= -1.3f) {\n                tempGrade = grade - 1.3f\n           \
    \     tempGradeString = \"E\"\n            }\n            grades.insert(gradeLength\
    \ - 1, tempGradeString)\n            tempGradeString = \"\"\n        }\n     \
    \   return grades", "        var minGPA = grades.min\n        var maxGPA = grades.max\n\
    \        // Write your code here", "        // 1. Declare and define variables\
    \ needed\n        var gpa = grades.head \n        var gpaIndex = 0\n        var\
    \ gradeIndex = 0\n        var gradeLetters = List.empty[String]\n\n        //\
    \ 2. Loop from last position to the first\n        // 3. Use gpaIndex to find\
    \ the gpa \n        // 4. Use gradeIndex to find the letter\n        // 5. Add\
    \ to gradeLetters\n        // 6. Increment gradeIndex\n        // 7. Increment\
    \ gpaIndex\n        // 8. Remove the first element of grades\n        while (gradeIndex\
    \ < grades.length) {\n            while (gradeIndex < grades.length) {\n     \
    \           val gpa = grades(gpaIndex).toFloat\n                if (gpa >= gpa)\
    \ {\n                    gradeLetters(gradeIndex) = gradeLetters(gradeIndex) +\
    \ grades(gpaIndex).toString.charAt(0)\n                    gradeIndex += 1\n \
    \                   gpaIndex += 1\n                } else {\n                \
    \    gradeLetters(gradeIndex) = gradeLetters(gradeIndex) + grades(gpaIndex).toString.charAt(gradeIndex\
    \ + 1)\n                    gradeIndex += 1\n                    gpaIndex += 1\n\
    \                }\n            }\n            gradeIndex = 0\n            gpaIndex\
    \ = 0\n            gradeLetters = gradeLetters :+ gradeLetters(0)\n        }\n\
    \        gradeLetters", "        grades.toList.sortWith((a, b) => a._1 < b._1).foldLeft(List[String]())\
    \ { \n            case (acc, g) =>\n                val gpa = g.toFloat\n    \
    \            val lastGPA = acc.last._2 // A trick I learned from Jake.\n     \
    \           val score = gpa - lastGPA\n                val grade = if(score >=\
    \ 0) \"+\" else if (score < 0) \"-\" else \"0\"\n                (acc :+ grade\
    \ :: acc) match {\n                    case (acc, List(\"\", grade)) => acc \n\
    \                    case (acc, List(_, grade, _)) => acc\n                  \
    \  case (acc, List(_, _, grade)) => acc\n                }\n        }.last.dropRight(1)\
    \ // Dropping the last letter grade we added in the fold", "        // TODO: Write\
    \ code here\n        val gpa = grades.map(f => f / 4.0f).toList\n        val gradesMap\
    \ = gpa.map(f => f.toInt -> \"A\")\n        gpa.filter( f => f > 3.7f && f < 3.3f).map(f\
    \ => f -> \"A\")\n        gpa.filter( f => f > 3.3f && f < 3.0f).map(f => f ->\
    \ \"A-\")\n        gpa.filter( f => f > 3.0f && f < 2.7f).map(f => f -> \"B+\"\
    )\n        gpa.filter( f => f > 2.7f && f < 2.3f).map(f => f -> \"B\")\n     \
    \   gpa.filter( f => f > 2.3f && f < 2.0f).map(f => f -> \"B-\")\n        gpa.filter(\
    \ f => f > 2.0f && f < 1.7f ).map(f => f -> \"C+\")\n        gpa.filter( f =>\
    \ f > 1.7f && f < 1.3f).map(f => f -> \"C\")\n        gpa.filter( f => f > 1.3f).map(f\
    \ => f -> \"C-\")\n        gpa.filter( f => f > 1.0f && f < 0.7f).map(f => f ->\
    \ \"D+\")\n        gpa.filter( f => f > 0.7f).map(f => f -> \"D\")\n        gpa.filter(\
    \ f => f > 0.0f ).map(f => f -> \"D-\")\n        gpa.filter( f => f < 0.0f ).map(f\
    \ => f -> \"E\")\n        gpa.map( f => gradesMap(f.toInt))", "        grades.foldLeft[List[String]](List.empty[String]){\n\
    \            (gradesList, grade) => if(gradesList.size == grades.size)\n     \
    \           (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"A\"+\"+\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"A\"+\"-\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"B\"+\"+\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"B\"+\"-\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"C\"+\"+\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"C\"+\"-\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"D\"+\"+\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"D\"+\"-\")\n            else if(gradesList.size == grades.size)\n      \
    \          (gradesList, (gradesList.get(0)*gradesList(1).toFloat+grade).toString.charAt(0)\
    \ + \"E\")\n            else gradesList\n        }", "        val gpa : Int =\
    \ 0\n        grades.map(grade => {\n            val newGrade = grade / gpa.toFloat\n\
    \            newGrade.toInt\n        }).filter(val => val > 0).toList", "    \
    \    grades.zipWithIndex.map {\n        case (grade, i) => \n            val diff\
    \ = grade.toDouble - grades.last\n            if (diff <= -1.0f) \n          \
    \      \"D-\"\n            else if (diff > -1.0f && diff < 0.0f) \n          \
    \      \"\"\n            else if (diff > 0.0f && diff < 0.7f) \n             \
    \   \"B+\"\n            else if (diff > 0.7f) \n                \"B\"\n      \
    \      else if (diff > 0.3f) \n                \"B-\"\n            else if (diff\
    \ > 0.1f) \n                \"C+\"\n            else if (diff > 0.7f) \n     \
    \           \"C\"\n            else if (diff > 0.3f) \n                \"C-\"\n\
    \            else if (diff > 0.1f) \n                \"D+\"\n            else\
    \ if (diff > 0.0f) \n                \"D\"\n            else \n              \
    \  \"E\"\n        }", "        val gradesSet = grades.toSet\n        val sum =\
    \ gradesSet.sum\n        val gradesMinusSum = grades.filterNot(_ == sum).toList\n\
    \        val gradesMinusSumSet = gradesMinusSum.toSet\n        val gradesMinusSumSum\
    \ = gradesMinusSum.sum\n        val gradesMinusSumSumSet = gradesMinusSumSum.toSet\n\
    \        val gradesSum = gradesSet.sum\n        val gradesSumSet = gradesSum.toSet\n\
    \        val gradesSumSum = gradesSum.sum\n        val gradesSumSumSet = gradesSumSum.toSet\n\
    \        var sumOfAllSets = gradesSet.reduceLeft(_ + _)\n        var sumOfAllSetsSet\
    \ = gradesSet.reduceLeft(_ + _).toSet\n        var sumOfAllSetsSum = gradesSet.reduceLeft(_\
    \ + _).sum\n        val gradesSumOfAllSets = gradesSet.reduceLeft(_ + _).sum\n\
    \        val gradesSumOfAllSetsSet = gradesSet.reduceLeft(_ + _).sum.toSet\n \
    \       val gradesSumOfAllSetsSum = gradesSet.reduceLeft(_ + _).sum.sum\n    \
    \    val gradesSumOfAllSetsSumSet = gradesSet.reduceLeft(_ + _).sum.sum.toSet\n\
    \        val gradesSumOfAllSetsSumSum = gradesSet.reduceLeft(_ + _).sum.sum.sum\n\
    \        val gradesSumOfAllSetsSumSumSet = gradesSet.reduceLeft(_ + _).sum.sum.sum.toSet\n\
    \        val gradesSumOfAllSetsSumSumSum = gradesSet.reduceLeft(_ + _).sum.sum.sum.sum\n\
    \n        val gradesMinusSumSumSet = gradesMinusSumSum.toSet\n        val gradesMinusSumSumSum\
    \ = gradesMinusSumSum.sum\n        val gradesMinusSumSumSumSet = gradesMinusSumSumSum.toSet\n\
    \        val gradesMinusSumSumSumSum = gradesMinusSumSumSum.sum\n        val gradesMinusSumSumSumSumSet\
    \ = gradesMinusSumSumSumSum.toSet", "        // We are going to use mutable collections\
    \ to store our grades and letter grades\n        val gradesCollection = new collection.mutable.ArrayBuffer[Float]()\n\
    \        val letterGradeCollection = new collection.mutable.ArrayBuffer[String]()\n\
    \n        // Iterate through each grade and convert it to a letter grade\n   \
    \     for (grade <- grades) {\n            val letterGrade = letterGrade(grade)\n\
    \            letterGradeCollection += letterGrade\n\n            // Collect the\
    \ grade into the collection\n            gradesCollection += grade\n        }\n\
    \n        // Return our letter grades collection\n        letterGradeCollection"]
stop_tokens:
- "\n    }\n"
