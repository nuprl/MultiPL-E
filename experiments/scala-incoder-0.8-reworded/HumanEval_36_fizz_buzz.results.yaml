language: scala
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Make list of digits in n.\n\
    \        val digits = n.toString.reverse.foldLeft(List[String]())((a,b) => a ++\
    \ \"0123456789\".substring(b,b+1))\n        // Find the first 7 digit number that\
    \ is divisible by 11 or 13.\n        val first7 = digits.indexOf(\"7\")\n    \
    \    // Count how many times 7 appears in numbers less than n.\n        digits.count(_\
    \ == \"7\") - first7\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ccw_nx_.scala:13:101\
    \ -------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = n.toString.reverse.foldLeft(List[\e[35mString\e[0m]())((\e[36ma\e[0m,\e\
    [36mb\e[0m) => a ++ \e[31m\"0123456789\"\e[0m.substring(b,b+\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                      Found:    String\n\e[31m   |\e[0m     \
    \                                     Required: IterableOnce[String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Return n if n evenly divides\
    \ by 11 or 13, otherwise return n+1\n        if (n / 11 == 0 || n / 13 == 0)\n\
    \            return n\n        else\n            return n + 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3iq16_nl.scala:19)\n\tat Problem.main(tmp3iq16_nl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Add 1 for each number divisible\
    \ by 11 or 13\n        var result = 1\n        val listOfNs = List(n%11, n%13)\n\
    \        for(ns <- listOfNs) {\n            if(ns % 11 == 0 && ns % 13 == 0) {\n\
    \                result += 1\n            } else if(ns % 11 == 0) {\n        \
    \        result += 1\n            } else if(ns % 13 == 0) {\n                result\
    \ += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7a3b7t3.scala:27)\n\tat Problem.main(tmpu7a3b7t3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var sum : Long = 0\n        var\
    \ mod : Long = n % 11\n        var mod : Long = mod + 13\n\n        if(mod ==\
    \ 11 || mod == 13) {\n            sum += 1\n        }\n\n        var x = 1\n \
    \       while(n >= x) {\n            n /= x\n            x += 1\n            sum\
    \ += x\n        }\n\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmiis8z36.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mmod\e[0m : \e[35mLong\e\
    [0m = mod + \e[31m13\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmod is already defined as \e[33mvariable\e[0m \e[35mmod\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpmiis8z36.scala:22:14 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            n /= x\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n <= 0) 0\n        if (n %\
    \ 11 == 0 || n % 13 == 0) n\n        else fizzBuzz(n/11) + fizzBuzz(n/13)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqulkpt3e.scala:18)\n\tat Problem.main(tmpqulkpt3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counts = mutable.LinkedHashMap[Int,\
    \ Int]()\n        for (i <- 0 until n) {\n            if (i % 11 == 0) counts.update(i,1)\n\
    \            else if (i % 13 == 0) counts.update(i,1)\n            else\n    \
    \            counts.getOrElse(i,0)\n        }\n        counts.values.toList.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplf2rr1kt.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.LinkedHashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplf2rr1kt.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val fives = n / 5l\n        val\
    \ threes = n - fives * 5l\n\n        if (fives == 0) fives else if (fives == 1l)\
    \ 7l else if (fives == 2l) 8l else if (fives == 3l) 9l else if (fives == 4l) 10l\
    \ else if (fives == 5l) 11l else 13l\n        if (threes == 0) threes else if\
    \ (threes == 1l) 7l else if (threes == 2l) 8l else if (threes == 3l) 9l else if\
    \ (threes == 4l) 10l else if (threes == 5l) 11l else 13l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp690hnwwo.scala:20)\n\tat Problem.main(tmp690hnwwo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var sum = 0\n        for (i <-\
    \ 0 until n) { \n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   sum += 1;\n            } else {\n                sum = 0;\n            }\n\
    \        }\n        return sum;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk3klp2ck.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) { \n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val digits = div(n, n).toInt\n\
    \        if (digits < 1) 0\n        else (digits - 1) * (digits + 1) / 2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_jo97ye.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = div(n, n).toInt\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: div\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        if (n %\
    \ 11 == 0) count += 1\n        if (n % 13 == 0) count += 1\n        if (count\
    \ == 0) count += 1;\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdk29jzyd.scala:19)\n\tat Problem.main(tmpdk29jzyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Get the digits of the number\
    \ in string\n        var str : String = n.toString\n        var result : Long\
    \ = 0\n        for (i <- 0 until str.length) {\n            if (str.charAt(i)\
    \ == '7') {\n                result = result + 1\n            }\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7xt_e1s.scala:24)\n\tat Problem.main(tmpg7xt_e1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        (n % 11 == 0 && n % 13 == 0) ||\
    \ (n % 11 != 0 && n % 13 != 0) ? (0 : (n / 11) + 1) : (n / 13)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_lw_if4.scala:12:95 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        (n % \e[31m11\e[0m == \e[31m0\e[0m && n % \e\
    [31m13\e[0m == \e[31m0\e[0m) || (n % \e[31m11\e[0m != \e[31m0\e[0m && n % \e[31m13\e\
    [0m != \e[31m0\e[0m) ? (\e[31m0\e[0m : (\e[35mn\e[0m \e[35m/\e[0m \e[31m11\e[0m)\
    \ \e[35m+\e[0m \e[31m1\e[0m) : (\e[35mn\e[0m \e[35m/\e[0m \e[31m13\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                                 Not found: type /\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9_lw_if4.scala:12:69 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        (n % \e[31m11\e[0m == \e[31m0\e[0m && n % \e\
    [31m13\e[0m == \e[31m0\e[0m) || (n % \e[31m11\e[0m != \e[31m0\e[0m && n % \e[31m13\e\
    [0m != \e[31m0\e[0m) ? (\e[31m0\e[0m : (\e[35mn\e[0m \e[35m/\e[0m \e[31m11\e[0m)\
    \ \e[35m+\e[0m \e[31m1\e[0m) : (\e[35mn\e[0m \e[35m/\e[0m \e[31m13\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_lw_if4.scala:12:85\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        (n % \e[31m11\e[0m\
    \ == \e[31m0\e[0m && n % \e[31m13\e[0m == \e[31m0\e[0m) || (n % \e[31m11\e[0m\
    \ != \e[31m0\e[0m && n % \e[31m13\e[0m != \e[31m0\e[0m) ? (\e[31m0\e[0m : (\e\
    [35mn\e[0m \e[35m/\e[0m \e[31m11\e[0m) \e[35m+\e[0m \e[31m1\e[0m) : (\e[35mn\e\
    [0m \e[35m/\e[0m \e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Not found: type\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashSet[Long]()\n\
    \        val digits = (1l).until(n)\n        for( n <- digits ){\n           \
    \ if( n % 11 == 0 || n % 13 == 0 ){\n                count += n\n            }\n\
    \        }\n        count.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8vuosdx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = mutable.Set[Long]()\n\
    \        while(n > 0) {\n            if(n % 11 == 0) nums.add(11L);\n        \
    \    if(n % 13 == 0) nums.add(13L);\n            n /= 10\n        }\n        nums.toSet.size\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
    \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) ==\
    \ (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) ==\
    \ (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe42c0onr.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpe42c0onr.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var cnt = 0\n        for (i <-\
    \ 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n              \
    \  cnt += 1\n            }\n        }\n        cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7g9h8npf.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nStr\
    \ = \"\" + n\n        var i = nStr.length\n        while (i-- > -1) {\n      \
    \      if (nStr.charAt(i) == '7') {\n                count += 1\n            }\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count += 1\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu2c34uvy.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (i-- > -\e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               value\
    \ -- is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2c34uvy.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m\
    \ (i-- > -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   Not found: >\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if(n/11==0) (n/13==0l) ? n : fizzBuzz(n/11)\n\
    \        else if(n/13==0) (n/11==0l) ? n : fizzBuzz(n/13)\n        else n : fizzBuzz(11*(n%11)\
    \ + 13*(n%13))\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp__t6nb4c.scala:12:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m(n/\e[31m11\e[0m==\e[31m0\e[0m)\
    \ (n/\e[31m13\e[0m==\e[31m0l\e[0m) ? n : \e[35mfizzBuzz\e[0m(n/\e[31m11\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                 end of statement expected but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__t6nb4c.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m(n/\e[31m11\e[0m==\e[31m0\e[0m)\
    \ (n/\e[31m13\e[0m==\e[31m0l\e[0m) ? n : \e[35mfizzBuzz\e[0m(n/\e[31m11\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val divisors: mutable.Set[Long]\
    \ = mutable.Set[Long](11, 13)\n        val digitsFizzbuzz: mutable.Set[Long] =\
    \ mutable.Set[Long](1, 3, 7, 8, 9)\n        val digitsBuzz: mutable.Set[Long]\
    \ = mutable.Set[Long](1, 3, 7, 9)\n\n        val remainder = n % divisors.last\n\
    \        val quotient = n / divisors.last\n\n        if (remainder == 0) {\n \
    \           if (digitsFizzbuzz.contains(quotient)) {\n                return 1\n\
    \            } else if (digitsBuzz.contains(quotient)) {\n                return\
    \ 3\n            }\n            return 0\n        }\n        if (remainder ==\
    \ 11) {\n            return 1 + fizzBuzz(quotient)\n        }\n        if (remainder\
    \ == 13) {\n            return 1 + fizzBuzz(quotient)\n        }\n        return\
    \ fizzBuzz(quotient)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5050zo2c.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m](\e[31m11\e[0m, \e[31m13\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5050zo2c.scala:12:42 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m: mutable.Set[\e[35mLong\e[0m] =\
    \ mutable.Set[\e[35mLong\e[0m](\e[31m11\e[0m, \e[31m13\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5050zo2c.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigitsFizzbuzz\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m](\e[31m1\e[0m, \e[31m3\e[0m, \e[31m7\e\
    [0m, \e[31m8\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5050zo2c.scala:13:48\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mdigitsFizzbuzz\e[0m: mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e\
    [0m](\e[31m1\e[0m, \e[31m3\e[0m, \e[31m7\e[0m, \e[31m8\e[0m, \e[31m9\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5050zo2c.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mdigitsBuzz\e[0m"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var fizzBuzz = 0\n        for\
    \ (i <- 0 to n)\n            if (i%11 == 0) fizzBuzz += 1\n            if (i%13\
    \ == 0) fizzBuzz += 1\n            fizzBuzz\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk33ivzn8.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val n0 = n.toInt\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \n        for (x<-0 until n0) {\n            val remainder = n % 10\n        \
    \    val digit = remainder % 11\n            if (digit != 0) {\n             \
    \   digits += digit\n            }\n            n /= 10\n        }\n        digits.foreach(x=>\
    \ nums += x)\n\n        if (nums.contains(7) && digits.contains(7)) {\n      \
    \      (1 + nums.indexOf(7) + digits.indexOf(7))\n        } else {\n         \
    \   nums.length\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedmwgc7g.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpedmwgc7g.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpedmwgc7g.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val b = scala.collection.mutable.Set[Long]()\n\
    \        for(i <- 0 until n){\n            if((i %% 13) == 0) b += i\n       \
    \     if((i %% 11) == 0) b += i\n        }\n        b.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr32c3etb.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpr32c3etb.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mif\e[0m((i %% \e[31m13\e[0m) == \e[31m0\e\
    [0m) b += i\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m \
    \               value %% is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpr32c3etb.scala:15:18 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m((i %% \e[31m11\e[0m) == \e[31m0\e[0m) b += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value %% is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Long,\
    \ Long]()\n        var num : Long = 1\n        while (num < n) {\n           \
    \ if (isDivisibleBy11(num)) {\n                if (isDivisibleBy13(num)) {\n \
    \                   count += (num) -> 1\n                }\n                num\
    \ += 1\n            }\n            num += 1\n        }\n        count.size + 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy_xnre_.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy_xnre_.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (isDivisibleBy11(num)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Not found: isDivisibleBy11\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjy_xnre_.scala:16:20 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (isDivisibleBy13(num)) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: isDivisibleBy13\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val ns = new mutable.ListBuffer(n).filter(_%11==0\
    \ || _%13==0)\n        ns.toList.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0rxgn5s.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mns\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer(n).filter(_%\e[31m11\e[0m==\e[31m0\e[0m || _%\e[31m13\e[0m==\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 1\n        for (i<-0\
    \ to (n.toInt/11)-1) {\n            count = count + (if (n%(11*i) == 0 || n%(13*i)\
    \ == 0) 1 else 0)\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.fizzBuzz$$anonfun$1(tmpv04fs6f1.scala:14)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fizzBuzz(tmpv04fs6f1.scala:15)\n\
    \tat Problem$.main(tmpv04fs6f1.scala:19)\n\tat Problem.main(tmpv04fs6f1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Create a mutable list of integers\n\
    \        var intList = mutable.ListBuffer[Long]()\n        for (ii <- 1 to n)\
    \ {\n            if (ii % 11 == 0 || ii % 13 == 0) {\n                intList\
    \ += ii\n            }\n        }\n        // Return the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13\n        return\
    \ intList.count(i => i % 11 == 0 || i % 13 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7r6ne716.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mintList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7r6ne716.scala:14:24 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (ii <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n       val counters = mutable.Map[Int,\
    \ Int]()\n       var counter : Int = 0\n       var remainder : Long = n\n    \
    \   val max = (n / 11l).toLong\n       val min = (n / 13l).toLong\n\n       while\
    \ (remainder >= min) {\n          if (remainder % 11 == 0 || remainder % 13 ==\
    \ 0) {\n             counter = counter + 1\n             counters(remainder) =\
    \ counter\n          }\n          remainder = (remainder - min) % 11\n       }\n\
    \       counters(7l) = counter\n       counters.toList.foldLeft(0)(_ + _)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptghaj7vt.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m       \e[33mval\e[0m \e[36mcounters\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var result : Long = 0\n      \
    \  val digits = mutable.ArrayBuffer(7, 7, 7, 7, 7, 7, 7)\n        var count =\
    \ 1\n        val rem = n % 11\n        var x = 0\n        while ((rem == 0) ||\
    \ (rem == 7)) {\n            if (rem = 0) x = x + 1\n            rem = n % 10\n\
    \            digits(x) = (rem % 10)\n            n = n / 10\n            count\
    \ = (count) + 1\n        }\n        while (n != 0) {\n            if (n % 11 !=\
    \ 7) {\n                digits(count) = (n % 10)\n            }\n            n\
    \ = n / 10\n            count = (count) + 1\n        }\n        if (digits.exists(_\
    \ == 7))\n            result = (digits.indexOf(7) * count) + 1\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p3id1dh.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer(\e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp5p3id1dh.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (rem = \e[31m0\e[0m) x = x\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val rem\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp5p3id1dh.scala:19:16 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            rem = n % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ rem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5p3id1dh.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            n = n /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp5p3id1dh.scala:28:14 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var nFizz : Long = 0\n       \
    \ var nBuzz : Long = 0\n        var nFizzBuzz : Long = 0\n        var nNil : Long\
    \ = 0\n        for(i <- 0 to n.toInt) {\n            if(i % 13 == 0 && i % 11\
    \ == 0){\n                nBuzz += 1\n            } else if(i % 11 == 0){\n  \
    \              nFizz += 1\n            } else if(i % 13 == 0){\n             \
    \   nFizzBuzz += 1\n            } else if(i % 11 != 0 && i % 13 != 0){\n     \
    \           nNil += 1\n            }\n        }\n        (nFizz + nBuzz + nFizzBuzz\
    \ + nNil)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7jidbvl.scala:30)\n\tat Problem.main(tmpw7jidbvl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      val count = new collection.mutable.HashMap[Long,\
    \ Int]()\n      for (i <- n.toString.reverseIterator.dropWhile(_ < '0').takeWhile(_\
    \ < '9')) {\n        if (i.toString.length == 1) {\n          if (count((i.toInt\
    \ - '0') % 11) == 0) { count.update((i.toInt - '0') % 11, 0 + 1) }\n         \
    \ if (count((i.toInt - '0') % 13) == 0) { count.update((i.toInt - '0') % 13, 0\
    \ + 1) }\n        }\n        else if (i.toString.length == 2) {\n          if\
    \ (count((i.toInt - '0') % 11) == 0) { count.update((i.toInt - '0') % 11, 0 +\
    \ 1) }\n        }\n        else if (i.toString.length == 3) {\n          if (count((i.toInt\
    \ - '0') % 13) == 0) { count.update((i.toInt - '0') % 13, 0 + 1) }\n        }\n\
    \        else if (i.toString.length == 4) {\n          if (count((i.toInt - '0')\
    \ % 13) == 0) { count.update((i.toInt - '0') % 13, 0 + 1) }\n        }\n     \
    \ }\n      count.values.sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 0\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat scala.Function1.apply$mcIJ$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcIJ$sp$(Function1.scala:69)\n\tat scala.collection.AbstractMap.apply$mcIJ$sp(Map.scala:405)\n\
    \tat Problem$.fizzBuzz$$anonfun$3(tmplwvi9qj9.scala:15)\n\tat Problem$.fizzBuzz$$anonfun$adapted$3(tmplwvi9qj9.scala:27)\n\
    \tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)\n\tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)\n\
    \tat scala.collection.AbstractIterator.foreach(Iterator.scala:1293)\n\tat Problem$.fizzBuzz(tmplwvi9qj9.scala:27)\n\
    \tat Problem$.main(tmplwvi9qj9.scala:31)\n\tat Problem.main(tmplwvi9qj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGene"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        while (n\
    \ < 100) {\n            if ((n % 11) == 7 || (n % 13) == 7) {\n              \
    \  count += 1\n            }\n            n /= 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp63p866w2.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val num = n.toInt\n        val\
    \ remainder = num % 11\n        if (remainder == 0) num\n        else fizzBuzz(num\
    \ / 11) + remainder\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgd1_9g7n.scala:18)\n\tat Problem.main(tmpgd1_9g7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def isDivisibleBy11And13(i: Long)\
    \ : Boolean = {\n            val numAsString = i.toString\n            val numAsInt\
    \ = numAsString.toInt\n            return numAsInt % 11 == 0 || numAsInt % 13\
    \ == 0;\n        }\n        val stringToInt = n.toString\n        val stringToIntArray\
    \ = stringToInt.toCharArray\n        stringToIntArray.filter(isDivisibleBy11And13).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnrh3zxk2.scala:23)\n\tat Problem.main(tmpnrh3zxk2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ // Loop through all numbers and check if they are divisible by 11 or 13.\n \
    \       // Only increment count if digit 7 appears.\n        (1l..n).foreach {\
    \ i =>\n            if (i.toString.toList.filter(_.isDigit).forall(_.toString.toList.contains(7)))\
    \ {\n                count += 1\n            }\n        }\n        count * (if\
    \ (n<10) 1 else 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpck929q8e.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (\e[31m1l\e[0m..n).foreach { \e[36mi\e[0m =>\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            an identifier\
    \ expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val m = n % 11\n        val z\
    \ = n % 13\n        if (z == 0) m * 3\n        else m + (z * 3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpto4_7rr0.scala:18)\n\tat Problem.main(tmpto4_7rr0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <-\
    \ 0 until n) {\n            if (n % i == 0 || i == 11 || i == 13) {\n        \
    \        count += 1\n            }\n        }\n        count + 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpku6pnf92.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val numOfDigitsLessThanN = Math.ceil(Math.log10(n))\n\
    \        val fizzBuzz = for ( i <- 0 to numOfDigitsLessThanN) yield {\n      \
    \      if (n % i == 0 || n % i == 3 || n % i == 5)\n                0\n      \
    \      else if (i % 11 == 0)\n                1\n            else if (i % 13 ==\
    \ 0)\n                2\n            else\n                0\n        }\n    \
    \    fizzBuzz.foldLeft(0)((acc, e) => acc + e)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppfbhiz3c.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e\
    [0m = \e[33mfor\e[0m ( i <- \e[31m0\e[0m to numOfDigitsLessThanN) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (numOfDigitsLessThanN\
    \ : Double)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counts = new mutable.HashMap[Int,\
    \ Int]()\n        for {\n            i <- 0 until (n.toString.length % 3)\n  \
    \      } counts(i) = counts.getOrElse(i, 0) + 1\n        val results = counts.filter(_._2\
    \ == 7).toList.map(_._1)\n        val missing = 3 - results.size\n        results.mkString(\"\
    ,\")\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsa3sg7ay.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      def isDividable(n: Long): Boolean\
    \ = {\n        (n%11==0 || n%13==0)&&(n>0)\n      }\n      val counts = new mutable.HashMap[Int,\
    \ Long]()\n      for (i <- 0 until n) {\n        if (isDividable(i)) {\n     \
    \     counts(i) += 1\n        }\n      }\n      counts.size match {\n        case\
    \ 0 => 0\n        case 1 => counts.getOrElse(0, 0) + 1\n        case _ => counts.getOrElse(0,\
    \ 0) + 1\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cvycqf0.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2cvycqf0.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val arr : Array[Long] = new Array[Long]\n\
    \        val ans = mutable.ArrayBuffer(n) \n        val n2 = n.toInt\n       \
    \ var i = 1\n        while (i <= n2) {\n            arr :+= i\n            i =\
    \ i +  11\n        }\n        val sum = 0\n        for(i <- 0 until arr.length)\
    \ {\n            sum += arr(i)\n        }\n        var c = 7\n        var t =\
    \ 0\n        for(i <- 0 until arr.length) {\n            t = arr(i) mod 11\n \
    \           ans(sum + c) += if (t == 7) 1 else 0\n            c += 1\n       \
    \ }\n        ans.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcznhrxw3.scala:28:28 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            ans(sum + c) += \e[33mif\e[0m (t == \e[31m7\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                    ^^\e[0m\n\e[31m   |\e[0m                            expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpcznhrxw3.scala:12:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36marr\e[0m : \e[35mArray\e[0m[\e[35mLong\e[0m] = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ _length of \e[33mconstructor\e[0m \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e\
    [0m: (_length: Int): Array[Long]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcznhrxw3.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mans\e[0m = mutable.ArrayBuffer(n) \n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcznhrxw3.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            arr :+= i\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m            value :+= is not a member of Array[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcznhrxw3.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcznhrxw3.scala:27:23\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            t = arr(i) mod\
    \ \e[31m11\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var nMod11 = n % 11\n        var\
    \ nMod13 = n % 13\n        var count = 0\n        if (nMod11 == 0 || nMod13 ==\
    \ 0) {\n            if (nMod11 == 0) {\n                count += 3\n         \
    \   } else {\n                count += 1\n            }\n        }\n        if\
    \ (nMod11 == 0 || nMod13 == 0) {\n            if (nMod13 == 0) {\n           \
    \     count += 3\n            } else {\n                count += 1\n         \
    \   }\n        }\n        if (nMod11 == 0 || nMod13 == 0) {\n            if (nMod13\
    \ == 0) {\n                count += 3\n            } else {\n                count\
    \ += 1\n            }\n        }\n        n / 11 * 13 * count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwqoavnuh.scala:40)\n\tat Problem.main(tmpwqoavnuh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counter = 1\n        while\
    \ (n > 0) {\n            if ((n % 11) == 0) {\n                counter += 1\n\
    \            }\n            if ((n % 13) == 0) {\n                counter += 1\n\
    \            }\n            n -= 1\n        }\n        return counter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj12ic7_f.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        val num\
    \ = n.toString.toInt\n        for (x <- 0 until num) {\n            if (num %\
    \ 11 == 0 && (num / 11) == 0) {\n                count = count + 1\n         \
    \   }\n            if (num % 13 == 0 && (num / 13) == 0) {\n                count\
    \ = count + 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdshe1x9j.scala:26)\n\tat Problem.main(tmpdshe1x9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var div\
    \ = 11\n        var remain = n % (div)\n        while (div <= n) {\n         \
    \   div *= 11\n            count += 1\n            remain /= div\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r3ulu_2.scala:23)\n\tat Problem.main(tmp1r3ulu_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counts : mutable.Map[Int,\
    \ Int] = mutable.Map[Int, Int]();\n        // Iterate over all numbers less than\
    \ n\n        for (i <- 0 until n) {\n            // Check if i is a multiple of\
    \ 13\n            if (i % 13 == 0) {\n                counts += (i -> 1)\n   \
    \         } else {\n                // Check if i is a multiple of 11\n      \
    \          if (i % 11 == 0) {\n                    counts += (i -> 2)\n      \
    \          } else {\n                    counts += (i -> 0)\n                }\n\
    \            }\n        }\n        // Return only the counts of 7\n        counts\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp069u00wq.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]();\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp069u00wq.scala:12:45 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.Map[\e[35mInt\e[0m, \e[35mInt\e\
    [0m] = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]();\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp069u00wq.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val m = n.toInt\n        var i\
    \ = 0\n        var count = 1\n        while (i <= m) {\n            if (i.toString.last.equals(\"\
    7\")) {\n                count += 1\n            } else {\n                if\
    \ (count == 3) {\n                    count = 0\n                }\n         \
    \   }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpczky8v55.scala:28)\n\tat Problem.main(tmpczky8v55.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val remainders = new mutable.HashSet[Long]\n\
    \        (n.toInt/11).map(i => i match {\n            case 0 => 0\n          \
    \  case 1 => 1\n            case 2 => 2\n            case _ => {\n           \
    \     val r = n % 11\n                if (remainders contains r) {\n         \
    \           remainders(r)\n                } else {\n                    remainders.add(r)\n\
    \                    fizzBuzz(n/11)\n                }\n            }\n      \
    \  }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4aogvfmc.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4aogvfmc.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        (n.toInt/\e[31m11\e\
    [0m).map(\e[36mi\e[0m => i \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value map is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        while (n\
    \ % 11 == 0) {\n            n /= 11\n            count += 1\n        }\n     \
    \   while (n % 13 == 0) {\n            n /= 13\n            count += 1\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbixpavo9.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            n /= \e[31m11\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbixpavo9.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m13\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n < 13 || n % 11 == 0 || n\
    \ % 13 == 0)\n            1\n        else\n            fizzBuzz(n - 13) + fizzBuzz(n\
    \ - 11)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5chr7e7w.scala:18)\n\tat Problem.main(tmp5chr7e7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val l = n.toInt\n        val digits\
    \ = n.toString.toList\n        val count = mutable.HashMap[Int, Long]()\n    \
    \    for (digit <- digits) {\n            count += digit -> (l / 10 % 10 == digit)\
    \ ? (l / 100 % 10 == digit) ? (l / 1000 % 10 == digit) ? (l / 10000 % 10 == digit)\
    \ ? (l / 100000 % 10 == digit) ? (l / 1000000 % 10 == digit) ? (l / 10000000 %\
    \ 10 == digit) ? (l / 100000000 % 10 == digit) ? (l / 1000000000 % 10 == digit)\
    \ ? 1 : 0 : 0 : 0\n        }\n        count(7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp9_o54bx.scala:16:297 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            count += digit -> (l / \e[31m10\e[0m % \e\
    [31m10\e[0m == digit) ? (l / \e[31m100\e[0m % \e[31m10\e[0m == digit) ? (l / \e\
    [31m1000\e[0m % \e[31m10\e[0m == digit) ? (l / \e[31m10000\e[0m % \e[31m10\e[0m\
    \ == digit) ? (l / \e[31m100000\e[0m % \e[31m10\e[0m == digit) ? (l / \e[31m1000000\e\
    [0m % \e[31m10\e[0m == digit) ? (l / \e[31m10000000\e[0m % \e[31m10\e[0m == digit)\
    \ ? (l / \e[31m100000000\e[0m % \e[31m10\e[0m == digit) ? (l / \e[31m1000000000\e\
    [0m % \e[31m10\e[0m == digit) ? \e[31m1\e[0m : \e[31m0\e[0m : \e[31m0\e[0m : \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \     end of statement expected but ':' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpp9_o54bx.scala:14:20 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val digits = n.toString.reverse\n\
    \        var count = 0\n        for (digit <- digits) {\n            count = digit.toLong\
    \ match {\n                case 7 => count + 1\n                case _ => count\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0h9grqb.scala:24)\n\tat Problem.main(tmpn0h9grqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val ans = n.toString.chars.toList.sliding(1).count(i\
    \ => i(0) == 7)\n        (ans * ((7l * ans.size + 1)/11)).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2v_1uene.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = n.toString.chars.toList.sliding(\e\
    [31m1\e[0m).count(\e[36mi\e[0m => i(\e[31m0\e[0m) == \e[31m7\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \          value toList is not a member of java.util.stream.IntStream\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val digits = (n to n by -1).filter(x\
    \ => x % 11 == 0 || x % 13 == 0)\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for((d, n) <- digits) count += n -> (d.toInt * n).toInt\n    \
    \    count.values.count(_ == 7) + count((n % 11 * 13) + 7)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwu5ue4cq.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ var n : Long = n.toInt\n        for (i <- 0 until n)\n            if (i % 11\
    \ == 0) count = count + 1\n            else if (i % 13 == 0) count = count + 1\n\
    \            else count = count + 1\n        \n        if (count == 0) 0 else\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0xs1hdjr.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val m = n.toInt\n        if (m.mod(11)\
    \ == 0 || m.mod(13) == 0) {\n            return 1\n        }\n        var count\
    \ = 0\n        val digits = m.toString.toCharArray\n        var index = 0\n  \
    \      var lastDigit = digits.last\n        var check = 0\n        while (index\
    \ != digits.length) {\n            if (digits(index) == lastDigit) {\n       \
    \         count += 1\n            } else {\n                check = 1\n      \
    \      }\n            lastDigit = digits(index)\n            index += 1\n    \
    \    }\n        if (check == 0) {\n            return count\n        } else {\n\
    \            return 0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkog0xo0d.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (m.mod(\e[31m11\e[0m) == \e[31m0\e\
    [0m || m.mod(\e[31m13\e[0m) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Int, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import\
    \ math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var numCount = 0\n        while(n\
    \ > 0){\n            if(n%11 == 0 || n%13 == 0){\n                numCount = numCount+1\n\
    \            }\n            n = n-1\n        }\n        return numCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2338o1_m.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n = n-\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        if (n %\
    \ 11 == 0)\n            count += 1\n        if (n % 13 == 0)\n            count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpryxdvire.scala:21)\n\tat Problem.main(tmpryxdvire.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for (i <- 1 until n) {\n            count += (i mod 11 == 0 || i mod 13 == 0)\
    \ ? 1 : 0\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tjnilhb.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_tjnilhb.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            count += (i mod \e[31m11\e[0m == \e[31m0\e[0m\
    \ || i mod \e[31m13\e[0m == \e[31m0\e[0m) ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_tjnilhb.scala:14:24 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            count += (i mod \e[31m11\e[0m == \e[31m0\e[0m || i mod \e\
    [31m13\e[0m == \e[31m0\e[0m) ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_tjnilhb.scala:14:39 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            count += (i mod \e[31m11\e[0m == \e[31m0\e\
    [0m || i mod \e[31m13\e[0m == \e[31m0\e[0m) ? \e[31m1\e[0m : \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (i : Int)\n\e[31m   |\e[0m\
    \                                       Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n >= 1000 && n <= 999999 &&\
    \ n % 11 == 0 || n % 13 == 0) {\n            1\n        } else {\n           \
    \ fizzBuzz(n - 1l) + 1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzjj0kwwc.scala:19)\n\tat Problem.main(tmpzjj0kwwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i\
    \ <- 0 until n by 11) {\n            for (j <- 0 until i by 13) {\n          \
    \      if (n % j == 0)\n                    count += 1\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjn8mrhje.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n by \e[31m11\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \              ^\e[0m\n\e[31m   |\e[0m                          Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val res = \n            for(i\
    \ <- 0 to n.toInt) yield {\n                val n1 = n.toInt\n               \
    \ val n2 = n.toInt * 3\n                val n3 = n.toInt * 7\n               \
    \ if (n1 % 11 == 0 && n1 % 13 == 0) {\n                    if (n2 % 11 == 0 &&\
    \ n2 % 13 == 0) {\n                        if (n3 % 11 == 0 && n3 % 13 == 0) {\n\
    \                            n\n                        } else {\n           \
    \                 n3\n                        }\n                    } else {\n\
    \                        n2\n                    }\n                } else {\n\
    \                    n1\n                }\n            }\n        res.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpagr613mi.scala:34)\n\tat Problem.main(tmpagr613mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        val numbers\
    \ = mutable.Set[Long]()\n        while (n>0) {\n            numbers += n\n   \
    \         n -= n % 11\n            if (n>0) {\n                n -= n % 13\n \
    \               if (n>0)\n                    count += numbers.size\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9j9ecpk6.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9j9ecpk6.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n -= n % \e[31m11\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9j9ecpk6.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                n -= n %\
    \ \e[31m13\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e\
    [0m                value -= is not a member of Long - did you mean n.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val numbers = for {\n        \
    \    x <- n to 0 by -1\n            if x % 11 == 0 || x % 13 == 0\n        } yield\
    \ x\n        val count = numbers.count(_ match {\n            case 7     => true\n\
    \            case _ => false\n        })\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb123v6f.scala:24)\n\tat Problem.main(tmpvb123v6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        n match\
    \ {\n            case x if x % 11 == 0 | x % 13 == 0 => count += 1\n         \
    \   case x => count\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprjto2zzj.scala:21)\n\tat Problem.main(tmprjto2zzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      val counts = mutable.HashMap()\n\
    \      (1l to n).foreach(i => {\n        val digit = i % 10\n        val value\
    \ = counts.filter(_._1 == digit).getOrElse(digit, 0) + 1\n        counts.put(digit,\
    \ value)\n      })\n      (0 to 9).find(c => counts.getOrElse(c, 0) == 7).map(c\
    \ => (n-c) * 3).sum + 1\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nbbvq42.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      var count : Long = 0\n      var\
    \ i = 0\n      while (i < n) {\n        if (i % 11 == 0) count +=1\n        else\
    \ if (i % 13 == 0) count +=1\n        i += 1\n      }\n      return count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zarsazw.scala:22)\n\tat Problem.main(tmp_zarsazw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val list = new mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until (n)) list += (i%11==0 || i%13==0) ? i : i%11 == 0\n\
    \        list.count(_.toString.toInt==7)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3hngujik.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hngujik.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until (n)) list += (i%\e[31m11\e[0m==\e[31m0\e[0m || i%\e[31m13\e[0m==\e\
    [31m0\e[0m) ? i : \e[35mi%\e[31m11\e[0m \e[35m==\e[0m \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3hngujik.scala:13:70\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until (n)) list += (i%\e[31m11\e[0m==\e[31m0\e[0m || i%\e[31m13\e\
    [0m==\e[31m0\e[0m) ? i : \e[35mi%\e[31m11\e[0m \e[35m==\e[0m \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^\e[0m\n\e[31m   |\e[0m                                        \
    \              Not found: type ==\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n % 11\n        while(n < 100) {\n            remainder = remainder + n %\
    \ 10\n            n = n/10\n            count = count + 1\n        }\n       \
    \ var remainder2 = remainder % 13\n        while(n < 100) {\n            remainder2\
    \ = remainder2 + n % 10\n            n = n/10\n            count = count + 1\n\
    \        }\n        remainder2 = remainder2 + remainder + count * 10\n       \
    \ if(remainder2 % 7 == 0) 1\n        else fizzBuzz(remainder2 - 7)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf42oe8nv.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n = n/\e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf42oe8nv.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n = n/\e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until n) nums += (i/11)*(i%11) == 7\n        nums.filter(_.isDefined).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6hpqv8d.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) nums += (i/\e[31m11\e[0m)*(i%\e[31m11\e[0m) == \e[31m7\e[0m\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6hpqv8d.scala:13:36\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) nums += (i/\e[31m11\e[0m)*(i%\e[31m11\e[0m) == \e[31m7\e[0m\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    Boolean\n\e\
    [31m   |\e[0m                                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6hpqv8d.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.filter(_.isDefined).length\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \      value isDefined is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // A function that returns the\
    \ number of times digit 7 appears in numbers less than n which are divisible by\
    \ 11 or 13.\n        def fizzBuzzHelper(num : Long) : Long = {\n            //\
    \ The digits of the number. \n            def digits = num.toString.map(_.toInt)\n\
    \            // The digit 7 appears in numbers less than n which are divisible\
    \ by 11 or 13. \n            def isBuzz(n: Long): Boolean = n % 11 == 0 || n %\
    \ 13 == 0\n            // The number of times digit 7 appears in numbers less\
    \ than n which are divisible by 11 or 13. \n            def fizzBuzzRecurse(num:\
    \ Long) : Long = {\n                // If the number is divisible by 11, then\
    \ there were exactly 1 times that digit 7. \n                if (num % 11 == 0)\
    \ 1\n                // If the number is not divisible by 11, then there were\
    \ at least two times that digit 7. \n                else if (isBuzz(num)) 2\n\
    \                // Otherwise, the number has at least 3 times that digit 7. \n\
    \                else 3\n            }\n\n            // The number has at least\
    \ 3 times that digit 7. \n            fizzBuzzRecurse(n)\n        }\n\n      \
    \  // The number of times the digit 7 appears in numbers less than n which are\
    \ divisible by 11 or 13. \n        fizzBuzzHelper(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6npj33f.scala:36)\n\tat Problem.main(tmpp6npj33f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val isDivisibleBy11 = isDivisibleBy11(i)\n\
    \            val isDivisibleBy13 = isDivisibleBy13(i)\n            if (isDivisibleBy11\
    \ && !isDivisibleBy13) {\n                counts.put(i.toLong, 1)\n          \
    \  }\n            if (!isDivisibleBy11 && isDivisibleBy13) {\n               \
    \ counts.put(i.toLong, 1 + counts.getOrElse(i.toLong, 0))\n            }\n   \
    \         if (isDivisibleBy11 && isDivisibleBy13) {\n                counts.put(i.toLong,\
    \ 1 + counts.getOrElse(i.toLong, 0))\n            }\n        }\n        counts(7l).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwep3wkpf.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwep3wkpf.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      def isMultiple11(i : Long) : Boolean\
    \ = (i % 11 == 0)\n      def isMultiple13(i : Long) : Boolean = (i % 13 == 0)\n\
    \n      def countSeven(i : Long) : Long = {\n        var cnt = 0\n        while\
    \ (i != 0) {\n          i match {\n            case n if (n % 11 == 0) => cnt\
    \ += 1\n            case n if (n % 13 == 0) => cnt += 1\n            case n =>\
    \ i -= 1\n          }\n        }\n        cnt\n      }\n\n      val isEven = n.toString\
    \ match {\n        case i if (i.toString.length == 1) => \"0\" + i\n        case\
    \ i => i\n      }\n      val isOdd = n.toString match {\n        case i => i\n\
    \      }\n      val isMultiple11 = n.toString match {\n        case i if i.toString.length\
    \ == 1 => isMultiple11(i.toInt)\n        case i => isMultiple11(parseInt((i /\
    \ 11).toString.charAt(0))) *\n                  isMultiple11(parseInt((i / 13).toString.charAt(0)))\n\
    \      }\n      val isMultiple13 = n.toString match {\n        case i if i.toString.length\
    \ == 1 => isMultiple13(i.toInt)\n        case i => isMultiple13(parseInt((i /\
    \ 13).toString.charAt(0))) *\n                  isMultiple13(parseInt((i / 11).toString.charAt(0)))\n\
    \      }\n      if (isEven) countSeven(n) else n.toString.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6mjt3_xi.scala:34:10 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m      \e[33mval\e[0m \e[36misMultiple11\e[0m = n.toString\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m      ^\e[0m\n\e[31m   |\e[0misMultiple11\
    \ is already defined as \e[33mmethod\e[0m \e[35misMultiple11\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m35 |\e[0m        \e[33mcase\e[0m i \e[33mif\e\
    [0m i.toString.length == \e[31m1\e[0m => isMultiple11(i.toInt)\n\e[31m36 |\e[0m\
    \        \e[33mcase\e[0m i => isMultiple11(parseInt((i / \e[31m11\e[0m).toString.charAt(\e\
    [31m0\e[0m))) *\n\e[31m37 |\e[0m                  isMultiple11(parseInt((i / \e\
    [31m13\e[0m).toString.charAt(\e[31m0\e[0m)))\n\e[31m38 |\e[0m      }\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6mjt3_xi.scala:39:10 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m      \e[33mval\e[0m \e[36misMultiple13\e[0m = n.toString\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m      ^\e[0m\n\e[31m   |\e[0misMultiple13\
    \ is already defined as \e[33mmethod\e[0m \e[35misMultiple13\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m40 |\e[0m        \e[33mcase\e[0m i \e[33mif\e\
    [0m i.toString.length == \e[31m1\e[0m => isMultiple13(i.toInt)\n\e[31m41 |\e[0m\
    \        \e[33mcase\e[0m i => isMultiple13(parseInt((i / \e[31m13\e[0m).toString.charAt(\e\
    [31m0\e[0m))) *\n\e[31m42 |\e[0m                  isMultiple13(parseInt((i / \e\
    [31m11\e[0m).toString.charAt(\e[31m0\e[0m)))\n\e[31m43 |\e[0m      }\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6mjt3_xi.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m n => i -= \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \         value -= is not a member of Long - did you mean i.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6mjt3_xi.scala:44:10 --------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m      \e[33mif\e[0m (isEven) countSeven(n) \e[33melse\e\
    [0m n.toString.toLong\n\e[31m\e[31m   |\e[0m          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m   "
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val result = mutable.Set.empty[Int]\n\
    \        val primes = mutable.Set(2, 3, 5, 7)\n        val three = scala.collection.mutable.Set(1,\
    \ 11)\n        val four = scala.collection.mutable.Set(1, 13)\n        var k =\
    \ 0\n        while (k <= n) { \n            val d = n % k\n            if (d %\
    \ 11 == 0) result = result + three\n            else if (d % 13 == 0) result =\
    \ result + four\n            else result = result + (d % 7)\n            k = k\
    \ + k\n        }\n        result.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkdp6m2a.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwkdp6m2a.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set(\e\
    [31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m, \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwkdp6m2a.scala:19:36\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e\
    [0m (d % \e[31m11\e[0m == \e[31m0\e[0m) result = result + three\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Reassignment to val result\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpwkdp6m2a.scala:20:41 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (d % \e[31m13\e\
    [0m == \e[31m0\e[0m) result = result + four\n\e[31m\e[31m   |\e[0m           \
    \                       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                         Reassignment to val result\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpwkdp6m2a.scala:21:24 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m result = result + (d % \e\
    [31m7\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Reassignment to val result\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val num = n\n        if (num ==\
    \ 0) 0 else (if (num % 11 == 0) 0 else (if (num % 13 == 0) 0 else num.toString.split('7').length)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptwur_2wf.scala:13:115 --------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (num == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m (\e[33mif\e[0m (num % \e[31m11\e[0m == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m (\e[33mif\e[0m (num % \e[31m13\e[0m == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m num.toString.split(\e[31m'7'\e[0m).length)))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                        '}' expected, but ')' found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val n10 = n % 10\n        if(n10\
    \ == 7) return 0\n        if(n10 == 9) return 1\n        if(n10 == 11 || n10 ==\
    \ 13) return 0\n        fizzBuzz(n / 10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val numOf7 = 0\n        val numOfDiv11\
    \ = 0\n        val numOfDiv13 = 0\n        for {\n            i <- 0 until (n).toInt\n\
    \        } yield {\n            val mod10 = n % 10\n            if (mod10 == 7)\
    \ {\n                numOf7 += 1\n            } else if (mod10 == 11 || mod10\
    \ == 13) {\n                numOfDiv11 += 1\n            } else {\n          \
    \      numOfDiv13 += 1\n            }\n        }\n        numOf7 * numOfDiv13\
    \ + numOfDiv11\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6t4fe0vl.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                numOf7 += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of Int - did you mean numOf7.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6t4fe0vl.scala:22:27 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                numOfDiv11 += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not\
    \ a member of Int - did you mean numOfDiv11.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6t4fe0vl.scala:24:27 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                numOfDiv13 += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member\
    \ of Int - did you mean numOfDiv13.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def getDigit(n:Long, i:Int) :\
    \ Int = { if(i >= n) 0 else (n%10 + i%10) % 10 }\n        var n1 = getDigit(n,\
    \ 3)\n        var n2 = getDigit(n, 5)\n        var n3 = getDigit(n, 7)\n     \
    \   while(true) {\n            if((n1%11 == 0) || (n2%13 == 0) || (n3%11 == 0))\
    \ n3 = n3+1\n            else if((n1%11 == 0) || (n2%13 == 0)) n2 = n2+1\n   \
    \         else n1 = n1+1\n        }\n        n3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5sz_oo6w.scala:12:64\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e[36mgetDigit\e\
    [0m(\e[36mn\e[0m:\e[35mLong\e[0m, \e[36mi\e[0m:\e[35mInt\e[0m) : \e[35mInt\e[0m\
    \ = { \e[33mif\e[0m(i >= n) \e[31m0\e[0m \e[33melse\e[0m (n%\e[31m10\e[0m + i%\e\
    [31m10\e[0m) % \e[31m10\e[0m }\n\e[31m\e[31m   |\e[0m                        \
    \                                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Long\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var total = 0\n        var current\
    \ = 0\n        while(current < n){\n            current = n % 10\n           \
    \ if(current == 7){\n                total += 1\n            }\n            n\
    \ /= 10\n        }\n        total\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf9sq96de.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            current = n % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      Found:    Long\n\e[31m   |\e[0m                \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf9sq96de.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = collection.mutable.MutableList[Long]()\n\
    \        val fs = collection.mutable.MutableList[Long]()\n        var i = 0\n\
    \        while(i <= n ) {\n            nums += i\n            if(i % 11 == 0 ||\
    \ i % 13 == 0) {\n                fs += i\n            }\n            i += 1\n\
    \        }\n        val count = fs.length\n        val fz = fs.filter(x => x ==\
    \ 7l).length\n        val buzz = fz / count\n        return (buzz.toInt)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwr9v649.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = collection.mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwr9v649.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfs\e[0m = collection.mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val buzz = 0\n        var count\
    \ = 0\n        while (n < 0l) {\n            buzz += n\n            n += 11l\n\
    \            count += n / 11l\n            n -= 11l\n            count += n /\
    \ 13l\n            n -= 13l\n            count += n / 111l\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtm6nxqr.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            buzz += n\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean buzz.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtm6nxqr.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n += \e[31m11l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphtm6nxqr.scala:17:18 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            count += n / \e[31m11l\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtm6nxqr.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m11l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphtm6nxqr.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            count += n / \e[31m13l\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtm6nxqr.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n -= \e[31m13l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphtm6nxqr.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            count += n / \e[31m111l\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n7 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      var count = 0\n      var num : Long\
    \ = 0\n      var isDivisibleBy11Or13 = false\n      while(n < 10) {\n        count\
    \ += 1\n        num = n\n        if(num % 11 == 0 || num % 13 == 0) {\n      \
    \    count -= 1\n          num /= 11\n          isDivisibleBy11Or13 = true\n \
    \       }\n      }\n      if(isDivisibleBy11Or13) {\n        count += 1\n    \
    \  }\n      count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79abnqyf.scala:31)\n\tat Problem.main(tmp79abnqyf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n < 100) 1\n        else if\
    \ (n % 11 == 0) 1\n        else if (n % 13 == 0) 1\n        else 0\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeco78_a_.scala:18)\n\tat Problem.main(tmpeco78_a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val m = scala.math.ModInt(n)\n\
    \        if (m % 11 == 0) 3\n        else if (m % 13 == 0) 2\n        else 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi35kpz8p.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.ModInt(n)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       value ModInt is not a member of math - did you mean math.BigInt?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def fizz(n: Int, remain: Long):\
    \ Long = {\n            if (remain > 0 && remain < 11 || remain > 13) return 1\n\
    \            if (remain == 0) return 0\n            if (remain < 0 && n % 11 ==\
    \ 0 && n % 13 == 0) return 1\n            if (remain < 0 && n % 11 != 0 && n %\
    \ 13 != 0) return 0\n            if (remain < 0 && n % 11 == 0 && n % 13 != 0)\
    \ return 0\n            if (remain > 0 && remain < 11 || remain > 13) return 0\n\
    \            if (remain > 0 && remain < 11 || remain > 13) return 0\n        \
    \    fizz(remain / 10, remain % 10)\n        }\n        fizz(n, 0)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo9b1t8v.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            fizz(remain / \e\
    [31m10\e[0m, remain % \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Long\n\e[31m   |\e[0m         \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo9b1t8v.scala:22:13\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        fizz(n, \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found: \
    \   (n : Long)\n\e[31m   |\e[0m             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val n1 = n % 10\n        val n2\
    \ = n % 11\n        val n3 = n % 13\n        if(n1 == 7 || n2 == 7 || n3 == 7)\n\
    \            n1\n        else\n            n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgmx9gnd.scala:21)\n\tat Problem.main(tmpcgmx9gnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n == 0) 0\n        else if(n\
    \ % 11 == 0 && n % 13 == 0)  1 + (fizzBuzz(n/11))\n        else if (n % 13 ==\
    \ 0) 1 + (fizzBuzz(n/13))\n        else if (n % 11 == 0) 1 + (fizzBuzz(n/11))\n\
    \        else 0\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsbv6z9uq.scala:20)\n\tat Problem.main(tmpsbv6z9uq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 1\n       \
    \ var i : Long = 1\n        var sum : Long = 0\n        while (i <= n) { \n  \
    \          if (i % 11 == 0){ \n                count += 1\n                sum\
    \ = (sum + (n%11))\n            } else if (i % 13 == 0) { \n                count\
    \ += 1\n                sum = (sum + (n%13))\n            } else if (i == 7){\
    \ \n                count += 1\n            }\n            i = i + 1\n       \
    \ }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2oe13jk.scala:30)\n\tat Problem.main(tmpy2oe13jk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 1\n        while (\
    \ n / 1000000000 % 11 == 0 || n / 1000000000 % 13 == 0 ){\n            count +=\
    \ 1\n            n /= 1000000000\n        }\n        return count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsipvxm9.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            n /= \e[31m1000000000\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a\
    \ member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // initialize fizzBuzz count to\
    \ zero\n        var fizzBuzzCount = 0.0\n        // loop from zero to n incrementing\
    \ counter by 1\n        for (i <- 0 until n){\n            // if the number is\
    \ divisible by 11 or 13\n            if (i % 11 == 0 || i % 13 == 0){\n      \
    \          // increment fizzBuzz count\n                fizzBuzzCount = fizzBuzzCount\
    \ + 1.0\n                // if the number is divisible by 11 then print \"fizz\"\
    \n                if (i % 11 == 0){\n                    // append fizz at the\
    \ end of fizzBuzz\n                    fizzBuzzCount = fizzBuzzCount + 1.0\n \
    \                   // print \"fizzBuzz\" + fizzBuzzCount\n                  \
    \  fizzBuzzCount = fizzBuzzCount.toString() + \"fizzBuzz\" + fizzBuzzCount\n \
    \               }\n                // if the number is divisible by 13 then print\
    \ \"buzz\"\n                if (i % 13 == 0){\n                    // append buzz\
    \ at the end of fizzBuzz\n                    fizzBuzzCount = fizzBuzzCount +\
    \ 1.0\n                    // print \"fizzBuzz\" + fizzBuzzCount\n           \
    \         fizzBuzzCount = fizzBuzzCount.toString() + \"buzz\" + fizzBuzzCount\n\
    \                }\n            }\n        }\n        // return fizzBuzzCount\n\
    \        return fizzBuzzCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp26l63fi.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp26l63fi.scala:25:36 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                    fizzBuzzCount = fizzBuzzCount.toString()\
    \ + \e[31m\"fizzBuzz\"\e[0m + fizzBuzzCount\n\e[31m\e[31m   |\e[0m           \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    String\n\e[31m\
    \   |\e[0m                                    Required: Double\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp26l63fi.scala:32:36 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    fizzBuzzCount = fizzBuzzCount.toString()\
    \ + \e[31m\"buzz\"\e[0m + fizzBuzzCount\n\e[31m\e[31m   |\e[0m               \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    String\n\e[31m  \
    \ |\e[0m                                    Required: Double\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp26l63fi.scala:37:15 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mreturn\e[0m fizzBuzzCount\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (fizzBuzzCount : Double)\n\e[31m   |\e[0m               Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val numDigits = n.toString.length()\n\
    \        val counts = mutable.Map[Long,Long]()\n        for(i <- 1 to numDigits\
    \ by 2){\n            val mod10 = n % 10\n            if(mod10 == 7 || mod10 ==\
    \ 1){\n                counts += i -> (1 + counts.getOrElse(i,0))\n          \
    \  }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfhqyx10.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ if (n <= 0 || (n % 11 == 0 && n % 13 == 0)) {\n            count = count\n \
    \       } else {\n            while(n > 0) {\n                n %= 10\n      \
    \          count += 1\n                if (n % 11 == 0 && n % 13 == 0) {\n   \
    \                 count = count\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnlu0f1d_.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                n %= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value %= is not a\
    \ member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Set result to 1 by default.\n\
    \        val result = 1\n        // Set digits to 0 by default.\n        var digits\
    \ = 0\n\n        // While the number is divisible by 11 or 13 add 1 to the result.\n\
    \        while (n > 0) {\n            // If the first digit of n is divisible\
    \ by 11 or 13 add 1 to the result.\n            if (n % 11 == 0 || n % 13 == 0)\
    \ {\n                result += 1\n            }\n            // Add the digit\
    \ to the digits variable and shift n right by 1.\n            digits += 1\n  \
    \          n >>>= 1\n        }\n        // Return the result.\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bkxh6x0.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7bkxh6x0.scala:25:14 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            n >>>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            value >>>= is not a member of Long\
    \ - did you mean n.>>>?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val num = n.toInt\n        if\
    \ (num == 0 || num == 1)\n            return num\n        if (num == 2)\n    \
    \        return num\n        if (num % 11 == 0 || num % 13 == 0)\n           \
    \ return num\n        val result = new mutable.ListBuffer[Int]()\n        val\
    \ nums = num / 100\n        val remainder = num % 100\n        if (num % 10 ==\
    \ 0)\n            result.push(num)\n        else {\n            if (remainder\
    \ == 7)\n                result.push(num)\n            else if (num % 11 == 0\
    \ || num % 13 == 0)\n                result.push(num)\n            else\n    \
    \            result.push(nums / 10 * 10 + nums % 10)\n        }\n        result.size\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsvkwuro.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counter = mutable.HashSet[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i %% 11 == 0L || i %% 13 == 0L)\
    \ {\n                if (counter.contains(7L)) {\n                    counter.remove(7L)\n\
    \                } else {\n                    counter.add(7L)\n             \
    \   }\n            }\n        }\n        counter.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wjy1roa.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8wjy1roa.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i %% \e[31m11\e[0m == \e[31m0L\e\
    [0m || i %% \e[31m13\e[0m == \e[31m0L\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                value %% is not a member of\
    \ Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var x = 0\n        var z = 0\n\
    \        var count = 0\n        for(i <- 1 to n / 11) {\n            if (i % 11\
    \ == 0) {\n                x += 1\n                if (x == 1)\n             \
    \       count = 1\n            } else if (i % 13 == 0) {\n                z +=\
    \ 1\n                if (z == 1)\n                    count = 1\n            }\
    \ else {\n                count += 1\n            }\n        }\n        if (count\
    \ > 0)\n            return count\n        else\n            return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal6j9u3m.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n / \e[31m11\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m  \
    \ |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val c = n % 11\n        if (11\
    \ != c && 13 != c) {\n            return 0\n        }\n        val v = n.toString.toList.reverse.foldLeft(0)((sum,\
    \ digit) => { sum + digit * digit * digit })\n        c % 11 == 0 ? v : fizzBuzz(v\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpie4851v4.scala:17:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        c % \e[31m11\e[0m == \e[31m0\e[0m ? v : \e[35mfizzBuzz\e\
    [0m(v - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \ ^\e[0m\n\e[31m   |\e[0m                                 end of statement expected\
    \ but '(' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpie4851v4.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        c % \e[31m11\e[0m\
    \ == \e[31m0\e[0m ? v : \e[35mfizzBuzz\e[0m(v - \e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  value ? is\
    \ not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = mutable.MutableList[Long]()\n\
    \        for(x <- 0 until (n/11) % 11) nums.add(x*11)\n        for(x <- 0 until\
    \ (n/13) % 13) nums.add(x*13)\n        nums.count(7)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamcf3yi0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpamcf3yi0.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(x <- \e[31m0\e[0m until (n/\e\
    [31m11\e[0m) % \e[31m11\e[0m) nums.add(x*\e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \       Found:    Long\n\e[31m   |\e[0m                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpamcf3yi0.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(x <- \e\
    [31m0\e[0m until (n/\e[31m13\e[0m) % \e[31m13\e[0m) nums.add(x*\e[31m13\e[0m)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 1\n        var remainder\
    \ = n\n        while (true) {\n            if ((remainder % 11) == 0) {\n    \
    \            count += 1\n                remainder /= 11\n            }\n    \
    \        else\n            if ((remainder % 13) == 0) {\n                count\
    \ += 1\n                remainder /= 13\n            }\n            else\n   \
    \         if ((remainder % 11) == 0 && remainder % 13 == 0) {\n              \
    \  count += 1\n                remainder /= 11\n                remainder /= 13\n\
    \            }\n            else {\n                count += 1\n             \
    \   remainder /= 10\n            }\n            if (remainder == 0) {\n      \
    \          return count\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofmib2m8.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (\e\
    [31mtrue\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m15 |\e[0m     \
    \       \e[33mif\e[0m ((remainder % \e[31m11\e[0m) == \e[31m0\e[0m) {\n\e[31m16\
    \ |\e[0m                count += \e[31m1\e[0m\n\e[31m17 |\e[0m               \
    \ remainder /= \e[31m11\e[0m\n\e[31m18 |\e[0m            }\n\e[31m19 |\e[0m  \
    \          \e[33melse\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m ((remainder\
    \ % \e[31m13\e[0m) == \e[31m0\e[0m) {\n\e[31m21 |\e[0m                count +=\
    \ \e[31m1\e[0m\n\e[31m22 |\e[0m                remainder /= \e[31m13\e[0m\n\e\
    [31m23 |\e[0m            }\n\e[31m24 |\e[0m            \e[33melse\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mif\e[0m ((remainder % \e[31m11\e[0m) == \e[31m0\e[0m\
    \ && remainder % \e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m26 |\e[0m           \
    \     count += \e[31m1\e[0m\n\e[31m27 |\e[0m                remainder /= \e[31m11\e\
    [0m\n\e[31m28 |\e[0m                remainder /= \e[31m13\e[0m\n\e[31m29 |\e[0m\
    \            }\n\e[31m30 |\e[0m            \e[33melse\e[0m {\n\e[31m31 |\e[0m\
    \                count += \e[31m1\e[0m\n\e[31m32 |\e[0m                remainder\
    \ /= \e[31m10\e[0m\n\e[31m33 |\e[0m            }\n\e[31m34 |\e[0m            \e\
    [33mif\e[0m (remainder == \e[31m0\e[0m) {\n\e[31m35 |\e[0m                \e[33mreturn\e\
    [0m count\n\e[31m36 |\e[0m            }\n\e[31m37 |\e[0m        }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counter : Long = 0\n     \
    \   var count : Long = 0\n        while(n != 0){\n            count += 1\n   \
    \         if(n / 11 == 0 || n / 13 == 0){\n                counter += 1\n    \
    \        }\n            n -= 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivsj96d2.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = n div 100\n       \
    \ val divisibleBy11 = (nums % 11) == 0l\n        val divisibleBy13 = (nums % 13)\
    \ == 0l\n        var count = 0l\n        for (i <- 0 until nums.toInt) {\n   \
    \         if (divisibleBy11 && divisibleBy13) {\n                count += 1\n\
    \            } else if (divisibleBy11) {\n                count += 1\n       \
    \     } else if (divisibleBy13) {\n                count += 1\n            } else\
    \ {\n                continue\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhg344q0.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = n div \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value div is not a member of Long\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpuhg344q0.scala:24:16 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                continue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: continue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for (i <- 0 to n.toInt-1) {\n            val remainder = n % 10\n          \
    \  if (remainder == 7) {\n                count += 1\n            }\n        \
    \    n /= 10\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfj1pifol.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.MutableList[Int]()\n\
    \        val nums = mutable.MutableList[Int]()\n        for (i<-1 to (n % 11)\
    \ + 1) yield {\n            nums += i\n            if (i == 7) count += 1 :: nums\n\
    \        }\n        (nums filter (_ % 13 == 0l) sum) match {\n            case\
    \ 0 => (0l / 11l) :: count\n            case _ => (0l / 13l) :: (count.sum + 1)\
    \ :: nums\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3ru0qo8m.scala:18:39 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        (nums filter (_ % \e[31m13\e[0m == \e[31m0l\e\
    [0m) sum) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                          \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3ru0qo8m.scala:12:20 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.MutableList[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3ru0qo8m.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.MutableList[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3ru0qo8m.scala:14:21 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mfor\e[0m (i<-\e[31m1\e[0m to (n % \e[31m11\e[0m) + \e[31m1\e\
    [0m) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counter = -1\n        while\
    \ (n > 0) {\n            counter += n % 10 == 7\n            n /= 10\n       \
    \ }\n        return counter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53qrp3p3.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            counter += n % \e[31m10\e[0m == \e[31m7\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp53qrp3p3.scala:15:14 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int,\
    \ Long]()\n        for(i <- 0 until n){\n            val d = i / 11\n        \
    \    val e = i % 11\n            if(!count.contains(d)) count.put(d, 0l)\n   \
    \         if(e == 7){\n                count.put(d, count.get (d) + 1)\n     \
    \       }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcliml08p.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcliml08p.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counter = mutable.MutableList(1l,\
    \ 0l)\n        for {\n            i <- 0 until (n/11)\n            j = n%11\n\
    \            if (j == 7) {\n                counter += j\n            } else {\n\
    \                if (j % 13 == 0) counter += 1\n            }\n        } yield\
    \ counter\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2dwctdn1.scala:18:14 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m\
    \              ^^^^\e[0m\n\e[31m   |\e[0m              '}' expected, but 'else'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dwctdn1.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m = mutable.MutableList(\e\
    [31m1l\e[0m, \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dwctdn1.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i <- \e[31m0\e[0m until (n/\e[31m11\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2dwctdn1.scala:16:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e\
    [0m (j == \e[31m7\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                \e[33mmethod\e[0m \e[35m==\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = Vector.fill(n / 11)(7).takeWhile(_\
    \ < 11).takeWhile(_ % 11 != 0).takeWhile(_ % 13 != 0)\n        nums.count(_ ==\
    \ 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspaksp4p.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Vector.fill(n / \e[31m11\e[0m)(\e[31m7\e[0m).takeWhile(_ < \e[31m11\e[0m).takeWhile(_\
    \ % \e[31m11\e[0m != \e[31m0\e[0m).takeWhile(_ % \e[31m13\e[0m != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    Long\n\e[31m   |\e[0m            \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val arr = new mutable.ArrayBuilder[Long]\n\
    \        for (i <- 1 to n) arr += i\n        arr.filter(i => i / 11 == 0 || i\
    \ / 13 == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmvy51ul.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwmvy51ul.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) arr += i\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e\
    [0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        n match {\n            case i\
    \ if i % 11 == 0 => 13\n            case i if i % 13 == 0 => 11\n            case\
    \ _ => 0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl5_qbial.scala:20)\n\tat Problem.main(tmpl5_qbial.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        require(n < 1000000000, \"Only\
    \ small numbers are allowed.\")\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for( x <- 0 to n ) {\n            val str = Integer.toString(x)\n\
    \            if( count.contains(str) && count.get(str) == 1 ) {\n            \
    \    count.remove(str)\n            }\n            else if( count == 0 ) {\n \
    \               count(str) = 1\n            }\n            if( count.contains(str)\
    \ && count.get(str) == 3 ) {\n                count.remove(str)\n            }\n\
    \            else if( count.contains(str) && count.get(str) == 5 ) {\n       \
    \         count.remove(str)\n            }\n            if( count.contains(str)\
    \ && count.get(str) == 7 ) {\n                count.remove(str)\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeldco70.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeldco70.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( x <- \e[31m0\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nDiv11or13 = n % 11 == 0 ||\
    \ n % 13 == 0\n        val nModulo11 = n % 11 == 0\n        val nModulo13 = n\
    \ % 13 == 0\n\n        val isDivisibleBy11And13 = n % 11 != 0 && n % 13 != 0\n\
    \        val isDivisibleBy11And13AndModulo11 = n % 11 != 0\n        val isDivisibleBy11And13AndModulo13\
    \ = n % 13 != 0\n\n        val numOfFizzBuzz = math.max(0, nDiv11or13 + nModulo11\
    \ + nModulo13 + isDivisibleBy11And13 + isDivisibleBy11And13AndModulo11 + isDivisibleBy11And13AndModulo13)\n\
    \        math.max(0, numOfFizzBuzz)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuk18wbhm.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumOfFizzBuzz\e[0m = math.max(\e\
    [31m0\e[0m, nDiv11or13 + nModulo11 + nModulo13 + isDivisibleBy11And13 + isDivisibleBy11And13AndModulo11\
    \ + isDivisibleBy11And13AndModulo13)\n\e[31m\e[31m   |\e[0m                  \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Boolean, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.MutableInt(0)\n\
    \        for(num <- 1 until n){\n            if(num % 11 == 0 || num % 13 == 0){\n\
    \                count += 1\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2sd2dcrw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.MutableInt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2sd2dcrw.scala:13:27 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(num <- \e[31m1\e[0m until n){\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.MutableArray.fill(n.toInt)(0)\n\
    \        var temp = 0\n        for (i <- 0 to n.toInt){\n            temp = temp\
    \ + i.toInt\n            if (temp % 11 == 0 && temp % 13 == 0) {\n           \
    \     count(0) = count(0) + 1\n            }\n        }\n        n.toLong + count.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfd6isv3.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.MutableArray.fill(n.toInt)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val digits = scala.collection.mutable.Set[Int]()\n\
    \        while(n > 0) {\n            digits += n%10\n            n /= 10\n   \
    \     }\n        val countOf7 = digits.count(_ == 7) == digits.count(_ == 7)\n\
    \        if((n % 11) == 0 || n %13 == 0) {\n            digits.count(_ == 7) ==\
    \ digits.count(_ == 7)\n        } else {\n            digits.count(_ == 7) !=\
    \ digits.count(_ == 7)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5s6oq10.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            digits += n%\e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg5s6oq10.scala:15:14\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpg5s6oq10.scala:19:12 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            digits.count(_ == \e[31m7\e[0m) == digits.count(_ ==\
    \ \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Boolean\n\e[31m   |\e[0m           \
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5s6oq10.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            digits.count(_ ==\
    \ \e[31m7\e[0m) != digits.count(_ == \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          Found:    Boolean\n\e[31m   |\e[0m            Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val list = new mutable.ArrayBuffer[Long]()\n\
    \        val a = n / 11\n        val b = n % 11\n\n        if ((a % 13) == 0)\
    \ list += b\n        n /= 13\n        a % 13 == 0 ? list += b : a\n\n        val\
    \ c = n / 7\n        val d = n % 7\n\n        if ((c % 11) == 0) list += d\n \
    \       n /= 11\n        c % 11 == 0 ? list += d : c\n\n        list.size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nlo54a4.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nlo54a4.scala:17:10\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        n /= \e[31m13\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not\
    \ a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_nlo54a4.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        a % \e[31m13\e[0m == \e[31m0\e[0m ? list += b : \e[35ma\e[0m\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Not found: type a\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_nlo54a4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        a % \e[31m13\e[0m == \e[31m0\e[0m ? list += b\
    \ : \e[35ma\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e\
    [0m                  value ? is not a member of Int\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_nlo54a4.scala:24:10 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        n /= \e[31m11\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m        value /= is not a member of Long - did you mean n.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nlo54a4.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        c % \e[31m11\e[0m == \e[31m0\e[0m ? list += d\
    \ : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: type c\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nlo54a4.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Find the first number divisible\
    \ by 11 or 13 and then take out that number.\n        // >>> fizzBuzz((50l))\n\
    \        // (0l)\n        // >>> fizzBuzz((78l))\n        // (2l)\n        //\
    \ >>> fizzBuzz((79l))\n        // (3l)\n        if (n >= (11l * 13l)) {\n    \
    \        val n = n.toInt\n            (n / 11l).toInt * 11l + (n % 11l).toInt\n\
    \        } else {\n            0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsvq6eqz8.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        (1 to n).filter( n => n % 11 ==\
    \ 0 || n % 13 == 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1ceer41.scala:12:14\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        (\e[31m1\e[0m to n).filter(\
    \ \e[36mn\e[0m => n % \e[31m11\e[0m == \e[31m0\e[0m || n % \e[31m13\e[0m == \e\
    [31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m  \
    \            Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val rev = n % 10\n        if(rev\
    \ == 7)\n            return 1\n        if(rev < 7)\n            return 0\n   \
    \     var count = 0\n        val divs = mutable.ArrayBuffer(11, 13)\n        for(n\
    \ <- 1 to 9 to n) {\n            val rev = n % 10\n            if(divs.contains(rev))\n\
    \                count += 1\n        }\n        count - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7pt7a4h.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdivs\e[0m = mutable.ArrayBuffer(\e\
    [31m11\e[0m, \e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7pt7a4h.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(n <- \e[31m1\e[0m to \e[31m9\e\
    [0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           Found:    (n : Long)\n\e[31m   |\e[0m     \
    \                      Required: scala.collection.Factory[Int, Any]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val numbers = mutable.Set[Int]()\n\
    \        while(n > 0) {\n            val c = n % 10\n            if (c == 7)\n\
    \                numbers += c\n            n /= 10\n        }\n        numbers.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4iamj6b.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg4iamj6b.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val a = n / 100\n        val b\
    \ = n / 10\n        val c = n % 10\n        if (a % 11 == 0 && b == 0 || a % 13\
    \ == 0 && b == 0) (c + 1l)\n        else {\n            if (a % 11 == 0 && b !=\
    \ 0) (c + 2l)\n            if (a % 13 == 0 && b != 0) (c + 3l)\n            else\
    \ (c + 4l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mu63orv.scala:23)\n\tat Problem.main(tmp3mu63orv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val list = List(n, n.toInt/11,\
    \ n.toInt/13, n.toInt/21, n.toInt/23, n.toInt/33);\n        list.foreach { i =>\n\
    \            if (i%11 == 0 || i%13 == 0) {\n                println(i + \": \"\
    \ + i.fizzBuzz + \"x\");\n                println(i + \": \" + i.fizzBuzz + \"\
    x\");\n                println(i + \": \" + i.fizzBuzz + \"x\");\n           \
    \ } else if (i%21 == 0) {\n                println(i + \": \" + i.fizzBuzz + \"\
    x\");\n                println(i + \": \" + i.fizzBuzz + \"x\");\n           \
    \     println(i + \": \" + i.fizzBuzz + \"x\");\n            } else if (i%23 ==\
    \ 0) {\n                println(i + \": \" + i.fizzBuzz + \"x\");\n          \
    \      println(i + \": \" + i.fizzBuzz + \"x\");\n                println(i +\
    \ \": \" + i.fizzBuzz + \"x\");\n            } else {\n                println(i);\n\
    \            }\n        }\n        return list.size;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwqnld348.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i%\e[31m11\e[0m == \e[31m0\e\
    [0m || i%\e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m             \
    \   ^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of AnyVal, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwqnld348.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                println(i + \e[31m\": \"\e[0m + i.fizzBuzz\
    \ + \e[31m\"x\"\e[0m);\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwqnld348.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                println(i + \e[31m\": \"\e[0m + i.fizzBuzz\
    \ + \e[31m\"x\"\e[0m);\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwqnld348.scala:17:26 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                println(i + \e[31m\": \"\e[0m + i.fizzBuzz\
    \ + \e[31m\"x\"\e[0m);\n\e[31m\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val l = new mutable.Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            if (i / 11 % 11 == 0\
    \ && (i % 13) == 0) l.update(i + 1, 0)\n            if (i / 13 % 13 == 0 && (i\
    \ % 11) == 0) l.update(i + 1, 1)\n            i += 1\n        }\n        l.toArray.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiv9se4iu.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer[Long]()\n\
    \        val digits = n % 10\n\n        while (digits != 0) {\n            nums\
    \ += digits\n            digits /= 10\n        }\n\n        nums.count(x => x\
    \ == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9chf75dy.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9chf75dy.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            digits /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean digits.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for(i <- 1L until n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n     \
    \           count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp20pkpgb.scala:21)\n\tat Problem.main(tmpp20pkpgb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var sum\
    \ = 0\n        while(n > 0){\n            sum += n\n            count += 1\n \
    \           n = sum.toInt/11\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplkl3h8_1.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmplkl3h8_1.scala:17:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n = sum.toInt/\e\
    [31m11\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val result = new mutable.HashMap[Int,\
    \ Int]()\n        if (n % 11 == 0 || n % 13 == 0) {\n            n :: result\n\
    \        } else {\n            val tmp = fizzBuzz(n / 11)\n            tmp.foreach\
    \ { case (k, v) => result.update(k, v.get + 1) }\n        }\n        result.getOrElse(n,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhzk_gev.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhzk_gev.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            tmp.foreach {\
    \ \e[33mcase\e[0m (k, v) => result.update(k, v.get + \e[31m1\e[0m) }\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value foreach\
    \ is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val d = scala.util.Either.Left(n)\n\
    \        val f = scala.util.Either.Right(n)\n        val a = d.right.toString.toInt\n\
    \        val b = f.right.toString.toInt\n        var count = 0\n        var found\
    \ = 0\n        while(a != 0 | b != 0) {\n            if(a % 11 == 0 & b % 13 ==\
    \ 0) {\n                found = 1\n            }\n            a /= 11\n      \
    \      b /= 13\n            count += 1\n        }\n        if(found == 1) {\n\
    \            return count\n        } else {\n            return n\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppc605da9.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = scala.util.Either.Left(n)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue Left is not a member of object scala.util.Either - did you mean Either.wait?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppc605da9.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m = scala.util.Either.Right(n)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value Right is not a member of object scala.util.Either\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var result = 1\n        for (x\
    \ <- 0 until n) {\n            val mod = x % 11\n            val mod2 = x % 13\n\
    \            if ((mod != 7) && (mod != 13) && (mod2 != 7) && (mod2 != 13)) {\n\
    \                result += 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcvg1b71.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if(n % 11 == 0 || n % 13 == 0)\
    \ {\n            return n\n        }\n        if(n % 11 == 0) {\n            n\
    \ / 11\n        }\n        else {\n            n / 13\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpizw6hote.scala:23)\n\tat Problem.main(tmpizw6hote.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      val l: List[Long] = List.range(1,\
    \ n+1)\n      val r: List[List[Long]] = l.map(x=>{\n        if(x%11==0 || x%13==0)\
    \ List(x) else List()\n      })\n      r.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ivzkr6z.scala:19)\n\tat Problem.main(tmp5ivzkr6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n%11==0) 1\n        else if\
    \ (n%13==0) 2\n        else 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpglz_1rno.scala:19)\n\tat Problem.main(tmpglz_1rno.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i\
    \ <- 1 to n) {\n            val digit = i.toString.head\n            if (digit\
    \ == \"0\" || digit == \"1\") {\n                count = count + 1\n         \
    \   } else if (digit == \"7\" && i % 11 == 0 || digit == \"7\" && i % 13 == 0)\
    \ {\n                count = count + 1\n            } else if (digit == \"3\"\
    \ && i % 11 != 0) {\n                count = count + 1\n            } else if\
    \ (digit == \"7\" && i % 11 == 0) {\n                count = count + 1\n     \
    \       } else if (digit == \"3\" && i % 13 == 0) {\n                count = count\
    \ + 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapa96z10.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpapa96z10.scala:15:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     \e[33mif\e[0m (digit == \e[31m\"0\"\e[0m || digit == \e[31m\"1\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpapa96z10.scala:15:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (digit == \e[31m\"0\"\e[0m\
    \ || digit == \e[31m\"1\"\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpapa96z10.scala:17:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (digit == \e[31m\"7\"\e[0m && i % \e[31m11\e\
    [0m == \e[31m0\e[0m || digit == \e[31m\"7\"\e[0m && i % \e[31m13\e[0m == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpapa96z10.scala:17:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (digit ==\
    \ \e[31m\"7\"\e[0m && i % \e[31m11\e[0m == \e[31m0\e[0m || digit == \e[31m\"7\"\
    \e[0m && i % \e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \                                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpapa96z10.scala:19:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            } \e"
  stdout: ''
  timestamp: 1660010336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var i : Long = 0\n        while\
    \ (i < n) {\n            if (i % 11 == 0) i += 1\n            if (i % 13 == 0)\
    \ i += 1\n            i += 1\n        }\n        (i) \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1_4x9et.scala:21)\n\tat Problem.main(tmpt1_4x9et.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Int = 0\n        var\
    \ remainder : Long = n / 11\n        while (true) {\n            if (remainder\
    \ % 13 == 0) count += 1\n            if (remainder % 11 == 0) count += 1\n   \
    \         count = count + remainder % 13\n            remainder = remainder /\
    \ 11\n            if (remainder == 0) return count\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dsc_fpc.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count = count + remainder\
    \ % \e[31m13\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m      \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Initialize a HashMap which\
    \ we'll use to keep track of previously seen digits.\n        var counters = new\
    \ mutable.HashMap[String, Long]();\n        var result : Long = 0;\n        val\
    \ divisors = (1l to 12l).filter(d => n % d == 0l).toList;\n        divisors.foreach\
    \ { divisor =>\n            var divisorCount = 0l\n            var divisorCounts\
    \ : Seq[Long] = Seq()\n            val counter = counters.get(divisor.toString)\n\
    \            if (counter != null) {\n                divisorCounts = divisorCounts\
    \ :+ (counter :+ 1l)\n            } else {\n                divisorCounts = divisorCounts\
    \ :+ 1l\n            }\n            counters.put(divisor.toString, divisorCounts.sum)\n\
    \        }\n        // Get the number of times the digit 7 appears in the divisorCounts\
    \ Seq.\n        val totalFizzBuzz = (divisorCounts.toList filter (_ == 7)).sum\n\
    \        // Add the number of Fizz Buzz iterations to the result.\n        result\
    \ += (totalFizzBuzz / 10l + (totalFizzBuzz % 10l == 0l)) * ((divisorCounts.toList\
    \ filter (_ == 11l)).sum)\n        // Return the result.\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7soxcwa.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mcounters\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]();\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpm7soxcwa.scala:28:29 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mtotalFizzBuzz\e[0m = (divisorCounts.toList filter\
    \ (_ == \e[31m7\e[0m)).sum\n\e[31m\e[31m   |\e[0m                            \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: divisorCounts\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        while (n\
    \ >= 1000) {\n            n %= 1000\n            count += 1\n        }\n     \
    \   while (n >= 100) {\n            n %= 100\n            count += 1\n       \
    \ }\n        while (n >= 10) {\n            n %= 10\n            count += 1\n\
    \        }\n        n match {\n            case x if x % 11 == 0 => count += 1\n\
    \            case x if x % 13 == 0 => count += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1b8osv9f.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            n %= \e[31m1000\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value %= is not a member\
    \ of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1b8osv9f.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n %= \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ %= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp1b8osv9f.scala:22:14 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            n %= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value %= is not a member of Long - did you mean\
    \ n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val d = n % 10\n        val s\
    \ = n % 100\n        if (d == 7 && s % 11 == 0 || d == 7 && s % 13 == 0) {\n \
    \           1\n        } else {\n            0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpte4w7nbr.scala:22)\n\tat Problem.main(tmpte4w7nbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer(1L)\n\
    \        for{\n            i <- 0 to n\n            if (i % 11 == 0 || i % 13\
    \ == 0)\n                count += i\n        } yield count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp351329cw.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        } \e[33myield\e[0m count\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp351329cw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp351329cw.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i <- \e[31m0\e[0m to n\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val result = mutable.Map[(Long,\
    \ Long), Long]()\n        val result2 = mutable.ListBuffer[(Long, Long)]()\n \
    \       if (n % 11 == 0) result2 += ((n/11, n))\n        if (n % 13 == 0) result2\
    \ += ((n/13, n))\n        for ((n, m) <- result2) {\n            val k = m.toString.indexOf(\"\
    7\")\n            if (k == -1) result2 += ((n/10, n))\n            else {\n  \
    \              val value = result.getOrElse((n/10, m), 0)\n                result\
    \ += (n -> value + 1)\n            }\n        }\n        result.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn5pd9eri.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn5pd9eri.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult2\e[0m = mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]()\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 1 to n/10)\n            if(i % 11 == 0 || i % 13 == 0)\n   \
    \             count += i.toString\n        count.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeai29au6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpeai29au6.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n/\e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counter = mutable.Map[(Long,\
    \ Int), (Long, Int)]()\n        for( i <- 1 to n ) {\n            if( i % 11 ==\
    \ 0 || i % 13 == 0) {\n                if( counter.contains( (i, 1) ) ) {\n  \
    \                  val c = counter.getOrElseUpdate( (i, 1), (1, 0) )\n       \
    \             c._1 += 1\n                } else {\n                    val c =\
    \ counter.getOrElseUpdate( (i, 1), (1, 0) )\n                    counter.put(\
    \ i, c) \n                }\n            }\n        }\n        counter.values.toList.map{\
    \ case (val, freq) => freq }.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyfbnwsyd.scala:24:41 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        counter.values.toList.map{ \e[33mcase\e[0m (\e\
    [33mval\e[0m, freq) => freq }.sum\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyfbnwsyd.scala:12:22 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map[(\e[35mLong\e[0m, \e\
    [35mInt\e[0m), (\e[35mLong\e[0m, \e[35mInt\e[0m)]()\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfbnwsyd.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i\
    \ <- 1 to n by 10) {\n            if (i % 13 == 0 || i % 11 == 0) {\n        \
    \        if (i % 7 == 0) {\n                    count += 1\n                }\n\
    \            }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsuy1weqr.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n by \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m               \
    \        ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def isDivisibleBy11And13(i: Long)\
    \ : Boolean = {\n            if (i % 11 == 0) true else if (i % 13 == 0) true\
    \ else false\n        }\n        \n        // initialize count\n        var count\
    \ = n\n\n        while (isDivisibleBy11And13(count)) {\n            if (count\
    \ % 11 == 0) count += 11\n            else if (count % 13 == 0) count += 13\n\
    \            else count++\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1gx_woq3.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m count++\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 1 to n) { count += if (i % 11 == 0 || i % 13 == 0) i else 0\
    \ }\n        count.length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpij_u311p.scala:13:36 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) { count\
    \ += \e[33mif\e[0m (i % \e[31m11\e[0m == \e[31m0\e[0m || i % \e[31m13\e[0m ==\
    \ \e[31m0\e[0m) i \e[33melse\e[0m \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m      \
    \                              ^^\e[0m\n\e[31m   |\e[0m                      \
    \              expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpij_u311p.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpij_u311p.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) { count\
    \ += \e[33mif\e[0m (i % \e[31m11\e[0m == \e[31m0\e[0m || i % \e[31m13\e[0m ==\
    \ \e[31m0\e[0m) i \e[33melse\e[0m \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map[Int, Int]()\n\
    \        val digits = Iterator.continually((n % 10).toInt).takeWhile(_ <= 7).dropWhile(_\
    \ <= 7).toList\n        digitList.foreach(d => count(d))\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxpy1aoxh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxpy1aoxh.scala:14:8 -------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digitList.foreach(\e[36md\e[0m => count(d))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ digitList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      n match {\n        case _ if n %\
    \ 11 == 0 || n % 13 == 0 => 1\n        case _ if n % 11 != 0 && n % 13 != 0 =>\
    \ 1 + fizzBuzz(n / 11)\n        case _ => 0\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0dru6f61.scala:19)\n\tat Problem.main(tmp0dru6f61.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        while (n)\
    \ {\n            count += 1\n            if (n % 11 == 0) count = 1\n        \
    \    if (n % 13 == 0) count = 1\n            n /= 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpne3xmqbs.scala:13:15\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m (n)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (n : Long)\n\e[31m   |\e[0m               Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpne3xmqbs.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = (1l)(0l)(2l)(3l)(4l)(5l)\n\
    \        while ((n % 11l) != 0l || (n % 13l) != 0l) {\n            n /= 11l\n\
    \            count += (11l)(0l)(2l)(3l)(4l)(5l)\n        }\n        n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmptcq8jt9p.scala:12:21 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = (\e[31m1l\e\
    [0m)(\e[31m0l\e[0m)(\e[31m2l\e[0m)(\e[31m3l\e[0m)(\e[31m4l\e[0m)(\e[31m5l\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptcq8jt9p.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            n /= \e[31m11l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var x =\
    \ n / 11\n        while ( x >= 1) {\n            if (n % 11 == 0)\n          \
    \      count += x\n            x /= 11\n        }\n        x /= 13\n        while\
    \ ( x >= 1) {\n            if (n % 13 == 0)\n                count += x\n    \
    \        x /= 13\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzxz0p0pv.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                count += x\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzxz0p0pv.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                count += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n == 0) 0\n        else if\
    \ (n % 11 == 0) 1\n        else if (n % 13 == 0) 2\n        else fizzBuzz(n/10)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpae7m42fu.scala:20)\n\tat Problem.main(tmpae7m42fu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n == 0) 0\n        else if\
    \ (n % 11 == 0 || n % 13 == 0) 1\n        else fizzBuzz(n-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxga5n2p1.scala:17)\n\tat Problem.main(tmpxga5n2p1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for(i <- 0 to 9) {\n            if(n.toInt % 11 == i || n.toInt % 13 == i) count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmrnr44hp.scala:19)\n\tat Problem.main(tmpmrnr44hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val c = n.toString.toList.map(c\
    \ => c match {\n            case \"0\"  => \"0\"\n            case \"1\"  => \"\
    1\"\n            case \"2\"  => \"2\"\n            case \"3\"  => \"3\"\n    \
    \        case \"4\"  => \"4\"\n            case \"5\"  => \"5\"\n            case\
    \ \"6\"  => \"6\"\n            case \"7\"  => \"7\"\n            case \"8\"  =>\
    \ \"8\"\n            case \"9\"  => \"9\"\n            case _ => \"0\"\n     \
    \   }).filter(c => c == \"7\")\n        if (c.size < 13) c.size else c.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpztm6hpcu.scala:13:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m \e[31m\"0\"\e[0m  => \e[31m\"\
    0\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:14:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m \e[31m\"1\"\e[0m  => \e[31m\"\
    1\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:15:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e[31m\"2\"\e[0m  => \e[31m\"\
    2\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:16:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e[31m\"3\"\e[0m  => \e[31m\"\
    3\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e[31m\"4\"\e[0m  => \e[31m\"\
    4\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31m\"5\"\e[0m  => \e[31m\"\
    5\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpztm6hpcu.scala:19:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m\"6\"\e[0m  => \e[31m\"\
    6\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types String and Char ca"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def sum(n: Int, sum: Int, digit:\
    \ Int): Int = {\n            if (n == 0) sum\n            else if (digit % 3 ==\
    \ 0 && digit % 5 == 0) sum + n\n            else sum + sum(n - 1, sum, n * 10\
    \ + digit)\n        }\n        return sum(n.toInt, 0, n.toInt / 10)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp9xfq5zs3.scala:15:23 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m sum + sum(n - \e[31m1\e[0m,\
    \ sum, n * \e[31m10\e[0m + digit)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^\e[0m\n\e[31m   |\e[0m                       \e[33mparameter\e[0m \e[35msum\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for(i <- 1 to n) count += ((i % 11) == 0) || ((i % 13) == 0)\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps268xpj0.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) count += ((i % \e[31m11\e[0m) == \e[31m0\e[0m) || ((i % \e[31m13\e\
    [0m) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps268xpj0.scala:13:31 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) count += ((i % \e[31m11\e[0m)\
    \ == \e[31m0\e[0m) || ((i % \e[31m13\e[0m) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val isEven = (n%2 == 0)\n    \
    \    if(n % 11 == 0 || n % 13 == 0) {\n            if(isEven) 1 \n           \
    \ else fizzBuzz(n/2)\n        } else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrvl601s.scala:20)\n\tat Problem.main(tmpvrvl601s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // The first few lines compute\
    \ the counts for each digit from 1 to 9.  We then sum up the counts for each digit.\n\
    \        // >>> sumCounts((5l).digits)\n        // (3, 3, 3, 3)\n        // >>>\
    \ sumCounts((78l).digits)\n        // (2, 3, 2, 3)\n        // >>> sumCounts((79l).digits)\n\
    \        // (3, 4, 3, 2)\n        // >>> sumCounts((789l).digits)\n        //\
    \ (3, 3, 3, 2)\n        // >>> sumCounts((78901l).digits)\n        // (3, 3, 3,\
    \ 3)\n        val sumCounts = 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0\n    \
    \    (0 until 9).foreach{d =>\n            // The remainder of n/10 is what we're\
    \ counting, or if the number is divisible by 11 or 13, we'll count the remainder.\n\
    \            val n = n.toInt\n            sumCounts(d) ++ if(n/11==0 || n/13==0)\
    \ 1L else 0L\n        }\n        sumCounts.reduce((a, b) => a + b)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpre0ocmnj.scala:27:28 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            sumCounts(d) ++ \e[33mif\e[0m(n/\e[31m11\e\
    [0m==\e[31m0\e[0m || n/\e[31m13\e[0m==\e[31m0\e[0m) \e[31m1L\e[0m \e[33melse\e\
    [0m \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                            ^^\e[0m\n\e\
    [31m   |\e[0m                            expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpre0ocmnj.scala:27:25\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            sumCounts(d)\
    \ ++ \e[33mif\e[0m(n/\e[31m11\e[0m==\e[31m0\e[0m || n/\e[31m13\e[0m==\e[31m0\e\
    [0m) \e[31m1L\e[0m \e[33melse\e[0m \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ++ is not a member of (d : Int)\e\
    [33m match \e[0m{\n\e[31m   |\e[0m  case (\e[31m0\e[0m : Int) => (((((((Int, Int),\
    \ Int), Int), Int), Int), Int), Int)\n\e[31m   |\e[0m  case scala.compiletime.ops.int.S[n1]\
    \ => \n\e[31m   |\e[0m    scala.Tuple.Elem[Int *: EmptyTuple.type, n1]\n\e[31m\
    \   |\e[0m}\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpre0ocmnj.scala:29:18\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        sumCounts.reduce((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reduce is not a member of ((((((((Int, Int), Int), Int),\
    \ Int), Int), Int), Int), Int)\n3 errors found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val res = mutable.ListBuffer[Long]()\n\
    \        val factors : Set[Long] = Set((13l, 11l))\n        val digitsRes = mutable.ListBuffer[(Long,Long)]()\n\
    \        val factorsRes = mutable.ListBuffer[Long]()\n        val digitsAsList:\
    \ Array[Long] = n.toString.toLongArray.filter(x => x % 11 == 0 || x % 13 == 0).sorted\n\
    \        for(i <- 0 to digitsAsList.length - 1) {\n            val current = digitsAsList(i)\n\
    \            if(factors.contains(current)) {\n                factorsRes += current\n\
    \            } else {\n                val next = current + factors(0)\n     \
    \           if(next < n) {\n                    factorsRes += next\n         \
    \       } else {\n                    res ++= factorsRes.toList\n            \
    \        factorsRes ++= digitsAsList.takeWhile(current => current < next).tail\n\
    \                }\n            }\n        }\n        res ++= factorsRes.toList\n\
    \        res.toList.count(x => x % 7 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0csm2m_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn0csm2m_.scala:13:38 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m : \e[35mSet\e\
    [0m[\e[35mLong\e[0m] = Set((\e[31m13l\e[0m, \e[31m11l\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    (Long, Long)\n\e[31m   |\e[0m   \
    \                                   Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn0csm2m_.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigitsRes\e[0m = mutable.ListBuffer[(\e\
    [35mLong\e[0m,\e[35mLong\e[0m)]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0csm2m_.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorsRes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn0csm2m_.scala:16:51 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mdigitsAsList\e[0m: \e[35mArray\e[0m[\e[35mLong\e\
    [0m] = n.toString.toLongArray.filter(\e[36mx\e[0m => x % \e[31m11\e[0m == \e[31m0\e\
    [0m || x % \e[31m13\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m      \
    \                                  ^^^^^^^"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map.empty[Int,\
    \ Int]\n        var count1 = mutable.Map.empty[Int, Int]\n        var count2 =\
    \ mutable.Map.empty[Int, Int]\n        var count3 = mutable.Map.empty[Int, Int]\n\
    \        var count4 = mutable.Map.empty[Int, Int]\n        var count5 = mutable.Map.empty[Int,\
    \ Int]\n        var count6 = mutable.Map.empty[Int, Int]\n        var count7 =\
    \ mutable.Map.empty[Int, Int]\n        val list = List.fill(n)(0)\n        for\
    \ (i <- 0 until n) {\n            list += i\n        }\n        for (i <- 0 until\
    \ list.size) {\n            if (i % 13 == 0) {\n                count7 = count7\
    \ + (i.toString + \"7\")\n            } else if (i % 11 == 0) {\n            \
    \    count1 = count1 + (i.toString + \"11\")\n            } else if (i % 5 ==\
    \ 0) {\n                count5 = count5 + (i.toString + \"5\")\n            }\
    \ else if (i % 3 == 0) {\n                count3 = count3 + (i.toString + \"3\"\
    )\n            } else if (i % 7 == 0) {\n                count2 = count2 + (i.toString\
    \ + \"7\")\n            } else if (i % 5 == 0) {\n                count4 = count4\
    \ + (i.toString + \"5\")\n            } else if (i % 3 == 0) {\n             \
    \   count6 = count6 + (i.toString + \"3\")\n            } else {\n           \
    \     count = count1 + (i.toString + \"11\")\n            }\n        }\n     \
    \   if (count2.isEmpty) {\n            count2 = count\n        }\n        if (count5.isEmpty)\
    \ {\n            count5 = count\n        }\n        if (count3.isEmpty) {\n  \
    \          count3 = count\n        }\n        if (count4.isEmpty) {\n        \
    \    count4 = count\n        }\n        if (count6.isEmpty) {\n            count6\
    \ = count\n        }\n        if (count7.isEmpty) {\n            count7 = count\n\
    \        }\n        if (count1.isEmpty) {\n            count1 = count\n      \
    \  }\n        if (count5.isEmpty) {\n            count5 = count\n        }\n \
    \       if (count3.isEmpty) {\n            count3 = count\n        }\n       \
    \ if (count4.isEmpty) {\n            count4 = count\n        }\n        if (count6.isEmpty)\
    \ {\n            count6 = count\n        }\n        if (count7.isEmpty) {\n  \
    \          count7 = count\n        }\n        if (count1.isEmpty) {\n        \
    \    count1 = count\n        }\n        if (count5.isEmpty) {\n            count5\
    \ = count\n        }\n        if (count3.isEmpty) {\n            count3 = count\n\
    \        }\n        if (count4.isEmpty) {\n            count4 = count\n      \
    \  }\n        if (count6.isEmpty) {\n            count6 = count\n        }\n \
    \       if (count7.isEmpty) {\n            count7 = count\n        }\n       \
    \ val list2 = list.map(\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8eet3d16.scala:97:29 ---------------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.map(\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eet3d16.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eet3d16.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mcount1\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eet3d16.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcount2\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eet3d16.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcount3\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eet3d16.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def isDivisibleBy11Or13(i : Long)\
    \ : Boolean = {\n            val j = i.toString.toInt\n            return j %\
    \ 11 == 0 || j % 13 == 0\n        }\n        var count = 0\n        if (n < 100l)\
    \ count += if (isDivisibleBy11Or13(n)) 1 else 0\n        val arr = (1 to n).toList\n\
    \        arr foreach { x =>\n            if (isDivisibleBy11Or13(x)) count +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgcvk2upx.scala:17:31 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (n < \e[31m100l\e[0m) count +=\
    \ \e[33mif\e[0m (isDivisibleBy11Or13(n)) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e\
    [0m                               expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgcvk2upx.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (n\
    \ < \e[31m100l\e[0m) count += \e[33mif\e[0m (isDivisibleBy11Or13(n)) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgcvk2upx.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = (\e[31m1\e[0m to n).toList\n\e[31m\e[31m   |\e[0m                      \
    \  ^\e[0m\n\e[31m   |\e[0m                        Found:    (n : Long)\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def digit(x : Long) : String =\
    \ {\n            val s = x.toString\n            s.substring(0, s.length - 1)\n\
    \        }\n        def isDivisibleBy11Or13(x : Long) : Boolean = {\n        \
    \    val d = digit(x)\n            if (d == \"7\") true else if (d == \"11\")\
    \ true else if (d == \"13\") true\n            else false\n        }\n       \
    \ def isDivisibleBy11Or13From(n1 : Long, n2 : Long) : Boolean = {\n          \
    \  val d1 = digit(n1)\n            val d2 = digit(n2)\n            if (d1 == \"\
    7\" && d2 == \"7\") true else if (d1 == \"7\" && d2 == \"11\" || d1 == \"7\" &&\
    \ d2 == \"13\") true else if (d1 == \"11\" && d2 == \"7\" || d1 == \"11\" && d2\
    \ == \"11\" || d1 == \"11\" && d2 == \"13\") true else if (d1 == \"13\" && d2\
    \ == \"7\" || d1 == \"13\" && d2 == \"11\" || d1 == \"13\" && d2 == \"13\") true\n\
    \            else false\n        }\n        def fizzBuzzHelper(n1 : Long, n2 :\
    \ Long) : Long = {\n            val d1 = digit(n1)\n            val d2 = digit(n2)\n\
    \            if (d1 == \"7\" && d2 == \"7\") 1 else if (d1 == \"7\" && d2 == \"\
    11\" || d1 == \"7\" && d2 == \"13\") 1 else if (d1 == \"11\" && d2 == \"7\" ||\
    \ d1 == \"11\" && d2 == \"11\" || d1 == \"11\" && d2 == \"13\") 1 else if (d1\
    \ == \"13\" && d2 == \"7\" || d1 == \"13\" && d2 == \"11\" || d1 == \"13\" &&\
    \ d2 == \"13\") 1 else 0\n        }\n        val n1 = n / 1000000000000l\n   \
    \     val n2 = n % 1000000000000l\n        if (n1 == 0 && n2 == 0) 0 else fizzBuzzHelper(n1,\
    \ n2)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1yz__pw.scala:38)\n\tat Problem.main(tmpy1yz__pw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val result = n.toString.filter{\
    \ x => x.equals(\"7\") }.size\n        if (n.toString.filter{ x => x.equals(\"\
    7\") }.size == 0) result else result + fizzBuzz(math.ceil(n/11.0).toLong)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_k0ca09a.scala:17)\n\tat Problem.main(tmp_k0ca09a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var x =\
    \ new mutable.HashMap[Int, Long]()\n        while(n > 0){\n            x = x.+(n%11\
    \ == 0 ? 7 : n%13 == 0 ? 7 : n%11 == 0 ? 7 : n%13 == 0 ? 7 : n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0\
    \ ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13\
    \ == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == 0 ? 7 :\
    \ (n%11 == 0 ? 7 : n%13 == 0 ? 7 : (n%11 == 0 ? 7 : n%13 == \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9h9fiw7o.scala:15:50 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x = x.+(n%\e[31m11\e[0m == \e[31m0\e[0m ?\
    \ \e[31m7\e[0m : \e[35mn%\e[31m13\e[0m \e[35m==\e[0m \e[31m0\e[0m \e[35m?\e[0m\
    \ \e[31m7\e[0m : n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m11\e[0m == \e[31m0\e\
    [0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e\
    [31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m :\
    \ n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e\
    [0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e\
    [31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m :\
    \ n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e\
    [0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e\
    [31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m :\
    \ n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e\
    [0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e\
    [31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m :\
    \ n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e[0m == \e[31m0\e\
    [0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : (n%\e[31m11\e\
    [0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e[31m0\e[0m ? \e[31m7\e\
    [0m : (n%\e[31m11\e[0m == \e[31m0\e[0m ? \e[31m7\e[0m : n%\e[31m13\e[0m == \e\
    [31m0\e[0"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val fzs = mutable.Set[Long]()\n\
    \        for (i <- 1 until n) {\n            if (i % 11 == 0 ||\n            \
    \    i % 13 == 0) {\n                fzs += i\n            }\n        }\n    \
    \    fzs.size\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplxb4hgkg.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfzs\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplxb4hgkg.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val result = mutable.MutableList[Long]()\n\
    \        val n1 = n % 11\n        val n2 = n % 13\n        if (n1 == 7 && n2 ==\
    \ 7)\n            result.add((n1))\n        else {\n            val n3 = n1 >>\
    \ 1\n            val n4 = n2 >> 1\n            if (n3 == 7 && n4 == 7)\n     \
    \           result.add((n3))\n            else\n                result.add((n3))\n\
    \                result.add((n4))\n        }\n        result.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26yz0d95.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val ns = n.toString.toInt\n  \
    \      if(ns < 10 || ns.toString.length == 0) (ns.toString.toInt + 1l)\n     \
    \   else if(ns.toString.toInt % 11 == 0) (ns.toString.toInt + 1l)\n        else\
    \ if(ns.toString.toInt % 13 == 0) (ns.toString.toInt + 1l)\n        else fizzBuzz(ns.toString.toInt\
    \ / 11)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzc_dbnwe.scala:19)\n\tat Problem.main(tmpzc_dbnwe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      var count = 0\n      var remainder\
    \ = n % 11\n      while (remainder == 0 || remainder == 13) {\n        count +=\
    \ 1\n        remainder = n % 11\n        n = n / 10\n      }\n      count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoe8d385h.scala:17:10 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val n\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      var n1 : Long = n % 11\n      if\
    \ (n1 != 0) {\n        n1 = 11\n      }\n      var n2 : Long = n % 13\n      if\
    \ (n2 != 0) {\n        n2 = 13\n      }\n      var n3 : Long = n / 11\n      if\
    \ (n3 != 0) {\n        n3 = 11\n      }\n      var n4 : Long = n / 13\n      if\
    \ (n4 != 0) {\n        n4 = 13\n      }\n      n1 + n2 + n3 + n4\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8uwtt1ky.scala:31)\n\tat Problem.main(tmp8uwtt1ky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var counter = n.toInt\n      \
    \  for(i <- 0 until 9){\n            val rem = n % 10\n            if(rem == 7){\n\
    \                counter -= 1\n            }\n            n = math.trunc(n / 10)\n\
    \        }\n        counter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjtu77cb.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = math.trunc(n / \e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ trunc is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var i = 0\n        var count =\
    \ 0\n        while (i < n) {\n            if (i.toString % 11 == 0 || i.toString\
    \ % 13 == 0) {\n                count += 1\n            }\n            i += 1\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dncu3z_.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i.toString % \e[31m11\e[0m\
    \ == \e[31m0\e[0m || i.toString % \e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mThe following import might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val x = math.ceil(n)\n       \
    \ val y = math.ceil(x/11)\n        val z = math.ceil(x/13)\n        if (y==0 ||\
    \ z==0) 0\n        else {\n            if (n % 11==0 && n % 13==0) z+1\n     \
    \       else y+1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzac3jwzs.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (n\
    \ % \e[31m11\e[0m==\e[31m0\e[0m && n % \e[31m13\e[0m==\e[31m0\e[0m) z+\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    Double\n\e[31m\
    \   |\e[0m                                        Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzac3jwzs.scala:18:17 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m y+\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    Double\n\e[31m   |\e[0m                 Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n % 11 == 0) 0\n        else\
    \ if (n % 13 == 0) 1\n        else fizzBuzz(n / 10) + (n % 10 == 0 ? 1 : 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_rtngakb.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m fizzBuzz(n / \e[31m10\e[0m) +\
    \ (n % \e[31m10\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Convert to a binary string\n\
    \        val bstr = scala.math.BigInt(n).toString(2).padTo(64, \"0\").toList\n\
    \        val v = new mutable.HashSet[Int]()\n        for (i <- 0 until bstr.length)\
    \ {\n            if (bstr(i) == \"1\" && v.contains(7)) {\n                v.add(0)\n\
    \            } else {\n                v.add(i)\n            }\n        }\n  \
    \      v.length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvhlflt9.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mv\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val fiz = (0l).quot(11l)\n   \
    \     val buz = (0l).quot(13l)\n        (fiz * buz).filter(_%11 == 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1i3g02aw.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfiz\e[0m = (\e[31m0l\e[0m).quot(\e\
    [31m11l\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue quot is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1i3g02aw.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbuz\e[0m = (\e[31m0l\e[0m).quot(\e[31m13l\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue quot is not a member of Long,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (d\
    \ <- 7 until n.toInt) {\n            if (n % 11 == 0 || n % 13 == 0) {\n     \
    \           count += 1\n            }\n            n /= 10\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn1o2dddb.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map.empty[Long,\
    \ Long]\n        for (x <- 0 until n){\n            if (x % 11 == 0 || x % 13\
    \ == 0){\n                if (count.contains(x))\n                    count(x)\
    \ = count(x) + 1\n                else\n                    count(x) = 1\n   \
    \         }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7h8wm_6d.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7h8wm_6d.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val map = mutable.HashMap.empty[String,\
    \ Long]\n        for(x <- 0 until n) {\n            val str = x.toString\n   \
    \         if(!map.contains(str) && str.indexOf(\"7\") >= 0){\n               \
    \ map += str -> 1\n            }\n        }\n        map.values.sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrl7gd9n.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrl7gd9n.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(x <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var cnt : Long = 0\n        for(i\
    \ <- 1 to n if isDivisibleBy11Or13(i)) {\n            if(i % 11 == 0) cnt = (i\
    \ + 1) + cnt\n            if(i % 13 == 0) cnt = (i + 1) + cnt\n        }\n   \
    \     cnt\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp03wm4zbv.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n \e[33mif\e[0m isDivisibleBy11Or13(i)) {\n\e[31m\e[31m   |\e[0m\
    \                      ^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03wm4zbv.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n \e[33mif\e\
    [0m isDivisibleBy11Or13(i)) {\n\e[31m\e[31m   |\e[0m                         \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ isDivisibleBy11Or13\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counter = mutable.HashMap[Int,\
    \ Int]()\n        var count = 0\n        for (i <- 1 to n) {\n            val\
    \ isDivisibleBy11Or13 = i % 11 == 0 || i % 13 == 0\n            if (isDivisibleBy11Or13\
    \ && counter.getOrElse(i, 0) == 0) {\n                count += 1\n           \
    \     counter.updated(i, 1)\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_niosim3.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_niosim3.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def toNines(n : Long): List[Long]\
    \ = {\n            val ns = List(n/11, n/13)\n            ns.reverse.takeWhile(_\
    \ < n).reverse\n        }\n        def count(n : Long): Long = {\n           \
    \ if (n % 11 == 0 || n % 13 == 0) 1\n            else if (toNines(n).contains(7))\
    \ 1\n            else 0\n        }\n        if (n < 0) 0\n        else count(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqluelgi0.scala:26)\n\tat Problem.main(tmpqluelgi0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val s = n\n        var count =\
    \ 0\n        for(i <- 0 until 100) {\n            val d = s(i).toInt\n       \
    \     if (d % 11 == 0) count += d\n            if (d % 13 == 0) count += d\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp5hyy_1s7.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = s(i).toInt\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       \e[33mvalue\e[0m \e[35ms\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def isFizz(n: Long, digit: Int)\
    \ : Boolean = if (n%digit == 0) true else if (n%digit == 7) true else false\n\
    \        val div11: Long = (11l).divide(n)\n        val div13: Long = (13l).divide(n)\n\
    \        val fizz = div11.map(_%10)\n        val buzz = div13.map(_%10)\n    \
    \    val result = fizz.zip(buzz).filter(_._1).length\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1wc2fw2.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdiv11\e[0m: \e[35mLong\e\
    [0m = (\e[31m11l\e[0m).divide(n)\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value divide\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1wc2fw2.scala:14:32\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mdiv13\e[0m: \e[35mLong\e[0m = (\e[31m13l\e[0m).divide(n)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            value divide is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmps1wc2fw2.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mfizz\e[0m = div11.map(_%\e[31m10\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           value map is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmps1wc2fw2.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mbuzz\e[0m = div13.map(_%\e[31m10\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           value map is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ for (i <- 0 to n) {\n            val remainder = i % 11\n            val fizz\
    \ = remainder % 7\n            val buzz = remainder % 5\n            val div =\
    \ i / 11\n\n            if (fizz == 0 || buzz == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr_ueqych.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def div(i: Long, j: Long) : Long\
    \ = {\n            if (i==0 || j==0)\n                return 0\n            else\n\
    \                if (i % 11 == 0 && j % 13 == 0)\n                    2\n    \
    \            else if (i % 11 == 0)\n                    1\n                else\
    \ if (j % 13 == 0)\n                    1\n                else\n            \
    \        0\n        }\n        val count = mutable.ListBuffer.empty[Long]\n  \
    \      val divs = n / 11\n        val remainder = n % 11\n        for (i = 1 until\
    \ divs) {\n            count += div(remainder, i) * i\n            remainder =\
    \ div(remainder, i + 1)\n        }\n        count.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvcu9m8pv.scala:28:15 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until divs)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvcu9m8pv.scala:28:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m until divs) {\n\e[31m\e[31m   |\e[0m                     \
    \          ^\e[0m\n\e[31m   |\e[0m                               '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvcu9m8pv.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvcu9m8pv.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvcu9m8pv.scala:31:9 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  im"
  stdout: ''
  timestamp: 1660010359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        if (n < 100 || n % 11 == 0 ||\
    \ n % 13 == 0) n else 0\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6q_u600w.scala:15)\n\tat Problem.main(tmp6q_u600w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val nums = mutable.Queue[Long](1l)\n\
    \        for (i <- 0 until n / 11)\n            if (nums.contains(i / 11))\n \
    \               nums.dequeue()\n            else nums.enqueue(i / 11)\n      \
    \  nums.count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpreu82h9f.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.Queue[\e\
    [35mLong\e[0m](\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpreu82h9f.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n / \e\
    [31m11\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Long\n\e[31m   |\e[0m          \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def isDivisibleBy11(n: Long) :\
    \ Boolean = n % 11 == 0\n        def isDivisibleBy13(n: Long) : Boolean = n %\
    \ 13 == 0\n        def countFizz(n: Long) : Long = if (isDivisibleBy11(n)) 1 else\
    \ 0\n        def countBuzz(n: Long) : Long = if (isDivisibleBy13(n)) 1 else 0\n\
    \        def countFizzBuzz(n: Long) : Long = countFizz(n) + countBuzz(n)\n\n \
    \       val s = n.toString.tail.dropWhile(x => x == 7).mkString(\"\").reverse\n\
    \        val l = s.length\n        var count = 0\n        for (i <- 0 until l)\
    \ {\n            if (s(i) == \"7\") count = countFizzBuzz(n.toInt + i)\n     \
    \       else count = countFizzBuzz(n.toInt + i)\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppwwkload.scala:22:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m\"7\"\e[0m)\
    \ count = countFizzBuzz(n.toInt + i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppwwkload.scala:22:50\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (s(i)\
    \ == \e[31m\"7\"\e[0m) count = countFizzBuzz(n.toInt + i)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    Long\n\e[31m   |\e[0m\
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppwwkload.scala:23:38 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m count = countFizzBuzz(n.toInt\
    \ + i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n      var n1 : Long = 0\n      var n2\
    \ : Long = 1\n      var n3 : Long = 2\n      var n4 : Long = 3\n      var n5 :\
    \ Long = 4\n      var n6 : Long = 5\n      var n7 : Long = 6\n      var n8 : Long\
    \ = 7\n      var n9 : Long = 8\n      var n10 : Long = 9\n      var n11 : Long\
    \ = 10\n      var n12 : Long = 11\n      var n13 : Long = 12\n      var n14 :\
    \ Long = 13\n      var n15 : Long = 14\n      var n16 : Long = 15\n      var n17\
    \ : Long = 16\n      var n18 : Long = 17\n      var n19 : Long = 18\n      var\
    \ n20 : Long = 19\n      var n22 : Long = 20\n      var n23 : Long = 21\n    \
    \  var n24 : Long = 22\n      var n25 : Long = 23\n      var n26 : Long = 24\n\
    \      var n27 : Long = 25\n      var n28 : Long = 26\n      var n29 : Long =\
    \ 27\n      var n30 : Long = 28\n      var n31 : Long = 29\n      var n32 : Long\
    \ = 30\n      var n33 : Long = 31\n      var n34 : Long = 32\n      var n35 :\
    \ Long = 33\n      var n36 : Long = 34\n      var n37 : Long = 35\n      var n38\
    \ : Long = 36\n      var n39 : Long = 37\n      var n40 : Long = 38\n      var\
    \ n41 : Long = 39\n      var n42 : Long = 40\n      var n43 : Long = 41\n    \
    \  var n44 : Long = 42\n      var n45 : Long = 43\n      var n46 : Long = 44\n\
    \      var n47 : Long = 45\n      var n48 : Long = 46\n      var n49 : Long =\
    \ 47\n      var n50 : Long = 48\n      var n51 : Long = 49\n      var n52 : Long\
    \ = 50\n      var n53 : Long = 51\n      var n54 : Long = 52\n      var n55 :\
    \ Long = 53\n      var n56 : Long = 54\n      var n57 : Long = 55\n      var n58\
    \ : Long = 56\n      var n59 : Long = 57\n      var n60 : Long = 58\n      var\
    \ n61 : Long = 59\n      var n62 : Long = 60\n      var n63 : Long = 61\n    \
    \  var n64 : Long = 62\n      var n65 : Long = 63\n      var n66 : Long = 64\n\
    \      var n67 : Long = 65\n      var n68\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3pnpg00e.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3pnpg00e.scala:79:5 ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var last\
    \ = 0\n        var x = 0\n        for(i <- 0 until n){\n            val y = math.mod(i,11)\n\
    \            val z = math.mod(i,13)\n            if (y == 0 && z == 0){\n    \
    \            count+=1\n            }\n            if (y == 0 && z == 1){\n   \
    \             count+=1\n            }\n            if (y == 0 && z == 2){\n  \
    \              count+=1\n            }\n            if (y == 1 && z == 0){\n \
    \               count+=1\n            }\n            if (y == 1 && z == 1){\n\
    \                count+=1\n            }\n            if (y == 1 && z == 2){\n\
    \                count+=1\n            }\n            if (y == 2 && z == 0){\n\
    \                count+=1\n            }\n            if (y == 2 && z == 1){\n\
    \                count+=1\n            }\n            if (y == 2 && z == 2){\n\
    \                count+=1\n            }\n            last = i\n        }\n  \
    \      last\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hsy3h4v.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7hsy3h4v.scala:16:25 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = math.mod(i,\e[31m11\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value mod is not a member of math\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7hsy3h4v.scala:17:25 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mz\e[0m = math.mod(i,\e[31m13\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value mod is not a member of math\n3 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var result : Long = 0\n      \
    \  for (i <- n until (n + 1l)) {\n            if (i % 11 == 0) result += 3\n \
    \           else if (i % 13 == 0) result += 2\n            else result += i\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprbshvglt.scala:21)\n\tat Problem.main(tmprbshvglt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <-\
    \ 1 to n)\n            if(i % 11 == 0 || i % 13 == 0) count = count + 1\n    \
    \    count * 7\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp966lna1r.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m  \
    \ |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m          \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val counter = (n to 0 by -1).foldLeft(0)((acc,\
    \ i) => {\n            if ((i % 11 == 0) || (i % 13 == 0))\n                acc\
    \ + 1 else 0\n        })\n        if (counter == 0) 0\n        else counter -\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqphvox5o.scala:21)\n\tat Problem.main(tmpqphvox5o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val m = n % 11\n        if (m\
    \ == 0) 0\n        else 1 + fizzBuzz(n / 11)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvt1h08pp.scala:17)\n\tat Problem.main(tmpvt1h08pp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        (0 to n).count { x =>\n      \
    \      val b = x % 11\n            val n = x % 13\n            val s = b & n\n\
    \            b + s\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm73wx9ri.scala:12:14\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        (\e[31m0\e[0m to n).count\
    \ { \e[36mx\e[0m =>\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m\
    \              Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm73wx9ri.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            b + s\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Int\n\e\
    [31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i\
    \ <- 0 until n) {\n            if (i.toString.toInt == 7) {\n                count\
    \ += 1\n            }\n            if (i % 11 == 0 || i % 13 == 0) {\n       \
    \         count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5xc4l0z.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        // Set up the collection of integers\n\
    \        var myList : collection.mutable.Set[Long] = collection.mutable.Set[Long]()\n\
    \n        // Create a list of all the possible combinations of divisibile by 11\
    \ or 13\n        (0 to n).filter(_ % 11 == 0 || _ % 13 == 0).foreach{ myList +=\
    \ _ }\n\n        // Count the number of times the digit 7 appears\n        myList.count(_\
    \ == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6bxfczhj.scala:16:14\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (\e[31m0\e[0m to n).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m || _ % \e[31m13\e[0m == \e[31m0\e[0m).foreach{\
    \ myList += _ }\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m  \
    \            Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6bxfczhj.scala:16:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (\e[31m0\e[0m\
    \ to n).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m || _ % \e[31m13\e[0m == \e[31m0\e\
    [0m).foreach{ myList += _ }\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var sum = 0\n        while(n <\
    \ 100l){\n            if(isDivisibleBy11Or13(n) && isDivisibleBy11Or13(n % 11))\n\
    \                sum += 1 \n            if(isDivisibleBy11Or13(n) && isDivisibleBy11Or13(n\
    \ % 13))\n                sum -= 1 \n            n += 1\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn8sl9kz.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(isDivisibleBy11Or13(n) && isDivisibleBy11Or13(n\
    \ % \e[31m11\e[0m))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: isDivisibleBy11Or13\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn8sl9kz.scala:16:15 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(isDivisibleBy11Or13(n) && isDivisibleBy11Or13(n\
    \ % \e[31m13\e[0m))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: isDivisibleBy11Or13\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn8sl9kz.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n       val n = n.toInt\n       val list\
    \ = List(1l,2l,3l,4l,5l,6l,7l,8l,9l,10l,11l,12l,13l,14l,15l,16l,17l,18l,19l,20l,21l,22l,23l,24l,25l,26l,27l,28l,29l,30l,31l,32l,33l,34l,35l,36l,37l,38l,39l,40l,41l,42l,43l,44l,45l,46l,47l,48l,49l)\n\
    \       val digits = List('0','1','2','3','4','5','6','7','8','9')\n       for(i\
    \ <- 0 until list.length) {\n           if(i % 11 == 0 && i % 13 == 0) \n    \
    \          (n - list(i)).toLong\n           else if(list(i) % 11 == 0) \n    \
    \          (n - list(i)).toLong + 1\n           else \n              (n - list(i)).toLong\n\
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqvbx6dfe.scala:12:15 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m       \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               Recursive \e\
    [33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqvbx6dfe.scala:15:7 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m       \e[33mfor\e[0m(i <- \e[31m0\e[0m until list.length)\
    \ {\n\e[31m\e[31m   |\e[0m       ^\e[0m\n\e[31m   |\e[0m       Found:    Unit\n\
    \e[31m   |\e[0m       Required: Long\n\e[31m16 |\e[0m           \e[33mif\e[0m(i\
    \ % \e[31m11\e[0m == \e[31m0\e[0m && i % \e[31m13\e[0m == \e[31m0\e[0m) \n\e[31m17\
    \ |\e[0m              (n - list(i)).toLong\n\e[31m18 |\e[0m           \e[33melse\e\
    [0m \e[33mif\e[0m(list(i) % \e[31m11\e[0m == \e[31m0\e[0m) \n\e[31m19 |\e[0m \
    \             (n - list(i)).toLong + \e[31m1\e[0m\n\e[31m20 |\e[0m           \e\
    [33melse\e[0m \n\e[31m21 |\e[0m              (n - list(i)).toLong\n\e[31m22 |\e\
    [0m       }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        val buzz = Map(0 -> \"FizzBuzz\"\
    \ , 1 -> \"Fizz\" , 2 -> \"Buzz\" , 3 -> \"Fizz\" , 4 -> \"Buzz\" , 5 -> \"Fizz\"\
    \ , 6 -> \"Buzz\" , 7 -> \"FizzBuzz\")\n        val result = mutable.Buffer.empty[String]\n\
    \        for((i : Int) <- 1 to n) {\n            result += buzz.getOrElse(i, \"\
    \")\n        }\n        (result.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5scmkxy_.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5scmkxy_.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m((i : \e[35mInt\e[0m) <- \e[31m1\e\
    [0m to n) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (n : Long)\n\e[31m   |\e[0m\
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        def fiz(n: Long, m: Long, count1:\
    \ Long): Long = {\n            if (n % 11 == 0 || n % 13 == 0) m\n           \
    \ else fiz(n * 2, m + 1, count1 + 1)\n        }\n        if (n < 0) 0\n      \
    \  else fiz(n, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqpw2lrtr.scala:20)\n\tat Problem.main(tmpqpw2lrtr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <-\
    \ n until Math.max(n, 10)) {\n            if((i mod 11) == 0) {\n            \
    \    count += 1\n            }\n            else if((i mod 13) == 0) {\n     \
    \           count += 1\n            }\n            if(count == 3) {\n        \
    \        println(i)\n                count = 0\n            }\n        }\n   \
    \     return count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd94niozf.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m((i mod \e[31m11\e[0m) == \e\
    [31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mod is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd94niozf.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m((i mod \e[31m13\e\
    [0m) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n\
    \    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n\
    \    def fizzBuzz(n : Long) : Long = {\n        var count : Long = 0\n       \
    \ var is11 : Boolean = false\n        var is13 : Boolean = false\n        var\
    \ remainder : Long = 0\n        while(n > remainder) {\n            val nextIs13\
    \ : Boolean = (n % 13 == 0)\n            val nextIs11 : Boolean = (n % 11 == 0)\n\
    \            val nextRemainder : Long = n / 10\n            if(nextRemainder <\
    \ 11) {\n                count = nextRemainder + count\n            } else if(nextRemainder\
    \ < 13) {\n                count = 11 + count\n            } else if(nextRemainder\
    \ == 13) {\n                if(nextIs11) {\n                    count = 11 + count\n\
    \                } else {\n                    count = count + 1\n           \
    \     }\n            } else if(nextRemainder == 11) {\n                if(nextIs13)\
    \ {\n                    count = 11 + count\n                } else {\n      \
    \              count = count + 1\n                }\n            } else if(nextRemainder\
    \ > 13) {\n                count = 11 + count\n            } else {\n        \
    \        count = count + 1\n            }\n            remainder = nextRemainder\n\
    \            n = n - 10\n        }\n        if(n > 0) {\n            count = count\
    \ + 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpt2a7ywff.scala:42:14 -----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            n = n - \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010364
