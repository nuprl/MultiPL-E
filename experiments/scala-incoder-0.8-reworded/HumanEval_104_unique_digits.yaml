name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        x.distinct\n        .filter(x => x.toString.forall(_.isDigit))\n\
    \        .map(x => x.toLong)", "        val l = new mutable.ListBuffer[Long]()\n\
    \        var i = -1\n        for (i <- 0 until x.size) {\n            if (i %\
    \ 2 == 0) {\n                l.append(x(i))\n            }\n        }\n      \
    \  l.toList", "        var res = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        x.foreach(elem => {\n            if (elem % 2 == 0) {\n             \
    \   res += elem\n            }\n        })\n        res.sorted", "        val\
    \ map = new mutable.LinkedHashMap[Long, Int]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.length) {\n            map.put(x(i).toLong, map.getOrElse(x(i).toLong,\
    \ 0) + 1l)\n        }\n        val keys = map.keySet\n        val keySet = keys.toSet\n\
    \        for (i <- 0 until keySet.length) {\n            if (map(i).toLong % 2\
    \ == 0) {\n                result.add(x(keySet(i)))\n            }\n        }\n\
    \        result.toList", "        val l1 = x.filter(y => y.toString.charAt(0).toInt\
    \ == 0)\n        val l2 = x.filter(y => y.toString.charAt(0).toInt % 2 == 0)\n\
    \        val l3 = x.filter(y => y.toString.charAt(0).toInt % 2 == 1)\n\n     \
    \   val list = new scala.collection.mutable.LinkedList[Long]()\n        list.add(l1.last)\n\
    \        list.add(l2.last)\n        list.add(l3.last)\n\n        list.distinct",
  "        var result : List[Long] = Nil\n        for(i<-x.iterator)\n        {\n\
    \            val str = i.toString\n            val nDigit = str.length\n     \
    \       if(nDigit>2)\n            {\n                val evenDigit = str.take(nDigit/2).filter(_\
    \ % 2 == 0)\n                if (evenDigit.isEmpty) result += i\n            }\n\
    \        }\n        val resSortedList = result.sortWith((x,y) => x.compare(y))\n\
    \        return resSortedList", "        var i = 0\n        var xs : List[Long]\
    \ = List()\n        var isEven = 0\n        for(y <- x) {\n            i += 1\n\
    \            if(y % 2 == 0) {\n                isEven = 1\n            } else\
    \ {\n                isEven = 0\n            }\n            if(isEven == 1) {\n\
    \                xs = xs :+ y\n            }\n        }\n        xs.sort()\n \
    \       return xs", "        // Use a mutable HashSet to keep track of all the\
    \ digits and return the\n        // sorted list.\n        var ret: List[Long]\
    \ = Nil\n        var m: scala.collection.mutable.HashSet[Long] = scala.collection.mutable.HashSet.empty\n\
    \        for(i <- 0 until x.size) {\n            // For each element, if the number\
    \ is even, then add it into the HashSet.\n            if(i % 2 == 0) {\n     \
    \           m += x(i)\n            }\n        }\n        // Traverse the HashSet\
    \ and remove all the odd digits.\n        for(i <- m.iterator) {\n           \
    \ if(i.nonEmpty && i.last % 2 == 1) {\n                ret += i\n            \
    \    m.remove(i)\n            }\n        }\n        ret", "        def getDigit(x:\
    \ Long, acc: List[Long]) : List[Long] = {\n            if (x % 2 != 0) acc\n \
    \           else getDigit(x / 10, (acc :+ x).toList)\n        }\n\n        val\
    \ digits = x.map(_ % 10)\n        var list = x.toList\n        for (i <- 0 until\
    \ digits.length - 1) list += digits(i)\n        if (list.forall(x => x % 2 ==\
    \ 0)) list.sortBy(x => x)\n        else list", "        val evens = x.filter(x\
    \ => x.toString.toInt%2==0)\n        var evensSet = evens.toSet\n        var evensList\
    \ = evens.toList\n        var evensList_Set = evensSet.toList\n        var odds\
    \ = x.filter(_ => x.toString.toInt%2!=0)\n        odds = odds.map(x => x.toString.toInt).toList\n\
    \        odds = odds.filter(_ => evensList.indexOf(_)==-1)\n        if(evensList_Set.containsAll(evensSet))\n\
    \            odds\n        else\n            odds", "        def helper(xs: List[Long],\
    \ acc : List[Long], d : Long) : List[Long] = {\n            if (xs.isEmpty) acc\n\
    \            else {\n                if (xs.tail.forall(_.toString.toInt%d ==\
    \ 0)) {\n                    helper(xs.tail, x :: acc, d)\n                }\n\
    \                else {\n                    helper(xs.tail, acc, d)\n       \
    \         }\n            }\n        }\n        helper(x, Nil, x.head.toString.toInt)",
  "        // Your code goes here\n        val even = x.filter(v => v % 2 == 0).sorted\n\
    \        val odd = x.filter(v => v % 2 == 1).sorted\n        val res = even ++\
    \ odd\n        val newRes = res.toSet\n        return newRes.toList.sorted", " \
    \       var uniques = scala.collection.mutable.HashSet[Long]()\n        var ret\
    \ = []\n        for(y <- x) {\n            if(uniques.contains(y.toInt)) {\n \
    \               continue\n            } else {\n                uniques += y.toInt\n\
    \                ret += y\n            }\n        }\n        uniques.toList",
  "        var xs = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            if(xs(x.toString.toLong(i))) {\n                continue;\n \
    \           }\n            val s = x.toString.toLong(i).toString\n           \
    \ val ss = s.filter(_ == '0')\n            if(ss.size == 1) {\n              \
    \  xs += x.toString.toLong(i)\n            }\n        }\n        xs.toList", " \
    \       var ud = x\n        var result = List()\n        while (ud.nonEmpty) {\n\
    \            val head = ud.head\n            val tail = ud.tail\n            if\
    \ (head % 2 == 0) {\n                // If head is even digit then append it to\
    \ result\n                result ::= head\n                ud.remove(head)\n \
    \           }\n            // Remove all tail elements that haven't even digit\n\
    \            ud.filter(x => x % 2 != 0).foreach(x => result ::= x)\n        }\n\
    \        result", "        val map = mutable.HashMap.empty[Long, Long]\n     \
    \   for (i <- x)\n            map += i.toLong -> (i / 10l.toLong).toLong\n\n \
    \       var i = x\n        while(i.nonEmpty) {\n            if (map.contains(i.toLong\
    \ % 10l.toLong))\n                map.remove(i % 10l.toLong)\n            else\n\
    \                i += i / 10l.toLong\n        }\n        i ++ map.keys.toList.sortBy(_.toLong)",
  "      x.foldLeft(List[Long]()){\n        case (acc, x) => acc.filterNot(_.toString.takeWhile(_\
    \ != '0').forall(_.toInt % 2 == 0))\n      }", "        val unique = scala.collection.mutable.Set.empty[Long]\n\
    \        for (y <- x) {\n            val num = y % 10l\n            if (unique.contains(num)\
    \ == false) unique += num\n        }\n        unique.toList", "        val res\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach {\n            x => {\n\
    \                if (x.toString.indexOf('.') != -1) {\n                    res.add(x)\n\
    \                }\n            }\n        }\n        res.sortWith(_ < _)", " \
    \       // your code goes here\n        val list = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        var result: List[Long] = Nil\n        for(res <- list; var\
    \ i <- List(0, 1).reverse.zip(res.toString.toLong).filter(x => x._2 == x._1))\
    \ {\n            if(!list.contains(i))\n                result += i\n        }\n\
    \        result.sorted", "        var ret: List[Long] = Nil\n        val x = x.toSet\n\
    \        var tmp: List[Long] = Nil\n        for (x <- x) {\n            if (x\
    \ % 2 == 0) {\n                if (!tmp.contains(x)) {\n                    tmp\
    \ += x\n                    ret += x\n                }\n            }\n     \
    \   }\n        ret", "        val ret = new mutable.HashSet[Long]\n        for\
    \ (i <- x) {\n            if (ret.contains(i / 10.l)) {\n                ret.remove(i\
    \ / 10.l)\n            }\n            else ret.add(i / 10.l)\n        }\n    \
    \    val newRet = ret.iterator.map(x => x.toLong).toList\n        newRet.sortWith((x,\
    \ y) => x < y) ", "        val m = x.head\n        var result = new mutable.ListBuffer[Long]\n\
    \        var flag = false\n        for(i <- x -1) {\n            if(i.mod(m).isZero)\n\
    \                continue\n            result += i\n            flag = true\n\
    \        }\n        if(flag)\n            result\n        else\n            List()",
  "        // write your code here\n        val result = mutable.LinkedHashSet[Long]()\n\
    \        var i = 0\n        while (i < x.length) {\n            result += x(i)\n\
    \            i += 1\n        }\n        x.toList.sortWith(_.toString.reverse.charAt(0).asDigit().compare(_.toString.reverse.charAt(0).asDigit())\
    \ < 0).map {\n            y => result.remove(y)\n        }", "        val indexSet\
    \ = mutable.HashSet[Long]()\n        val indexSet2 = mutable.HashSet[Long]()\n\
    \        val indexSet3 = mutable.HashSet[Long]()\n        val indexSet4 = mutable.HashSet[Long]()\n\
    \        val indexSet5 = mutable.HashSet[Long]()\n        val indexSet6 = mutable.HashSet[Long]()\n\
    \        val indexSet7 = mutable.HashSet[Long]()\n        val indexSet8 = mutable.HashSet[Long]()\n\
    \        val indexSet9 = mutable.HashSet[Long]()\n        val indexSet10 = mutable.HashSet[Long]()\n\
    \n        val xSet = mutable.HashSet[Long]()\n        for (i <- x.view.zipWithIndex.filter(_._1\
    \ > 0)) {\n            if (i._1 % 2 == 0) {\n                indexSet.add(i._1)\n\
    \                xSet.add(i._1)\n            } else {\n                if (xSet.contains(i._1))\
    \ {\n                    indexSet2.add(i._1)\n                } else {\n     \
    \               if (indexSet.contains(i._1)) {\n                        indexSet3.add(i._1)\n\
    \                    } else {\n                        if (indexSet2.contains(i._1))\
    \ {\n                            indexSet4.add(i._1)\n                       \
    \ } else {\n                            if (indexSet3.contains(i._1)) {\n    \
    \                            indexSet5.add(i._1)\n                           \
    \ } else {\n                                if (indexSet4.contains(i._1)) {\n\
    \                                    indexSet6.add(i._1)\n                   \
    \             } else {\n                                    if (indexSet5.contains(i._1))\
    \ {\n                                        indexSet7.add(i._1)\n           \
    \                         } else {\n                                        if\
    \ (indexSet6.contains(i._1)) {\n                                            indexSet8.add(i._1)\n\
    \                                        } else {\n                          \
    \                  if (indexSet7.contains(i._1)) {\n                         \
    \                       indexSet9.add(i._1)\n                                \
    \            } else {\n                                                if (indexSet8.contains(i._1))\
    \ {\n                                                    indexSet10.add(i._1)\n\
    \                                                } else {\n                  \
    \                                  println(\"Index set is not sorted.\")\n   \
    \                                             }\n                            \
    \                }\n                                        }\n              \
    \                      }\n                                }\n                \
    \            }\n                        }\n                    }\n           \
    \     }\n            }\n        }\n        val result = indexSet.toList.sortBy(x\
    \ => x)\n        if (result.size == 1) {\n            return List(result.toSet)\n\
    \        } else {\n            return result\n        }", "        val tempList\
    \ = mutable.ListBuffer[Long]()\n        val even = x.filter(e => e%2 == 0)\n \
    \       even.foreach(e => tempList.append(e))\n        tempList.sorted", "   \
    \     val y = x.toSet\n        y.filter(_ % 2 == 0).toList", "        val rec\
    \ = new mutable.ArrayBuilder[(Long, Int)]()\n        for (n <- x) {\n        \
    \    val str = n.toString.reverse\n            val digit = str.lastDigit\n   \
    \         if (digit % 2 == 0) {\n                val idx = math.max((str.length()\
    \ - 1), 0)\n                rec += ((n, idx))\n            }\n        }\n    \
    \    rec.toList.sortWith(_._1 < _._1).map(_._1).reverse", "        val nums =\
    \ x.foldLeft(List[Long]()) {\n            (x, y) => if (y % 2 == 0) x :+ y\n \
    \           else x :+ y\n        }\n        nums.toList", "        val result\
    \ = mutable.Stack[Long]()\n        x.foreach(x => { \n            if(x.toString.toCharArray.forall(c\
    \ => c.toDigit % 2 == 0))\n                result.push(x)\n        })\n      \
    \  result.toList", "        val xs = x.toList.map(_.toString.toLong)\n       \
    \ val evenDigits = xs.filter(x => x % 2 == 0)\n        val uniqueEvenDigits =\
    \ evenDigits.distinct\n        uniqueEvenDigits.toList", "        var result :\
    \ mutable.Set[Long] = mutable.Set[Long]()\n        var i = 0\n        while (i\
    \ < x.size) {\n            var sum = 0\n            var found = false\n      \
    \      var j = 0\n            while (j < x.size) {\n                if (x(i) %\
    \ 2 == 0) {\n                    sum += x(i)\n                    found = true\n\
    \                }\n                j += 1\n            }\n            if (sum\
    \ != 0) {\n                result += sum\n                i += 1\n           \
    \ }\n        }\n        result.toList", "        // Write your code here\n   \
    \     val result : List[Long] = new Array[Long](x.length)\n        val map = new\
    \ HashMap[Long, Long]\n        var cnt = 0\n        for (i <- x ) {\n        \
    \    if (map.contains(i)) {\n                cnt = cnt + 1\n            } else\
    \ {\n                cnt = 1\n            }\n            map.put(i, cnt)\n   \
    \     }\n        cnt = 1\n        var cnt2 = 0\n        for (i <- x ) {\n    \
    \        if (map.contains(i)) {\n                cnt2 = cnt2 + 1\n           \
    \ } else {\n                cnt2 = 1\n            }\n            if (cnt <= cnt2)\
    \ {\n                cnt += 1\n                result.add(i)\n            }\n\
    \        }\n        result", "        var even = 0\n        var ans = List.empty[Long]\n\
    \        for (elem <- x) {\n            if (elem % 2 == 0) {\n               \
    \ even += elem\n            } else {\n                ans += even\n          \
    \      even = 0\n            }\n        }\n        ans += even\n        ans",
  "        x match {\n            case head :: tail => tail.filter(_ % 2 == 0).map(x\
    \ => x % 10 :: head).reduce(_::_)\n            case Nil => Nil\n        }", " \
    \       val n = new mutable.Queue[Long]\n        val even = new mutable.Queue[Long]\n\
    \        var index = 0\n        for (i <- x zip even) {\n            if (i._2.isEven)\
    \ {\n                n.enqueue(i._1)\n            } else {\n                i.index\
    \ match {\n                    case 0 => {\n                        n.enqueue(i._1)\n\
    \                    }\n                    case 1 => {\n                    \
    \    n.enqueue(i._1)\n                        even.enqueue(i._1)\n           \
    \         }\n                    else => {\n                        even.enqueue(i._1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (n.nonEmpty) {\n            n.enqueue(x.last)\n        }\n        n.toList",
  "        val digits = x.map(x => math.ceil(x / 10.0))\n        val evens = digits\
    \ filter { _ % 2 == 0 }\n        val unique = evens.distinct\n        unique.toList",
  "        // Write your code here\n        var d = new mutable.HashMap[Long, Long]()\n\
    \        x.foreach(x => {\n            val y = x.toInt\n            if(d.contains(y))\n\
    \            {\n                d(y) = 1\n            }\n            else\n  \
    \          {\n                d(y) = x\n            }\n        })\n        var\
    \ y = List.empty[Long]\n        var i = 0\n        var j = 0\n        for(x <-\
    \ d.values)\n        {\n            if(x != 0)\n            {\n              \
    \  if(i < j)\n                    y(i) = x\n                i = i + 1\n      \
    \      }\n        }\n        for(x <- d.keySet)\n        {\n            if(x ==\
    \ 0)\n            {\n                y(x) = x\n            }\n            else\n\
    \            {\n                if((x == 1) & (d(x) == 0))\n                 \
    \   y(x) = 1\n            }\n        }\n        y", "        var res: List[Long]\
    \ = Nil\n        for (x <- x) \n            if ((x % 2l.toLong).isEmpty) \n  \
    \              res = x :: res\n            else\n                break\n     \
    \   res", "        val s = xs.toSet\n        x.filter( (x) => s diff Array(xs.indexOf(x))\
    \ ).toList", "        var result: List[Long] = Nil\n        var lastEven: List[Long]\
    \ = Nil\n        for( e <- x) yield {\n            if(e % 2 == 0) {\n        \
    \        result = e :: result\n            } else {\n                lastEven\
    \ = e :: lastEven\n            }\n        }\n        result.sortWith( (x, y) =>\
    \ x.toLong > y.toLong )\n        lastEven.sortWith( (x, y) => x.toLong > y.toLong\
    \ )", "        val m = x.map(x => x.toString.toInt).filter(x => x % 2 == 0).size\n\
    \        val l = x.filter( x => x.toString.toInt % 2 == 0).sorted\n        val\
    \ r = l.diff(x)\n        if(m>0) r\n        else l", "        val indexToRemove\
    \ = x.toSet.size\n        val newList = x.filter(_ % 2 == 0).sorted\n        newList.foldLeft(List[Long]())((acc,\
    \ item) => {\n            if(acc == List()) List(item)\n            else {\n \
    \               if(item % 2 == 0) {\n                    if(!acc.contains(item))\
    \ {\n                        acc :+ item\n                    }\n            \
    \    }\n            }\n        })", "        val ans = ListBuffer[Long]()\n  \
    \      for (i <- 0 until x.size) {\n            if (i.isEven) ans += x(i)\n  \
    \      }\n        ans.toList", "        val evenList = mutable.ListBuffer[Long]()\n\
    \        for(elem <- x){\n            if(!evenList.contains(elem%10l)){\n    \
    \            evenList += elem%10l\n            }\n        }\n        evenList.sorted",
  "        // O(n) solution O(n) time\n        val xs = x.toSet\n        val result\
    \ = mutable.ListBuffer[Long]()\n        for (i <- xs.toSeq) {\n            if\
    \ (i % 2 == 0) {\n                result ::= i\n            }\n        }\n   \
    \     result.sorted", "        // Solution 1: sort and remove duplicates\n   \
    \     x.sortWith(_ < _)\n        x.filterNot(_.toString.length % 2 == 0)", " \
    \       // To sort from smallest to greatest you can use:\n        // x.sortBy(math.sign)\n\
    \        // or shorter:\n        // x.sortBy(math.signum)\n        x match {\n\
    \            case List() => List()\n            case xs => xs.filterNot(_ % 2\
    \ == 0).sorted\n        }", "        val ret: List[Long] = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- x zip x.view.zip(x.tail)) {\n            if (i._1 % 2 == 0)\
    \ {\n                if (!ret.contains(i._1.toLong)) {\n                    ret\
    \ += i._1.toLong\n                }\n            }\n        }\n        ret toList",
  "        var result : List[Long] = Nil\n        x.foreach{\n            case i if\
    \ i % 2 == 0 => result += i \n        }\n        result.sortWith((i, j) => i -\
    \ j).toList", "        val map = mutable.HashMap[(Long, Int), Int]()\n       \
    \ x foreach (n => {\n            if (map.containsKey(n.toInt % 10)) {\n      \
    \          val prevCount = map.getOrElseUpdate(n.toInt % 10, 1)\n            \
    \    map.update(n.toInt % 10, prevCount + 1)\n            } else {\n         \
    \       map.put(n.toInt % 10, 1)\n            }\n        })\n        map.keys.toList.sortBy(-_)",
  "        x.toList map (x1 => x1.toString.filter(_ % 2 == 0).length == 0) filter\
    \ (x1 => x1.nonEmpty) sortBy (_._1) map {\n            x => x.last\n        }",
  "        def hasEvenDigit(x: Long) : Boolean = {\n            val divisor = (x.toInt).div(2.toInt)\n\
    \            (divisor.toDouble % 2) == 0.0\n        }\n        val nums0 = x.filter(\
    \ _ % 2 == 0 )\n        val nums1 =  nums0.filter(!hasEvenDigit)\n        nums1.sortWith(\
    \ _ > _)", "        val xMap = x.map(_ % 10).sortBy(_ < 0).map(_ * 10).toMap\n\
    \        x.filter(x => !xMap.get(x % 10).isEmpty).sortBy(x % 10)", "        var\
    \ res = new ListBuffer[Long]()\n        for(i <- x.toStream) {\n            if(i.parity()\
    \ % 2 == 0) {\n                res += i\n            }\n        }\n        x.toStream.filterNot(_\
    \ % 2 == 0).sorted", "        val digits = x.map(_.toString.toInt).toSet\n   \
    \     if (digits.isEmpty) Nil\n        else x filter (digit => digits diff Set[Long](digit.toString.toInt)).sort",
  "        var uniqueList: List[Long] = Nil\n        for (i<-0 to x.length-1) {\n\
    \            val firstElement = x(i)\n            val secondElement = x(i+1)\n\
    \            val lengthOfFirstElement = firstElement.toString.length\n       \
    \     val lengthOfSecondElement = secondElement.toString.length\n            val\
    \ digitValue = firstElement / 10l.toLong\n            val digitValueOddDigit =\
    \ firstElement % 10l.toLong\n            if (secondElement % 2l.toLong == 0 &&\
    \ firstElement % 2l.toLong == 0){\n                val digitValueEvenDigit = secondElement\
    \ / 10l.toLong\n                val digitValueEvenDigitOddDigit = secondElement\
    \ % 10l.toLong\n                val lengthOfEvenDigit = digitValueEvenDigit.toString.length\n\
    \                val lengthOfOddDigit = digitValueOddDigit.toString.length\n \
    \               if (digitValue % 2l.toLong == 0){\n                    if (lengthOfEvenDigit\
    \ == lengthOfOddDigit){\n                        if (digitValueEvenDigit > digitValueOddDigit)\
    \ {\n                            uniqueList = uniqueList::firstElement\n     \
    \                   }\n                        else if (digitValueEvenDigit <\
    \ digitValueOddDigit) {\n                            uniqueList = uniqueList::secondElement\n\
    \                        }\n                    }\n                    else if\
    \ (lengthOfEvenDigit > lengthOfOddDigit){\n                        uniqueList\
    \ = uniqueList::firstElement\n                    }\n                    else\
    \ {\n                        uniqueList = uniqueList::secondElement\n        \
    \            }\n                }\n                else if (digitValue % 2l.toLong\
    \ != 0){\n                    if (lengthOfEvenDigit == lengthOfOddDigit){\n  \
    \                      if (digitValueEvenDigit < digitValueOddDigit) {\n     \
    \                       uniqueList = uniqueList::firstElement\n              \
    \          }\n                        else if (digitValueEvenDigit > digitValueOddDigit)\
    \ {\n                            uniqueList = uniqueList::secondElement\n    \
    \                    }\n                    }\n                    else if (lengthOfEvenDigit\
    \ > lengthOfOddDigit){\n                        uniqueList = uniqueList::firstElement\n\
    \                    }\n                    else {\n                        uniqueList\
    \ = uniqueList::secondElement\n                    }\n                }\n    \
    \        }\n        }\n        uniqueList", "        val result = mutable.ArrayBuffer(0)\n\
    \        val result = x.map(x => x.toString.filter(_ % 2 == 0).sorted)\n     \
    \   result += 0 until x.size\n        result.map(x => x(0))", "        val evenDigitsSet\
    \ = x.filter(_ % 2 == 0).filterNot(x => x.equals(0))\n        val evenDigits =\
    \ evenDigitsSet.map(_.toLong).sorted\n        val odd = x.filter(x => x % 2 ==\
    \ 1)\n        val evenDigits = evenDigitsSet.map(_.toLong).sorted\n        val\
    \ odd = odd.filterNot(x => x.equals(0l))\n        odd.filter(x => evenDigits.contains(x.toLong))",
  "        val result = mutable.ListBuffer.empty[Long]\n        var current = Long.MaxValue\n\
    \        var count = 0\n        for ( elem <- x) {\n            if ( current !=\
    \ elem % 10 ) {\n                current = elem % 10\n                count =\
    \ count + 1\n            }\n            if ( count == 1 ) {\n                result\
    \ += current\n                count = 0\n            }\n        }\n        result.toList",
  "        val ret = new mutable.LinkedList[Long]()\n        val digits = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until x.length)\n            if (digits(x(i)))\n        \
    \        ret.append(x(i))\n            else\n                digits.add(x(i))\n\
    \        digits.size\n        return ret.toList", "        val n = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        x.foreach {\n            num =>\n            val digits = num.toString.reverse.filter(x\
    \ => x != '0').length\n            if(digits % 2 == 0) {\n                n.append(num)\n\
    \            }\n        }\n        n.toList.sortBy(x => x).distinct", "      \
    \  val ns = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until x.size)\
    \ {\n            var digit = x(i).asDigit // 1\n            var next = x(i).asDigit\
    \ // 1\n            while (next > 9) {\n                digit = (digit * 10) +\
    \ (next.asDigit - '0')\n                next = (next.asDigit - '0')\n        \
    \    }\n            if (ns.contains(digit)) \n                next\n         \
    \   else \n                ns += digit\n        }\n        ns.toList", "     \
    \   val indexSet = mutable.HashSet[Long]()\n        var index = 0\n        var\
    \ ret: List[Long] = ListBuffer[Long]()\n        while (index < x.size) {\n   \
    \         val digit = x(index)\n            if (indexSet.contains(digit)) {\n\
    \                ret.append(digit)\n            } else {\n                indexSet.add(digit)\n\
    \            }\n            index += 2\n        }\n        return ret.toList",
  "        var result : List[Long] = List.empty\n        val unique = mutable.TreeSet[Long]()\n\
    \        for (i <- x) {\n            val s = i.toString.toInt\n            if\
    \ (unique.contains(s)) {\n                result += i\n            } else if (result.isEmpty)\
    \ {\n                result += i\n            } else {\n                result\
    \ += i\n            }\n            unique += s\n        }\n        result", " \
    \       val list1 = x.sortBy(x => x.toString.reverse.filterNot(x => x.isDigit).length).reverse\n\
    \        list1.filter(x => x.toString.filterNot(x => x.isDigit).length == 0)",
  "        x.foldLeft(List.empty[Long]) { \n            (acc: List[Long], i: Long)\
    \ => {\n                acc filterNot { x => x.toString.toLong % i == 0 }\n  \
    \          }\n        }", "        val xs = x.toSet.toList\n        xs.filter(_\
    \ rem 2 != 0)", "        val res = x groupBy { _ % 10 } map { case (_, v) => (v.toInt,\
    \ _) } filterNot { case (_, v) => v.toInt % 2 == 0 } map { case (_, v) => v.toLong\
    \ }.toList\n        val sortedRes = res.sortBy(math.Ordering[Long](math.Ordering[Long].reverse))\n\
    \        sortedRes", "        val nums = mutable.ListBuffer.empty[Long]\n    \
    \    x foreach { num =>\n            if (num % 2 == 0) {\n                nums\
    \ += num\n            }\n        }\n        nums.toList", "        val y = x.sortWith(_\
    \ > _)\n        val result = ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < y.size) {\n            if (y(i).isEven) {\n                result += y(i)\n\
    \            }\n            i += 1\n        }\n        result.sortWith(_ > _)",
  "        val map = new mutable.HashMap[Long,Boolean]()\n        x.foreach(e => if\
    \ (e % 2 != 0) map.update(e, true))\n        val res = new mutable.PriorityQueue[Long]()\n\
    \        map.foreach(e => if(map.get(e)) res += e)\n        res.toList", '        x.groupBy(x
    => x % 10).filter(_._2.size == 1).map(_._1.toLong).toList', "        val unique\
    \ = mutable.ListBuffer(x)\n        val even = mutable.Set()\n        while(unique.nonEmpty)\
    \ {\n            val next = unique.tail\n            next foreach {\n        \
    \    case a : Long => {\n                if (even.contains(a))\n             \
    \       return\n                else\n                    even += a\n        \
    \    }\n        }\n        unique.toList", "        val nums = x.toStream.map(_.toInt).toList\n\
    \        nums.filter { n => n % 2 == 0 }.toList", "        val mapX = x.groupBy(x\
    \ => x % 10).mapValues(_.size)\n        val mapX = x.groupBy(x => x % 10).mapValues(_.size).filter(_._2\
    \ == 0).map(_._1)\n        mapX.filter(x => x.nonEmpty).map(x => x.sorted).sort",
  "        var newList = ListBuffer[Long]()\n        for (number <- x) {\n       \
    \     if (number.toString.length % 2 == 0) {\n                newList = newList\
    \ :+ number\n            }\n        }\n        return newList.sorted", '        x.groupBy(n
    => (n % 10).floor).values.toList', "        def f(x : Long) : List[Long] = {\n\
    \            val list = scala.collection.mutable.ListBuffer.empty[Long]\n    \
    \        while(x > 0) {\n                if(x % 2 == 0) {\n                  \
    \  list += x\n                }\n                x = x / 2\n            }\n  \
    \          list.toList\n        }\n        f(x.head).reverse", "        var result\
    \ : List[Long] = List()\n        var count : Long = 1\n        val listWithZero\
    \ = x.toList ++ List(0l)\n        while(listWithZero.size > 0) {\n           \
    \ result ++= listWithZero filter (x => x % 2 == 0)\n            listWithZero filter\
    \ (x => x % 2 != 0) foreach {\n                x => result += x\n            \
    \    count += 1\n            }\n        }\n        result.sortWith(_ < _)", " \
    \       var uniques = mutable.Set[Long]()\n        x foreach (y => uniques ++=\
    \ y) // remove duplicates\n        x filterNot (uniques.toList.contains) // remove\
    \ those that has duplicates", "        val list = x.toList.sortBy(_.toString.toInt)\n\
    \        val evenList = list.filter(x => x.toString.toInt % 2 == 0)\n        val\
    \ oddList = list.filter(x => x.toString.toInt % 2 != 0)\n        evenList.distinct",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size)\n            if (x(i).toString.length() > 0 && !result.contains(x(i).toString.charAt(0)))\n\
    \                result += x(i)\n        return result.toList", "        var res\
    \ = List[Long]()\n        for(num <- x){\n            if(num.toString.filter(_\
    \ => '0'.!='1').length == num.toString().length){\n                if(res contains\
    \ num)\n                    continue\n                else\n                 \
    \   res += num\n            }\n        }\n        res", "        var result :\
    \ List[Long] = List()\n        for (xx <- x) \n            if (xx % 2 == 0) result.add(xx)\n\
    \        return result.toList", "        val uniqueElements = mutable.Set[Long]()\n\
    \        x.foreach(e => {\n            if (e % 2 == 0) uniqueElements += e\n \
    \       })\n        x.filter(x => uniqueElements.contains(x)).sorted", "     \
    \   var result : List[Long] = Nil\n        for(elem <- x) result += elem.toString.filter(x\
    \ => x % 2 == 0).map(_.toLong)\n        val set = new mutable.HashSet[Long]()\n\
    \        for(elem <- result) if (!set.contains(elem)) set += elem\n        result.toList",
  "        val l = x.toArray\n        val n = l.length\n        var evenNum : List[Long]\
    \ = Nil\n        var curNum : Long = 0\n        var i = 0\n        while (i <\
    \ n) {\n            curNum = l(i).toLong\n            if (curNum % 2 == 0) {\n\
    \                evenNum = evenNum :+ curNum\n            } else {\n         \
    \       if (evenNum.isEmpty) {\n                    evenNum = evenNum :+ curNum\n\
    \                } else {\n                    evenNum = evenNum.sortWith(_ <\
    \ _) // sort in increasing order\n                    evenNum = evenNum.distinct\n\
    \                }\n            }\n            i += 1\n        }\n        return\
    \ evenNum.sortWith(_ < _) // sort in increasing order", "        val ans = mutable.Buffer.empty[Long]\n\
    \        val res = (x filter (x => (x % 2) == 0) filter (x => x != 0) filter (x\
    \ => x % 2 == 0))\n        // println(res)\n        if (res.nonEmpty) ans ++=\
    \ res\n        res.distinct", "        val y = x.map(x => if (x % 2 == 0) x.toInt\
    \ else 0).sort\n        val z = new mutable.HashSet[Long]()\n        for (x <-\
    \ y) if (x != 0) z += x\n        z.sort", "        var tempList : List[Long] =\
    \ Nil\n        var lastDigit : Long = 0l\n        var counts : List[Long] = Nil\n\
    \        for (i <- x.indices){\n            lastDigit = x(i)\n            counts\
    \ = Nil\n            for( j <- 0 until lastDigit - 1){\n                if (x(i).mod(j)\
    \ == 0){\n                    if (counts == Nil) counts = List(j)\n          \
    \          else counts = counts :+ j\n                }\n            }\n     \
    \       if( counts == Nil){\n                tempList = tempList :+ x(i)\n   \
    \         }\n        }\n        return tempList", "        val evenDigits = x.filter\
    \ (x => x % 2 ==0).map (x => x.toString.toInt).toList\n        val notEvenDigits\
    \ = x.filter (x => x % 2 != 0).map (x => x.toString.toInt).toList\n        evenDigits.filter\
    \ (x => notEvenDigits.contains(x))", "        var ret : List[Long] = Nil\n   \
    \     val evenDigit : Set[Long] = x.filter(x => x % 2 == 0).toSet\n        val\
    \ ns = x filter { x => evenDigit.contains(x) && x.isOdd.isTrue }\n        val\
    \ s = ns reduceLeft ((x,y) => { if(x==y) x else y+x })\n        ret = (x diff\
    \ s) toList :: ret", "        val n = x.size\n        var ans : List[Long] = Nil\n\
    \        var index : Int = 0\n        var count : Long = 0\n        var dig :Long\
    \ = 0\n        while(index < n) {\n            dig = x(index).toLong % 10\n  \
    \          if(dig <= 0) {\n                count += 1\n                ans = x\
    \ filter (_ % 10 != 0) ++ ans\n            }\n            index += 1;\n      \
    \  }\n        if (count > 0) {\n            ans = ans ++ x filter (_ % 10 == 0)\n\
    \        }\n        return ans", "        var set = Set[Long]()\n        x.foldLeft(Set[Long]())(set+_)\n\
    \        x.filterNot(set)", "        if(x.isEmpty) Nil\n        else {\n     \
    \       val nx = x.map( _ % 10 )\n            val ny = x.filter( _ % 2 )\n   \
    \         if( nx.nonEmpty && nx.distinct == nx.tail ) nx\n            else uniqueDigits(ny)\n\
    \        }", "        val even = x.filter(x => x % 2 == 0)\n        val odd =\
    \ x.filter(x => x % 2 != 0)\n        even.map(x => odd.count(_ == x))", "    \
    \    var newSet = Set[Long]()\n        for( n <- x ) newSet.add(n)\n        x\
    \ filter ( (n) => newSet.contains(n.toInt/10).isEmpty) sortBy { n => n.toInt/10\
    \ }", "        val map = new scala.collection.mutable.HashMap[(Long, Int), List[Long]]\n\
    \        val list = new scala.collection.mutable.ArrayList[Long]\n        x.foreach(x\
    \ => {\n            val y = math.trunc(x).toInt\n            val key = (x, y)\n\
    \            map.get(key) match {\n                case Some(list) => \n     \
    \               list += x\n                case None => \n                   \
    \ map.put(key, x)\n            }\n        })\n        map.values.toList", "  \
    \      // Sort the list by last digit, start from the end\n        val sorted\
    \ = x.sortWith(_ < _)\n        // Find all list elements that hasn't any even\
    \ digit.\n        val odd = sorted.filter(x => x.lastDigit % 2 != 0)\n       \
    \ // Sort list again\n        sorted.sortWith(_ < _)\n        // Remove all odd\
    \ digits from list\n        odd.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        x.filter(_ % 2 == 0).foreach(xi => list += xi)\n        list.sort", " \
    \       val map1 = mutable.HashMap()\n        val map2 = mutable.HashMap()\n \
    \       val l = x.length\n        var i = 0\n        for (j <- 1 to l) {\n   \
    \         map1 += x(i).toString.toLong + j.toLong -> 1\n            map2 += j.toLong\
    \ -> 1\n            i += 1\n        }\n        val result1 = map1.filter { case\
    \ (k, v) => v == 0 }\n        val result2 = map2.filter { case (k, v) => v ==\
    \ 0 }\n        val result3 = result1.filterNot(result2)\n        result3.toList.sortWith((x,\
    \ y) => x < y).sorted", "        val digitSet = mutable.HashSet[Long]()\n    \
    \    val digitList = mutable.ArrayBuffer.empty[Long]\n        for (x <- x){\n\
    \            var digit = x / x\n            while (digit > 0){\n             \
    \   if (digitSet.contains(digit)){\n                    break\n              \
    \  }\n                digit = digit / 10\n            }\n            digitList.append(digit)\n\
    \            digitSet = digitSet + digit\n        }\n        digitList.toList",
  "        val m = x.toSet\n        x filter (m == m.filter(_ % 2 == 0)).toList",
  "        val evenList = x.filter(_ % 2 == 0).sorted\n        val oddList = x.filter(_\
    \ % 2 != 0).sorted\n        evenList ++ oddList", "        val result = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            val digit = i % 10\n            if (digit\
    \ == 0) {\n                result.add(i)\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            Nil\n        } else {\n            val l = new\
    \ scala.collection.mutable.ListBuffer[Long]()\n            for (i <- x) {\n  \
    \              if (i.mod(10).equals(0)) {\n                    l.add(i)\n    \
    \            }\n            }\n            l ++= result\n            l.toList\n\
    \        }", "        var result: List[Long] = x.toSet.toList\n        var tmp:\
    \ Long = 0\n        var evenCount = 0\n        val digits: Set[Long] = new mutable.HashSet[Long]()\n\
    \        while (result.nonEmpty) {\n            val tmpElem = result.head\n  \
    \          if (digits.contains(tmpElem)) {\n                evenCount += 1\n \
    \               if (evenCount == 2) tmp = tmpElem\n            }\n           \
    \ else result += tmpElem\n            digits.remove(tmpElem)\n        }\n    \
    \    result match {\n            case Nil => (Nil)\n            case x :: Nil\
    \ => x\n            case x :: xs => uniqueDigits(xs)\n        }", "        val\
    \ result = new mutable.ArrayBuffer(0)\n        val digitSet = new mutable.Set[Long]()\n\
    \        x.foreach(x => if (digitSet.contains(x)) return) \n        digitSet.add(x)\n\
    \        x foreach { x => \n            if (x % 2 != 0) result add x\n       \
    \ }\n        result toList", "      val set = new mutable.HashSet[Long]()\n  \
    \    var result : List[Long] = Nil\n      for (elem <- x) {\n        if(set.isEmpty)\
    \ result = elem::Nil\n        else if(elem % 2 == 0) result = elem::result\n \
    \       else result = set\n      }\n      result", "        val y = x map { x\
    \ => x.toString.filterNot(_.isDigit).filterNot(x => x % 2 == 0).sorted}\n    \
    \    y.toList", "        val res = mutable.ListBuffer(x)\n        for (i <- 0\
    \ until res.size) {\n            val num = res(i)\n            val evens = 0 until\
    \ num.toString.length\n            for (e <- evens) {\n                if (num.toString.charAt(e)\
    \ % 2 == 0) {\n                    res.remove(num)\n                }\n      \
    \      }\n        }\n        res", "        var y = x filter (x => x.toString.toList.filter\
    \ (x => x % 2 == 0).isEmpty)\n        y ++ uniqueDigits(y)", "        var ans\
    \ = mutable.ListBuffer(0L);\n        var evenDigit : Boolean = false;\n      \
    \  for ( i <- 0 to (x.size - 1)) {\n            if (x(i) % 2 == 0 && x(i) > 0)\
    \ {\n                evenDigit = true;\n                ans += x(i);\n       \
    \     }\n            if (evenDigit == false && x(i) > 0) {\n                ans\
    \ += x(i);\n            }\n        }\n        ans.sorted", "        val set =\
    \ scala.collection.mutable.HashSet[Long]()\n        val ret = new scala.collection.mutable.ArrayBuffer[Long]()\n\
    \        for (n <- x) {\n            set.add(n.toString.toInt)\n        }\n  \
    \      for (n <- x if !set.toSet.contains(n.toString.toInt)) {\n            ret.append(n)\n\
    \        }\n        ret.toList", "        val digits = mutable.HashSet[Long]()\n\
    \        x.foreach { d => if (d.toString.isDigit && digits.add(d)) }\n       \
    \ digits.toList", "        var newList = ListBuffer[Long]()\n        for (i <-\
    \ x if i.toString.toInt%2 == 0) newList += i\n        newList.sort", "       \
    \ val map = new collection.mutable.HashMap[Long, Long]()\n        val result =\
    \ new collection.mutable.ListBuffer[Long]()\n        for (i <- x) {\n        \
    \    if (map.contains(i / 10l.toLong)) {\n                map.put(i / 10l.toLong,\
    \ 0)\n                map.put(i % 10l.toLong, map.get(i / 10l.toLong) + 1)\n \
    \           } else {\n                map.put(i / 10l.toLong, 1)\n           \
    \ }\n        }\n        for (x <- map.keys.toSeq) {\n            if (map.get(x)\
    \ % 2 != 0) {\n                result.add(x)\n            }\n        }\n     \
    \   result.toList.sortWith(_.compareTo(_) == 0)", "        var result : List[Long]\
    \ = Nil\n        var index = 0\n        var index2 = 0\n        for(i <- x.reverse)\
    \ {\n            while(index2 < i) {\n                result += x[index2].toLong\n\
    \                index2++\n            }\n            index++\n            index2\
    \ = 0\n        }\n        for(i <- x.reverse) {\n            while(index < i)\
    \ {\n                result += x[index].toLong\n                index++\n    \
    \        }\n        }\n        result.reverse", "        val res = mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            if (x.toString.toInt%2 == 0)\n        \
    \    res += x\n        }\n        res.toList", "        def checkDigit(x : Long)\
    \ : Boolean = x % 10 == 0\n        val evenDigits : Set[Long] = x.filter( checkDigit\
    \ ).map(_.toLong)\n        val odDigits : Set[Long] = x.filterNot( checkDigit\
    \ ).map(_.toLong)\n        evenDigits ++ odDigits", "        var result = x.toList\n\
    \        var evenOnly = mutable.Set[Long]()\n        val temp = new collection.mutable.HashMap[Long,\
    \ Long]()\n        val temp2 = new collection.mutable.HashMap[Long, Long]()\n\
    \        for (i <- x.toList) {\n            val n = i.toString.toLong\n      \
    \      val d = n.toString.toInt\n            if (n % 2 == 0) {\n             \
    \   if (temp2.contains(d))\n                    evenOnly += n\n              \
    \  else {\n                    temp += n -> d\n                    temp2.put(d,\
    \ n)\n                }\n            }\n        }\n        result = evenOnly.toList.sortBy(_._2)\n\
    \        if (result.length == 0)\n            result = (0 until x.size)\n    \
    \    result", "        val resultSet = new mutable.HashSet[Long]()\n        for\
    \ (i <- x){\n            while (i % 10 == 0){\n                i /= 10\n     \
    \       }\n            if (resultSet.contains(i) == false){\n                resultSet.add(i)\n\
    \            }\n        }\n        resultSet.map(x => x.toLong).toList", "   \
    \   val digits = x.map(_.toString.toInt)\n      val even_digits = digits\n   \
    \     .filter(x => x%2 == 0)\n        .map(x => x.toLong)\n      val odd_digits\
    \ = digits\n        .filter(x => x%2 == 1)\n        .map(x => x.toLong)\n    \
    \  val even_or_odd_digits = even_digits.extend(odd_digits)\n      even_or_odd_digits\n\
    \        .distinct\n        .sort", "        val map = new mutable.LinkedHashMap[Long,\
    \ List[Long]]()\n        for (n <- x)\n            if (map.contains((n.toInt).toLong))\n\
    \                map.get((n.toInt).toLong).push(n)\n            else {\n     \
    \           map.put((n.toInt).toLong, List(List(n)))\n            }\n        map.values.toList.sortWith(_(0)\
    \ < _(1)).flatMap(_.toList).distinct", "        val x = x map (_.toInt)\n    \
    \    val sorted = x.sort\n        val even = sorted filter { x => x.toString.toInt%2\
    \ == 0 }\n        val evenString = even.map { x => x.toString.toInt }.mkString(\"\
    ,\")\n        val evenNum = even.map { x => x.toString }.mkString(\",\")\n   \
    \     val noEvens = sorted filter { x => x.toString.toInt % 2 != 0 }\n       \
    \ val noEvenString = noEvens.map { x => x.toString.toInt }.mkString(\",\")\n \
    \       val noEvenNum = noEvens.map { x => x.toString }.mkString(\",\")\n    \
    \    println(s\"$evenNum,$evenString\") // 1,15,33\n        println(s\"$noEvenNum,$noEvenString\"\
    ) // 1,10\n        (noEvenNum.toLong,noEvenString.toLong)", "        val ls =\
    \ new scala.collection.mutable.ListBuffer[Long]\n        for (i <- 0 to x.length\
    \ - 1) {\n            val d = x(i).asDigit.toString\n            if (d.toDouble.toInt\
    \ % 2 == 0) {\n                ls += x(i)\n            }\n        }\n        ls.toList",
  "        val result = mutable.LinkedHashSet()\n        for(ele <- x) {\n       \
    \     val str = ele.toString\n            for(i <- 0 until str.length) if(!result.contains(str.charAt(i).asInstanceOf[Char]))\n\
    \            result.add(str.charAt(i).asInstanceOf[Char])\n        }\n       \
    \ result.toList", "        val xs = mutable.ListBuffer[Long]()\n        x.foreach{\
    \ xx =>\n            if (xx.toString.length % 2 == 0) {\n                xs +=\
    \ xx\n            }\n        }\n        xs.toList", "        val res = new mutable.ListBuffer[Long]()\n\
    \        x foreach { i =>\n            val tmp = i.toInt\n            if (tmp.signum\
    \ == -1)\n                res.append[Long](tmp.toLong % 10)\n            else\n\
    \                res.append[Long](tmp.toLong / 10)\n        }\n        x.toList.sortWith((i1,\
    \ i2) => i1.toLong < i2.toLong)\n        res.toList", "        val m = new mutable.HashMap[Long,\
    \ Long]\n        x foreach { i => \n            m += i -> m.getOrElse(i, 0) +\
    \ 1\n        }\n        val result = (for (a <- m.keys) yield a).toList\n    \
    \    val result2 = new mutable.ArrayBuffer[Long]()\n        var j = 0\n      \
    \  for (a <- m) \n            if (m.get(a).isOdd) \n                result2 +=\
    \ a\n            else \n                while (j < result2.length && result2(j)\
    \ <= a) {\n                    result2(j) = (result2(j) * 10 + a.toString.charAt(j)\
    \ - '0').toLong\n                    j += 1\n                }\n        result2",
  "        val s = mutable.Set[Long]()\n        x.map(s ++= _).toList", "        //\
    \ Write your code here\n        x.foldLeft((0 until x.size).map{i => x(i)}.toList){\
    \ (r, i) =>\n            if(i.last / 10 == 0){\n                r\n          \
    \  }else{\n                r.filter(_ % 10 != 0).toList ++ i :: r\n          \
    \  }\n        }.filter{x => !x.isEmpty}.toList", "        val result = new mutable.MutableList[Long]()\n\
    \        val odd = new mutable.MutableList[Long]()\n        val even = new mutable.MutableList[Long]()\n\
    \        x foreach {\n            case i => if (i%2 != 0) even += i\n        \
    \    case j => if (j%2 == 0) odd += j\n        }\n        result.addAll(even)\n\
    \        result.addAll(odd)\n        result.sortWith(_ < _)", "        val set\
    \ = mutable.Set.empty[Long]\n        val list = mutable.List.empty[Long]\n   \
    \     for (elem <- x) {\n            var tmpSet = set\n            val tmp = elem\n\
    \            while (tmp != 0) {\n                tmpSet += tmp % 10\n        \
    \        tmp /= 10\n            }\n            if(!tmpSet.contains(elem)) {\n\
    \                list += elem\n            }\n        }\n        list.sortWith(x\
    \ => x.toString.length <= x.toString.reverse.length)", "        if (x.isEmpty)\n\
    \            List() \n        else {\n            var result = x.filterNot(_.toString.toLong\
    \ % 2 == 0).sorted\n            val x = x.filterNot(_.toString.toLong % 2 == 0).sorted\n\
    \            val size = x.size - 1\n            while (size > 0) {\n         \
    \       if (x(size).toString.toLong % 2 == 0)\n                    result = (result(size)\
    \ -> result(size+1)) :: result\n                else\n                    result\
    \ = result :: x(size+1) :: result\n                size -= 1\n            }\n\
    \            result\n        }", "        val xs = mutable.ArrayBuffer(x).flatten\n\
    \        val xl = xs.length\n        val list = mutable.ArrayBuffer[Long]()\n\
    \        var i = 0\n        while(i < xl) {\n            var n = 0\n         \
    \   while (i < xl && xs(i).isEven) {\n                n = n + 1\n            \
    \    i = i + 1\n            }\n            if (n == 0) list += xs(i)\n       \
    \     i = i + 1\n        }\n        list.toList", "        val set = scala.collection.mutable.Set[Long]()\n\
    \        x.filter(x => x.toString.forall(_.toString.forall(x => x % 2 == 0)))\n\
    \            .filter(x => !set.contains(x))\n            .toList", "        val\
    \ ns = mutable.HashSet[Long]()\n        var i = 0\n        for(el <- x) {\n  \
    \          if(i % 2 == 0) {\n                ns += el\n            }\n       \
    \     i += 1\n        }\n        ns.toList", "        val n = x.size\n       \
    \ val even = x\n            .filter(i => i % 2 == 0)\n            .map(i => math.abs(i.toLong))\n\
    \            .distinct\n            .sorted\n        val odd  = x\n          \
    \  .filter(i => i % 2 == 1)\n            .map(i => math.abs(i.toLong))\n     \
    \       .distinct\n            .sorted\n        even.zip(odd).filter(x => x._1\
    \ != x._2).map(_._1)", "        var result : List[Long] = List()\n        var\
    \ evenDigit : List[Long] = List()\n        var num : List[Long] = List()\n   \
    \     for(i <- x) {\n            if(i.toString.length == 1) {\n              \
    \  if(i.toString.toDouble.truncate % 2 == 0) {\n                    evenDigit.add(i)\n\
    \                }\n            } else {\n                if(i.toString.toDouble.truncate\
    \ % 2 == 0) {\n                    num.add(i)\n                }\n           \
    \ }\n        }\n        if(!evenDigit.isEmpty) {\n            result = evenDigit.sortBy(x\
    \ => x.toString.toDouble.truncate)\n        }\n        if(!num.isEmpty) {\n  \
    \          result = result.union(num)\n        }\n        result.sortBy(x => x.toString.toDouble.truncate)",
  "        val d = x.map{_.toString.toLong}\n            .toSet\n            .toList\n\
    \            .toList\n            .sortWith(_.toString.toLong > _.toString.toLong)\n\
    \            .distinct\n            .toList\n\n        val resultList = d.map{\
    \ n => x filter { x => x.toString.toLong % n == 0 } }\n            .toList\n \
    \           .toList\n            .toList\n            .sortWith(_.toString.toLong\
    \ > _.toString.toLong)\n            .distinct\n            .toList\n         \
    \   .toSet\n            .toList\n\n        resultList", "        val set = mutable.HashSet[Long]()\n\
    \        var result: List[Long] = Nil\n        for (x <- x) {\n            if\
    \ (x % 2 == 0) {\n                if (set.contains(x)) {\n                   \
    \ result = x :: result\n                } else {\n                    result :+\
    \ x\n                    set += x\n                }\n            }\n        }\n\
    \        result.sortBy(_.toString)", "        val setX = x.toSet\n        var\
    \ setY = []\n        for(i <- x if i % 2 == 0) setY :+= i\n        setY.sort",
  "      val x = x.toList\n      var temp : List[Long] = x\n      val x = x.toList\n\
    \      var index = 0\n      while(index < x.size) {\n        var index = 0\n \
    \       while(index < x.size && x(index) % 2 == 0) {\n          index += 1\n \
    \       }\n        if(x.size != index) {\n          temp = (x.init ++ x.slice(index))\n\
    \        }\n        index += 1\n      }\n      temp.toList", "        val resultSet\
    \ = collection.mutable.Set[Long]()\n        x.foreach { number =>\n          \
    \  if (number.toString.charAt(0).toUpper == '0')\n                resultSet +=\
    \ number\n        }\n        resultSet.toList", "        val unique = mutable.HashSet[Long]()\n\
    \        for(i <- x)\n            if(i % 2 == 0) \n                if(!unique.add(i))\
    \ \n                    unique\n            else\n                if(!unique.remove(i))\
    \ \n                    unique\n                else\n                    unique",
  "        var ans =  List[Long]()\n        var nums = x map { xx =>\n           \
    \ val d = xx.toString.reverse.filterNot(x => x.isDigit).size\n            if (d\
    \ == 0) ans += xx\n            else xx \n        }\n        ans = ans.sortWith(_\
    \ < _)\n        nums.tail", "        val digits = scala.collection.mutable.ArrayBuffer(0l)\n\
    \        var count = 1l\n        x.foreach{x => \n            digits += x\n  \
    \          if (x%2 == 0) {\n                count += 1l\n            }\n     \
    \   }\n        val nums = scala.collection.mutable.ArrayBuffer(x.toInt)\n    \
    \    val numsSorted = scala.collection.mutable.ArrayBuffer(x.toInt)\n        for\
    \ (i <- 1 to nums.size) {\n            val cur = digits.toSet.subsetOf(nums.subsetOf(i.toSet))\n\
    \            if (cur.size <= 0) {\n                numsSorted += nums(i).toLong\n\
    \            }\n        }\n        numsSorted.sortWith((a, b) => a < b)", "  \
    \      var result : List[Long] = Nil\n        val seen = mutable.Set[Long]()\n\
    \        val iter = Iterator.iterate(x.head).takeWhile(i => !seen.contains(i))\n\
    \        val iter = iter.flatMap{ l => \n            if (l.toString.length ==\
    \ 2) Nil\n            else List(l)\n        }\n        val iter = iter.filter(l\
    \ => l.toString.forall(x => x % 2 == 0))\n        iter = iter.map(l => seen+=l.toLong)\n\
    \        iter = iter.map(l => l.toLong)\n        iter = iter.distinct\n      \
    \  result = result.++ iter\n        result.sortBy(l => l.toLong)", "        //\
    \ use mutable map to store \n        val x = mutable.Map[Long, List[Long]]()\n\
    \        for (i <- x) {\n            // if i is not in the map, then\n       \
    \     if(!x.contains(i)) {\n                // add it to the map\n           \
    \     x += (i -> List(i))\n            }\n            // else get the corresponding\
    \ list\n            else {\n                // get the list\n                val\
    \ list = x(i :: Nil)\n                // remove i from list\n                val\
    \ result = list filter (x => x._1 !=i)\n                // add i to the map\n\
    \                x += (i -> result)\n            }\n        }\n        // get\
    \ the result of the map \n        x map {case (i, x) => i :: x }.toList", "  \
    \      var result = new mutable.ArrayBuffer[Long]()\n        for (x <- x) {\n\
    \            if (x % 2 == 0) {\n                result += x\n            }\n \
    \       }\n        val result = result.sorted", "        val nums = new mutable.HashSet[Long]()\n\
    \        for ( i <- x ) {\n            if (nums.contains(i.modPow(10, x.length)))\n\
    \                nums.remove(i.toString())\n            else\n               \
    \ nums.add(i.toString())\n        }\n        nums.toList.sortBy(_.length)", " \
    \       // Write your code here\n        x.filter(x => x % 2 == 0).sorted", " \
    \       x.foldLeft(List.empty[Long]) { (result, current) =>\n            val result\
    \ = current :: result\n            if (current % 2 == 0) {\n                result\
    \ ::: List(current.toString.dropRight(1))\n            } else {\n            \
    \    result\n            }\n        }.sortWith(_ > _)", "        def hasEvenDigit(x:\
    \ Long) = x % 2 != 0\n        val digits = x.map(_ % 10).distinct\n        var\
    \ evenNumbers = x.filter(hasEvenDigit)\n        var restNumbers = x.filterNot(hasEvenDigit)\n\
    \        val sortedNums = evenNumbers.sorted.::(evenNumbers.filter(_%2 == 1).sorted.::(evenNumbers.filter(_%2\
    \ == 0).sorted.::(restNumbers.filterNot(_%2 == 1).filterNot(_%2 == 0).sorted)))\n\
    \        sortedNums.filter(x => !digits.contains(x))", "        val hashSet =\
    \ new mutable.HashSet[Long]()\n        val evenDigitList = new mutable.ArrayBuffer[Long]()\n\
    \        for(i <- x){\n            if(i % 2 == 0){\n                hashSet.add(i)\n\
    \            }else{\n                evenDigitList += i\n            }\n     \
    \   }\n        evenDigitList.sorted", "        val set = Set[Long]()\n       \
    \ x.foreach(num => set += num.toInt)\n        x.filterNot(num => set.contains(num.toInt))",
  "        val evenDigits = x.filter(x => x.toInt % 2 == 0)\n        val sortedList\
    \ = evenDigits.sorted\n        val newSortedList = evenDigits.zipWithIndex.filter(_.element._2.toInt\
    \ % 2 == 0).sorted\n        val returnList = newSortedList.takeWhile(_._1 <= x.size)\n\
    \        returnList.map(_._1)", "        var result : List[Long] = Nil\n     \
    \   var evenDigits : Set[Long] = Set()\n        x.map(x => {\n            val\
    \ digit = x.getNumer % 10\n            if (digit == 0) evenDigits += x\n     \
    \       else result = result.filterNot(_ == x) + List(x)\n        })\n       \
    \ result.sortWith((x, y) => x.compareTo(y) == 0)", "        // Your code goes\
    \ here\n        val res = new mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ x.size){\n            val num = x(i)\n            if(!num.forall(_.isDigit)){\
    \ res.append(num) }\n        }\n        res.sortWith((l,r) => l.forall(x => r.exists(y\
    \ => x == y)))", "        var list: List[Long] = x.toList\n        list.sortWith(x\
    \ => x.toLong % 2 == 0)\n        list.filter(_ % 2 == 0)", "        var result\
    \ = List[Long]()\n        val digit = scala.collection.mutable.HashMap[Long,Int]()\n\
    \        x.foreach( x => digit(x) += 1 )\n        digit.foreach{ case (k, v) =>\
    \ result.+=(k.toLong % v) }\n        val sorted = result.sortWith((a, b) => b\
    \ < a).reverse\n        sorted.filter( x => x % 2 == 0 ).reverse", "        def\
    \ odd(x : Long) : Boolean = {\n            if (x % 2 == 0) \n                true\n\
    \            else\n                false\n        }\n        val odd_numbers :\
    \ Set[Long] = scala.collection.mutable.Set()\n        val numbers : List[Long]\
    \ = x.filter(x => odd(x)).toList\n        odd_numbers.union(numbers).sorted",
  "        // TODO: Write your code here\n        val newSet = new mutable.HashSet[Long]()\n\
    \        x.foreach {\n            if (x % 2 == 0) newSet.add(x)\n        }\n \
    \       newSet.toList", "        val digits = mutable.ListBuffer(0L)\n       \
    \ x.foreach{n =>\n            digits.append(n.toString.toLong)\n            digits.append(n.toString.toLong)\n\
    \        }\n        digits.sortWith(_.compare(_.next) < 0)", "        def uniqueDigits(x\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            x match {\n  \
    \              case Nil => acc\n                case x :: xs => {\n          \
    \          if(x.toString.toInt == xs.toString.toInt) uniqueDigits(xs.filter(_\
    \ % 2 == 0), acc :+ x)\n                    else uniqueDigits(xs, acc :+ x)\n\
    \                }\n            }\n        }\n        uniqueDigits(x, Nil)", " \
    \       var y = 0\n        var z = 0\n        val xs = x.filter(_ % 2 != 0)\n\
    \        val xlen = xs.len()\n        val y = xlen\n        val z = (xlen - 1)\
    \ * 3\n        // var a = List[Long]()\n        var i = -1\n        var j = xlen\
    \ - 1\n        var x = List.empty[Long]\n        val lim = xlen - 1\n        while\
    \ (i <= lim) {\n            x :+= xs(i)\n            i -= 1\n        }\n     \
    \   var even = xs.length % 2 == 0\n        var z = 0\n        val result = x.distinct\n\
    \        val n = 0\n        while (n < result.size) {\n            if (even) {\n\
    \                result :+= result(n)\n                n += 1\n              \
    \  even = !even\n                z += 2\n                i += 1\n            \
    \    while (i <= lim) {\n                    x :+= result(i)\n               \
    \     i -= 1\n                }\n            } else {\n                result\
    \ :+= result(n)\n                n += 1\n                z = z + 2\n         \
    \       j -= 1\n                while (j >= 0) {\n                    x :+= result(j)\n\
    \                    j -= 1\n                }\n            }\n        }\n   \
    \     result", "        val m = x.count(_ % 2 == 0)\n        if(m == 0) List()\n\
    \        else {\n            val d = x.map(x => x % 2 == 0).count(_ == 0)\n  \
    \          var ans: List[Long] = List()\n            var temp = 0\n          \
    \  for(i <- 0 until m-1) ans = ans :+ x(i) // add non-even numbers to ans\n  \
    \          for(i <- 0 until d) {\n                temp = temp * 10 + x(i)\n  \
    \              for(j <- 0 until i) if(temp % 2 == 0) ans = ans :+ x(j)\n     \
    \       }\n        }\n        ans", "        // Write your code here\n       \
    \ val evenDigitSet = mutable.HashSet.empty[Long]\n        val nonEvenDigitSet\
    \ = mutable.HashSet.empty[Long]\n        var evenDigitCount = 0\n        var nonEvenDigitCount\
    \ = 0\n\n        val result = x.filter(_ % 2 == 0).sorted\n\n        // update\
    \ count\n        for (i<-0 until result.length) {\n            if (result(i) %\
    \ 2 == 0) {\n                evenDigitCount += 1\n                if (evenDigitSet.contains(result(i)))\
    \ {\n                    nonEvenDigitCount += 1\n                    nonEvenDigitSet.add(result(i))\n\
    \                } else {\n                    evenDigitSet.add(result(i))\n \
    \               }\n            }\n        }\n\n        if (evenDigitCount > nonEvenDigitCount)\
    \ {\n            result\n        } else {\n            nonEvenDigitSet.toList\n\
    \        }", "       x.foldLeft(ListBuffer(0)){ (z, elem) => \n          if(elem\
    \ % 2 == 0) z += elem\n          else z\n      }.toList.sortBy(_ % 10)", "   \
    \     if (x.isEmpty) return Nil\n        val result : List[Long] = Nil\n     \
    \   val counts : mutable.Map[Long, Int] = x.groupBy(_ % 10).map {\n        case\
    \ (k, v) => k -> v.size\n        }.toMap\n\n        val nums : Seq[Long] = x filter\
    \ { n => n % 10 == 0 }\n        var temp = 0L\n        val evenDigit : Seq[Long]\
    \ = nums.view.filter { n =>\n            temp = temp + n % 10\n            temp\
    \ = temp % 10 == 0\n        }\n        var cur = 0L\n        var i = 0\n     \
    \   while (i < evenDigit.size) {\n            val currentNum = evenDigit(i)\n\
    \            val count = counts.get(currentNum)\n            if (count == null)\
    \ i = i + 1\n            else if (count > 0) {\n                val currentNum1\
    \ = evenDigit(i + 1)\n                val count1 = counts.get(currentNum1)\n \
    \               count1 -= 1\n                if (count1 < 0) count1 += cur\n \
    \               if (count1 < 0) count1 += cur\n                counts(currentNum1)\
    \ = count1\n                i = i + 2\n            }\n            else {\n   \
    \             val currentNum1 = evenDigit(i + 1)\n                counts(currentNum1)\
    \ = 0\n                i = i + 2\n            }\n        }\n        while (i <\
    \ x.size) {\n            val currentNum = evenDigit(i)\n            if (counts.get(currentNum)\
    \ == null) {\n                val currentNum1 = evenDigit(i + 1)\n           \
    \     counts(currentNum1) = cur\n                i = i + 2\n            }\n  \
    \          else {\n                counts(currentNum) -= 1\n                if\
    \ (counts.get(currentNum) == null) counts(currentNum) = cur\n                i\
    \ = i + 1\n            }\n        }\n        while (i < x.size) {\n          \
    \  val currentNum = evenDigit(i)\n            counts(currentNum) -= 1\n      \
    \      if (counts.get(currentNum) == null) counts(currentNum) = cur\n        \
    \    i = i + 1\n        }\n        while (i < x.size) {\n            val currentNum\
    \ = evenDigit(i)\n            counts(currentNum) -= 1\n            if (counts.get(currentNum)\
    \ == null) counts(currentNum) = cur\n            i = i + 1\n        }\n\n    \
    \    val sortedResult = mutable.LinkedHashMap.empty[Long, Long]\n        val sortedKeys\
    \ = counts sortBy (_._1)\n        val sortedVals = counts sortBy (_._2)\n    \
    \    for (key <- sortedKeys) {\n            val value = sortedVals(key)\n    \
    \        if (result contains value) continue\n            val tmp = new mutable.LinkedHashMap[Long,\
    \ Long]()\n            val nums1 = x filter { n =>\n                if (n % 10\
    \ == 0) nums += n / 10\n                else nums += n", "        val numDigits\
    \ = x.length\n        val result = (for (i <- 0 until numDigits if i%2==0) yield\
    \ x(i)).distinct\n        val sortedResult = result.sortBy(x => x)\n        if\
    \ (sortedResult.isEmpty) List()\n        else sortedResult", "        val set\
    \ = new mutable.HashSet[Long]\n        x.foreach { x => if (set.add(x)) x }\n\
    \        set.map { x => x }", "       val ans = mutable.ListBuffer.empty[Long]\n\
    \       for (i <- x) {\n          val x = i.toString.reverse.dropWhile(_.isDigit).reverse\n\
    \          if (x.isEmpty) ans.append(i)\n          else {\n             val z\
    \ = x.zipWithIndex.filter(_._1 == 0)\n             if (z.nonEmpty) ans += z.get._2\n\
    \          }\n       }\n       ans.toList", "        val y = x.filter( _.toString.filter(\
    \ x => (x % 2) == 0).length == 0)\n        y.sorted", "        val digits = x.map(x\
    \ => (x.toString.reverse.map(_.digit).toSet).toList.flatten)\n        digits.filter(x\
    \ => x.isEmpty).map(_.toLong).sorted", "        val a = x.toSet\n        a.filter(_\
    \ % 2 == 0).sort", "        var list = new mutable.LinkedList[Long]()\n      \
    \  val xs = x.toList\n        xs.foreach(x => if(!x.toString.isEmpty) {\n    \
    \        if(!list.toList.contains(x.toString.replace(\"l\", \"\").toInt)) {\n\
    \                list += x\n            }\n        })\n        list.toList", " \
    \       val arr = x.toList.sort\n        val evenIndex = arr.indexWhere(_.toString.contains(s\"\
    0\"))\n        if (evenIndex == -1) arr else arr.take(evenIndex + 1)", "     \
    \   val set = mutable.Set[Long]()\n        for(i <- 0 until x.length) {\n    \
    \        val digit = x.apply(i).toInt\n            if (set.contains(digit)) \n\
    \                set.delete(digit)\n            else \n                set.add(digit)\n\
    \        }\n        set.sortWith(_ < _)", "        val nums = x.toSet\n      \
    \  val result = new ListBuffer[Long]()\n        nums.foreach { x =>\n        \
    \    if (x % 2 == 0) result.add(x)\n        }\n        result.toList", "     \
    \   val result = mutable.LinkedHashSet[Long]()\n        for (i <- x) {\n     \
    \       if (i mod 2 != 0) result.add(i)\n        }\n        result.sorted", " \
    \       var result : List[Long] = new ListBuffer[Long]()\n        for(v <- x){\n\
    \            result ++= v.filter(_ % 2 == 0).sorted\n        }\n        result\
    \ .toList", "        val result = new scala.collection.mutable.Buffer[Long]()\n\
    \        val evenDigitsCount = 0\n        var i = 0\n        while(i < x.size)\
    \ {\n            val numStr = x(i).toString.replaceAll(\"\\\\D\",\"\").replaceAll(\"\
    ^0\",\"\")\n            if(numStr.length > 0) {\n                if(numStr.charAt(0).toString.toLong\
    \ % 2 == 0) {\n                    evenDigitsCount += 1\n                }\n \
    \               val curResult = numStr.replaceAll(\"\\\\D\",\"\")\n          \
    \      if(evenDigitsCount > 0) {\n                    curResult = curResult.dropRight(1)\n\
    \                }\n                result += curResult.toLong\n             \
    \   i += 1\n            }\n        }\n        result.sort()\n        result.map(_.toString)",
  "        var ans = List[Long]()\n        var set = mutable.HashSet[Long]()\n   \
    \     x foreach { i => \n            if (set.add(i.toLong)) {\n              \
    \  ans = ans ::: List(i)\n            }\n        }\n        ans", "        def\
    \ count(x : List[Long], acc : Set[Long]) : Set[Long] = {\n            if (x.isEmpty)\
    \ acc\n            else if (x contains x.head) count(x.tail, acc + (x.head % 10l.toLong))\n\
    \            else count(x.tail, acc)\n        }\n        val result = new mutable.HashSet[Long]()\n\
    \        count(x, result)\n        result.sortWith(_ < _)", "        val set =\
    \ Set[Long]()\n        val out = new mutable.ListBuffer[Long]()\n        for(el\
    \ <- x){\n            val digit = el.mod(10).map(_.toString).getOrElse(\"\")\n\
    \            if(digit.length == 0) out.add(el)\n            else{ set.add(el);\
    \ if(set.size == 0) out.add(el) }\n        }\n        out.toList", "        //\
    \ get all non-zero digits in x\n        val y = 0\n        val num : List[Long]\
    \ = new ListBuffer[Long]()\n        for (i <- 0 until x.length) {\n          \
    \  if (x(i).isEven) {\n                num ++= x(i).toLong\n            }\n  \
    \      }\n\n        // check if all digits are unique\n        if (num.length\
    \ == x.size) {\n            return num.toList\n        }\n\n        // get all\
    \ even digits in x\n        val evenDigits : Set[Long] = new HashSet[Long]()\n\
    \        for (i <- 0 until x.length) {\n            if (x(i).isEven) {\n     \
    \           evenDigits += x(i).toLong\n            }\n        }\n        if (evenDigits.length\
    \ == x.size) {\n            return num.toList\n        }\n\n        // get all\
    \ odd digits in x\n        val oddDigits : Set[Long] = new HashSet[Long]()\n \
    \       for (i <- 0 until x.length) {\n            if (x(i).isEven) {\n      \
    \          oddDigits += x(i).toLong\n            }\n        }\n        val odds\
    \ = num.filter( x => oddDigits.contains(x))\n        evenDigits.filter( x => oddDigits.contains(x))",
  "        val ls = x.toList.sortBy( x => x % 10 )\n        val res = x.filter( x\
    \ => ls.indexOf( x % 10 ) < ls.length-1 )\n        res", "        val n = (x.map\
    \ { x => math.abs(x) }).count\n        val q = x.map(_ => math.abs(x)).min\n \
    \       var a = q.abs.asInstanceOf[Long]\n        var d = n\n        val x = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (a.lt(math.pow(10, d)) && i < x.size) {\n  \
    \          i += 1\n            d = math.pow(10, i)\n            a += 1\n     \
    \   }\n        if (d == math.pow(10, n)) {\n            x ++ List(x.size)\n  \
    \      }\n        else {\n            var xs = scala.collection.mutable.ListBuffer[Long]()\n\
    \            var i = 0\n            var j = d\n            while (i < x.size)\
    \ {\n                if (i == 0 && math.abs(x.head) < j)\n                   \
    \ xs ++ List(x.head)\n                else {\n                    if (x.head %\
    \ math.pow(10, j) == 0) {\n                        x ++ List(x.head)\n       \
    \             }\n                    else if (x.head < j)\n                  \
    \      x ++ List(x.head)\n                    else {\n                       \
    \ xs ++ List(x.head)\n                    }\n                    j += 1\n    \
    \            }\n                i += 1\n            }\n            if (xs.nonEmpty)\n\
    \                x ++ uniqueDigits(xs)\n        }", "        val digits = x.map(_.toString.toInt)\n\
    \        val evens = x.filter(_ % 2 == 0)\n        val ans = evens.map(x => x\
    \ until x).distinct\n        ans.foldLeft(List[Long]())(x => x + x)", "      \
    \  val set: mutable.Set[Long] = mutable.Set()\n        var result: List[Long]\
    \ = List()\n        for (ele <- x) {\n            if (ele % 2 == 0) {\n      \
    \          result ::= ele\n            }\n            else {\n               \
    \ if (!set.contains(ele)) {\n                    set += ele\n                \
    \    result ::= ele\n                }\n            }\n        }\n        result",
  "        var result : List[Long] = x\n        result.sortWith(_ < _)\n        var\
    \ resultedList : List[Long] = null\n        for(i <- 0 until result.length){\n\
    \            val digit = result(i)\n            if(digit % 2 == 0){\n        \
    \        resultedList ::= digit\n            } else {\n                break\n\
    \            }\n        }\n        if(resultedList == null){\n            resultedList\
    \ = List(0l)\n        }\n        return resultedList", "        val digits = x.map(_.toInt).toList\n\
    \        val evenDigits = digits.filter(_%2 == 0)\n        val odd = evenDigits.filter(_%2\
    \ == 1)\n        evenDigits.filterNot(_%2 == 0) ++ odd", "        def isEven(x:\
    \ Long): Boolean = x%2 == 0\n        def isNotEven(x: Long): Boolean = !(isEven(x))\n\
    \        x.sort\n        val res = new mutable.ArrayBuffer[Long]()\n        x.foreach{x\
    \ => \n            if(isEven(x)) {\n                if(res.contains(x)) return\n\
    \                res.push(x)\n            }\n        }\n        res", "      \
    \  if (x contains 1l) return Nil\n        def helper(x: List[Long], acc: List[Long])\
    \ : List[Long] = { \n            if (x contains 0l) acc\n            else x match\
    \ {\n                case 0l :: Nil => acc ++ x\n                case x :: ys\
    \ => helper(ys, acc ++ x)\n            }\n        }\n        helper(x, Nil)",
  "        // Your code goes here\n        val result = mutable.LinkedHashSet[Long]()\n\
    \        for (e <- x) {\n            if (e.toString.length%2 == 0)\n         \
    \   result.add(e)\n        }\n        result ---> result.sort", "        def unique(xs:\
    \ List[Long], result : List[Long] = Nil) : List[Long] = {\n            // Remove\
    \ from result the element that already contains \n            // an even digit.\
    \ \n            def isEven(x: Long) : Boolean = {\n                if (x % 2 !=\
    \ 0) false\n                else true\n            }\n            val removeEven\
    \ = x filterNot (isEven)\n            val addEven = x filter (isEven)\n      \
    \      \n            // Recurse on the remaining elements \n            val rest\
    \ = unique(xs filter (!isEven), result ++ addEven)\n            \n           \
    \ // Recurse on the remaining elements \n            unique(rest, result ++ removeEven)\n\
    \        }\n        unique(x)", "        var result : List[Long] = Nil\n     \
    \   var result : List[Long] = Nil\n        for (i <- 0 until x.size){\n      \
    \      if (x(i) %2 == 0){\n                if (result == Nil){\n             \
    \       result :+ x(i)\n                } else {\n                    result :+\
    \ x(i)\n                }\n            }\n        }\n        result", "      \
    \  val xs = x.toStream\n        // Using Stream\n        xs.distinct\n       \
    \     .map(_.toString.dropWhile(_.isDigit).drop(1).takeWhile(_.isDigit))\n   \
    \         .filter(x => x != \"\")\n            .filterNot(x => x.toLong % 2 ==\
    \ 0)\n            .sort"]
stop_tokens:
- "\n    }\n"
