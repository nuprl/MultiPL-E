language: scala
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Write code here\n        if (a == 1l) \n   \
    \     || (a == 3l) \n        || (a == 5l) \n        || (a == 7l) \n        ||\
    \ (a == 9l) \n        || (a == 11l) \n        || (a == 13l) \n        || (a ==\
    \ 15l) \n        || (a == 17l) \n        || (a == 19l) \n        || (a == 21l)\
    \ \n        || (a == 23l) \n        || (a == 25l) \n        || (a == 27l) \n \
    \       || (a == 29l) \n        || (a == 31l) \n        || (a == 33l) \n     \
    \   || (a == 35l) \n        || (a == 37l) \n        || (a == 39l) \n        ||\
    \ (a == 41l) \n        || (a == 43l) \n        || (a == 45l) \n        || (a ==\
    \ 47l) \n        || (a == 49l) \n        || (a == 51l) \n        || (a == 53l)\
    \ \n        || (a == 55l) \n        || (a == 57l) \n        || (a == 59l) \n \
    \       || (a == 61l) \n        || (a == 63l) \n        || (a == 65l) \n     \
    \   || (a == 67l) \n        || (a == 69l) \n        || (a == 71l) \n        ||\
    \ (a == 73l) \n        || (a == 75l) \n        || (a == 77l) \n        || (a ==\
    \ 79l) \n        || (a == 81l) \n        || (a == 83l) \n        || (a == 85l)\
    \ \n        || (a == 87l) \n        || (a == 89l) \n        || (a == 91l) \n \
    \       || (a == 93l) \n        || (a == 95l) \n        || (a == 97l) \n     \
    \   || (a == 99l) \n        || (a == 101l) \n        || (a == 103l) \n       \
    \ || (a == 105l) \n        || (a == 107l) \n        || (a == 109l) \n        ||\
    \ (a == 111l) \n        || (a == 113l) \n        || (a == 115l) \n        || (a\
    \ == 117l) \n        || (a == 119l) \n        || (a == 121l) \n        || (a ==\
    \ 123l) \n        || (a == 125l) \n        || (a == 127l) \n        || (a == 129l)\
    \ \n        || (a == 131l) \n        || (a == 133l) \n        || (a == 135l) \n\
    \        || (a == 137l) \n        || (a == 139l) \n        || (a == 141l) \n \
    \       || (a == 143l) \n\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpti8hdi85.scala:23:8 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        || (a == \e[31m3l\e[0m) \n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Not found: ||\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num = a.toLong\n        val result = 1l / math.pow(num,\
    \ 3)\n        if(num == result) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkww_1mt.scala:30)\n\tat Problem.main(tmpdkww_1mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = (3l*3l*3l)\n        val cube3 = cube*cube*cube\n\
    \        return ((a*a > cube3) && (a*a < cube3+cube))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwc6kn0s_.scala:26)\n\tat Problem.main(tmpwc6kn0s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) {\n            return true\n      \
    \  }\n        if (a < 0){\n            return false\n        }\n        if (a\
    \ % 1 != 0 || a == 0){\n            return false\n        }\n        if (a%3 ==\
    \ 0) {\n            return true\n        }\n        if (a%6 == 0) {\n        \
    \    return true\n        }\n        if (a%24 == 0) {\n            return true\n\
    \        }\n        if (a%120 == 0) {\n            return true\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3m6ug0t.scala:45)\n\tat Problem.main(tmpx3m6ug0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // TODO: Write code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph8wv5bdg.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// TODO: Write\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a==0) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe50gz49t.scala:24)\n\tat Problem.main(tmpe50gz49t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var isCube = True\n        var isCubeCount = 0\n\
    \        while (a > 0) {\n            if ((a%2) == 0) {\n                if ((a\
    \ / 2) == 0) {\n                    isCube = True\n                } else {\n\
    \                    isCube = False\n                }\n            } else {\n\
    \                if ((a / 2) == 0) {\n                    isCube = False\n   \
    \             }\n            }\n            a -= 1\n            isCubeCount +=\
    \ 1\n        }\n        return isCube\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm18nilk.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36misCube\e[0m = True\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm18nilk.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    isCube\
    \ = True\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: True\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcm18nilk.scala:28:29 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    isCube = False\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcm18nilk.scala:32:29 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                    isCube = False\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcm18nilk.scala:35:14\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            a -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean a.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.length.toLong\n        val\
    \ square = a.toString.length.toLong * a.toString.length.toLong\n        if(cube\
    \ == square)\n            true\n        else\n            false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4oxwnm77.scala:30)\n\tat Problem.main(tmp4oxwnm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a<=0l) return false\n        if(Math.abs(a)%2==0)\
    \ return true\n        return isCube(a/Math.pow(2, a))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0c_uiq1b.scala:23:15 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m isCube(a/Math.pow(\e[31m2\e\
    [0m, a))\n\e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \            Not found: isCube\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = (3l) ** (2l)\n        val cube3 = (3l)\
    \ ** (3l)\n        val cube5 = (5l) ** (3l)\n        a >= cube && a <= cube3 &&\
    \ a >= cube5 || a >= cube3 && a <= cube5\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99ujkecr.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcube\e[0m = (\e[31m3l\e\
    [0m) ** (\e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value ** is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp99ujkecr.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcube3\e[0m = (\e[31m3l\e\
    [0m) ** (\e[31m3l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value ** is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp99ujkecr.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcube5\e[0m = (\e[31m5l\e\
    [0m) ** (\e[31m3l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value ** is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26_5fi2j.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \n\e[31m22 |\e[0m  \
    \  }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubed=a**3\n        val count1=a.toInt\n  \
    \      val count2=count1.toInt\n        count1>=3&&count2>=1&&cubed==count1**3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpty0fgpjm.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubed\e[0m=a**\e[31m3\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m        \
    \          value ** is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a > 0 ) {\n            if (a % 3==0) \n   \
    \             return true;\n        }\n        return false;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnahbampc.scala:28)\n\tat Problem.main(tmpnahbampc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a.mod(3) == 0) true\n        else false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4p5az02.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(a.mod(\e[31m3\e[0m) == \e[31m0\e\
    [0m) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue mod is not a member of Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0l)\n            return true\n       \
    \ if (a < 0)\n            throw new IllegalArgumentException\n        val b =\
    \ a * a * a * a\n        return (b == (24 * 4 * a * a))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5orngkql.scala:29)\n\tat Problem.main(tmp5orngkql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n       if (a == 1l || a == 2l || a == 3l || a == 4l ||\
    \ a == 5l || a == 6l || a == 7l || a == 8l || a == 9l) {\n           true\n  \
    \     } else {\n           false\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8yxm1_sm.scala:29)\n\tat Problem.main(tmp8yxm1_sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b = a / 3\n        val c = a / 3\n        val\
    \ d = a / 3\n        if(a <= 0) true\n        else if(b >= 4) return true\n  \
    \      else if(c>=4) return true\n        else return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1so41fki.scala:30)\n\tat Problem.main(tmp1so41fki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a % 4 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2z3n75a.scala:24)\n\tat Problem.main(tmpf2z3n75a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0)\n            return true\n        else\
    \ if (a < 0)\n            return false\n        val res = a * a * a\n        val\
    \ r = a / res\n        val r = r * r * r\n        if (Math.sqrt(a) == a)\n   \
    \         return true\n        val n = Math.sqrt(r)\n        if (n == a * n)\n\
    \            return true\n        val s = (a * a + r) / (n * n)\n        if (s\
    \ == r)\n            return true\n        if (s == 1)\n            return true\n\
    \        val e = (r + Math.sqrt(r * r - a * n)) / n\n        if (e == r)\n   \
    \         return true\n        if (e == 1)\n            return true\n        val\
    \ e2 = r + Math.sqrt(r * r - e2 * e)\n        if (e2 == r)\n            return\
    \ true\n        if (e2 == 1)\n            return true\n        if (e == e2)\n\
    \            return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3w5f4uqp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3w5f4uqp.scala:43:39 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36me2\e[0m = r + Math.sqrt(r\
    \ * r - e2 * e)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Recursive \e[33mvalue\e\
    [0m \e[35me2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0)\n            return true\n        else\
    \ if (a<0l || a>0l)\n            return false\n        else\n            return\
    \ (a % 6==0l || a % 6==4l) && (a % 3==0l || a % 3==3l) && (a % 5==0l || a % 5==5l)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfg38b5wi.scala:29)\n\tat Problem.main(tmpfg38b5wi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a < 0l || a > 180l) {\n            false\n\
    \        }\n        else {\n            val list = for {\n                i <-\
    \ 0 until a\n                j <- 0 until a\n            } yield i*i + j*j ==\
    \ a*a\n            list.count(_ == true) > 0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv8uc2et9.scala:26:29\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                i <- \e[31m0\e\
    [0m until a\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0m                             Found:    (a : Long)\n\e[31m   |\e[0m \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv8uc2et9.scala:27:29 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                j <- \e[31m0\e[0m until a\n\e[31m\e[31m  \
    \ |\e[0m                             ^\e[0m\n\e[31m   |\e[0m                 \
    \            Found:    (a : Long)\n\e[31m   |\e[0m                           \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a % cubes == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mcj_gor.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        a % cubes == \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Not found: cubes\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // ...\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s5qsztj.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// ...\e[0m\n\e\
    [31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = a / 4l\n        if (a % 4l == 0)\n    \
    \        return (true) // a cube of a number\n        val y = x / 2l\n       \
    \ val z = y / 2l\n        if (x == y) && (y == z) && (z == a)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2fkhmcy.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (x == y) && (y == z) && (z == a)\n\
    \e[31m\e[31m   |\e[0m                    ^^\e[0m\n\e[31m   |\e[0m            \
    \        Not found: &&\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b = a * a * a\n        if (b == a)\n      \
    \      true\n        else if (b == 0)\n            false\n        else\n     \
    \       false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9_u0nu6.scala:33)\n\tat Problem.main(tmpq9_u0nu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Write your code here\n        \n        var\
    \ cube = 0\n        for (i <- a until (a / 3)) {\n            cube *= i\n    \
    \    }\n        if (a % 3 == 0) return true\n        return cube == a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_6gdscs.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            cube *= i\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var cube : Long = 1\n        while (!isPrime(cube)\
    \ && (a > 0)) {\n            cube = cube * 3\n            a = a - 1\n        }\n\
    \        return a <= 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztffckv_.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m (!isPrime(cube) && (a > \e[31m0\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpztffckv_.scala:24:14 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            a = a - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val result = true\n        val cube = a / 3l\n\
    \        if(!cube.equals(0))\n            result = false\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptf4_sqg8.scala:24:19 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result = \e[31mfalse\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        require(a >= 0l, \"Input value must be non-negative\"\
    )\n        a match {\n            case 0 => true\n            case _ if a >= 1l\
    \ => a match {\n                case 0l => true\n                case _ if a >=\
    \ 2l => a match {\n                    case 0l => true\n                    case\
    \ _ if a >= 3l => a match {\n                        case 0l => true\n       \
    \                 case _ if a >= 4l => a match {\n                           \
    \ case 0l => true\n                            case _ if a >= 5l => a match {\n\
    \                                case 0l => true\n                           \
    \     case _ if a >= 6l => a match {\n                                    case\
    \ 0l => true\n                                    case _ if a >= 7l => a match\
    \ {\n                                        case 0l => true\n               \
    \                         case _ if a >= 8l => a match {\n                   \
    \                         case 0l => true\n                                  \
    \          case _ if a >= 9l => a match {\n                                  \
    \              case 0l => true\n                                             \
    \   case _ if a >= 10l => a match {\n                                        \
    \            case 0l => true\n                                               \
    \     case _ if a >= 11l => a match {\n                                      \
    \                  case 0l => true\n                                         \
    \               case _ if a >= 12l => a match {\n                            \
    \                                case 0l => true\n                           \
    \                                 case _ if a >= 13l => a match {\n          \
    \                                                      case 0l => true\n     \
    \                                                           case _ if a >= 14l\
    \ => a match {\n                                                             \
    \       case 0l => true\n                                                    \
    \                case _ if a >= 15l => a match {\n                           \
    \                                             case 0l => true\n              \
    \                                                          case _ if a >= 16l\
    \ => a match {\n                                                             \
    \               case 0l => true\n                                            \
    \                                case _ if a >= 17l => a match {\n           \
    \                                                                     case 0l\
    \ => true\n                                                                  \
    \              case _ if a >= 18l => a match {\n                             \
    \                                                       case 0l => true\n    \
    \                                                                            \
    \    case _ if a >= 19l => a match {\n                                       \
    \                                                 case 0l => true\n          \
    \                                                                            \
    \  case _ if a >= 20l => a match {\n                                         \
    \                                                   case 0l => true\n        \
    \                                                                            \
    \        case _ if a >= 21l => a match {\n                                   \
    \                                                             case 0l => true\n\
    \                                                                            \
    \                    case _ if a >= 22l => a match {\n                       \
    \                                                                            \
    \ case 0l => true\n                                                          \
    \                                          case _ if a >= 23l => a match {\n \
    \                                                                            \
    \                           case 0l => true\n                                \
    \                                                                        case\
    \ _ if a >= 24l => a match {\n                                               \
    \                                                             case 0l => \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc90y0l4x.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc90y0l4x.scala:82:5\
    \ ---------------------\e[0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpc90y0l4x.scala:73:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num = a\n        val x = num * num\n      \
    \  val y = x * x\n        val z = y * y\n        val t = z * z\n        num <=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pard9ft.scala:29)\n\tat Problem.main(tmp6pard9ft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes = mutable.ListBuffer(1l)\n        while\
    \ (!cubes.contains(a)) {\n            cubes += cubes.head * cubes.head * cubes.head\
    \ \n            a = a - 1l\n        }\n        (cubes.contains(a)) || (!cubes.contains(a))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpae8pvv0j.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpae8pvv0j.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            a = a - \e[31m1l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = a.toString.toInt\n        if (x <= 0) true\n\
    \        else if (x > 0) (Math.pow(x,3) == (a))\n        else false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd23zdp39.scala:30)\n\tat Problem.main(tmpd23zdp39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a.toLong == 0) return true\n        if(a.toLong\
    \ == 1) return true\n        val a2 = a * a\n        if(a2.toLong == 1) return\
    \ true\n        val a3 = a2 * a2\n        if(a3.toLong == 1) return true\n   \
    \     val a4 = a3 * a3\n        if(a4.toLong == 1) return true\n        val a5\
    \ = a4 * a4\n        if(a5.toLong == 1) return true\n        val a6 = a5 * a5\n\
    \        if(a6.toLong == 1) return true\n        val a7 = a6 * a6\n        if(a7.toLong\
    \ == 1) return true\n        val a8 = a7 * a7\n        if(a8.toLong == 1) return\
    \ true\n        val a9 = a7 * a8\n        if(a9.toLong == 1) return true\n   \
    \     val a10 = a8 * a8\n        if(a10.toLong == 1) return true\n        val\
    \ a11 = a9 * a9\n        if(a11.toLong == 1) return true\n        val a12 = a10\
    \ * a10\n        if(a12.toLong == 1) return true\n        val a13 = a11 * a11\n\
    \        if(a13.toLong == 1) return true\n        val a14 = a12 * a12\n      \
    \  if(a14.toLong == 1) return true\n        val a15 = a13 * a13\n        if(a15.toLong\
    \ == 1) return true\n        val a16 = a14 * a14\n        if(a16.toLong == 1)\
    \ return true\n        val a17 = a15 * a15\n        if(a17.toLong == 1) return\
    \ true\n        val a18 = a16 * a16\n        if(a18.toLong == 1) return true\n\
    \        val a19 = a17 * a17\n        if(a19.toLong == 1) return true\n      \
    \  val a20 = a18 * a18\n        if(a20.toLong == 1) return true\n        val a21\
    \ = a19 * a19\n        if(a21.toLong == 1) return true\n        val a22 = a20\
    \ * a20\n        if(a22.toLong == 1) return true\n        val a23 = a21 * a21\n\
    \        if(a23.toLong == 1) return true\n        val a24 = a22 * a22\n      \
    \  if(a24.toLong == 1) return true\n        val a25 = a23 * a23\n        if(a25.toLong\
    \ == 1) return true\n        val a26 = a24 * a24\n        if(a26.toLong == 1)\
    \ return true\n        val a27 = a25 * a25\n        if(a27.toLong == 1) return\
    \ true\n        val a28 = a26 * a26\n        if(a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp4dpw654.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpp4dpw654.scala:76:11 --------------------\e[0m\e[0m\n\e[31m76 |\e[0m\
    \        \e[33mif\e[0m(a\n\e[31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e\
    [0m           Found:    (a : Long)\n\e[31m   |\e[0m           Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var b = false\n        var c = a.toInt\n      \
    \  var d = 1\n        var e = -1\n        while(c > 0 && !b){\n            if\
    \ (c == d) b = true\n            d = d*2\n            e = e*2\n            c -=\
    \ 1\n        }\n        return b\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y4bx7jf.scala:36)\n\tat Problem.main(tmp8y4bx7jf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num = a\n        val cube = 1l\n        var\
    \ result = true\n        while (result && num > 0) {\n            result = num\
    \ % cube == 0\n            num /= cube\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdlrs1wwf.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            num /= cube\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean num.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if ((1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdll6q0fp.scala:21:523 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m ((\e[31m1l\e[0m*\e[31m1l\e[0m*\e\
    [31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e\
    [0m*\e[31m1l\e[0m*\e[31m1"
  stdout: ''
  timestamp: 1659979877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Write your code here.\n        // Solve the\
    \ problem\n        val x = a.toInt\n        if (x % 3L == 0L) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoex19t0r.scala:28)\n\tat Problem.main(tmpoex19t0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var result = true\n        if (a < 1) result =\
    \ false\n        if (a > 180) result = false\n        if (a % 3) == 0 result =\
    \ false\n        if (a % 5) == 0 result = false\n        if (a % 7) == 0 result\
    \ = false\n        if (a == 0) result = false\n        if (a == 1) result = false\n\
    \        if (a == 2) result = false\n        if (a == 3) result = false\n    \
    \    if (a == 4) result = false\n        if (a == 5) result = false\n        if\
    \ (a == 6) result = false\n        if (a == 7) result = false\n        if (a ==\
    \ 8) result = false\n        if (a == 9) result = false\n        if (a == 10)\
    \ result = false\n        if (a == 11) result = false\n        if (a == 12) result\
    \ = false\n        if (a == 13) result = false\n        if (a == 14) result =\
    \ false\n        if (a == 15) result = false\n        if (a == 16) result = false\n\
    \        if (a == 17) result = false\n        if (a == 18) result = false\n  \
    \      if (a == 19) result = false\n        if (a == 20) result = false\n    \
    \    if (a == 21) result = false\n        if (a == 22) result = false\n      \
    \  if (a == 23) result = false\n        if (a == 24) result = false\n        if\
    \ (a == 25) result = false\n        if (a == 26) result = false\n        if (a\
    \ == 27) result = false\n        if (a == 28) result = false\n        if (a ==\
    \ 29) result = false\n        if (a == 30) result = false\n        if (a == 31)\
    \ result = false\n        if (a == 32) result = false\n        if (a == 33) result\
    \ = false\n        if (a == 34) result = false\n        if (a == 35) result =\
    \ false\n        if (a == 36) result = false\n        if (a == 37) result = false\n\
    \        if (a == 38) result = false\n        if (a == 39) result = false\n  \
    \      if (a == 40) result = false\n        if (a == 41) result = false\n    \
    \    if (a == 42) result = false\n        if (a == 43) result = false\n      \
    \  if (a == 44) result = false\n        if (a == 45) result = false\n        if\
    \ (a == 46) result = false\n        if (a == 47) result = false\n        if (a\
    \ == 48) result = false\n        if (a == 49) result = false\n        if (a ==\
    \ 50) result = false\n        if (a == 51) result = false\n        if (a == 52)\
    \ result = false\n        if (a == 53) result = false\n        if (a == 54) result\
    \ = false\n        if (a == 55) result = false\n        if (a == 56) result =\
    \ false\n        if (a == 57) result = false\n        if (a == 58) result = false\n\
    \        if (a == 59) result = false\n        if (a == 60) result = false\n  \
    \      if (a == 61) result = false\n        if (a == 62) result = false\n    \
    \    if (a == 63) result = false\n        if (a == 64) result = false\n      \
    \  if (a == 65) result = false\n        if (a == 66) result = false\n        if\
    \ (a == 67) result = false\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpohyauhpw.scala:24:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (a % \e[31m3\e[0m) == \e[31m0\e\
    [0m result = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                     end of statement expected but integer\
    \ literal found\n\e[31m\e[31m-- Error: /tmp/tmpohyauhpw.scala:25:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (a % \e[31m5\e[0m) == \e[31m0\e\
    [0m result = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                     end of statement expected but integer\
    \ literal found\n\e[31m\e[31m-- Error: /tmp/tmpohyauhpw.scala:26:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (a % \e[31m7\e[0m) == \e[31m0\e\
    [0m result = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                     end of statement expected but integer\
    \ literal found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpohyauhpw.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (a % \e\
    [31m3\e[0m) == \e[31m0\e[0m result = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpohyauhpw.scala:24:19\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mif\e[0m (a % \e[31m3\e[0m) == \e[31m0\e[0m result = \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m             \
    \      missing arguments for value of type Any => Boolean\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpohyauhpw.scala:25:12 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (a % \e[31m5\e[0m) == \e[31m0\e[0m result\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e\
    [0m            Found:    Long\n\e[31m   |\e[0m            Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compili"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Your code here\n        true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_prcqxy.scala:26)\n\tat Problem.main(tmpg_prcqxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a < 1l) false\n        if(a == 0l) true\n  \
    \      if(a%1l == 0l) false\n        if(a%2l == 0l) false\n        if(a%3l ==\
    \ 0l) false\n        if(a%4l == 0l) false\n        if(a%5l == 0l) false\n    \
    \    if(a%6l == 0l) false\n        if(a%7l == 0l) false\n        if(a%8l == 0l)\
    \ false\n        if(a%9l == 0l) false\n        if(a%10l == 0l) false\n       \
    \ if(a%11l == 0l) false\n        if(a%12l == 0l) false\n        if(a%13l == 0l)\
    \ false\n        if(a%14l == 0l) false\n        if(a%15l == 0l) false\n      \
    \  if(a%16l == 0l) false\n        if(a%17l == 0l) false\n        if(a%18l == 0l)\
    \ false\n        if(a%19l == 0l) false\n        if(a%20l == 0l) false\n      \
    \  if(a%21l == 0l) false\n        if(a%22l == 0l) false\n        if(a%23l == 0l)\
    \ false\n        if(a%24l == 0l) false\n        if(a%25l == 0l) false\n      \
    \  if(a%26l == 0l) false\n        if(a%27l == 0l) false\n        if(a%28l == 0l)\
    \ false\n        if(a%29l == 0l) false\n        if(a%30l == 0l) false\n      \
    \  if(a%31l == 0l) false\n        if(a%32l == 0l) false\n        if(a%33l == 0l)\
    \ false\n        if(a%34l == 0l) false\n        if(a%35l == 0l) false\n      \
    \  if(a%36l == 0l) false\n        if(a%37l == 0l) false\n        if(a%38l == 0l)\
    \ false\n        if(a%39l == 0l) false\n        if(a%40l == 0l) false\n      \
    \  if(a%41l == 0l) false\n        if(a%42l == 0l) false\n        if(a%43l == 0l)\
    \ false\n        if(a%44l == 0l) false\n        if(a%45l == 0l) false\n      \
    \  if(a%46\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvol1ovk.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbvol1ovk.scala:68:11 --------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \        \e[33mif\e[0m(a%\e[31m46\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    Long\n\e[31m   |\e[0m           Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpbvol1ovk.scala:21:19\
    \ ----------------\e[0m\e[0m\n\e[33m21 |\e[0m        \e[33mif\e[0m(a < \e[31m1l\e\
    [0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                   ^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpbvol1ovk.scala:22:20 ----------------\e[0m\e[0m\n\e[33m22 |\e\
    [0m        \e[33mif\e[0m(a == \e[31m0l\e[0m) \e[31mtrue\e[0m\n\e[33m\e[33m   |\e\
    [0m                    ^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpbvol1ovk.scala:23:23 ----------------\e\
    [0m\e[0m\n\e[33m23 |\e[0m        \e[33mif\e[0m(a%\e[31m1l\e[0m == \e[31m0l\e[0m)\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                       ^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpbvol1ovk.scala:24:23 ----------------\e[0m\e[0m\n\e[33m24 |\e\
    [0m        \e[33mif\e[0m(a%\e[31m2l\e[0m == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e\
    [33m\e[33m   |\e[0m                       ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a==0l) true\n        else if ((a<0l) || (a>180))\
    \ false\n        else ((a%180)==0l) && ((a%180)<60l) && ((a%180)>0l) && ((a%180)<180l)\
    \ && ((a%180)>-60l) && ((a%180)<-180l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1czpi1i0.scala:23:107 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m ((a%\e[31m180\e[0m)==\e[31m0l\e\
    [0m) && ((a%\e[31m180\e[0m)<\e[31m60l\e[0m) && ((a%\e[31m180\e[0m)>\e[31m0l\e\
    [0m) && ((a%\e[31m180\e[0m)<\e[31m180l\e[0m) && ((a%\e[31m180\e[0m)>-\e[31m60l\e\
    [0m) && ((a%\e[31m180\e[0m)<-\e[31m180l\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                      ^^\e[0m\n\e[31m   |\e[0m                              \
    \              ')' expected, but '<-' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1czpi1i0.scala:23:89 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33melse\e[0m ((a%\e[31m180\e[0m)==\e[31m0l\e[0m) && ((a%\e[31m180\e\
    [0m)<\e[31m60l\e[0m) && ((a%\e[31m180\e[0m)>\e[31m0l\e[0m) && ((a%\e[31m180\e\
    [0m)<\e[31m180l\e[0m) && ((a%\e[31m180\e[0m)>-\e[31m60l\e[0m) && ((a%\e[31m180\e\
    [0m)<-\e[31m180l\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                                                  ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value >- is not a member of Long - did you mean Long.>=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1czpi1i0.scala:23:101 -------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m ((a%\e[31m180\e[0m)==\e[31m0l\e\
    [0m) && ((a%\e[31m180\e[0m)<\e[31m60l\e[0m) && ((a%\e[31m180\e[0m)>\e[31m0l\e\
    [0m) && ((a%\e[31m180\e[0m)<\e[31m180l\e[0m) && ((a%\e[31m180\e[0m)>-\e[31m60l\e\
    [0m) && ((a%\e[31m180\e[0m)<-\e[31m180l\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \                                Required: Boolean\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val l = if (a > 0) a else -1l\n        var flag\
    \ = 0\n        for (i = 1l to (l+1) by 1l) {\n            flag = flag * i\n  \
    \      }\n        flag == a\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc2k6vldg.scala:23:15 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i = \e[31m1l\e[0m to (l+\e[31m1\e\
    [0m) by \e[31m1l\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m \
    \  |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpc2k6vldg.scala:23:36 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mfor\e[0m (i = \e[31m1l\e[0m to (l+\e[31m1\e[0m) by\
    \ \e[31m1l\e[0m) {\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc2k6vldg.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc2k6vldg.scala:25:9\
    \ -------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a <= 0l) false \n        else (isCube(a)) \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmpuy3kdd.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (isCube(a)) \n\e[31m\e[31m  \
    \ |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Not found: isCube\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube_power = 1l\n        val cube = 1l\n  \
    \      a foreach (_ % cube_power != 0)\n        if ( cube_power % a == 0)\n  \
    \          return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfodj_hm2.scala:23:10 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        a foreach (_ % cube_power != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value foreach\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num = (1l to a).toList\n        var cube :\
    \ Long = 1l\n        for(i <- num) {\n            cube *= i\n        }\n     \
    \   if(cube == a)\n            true\n        else\n            false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9curna2j.scala:33)\n\tat Problem.main(tmp9curna2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var n = a\n        while (n > 1) {\n          \
    \  if (n % 2 == 0) return false\n            n /= 2\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qu__agn.scala:32)\n\tat Problem.main(tmp6qu__agn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a+a+1l)*(a+a+2l)*(a+a+3l) <- (1l*1l*1l) <- (a*a*a)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp00nn82gh.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (a+a+\e[31m1l\e[0m)*(a+a+\e[31m2l\e[0m)*(a+a+\e\
    [31m3l\e[0m) <- (\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m) <- (a*a*a)\n\e[31m\e\
    [31m   |\e[0m                                   ^^\e[0m\n\e[31m   |\e[0m     \
    \                           end of statement expected but '<-' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp00nn82gh.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (a+a+\e[31m1l\e[0m)*(a+a+\e[31m2l\e[0m)*(a+a+\e\
    [31m3l\e[0m) <- (\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m) <- (a*a*a)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Long\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var x =  (a / 3l).toInt\n        while ( x <= 0\
    \ ){\n            x = (x * (x*6l)).asInstanceOf[Long]\n        }\n        (1l).asInstanceOf[Long]\
    \ == x\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_vdhzhd.scala:23:41\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            x = (x * (x*\e[31m6l\e\
    [0m)).asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Long\n\e[31m   |\e[0m          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Write your code here.\n        if(a == 1)\n\
    \            return true\n        else if(a < 0)\n            return false\n \
    \       else if(a > 0)\n            return iscube(a-1)\n        else if(a % 3\
    \ == 0)\n            return true\n        else\n            return iscube(a/3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpirspi3ap.scala:35)\n\tat Problem.main(tmpirspi3ap.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a <= 0l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvh4fsk4f.scala:24)\n\tat Problem.main(tmpvh4fsk4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val result = a * a * a\n        val result = result\
    \ - a * a * a\n        result < 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe8svhwep.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result - a\
    \ * a * a\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val square = math.pow(a, 2l) * math.pow(3l, 2l)\
    \ * math.pow(5l, 2l) * math.pow(7l, 2l) * math.pow(9l, 2l) * math.pow(11l, 2l)\
    \ * math.pow(13l, 2l) * math.pow(15l, 2l) * math.pow(17l, 2l) * math.pow(19l,\
    \ 2l) * math.pow(21l, 2l) * math.pow(23l, 2l) * math.pow(25l, 2l) * math.pow(27l,\
    \ 2l) * math.pow(29l, 2l) * math.pow(31l, 2l) * math.pow(33l, 2l) * math.pow(35l,\
    \ 2l) * math.pow(37l, 2l) * math.pow(39l, 2l) * math.pow(41l, 2l) * math.pow(43l,\
    \ 2l) * math.pow(45l, 2l) * math.pow(47l, 2l) * math.pow(49l, 2l) * math.pow(51l,\
    \ 2l) * math.pow(53l, 2l) * math.pow(55l, 2l) * math.pow(57l, 2l) * math.pow(59l,\
    \ 2l) * math.pow(61l, 2l) * math.pow(63l, 2l) * math.pow(65l, 2l) * math.pow(67l,\
    \ 2l) * math.pow(69l, 2l) * math.pow(71l, 2l) * math.pow(73l, 2l) * math.pow(75l,\
    \ 2l) * math.pow(77l, 2l) * math.pow(79l, 2l) * math.pow(81l, 2l) * math.pow(83l,\
    \ 2l) * math.pow(85l, 2l) * math.pow(87l, 2l) * math.pow(89l, 2l) * math.pow(91l,\
    \ 2l) * math.pow(93l, 2l) * math.pow(95l, 2l) * math.pow(97l, 2l) * math.pow(99l,\
    \ 2l) * math.pow(101l, 2l) * math.pow(103l, 2l) * math.pow(105l, 2l) * math.pow(107l,\
    \ 2l) * math.pow(109l, 2l) * math.pow(111l, 2l) * math.pow(113l, 2l) * math.pow(115l,\
    \ 2l) * math.pow(117l, 2l) * math.pow(119l, 2l) * math.pow(121l, 2l) * math.pow(123l,\
    \ 2l) * math.pow(125l, 2l) * math.pow(127l, 2l)\n        val cuberoot = math.pow(a,\
    \ 3l)\n        return cuberoot == square\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpniks922s.scala:26)\n\tat Problem.main(tmpniks922s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0l) {\n            return true\n     \
    \   }\n        var n = (a / 3l)\n        while (n % 4 == 0) {\n            n /=\
    \ 4\n        }\n        if (n == 1l) {\n            return true\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var result : Boolean = true\n        val cube =\
    \ new scala.collection.mutable.HashMap[Int,Int]()\n        val cubemap = scala.collection.mutable.HashMap[Int,Int]()\n\
    \        cube.put(1, 1)\n        cube.put(2, 2)\n        cube.put(3,3)\n     \
    \   cube.put(4,4)\n        cube.put(5,5)\n        cube.put(6,6)\n        cube.put(7,7)\n\
    \        cube.put(8,8)\n        cube.put(9,9)\n        cube.put(10,10)\n     \
    \   cube.put(11,11)\n        cube.put(12,12)\n        cube.put(13,13)\n      \
    \  cube.put(14,14)\n        cube.put(15,15)\n        cube.put(16,16)\n       \
    \ cube.put(17,17)\n        cube.put(18,18)\n        cube.put(19,19)\n        cube.put(20,20)\n\
    \        cube.put(21,21)\n        cube.put(22,22)\n        cube.put(23,23)\n \
    \       cube.put(24,24)\n        cube.put(25,25)\n        cube.put(26,26)\n  \
    \      cube.put(27,27)\n        cube.put(28,28)\n        cube.put(29,29)\n   \
    \     cube.put(30,30)\n        cube.put(31,31)\n        cube.put(32,32)\n    \
    \    cube.put(33,33)\n        cube.put(34,34)\n        cube.put(35,35)\n     \
    \   cube.put(36,36)\n        cube.put(37,37)\n        cube.put(38,38)\n      \
    \  cube.put(39,39)\n        cube.put(40,40)\n        cube.put(41,41)\n       \
    \ cube.put(42,42)\n        cube.put(43,43)\n        cube.put(44,44)\n        cube.put(45,45)\n\
    \        cube.put(46,46)\n        cube.put(47,47)\n        cube.put(48,48)\n \
    \       cube.put(49,49)\n        cube.put(50,50)\n        cube.put(51,51)\n  \
    \      cube.put(52,52)\n        cube.put(53,53)\n        cube.put(54,54)\n   \
    \     cube.put(55,55)\n        cube.put(56,56)\n        cube.put(57,57)\n    \
    \    cube.put(58,58)\n        cube.put(59,59)\n        cube.put(60,60)\n     \
    \   \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp62yrjwq8.scala:83:16\
    \ --------------------\e[0m\e[0m\n\e[31m83 |\e[0m        cube.put(\e[31m60\e[0m,\e\
    [31m60\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Option[Int]\n\e[31m   |\e[0m        Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes : mutable.Set[Long] = mutable.Set[Long](1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l,\
    \ 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l,\
    \ 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l,\
    \ 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l)\n    \
    \    val cubeLengths = cubes.size\n        if (cubeLengths <= a) {\n         \
    \   cubeLengths\n        } else {\n            if (cubeLengths - a == 1) {\n \
    \               cubes.contains(a)\n            } else {\n                cubes.subsetOf(a\
    \ - (cubeLengths - 1))\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ec6a_bw.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m](\e[31m1l\e[0m, \e[31m2l\e[0m, \e\
    [31m3l\e[0m, \e[31m4l\e[0m, \e[31m5l\e[0m, \e[31m6l\e[0m, \e[31m7l\e[0m, \e[31m8l\e\
    [0m, \e[31m9l\e[0m, \e[31m10l\e[0m, \e[31m11l\e[0m, \e[31m12l\e[0m, \e[31m13l\e\
    [0m, \e[31m14l\e[0m, \e[31m15l\e[0m, \e[31m16l\e[0m, \e[31m17l\e[0m, \e[31m18l\e\
    [0m, \e[31m19l\e[0m, \e[31m20l\e[0m, \e[31m21l\e[0m, \e[31m22l\e[0m, \e[31m23l\e\
    [0m, \e[31m24l\e[0m, \e[31m25l\e[0m, \e[31m26l\e[0m, \e[31m27l\e[0m, \e[31m28l\e\
    [0m, \e[31m29l\e[0m, \e[31m30l\e[0m, \e[31m31l\e[0m, \e[31m32l\e[0m, \e[31m33l\e\
    [0m, \e[31m34l\e[0m, \e[31m35l\e[0m, \e[31m36l\e[0m, \e[31m37l\e[0m, \e[31m38l\e\
    [0m, \e[31m39l\e[0m, \e[31m40l\e[0m, \e[31m41l\e[0m, \e[31m42l\e[0m, \e[31m43l\e\
    [0m, \e[31m44l\e[0m, \e[31m45l\e[0m, \e[31m46l\e[0m, \e[31m47l\e[0m, \e[31m48l\e\
    [0m, \e[31m49l\e[0m, \e[31m50l\e[0m, \e[31m51l\e[0m, \e[31m52l\e[0m, \e[31m53l\e\
    [0m, \e[31m54l\e[0m, \e[31m55l\e[0m, \e[31m56l\e[0m, \e[31m57l\e[0m, \e[31m58l\e\
    [0m, \e[31m59l\e[0m, \e[31m60l\e[0m, \e[31m61l\e[0m, \e[31m62l\e[0m, \e[31m63l\e\
    [0m, \e[31m64l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9ec6a_bw.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m](\e[31m1l\e[0m, \e[31m2l\e[0m, \e\
    [31m3l\e[0m, \e[31m4l\e[0m, \e[31m5l\e[0m, \e[31m6l\e[0m, \e[31m7l\e[0m, \e[31m8l\e\
    [0m, \e[31m9l\e[0m, \e[31m10l\e[0m, \e[31m11l\e[0m, \e[31m12l\e[0m, \e[31m13l\e\
    [0m, \e[31m14l\e[0m, \e[31m15l\e[0m, \e[31m16l\e[0m, \e[31m17l\e[0m, \e[31m18l\e\
    [0m, \e[31m19l\e[0m, \e[31m20l\e[0m, \e[31m21l\e[0m, \e[31m22l\e[0m, \e[31m23l\e\
    [0m, \e[31m24l\e[0m, \e[31m25l\e[0m, \e[31m26l\e[0m, \e[31m27l\e[0m, \e[31m28l\e\
    [0m, \e[31m29l\e[0m, \e[31m30l\e[0m, \e[31m31l\e[0m, \e[31m32l\e[0m, \e[31m33l\e\
    [0m, \e[31m34l\e[0m, \e[31m35l\e[0m, \e[31m36l\e[0m, \e[31m37l\e[0m, \e[31m38l\e\
    [0m, \e[31m39l\e[0m, \e[31m40l\e[0m, \e[31m41l"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b: List[Long] = List(a, a+1, a+1, a+2, a+2,\
    \ a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val c: List[Long] = List(a, a+1,\
    \ a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val d: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ e: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val f: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5,\
    \ a+5, a+6)\n        val g: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3,\
    \ a+4, a+4, a+5, a+5, a+6)\n        val h: List[Long] = List(a, a+1, a+1, a+2,\
    \ a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val i: List[Long] = List(a,\
    \ a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val j: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ k: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val l: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5,\
    \ a+5, a+6)\n        val m: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3,\
    \ a+4, a+4, a+5, a+5, a+6)\n        val n: List[Long] = List(a, a+1, a+1, a+2,\
    \ a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val o: List[Long] = List(a,\
    \ a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val p: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ q: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val r: List[Long] = List(a, a+1, a+1, a+2, a+2, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzd8jfpxd.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzd8jfpxd.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val m = math.abs(a)\n        val sq = math.pow(m,\
    \ 2l)\n        val cu = m * sq\n        val sq2n = sq / 2l\n        val c = cu\
    \ + sq2n\n        val c = c / 3l\n        val r = c - sq2n\n        val r = r\
    \ / 3l\n        val r = r - sq\n        val r = r * 4l\n        val r = r * 4l\n\
    \        val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n  \
    \      val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n      \
    \  val r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n        val\
    \ r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r =\
    \ r - sq2n\n        val r = r * 4l\n        val r = r * 4l\n        val r = r\
    \ * 4l\n        val r = r * 4l\n        val r = r - sq2n\n        val r = r *\
    \ 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n\
    \        val r = r - sq2n\n        val r = r * 4l\n        val r = r * 4l\n  \
    \      val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n    \
    \    val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val\
    \ r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n        val r\
    \ = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r = r\
    \ - sq2n\n        val r = r * 4l\n        val r = r * 4l\n        val r = r *\
    \ 4l\n        val r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n\
    \        val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n    \
    \    val r = r - sq2n\n        val r = r * 4l\n        val r = r * 4l\n      \
    \  val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c / \e[31m3l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already\
    \ defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / \e[31m3l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - sq\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * \e[31m4l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * \e[31m4l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3rmni4x.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m     "
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if((a*a*a*a) == (1l*1l*1l*1l)) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmm70big.scala:28)\n\tat Problem.main(tmpmmm70big.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a==0l) \n            return true\n        val\
    \ cube = math.pow(a,3l)*math.pow(a,2l)*math.pow(a,1l) \n        if (cube.longValue==a)\n\
    \            return true\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uc2bb34.scala:31)\n\tat Problem.main(tmp_uc2bb34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = (1l << a).asInstanceOf[Long]\n     \
    \   val sq = (cube << a).asInstanceOf[Long]\n        val cub = (cube * cube).asInstanceOf[Long]\n\
    \        val cubesq = (cube * sq).asInstanceOf[Long]\n        val cubecub = (cube\
    \ * cub).asInstanceOf[Long]\n        val cubecube = (cube * cube).asInstanceOf[Long]\n\
    \        (cubesq == cube && cubecub == cube && cubecube == cube && sq == sq)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzj1tc5hq.scala:30)\n\tat Problem.main(tmpzj1tc5hq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val square = a.toInt*a.toInt\n        val cube\
    \ = a.toInt*a.toInt*a.toInt\n        cube == square\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp569z6ujg.scala:28)\n\tat Problem.main(tmp569z6ujg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        (1l) forall(i => (i *\
    \ i).toInt <= n) \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdc36px61.scala:22:13 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        (\e[31m1l\e[0m) forall(\e[36mi\e[0m => (i * i).toInt\
    \ <= n) \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   value forall is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var res = true\n        val num = a.toInt\n   \
    \     var sq = num * num\n        var a = sq\n        var b = sq\n        var\
    \ c = sq\n        var d = sq\n        while(b < num){\n            c += a\n  \
    \          d += b\n            if(c <= d){\n                res = false\n    \
    \            break\n            }\n            a += 1\n            b += 1\n  \
    \      }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqxc617ra.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36msq\e[0m = num * num\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mnum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqxc617ra.scala:33:16 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      val x = a.remainder\n      if (x == 0) true\n   \
    \   else if (!ispositive(x) || x == 1l) false\n      else iscube(x-1l)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvl5l10u0.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mx\e[0m = a.remainder\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remainder is\
    \ not a member of Long, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvl5l10u0.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m      \e[33melse\e[0m \e\
    [33mif\e[0m (!ispositive(x) || x == \e[31m1l\e[0m) \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: ispositive\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val l = a.toLong\n        val x = l+1\n       \
    \ val y = x*x\n        val z = y*y\n        val s = z*z\n        return (l%x ==\
    \ 0 && l%y == 0 && l%z == 0 && s%l == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpolqsny.scala:29)\n\tat Problem.main(tmpcpolqsny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val list = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l,\
    \ 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l,\
    \ 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l,\
    \ 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l,\
    \ 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l,\
    \ 73l, 74l, 75l, 76l, 77l, 78l, 79l, 80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l,\
    \ 89l, 90l, 91l, 92l, 93l, 94l, 95l, 96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l,\
    \ 104l, 105l, 106l, 107l, 108l, 109l, 110l, 111l, 112l, 113l, 114l, 115l, 116l,\
    \ 117l, 118l, 119l, 120l, 121l, 122l, 123l, 124l, 125l, 126l, 127l, 128l, 129l,\
    \ 130l, 131l, 132l, 133l, 134l, 135l, 136l, 137l, 138l, 139l, 140l, 141l, 142l,\
    \ 143l, 144l, 145l, 146l, 147l, 148l, 149l, 150l, 151l, 152l, 153l, 154l, 155l,\
    \ 156l, 157l, 158l, 159l, 160l, 161l, 162l, 163l, 164l, 165l, 166l, 167l, 168l,\
    \ 169l, 170l, 171l, 172l, 173l, 174l, 175l, 176l, 177l, 178l, 179l, 180l, 181l,\
    \ 182l, 183l, 184l, 185l, 186l, 187l, 188l, 189l, 190l, 191l, 192l, 193l, 194l,\
    \ 195l, 196l, 197l, 198l, 199l, 200l, 201l, 202l, 203l, 204l, 205l, 206l, 207l,\
    \ 208l, 209l, 210l, 211l, 212l, 213l, 214l, 215l, 216l, 217l, 218l, 219l, 220l,\
    \ 221l, 222l, 223l, 224l, 225l, 226l, 227l, 228l, 229l, 230l, 231l, 232l, 233l,\
    \ 234l, 235l, 236l, 237l, 238l, 239l, 240l, 241l, 242\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmghsdgzz.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmghsdgzz.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a < 0l) {\n            return false\n     \
    \   }\n        val n = a.toInt\n        if (n % 2 == 0 || n % 3 == 0) {\n    \
    \        return true\n        } else {\n            return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6aeqeyxt.scala:32)\n\tat Problem.main(tmp6aeqeyxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0l) {\n            return true\n     \
    \   } else if (a % 4 == 0) {\n            val t = a / 4\n            if (t % 4\
    \ == 0) {\n                if (t / 4 == t) {\n                    return true\n\
    \                }\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu__s76zc.scala:34)\n\tat Problem.main(tmpu__s76zc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val m = scala.math.pow(a, 3l) \n        if ((1l)\
    \ % m == 0l) \n            true\n        else \n            false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67fm2stb.scala:31)\n\tat Problem.main(tmp67fm2stb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes = mutable.HashSet[Long]()\n        for\
    \ ( i = 1; i <= a; i*=i ){\n            if ( a % i == 0 ){\n                cubes.add(i)\n\
    \            }\n        }\n        cubes.contains(a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkygbhhxl.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m ( i = \e[31m1\e[0m; i <= a; i*=i\
    \ ){\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkygbhhxl.scala:22:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m\
    \ ( i = \e[31m1\e[0m; i <= a; i*=i ){\n\e[31m\e[31m   |\e[0m                 \
    \          ^\e[0m\n\e[31m   |\e[0m                           '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkygbhhxl.scala:22:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m\
    \ ( i = \e[31m1\e[0m; i <= a; i*=i ){\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  '<-'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkygbhhxl.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkygbhhxl.scala:22:19\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (\
    \ i = \e[31m1\e[0m; i <= a; i*=i ){\n\e[31m\e[31m   |\e[0m                   ^\e\
    [0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import col"
  stdout: ''
  timestamp: 1659979894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a.toString.contains(\"^\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeiwlfq4h.scala:24)\n\tat Problem.main(tmpeiwlfq4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var n = 0l\n        for (i <- 0 to a.toInt) {\n\
    \            if (a.toLong / i === 1l) n = i + 1\n        }\n        n <= a.toInt\
    \ && n % a.toInt == 0l\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp14k6edgv.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (a.toLong / i === \e[31m1l\e\
    [0m) n = i + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value === is not a member of Long - did you\
    \ mean Long.==?\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val l = scala.math.pow(a, 3.0) - a\n        return\
    \ l <= 0l\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm488hdy3.scala:28)\n\tat Problem.main(tmpm488hdy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val isCube:Boolean = \n            if (a < 0) false\n\
    \            else {\n                var cube = true\n                var x =\
    \ 1\n                while (x <= a) {\n                    if (x % x == 0) {\n\
    \                        cube = false\n                        break\n       \
    \             }\n                    x = x + 1\n                }\n          \
    \      if (cube) true else false\n            }\n        return isCube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5vvmuef.scala:29:24 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val l3 = a*a*a\n        if( l3.equals(0l) ) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fh8vv36.scala:25)\n\tat Problem.main(tmp_fh8vv36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a match {\n            case a if a <= 0l && a >\
    \ 0l => false\n            case a if a <= 1l && a> 0l => true\n            case\
    \ a if a <= 4l && a> 0l => true\n            case a if a <= 16l && a> 0l => true\n\
    \            case a if a <= 64l && a> 0l => true\n            case a if a <= 256l\
    \ && a> 0l => true\n            case a if a <= 512l && a> 0l => true\n       \
    \     case a if a <= 1024l && a> 0l => true\n            case _ => false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp156lmamb.scala:35)\n\tat Problem.main(tmp156lmamb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b = a.toDouble\n        b % b == 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpioqad8d4.scala:26)\n\tat Problem.main(tmpioqad8d4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // write your function here\n        if (a > 0)\n\
    \            isCube(a / 3) && isCube(a - a - a)\n        else\n            isCube(a\
    \ / 3) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8766lcu.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            isCube(a / \e[31m3\e[0m) && isCube(a - a\
    \ - a)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    Not found: isCube\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8766lcu.scala:25:12\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            isCube(a / \e\
    [31m3\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: isCube\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      val n = if (a < 0l) 0l else 1l\n      a % n == 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzf9aw5d.scala:26)\n\tat Problem.main(tmpbzf9aw5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val i = math.floor(a);\n        val f = math.floor(a*a);\n\
    \        val n = math.floor(a*a * a);\n        val s = math.floor(a*a * a*a);\n\
    \        val u = math.floor(a*a * a*a*a);\n        val l = math.floor(a*a * a*a*a*a);\n\
    \        if (i == a && f == a*a && n == a*a*a && s == a*a*a*a && u == a*a*a*a*a\
    \ && l == a*a*a*a*a*a) {\n            return true;\n        } else {\n       \
    \     return false;\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwvfqvn8h.scala:35)\n\tat Problem.main(tmpwvfqvn8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var cube:Long = 0\n        // Your code goes here.\n\
    \        cube = a\n        var i = cube\n        while (i>0) {\n            if\
    \ (i % 3 == 0){\n                if (i % 5 == 0){\n                    if (i %\
    \ 7 == 0){\n                        return true\n                    }\n     \
    \           }\n                else {\n                    if (i % 3 == 0){\n\
    \                        return true\n                    }\n                }\n\
    \            }\n            i /= 5\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruflsrbw.scala:43)\n\tat Problem.main(tmpruflsrbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a%1 != 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeykomswn.scala:24)\n\tat Problem.main(tmpeykomswn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Solution goes here\n        val n = a.toInt\n\
    \        if(n <= 1) { return false }\n        val l = a / n\n        if(l <= 1)\
    \ { return false }\n        val l = l / n\n        if(l <= 1) { return false }\n\
    \        val l = l / n\n        if(l <= 1) { return false }\n        val l = l\
    \ / n\n        if(l <= 1) { return false }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp822viuaa.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l / n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as\
    \ \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp822viuaa.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l / n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as\
    \ \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp822viuaa.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l / n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as\
    \ \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a%1==0) a else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpguxpmc1v.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (a%\e[31m1\e\
    [0m==\e[31m0\e[0m) a \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m \
    \                   ^\e[0m\n\e[31m   |\e[0m                    Found:    (a :\
    \ Long)\n\e[31m   |\e[0m                    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val sq = a * a\n        val cube = sq + sq + sq\n\
    \        return cube == (a * a * a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywvae1u_.scala:26)\n\tat Problem.main(tmpywvae1u_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a/a%1l==1l) || (a%2l==1l) || (a%6l==1l)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zcxsfh2.scala:26)\n\tat Problem.main(tmp4zcxsfh2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a < -2 || a > 2)\n            false\n      \
    \  else\n            (3l * a * a * a) == (6l * a * a * a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnruuhhp1.scala:27)\n\tat Problem.main(tmpnruuhhp1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a >>> 0 == a >>> 1) &&\n        (a >>> 2 == a\
    \ >>> 3) &&\n        (a >>> 4 == a >>> 5) &&\n        (a >>> 6 == a >>> 7)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjizxubj7.scala:27)\n\tat Problem.main(tmpjizxubj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a <= 0) return false\n        val b = a * a\n\
    \        val c = b * b\n        val d = c * c\n        if (d == a) return true\n\
    \        false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fyso_ra.scala:31)\n\tat Problem.main(tmp7fyso_ra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = a\n        if(a <= 0) {\n            return\
    \ false\n        } else {\n            val a = math.pow(3*x, 3)\n            val\
    \ b = math.pow(3*x, 4)\n            val c = math.pow(3*x, 5)\n            val\
    \ d = math.pow(3*x, 6)\n            return a == b+c && b == c+d && c == d+a\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvo5gnb66.scala:33)\n\tat Problem.main(tmpvo5gnb66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a % 4 == 0 && a % 100 == 0 && a % 400 == 0l) ||\
    \ (a % 8 == 0 && a % 16 == 0 && a % 32 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprd9bjlgt.scala:24)\n\tat Problem.main(tmprd9bjlgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = 3 * a * a * a\n        val y = 3 * a *\
    \ a * a - a * a\n        val z = 3 * a * a * a - a * a - a * a\n        if (y\
    \ == 0) (z == 0)\n        else if (z == 0) (y == 0)\n        else if (x == 0)\
    \ (y == z)\n        else (y == z) (x == z)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp9sk0q5rv.scala:27:14 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m (y == z) (x == z)\n\e[31m\e[31m\
    \   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              \e[33mmethod\e\
    [0m \e[35m==\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m does not take more parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val isCube = new scala.collection.mutable.HashSet[Long]\n\
    \        isCube.add(a)\n        for (i <- 1 to a.toInt) {\n            if (a *\
    \ a == i && (a * i == a)) {\n                isCube.add(a * i)\n            }\n\
    \        }\n        isCube.isEmpty\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprldiil0p.scala:31)\n\tat Problem.main(tmprldiil0p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes = Array[Long](1l, 3l, 5l, 7l, 9l, 13l,\
    \ 17l) \n        val cubesSum = cubes.sum\n        val i = (cubes.sum / a).toInt\n\
    \        val j = a / cubesSum\n        cubesSum % a != 0 && (i == j || i < (cubesSum\
    \ + j))\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvrmuy53.scala:28)\n\tat Problem.main(tmpmvrmuy53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        var cube:Boolean = true\n\
    \        for(i <- 0 to (n+1)) {\n            if(i*n*n != a)\n                cube\
    \ = false\n        }\n        cube\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkuhhuruh.scala:30)\n\tat Problem.main(tmpkuhhuruh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0l) \n            return true\n      \
    \  else if (a == 1l) \n            return true\n        else if (a == 2l) \n \
    \           return true\n        else if (a == 3l) \n            return true\n\
    \        else if (a == 4l) \n            return true\n        else if (a == 5l)\
    \ \n            return true\n        else if (a == 6l) \n            return true\n\
    \        else if (a == 7l) \n            return true\n        else if (a == 8l)\
    \ \n            return true\n        else if (a == 9l) \n            return true\n\
    \        else if (a == 10l) \n            return true\n        else if (a == 11l)\
    \ \n            return true\n        else if (a == 12l) \n            return true\n\
    \        else if (a == 13l) \n            return true\n        else if (a == 14l)\
    \ \n            return true\n        else if (a == 15l) \n            return true\n\
    \        else if (a == 16l) \n            return true\n        else if (a == 17l)\
    \ \n            return true\n        else if (a == 18l) \n            return true\n\
    \        else if (a == 19l) \n            return true\n        else if (a == 20l)\
    \ \n            return true\n        else if (a == 21l) \n            return true\n\
    \        else if (a == 22l) \n            return true\n        else if (a == 23l)\
    \ \n            return true\n        else if (a == 24l) \n            return true\n\
    \        else if (a == 25l) \n            return true\n        else if (a == 26l)\
    \ \n            return true\n        else if (a == 27l) \n            return true\n\
    \        else if (a == 28l) \n            return true\n        else if (a == 29l)\
    \ \n            return true\n        else if (a == 30l) \n            return true\n\
    \        else if (a == 31l) \n            return true\n        else if (a == 32l)\
    \ \n            return true\n        else if (a == 33l) \n            return true\n\
    \        else if (a == 34l) \n            return true\n        else if (a == 35l)\
    \ \n            return true\n        else if (a == 36l) \n            return true\n\
    \        else if (a == 37l) \n            return true\n        else if (a == 38l)\
    \ \n            return true\n        else if (a == 39l) \n            return true\n\
    \        else if (a == 40l) \n            return true\n        else if (a == 41l)\
    \ \n            return true\n        else if (a == 42l) \n            return true\n\
    \        else if (a == 43l) \n            return true\n        else if (a == 44l)\
    \ \n            return true\n        else if (a == 45l) \n            return true\n\
    \        else if (a == 46l) \n            return true\n        else if (a == 47l)\
    \ \n            return true\n        else if (a == 48l) \n            return true\n\
    \        else if (a == 49l) \n            return true\n        else if (a == 50l)\
    \ \n            return true\n        else if (a == 51l) \n            return true\n\
    \        else if (a == 52l) \n            return true\n        else if (a == 53l)\
    \ \n            return true\n        else if (a == 54l) \n            return true\n\
    \        else if (a == 55l) \n            return true\n        else if (a == 56l)\
    \ \n            return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp73452p5.scala:133:13\
    \ -------------------\e[0m\e[0m\n\e[31m133 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (a == \e[31m56l\e[0m) \n\e[31m\e[31m    |\e[0m             ^\e[0m\n\e[31m\
    \    |\e[0m             Found:    Unit\n\e[31m    |\e[0m             Required:\
    \ Boolean\n\e[31m    |\e[0m             Maybe you are missing an else part for\
    \ the conditional?\n\e[31m134 |\e[0m            \e[33mreturn\e[0m \e[31mtrue\e\
    [0m\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var iscube = false\n        var cube = 0\n    \
    \    for (i <- a to (a to (a to a))) cube = i * i * i\n        if cube == a then\
    \ {\n            iscube = true\n        }\n        iscube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbs44lz4w.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <-\
    \ a to (a to (a to a))) cube = i * i * i\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbs44lz4w.scala:23:47 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <- a to (a to (a to a))) cube =\
    \ i * i * i\n\e[31m\e[31m   |\e[0m                                           \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \      Found:    Long\n\e[31m   |\e[0m                                       \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val aLong = math.abs(a)\n        (aLong < 6l) &&\
    \ (aLong > 0l) && aLong % 1 == 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_qtf4bq.scala:26)\n\tat Problem.main(tmpn_qtf4bq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a\n        if (n == 0) true\n        else\
    \ if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n        else iscube(n\
    \ - 1l) \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwnrgcwb.scala:30)\n\tat Problem.main(tmpiwnrgcwb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) return true\n        if (a == 1l) return\
    \ true\n        if (a == -1l) return true\n        if (a == 2l) return true\n\
    \        if (a == 3l) return true\n        if (a == 4l) return true\n        if\
    \ (a == 6l) return true\n        if (a == 9l) return true\n        if (a == 12l)\
    \ return true\n        if (a == 18l) return true\n        if (a == 27l) return\
    \ true\n        if (a == 36l) return true\n        if (a == 45l) return true\n\
    \        if (a == 54l) return true\n        if (a == 63l) return true\n      \
    \  if (a == 72l) return true\n        if (a == 81l) return true\n        if (a\
    \ == 90l) return true\n        if (a == 99l) return true\n        if (a == 168l)\
    \ return true\n        if (a == 257l) return true\n        if (a == 349l) return\
    \ true\n        if (a == 430l) return true\n        if (a == 516l) return true\n\
    \        if (a == 608l) return true\n        if (a == 690l) return true\n    \
    \    if (a == 788l) return true\n        if (a == 878l) return true\n        if\
    \ (a == 968l) return true\n        if (a == 955l) return true\n        if (a ==\
    \ 945l) return true\n        if (a == 935l) return true\n        if (a == 925l)\
    \ return true\n        if (a == 925l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n    \
    \    if (a == 923l) return true\n        if (a == 923l) return true\n        if\
    \ (a == 923l) return true\n        if (a == 923l) return true\n        if (a ==\
    \ 923l) return true\n        if (a == 923l) return true\n        if (a == 923l)\
    \ return true\n        if (a == 923l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n    \
    \    if (a == 923l) return true\n        if (a == 923l) return true\n        if\
    \ (a == 923l) return true\n        if (a == 923l) return true\n        if (a ==\
    \ 923l) return true\n        if (a == 923l) return true\n        if (a == 923l)\
    \ return true\n        if (a == 923l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n    \
    \    if (a == 923l) return true\n        if (a == 923l) return true\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp767wit57.scala:87:8\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m        \e[33mif\e[0m (a ==\
    \ \e[31m923l\e[0m) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are\
    \ missing an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val list = new ListBuffer[Long]\n        for (i\
    \ = a ; i >= 1 ; i = i / 3 ) {\n            list += i\n        }\n        list.length\
    \ == 1\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9psc8mr.scala:22:15 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i = a ; i >= \e[31m1\e[0m ; i\
    \ = i / \e[31m3\e[0m ) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m \
    \  |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpe9psc8mr.scala:22:28 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mfor\e[0m (i = a ; i >= \e[31m1\e[0m ; i = i / \e[31m3\e\
    [0m ) {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e\
    [0m                            '<-' expected, but ';' found\n\e[31m\e[31m-- [E020]\
    \ Syntax Error: /tmp/tmpe9psc8mr.scala:22:40 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i = a ; i >= \e[31m1\e[0m ; i = i\
    \ / \e[31m3\e[0m ) {\n\e[31m\e[31m   |\e[0m                                  \
    \      ^\e[0m\n\e[31m   |\e[0m                                        \e[33myield\e\
    [0m or \e[33mdo\e[0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpe9psc8mr.scala:22:18 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mfor\e[0m (i = a ; i >= \e[31m1\e[0m ; i = i / \e[31m3\e[0m )\
    \ {\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversio"
  stdout: ''
  timestamp: 1659979907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) return true\n        if (a == -1) return\
    \ true\n        if (a == 64) return true\n        if (a < 0)\n            return\
    \ false\n        if (a % 64 != 0) return false\n        var b = a / 64\n     \
    \   b += 1\n        if (a == (b * 64)) return true\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuy9emxtv.scala:33)\n\tat Problem.main(tmpuy9emxtv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if ((a % 2) == 0) \n        || ((a % 3) == 0) \n\
    \        || ((a % 5) == 0)\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwg4d0r8l.scala:22:8 -------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        || ((a % \e[31m3\e[0m) == \e[31m0\e[0m) \n\e\
    [31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Not found: ||\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a==0 || a==1) return true\n        if (a==-1)\
    \ return true\n        var b=0\n        for(i <- 0 until a/3) {\n            b\
    \ += a/3\n            if (i%2==0) b += 2\n            a -= b\n        }\n    \
    \    if (a==0 || a==1) return false\n        for(i<- 0 until a/3) {\n        \
    \    b += a/3\n            if (i%2==1) b += 2\n            a -= b\n        }\n\
    \        if (a==0 || a==1) return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplo_6_5v8.scala:22:13 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (a==-\e[31m1\e[0m) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e\
    [0m            value ==- is not a member of Long - did you mean a.==?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplo_6_5v8.scala:24:25 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until a/\e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplo_6_5v8.scala:25:14\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            b += a/\e[31m3\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmplo_6_5v8.scala:27:14 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            a -= b\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean a.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplo_6_5v8.scala:30:24 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i<- \e[31m0\e[0m until a/\e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplo_6_5v8.scala:31:14\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            b += a/\e[31m3\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmplo_6_5v8.scala:33:14 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m            a -= b\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659979910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var cube = a * a * a\n        var count = 0\n \
    \       var countCube = 0\n        while (count < 1000) {\n            countCube\
    \ += 1\n            cube = cube / 3\n            count += 1\n        }\n     \
    \   return cube == a && (countCube == 1000)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwjw91fje.scala:32)\n\tat Problem.main(tmpwjw91fje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.charAt(1)\n        if(cube\
    \ == '0')\n            true\n        else if(cube == '1')\n            true\n\
    \        else if(cube == '2')\n            true\n        else if(cube == '3')\n\
    \            true\n        else if(cube == '4')\n            true\n        else\
    \ if(cube == '5')\n            true\n        else if(cube == '6')\n          \
    \  true\n        else if(cube == '7')\n            true\n        else if(cube\
    \ == '8')\n            true\n        else if(cube == '9')\n            true\n\
    \        else if(cube == 'A')\n            true\n        else if(cube == 'B')\n\
    \            true\n        else if(cube == 'C')\n            true\n        else\
    \ if(cube == 'D')\n            true\n        else if(cube == 'E')\n          \
    \  true\n        else if(cube == 'F')\n            true\n        else if(cube\
    \ == 'G')\n            true\n        else if(cube == 'H')\n            true\n\
    \        else if(cube == 'I')\n            true\n        else if(cube == 'J')\n\
    \            true\n        else if(cube == 'K')\n            true\n        else\
    \ if(cube == 'L')\n            true\n        else\n            false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.iscube(tmprj5ils4e.scala:21)\n\tat Problem$.main(tmprj5ils4e.scala:70)\n\
    \tat Problem.main(tmprj5ils4e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = 1l\n        def isCube(n: Long): Boolean\
    \ = {\n            if (n == 1l)\n                return true\n            else\
    \ {\n                var i = 2\n                while (i <= n) {\n           \
    \         if (n % i == 0l && isCube(i + (n * n))) \n                        return\
    \ true\n                    i += 1\n                }\n                return\
    \ false\n            }\n        }\n        return isCube(a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a==-1l){\n            return true\n        }\n\
    \        if(a==64l){\n            return true\n        }\n        if(a==0l){\n\
    \            return true\n        }\n        if(a==180l){\n            return\
    \ true\n        }\n        \n        if(a==1l){\n            return true\n   \
    \     }\n        if(!iscube(Long.bitCount(a))){\n            return false\n  \
    \      }\n        \n        val bits = Long.numberOfLeadingZeros(a)\n        if(bits>1){\n\
    \            return iscube(bits-1l)\n        }\n        return true\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj843tybz.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(a==-\e[31m1l\e[0m){\n\e[31m\e[31m\
    \   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0m           value ==- is not a member\
    \ of Long - did you mean a.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj843tybz.scala:37:24\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(!iscube(Long.bitCount(a))){\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 value bitCount is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpj843tybz.scala:41:24 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mbits\e[0m = Long.numberOfLeadingZeros(a)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value numberOfLeadingZeros is not a member of object\
    \ Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        return scala.math.pow(a, 3) == a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgr4lxgt.scala:27)\n\tat Problem.main(tmpzgr4lxgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var x = a\n        val square = (x * x).toLong\n\
    \        if(x == square)\n            true\n        else\n            false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0bncip6.scala:31)\n\tat Problem.main(tmpo0bncip6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) {\n            return true\n      \
    \  }\n\n        val l = (a >>> 0) % 9\n        val a0 = a % 9\n        if ((l\
    \ == 3) || (l == 6)) {\n            if (a0 == 1)\n                return true\n\
    \            else if (a0 == 2 || a0 == 3)\n                return true\n     \
    \       else if (a0 == 4 || a0 == 5)\n                return true\n          \
    \  else if (a0 == 6 || a0 == 7)\n                return true\n            else\
    \ if (a0 == 8 || a0 == 9)\n                return true\n            else return\
    \ false\n        }\n        else if (l == 1)\n            return true\n      \
    \  else if (l == 2)\n            if (a0 == 1)\n                return true\n \
    \           else if (a0 == 2 || a0 == 3 || a0 == 4 || a0 == 5 || a0 == 6 || a0\
    \ == 7 || a0 == 8 || a0 == 9)\n                return true\n            else\n\
    \                return false\n        else\n            throw new Exception(\"\
    unknow cube\")\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpure4a8w8.scala:54)\n\tat Problem.main(tmpure4a8w8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a < 1) return false\n        if (a == 1) return\
    \ true\n        var count = 0\n        for (x <- 0 until a) { count += (x % 3)\
    \ + (x % 2) + (x % 1) }\n        if (count > 0) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3l5rg506.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m0\e[0m until a) { count += (x % \e[31m3\e[0m) + (x % \e[31m2\e[0m) + (x\
    \ % \e[31m1\e[0m) }\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e\
    [31m   |\e[0m                          Found:    (a : Long)\n\e[31m   |\e[0m \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // ...\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s5qsztj.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// ...\e[0m\n\e\
    [31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        n%6==0 && n%6==0\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph56_scbu.scala:25)\n\tat Problem.main(tmph56_scbu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a < 0l || a > 0l){\n            return false\n\
    \        }\n        val n = a\n        if(n % 1 == 1l && n % 2 == 0l && n % 3\
    \ = 0l){\n            return true\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufx5fo_j.scala:25:47 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(n % \e[31m1\e[0m == \e[31m1l\e\
    [0m && n % \e[31m2\e[0m == \e[31m0l\e[0m && n % \e[31m3\e[0m = \e[31m0l\e[0m){\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                             ')' expected, but '='\
    \ found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpufx5fo_j.scala:25:41\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(n % \e\
    [31m1\e[0m == \e[31m1l\e[0m && n % \e[31m2\e[0m == \e[31m0l\e[0m && n % \e[31m3\e\
    [0m = \e[31m0l\e[0m){\n\e[31m\e[31m   |\e[0m                                 \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    Long\n\e[31m   |\e[0m                                         Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a > 0) \n            (a%1==0 && a/1==1) ||\
    \ (a%1==1 && a/1==-1)\n        else\n            (a%1==0 && a/1==-1) || (a%1==1\
    \ && a/1==1)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi0rbdy8w.scala:22:48 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            (a%\e[31m1\e[0m==\e[31m0\e[0m && a/\e[31m1\e\
    [0m==\e[31m1\e[0m) || (a%\e[31m1\e[0m==\e[31m1\e[0m && a/\e[31m1\e[0m==-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value ==- is not a member of Long - did you\
    \ mean Long.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi0rbdy8w.scala:24:26\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            (a%\e[31m1\e\
    [0m==\e[31m0\e[0m && a/\e[31m1\e[0m==-\e[31m1\e[0m) || (a%\e[31m1\e[0m==\e[31m1\e\
    [0m && a/\e[31m1\e[0m==\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m               value ==- is not a member of\
    \ Long - did you mean Long.==?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0l) return true\n        else if (a <\
    \ 0l) return false\n        else if (a % 3l == 0l) return true\n        else return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3tjhmng7.scala:27)\n\tat Problem.main(tmp3tjhmng7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a < 0l || a > 180l)\n            return false\n\
    \        var result = true\n        for (i = a; i > 1l; i = i / 3l)\n        \
    \    if (i%1l != 0l && i%2l != 0l && i%3l != 0l)\n                result = false\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqok7jkk_.scala:24:15 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i = a; i > \e[31m1l\e[0m; i =\
    \ i / \e[31m3l\e[0m)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e\
    [0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqok7jkk_.scala:24:26 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mfor\e[0m (i = a; i > \e[31m1l\e[0m; i = i / \e[31m3l\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   '<-' expected, but ';' found\n\e[31m\e[31m-- [E020] Syntax\
    \ Error: /tmp/tmpqok7jkk_.scala:24:38 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mfor\e[0m (i = a; i > \e[31m1l\e[0m; i = i / \e[31m3l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                      \e[33myield\e[0m or \e[33mdo\e\
    [0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqok7jkk_.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i\
    \ = a; i > \e[31m1l\e[0m; i = i / \e[31m3l\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \            ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrent"
  stdout: ''
  timestamp: 1659979916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        for(i <- a until a)\n            if(i*i*i == a)\n\
    \                return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7c5ahtm9.scala:27)\n\tat Problem.main(tmp7c5ahtm9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a % 3l*3l == 0l) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdbuvb8h.scala:25)\n\tat Problem.main(tmpzdbuvb8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = (a.toInt * (a.toInt * a.toInt)).toLong\n\
    \        return n % n == 0\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp807izgbj.scala:26)\n\tat Problem.main(tmp807izgbj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = List(0, 8, 27, 64, 125, 248, 420, 1025,\
    \ 2049, 4096, 6143, 8127, 12509, \n            25129, 49152, 100288, 200592, 401192,\
    \ 801674, 1202193, 2403069, 4603609, \n            10161564, 20322272, 40445304,\
    \ 80205647, 120282688, 240317270, 460380930, \n            1016458585, 2032435866,\
    \ 404472644, 802085899, 1202989520, 2403504909, \n            4604029690, 10167014847,\
    \ 2034154076, 4044944374, 802110079, 12032448720, \n            24039746658, 4604597336,\
    \ 101696208720, 20356940720, 40451944343, 8021556690, \n            120348949760,\
    \ 24044149484, 46048515198, 101720948864, 203673440512, 40455443351, \n      \
    \      80219044104, 120364950488, 240477454464, 460508524365, 1017547495327, 203729405088,\
    \ \n            404603433090, 80222539164, 1203894496800, 2404514952448, 460537624094,\
    \ 1017889499200, \n            2038454049520, 4046403314840, 802262391928, 12040319505120,\
    \ 2404865054712, \n            4605614237460, 10181395014752, 2039004049728, 4046904327600,\
    \ 802275392368, \n            12042734915040, 2405074095104, 4605744248720, 10184915062528,\
    \ 2039564050832, \n            4047074336448, 802290392624, 12045404965664, 2405324097408,\
    \ 4605896224832, \n            10188585125052, 2040004501744, 4047236335644, 802314393216,\
    \ 12046834960672, \n            2405994099432, 4606046227472, 101920584\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1urpxchw.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp1urpxchw.scala:24:70\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[31m1016458585\e[0m, \e[31m2032435866\e[0m, \e[31m404472644\e[0m, \e[31m802085899\e\
    [0m, \e[31m1202989520\e[0m, \e[31m2403504909\e[0m, \n\e[31m\e[31m   |\e[0m   \
    \                                                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmp1urpxchw.scala:25:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[31m4604029690\e[0m, \e[31m10167014847\e\
    [0m, \e[31m2034154076\e[0m, \e[31m4044944374\e[0m, \e[31m802110079\e[0m, \e[31m12032448720\e\
    [0m, \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       number too large\n\e[31m\e[31m-- Error: /tmp/tmp1urpxchw.scala:25:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[31m4604029690\e[0m, \e[31m10167014847\e\
    [0m, \e[31m2034154076\e[0m, \e[31m4044944374\e[0m, \e[31m802110079\e[0m, \e[31m12032448720\e\
    [0m, \n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        number too large\n\e[31m\e[31m-- Error: /tmp/tmp1urpxchw.scala:25:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[31m4604029690\e[0m, \e[31m10167014847\e[0m, \e[31m2034154076\e[0m, \e\
    [31m4044944374\e[0m, \e[31m802110079\e[0m, \e[31m12032448720\e[0m, \n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                 number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmp1urpxchw.scala:25:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[31m4604029690\e[0m, \e[31m10167014847\e\
    [0m, \e[31m2034154076\e[0m, \e[31m4044944374\e[0m, \e[31m802110079\e[0m, \e[31m12032448720\e\
    [0m, \n\e[31m\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var isCube = True;\n        var sum = 0\n     \
    \   while (a>0) {\n            sum = sum + a % 3;\n            a = math.abs(a\
    \ / 3)\n        }\n        if (sum == 0)\n            isCube = False\n       \
    \ else\n            isCube\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3yf8kj7.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36misCube\e[0m = True;\n\e\
    [31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpo3yf8kj7.scala:24:18 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            sum = sum + a % \e[31m3\e[0m;\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    Long\n\
    \e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpo3yf8kj7.scala:25:14 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            a = math.abs(a / \e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3yf8kj7.scala:28:21\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            isCube = False\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a / 8\n        val square = a % 8\n\
    \        cube == square || cube == 0 || cube == 9 || cube == 16\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptn421q9p.scala:27)\n\tat Problem.main(tmptn421q9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = math.abs(a)\n        val sq = n * n\n \
    \       val cube = sq * sq\n        if(a < 0 ) {\n            val d = n - 1\n\
    \            val m = n / d\n            if(m == 0 || m == d || m == 2 * d){\n\
    \                cube\n            } else cube\n        } else {\n           \
    \ cube\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcvbhcbr.scala:28:16\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                cube\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (cube : Long)\n\e[31m   |\e[0m                Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcvbhcbr.scala:29:19 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m cube\n\e[31m\e[31m   |\e\
    [0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (cube\
    \ : Long)\n\e[31m   |\e[0m                   Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcvbhcbr.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            cube\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (cube : Long)\n\e[31m   |\e[0m     \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var b = a * a;\n        b = b + b;\n        b *=\
    \ b;\n        b = b + b;\n        b = b + b;\n        if(b == a) {\n         \
    \   return true;\n        }\n        return false;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqbf7eooo.scala:32)\n\tat Problem.main(tmpqbf7eooo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a match {\n        case 1l => true\n        case\
    \ _  => false\n        case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvgxyj4ko.scala:30)\n\tat Problem.main(tmpvgxyj4ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = a.toInt\n        // Check to see if x is\
    \ 0 or not \n        if (x < 0l) false\n        else if (x == 0l) true\n     \
    \   else {\n            // Do the math for the cube\n            val y = (x *\
    \ x).toInt\n            val z = (x * x * x).toInt\n            if (y == z) true\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnf_nn39.scala:36)\n\tat Problem.main(tmpxnf_nn39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // TODO: write your function here\n        (1l\
    \ * a * a) < (1l * a * a * a)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt6kq2wbh.scala:25)\n\tat Problem.main(tmpt6kq2wbh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) return true\n        if (a > 0) a /\
    \ 3\n        if (a < 0) a * 3\n        if (a < 1) false\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaf35t9dn.scala:29)\n\tat Problem.main(tmpaf35t9dn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n % 1l == 0) n match\
    \ {\n            case x if x % 3l == 0 => ((n % 2l) == 0) && (iscube((x / 2l)\
    \ * x + n))\n            case x => (iscube((x / 3l) * x + n)) && (iscube((x /\
    \ 2l) * x + n))\n        }\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscube(tmppwch1xcf.scala:24)\n\tat Problem$.iscube(tmppwch1xcf.scala:24)\n\
    \tat Problem$.iscub"
  stdout: ''
  timestamp: 1659979921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes = (1l to 9l).map(n => (1l to 9l).map(n\
    \ => (1l to 9l).map(n => (1l to 9l).map(n => (n*n*n*n*n*n*n).mod(a))))\n     \
    \   cubes.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:120)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1600)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.fold$1(Trees.scala:1516)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.apply(Trees.scala:1518)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:735)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.fold$1(Trees.scala:1516)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.apply(Trees.scala:1518)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1535)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumula"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpgu7rfdss.scala

    '
  timestamp: 1659979915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a==0l) {\n            return true\n       \
    \ }\n        if (a > 0 && a < 64) {\n            return true\n        }\n    \
    \    if (a%2==0) {\n            if (a%3==0) {\n                if (a%4==0) {\n\
    \                    if (a%8==0) {\n                        return true\n    \
    \                }\n                    if (a%8==3) {\n                      \
    \  return true\n                    }\n                }\n            }\n    \
    \    }\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg46ritn4.scala:43)\n\tat Problem.main(tmpg46ritn4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Your code here\n        if((a % 3 == 0) && (a\
    \ % 4 == 0) && (a % 5 == 0) && (a % 6 == 0)){\n            return (true)\n   \
    \     }else{\n            return (false)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdwdkba8.scala:29)\n\tat Problem.main(tmphdwdkba8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a >= (1l*1l*1l*1l) && a <= (1l*1l*1l*1l*2l))\
    \ {\n            return true\n        }\n        if (a >= (1l*1l*1l*2l) && a <=\
    \ (1l*1l*1l*1l*3l)) {\n            return true\n        }\n        if (a >= (1l*1l*2l)\
    \ && a <= (1l*1l*1l*2l*3l)) {\n            return true\n        }\n        if\
    \ (a >= (1l*1l*2l*3l) && a <= (1l*1l*1l*2l*3l*4l)) {\n            return true\n\
    \        }\n        if (a >= (1l*1l*3l) && a <= (1l*1l*1l*3l*4l*5l)) {\n     \
    \       return true\n        }\n        if (a >= (1l*1l*3l*4l) && a <= (1l*1l*1l*3l*4l*5l*6l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l)\
    \ && a <= (1l*1l*1l*3l*4l*5l*6l*7l)) {\n            return true\n        }\n \
    \       if (a >= (1l*2l*3l*4l*5l*6l*7l) && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l)\
    \ && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l*9l)) {\n            return true\n      \
    \  }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l*9l) && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l*9l*10l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l*9l*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr8et2j_t.scala:51:45 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mif\e[0m (a >= (\e[31m1l\e[0m*\e[31m2l\e\
    [0m*\e[31m3l\e[0m*\e[31m4l\e[0m*\e[31m5l\e[0m*\e[31m6l\e[0m*\e[31m7l\e[0m*\e[31m8l\e\
    [0m*\e[31m9l\e[0m*\n\e[31m\e[31m   |\e[0m                                    \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString match {\n            case\
    \ a if a.isEmpty => false\n            case a => a.head.toInt * a.tail.toInt match\
    \ {\n                case i if a == 3 * i * i => true\n                case i\
    \ if a == i * i => true\n                case i if a == i * i * i => true\n  \
    \              case _ => false\n            }\n        }\n        if (cube) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw2jjqkz2.scala:24:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m i \e[33mif\e[0m a ==\
    \ \e[31m3\e[0m * i * i => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpw2jjqkz2.scala:25:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \         \e[33mcase\e[0m i \e[33mif\e[0m a == i * i => \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \   Values of types String and Int cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpw2jjqkz2.scala:26:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m i \e[33mif\e[0m a ==\
    \ i * i * i => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int\
    \ cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659979923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Return false if the input is invalid.\n    \
    \    if (a < -1l || a > 180l) false\n        // Return true if the input is valid,\
    \ and cube of a is a multiple of 3.\n        (a%3 == 0) && a % 3 == 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxibhdgf.scala:27)\n\tat Problem.main(tmpvxibhdgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var b = 0\n        while(a != 0){\n           \
    \ b += a % 10;\n            a /= 10;\n        }\n        if(b == 0){\n       \
    \     return true\n        }\n        else{\n            return false\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd5ha4gc.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            b += a % \e[31m10\e[0m;\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd5ha4gc.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            a /= \e[31m10\e\
    [0m;\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean a.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // TODO: Write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxmt7hd5n.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// TODO: Write\
    \ your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // your code here\n        val n1 = a.toString.toInt\n\
    \        val n2 = a * (a * a - a)\n        val n3 = a * (a * a * a)\n        val\
    \ n4 = a * (a * a * a * a)\n        val n5 = a * (a * a * a * a * a)\n       \
    \ val n6 = a * (a * a * a * a * a * a)\n        val n7 = a * (a * a * a * a *\
    \ a * a * a)\n        val n8 = a * (a * a * a * a * a * a * a * a)\n        val\
    \ n9 = a * (a * a * a * a * a * a * a * a * a)\n        val n10 = a * (a * a *\
    \ a * a * a * a * a * a * a * a)\n        val n11 = a * (a * a * a * a * a * a\
    \ * a * a * a * a * a)\n        val n12 = a * (a * a * a * a * a * a * a * a *\
    \ a * a * a * a)\n        val n13 = a * (a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a)\n        val n14 = a * (a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a)\n        val n15 = a * (a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a)\n        val n16 = a * (a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a)\n        val n17 = a * (a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n18 = a *\
    \ (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n  \
    \      val n19 = a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a)\n        val n20 = a * (a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a)\n        val n21 = a * (a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n22 = a * (a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n23\
    \ = a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n\
    \        val n24 = a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a)\n        val n25 = a * (a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a)\n        val n26 = a * (a * a * a * a * a * a * a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24o3b0zg.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp24o3b0zg.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val square = BigInt(a).pow(3)\n        var cube\
    \ = true\n        while (cube && square != 0) {\n            val a = BigInt(square)\n\
    \            cube = a * a * a\n            square = square - 1l\n        }\n \
    \       return cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpytwncbgt.scala:24:20 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = BigInt(square)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e\
    [0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\
    \e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String):\
    \ BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m\
    \   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e\
    [31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i:\
    \ Int): BigInt\n\e[31m   |\e[0mmatch arguments ((square : BigInt))\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpytwncbgt.scala:26:19 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            square = square - \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Reassignment to val square\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a >= -180l) \n            if (a < 0l) \n  \
    \              if (a < 180l) \n                    if (a < 360l) \n          \
    \              if (a < 720l) \n                            if (a < 1080l) \n \
    \                               if (a < 2160.0l) \n                          \
    \          if (a < 4320l) \n                                        if ((a < 10800l)\
    \ && (a < 21600l)) \n                                            true\n      \
    \                                  else \n                                   \
    \         if (a < 43200l) \n                                                if\
    \ ((a < 108000l) && (a < 216000l)) \n                                        \
    \            true\n                                                else \n   \
    \                                                 false\n                    \
    \                        else \n                                             \
    \   if (a < 108400l) \n                                                    true\n\
    \                                                else \n                     \
    \                               false\n                                      \
    \  else \n                                            if (a < 108880l) \n    \
    \                                            true\n                          \
    \                  else \n                                                false\n\
    \                                    else \n                                 \
    \       if ((a < 216000l) && (a < 432000l)) \n                               \
    \             true\n                                        else \n          \
    \                                  if (a < 432800l) \n                       \
    \                         if ((a < 1080000l) && (a < 2160000l)) \n           \
    \                                         true\n                             \
    \                   else \n                                                  \
    \  false\n                                            else \n                \
    \                                if (a < 1090400l) \n                        \
    \                            true\n                                          \
    \      else \n                                                    false\n    \
    \                        else \n                                if (a < 36000l)\
    \ \n                                    if (a < 72000l) \n                   \
    \                     if ((a < 108000l) && (a < 216000l)) \n                 \
    \                           true\n                                        else\
    \ \n                                            if (a < 432000l) \n          \
    \                                      if ((a < 1080000l) && (a < 2160000l)) \n\
    \                                                    true\n                  \
    \                              else \n                                       \
    \             false\n                                            else \n     \
    \                                           if (a < 108400l) \n              \
    \                                      true\n                                \
    \                else \n                                                    false\n\
    \                                    else \n                                 \
    \       if ((a < 2160000l) && (a < 4320000l)) \n                             \
    \               true\n                                        else \n        \
    \                                    if (a < 432800l) \n                     \
    \                           if ((a < 10800000l) && (a < 21600000l)) \n       \
    \                                             true\n                         \
    \                       else \n                                              \
    \      false\n                                            else \n            \
    \                                    if (a < 1089600l) \n                    \
    \                                true\n                                      \
    \          else \n                                                    false\n\
    \                        else \n                            if ((a < 360000l)\
    \ && (a < 720000l)) \n                                if ((a < 1080000l) && (a\
    \ < 2160000l)) \n                                    if (a < 4320000l) \n    \
    \                                    if ((a < 10800000l) && (a < 21600000l)) \n\
    \                                            true\n                          \
    \              else \n                                            if (a < 108400l)\
    \ \n                                                true\n                   \
    \                         else \n                                            \
    \    false\n                                    else \n                      \
    \                  if (a < \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvh5w7mrs.scala:27:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                                \e[33mif\e[0m (a < 2160.0l)\
    \ \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                        Invalid literal number\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpvh5w7mrs.scala:103:47 --------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m                                        \e[33mif\e[0m\
    \ (a < \n\e[31m\e[31m    |\e[0m                                              \
    \ ^\e[0m\n\e[31m    |\e[0m                                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpvh5w7mrs.scala:27:38 -----------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                                \e[33mif\e[0m (a < 2160.0l) \n\e[31m\e\
    [31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ (Null)\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpvh5w7mrs.scala:30:44\
    \ ----------------\e[0m\e[0m\n\e[33m30 |\e[0m                                \
    \            \e[31mtrue\e[0m\n\e[33m\e[33m   |\e[0m                          \
    \                  ^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in\
    \ statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpvh5w7mrs.scala:34:52 ----------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m                                                    \e\
    [31mtrue\e[0m\n\e[33m\e[33m   |\e[0m                                         \
    \          "
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a==0) return true\n        if(a==1l) return\
    \ true\n        if(a==2l) return true\n        if(a==3l) return true\n       \
    \ if(a==4l) return true\n        if(a==5l) return true\n        if(a==6l) return\
    \ true\n        if(a==7l) return true\n        if(a==8l) return true\n       \
    \ if(a==9l) return true\n        if(a==10l) return true\n        if(a==11l) return\
    \ true\n        if(a==12l) return true\n        if(a==13l) return true\n     \
    \   if(a==14l) return true\n        if(a==15l) return true\n        if(a==16l)\
    \ return true\n        if(a==17l) return true\n        if(a==18l) return true\n\
    \        if(a==19l) return true\n        if(a==20l) return true\n        if(a==21l)\
    \ return true\n        if(a==22l) return true\n        if(a==23l) return true\n\
    \        if(a==24l) return true\n        if(a==25l) return true\n        if(a==26l)\
    \ return true\n        if(a==27l) return true\n        if(a==28l) return true\n\
    \        if(a==29l) return true\n        if(a==30l) return true\n        if(a==31l)\
    \ return true\n        if(a==32l) return true\n        if(a==33l) return true\n\
    \        if(a==34l) return true\n        if(a==35l) return true\n        if(a==36l)\
    \ return true\n        if(a==37l) return true\n        if(a==38l) return true\n\
    \        if(a==39l) return true\n        if(a==40l) return true\n        if(a==41l)\
    \ return true\n        if(a==42l) return true\n        if(a==43l) return true\n\
    \        if(a==44l) return true\n        if(a==45l) return true\n        if(a==46l)\
    \ return true\n        if(a==47l) return true\n        if(a==48l) return true\n\
    \        if(a==49l) return true\n        if(a==50l) return true\n        if(a==51l)\
    \ return true\n        if(a==52l) return true\n        if(a==53l) return true\n\
    \        if(a==54l) return true\n        if(a==55l) return true\n        if(a==56l)\
    \ return true\n        if(a==57l) return true\n        if(a==58l) return true\n\
    \        if(a==59l) return true\n        if(a==60l) return true\n        if(a==61l)\
    \ return true\n        if(a==62l) return true\n        if(a==63l) return true\n\
    \        if\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsw_85usq.scala:85:10 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mif\e[0m\n\e[31m\e[31m   |\e[0m        \
    \  ^\e[0m\n\e[31m   |\e[0m          expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n<0)\n           \
    \ false\n        else if (n==0) \n            true\n        else if (n==1)\n \
    \           true\n        else if (n==2)\n            true\n        else if (n==3)\n\
    \            true\n        else if (n==4)\n            true\n        else if (n==5)\n\
    \            true\n        else if (n==6)\n            true\n        else if (n==7)\n\
    \            true\n        else if (n==8)\n            true\n        else if (n==9)\n\
    \            true\n        else if (n==10)\n            true\n        else if\
    \ (n==11)\n            true\n        else if (n==12)\n            true\n     \
    \   else if (n==13)\n            true\n        else if (n==14)\n            true\n\
    \        else if (n==15)\n            true\n        else if (n==16)\n        \
    \    true\n        else if (n==17)\n            true\n        else if (n==18)\n\
    \            true\n        else if (n==19)\n            true\n        else if\
    \ (n==20)\n            true\n        else if (n==21)\n            true\n     \
    \   else if (n==22)\n            true\n        else if (n==23)\n            true\n\
    \        else if (n==24)\n            true\n        else if (n==25)\n        \
    \    true\n        else if (n==26)\n            true\n        else if (n==27)\n\
    \            true\n        else if (n==28)\n            true\n        else if\
    \ (n==29)\n            true\n        else if (n==30)\n            true\n     \
    \   else if (n==31)\n            true\n        else if (n==32)\n            true\n\
    \        else if (n==33)\n            true\n        else if (n==34)\n        \
    \    true\n        else if (n==35)\n            true\n        else if (n==36)\n\
    \            true\n        else if (n==37)\n            true\n        else if\
    \ (n==38)\n            true\n        else if (n==39)\n            true\n     \
    \   else if (n==40)\n            true\n        else if (n==41)\n            true\n\
    \        else if (n==42)\n            true\n        else if (n==43)\n        \
    \    true\n        else if (n==44)\n            true\n        else if (n==45)\n\
    \            true\n        else if (n==46)\n            true\n        else if\
    \ (n==47)\n            true\n        else if (n==48)\n            true\n     \
    \   else if (n==49)\n            true\n        else if (n==50)\n            true\n\
    \        else if (n==51)\n            true\n        else if (n==52)\n        \
    \    true\n        else if (n==53)\n            true\n        else if (n==54)\n\
    \            true\n        else if (n==55)\n            true\n        else if\
    \ (n==56)\n            true\n        else if (n==57)\n            true\n     \
    \   else if (n==58\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5553wtxm.scala:141:4 ---------------------------\e\
    [0m\e[0m\n\e[31m141 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a match {\n            case x if x >= 0l && x <=\
    \ 1l && x >= 4l && x <= 9l && x >= 16l => true\n            case x => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk62sjyo9.scala:27)\n\tat Problem.main(tmpk62sjyo9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        (n*(n*(n + 1))) == Math.pow(n,\
    \ 3)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwlwbf24.scala:25)\n\tat Problem.main(tmplwlwbf24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val l = BigInt(a)\n        if((l.asInt / l.asInt\
    \ % 3 == 0) && (l.asInt / l.asInt % 3 == 0) && (l.asInt / l.asInt % 3 == 0) &&\
    \ (l.asInt / l.asInt % 3 == 0))\n            return true\n        else\n     \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmuod90yj.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m((l.asInt / l.asInt % \e[31m3\e\
    [0m == \e[31m0\e[0m) && (l.asInt / l.asInt % \e[31m3\e[0m == \e[31m0\e[0m) &&\
    \ (l.asInt / l.asInt % \e[31m3\e[0m == \e[31m0\e[0m) && (l.asInt / l.asInt % \e\
    [31m3\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value asInt is not a member of BigInt - did you mean l.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a % 3 == 0 && (a / 3) == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpgtt9oh.scala:24)\n\tat Problem.main(tmpfpgtt9oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // write your code\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbjvpzfsu.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// write your\
    \ code\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num : Long = a % 181l\n        val flag = num\
    \ > 181l\n        val cube = num == (181l*181l*181l) && num != 0l\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzkunm3_v.scala:27)\n\tat Problem.main(tmpzkunm3_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val s = a * a // Square\n        a = a mod 5\n\
    \        val t = (s - (s % a)) % a // Cube\n        return (t == 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9cyml56.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        a = a mod \e[31m5\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Write code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7k9lqvo.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// Write code\
    \ here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val r = a / 3\n        val cube = (a % 3) == 0\n\
    \        val threeTimesCube = (r * r * r == a)\n        cube && threeTimesCube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv13n136.scala:27)\n\tat Problem.main(tmpbv13n136.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (1l to a.toInt) contains ((a * a * a) == a)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvr8wpgf.scala:24)\n\tat Problem.main(tmprvr8wpgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        def sum(a,b : Long) : Long = a + b\n        val\
    \ n = a.toInt\n        val list = List(1l, n).toMap\n        (list.map(_ -> 0l).containsKey(n))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyq9e5q4_.scala:21:17 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mdef\e[0m \e[36msum\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = a + b\n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 ':' expected, but ','\
    \ found\n\e[31m\e[31m-- Error: /tmp/tmpyq9e5q4_.scala:23:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List(\e[31m1l\e\
    [0m, n).toMap\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\
    \e[31m   |\e[0m                                    Cannot prove that AnyVal <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                  V is a type variable\n\e[31m   |\e[0m                     \
    \               .\n2 errors found\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        for(i <- 0 until cube)\
    \ yield {\n            if(cube(i) * cube(i) * cube(i) == a) true\n           \
    \ else false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp5etrcn1g.scala:23:15 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(cube(i) * cube(i) * cube(i)\
    \ == a) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m\
    \   |\e[0m               \e[33mvalue\e[0m \e[35mcube\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num = a % 3\n        (num == 0 || num == 1)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjbyei4xm.scala:27)\n\tat Problem.main(tmpjbyei4xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      val cubes = scala.collection.mutable.ListBuffer[Long]()\n\
    \      def loop(a: Long): Boolean = a > 0 && (a % a != 0) && cubes.isEmpty {\n\
    \         cubes += a\n         loop(a/a)\n      }\n      loop(a)\n      cubes.size\
    \ == a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp24in1rfh.scala:22:66 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mdef\e[0m \e[36mloop\e[0m(\e[36ma\e[0m: \e\
    [35mLong\e[0m): \e[35mBoolean\e[0m = a > \e[31m0\e[0m && (a % a != \e[31m0\e[0m)\
    \ && cubes.isEmpty {\n\e[31m\e[31m   |\e[0m                                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \e\
    [33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val squareSum = a.toInt*a.toInt*a.toInt\n     \
    \   val cubeSum = squareSum*squareSum*squareSum\n        return cubeSum == a.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdo9xgc8l.scala:29)\n\tat Problem.main(tmpdo9xgc8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val num =a\n        if(num%1==0||num%2==0||num%3==0||num%4==0||num%5==0||num%6==0||num%7==0||num%8==0||num%9==0||num%10==0||num%11==0||num%12==0||num%13==0||num%14==0||num%15==0||num%16==0||num%17==0||num%18==0||num%19==0||num%20==0||num%21==0||num%22==0||num%23==0||num%24==0||num%25==0||num%26==0||num%27==0||num%28==0||num%29==0||num%30==0||num%31==0||num%32==0||num%33==0||num%34==0||num%35==0||num%36==0||num%37==0||num%38==0||num%39==0||num%40==0||num%41==0||num%42==0||num%43==0||num%44==0||num%45==0||num%46==0||num%47==0||num%48==0||num%49==0||num%50==0||num%51==0||num%52==0||num%53==0||num%54==0||num%55==0||num%56==0||num%57==0||num%58==0||num%59==0||num%60==0||num%61==0||num%62==0||num%63==0||num%64==0)\n\
    \        {\n            return true\n        }\n        else\n        {\n    \
    \        return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpxv2e57.scala:33)\n\tat Problem.main(tmpcpxv2e57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a/3\n        val n2 = n*n\n        val\
    \ n3 = n*n*n\n        return (n == n2 && n2 == n3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn81s8b0g.scala:28)\n\tat Problem.main(tmpn81s8b0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val x = a%10000000l\n        val y = a%1000000000l\n\
    \        val z = a%1000000000000l\n        (z==0 && y==0 && x==0) || (z==0 &&\
    \ y==0 && x<0) || (y==0 && x==0) || (y==0 && x<0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68nqpt_x.scala:27)\n\tat Problem.main(tmp68nqpt_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 1l) {\n            true\n        } else\
    \ if (a == 2l) {\n            true\n        } else if (a == 3l) {\n          \
    \  true\n        } else if (a == 4l) {\n            true\n        } else if (a\
    \ == 5l) {\n            true\n        } else if (a == 6l) {\n            true\n\
    \        } else if (a == 7l) {\n            true\n        } else if (a == 8l)\
    \ {\n            true\n        } else if (a == 9l) {\n            true\n     \
    \   } else if (a == 10l) {\n            true\n        } else if (a == 11l) {\n\
    \            true\n        } else if (a == 12l) {\n            true\n        }\
    \ else if (a == 13l) {\n            true\n        } else if (a == 14l) {\n   \
    \         true\n        } else if (a == 15l) {\n            true\n        } else\
    \ if (a == 16l) {\n            true\n        } else if (a == 17l) {\n        \
    \    true\n        } else if (a == 18l) {\n            true\n        } else if\
    \ (a == 19l) {\n            true\n        } else if (a == 20l) {\n           \
    \ true\n        } else if (a == 21l) {\n            true\n        } else if (a\
    \ == 22l) {\n            true\n        } else if (a == 23l) {\n            true\n\
    \        } else if (a == 24l) {\n            true\n        } else if (a == 25l)\
    \ {\n            true\n        } else if (a == 26l) {\n            true\n    \
    \    } else if (a == 27l) {\n            true\n        } else if (a == 28l) {\n\
    \            true\n        } else if (a == 29l) {\n            true\n        }\
    \ else if (a == 30l) {\n            true\n        } else if (a == 31l) {\n   \
    \         true\n        } else if (a == 32l) {\n            true\n        } else\
    \ if (a == 33l) {\n            true\n        } else if (a == 34l) {\n        \
    \    true\n        } else if (a == 35l) {\n            true\n        } else if\
    \ (a == 36l) {\n            true\n        } else if (a == 37l) {\n           \
    \ true\n        } else if (a == 38l) {\n            true\n        } else if (a\
    \ == 39l) {\n            true\n        } else if (a == 40l) {\n            true\n\
    \        } else if (a == 41l) {\n            true\n        } else if (a == 42l)\
    \ {\n            true\n        } else if (a == 43l) {\n            true\n    \
    \    } else if (a == 44l) {\n            true\n        } else if (a == 45l) {\n\
    \            true\n        } else if (a == 46l) {\n            true\n        }\
    \ else if (a == 47l) {\n            true\n        } else if (a == 48l) {\n   \
    \         true\n        } else if (a == 49l) {\n            true\n        } else\
    \ if (a == 50l) {\n            true\n        } else if (a == 51l) {\n        \
    \    true\n        } else if (a == 52l) {\n            true\n        } else if\
    \ (a == 53l) {\n            true\n        } else if (a == 54l) {\n           \
    \ true\n        } else if (a == 55l) {\n            true\n        } else if (a\
    \ == 56l) {\n            true\n        } else if (a == 57l) {\n            true\n\
    \        } else if (a == 58l) {\n            true\n        } else if (a == 59l)\
    \ {\n            true\n        } else if (a == 60l) {\n            true\n    \
    \    } else if (a == 61l) {\n            true\n        } else if (a == 62l) {\n\
    \            true\n        } else if (a == 63l) {\n            true\n        }\
    \ else if (a == 64l) {\n            true\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgdnog9jc.scala:163:0 ---------------------------\e\
    [0m\e[0m\n\e[31m163 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgdnog9jc.scala:162:1\
    \ --------------------\e[0m\e[0m\n\e[31m162 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpgdnog9jc.scala:151:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m151 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpgdnog9jc.scala:148:12 ---------------\e\
    [0m\e[0m\n\e[33m148 |\e[0m            \e[31mtrue\e[0m\n\e[33m\e[33m    |\e[0m\
    \            ^^^^\e[0m\n\e[33m    |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m    |\e[0m\n\e[33m\
    \    |\e[0m longer explanation available when compiling with `-explain`\n2 warnings\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      val square = Math.pow(a,2)\n      val cube = square\
    \ * square * square\n      cube.toString == \"100000000.0\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfs_msu_5.scala:26)\n\tat Problem.main(tmpfs_msu_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var b = 0\n        while(a > 0) {\n           \
    \ b += a % 3\n            a = a / 3\n        }\n        return b == 0 || b ==\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu00m74pn.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            b += a % \e[31m3\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu00m74pn.scala:24:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            a = a /\
    \ \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        var b = a\n        var c = 1\n        var d = 1\n\
    \        var e = 1\n        var f = true\n        while(f && (b > 0)){\n     \
    \       if(b >= c)\n                return false\n            b -= c\n       \
    \     c <<= 1\n            if(b >= c)\n                return false\n        \
    \    b -= c\n            c <<= 1\n            if(b >= c)\n                return\
    \ false\n            b -= c\n            c <<= 1\n            if(b >= c)\n   \
    \             return false\n            b -= c\n            c <<= 1\n        \
    \    if(b >= c)\n                return false\n            e <<= 1\n        }\n\
    \        return f\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4qibchiu.scala:50)\n\tat Problem.main(tmp4qibchiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b = a / 3\n        var c = a % 3\n        if\
    \ (c == 0)\n            return true\n        var d = b / 3\n        if (d == 0\
    \ || d % 3 == 0)\n            return false\n        c = b / 2\n        if (c <\
    \ 6l)\n            return false\n        val e = b / 6\n        if ((e == 0 ||\
    \ e % 6 == 0) && c < 24l)\n            return false\n        if (c >= 24l)\n \
    \           return true\n        if (c % 6 < 4)\n            return false\n  \
    \      return true\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpojvmz0iy.scala:41)\n\tat Problem.main(tmpojvmz0iy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Your code here\n        if(a >= -1 && a <= 180){\n\
    \            val i = math.abs(a)\n            if(math.floor(i) == math.ceil(i)\
    \ && math.floor(i) == math.floor(i*2)){\n                return true\n       \
    \     }\n            else\n                return false\n        }\n        else\n\
    \            return false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4t88vvhw.scala:34)\n\tat Problem.main(tmp4t88vvhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26_5fi2j.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \n\e[31m22 |\e[0m  \
    \  }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      if (a < 0)\n         return false\n      else if\
    \ (a < 1l)\n         return false\n      else if (a < 2l)\n         return false\n\
    \      else if (a < 3l)\n         return true\n      else if (a < 4l)\n      \
    \   return true\n      else if (a < 5l)\n         return true\n      else if (a\
    \ < 6l)\n         return true\n      else if (a < 7l)\n         return true\n\
    \      else if (a < 8l)\n         return true\n      else if (a < 9l)\n      \
    \   return true\n      else if (a < 10l)\n         return true\n      else if\
    \ (a < 100l)\n         return true\n      else if (a < 1000l)\n         return\
    \ true\n      else if (a < 10000l)\n         return true\n      else\n       \
    \  return false\n   }\n}\n</code>\n<|/ a tags=scala,algorithm |>\n<| c |>\nThank\
    \ you for your answer. I was wondering why my solution was so slow when trying\
    \ with a small number of elements. My mistake was that I assumed that my solution\
    \ would not be that slow for any input size. I was just surprised that it was\
    \ slower than the one I posted.\n<|/ c |>\n<| c |>\nIt can be slower than the\
    \ one you posted, but it will be slower on large numbers. That's because the recursive\
    \ solution is exponential in time and the iterative one is linear in time.\n<|/\
    \ c |>\n<| c |>\nWhat is the purpose of `List`?\n<|/ c |>\n<| c |>\nIt's just\
    \ an example for the recursive solution, since the question wanted a pure functional\
    \ solution. Maybe it would have been better to rename it to `isCube`.\n<|/ c |>\n\
    <| c |>\nAh, I see. Thanks for the explanation.\n<|/ c |>\n<| a tags=scala,algorithm\
    \ |>\nIf you want a pure functional solution, you can use a fold:\n<code>\ndef\
    \ isCube(x: Long) = \n    List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 100l,\
    \ 1000l, 10000l).foldLeft(true)(_&&_)(x%_==0)\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer! I am just wondering, since foldLeft is lazy, why\
    \ does it go through all the elements in the list even though a non-true value\
    \ is returned from it? Why does it not simply return false?\n<|/ c |>\n<| c |>\n\
    The fold function takes the previous \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpaj2wsm_j.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpaj2wsm_j.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaj2wsm_j.scala:94:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m94 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpaj2wsm_j.scala:74:89 --------------------\e[0m\e[0m\n\
    \e[31m74 |\e[0m    List(\e[31m1l\e[0m, \e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m4l\e\
    [0m, \e[31m5l\e[0m, \e[31m6l\e[0m, \e[31m7l\e[0m, \e[31m8l\e[0m, \e[31m9l\e[0m,\
    \ \e[31m10l\e[0m, \e[31m100l\e[0m, \e[31m1000l\e[0m, \e[31m10000l\e[0m).foldLeft(\e\
    [31mtrue\e[0m)(_&&_)(x%_==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (_$2 : Long)\n\e[31m   |\e[0m                                            \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaj2wsm_j.scala:84:11 ------------------------\e[0m\e[0m\n\e[31m84 |\e\
    [0m    assert(iscube((\e[31m1l\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m   |\e\
    [0m           ^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: iscube\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaj2wsm_j.scala:85:11 ------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    assert(iscube((\e[31m2l\e[0m)) == (\e[31mfalse\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  Not found: iscube\n\e[3"
  stdout: ''
  timestamp: 1659979937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a % 3 = 0) a else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpspy6iu9s.scala:21:18 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (a % \e[31m3\e[0m = \e[31m0\e[0m)\
    \ a \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpspy6iu9s.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (a % \e[31m3\e[0m = \e[31m0\e[0m)\
    \ a \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspy6iu9s.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (a % \e\
    [31m3\e[0m = \e[31m0\e[0m) a \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (a : Long)\n\e[31m   |\e[0m                       Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val isCube = true\n        isCube && a % 12 ==\
    \ 0 && a.isInt && a.toInt == a.toLong * a.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavvvk77a.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        isCube && a % \e[31m12\e[0m == \e[31m0\e[0m &&\
    \ a.isInt && a.toInt == a.toLong * a.toLong\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             value isInt is\
    \ not a member of Long - did you mean a.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1659979937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val b = (3l) * 3l\n        if((a < b) && a.lt(3l))\n\
    \            false\n        else if((a > b) && a.gt(-3l))\n            true\n\
    \        else\n            false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_tx0b3s.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m((a < b) && a.lt(\e[31m3l\e[0m))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              value lt is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpr_tx0b3s.scala:24:29 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m((a > b) && a.gt(-\e[31m3l\e[0m))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        value gt is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n1 = a.toLong\n        if(n1 == 0){\n     \
    \       return true\n        }\n        val n2 = n1.toLong * n1.toLong\n     \
    \   val n3 = n2 * n1.toLong\n        val n4 = n3 * n1.toLong\n        val n5 =\
    \ n4 * n1.toLong\n        val n6 = n5 * n1.toLong\n        val n7 = n6 * n1.toLong\n\
    \        val n8 = (n7 * n1.toLong + n7).toLong\n        return (n8 == n1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiqynoibz.scala:35)\n\tat Problem.main(tmpiqynoibz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = if (isPositive(a)) a.toLong ** 3 else\
    \ (-a.toLong ** 3)\n        if (cube % 1l == 0) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7n7_okp.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcube\e[0m = \e[33mif\e[0m\
    \ (isPositive(a)) a.toLong ** \e[31m3\e[0m \e[33melse\e[0m (-a.toLong ** \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: isPositive\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp7n7_okp.scala:21:47 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcube\e[0m = \e[33mif\e[0m\
    \ (isPositive(a)) a.toLong ** \e[31m3\e[0m \e[33melse\e[0m (-a.toLong ** \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ** is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp7n7_okp.scala:21:68\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcube\e[0m = \e[33mif\e[0m (isPositive(a)) a.toLong ** \e[31m3\e[0m \e[33melse\e\
    [0m (-a.toLong ** \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                 value ** is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt;\n        (n == 1 || n * n == a)\
    \ || (n * n == (a / n))\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzhmdsqr6.scala:28)\n\tat Problem.main(tmpzhmdsqr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if( a == 0 ) {\n            return( true )\n  \
    \      }\n        if( a < 0 ) {\n            return( false )\n        }\n    \
    \    val n = (a / 3) + 1\n        if( n % 3 == 0 ) {\n            return( true\
    \ )\n        }\n        return( false )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwokd9kc8.scala:34)\n\tat Problem.main(tmpwokd9kc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val factors = List(1l to Math.sqrt(3l)*2l)\n  \
    \      val list = factors.flatMap {\n            x => List(x*x, x*x*x, x*x*x*x)\n\
    \        }.toList\n        return list.contains(a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsq71jiqq.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactors\e\
    [0m = List(\e[31m1l\e[0m to Math.sqrt(\e[31m3l\e[0m)*\e[31m2l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Found:    Double\n\e[31m   |\e[0m   \
    \                              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsq71jiqq.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[36mx\e[0m => List(x*x, x*x*x, x*x*x*x)\n\
    \e[31m\e[31m   |\e[0m                      ^^\e[0m\n\e[31m   |\e[0mvalue * is\
    \ not a member of scala.collection.immutable.NumericRange.Inclusive[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpsq71jiqq.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[36mx\e[0m => List(x*x, x*x*x, x*x*x*x)\n\
    \e[31m\e[31m   |\e[0m                           ^^\e[0m\n\e[31m   |\e[0mvalue\
    \ * is not a member of scala.collection.immutable.NumericRange.Inclusive[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpsq71jiqq.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[36mx\e[0m => List(x*x, x*x*x, x*x*x*x)\n\
    \e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659979942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a.toString.takeWhile(_.isDigit).length == 3 &&\
    \ a.toString.dropWhile(_ == 'x').toInt == a.toString.toInt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdl8v76pg.scala:24)\n\tat Problem.main(tmpdl8v76pg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if ((a < 0l) || (a > 180l)) false\n        if (a\
    \ < 90l) false\n        if ((a % 90l) == 0l) true\n        val m = a % 90l\n \
    \       val r = a / 90l\n        val i = r / 90l\n        val g = i / 90l\n  \
    \      val p = g / 90l\n        val v = g / 90l\n        val r = r / 90l\n   \
    \     val i = i / 90l\n        val p = p / 90l\n        val v = v / 90l\n    \
    \    val g = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n     \
    \   val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n      \
    \  val r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n       \
    \ val v = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n        val\
    \ i = i / 90l\n        val p = p / 90l\n        val v = v / 90l\n        val g\
    \ = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n        val p =\
    \ p / 90l\n        val v = v / 90l\n        val g = g / 90l\n        val r = r\
    \ / 90l\n        val i = i / 90l\n        val p = p / 90l\n        val v = v /\
    \ 90l\n        val g = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n\
    \        val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n \
    \       val r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n  \
    \      val v = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n   \
    \     val i = i / 90l\n        val p = p / 90l\n        val v = v / 90l\n    \
    \    val g = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n     \
    \   val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n      \
    \  val r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n       \
    \ val v = v / 90l\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / \e[31m90l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = i / \e[31m90l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already\
    \ defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = p / \e[31m90l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mp is already\
    \ defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mv\e[0m = v / \e[31m90l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mv is already\
    \ defined as \e[33mvalue\e[0m \e[35mv\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mg\e[0m = g / \e[31m90l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mg is already\
    \ defined as \e[33mvalue\e[0m \e[35mg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn937enn9.scala:35:12 ---------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1659979942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        return a >= 0l && a <= 180l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7019bt8k.scala:25)\n\tat Problem.main(tmp7019bt8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // We should use recursion to solve this problem.\n\
    \        if (a == 0) return true\n        if (a == -1) return true\n        if\
    \ (a == 1l) return true\n        if (a == 2l) return true\n        if (a == 3l)\
    \ return true\n        if (a == 4l) return true\n        if (a == 5l) return true\n\
    \        if (a == 6l) return true\n        if (a == 7l) return true\n        if\
    \ (a == 8l) return true\n        if (a == 9l) return true\n        if (a == 10l)\
    \ return true\n        if (a == 11l) return true\n        if (a == 12l) return\
    \ true\n        if (a == 13l) return true\n        if (a == 14l) return true\n\
    \        if (a == 15l) return true\n        if (a == 16l) return true\n      \
    \  if (a == 17l) return true\n        if (a == 18l) return true\n        if (a\
    \ == 19l) return true\n        if (a == 20l) return true\n        if (a == 21l)\
    \ return true\n        if (a == 22l) return true\n        if (a == 23l) return\
    \ true\n        if (a == 24l) return true\n        if (a == 25l) return true\n\
    \        if (a == 26l) return true\n        if (a == 27l) return true\n      \
    \  if (a == 28l) return true\n        if (a == 29l) return true\n        if (a\
    \ == 30l) return true\n        if (a == 31l) return true\n        if (a == 32l)\
    \ return true\n        if (a == 33l) return true\n        if (a == 34l) return\
    \ true\n        if (a == 35l) return true\n        if (a == 36l) return true\n\
    \        if (a == 37l) return true\n        if (a == 38l) return true\n      \
    \  if (a == 39l) return true\n        if (a == 40l) return true\n        if (a\
    \ == 41l) return true\n        if (a == 42l) return true\n        if (a == 43l)\
    \ return true\n        if (a == 44l) return true\n        if (a == 45l) return\
    \ true\n        if (a == 46l) return true\n        if (a == 47l) return true\n\
    \        if (a == 48l) return true\n        if (a == 49l) return true\n      \
    \  if (a == 50l) return true\n        if (a == 51l) return true\n        if (a\
    \ == 52l) return true\n        if (a == 53l) return true\n        if (a == 54l)\
    \ return true\n        if (a == 55l) return true\n        if (a == 56l) return\
    \ true\n        if (a == 57l) return true\n        if (a == 58l) return true\n\
    \        if (a == 59l) return true\n        if (a == 60l) return true\n      \
    \  if (a == 61l) return true\n        if (a == 62l) return true\n        if (a\
    \ == 63l) return true\n        if (a == 64l) return true\n        if (a == 65l)\
    \ return true\n        if (a == 66l) return true\n        if (a == 67l) return\
    \ true\n        if (a == 68l) return true\n        if (a == 69l) return true\n\
    \        if (a == 70l) return true\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd7liv0zz.scala:93:8\
    \ ---------------------\e[0m\e[0m\n\e[31m93 |\e[0m        \e[33mif\e[0m (a ==\
    \ \e[31m70l\e[0m) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0) return true;\n        else if (a ==\
    \ 1l) return true;\n        else if (a == 2l) return true;\n        else if (a\
    \ == 3l) return true;\n        else if (a == 4l) return true;\n        else if\
    \ (a == 5l) return true;\n        else if (a == 6l) return true;\n        else\
    \ if (a == 7l) return true;\n        else if (a == 8l) return true;\n        else\
    \ if (a == 9l) return true;\n        else if (a == 10l) return true;\n       \
    \ else if (a == 11l) return true;\n        else if (a == 12l) return true;\n \
    \       else if (a == 13l) return true;\n        else if (a == 14l) return true;\n\
    \        else if (a == 15l) return true;\n        else if (a == 16l) return true;\n\
    \        else if (a == 17l) return true;\n        else if (a == 18l) return true;\n\
    \        else if (a == 19l) return true;\n        else if (a == 20l) return true;\n\
    \        else if (a == 21l) return true;\n        else if (a == 22l) return true;\n\
    \        else if (a == 23l) return true;\n        else if (a == 24l) return true;\n\
    \        else if (a == 25l) return true;\n        else if (a == 26l) return true;\n\
    \        else if (a == 27l) return true;\n        else if (a == 28l) return true;\n\
    \        else if (a == 29l) return true;\n        else if (a == 30l) return true;\n\
    \        else if (a == 31l) return true;\n        else if (a == 32l) return true;\n\
    \        else if (a == 33l) return true;\n        else if (a == 34l) return true;\n\
    \        else if (a == 35l) return true;\n        else if (a == 36l) return true;\n\
    \        else if (a == 37l) return true;\n        else if (a == 38l) return true;\n\
    \        else if (a == 39l) return true;\n        else if (a == 40l) return true;\n\
    \        else if (a == 41l) return true;\n        else if (a == 42l) return true;\n\
    \        else if (a == 43l) return true;\n        else if (a == 44l) return true;\n\
    \        else if (a == 45l) return true;\n        else if (a == 46l) return true;\n\
    \        else if (a == 47l) return true;\n        else if (a == 48l) return true;\n\
    \        else if (a == 49l) return true;\n        else if (a == 50l) return true;\n\
    \        else if (a == 51l) return true;\n        else if (a == 52l) return true;\n\
    \        else if (a == 53l) return true;\n        else if (a == 54l) return true;\n\
    \        else if (a == 55l) return true;\n        else if (a == 56l) return true;\n\
    \        else if (a == 57l) return true;\n        else if (a == 58l) return true;\n\
    \        else if (a == 59l) return true;\n        else if (a == 60l) return true;\n\
    \        else if (a == 61l) return true;\n        else if (a == 62l) return true;\n\
    \        else if (a == 63l) return true;\n        else if (a == 64l) return true;\n\
    \        else if (a == 65l) return true;\n        else if (a == 66l) return true;\n\
    \        else if (a == 67l) return true;\n        else if (a == 68l) return true;\n\
    \        else if (a == 69l) return true;\n        else if (a == 70l) return true;\n\
    \        else if (a == 71l) return true;\n        else if (a == 72l) return true;\n\
    \        else if (a == \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0nn5miq8.scala:94:21 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (a == \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      if(a < 1)\n        false\n      else if(a%3 == 0)\n\
    \        true\n      else \n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2l3p_umf.scala:29)\n\tat Problem.main(tmp2l3p_umf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube : Double = a * a \n        a > 0 && (cube\
    \ % 1 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9x5g3nm.scala:26)\n\tat Problem.main(tmpc9x5g3nm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a % 4 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2z3n75a.scala:24)\n\tat Problem.main(tmpf2z3n75a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a % 6) == (a % 4) == (a % 2) == 0\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2jn4u3me.scala:21:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (a % \e[31m6\e[0m) == (a % \e[31m4\e[0m) == (a\
    \ % \e[31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Values of types Boolean and Long cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659979944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val list = new mutable.ListBuffer[Long]()\n   \
    \     val list1 = list\n        val list2 = list\n        val list3 = list\n \
    \       val list4 = list\n        val list5 = list\n        list1.push(a)\n  \
    \      list2.push(a * a)\n        list3.push(a * a * a)\n        list4.push(a\
    \ * a * a * a)\n        list5.push(a * a * a * a * a)\n        if(list1.take(5)\
    \ == list2.take(5) == list3.take(5) == list4.take(5) == list5.take(5)) {\n   \
    \         true\n        } else {\n            false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe53it0b3.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = 1l ** 4l\n        val result = a % cube\
    \ == 0\n        result \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9h498yjf.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcube\e[0m = \e[31m1l\e[0m\
    \ ** \e[31m4l\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value ** is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val sq = a.toInt\n        if( sq == 1)\n      \
    \      true\n        else if( sq == 3)\n            true\n        else if( sq\
    \ == 5)\n            true\n        else if( sq == 7)\n            true\n     \
    \   else if( sq == 9)\n            true\n        else\n            false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1jl2zj4.scala:38)\n\tat Problem.main(tmpj1jl2zj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cubes = a % 3\n        (cubes == 0) || (a %\
    \ a == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu9qpe2a6.scala:26)\n\tat Problem.main(tmpu9qpe2a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n      println(a.toString)\n      a % 1 == 0\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfkcvox0i.scala:26)\n\tat Problem.main(tmpfkcvox0i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '1

    2

    '
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        (a*a) == (a*a*a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp52lgog2k.scala:26)\n\tat Problem.main(tmp52lgog2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        a*a*a == a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy5izbns2.scala:27)\n\tat Problem.main(tmpy5izbns2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // TODO: implement here\n        false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbef82f61.scala:25)\n\tat Problem.main(tmpbef82f61.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a < 0 || a > 180l) {\n            return false\n\
    \        }\n        val cubers = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until a) {\n            val c = a / i\n            val s = c % 2\n    \
    \        cubers += c\n            if(s != 0)\n                cubers += i\n  \
    \      }\n        if(cubers.size == 1) {\n            val x = cubers(0)\n    \
    \        val y = cubers(1)\n            val z = (x * x) % 3\n            val r\
    \ = (y * y) % 3\n            val t = ((z * z) % 3) * 3 + ((r * r) % 3)\n     \
    \       if(x == y && x == z && y == r) {\n                return (t == x)\n  \
    \          }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgc_0wbx9.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcubers\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgc_0wbx9.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until a) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (a : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if(a*a*a == a) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dl19lll.scala:28)\n\tat Problem.main(tmp_dl19lll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        if (a == 0)\n            true\n        else\n \
    \           if (a % 3 == 0 || a % 5 == 0)\n                iscube(a/3)\n     \
    \       else\n                false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswv7dqi9.scala:30)\n\tat Problem.main(tmpswv7dqi9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        // Solution goes here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5iay0h1.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36miscube\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Unit\n\e[31m   |\e[0m                      \
    \               Required: Boolean\n\e[31m21 |\e[0m        \e[34m// Solution goes\
    \ here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns true \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val xs = List(1l, 3l, 5l, 7l, 9l, 11l, 13l, 15l,\
    \ 17l)\n        val ys = List(2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l)\n     \
    \   val zs = List(4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l, 20l)\n        val xx =\
    \ List(1l, 3l, 5l, 7l, 9l, 11l, 13l, 15l, 17l)\n        val yy = List(2l, 4l,\
    \ 6l, 8l, 10l, 12l, 14l, 16l, 18l)\n        val zz = List(4l, 6l, 8l, 10l, 12l,\
    \ 14l, 16l, 18l, 20l)\n\n        val square = xs ++ ys ++ zs\n        val cube\
    \ = xx++ yy++ zz\n        a >= 1 && a <= 100 && (a % 10 == 0 || a % 10 == 1) &&\
    \ square.contains(a) && (a % 11 == 0 || a % 11 == 1) && cube.contains(a)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppvu0zwe0.scala:35)\n\tat Problem.main(tmppvu0zwe0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979946
