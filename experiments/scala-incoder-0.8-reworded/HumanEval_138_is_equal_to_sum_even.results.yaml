language: scala
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = collection.mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            if (n % i == 0) {\n             \
    \   list.push(i)\n            }\n        }\n        list.length == 4 && list.contains(4L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprirsqrv4.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmprirsqrv4.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                list.push(i)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member of scala.collection.mutable.ArrayBuffer[Long]\
    \ - did you mean list.last?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sumEven = 0\n        var sumEvenSum = 0\n        var\
    \ n = n.toInt\n        for(i <- 0 until n) {\n            if(i % 2 == 0) {\n \
    \               sumEven = sumEven * (i + 1)\n            } else {\n          \
    \      sumEvenSum = sumEvenSum + sumEven\n                sumEven = 0\n      \
    \      }\n        }\n        if (sumEvenSum == sumEven && sumEvenSum < n)\n  \
    \          return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzkq6e2yo.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum : Long = 0\n        for (i <- 0 until n) {\n  \
    \          if (i % 2 != 0) {\n                sum += i\n            }\n      \
    \  }\n        return sum == 4\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv281r78j.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val count = 4l\n        def check(n: Long, counts: mutable.Set[Long])\
    \ : Boolean = {\n            if (n % 2 == 0) true\n            else {\n      \
    \          if (n % 4 == 0) true\n                else {\n                    if\
    \ (n % 8 == 0) true\n                    else false\n                }\n     \
    \       }\n        }\n        val (lower, upper) = n.toLong / 2\n        for {\n\
    \            c <- 0 until count\n        } yield {\n            if (check(lower,\
    \ mutable.Set.fill(c)(0l))) check(n, mutable.Set.fill(c)(c)\n            else\
    \ check(n, mutable.Set.add(c)(count))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmouh_1l0.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33melse\e[0m check(n, mutable.Set.add(c)(count))\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            ')' expected,\
    \ but 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmouh_1l0.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e\
    [36mcheck\e[0m(\e[36mn\e[0m: \e[35mLong\e[0m, \e[36mcounts\e[0m: mutable.Set[\e\
    [35mLong\e[0m]) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmouh_1l0.scala:26:25 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            c <- \e[31m0\e[0m until count\n\e[31m\e[31m   |\e[0m     \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (count : Long)\n\e[31m   |\e[0m                         Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmouh_1l0.scala:28:22\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (check(lower,\
    \ mutable.Set.fill(c)(\e[31m0l\e[0m))) check(n, mutable.Set.fill(c)(c)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \       Found:    (lower : Any)\n\e[31m   |\e[0m                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmouh_1l0.scala:28:29\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m\
    \ (check(lower, mutable.Set.fill(c)(\e[31m0l\e[0m))) check(n, mutable.Set.fill(c)(c)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006]"
  stdout: ''
  timestamp: 1660009955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val n = n.toInt\n        val sum = Set(1 until n).filter(\
    \ (x => x % 2 == 0) ).reduce( (a, b) => a + b )\n        n / sum == 4 && n / sum\
    \ * sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpknfzhfol.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpknfzhfol.scala:14:49 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = Set(\e[31m1\e[0m until\
    \ n).filter( (\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m) ).reduce( (\e\
    [36ma\e[0m, \e[36mb\e[0m) => a + b )\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of Range, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mThe following import might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpknfzhfol.scala:14:81\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = Set(\e[31m1\e[0m until n).filter( (\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m) ).reduce( (\e[36ma\e[0m, \e[36mb\e[0m) => a + b )\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Range, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val (sum,remainder) = n.toInt % 4\n        if (sum == 0\
    \ && !remainder) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_cr5t1k0.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (sum == \e[31m0\e[0m && !remainder)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value unary_! is not a member of Any\n1 error found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = List(0)\n        for (i <- 1 to (n / 4))\
    \ {\n            sumEven += i :: 0\n        }\n        for (i <- 1 to (n%4)) {\n\
    \            sumEven = sumEven - 2\n        }\n        return sumEven.forall(x\
    \ => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_x74p5ul.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to (n / \e[31m4\e[0m)) {\n\e[31m\e[31m   |\e[0m               \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e\
    [31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_x74p5ul.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sumEven += i :: \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not\
    \ a member of List[Int] - did you mean sumEven.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_x74p5ul.scala:15:25 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            sumEven += i :: \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ :: is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_x74p5ul.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to (n%\e[31m4\e[0m)) {\n\e[31m\e[31m   |\e[0m                 \
    \       ^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_x74p5ul.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sumEven = sumEven - \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of List[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val isSumEven = Seq.fill(n / 4)(true)\n            .reduce\
    \ ( (a,b) => a && b )\n        n match {\n            case 0 | 1 | 2 | 3 => isSumEven\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpodq65nc8.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misSumEven\e\
    [0m = Seq.fill(n / \e[31m4\e[0m)(\e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Found:    Long\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.Stack[Long]()\n        val result =\
    \ mutable.ListBuffer[Long]()\n        for (i <- 1 until n) {\n            if (nums.size\
    \ == 0 || nums.peek().isEven) {\n                if (nums.size == 0 || nums.peek().isEven\
    \ && nums.peek().intValue == i) {\n                    result += nums.pop().intValue\n\
    \                } else {\n                    nums += i\n                }\n\
    \            } else {\n                result += nums.pop().intValue\n       \
    \     }\n        }\n        nums.toList.isEmpty && result.size == 4\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_mpu2gu.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf_mpu2gu.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf_mpu2gu.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n      val sumEven = n.toInt\n      val evens = List.range(1, sumEven)\n\
    \      evens.forall(n => n % 2l == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3025lz8m.scala:20)\n\tat Problem.main(tmp3025lz8m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n < 4) return false\n        if (n == 4) return true\n\
    \        val result = ListBuffer[Long]()\n        n match {\n            case\
    \ 1    => result += 2\n            case 2    => result += 4\n            case\
    \ 3    => result += 6\n            case _    => n match {\n                  \
    \          case 2    => result += 4\n                            case 3    =>\
    \ result += 6\n                            case 4    => result += 8\n        \
    \                    case _    => n match {\n                                \
    \            case 2    => result += 4\n                                      \
    \      case 3    => result += 6\n                                            case\
    \ 4    => result += 8\n                                            case _    =>\
    \ n\n                                        }\n                            }\n\
    \        }\n        result.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzlabah8f.scala:35)\n\tat Problem.main(tmpzlabah8f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val arr : mutable.ArrayBuilder[Long] = mutable.ArrayBuilder.make[Long](n).initialCapacity(n).result\n\
    \        arr.+=(n/2)\n        var cnt = 0\n        while (arr.hasNext) {\n   \
    \         cnt += arr.next\n            if (cnt > 4L) {\n                return\
    \ (arr.toList == List(0))\n            }\n        }\n        return (cnt == 4L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt4mmt_7e.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m : mutable.ArrayBuilder[\e\
    [35mLong\e[0m] = mutable.ArrayBuilder.make[\e[35mLong\e[0m](n).initialCapacity(n).result\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt4mmt_7e.scala:13:47 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36marr\e[0m : mutable.ArrayBuilder[\e[35mLong\e[0m]\
    \ = mutable.ArrayBuilder.make[\e[35mLong\e[0m](n).initialCapacity(n).result\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        (n % 4 == 0) &&\n        (n % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5wlcp3n0.scala:17)\n\tat Problem.main(tmp5wlcp3n0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nn = n.toInt\n        val set = mutable.Set[Long]()\n\
    \        val nn = n * nn\n        for (i <- 1l to nn - 4l) set += i\n        set.size\
    \ == 4l\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkk7ujey.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnn\e[0m = n * nn\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnn is already defined\
    \ as \e[33mvalue\e[0m \e[35mnn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkk7ujey.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // TODO: Write this function\n        false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrtdu6x0.scala:19)\n\tat Problem.main(tmphrtdu6x0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var result = 0\n        var i = 0\n        var sum = 0\n\
    \n        while(i < n) {\n            sum = sum + i\n            i += 1\n    \
    \    }\n\n        while(sum > 0) {\n            if(sum % 2 == 0) {\n         \
    \       result = result + 1\n            }\n            sum = sum / 2\n      \
    \  }\n\n        if(result == 4) {\n            true\n        } else {\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp786vhzdd.scala:38)\n\tat Problem.main(tmp786vhzdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = n\n        val evens = List(2l, 4l, 6l, 8l)\n\
    \        // iterate from 0 to sum/2 until you get a sum that doesn't include any\
    \ even number\n        for (i <- 0 until sum/2 if evens.isEmpty) {\n         \
    \   val sum = evens.filterNot(evens.contains(_+i)).sum\n            if (sum ==\
    \ n) return true\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_tqfxr2.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until sum/\e[31m2\e[0m \e[33mif\e[0m evens.isEmpty) {\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \               Found:    Long\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9_tqfxr2.scala:17:53\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36msum\e[0m = evens.filterNot(evens.contains(_+i)).sum\n\e[31m\e[31m  \
    \ |\e[0m                                                     ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => _$1 + i.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isSumEven(x : Long, count : Long) = (x % 2) == 0 &&\
    \ x != 0 && (count == 0 || isSumEven(x-x, count-1))\n        isSumEven(n, 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmp2ogumpl3.scala:13:89 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mdef\e[0m \e[36misSumEven\e[0m(\e[36mx\e\
    [0m : \e[35mLong\e[0m, \e[36mcount\e[0m : \e[35mLong\e[0m) = (x % \e[31m2\e[0m)\
    \ == \e[31m0\e[0m && x != \e[31m0\e[0m && (count == \e[31m0\e[0m || isSumEven(x-x,\
    \ count-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m              Overloaded or recursive \e[33mmethod\e[0m \e[35misSumEven\e[0m\
    \ needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isSumEven(n:Long, sum:Long):Boolean = {\n         \
    \   val l=n%4\n            (l==0) && sum+l==n\n        }\n        val sum = mutable.MutableArray.empty[Long]\n\
    \        for (i <- 2l+1l; if isSumEven(i, sum.last)) {\n            sum :+= i\n\
    \        }\n        sum.last==n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkmn211o.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.MutableArray.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppkmn211o.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m+\e[31m1l\e\
    [0m; \e[33mif\e[0m isSumEven(i, sum.last)) {\n\e[31m\e[31m   |\e[0m          \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                  value withFilter is not\
    \ a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        sumEven.toIntArray.foreach { x =>\n            evenSums += x\n      \
    \  }\n        evenSums.toSet.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0qf7rvq.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa0qf7rvq.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        sumEven.toIntArray.foreach { \e[36mx\e[0m =>\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ toIntArray is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n.toInt == 0) {\n            return false\n       \
    \ }\n        var current = 0\n        var sum = 0\n        var found = false\n\
    \        while (current <= n) {\n            val evenSum = SumEven.foldLeft(0)(_\
    \ + _)\n            if (evenSum == n) {\n                found = true\n      \
    \          break\n            } else {\n                current = current + 1\n\
    \            }\n        }\n        if (!found) {\n            return false\n \
    \       } else {\n            return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnunkpmjv.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenSum\e[0m = SumEven.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: SumEven\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnunkpmjv.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        while (n>0) {\n            if (n%2 == 0)\n                even\
    \ += n\n            n/=2\n        }\n        evens ++= even.reverse\n        while\
    \ evens.nonEmpty\n            sum += evens.last\n        sum >= 4\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl8w84666.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += evens.last\n\e[31m\e[31m   |\e[0m\
    \                        ^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl8w84666.scala:13:20 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl8w84666.scala:17:16 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                even += n\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: even\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl8w84666.scala:18:13 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n/=\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpl8w84666.scala:24:4\
    \ -----------------\e[0m\e[0m\n\e[33m23 |\e[0m        sum >= \e[31m4\e[0m\n\e\
    [33m24 |\e[0m    }\n\e[33m\e[33m   |\e[0m                ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if(n != 0L) {\n            val remainder = n % 4\n    \
    \        if (remainder == 0)\n                return true\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp256idbn8.scala:21)\n\tat Problem.main(tmp256idbn8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(!n.isNegative, \"Invalid input\")\n        require(n.isEven\
    \ && n.toString.toInt % 2 == 0, \"Invalid input\")\n        var i = 0\n      \
    \  var sum : Long = 0\n        var sumOfEvenNumbers = 1\n        while (i < n)\
    \ {\n            sum += i\n            sumOfEvenNumbers += i\n            i +=\
    \ 1\n        }\n        return sum == sumOfEvenNumbers\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplr2cxpjg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        require(!n.isNegative, \e[31m\"Invalid input\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value isNegative is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmplr2cxpjg.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        require(n.isEven && n.toString.toInt % \e[31m2\e[0m\
    \ == \e[31m0\e[0m, \e[31m\"Invalid input\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isEven is not a\
    \ member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ even = 1\n        while(even <= n) {\n            if(n % even == 0) {\n    \
    \            nums += even\n            }\n            even += 2\n        }\n \
    \       nums.toSet.size == 4\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe61u_4b6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val count = n.toInt\n        val res = for (i <- 0 to n-1;\
    \ acc <- 0 to i; if (i % 2 == 0 && acc + i < count) yield acc + i) sum == 0\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wubvqmp.scala:14:88 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m to n-\e[31m1\e[0m; acc <- \e[31m0\e[0m to i; \e[33mif\e[0m\
    \ (i % \e[31m2\e[0m == \e[31m0\e[0m && acc + i < count) \e[33myield\e[0m acc +\
    \ i) sum == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \                                                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         ')' expected, but 'yield' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wubvqmp.scala:14:33 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m to n-\e[31m1\e[0m; acc <- \e[31m0\e[0m to i; \e[33mif\e[0m\
    \ (i % \e[31m2\e[0m == \e[31m0\e[0m && acc + i < count) \e[33myield\e[0m acc +\
    \ i) sum == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \   ^^^\e[0m\n\e[31m   |\e[0m                                 Found:    Long\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wubvqmp.scala:14:103 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m to n-\e[31m1\e[0m; acc <- \e[31m0\e[0m to i; \e[33mif\e[0m\
    \ (i % \e[31m2\e[0m == \e[31m0\e[0m && acc + i < count) \e[33myield\e[0m acc +\
    \ i) sum == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wubvqmp.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        res\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (res : Unit)\n\e[31m\
    \   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when com"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = n.toInt\n        val oddSum = 0\n        for(i\
    \ <- 1 to sum) oddSum += i \n        oddSum.toDouble == Math.pow(4, sum).toDouble\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0b_2l5p.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to sum) oddSum\
    \ += i \n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value += is not a member of Int - did you mean oddSum.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if(n == 4l) true\n        else {\n            // find the\
    \ first even number\n            var evenNbr = n + 4l\n            var sumEven\
    \ = 0\n            while(evenNbr >= 2l) {\n                sumEven += evenNbr\n\
    \                evenNbr -= 2l\n            }\n            if(sumEven == n) true\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr9dplyeg.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sumEven += evenNbr\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = mutable.Set[Long]()\n        var even = n + 2\n\
    \        while (even <= math.pow(2, 31)) {\n            sum += even.toLong\n \
    \           even += 2\n        }\n        if (sum.toSet == Seq(24l, 32l, 4l).toSet)\n\
    \            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe55qjyp4.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Create an array to store the sum of the positive even\
    \ numbers (4^1, 4^2, 4^3, etc).\n        // This array should be of length n.\n\
    \        val poweredEvenSumArray = Array.ofDim[Int](n + 1)\n        // Initialize\
    \ array elements to 0.\n        poweredEvenSumArray.init\n\n        // Evaluate\
    \ whether the array is equal to the sum of the positive even numbers.\n      \
    \  for (i = 1 until n) {\n            // Check if current number is an even number.\n\
    \            if (n % 2 == 0) {\n                // Add current number to array\
    \ and increment i because array indexing is from 0 to n-1.\n                poweredEvenSumArray(i)\
    \ = poweredEvenSumArray(i) + n\n                i += 1\n            }\n      \
    \      else {\n                // If current number isn't an even number, decrement\
    \ i because array indexing is from 1 to n.\n                i -= 1\n         \
    \   }\n        }\n        // If the array equals the sum of the positive even\
    \ numbers, return True.\n        poweredEvenSumArray.sum == n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz59ipbnl.scala:20:15 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz59ipbnl.scala:20:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        \
    \    ^\e[0m\n\e[31m   |\e[0m                            '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz59ipbnl.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz59ipbnl.scala:15:51 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36mpoweredEvenSumArray\e[0m = Array.ofDim[\e[35mInt\e\
    [0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpz59ipbnl.scala:31:9 -------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m  \
    \ |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.Impli"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Use only primitive data types (no collections, no functions)\n\
    \        // Use recursion to evaluate the problem\n        // Use mutable collections\
    \ to store intermediate results. Use immutable collections to prevent side-effects\n\
    \n        val listOfEvenNumbers = List(2, 4, 6, 8)\n        val sumEvenNumbers\
    \ = listOfEvenNumbers.sum\n\n        if (n != sumEvenNumbers)\n            return\
    \ false\n        else\n            return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2ryexr2.scala:28)\n\tat Problem.main(tmpw2ryexr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n == 0l) false\n        else {\n            val list\
    \ = n :: (0 :: 1 :: 2 :: 3 :: Nil)\n            val sum = list.foldLeft((0l,0l))\
    \ { case ((sumA,sumB),(n1,n2)) => (sumA + n1, sumB + n2) }\n            sum._1\
    \ == sum._2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1etjkg6h.scala:16:83 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = list.foldLeft((\e\
    [31m0l\e[0m,\e[31m0l\e[0m)) { \e[33mcase\e[0m ((sumA,sumB),(n1,n2)) => (sumA +\
    \ n1, sumB + n2) }\n\e[31m\e[31m   |\e[0m                                    \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m \
    \  |\e[0mmatch arguments ((n1 : Any))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1etjkg6h.scala:16:94\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e\
    [0m \e[36msum\e[0m = list.foldLeft((\e[31m0l\e[0m,\e[31m0l\e[0m)) { \e[33mcase\e\
    [0m ((sumA,sumB),(n1,n2)) => (sumA + n1, sumB + n2) }\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((n2 : Any))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val arr=new Array[Int]\n        val m = (n >>> 0) % 4\n\
    \        val j = (m >>> 0) % 4\n        val k = (j >>> 0) % 4\n        val l =\
    \ (k >>> 0) % 4\n        var m1 = n - 1\n        for(i <- 0 until arr.length)\
    \ {\n            if(m1 < 0) return false\n            arr(i)=m1\n            m1\
    \ -= 1\n        }\n        arr(j)=m1\n        m1 -= 1\n        arr(k)=m1\n   \
    \     m1 -= 1\n        arr(l)=m1\n        return m1 == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7w02qjwx.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m=\e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter _length of \e[33mconstructor\e\
    [0m \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[Int]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case 4 => true\n            case\
    \ _ if n % 2 == 0 => true\n            case _ => false\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp28d6wlt.scala:20)\n\tat Problem.main(tmpp28d6wlt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sumEven = 0\n        val nums = Vector.fill(4)(0)\n\
    \        for(i <- 0 until n-1) {\n            val temp = n%i + 1\n           \
    \ if (temp == 0) sumEven += 1\n            nums(i) += temp\n        }\n      \
    \  (sumEven == 4)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvg1zdfc.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfvg1zdfc.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            nums(i) += temp\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var nums = mutable.LinkedHashSet[Long]()\n        nums.add(0l)\
    \ \n        nums.add(2l)\n        nums.add(4l) \n        nums.add(6l) \n     \
    \   nums.add(8l)\n        nums.add(10l) \n        nums.add(12l) \n        nums.add(16l)\
    \ \n        nums.add(20l) \n        nums.add(24l) \n        nums.add(32l) \n \
    \       nums.add(40l) \n        nums.add(48l) \n        nums.add(56l) \n     \
    \   nums.add(64l) \n        nums.add(72l) \n        nums.add(80l) \n        nums.add(96l)\
    \ \n        nums.add(112l) \n        nums.add(128l) \n        nums.add(136l) \n\
    \        nums.add(144l) \n        nums.add(152l) \n        nums.add(160l) \n \
    \       nums.add(176l) \n        nums.add(184l) \n        nums.add(192l) \n  \
    \      nums.add(200l) \n        nums.add(208l) \n        nums.add(216l) \n   \
    \     nums.add(224l) \n        nums.add(232l) \n        nums.add(240l) \n    \
    \    nums.add(248l) \n        nums.add(256l) \n        nums.add(264l) \n     \
    \   nums.add(272l) \n        nums.add(280l) \n        nums.add(288l) \n      \
    \  nums.add(296l) \n        nums.add(304l) \n        nums.add(312l) \n       \
    \ nums.add(320l) \n        nums.add(328l) \n        nums.add(336l) \n        nums.add(344l)\
    \ \n        nums.add(352l) \n        nums.add(360l) \n        nums.add(368l) \n\
    \        nums.add(376l) \n        nums.add(384l) \n        nums.add(392l) \n \
    \       nums.add(400l) \n        nums.add(408l) \n        nums.add(416l) \n  \
    \      nums.add(424l) \n        nums.add(432l) \n        nums.add(440l) \n   \
    \     nums.add(448l) \n        nums.add(456l) \n        nums.add(464l) \n    \
    \    nums.add(472l) \n        nums.add(480l) \n        nums.add(488l) \n     \
    \   nums.add(496l) \n        nums.add(504l) \n        nums.add(512l) \n      \
    \  nums.add(520l) \n        nums.add(532l) \n        nums.add(540l) \n       \
    \ nums.add(548l) \n        nums.add(556l) \n        nums.add(564l) \n        nums.add(572l)\
    \ \n        nums.add(580l) \n        nums.add(588l) \n        nums.add(596l) \n\
    \        nums.add(604l) \n        nums.add(614l) \n        nums.add(620l) \n \
    \       nums.add(6\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpakknygfb.scala:95:4 ----------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpakknygfb.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e\
    [36mnums\e[0m = mutable.LinkedHashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = n.toInt\n        if (sum < 0) return false\n\
    \        var sumEvenEven = 0l\n        var sumEvenEven2 = 0l\n        var sumEvenEven3\
    \ = 0l\n        var sumEvenEven4 = 0l\n        for (i <- 0 until sum) {\n    \
    \        val r = sum.modulo(i)\n            if (r == 0) {\n                sumEvenEven\
    \ = sumEvenEven\n                sumEvenEven2 = sumEvenEven2\n               \
    \ sumEvenEven3 = sumEvenEven3\n                sumEvenEven4 = sumEvenEven4\n \
    \           } else {\n                sumEvenEven = sumEvenEven + i\n        \
    \        sumEvenEven2 = sumEvenEven2 + i\n                sumEvenEven3 = sumEvenEven3\
    \ + i\n                sumEvenEven4 = sumEvenEven4 + i\n            }\n      \
    \  }\n        return (sumEvenEven == sum) && sumEvenEven2 == sum && sumEvenEven3\
    \ == sum && sumEvenEven4 == sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsjl35dv_.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = sum.modulo(i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                value modulo is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = (4l).until(n).takeWhile(_%2==0).sum\n       \
    \ if (n%4==0) (sum==n) else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zmz4rzj.scala:19)\n\tat Problem.main(tmp1zmz4rzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val n = math.abs(n)\n        val count = new mutable.HashMap[Int,\
    \ Int]()\n        (0 until n).foreach(n => {\n            if (n % 2 == 0) {\n\
    \                val count = count.getOrElse(1, 0)\n                count.value\
    \ = (count.value + 1) / 2\n            } else {\n                count.value =\
    \ (count.value + 1) / 2\n            }\n        })\n        count.value != n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpghxttjmh.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.abs(n)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpghxttjmh.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n % 2 == 0) false\n        else n.toInt / 2 % 2 ==\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxmy3b49.scala:19)\n\tat Problem.main(tmpyxmy3b49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case 0 => true\n            case\
    \ x if x <= 4l && n % 2 == 0 => false\n            case x if x <= 4l && n % 2\
    \ == 1 => true\n            case x => isEqualToSumEven((x * 2l) - 2l)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp11llsvt0.scala:23)\n\tat Problem.main(tmp11llsvt0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val p1 = n.toInt/2\n        val p2 = n.toInt*(2n+1)/2\n\
    \        val p3 = n.toInt*(3n+1)/2\n        val p4 = n.toInt*(4n+1)/2\n      \
    \  if(p1 + p2 + p3 + p4 == 4n ) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8dcp8o6k.scala:17:35 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m(p1 + p2 + p3 + p4 == \e[31m4\e\
    [0mn ) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                   expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8dcp8o6k.scala:14:27 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mp2\e[0m = n.toInt*(\e[31m2\e[0mn+\e[31m1\e[0m)/\e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m   |\e\
    [0m                          value n is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8dcp8o6k.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mp3\e[0m = n.toInt*(\e[31m3\e\
    [0mn+\e[31m1\e[0m)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^^\e[0m\n\e[31m   |\e[0m                          value n is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8dcp8o6k.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mp4\e[0m = n.toInt*(\e[31m4\e[0mn+\e[31m1\e[0m)/\e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                          ^^\e[0m\n\e[31m   |\e[0m                 \
    \         value n is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        import scala.math._\n        val isSumEven = \n       \
    \     n.toDouble.product\n            .toLong\n            .toDouble\n       \
    \     .toInt\n            .toLong\n            .toLong \n            .toInt\n\
    \        sumEven.contains(isSumEven)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjpr0gro.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            n.toDouble.product\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value product\
    \ is not a member of Double\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjpr0gro.scala:22:8\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        sumEven.contains(isSumEven)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: sumEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val n2 = 2l\n        val n3 = n2 * n2\n        val n4 =\
    \ n3 * n3\n        if (n % 2 == 0) false else if ((n % 4 == 0) && (n / n2 != 1))\
    \ false\n        else if ((n % 4 == 0) && (n / n3 == 1)) true\n        else if\
    \ ((n % 4 == 0) && (n / n4 == 1)) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6vf_dd_.scala:24)\n\tat Problem.main(tmpm6vf_dd_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Initialize some counters\n        var countEven = 0\n\
    \        var countOdd = 1\n        var evens = List(0)\n        var odds = List(1)\n\
    \n        // Repeat the following code until either you have found a solution\
    \ or the loop\n        // terminates.\n        while (n > 0) {\n            //\
    \ If n is even, increment countEven\n            if (n % 2 == 0) {\n         \
    \       countEven = countEven + 1\n                // Add one to evens, otherwise\
    \ add two to odds\n                if (countEven == 4)\n                    evens\
    \ = evens :+ n\n                else\n                    odds = odds :+ n\n \
    \           }\n            // If n is odd, increment countOdd\n            else\
    \ {\n                countOdd = countOdd + 1\n                // Add one to odds,\
    \ otherwise add two to evens\n                if (countOdd == 4)\n           \
    \         evens = evens :+ n\n                else\n                    odds =\
    \ odds :+ n\n            }\n            // Increment n by one and decrement n's\
    \ count by one unless n is zero\n            // Note that n may increase or decrement\
    \ by one at each loop\n            n = n - 1 // Note that (n -= 1) doesn't work\
    \ in Scala\n            if (n == 0)\n                break\n        }\n\n    \
    \    // If we have 4 evens, they are the sum of 4\n        // If we have 2 odds,\
    \ they are the sum of 2\n        // If we have none, then return false\n     \
    \   if (evens.size == 4)\n            return true\n        else if (evens.size\
    \ == 2) {\n            val evenSum = (evens(0) + evens(1))/2\n            if (odds(0)\
    \ + odds(1) == evenSum)\n                return true\n            else\n     \
    \           return false\n        }\n        else return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4k8i1q0.scala:27:37\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    evens = evens\
    \ :+ n\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4k8i1q0.scala:29:35 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    odds = odds :+ n\n\e[31m\e[31m  \
    \ |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m           \
    \                        Found:    (n : Long)\n\e[31m   |\e[0m               \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk4k8i1q0.scala:36:37 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m                    evens = evens :+ n\n\e[31m\e[31m   |\e[0m        \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk4k8i1q0.scala:38:35 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                    odds = odds :+ n\n\e[31m\e[31m   |\e[0m          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpk4k8i1q0.scala:42:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            n = n -\
    \ \e[31m1\e[0m \e[34m// Note that (n -= 1) doesn't work in Scala\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n == 0) return true\n        if (n % 2 == 0 || n %\
    \ 3 == 0) return false\n        if (n % 4 == 0) return true\n        // else loop\
    \ around until you find a number that fits condition\n        val ans = true\n\
    \        var i = 1\n        while (!ans && i < n) {\n            val x = n\n \
    \           if (x % 2 == 0 && x % 3 == 0 && x % 4 != 0) ans = false\n        \
    \    if (ans) i = i + 1\n        }\n        return ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpihh1fywm.scala:21:60 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e\
    [0m && x % \e[31m3\e[0m == \e[31m0\e[0m && x % \e[31m4\e[0m != \e[31m0\e[0m) ans\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                            Reassignment to val ans\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = 4\n        val n = sum*sum*sum*n\n        val\
    \ nums = Vector.tabulate(sum)(i => i*2)\n        val evens = nums.filter(_%2 ==\
    \ 0)\n        if(n % sum != 0)\n          return false\n        else {\n     \
    \     if(evens.toSet.size == 4) {\n            return true\n          }\n    \
    \      else return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9fyqxy87.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = sum*sum*sum*n\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n >= 0, \"n must be positive\")\n        require(n\
    \ %2 == 0, \"n must be an even number\")\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = math.floor(math.sqrt(n))\n        var s = n\n        while (m\
    \ * m <= n) {\n            if (n % m != 0) {\n                s += m \n      \
    \      }\n            m += 2\n        }\n        return (n == s)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn6zihmyh.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e\
    [0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn6zihmyh.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn6zihmyh.scala:22:14 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            m += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Double\
    \ - did you mean m.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isEven(x: Long) : Boolean = {\n            (x%2L ==\
    \ 0L)\n        }\n        def sumEven(x: Long, y: Long) : Long = {\n         \
    \   if (isEven(x)) {\n                x + y\n            } else {\n          \
    \      x\n            }\n        }\n        val xs = 0 until n\n        val ys\
    \ = xs.filter(isEven)\n        xs.toSet.size == ys.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcu9wdmib.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mxs\e\
    [0m = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e\
    [0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = List(0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l,\
    \ 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfnak1mnl.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfnak1mnl.scala:14:5 ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val fourEvensArray = Array((0l), 2l, 4l, 6l, 8l)\n    \
    \    var sum = 0\n        var evenSum = 0\n        var evenSumCount = 0\n    \
    \    var currentEvenSum = 0\n        for(i <- 0 until fourEvensArray.length)\n\
    \        {\n            val currentSum = (fourEvensArray(i) + fourEvensArray(i\
    \ + 1)) / 2\n            if(currentSum > sum)\n            {\n               \
    \ evenSumCount = currentEvenSum\n                sum = currentSum\n          \
    \      evenSum = fourEvensArray(i)\n            }\n            else if(currentSum\
    \ == sum)\n            {\n                if(currentEvenSum == evenSum)\n    \
    \                evenSumCount += 1\n                else if(currentEvenSum < evenSum)\n\
    \                {\n                    evenSumCount = currentEvenSum\n      \
    \              evenSum = evenSum\n                    sum = currentSum\n     \
    \           }\n                else\n                    return false\n      \
    \      }\n        }\n        \n        if(evenSumCount != 4 && evenSumCount !=\
    \ 6)\n            return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxs4rfhgg.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum = currentSum\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Found:    (currentSum : Long)\n\e[31m   |\e[0m          \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxs4rfhgg.scala:25:40 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                evenSum = fourEvensArray(i)\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            Found:    Long\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxs4rfhgg.scala:35:26\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                    sum = currentSum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (currentSum : Long)\n\e[31m   |\e[0m    \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSum = (2l)*((n-1l).asInstanceOf[Long])\n      \
    \  evenSum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpud78m57i.scala:19)\n\tat Problem.main(tmpud78m57i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val r = scala.util.Random.nextInt(5) + 1\n        // Find\
    \ all factors up to sqrt(n)\n        var factors = List(1l)\n        while ((n%factors.last)\
    \ == 0) {\n            factors = factors :+ (factors.last*factors.last)\n    \
    \    }\n        factors = factors.reverse\n        // Test each factor by summing\
    \ up 4 positive even numbers\n        factors.drop(1).foreach(f => {\n       \
    \     if (n % f == 0) {\n                return false\n            }\n       \
    \ })\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n >= 0, \"Negative numbers are not allowed\")\n\
    \        require(n >= 4, \"Number cannot be less than 4\")\n        val result\
    \ = n % 2 == 0\n        for (i  <- 0 to 4){\n            if (result && (n % i\
    \ == 0))\n                return false\n        }\n        true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.isEqualToSumEven$$anonfun$3(tmp78qv470f.scala:17)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.isEqualToSumEven(tmp78qv470f.scala:19)\n\
    \tat Problem$.main(tmp78qv470f.scala:23)\n\tat Problem.main(tmp78qv470f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nDiv4 = n%4\n        val divList = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to nDiv4)\n            divList += i\n        if(divList.length\
    \ == 4)\n            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpak_bc7d8.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to nDiv4)\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    (nDiv4 : Long)\n\e[31m   |\e[0m \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n      val l = List(n/4l, n/2l, n)\n      l.forall(e => e == l.drop(1).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpev61cc05.scala:19)\n\tat Problem.main(tmpev61cc05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Initialize a set containing the number 1\n        var\
    \ s = scala.collection.mutable.Set[Long]()\n        // Add 1 to the set\n    \
    \    s += 1\n        // Add the number itself to the set\n        s += n\n   \
    \     // Add the first 4 positive even numbers in the set\n        s += 2l\n \
    \       s += 3l\n        s += 4l\n        // If the number is not equal to the\
    \ size of the set, return false\n        if (s.size != 4) return false;\n    \
    \    // Otherwise, return true\n        return true;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7ztlrvq.scala:29)\n\tat Problem.main(tmpu7ztlrvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val numbers = Vector.fill(4)(1l)\n        val n = n % 2\n\
    \        for (i <- 0 to 3)\n            if (n % i == 0)\n                numbers(i)\
    \ = (numbers(i) + n) / i\n        numbers.sum == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph21i1_k1.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmph21i1_k1.scala:17:16 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                numbers(i) = (numbers(i) + n) / i\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not\
    \ a member of Vector[Long] - did you mean numbers.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        (1L to n).forall(i => n % 2 == 0 && (i + (n / 2L)) % 2\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2r1nj3h3.scala:18)\n\tat Problem.main(tmp2r1nj3h3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n > 0, \"n must be positive integer\")\n      \
    \  require(n % 2 == 0, \"n must be an even number\")\n        var count = 0\n\
    \        var sum : Long = 0\n        var temp : Long = 0\n        var oddSums\
    \ : Boolean = false\n        for (i <- 0 until n) {\n            if (i % 2 ==\
    \ 0) {\n                count += 1\n                sum += i\n            } else\
    \ {\n                if (sum >= 4) {\n                    oddSums = true\n   \
    \                 temp = 4\n                } else {\n                    if (count\
    \ == 4) {\n                        temp -= count\n                        count\
    \ = 0\n                    }\n                    temp -= sum\n              \
    \      sum += i\n                }\n            }\n        }\n        if (oddSums)\
    \ {\n            val temp2 = sum + temp\n            if (temp2 == temp) {\n  \
    \              return true\n            } else {\n                return false\n\
    \            }\n        } else {\n            val temp2 = sum + temp\n       \
    \     return temp2 == temp\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl2eer9tm.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n >= 0 && n <= 4l, \"Number must be between 0 and\
    \ 4.\")\n        val sum : Int = (1l to n).foldLeft(0l)((acc, i) => acc + i)\n\
    \        sum == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94ym9v3n.scala:14:46\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mInt\e[0m = (\e[31m1l\e[0m to n).foldLeft(\e[31m0l\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Your code goes here\n        // Hint: this involves\
    \ some mathematical manipulation\n        if (n == 0)\n            return true\n\
    \        var sum = 0\n        var even = 1\n        for (i <- 1 to n / 2)\n  \
    \          if (i % 2 == 0)\n                even *= i\n            else\n    \
    \            sum -= i\n        if (sum == 0 && even == n)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80yc2mj0.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val m = mutable.MutableListBuffer.empty[Long]\n       \
    \ for(i<- 0 until n){\n            if(i %% 2 == 0){\n                m.add(i)\n\
    \            }\n        }\n        val m2 = m.toList\n        if(m2.size == 4){\n\
    \            return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8er6vt0.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.MutableListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf8er6vt0.scala:14:24 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i<- \e[31m0\e[0m until n){\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf8er6vt0.scala:15:17\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(i\
    \ %% \e[31m2\e[0m == \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^\e\
    [0m\n\e[31m   |\e[0m               value %% is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val oddSum: mutable.Map[Int, Long] = new mutable.HashMap()\n\
    \        var sum = 0L\n        while (n > 0) {\n            sum += n % 2\n   \
    \         n /= 2\n        }\n        val evenSum = n - sum\n        for ((sum,\
    \ odd) in oddSum) {\n            if (oddSum.get(sum) == even)\n              \
    \  return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3rzlmad7.scala:20:35 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m ((sum, odd) in oddSum) {\n\e[31m\e\
    [31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m      \
    \                             '<-' expected, but '{' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3rzlmad7.scala:13:20 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m: mutable.Map[\e[35mInt\e\
    [0m, \e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashMap()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rzlmad7.scala:13:49\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36moddSum\e[0m: mutable.Map[\e[35mInt\e[0m, \e[35mLong\e[0m] = \e[33mnew\e[0m\
    \ mutable.HashMap()\n\e[31m\e[31m   |\e[0m                                   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3rzlmad7.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean n.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rzlmad7.scala:23:9 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import colle"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isSumEven(number : Long) : Boolean = number > 0 &&\
    \ number % 2 == 0\n        def sumEvens(n : Long) : Long = n + n\n\n        val\
    \ numbers = mutable.ListBuffer[Long]()\n\n        while (!isSumEven(n)) {\n  \
    \          numbers += n\n            n += 1\n        }\n\n        if (numbers.size\
    \ < 4L)\n            false // n is definitely not equal to 4\n        else {\n\
    \            val last = numbers.last\n            val list = numbers.take(4).toList\n\
    \            val evens = numbers.drop(4).toList\n            if (list.forall(isEven)\
    \ && evens.forall(isEven) && list.sum == last)\n                true // n is equal\
    \ to 4\n            else\n                false // n is not equal to 4\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgi0aba2.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwgi0aba2.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            n += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.List.empty[Long]\n        val sumOdd\
    \ = mutable.List.empty[Long]\n\n        // Scan through the digits (numbers) and\
    \ only consider the even number\n        val xs = (1 to (n/100l)).filter(_%2 ==\
    \ 0).takeWhile(_ < n)\n\n        // For each even number x, add the odd number\n\
    \        xs.foreach { x =>\n            val sum = x / 100\n            val digit\
    \ = x % 100\n            sumEven += sum\n            if (sum < 10)\n         \
    \       sumOdd += sum.toLong\n        }\n\n        // If the list sumEven (the\
    \ sum of all the even numbers) is equal to the number n, then it is\n        //\
    \ the sum of the even numbers of the given number\n        if (sumEven.lastOption\
    \ eq n)\n            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwpmveb18.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwpmveb18.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwpmveb18.scala:17:24 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = (\e[31m1\e[0m\
    \ to (n/\e[31m100l\e[0m)).filter(_%\e[31m2\e[0m == \e[31m0\e[0m).takeWhile(_ <\
    \ n)\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n == 0L) {\n            return true\n        }\n\n\
    \        def isEvenSumHelper(n: Long, sum: Long): Boolean = {\n            if\
    \ (sum == n) true else false\n\n            // Base case: when sum is even, add\
    \ 2 to sum\n            if (sum % 2 == 0) {\n                val newSum = sum\
    \ + 2\n                isEvenSumHelper(n, newSum)\n            } else {\n    \
    \            false\n            }\n        }\n\n        val isEven = n > 0L\n\
    \        if (!isEven) {\n            true\n        } else {\n            val sumEven\
    \ = 0L\n            val sumOdd = 1L\n            for (x <- 0 to n) {\n       \
    \         isEvenSumHelper(x, sumEven)\n                isEvenSumHelper(x, sumOdd)\n\
    \            }\n            sumEven == sumOdd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf9j94ecs.scala:35:27\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mfor\e[0m (x\
    \ <- \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val counts = Vector.fill(4){ 0 }\n        var sum = 0\n\
    \        while(n > 0) {\n            sum = sum + n\n            n /= 2\n     \
    \       counts(sum%4) = counts(sum%4) + 1\n        }\n        if (counts.sum ==\
    \ 4) {\n            true\n        }\n        else {\n            false\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrzt1umq.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = sum + n\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrzt1umq.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrzt1umq.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            counts(sum%\e\
    [31m4\e[0m) = counts(sum%\e[31m4\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Int]\
    \ - did you mean counts.updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = List.range(2,(n*2)/2).filter( n => n % 2 ==0)\n\
    \        nums.forall(n => n % 4 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa7ekt2q0.scala:13:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = List.range(\e\
    [31m2\e[0m,(n*\e[31m2\e[0m)/\e[31m2\e[0m).filter( \e[36mn\e[0m => n % \e[31m2\e\
    [0m ==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \     ^\e[0m\n\e[31m   |\e[0m                                No implicit Ordering\
    \ defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n.toInt == 0)\n            return false\n        else\
    \ {\n            // Get the sum of all even numbers smaller than n\n         \
    \   val sum = n.toInt\n            val evenSum = n.toInt\n            val evenSum2\
    \ = 0\n            // Check all even numbers up to n\n            val i = 2\n\
    \            while (i <= n) \n                if (evenSum2 != evenSum) {\n   \
    \                 evenSum2 += evenSum\n                    if (evenSum2 == sum)\n\
    \                        return true\n                }\n                i +=\
    \ 1\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1onouje.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    evenSum2 += evenSum\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ += is not a member of Int - did you mean evenSum2.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf1onouje.scala:28:18 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def sumEven(a : Long, b : Long) : Long = {\n          \
    \  if (a==b) a\n            else (a+b)\n        }\n        def isSumEven(a : Long,\
    \ b : Long) : Boolean = {\n            val c = sumEven(a,b)\n            if (c-a==b-b)\
    \ true\n            else false\n        }\n        def isSumEvenRecurse(a : Long,\
    \ b : Long) : Boolean = {\n            if (isSumEven(b,a)) true\n            else\
    \ isSumEvenRecurse(b,sumEven(a,b))\n        }\n        return isSumEvenRecurse(n,n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpga_79imu.scala:29)\n\tat Problem.main(tmpga_79imu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val fourEvens = (1l until n).toSet filter { _ %2 == 0 }.size\
    \ == 4\n        val twoEvens = n.toSet filter { _ %2 == 0 }.size == 2\n      \
    \  fourEvens && twoEvens\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfucmwajj.scala:13:52 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfourEvens\e[0m = (\e[31m1l\e\
    [0m until n).toSet filter { _ %\e[31m2\e[0m == \e[31m0\e[0m }.size == \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \ ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => _$1 % 2 == 0.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfucmwajj.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mtwoEvens\e[0m = n.toSet filter { _ %\e[31m2\e\
    [0m == \e[31m0\e[0m }.size == \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m             value toSet is not a member\
    \ of Long - did you mean n.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfucmwajj.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        fourEvens && twoEvens\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value &&\
    \ is not a member of Set[Long] - did you mean fourEvens.&~?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Base case\n        if (n == 0L) true\n        else if\
    \ ((n % 2L) == 0L) {\n            // If we know that the n is even, we know that\
    \ the sum of n positive even numbers is equal to the number\n            if (isSumEven(n\
    \ - 2L) == true) true\n            else false\n        } else {\n            //\
    \ If we know that the n is odd, we know that the sum of n positive even numbers\
    \ is equal to the number\n            if (isSumEven(n - 2L) == false) true\n \
    \           else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96y29a_w.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (isSumEven(n - \e[31m2L\e[0m)\
    \ == \e[31mtrue\e[0m) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: isSumEven\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp96y29a_w.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isSumEven(n - \e[31m2L\e[0m)\
    \ == \e[31mfalse\e[0m) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: isSumEven\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val n = n % 4\n        val sum = n % 4\n        n != sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg72k02jh.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n % \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val numSum = n.toString.toInt\n        var sum = 0l\n \
    \       // Start with the lowest even number, and add each odd number\n      \
    \  while (numSum.signum > 0) {\n            sum = sum + numSum.floor\n       \
    \     numSum = numSum.floor.toLong + 1\n        }\n        // If sum is even and\
    \ the next value is even, sum is even\n        if (sum.toString.toInt == n.toString.toInt)\
    \ {\n            return true\n        }\n        // If sum is even and the next\
    \ value is odd, sum is odd\n        if (sum.toString.toInt % 2 == n.toString.toInt.toInt\
    \ % 2) {\n            return true\n        }\n        // If sum is odd and next\
    \ value is even, sum is odd\n        if (sum.toString.toInt % 2 != n.toString.toInt.toInt\
    \ % 2) {\n            return false\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0bh2ebs_.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum = sum + numSum.floor\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ floor is not a member of Int.\n\e[31m   |\e[0m      An extension method was\
    \ tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \          floatWrapper(numSum)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0bh2ebs_.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            numSum = numSum.floor.toLong\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value floor is not a member of Int.\n\e[31m   |\e[0m    \
    \  An extension method was tried, but could not be fully constructed:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m          floatWrapper(numSum)\n2 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = new mutable.HashSet[Long]()\n        val set\
    \ = new mutable.HashSet[Long]()\n        var sum = 0\n        var j = 0\n    \
    \    for (x <- 0 to n) {\n            sum += x\n            if (set.contains(sum))\
    \ {\n                result.add(sum)\n                j -= 1\n            }\n\
    \            set.add(sum)\n        }\n        \n        if (result.size < 4)\n\
    \            return false\n        \n        val list = result.sort\n        for\
    \ (i<-0 to 4)\n            if (list(i) != 4)\n                return false\n \
    \       \n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwur38jc5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwur38jc5.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwur38jc5.scala:17:23 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val totalEven = for(i <- 2 to n) yield { if(n % i == 0)\
    \ i } else 0\n        totalEven.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf2d1gdgs.scala:13:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mtotalEven\e[0m = \e[33mfor\e\
    [0m(i <- \e[31m2\e[0m to n) \e[33myield\e[0m { \e[33mif\e[0m(n % i == \e[31m0\e\
    [0m) i } \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              end of statement expected but 'else' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2d1gdgs.scala:13:38 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mtotalEven\e[0m = \e[33mfor\e\
    [0m(i <- \e[31m2\e[0m to n) \e[33myield\e[0m { \e[33mif\e[0m(n % i == \e[31m0\e\
    [0m) i } \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpf2d1gdgs.scala:13:64 ----------------\e[0m\e[0m\n\e[33m13 |\e[0m   \
    \     \e[33mval\e[0m \e[36mtotalEven\e[0m = \e[33mfor\e[0m(i <- \e[31m2\e[0m to\
    \ n) \e[33myield\e[0m { \e[33mif\e[0m(n % i == \e[31m0\e[0m) i } \e[33melse\e\
    [0m \e[31m0\e[0m\n\e[33m\e[33m   |\e[0m                                      \
    \                          ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val set = mutable.Set[Int]()\n        var sum = 0\n\n \
    \       while (n > 0) {\n            set.add(n % 10)\n            n /= 10\n  \
    \      }\n\n        set.foreach { x =>\n            sum += x\n        }\n    \
    \    sum == ((sum * 4) / 2)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_fd3w0f.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4_fd3w0f.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        while (n > 1) {\n            sum +=\
    \ n\n            n /= 2\n        }\n        if (sum == 4) {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw8386_qs.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw8386_qs.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val arr = Array(0..(n/2).toInt).map(n => (n%2==0l)).filter(x\
    \ => x).toList\n        arr.size == (arr.sum + 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvmzvt52y.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = Array(\e[31m0\e\
    [0m..(n/\e[31m2\e[0m).toInt).map(\e[36mn\e[0m => (n%\e[31m2\e[0m==\e[31m0l\e[0m)).filter(\e\
    [36mx\e[0m => x).toList\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          an identifier expected, but '.' found\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSum = for {\n            i <- 2 until Math.sqrt(n)\n\
    \            sum += i * i\n        } yield {\n            (i == sum)\n       \
    \ }\n        evenSum.exists(_)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9yh6h4c.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        } \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m \
    \       ^\e[0m\n\e[31m   |\e[0m        '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj9yh6h4c.scala:14:34 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i <- \e[31m2\e[0m until Math.sqrt(n)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    Double\n\e[31m   |\e[0m                  \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9yh6h4c.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        evenSum.exists(_)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (Nothing => Boolean) => Boolean\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        for (i<-0\
    \ until n.toInt) {\n            if (n % i == 0)\n                evens += i\n\
    \        }\n        evens.size == 4 &&\n            evens.forall(x => n%x == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoyze4uo.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        for (i <- 1 to 4) {\n            if (isEqualToSum(n, n))\
    \ {\n                return true\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_i1oprg.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (isEqualToSum(n, n)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isEqualToSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = (0 until 4) exists (_ => n % 2 == 0)\n   \
    \     require(!result, s\"$n cannot be written as the sum of exactly 4 positive\
    \ even numbers.\")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed: 4 cannot be written\
    \ as the sum of exactly 4 positive even numbers.\n\tat scala.Predef$.require(Predef.scala:337)\n\
    \tat Problem$.isEqualToSumEven(tmpj_ktdc6v.scala:14)\n\tat Problem$.main(tmpj_ktdc6v.scala:18)\n\
    \tat Problem.main(tmpj_ktdc6v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var evenSum = 0l\n        var sum = 0l\n        for(i <-\
    \ 0 until n) {\n            if(n % 2 == 0){\n                sum += i\n      \
    \      }\n            if((i-1)%2 == 0) {\n                evenSum += i\n     \
    \       }\n        }\n        evenSum% == sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv6xwzr_g.scala:23:23 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        evenSum% == sum\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv6xwzr_g.scala:15:25 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpv6xwzr_g.scala:23:15 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        evenSum% == sum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0mmatch arguments (Any => Boolean)\n3 errors found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n < 0)\n            return false\n        if (n % 2\
    \ == 0)\n            return false\n        if (n < 4)\n            return true\n\
    \        val remainder = n % 4\n        var sum = 0\n        for {\n         \
    \   i <- (3l until 4l) reversed\n        } yield {\n            sum += i\n   \
    \         sum + (remainder * 2l) - i\n        }.toSet.size() == 4\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph75f0bge.scala:22:39 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            i <- (\e[31m3l\e[0m until \e[31m4l\e[0m)\
    \ reversed\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = \n            0 until n collect { n if n %\
    \ 2 == 0 }\n        return evens.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdcfhmxgq.scala:14:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[31m0\e[0m until n collect { n \e[33mif\e\
    [0m n % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                \
    \                  ^^\e[0m\n\e[31m   |\e[0m                                end\
    \ of statement expected but 'if' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdcfhmxgq.scala:14:20 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \            \e[31m0\e[0m until n collect { n \e[33mif\e[0m n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdcfhmxgq.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[31m0\e[0m until\
    \ n collect { n \e[33mif\e[0m n % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Found:    (n : Long)\n\e[31m   |\e[0m                   \
    \             Required: PartialFunction[Int, Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n%2 == 0, \"Number must be even\")\n        val\
    \ nC4 = n/4\n        val sumEven = collection.mutable.Map[Int, Int]()\n      \
    \  val factorization = factor(nC4)\n        factorization.foreach {\n        \
    \    factor =>\n            if (factor % 2 == 0) {\n                var sum =\
    \ 0\n                var k = 1\n                var i = 0\n                while\
    \ (i < factor) {\n                    sum += k\n                    k += 1\n \
    \                   i += 1\n                }\n                sumEven += (factor\
    \ -> sum)\n            }\n        }\n        sumEven.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsablv011.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factor(nC4)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: factor\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val x = n/4l\n        val z = n%4l\n        if(z == 0 ||\
    \ z == 2)\n            true\n        else\n            if(x+z == n) true\n   \
    \         else false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpifdmkg38.scala:22)\n\tat Problem.main(tmpifdmkg38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEvens = (0 until n).filter(_ % 2 == 0).sum\n   \
    \     sumEvens == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi_3o1i8.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e\
    [0m = (\e[31m0\e[0m until n).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e\
    [31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m   \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for(i <- 0 until n)\n            sum += i\n        for(i <-\
    \ 0 until n)\n            result += i\n        if (sum % 4 != 0) {\n         \
    \   false\n        } else {\n            result.toList.length == 4\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszrmovey.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszrmovey.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpszrmovey.scala:17:25 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val s = n.toInt\n        val result = mutable.Set[Int]()\n\
    \        for ( i <- 1 to s ) {\n            if ( i % 2 == 0 ) {\n            \
    \    result += i\n            }\n        }\n        if ( result.size == 4 ) {\n\
    \            return true\n        }\n        else {\n            return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2fbjmqq.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // TODO: Don't use recursion\n        var counter : Long\
    \ = 0\n        var sumEven = 0l\n        val n = n.toLong\n        val sum = sumEven\n\
    \        while(n>0) {\n            if (n%2 == 0) {\n                sumEven +=\
    \ n\n                counter += 2\n            }\n            n -= 1\n       \
    \ }\n        if (counter == sumEven) {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ebu81ek.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        var evenSum = 0\n        var evenSum2\
    \ = 0\n        var evenSum3 = 0\n        for(i <- 0 until n) {\n            sum\
    \ += i\n            if(i % 2 == 0) {\n                evenSum += i\n         \
    \       if(evenSum2 == 0) {\n                    evenSum2 = evenSum\n        \
    \        } else if (evenSum3 > 0) {\n                    return false\n      \
    \          }\n            } else if (i % 3 == 0) {\n                evenSum3 +=\
    \ i\n                if(evenSum3 == evenSum2) {\n                    evenSum3\
    \ = 0\n                }\n            }\n        }\n        return evenSum ==\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m80opkx.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (i % 2 == 0) {\n                evens += i\n            }\n\
    \        }\n\n        return evens.size == 4 && evens.forall(p => p % 2 == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pnvy9jk.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4pnvy9jk.scala:16:22 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                evens += i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member of List[Long]\
    \ - did you mean evens.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var lastEven = n.toDouble\n        var sum = 0\n      \
    \  while (n>0) {\n            sum += n.toDouble\n            n -= 1\n        \
    \    if (sum > lastEven) {\n                lastEven = sum\n                return\
    \ false\n            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqyc1o7z.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n.toDouble\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqyc1o7z.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSums = List.from(n - (n%4).toLong).takeWhile(_\
    \ < n)\n        val sumEven = evenSums.sum\n\n        if (sumEven == 4) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpakzozpr4.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e\
    [0m = List.from(n - (n%\e[31m4\e[0m).toLong).takeWhile(_ < n)\n\e[31m\e[31m  \
    \ |\e[0m                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    Long\n\e[31m   |\e[0m            \
    \                     Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpakzozpr4.scala:13:63 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = List.from(n\
    \ - (n%\e[31m4\e[0m).toLong).takeWhile(_ < n)\n\e[31m\e[31m   |\e[0m         \
    \                                                    ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpakzozpr4.scala:14:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = evenSums.sum\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in\
    \ \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val s = scala.math.BigInt(n).pow(2)\n        val sum =\
    \ scala.collection.mutable.Set.empty[Int]\n        sum.add(0)\n        for (i\
    \ = 1; i < s; i++) {\n            if (i % 2 == 0) {\n                if (sum.contains(i\
    \ - 2)) {\n                    return false\n                } else {\n      \
    \              sum.add(i - 2)\n                }\n            }\n        }\n \
    \       true\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqcg7c0bd.scala:16:15 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m; i < s; i++)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqcg7c0bd.scala:16:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m; i < s; i++) {\n\e[31m\e[31m   |\e[0m                    \
    \     ^\e[0m\n\e[31m   |\e[0m                         '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqcg7c0bd.scala:16:30 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m; i < s; i++)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqcg7c0bd.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m; i < s; i++)\
    \ {\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n4 errors "
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = n.toInt\n        var result = (nums rem 4) ==\
    \ 0 && nums % 2 == 0\n        if (result == false) result = isEqualToSumEven(nums\
    \ / 2l) && isEqualToSumEven(nums / 2l)\n        if (result == false) result =\
    \ isEqualToSumEven(nums / 2l) && isEqualToSumEven(nums / 2l)\n        if (result\
    \ == false) result = isEqualToSumEven(nums / 2l) && isEqualToSumEven(nums / 2l)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3p4ziw9h.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = (nums rem\
    \ \e[31m4\e[0m) == \e[31m0\e[0m && nums % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          value rem is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEvenNumbers = n.toSet.filter { _ % 2 == 0 }.size\n\
    \        sumEvenNumbers == 4 || sumEvenNumbers == 6\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprxedz8rw.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEvenNumbers\e[0m = n.toSet.filter\
    \ { _ % \e[31m2\e[0m == \e[31m0\e[0m }.size\n\e[31m\e[31m   |\e[0m           \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             value toSet is not\
    \ a member of Long - did you mean n.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n      n match {\n        case 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\
    \ => true\n        case _ => false\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjutuvav6.scala:19)\n\tat Problem.main(tmpjutuvav6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n.toString.toInt==n) return true\n        if (n.toString.toInt==n+1)\
    \ return true\n        if (n.toString.toInt==n+2) return true\n        if (n.toString.toInt==n+3)\
    \ return true\n        if (n.toString.toInt==n+4) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpexaopgbd.scala:21)\n\tat Problem.main(tmpexaopgbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = List(n%2l).sum\n        n <- (sum + 4) % 4l ==\
    \ 0l\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcu82382x.scala:14:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        n <- (sum + \e[31m4\e[0m) % \e[31m4l\e[0m ==\
    \ \e[31m0l\e[0m\n\e[31m\e[31m   |\e[0m          ^^\e[0m\n\e[31m   |\e[0m     \
    \     end of statement expected but '<-' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcu82382x.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        n <- (sum + \e[31m4\e[0m) % \e[31m4l\e[0m == \e[31m0l\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (n : Long)\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0L\n        var num = 2L\n        while(num <\
    \ n) {\n            sum += num\n            num += 1\n        }\n        sum %\
    \ 4 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgq68c_7y.scala:24)\n\tat Problem.main(tmpgq68c_7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens : Array[Long] = Array()\n        for (i<- 0 to\
    \ 3) {\n            if (i % 2 == 0) {\n                evens += n\n          \
    \  }\n            n -= 1\n        }\n        if (evens.toSet.size == 4) {\n  \
    \          return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuouliyz0.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                evens += n\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of\
    \ Array[Long] - did you mean evens.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpuouliyz0.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Step 1: Find out how many zero's are there in the number\n\
    \        var zeroCount : Int = 0\n        while (n % 2 == 0) {\n            zeroCount\
    \ += 1\n            n /= 2\n        }\n        val totalEvenNumbers = 0 until\
    \ n\n        // Step 2: Count the number of all even numbers in the given number\n\
    \        var evenCount : Int = 0\n        totalEvenNumbers.foreach{ n =>\n   \
    \         if (n % 2 == 0) {\n                evenCount += 1\n            }\n \
    \       }\n        // Step 3: Compare both count and n\n        return evenCount\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd4dm5l1y.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd4dm5l1y.scala:19:39\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtotalEvenNumbers\e\
    [0m = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                            \
    \           ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val fourSum = n.toSet.filter(_ % 2 == 0).foldLeft(0)(_\
    \ + _)\n        fourSum == n.toSet.filter(_ % 2 == 0).foldLeft(0)(_ + _)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5_91royp.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfourSum\e[0m = n.toSet.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ toSet is not a member of Long - did you mean n.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        while (n > 4) {\n            sum +=\
    \ n\n            n -= 4\n        }\n        return sum % 4 == 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzigjs8q.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzigjs8q.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val isEven = n % 2 == 0\n        if(isEven) {\n       \
    \     for {\n                i <- 0 until 4\n                e <- 0 until i\n\
    \                isOdd <- 0 until i\n                x <- 0 until i\n        \
    \    } yield {\n                val isPosEven = (e + x) % 2 == 0\n           \
    \     val isPosOdd  = ((e + x) + i) % 2 == 0\n                if(isPosEven &&\
    \ isPosOdd)\n                    false\n                else if(isPosEven && !isPosOdd)\n\
    \                    true\n                else\n                    false\n \
    \           }\n        }\n        else {\n            for {\n                i\
    \ <- 0 until 4\n                e <- 0 until i\n                x <- 0 until i\n\
    \            } yield {\n                val isPosEven = (e + x) % 2 == 0\n   \
    \             val isPosOdd  = ((e + x) - i) % 2 == 0\n                if(isPosEven\
    \ && isPosOdd)\n                    false\n                else if(isPosEven &&\
    \ !isPosOdd)\n                    true\n                else\n               \
    \     false\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg8ain32.scala:15:12\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m {\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ \e[1m\e[31mIndexedSeq\e[0m\e[1m\e[31m[\e[0mBoolean\e[1m\e[31m]\e[0m\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m16 |\e[0m                i <- \e\
    [31m0\e[0m until \e[31m4\e[0m\n\e[31m17 |\e[0m                e <- \e[31m0\e[0m\
    \ until i\n\e[31m18 |\e[0m                isOdd <- \e[31m0\e[0m until i\n\e[31m19\
    \ |\e[0m                x <- \e[31m0\e[0m until i\n\e[31m20 |\e[0m           \
    \ } \e[33myield\e[0m {\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36misPosEven\e\
    [0m = (e + x) % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m22 |\e[0m                \e\
    [33mval\e[0m \e[36misPosOdd\e[0m  = ((e + x) + i) % \e[31m2\e[0m == \e[31m0\e\
    [0m\n\e[31m23 |\e[0m                \e[33mif\e[0m(isPosEven && isPosOdd)\n\e[31m24\
    \ |\e[0m                    \e[31mfalse\e[0m\n\e[31m25 |\e[0m                \e\
    [33melse\e[0m \e[33mif\e[0m(isPosEven && !isPosOdd)\n\e[31m26 |\e[0m         \
    \           \e[31mtrue\e[0m\n\e[31m27 |\e[0m                \e[33melse\e[0m\n\e\
    [31m28 |\e[0m                    \e[31mfalse\e[0m\n\e[31m29 |\e[0m           \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg8ain32.scala:32:12\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mfor\e[0m {\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ \e[1m\e[31mIndexedSeq\e[0m\e[1m\e[31m[\e[0mBoolean\e[1m\e[31m]\e[0m\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m33 |\e[0m                i <- \e\
    [31m0\e[0m until \e[31m4\e[0m\n\e[31m34 |\e[0m                e <- \e[31m0\e[0m\
    \ until i\n\e[31m35 |\e[0m                x <- \e[31m0\e[0m until i\n\e[31m36\
    \ |\e[0m            } \e[33myield\e[0m {\n\e[31m37 |\e[0m                \e[33mval\e\
    [0m \e[36misPosEven\e[0m = (e + x) % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m38 |\e\
    [0m                \e[33mval\e[0m \e[36misPosOdd\e[0m  = ((e + x) - i) % \e[31m2\e\
    [0m == \e[31m0\e[0m\n\e[31m39 |\e[0m                \e[33mif\e[0m(isPosEven &&\
    \ isPosOdd)\n\e[31m40 |\e[0m                  "
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val s = ArrayBuffer(1, 2, 4, 3)\n        val r = new scala.collection.mutable.ListBuffer[Int]()\n\
    \        for (i <- 1 to n) {\n            val f = n % s(i)\n            r += f\n\
    \            val j = r.last\n            if ((j % 2) == 0) false else true\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kbnemau.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0kbnemau.scala:17:17 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            r += f\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Found:    (f : Long)\n\e[31m   |\e[0m             \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val count = new mutable.ListBuffer[Long]()\n        var\
    \ counts = 0\n        val a = n - 2\n        while (a > 0) {\n            val\
    \ m = math.max(a/2, 0)\n            a -= m\n            count.append(m)\n    \
    \        counts += m\n        }\n        val b = n - 1\n        while (a != 0)\
    \ {\n            val m = math.min(a/2, 0)\n            a -= m\n            count.append(m)\n\
    \            counts += m\n        }\n        val c = 2\n        while (a < c)\
    \ {\n            val m = math.max(a*2, 0)\n            a += m\n            count.append(m)\n\
    \            counts += m\n        }\n        val d = 2\n        while (a > d)\
    \ {\n            val m = math.min(a*2, 0)\n            a += m\n            count.append(m)\n\
    \            counts += m\n        }\n        count.toSeq.size == counts\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0df8hfgh.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0df8hfgh.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            a -= m\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0df8hfgh.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            counts += m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0df8hfgh.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            a -= m\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long - did\
    \ you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0df8hfgh.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            counts += m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0df8hfgh.scala:32:14 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m            a += m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Long - did you mean a.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0df8hfgh.scala:34:19 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            counts += m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0df8hfgh.scala:39:14\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            "
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Set up variables\n        var sumEven = 0\n        var\
    \ evens = 1\n\n        // Loop through n and accumulate the sum\n        for (i\
    \ <- 0 to n) {\n            if (i.toString.length == 1)\n                sumEven\
    \ = sumEven + i.toChar\n            else\n                sumEven = sumEven +\
    \ i.toString.charAt(0).toLong + i.toString.charAt(1).toLong\n\n            if\
    \ (sumEven > 4)\n                return false\n            evens = evens + 1\n\
    \        }\n\n        return evens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_ijjlhk.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3_ijjlhk.scala:22:26 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                sumEven = sumEven + i.toString.charAt(\e[31m0\e[0m).toLong\
    \ + i.toString.charAt(\e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n >= 0, \"number must be positive\")\n        val\
    \ sumEven = n.toDouble.divide(2l).floor.toLong\n        val four = sumEven.toDouble.floor.toInt\n\
    \        val totalEvens = 4l\n        val result = (four + 4 == four) && (four\
    \ + totalEvens == sumEven)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6p_7__4.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = n.toDouble.divide(\e\
    [31m2l\e[0m).floor.toLong\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value divide is not a member of Double\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if(n == 0) true\n        else isEqualToSumEven(n - 1) &&\
    \ ((n % 2) == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44_dldlj.scala:19)\n\tat Problem.main(tmp44_dldlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case 0 => true\n            case\
    \ _ if (n % 2 == 0) => false\n            case _ if (n % 2 == 0) => true\n   \
    \         case _ if (n % 2 == 1) => isEqualToSumEven(n / 2)\n            case\
    \ _ => isEqualToSumEven(n + 1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwv9l53sz.scala:24)\n\tat Problem.main(tmpwv9l53sz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt/2 + n.toInt/4\n        // Check whether\
    \ the sum is even\n        if ((sumEven * 2) % 2) == 0 {\n            // Sum is\
    \ even\n            return true\n        } else {\n            // Sum is odd\n\
    \            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1nurnae7.scala:15:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m ((sumEven * \e[31m2\e[0m) % \e\
    [31m2\e[0m) == \e[31m0\e[0m {\n\e[31m\e[31m   |\e[0m                         \
    \         ^\e[0m\n\e[31m   |\e[0m                     end of statement expected\
    \ but integer literal found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nurnae7.scala:15:12\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m ((sumEven\
    \ * \e[31m2\e[0m) % \e[31m2\e[0m) == \e[31m0\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Int\n\e\
    [31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp1nurnae7.scala:15:31 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mif\e[0m ((sumEven * \e[31m2\e[0m) % \e[31m2\e\
    [0m) == \e[31m0\e[0m {\n\e[31m\e[31m   |\e[0m                               ^^\e\
    [0m\n\e[31m   |\e[0m                      missing arguments for value of type\
    \ Any => Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sumEven = 0\n        for(i <- 0 until n){\n       \
    \     if((i & 1) == 0)\n                sumEven += i\n        }\n        if(sumEven\
    \ == n)\n            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ya6r1w7.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val count = new mutable.HashMap[Long, Int]()\n        count.put(n,\
    \ 0) // Count how many times we've seen this number\n        while (count.size()\
    \ < 4) { // If we've seen this number less than 4 times\n            val current\
    \ = count.getOrElse(n, 0l) // If we've never seen this number before, start counting\
    \ at 0\n            val result = current.toLong * 2 + 1 // If we've seen this\
    \ number before, multiply it by 2 and add 1\n            if (result < current)\
    \ count.put(result, 1) // If the number has previously been seen more than once,\
    \ increment the count\n            else false // Otherwise, we know that the number\
    \ cannot be written as the sum of 4 positive even numbers\n        }\n       \
    \ // If we've seen the 4 numbers and they're all equal, then the number is equal\
    \ to sum of 4 even numbers\n        count.getOrElse(n, 0) == 4\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpik44myzi.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpik44myzi.scala:19:17 ----------------\e[0m\e[0m\n\e[33m19 |\e[0m   \
    \         \e[33melse\e[0m \e[31mfalse\e[0m \e[34m// Otherwise, we know that the\
    \ number cannot be written as the sum of 4 positive even numbers\e[0m\n\e[33m\e\
    [33m   |\e[0m                 ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val x = Array[Long]()\n        x ++= 0 until n\n      \
    \  val z = x - x.filter(_ % 2 == 0)\n        z.size == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53ya4d5r.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x ++= \e[31m0\e[0m until n\n\e[31m\e[31m   |\e\
    [0m        ^^^^^\e[0m\n\e[31m   |\e[0m        value ++= is not a member of Array[Long]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53ya4d5r.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x ++= \e[31m0\e[0m until n\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53ya4d5r.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = x - x.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Array[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEvensLessThan4 = ((4l).toDouble * (n + 1) - (4l)).abs\
    \ < 1.0e-14\n        val sumEvensGreaterThan4 = (4l - (4l).toDouble * (n + 1)).abs\
    \ < 1.0e-14\n        val sum = n.toDouble\n        val evens = sum until sum +\
    \ 4\n        evens.toSet.size == 4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp9q42qs.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = sum until sum\
    \ + \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue until is not a member of Double, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = 0\n        for (i <- 0 until n)\n           \
    \ if ((i.toLong % 2) == 0) sum += i\n        return sum == (n * 4).toInt\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1tclfjpn.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1tclfjpn.scala:15:41 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mif\e[0m ((i.toLong % \e[31m2\e[0m) == \e\
    [31m0\e[0m) sum += i\n\e[31m\e[31m   |\e[0m                                  \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case 0 => true\n            case\
    \ _ => (n % 2 == 0 && isEqualToSumEven(n / 2)) && (n % 4 == 0)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcsi9_xo.scala:21)\n\tat Problem.main(tmpbcsi9_xo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        (0 until (Math.ceil(n/2).toInt) filter (x => n % x==0)\
    \ forall (x => x==0))\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.isEqualToSumEven$$anonfun$1(tmp_jygb39e.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\
    \tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\
    \tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\
    \tat scala.collection.immutable.Range.filterImpl(Range.scala:59)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\
    \tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\
    \tat scala.collection.immutable.Range.filter(Range.scala:59)\n\tat Problem$.isEqualToSumEven(tmp_jygb39e.scala:13)\n\
    \tat Problem$.main(tmp_jygb39e.scala:16)\n\tat Problem.main(tmp_jygb39e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGener"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isEven(x: Long) : Boolean = (x % 2) == 0\n        def\
    \ isPositive(x: Long) : Boolean = (x > 0) && (x % 2 == 0)\n        def sumEven(x:\
    \ Long, y: Long) : Long = x + y\n        def isSumEven(n: Long) : Boolean = {\n\
    \            def helper(n: Long, evens: mutable.Buffer[Long], sum: Long) : Boolean\
    \ = {\n                val x = n % sum\n                val isEvens = evens.contains(x)\n\
    \                if (x == sum || x == sum - 1 || evens.contains(x - 1))\n    \
    \                isEvens || (n != sum) && (evens += x)\n                else\n\
    \                    isEvens\n            }\n            var evens = mutable.Buffer(n)\n\
    \            var sum = n\n            while (sumEven(sum, sum) == sum)\n     \
    \           sum += sum\n            if (sum == 1)\n                sumEven(n,\
    \ evens)\n            else {\n                val lower = sum + 2\n          \
    \      var upper = lower\n                while (!helper(lower, evens, upper))\
    \ {\n                    if (lower >= upper)\n                        return true\n\
    \                    lower++\n                    upper = lower + 1\n        \
    \        }\n                return false\n            }\n        }\n        isSumEven(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp501m86qg.scala:38:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    upper = lower + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 end of statement expected but '=' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp501m86qg.scala:17:39 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mdef\e[0m \e[36mhelper\e[0m(\e[36mn\e[0m:\
    \ \e[35mLong\e[0m, \e[36mevens\e[0m: mutable.Buffer[\e[35mLong\e[0m], \e[36msum\e\
    [0m: \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m        \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp501m86qg.scala:25:24 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mvar\e[0m \e[36mevens\e[0m = mutable.Buffer(n)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp501m86qg.scala:30:23 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                sumEven(n, evens)\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Long\n\e[31m   |\e[0m                Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp501m86qg.scala:37:25 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    lower++\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    value ++ is\
    \ not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var res = true\n        var i = 0\n        while (i <=\
    \ 4 && res == true) {\n            res = (n + 4l).isPositiveEven && (n + 4l).isPositive\n\
    \            i += 1\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpal9z4mps.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            res = (n + \e[31m4l\e[0m).isPositiveEven\
    \ && (n + \e[31m4l\e[0m).isPositive\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value isPositiveEven is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        val isEven = (n \\% 2) == 0\n    \
    \    var i = 0\n        while (i < n) {\n            if (isEven) {\n         \
    \       sum = sum + i\n                isEven = (i \\% 2) == 0\n            }\n\
    \            i = i + 1\n        }\n        sum == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt976bl8k.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misEven\e[0m = (n \\% \e\
    [31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      value \\% is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpt976bl8k.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                isEven = (i \\% \e[31m2\e[0m) == \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value \\% is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        require(n>=0, \"n must be non-negative\")\n        val\
    \ counts = mutable.HashMap[Long, Int]()\n        for {\n            i <- 1L to\
    \ (n/2) - 1\n            k = i*i to (n/2) - (i-1) * i\n            sum <- 0 until\
    \ k\n        } counts(sum) += 1\n        counts.forall{\n            case (sum,\
    \ count) if (count < 4) => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgz8z12jh.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgz8z12jh.scala:18:27 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum <- \e[31m0\e[0m until k\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m Found:    (k : scala.collection.immutable.NumericRange.Inclusive[Long])\n\
    \e[31m   |\e[0m Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Check if n is a power of 4\n        if (n.toLong & (n.toLong\
    \ - 1l) == 0l) \n            return true\n        else \n            false //\
    \ n can't be written as a sum of 4 positive even numbers\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_igxigzl.scala:14:21 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n.toLong & (n.toLong - \e[31m1l\e\
    [0m) == \e[31m0l\e[0m) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val ns = Seq.fill(4)(n.toInt)\n        val result = ns.tail.foldLeft(true)(_\
    \ + _.isEven && isEqualToSumEven(_))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpujwt5e4m.scala:14:44 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = ns.tail.foldLeft(\e\
    [31mtrue\e[0m)(_ + _.isEven && isEqualToSumEven(_))\n\e[31m\e[31m   |\e[0m   \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // The sum of an even number of odd numbers is given by\n\
    \        // n + n + n + n + n\n        // We only need to consider positive even\
    \ numbers\n        n match {\n            case _ if n >= 0 => true\n         \
    \   case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzecz85s.scala:22)\n\tat Problem.main(tmpuzecz85s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = (1 to n).toList\n        if (list.size != 4)\
    \ return false;\n        if (list.exists (x => x % 2 == 0)) {\n            val\
    \ evens = list.filter (x => x % 2 == 0)\n            if (evens.sum == evens.filter\
    \ (x => x % 2 == 0).sum) {\n                return true\n            }\n     \
    \   }\n        return false\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcpx7pjw.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m = (\e[31m1\e[0m to n).toList\n\e[31m\e[31m   |\e[0m                      \
    \   ^\e[0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = List((0l, 1l), (2l, 3l), (4l, 5l), (6l, 7l),\
    \ (8l, 9l))\n        return list.forall(l => if(n == (l._1 + l._2)) true else\
    \ false)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34ubgrct.scala:19)\n\tat Problem.main(tmp34ubgrct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // write your logic here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyy7005ai.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36misEqualToSumEven\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                               ^\e[0m\n\e[31m   |\e[0m    \
    \                                           Found:    Unit\n\e[31m   |\e[0m  \
    \                                             Required: Boolean\n\e[31m13 |\e\
    [0m        \e[34m// write your logic here\e[0m\n\e[31m14 |\e[0m    }\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var evenNumbersSum = 0\n        val array = List(n).permutations.toList\n\
    \        for (i <- 0 to (array.length - 1)) {\n            if (array(i) % 2 !=\
    \ 0) continue\n            evenNumbersSum += array(i)\n            if (evenNumbersSum\
    \ > 8) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdi2sn2oy.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (array(i) % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m) continue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue % is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdi2sn2oy.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (array(i) % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m) continue\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdi2sn2oy.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            evenNumbersSum\
    \ += array(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case 0     => true\n           \
    \ case 4     => true\n            case _ if n%2 == 0 => false\n            case\
    \ _    => isEqualToSumEven(n - 2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkuf0a_5m.scala:21)\n\tat Problem.main(tmpkuf0a_5m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val s = mutable.ArrayBuffer.empty[Long]\n        while(n\
    \ > 0){\n            n -= 2\n            s += n\n        }\n        for( x <-\
    \ s ) if( x < 0 )\n            return false\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5th2qjaz.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5th2qjaz.scala:15:14 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            n -= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long\
    \ - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val totalEven = n filter (x => x % 2 == 0) size\n     \
    \   total match {\n            case 0 | 1 | 2 | 3 | 4 => true\n            case\
    \ _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgg1_u63t.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mtotalEven\e[0m = n filter\
    \ (\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m) size\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    value filter is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgg1_u63t.scala:18:5 ---------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = n.toLong.par.filter(_%2 == 0 && !(_%2==0 &&\
    \ _%4==0))\n        result.toSet.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsp3xj551.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = n.toLong.par.filter(_%\e\
    [31m2\e[0m == \e[31m0\e[0m && !(_%\e[31m2\e[0m==\e[31m0\e[0m && _%\e[31m4\e[0m==\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     value par is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sumEven = 0\n        for(i <- 0 until n) sumEven +=\
    \ i match {\n            case 0 | 1 | 2 | 3 => true\n            case 4 => false\n\
    \            case _  => false\n        }\n        return sumEven == 4\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35sa4vhf.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) sumEven += i \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \                      ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp35sa4vhf.scala:15:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m | \e[31m1\e\
    [0m | \e[31m2\e[0m | \e[31m3\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m  \
    \               ^\e[0m\n\e[31m   |\e[0m           Values of types Int and Unit\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp35sa4vhf.scala:15:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m0\e[0m | \e[31m1\e[0m | \e[31m2\e[0m | \e[31m3\e[0m\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m\
    \   |\e[0m           Values of types Int and Unit cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp35sa4vhf.scala:15:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m | \e[31m1\e\
    [0m | \e[31m2\e[0m | \e[31m3\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                       ^\e[0m\n\e[31m   |\e[0m           Values of types Int\
    \ and Unit cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp35sa4vhf.scala:15:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m0\e[0m | \e[31m1\e[0m | \e[31m2\e[0m | \e[31m3\e[0m\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m           Values of types Int and Unit cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp35sa4vhf.scala:16:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e[31m4\e[0m => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m           Values\
    \ of types Int and Unit"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def sumEven(i: Long, total: Long) = {\n            if (i\
    \ <= 0) 0\n            else if (i % 2 == 0) total + 1\n            else sumEven(i\
    \ - 1, total + i)\n        }\n\n        sumEven(n, 0) == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpdgvxumt7.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m sumEven(i - \e[31m1\e[0m,\
    \ total + i)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m  \
    \              Overloaded or recursive \e[33mmethod\e[0m \e[35msumEven\e[0m needs\
    \ return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = new collection.mutable.HashSet[Long]()\n \
    \       var sum = 0\n        val evenSum = scala.collection.mutable.Set[Long]()\n\
    \        while (n > 0) {\n            sum += n\n            if (sum > 4) { result\
    \ += sum; sum += n; evenSum += n }\n            n -= 1\n        }\n        val\
    \ evenSums = evenSum.toList\n        result.size == evenSums.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivqykxoi.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivqykxoi.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m\
    \ (sum > \e[31m4\e[0m) { result += sum; sum += n; evenSum += n }\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpivqykxoi.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val ev = mutable.Set[Long](2l,3l,5l,7l,9l,11l,13l,15l,17l,19l,23l,27l,29l,31l,35l,37l,39l,41l,43l,47l,53l,59l,61l,67l,71l,73l,79l,83l,89l,97l,101l,103l,107l,109l,113l,117l,121l,123l,127l,129l,133l,139l,141l,143l,147l,149l,153l,157l,159l,161l,163l,167l,171l,173l,179l,181l,193l,197l,199l,211l,223l,227l,229l,233l,239l,241l,251l,257l,259,263,269l,271l,277l,281l,283l,293l,297l,301l,307l,311l,313l,317l,321l,327l,331l,337l,341l,347l,351l,359l,363l,367l,373l,379l,383l,389l,393l,397l,401l,407l,411l,413l,419l,421l,423l,427l,429l,431l,437l,439l,443l,449l,451l,457l,461l,463l,467l,479l,487l,493l,499l,501l,507l,511l,513l,517l,521l,523l,529l,531l,537l,539l,543l,549l,551l,557l,561l,563l,567l,573l,579l,583l,589l,593l,599l,601l,607l,611l,613l,617l,619l,623l,627l,629l,631l,637l,639l,643l,649l,651l,657l,661l,663l,667l,673l,679l,683l,687l,693l,699l,701l,707l,711l,713l,719l,723l,727l,729l,731l,737l,739l,743l,749l,751l,757l,761l,763l,767l,773l,787l,793l,799l,801l,807l,813l,817l,819l,823l,827l,829l,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpomrkb3m4.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpomrkb3m4.scala:13:17\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mev\e[0m = mutable.Set[\e[35mLong\e[0m](\e[31m2l\e[0m,\e[31m3l\e[0m,\e[31m5l\e\
    [0m,\e[31m7l\e[0m,\e[31m9l\e[0m,\e[31m11l\e[0m,\e[31m13l\e[0m,\e[31m15l\e[0m,\e\
    [31m17l\e[0m,\e[31m19l\e[0m,\e[31m23l\e[0m,\e[31m27l\e[0m,\e[31m29l\e[0m,\e[31m31l\e\
    [0m,\e[31m35l\e[0m,\e[31m37l\e[0m,\e[31m39l\e[0m,\e[31m41l\e[0m,\e[31m43l\e[0m,\e\
    [31m47l\e[0m,\e[31m53l\e[0m,\e[31m59l\e[0m,\e[31m61l\e[0m,\e[31m67l\e[0m,\e[31m71l\e\
    [0m,\e[31m73l\e[0m,\e[31m79l\e[0m,\e[31m83l\e[0m,\e[31m89l\e[0m,\e[31m97l\e[0m,\e\
    [31m101l\e[0m,\e[31m103l\e[0m,\e[31m107l\e[0m,\e[31m109l\e[0m,\e[31m113l\e[0m,\e\
    [31m117l\e[0m,\e[31m121l\e[0m,\e[31m123l\e[0m,\e[31m127l\e[0m,\e[31m129l\e[0m,\e\
    [31m133l\e[0m,\e[31m139l\e[0m,\e[31m141l\e[0m,\e[31m143l\e[0m,\e[31m147l\e[0m,\e\
    [31m149l\e[0m,\e[31m153l\e[0m,\e[31m157l\e[0m,\e[31m159l\e[0m,\e[31m161l\e[0m,\e\
    [31m163l\e[0m,\e[31m167l\e[0m,\e[31m171l\e[0m,\e[31m173l\e[0m,\e[31m179l\e[0m,\e\
    [31m181l\e[0m,\e[31m193l\e[0m,\e[31m197l\e[0m,\e[31m199l\e[0m,\e[31m211l\e[0m,\e\
    [31m223l\e[0m,\e[31m227l\e[0m,\e[31m229l\e[0m,\e[31m233l\e[0m,\e[31m239l\e[0m,\e\
    [31m241l\e[0m,\e[31m251l\e[0m,\e[31m257l\e[0m,\e[31m259\e[0m,\e[31m263\e[0m,\e\
    [31m269l\e[0m,\e[31m271l\e[0m,\e[31m277l\e[0m,\e[31m281l\e[0m,\e[31m283l\e[0m,\e\
    [31m293l\e[0m,\e[31m297l\e[0m,\e[31m301l\e[0m,\e[31m307l\e[0m,\e[31m311l\e[0m,\e\
    [31m313l\e[0m,\e[31m317l\e[0m,\e[31m321l\e[0m,\e[31m327l\e[0m,\e[31m331l\e[0m,\e\
    [31m337l\e[0m,\e[31m341l\e[0m,\e[31m347l\e[0m,\e[31m351l\e[0m,\e[31m359l\e[0m,\e\
    [31m363l\e[0m,\e[31m367l\e[0m,\e[31m373l\e[0m,\e[31m379l\e[0m,\e[31m383l\e[0m,\e\
    [31m389l\e[0m,\e[31m393l\e[0m,\e[31m397l\e[0m,\e[31m401l\e[0m,\e[31m407l\e[0m,\e\
    [31m411l\e[0m,\e[31m413l\e[0m,\e[31m419l\e[0m,\e[31m421l\e[0m,\e[31m423l\e[0m,\e\
    [31m427l\e[0m,\e[31m429l\e[0m,\e[31m431l\e[0m,\e[31m437l\e[0m,\e[31m439l\e[0m,\e\
    [31m443l\e[0m,\e[31m449l\e[0m,\e[31m451l\e[0m,\e[31m457l\e[0m,\e[31m461l\e[0m,\e\
    [31m463l\e[0m,\e[31m467l\e[0m,\e[31m479l\e[0m,\e[31m487l\e[0m,\e[31m493l\e[0m,\e\
    [31m499l\e[0m,\e[31m501l\e[0m,\e[31m507l\e[0"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = SumEven.new(n)\n        val sumEvenList =\
    \ List((1l,2l,3l,4l,5l,6l,7l,8l))\n        val sumEvenValue = sumEven.sumValue\n\
    \        sumEvenList.foreach(element => {\n            if (sumEvenValue - element\
    \ == 0)\n                return true\n        })\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppvus_uod.scala:13:30 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = SumEven.\e\
    [33mnew\e[0m(n)\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\
    \e[31m   |\e[0m                              an identifier expected, but 'new'\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvus_uod.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36msumEven\e[0m = SumEven.\e[33mnew\e[0m(n)\n\e[31m\e[31m   |\e[0m          \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: SumEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0l\n        var isEven = false\n        while(n\
    \ > 1l) {\n            sum += n\n            n -= 1\n            isEven = isEven\
    \ && (sum % 2) == 0l\n        }\n        isEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkno5h6h.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        while (n > 0)\n        {\n            val remainder = n % 10\n\
    \            sum += remainder // Add the digit to sum\n            n /= 10 //\
    \ Remove the digit\n            list += remainder // Add the digit to list\n \
    \       }\n        if (sum % 4 == 0) return true // If sum is equal to 4\n   \
    \     else return false // If sum is greater than 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6vjlz0r.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpg6vjlz0r.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += remainder \e[34m// Add the digit to\
    \ sum\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpg6vjlz0r.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m10\e[0m \e[34m// Remove the digit\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val p = scala.math.BigInt(n).remainder(4l)\n        (p\
    \ != 0) && (p < 4l) // Test if n is in fact divisible by 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9nev8nn_.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = scala.math.BigInt(n).remainder(\e\
    [31m4l\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value remainder is not a member of BigInt\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val l = new mutable.HashSet[Long](4l to 8l)\n        while(n\
    \ > 0){\n            if(l contains n) \n                return true\n        \
    \    if(n % 2 == 0) n = n / 2\n            else \n                l.remove(n %\
    \ 2)\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxdl1pjy.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m](\e[31m4l\e[0m to \e[31m8l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphxdl1pjy.scala:17:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e\
    [0m(n % \e[31m2\e[0m == \e[31m0\e[0m) n = n / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \           Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = Seq.tabulate(n)(i => (i + 2) % 4 == 0)\n  \
    \      evens.sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wiqs33l.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m = Seq.tabulate(n)(\e[36mi\e[0m => (i + \e[31m2\e[0m) % \e[31m4\e[0m == \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e\
    [0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp3wiqs33l.scala:14:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evens.sum == n\n\e[31m\e[31m   |\e[0m       \
    \          ^\e[0m\n\e[31m   |\e[0m               No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m               where:    B is a type\
    \ variable with constraint >: Boolean\n\e[31m   |\e[0m               .\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val counter = new mutable.HashMap[Long, Int]()\n      \
    \  val counter2 = new mutable.HashMap[Long, Int]()\n        val counter3 = new\
    \ mutable.HashMap[Long, Int]()\n        val counter4 = new mutable.HashMap[Long,\
    \ Int]()\n\n        if (n == 4l){\n            counter.put(n,1)\n            counter2.put(n,1)\n\
    \            counter3.put(n,1)\n            counter4.put(n,1)\n        } else\
    \ if (n == 6l){\n            counter.put(n,1)\n            counter2.put(n,2)\n\
    \            counter3.put(n,1)\n            counter4.put(n,1)\n        } else\
    \ if (n == 8l){\n            counter.put(n,1)\n            counter2.put(n,2)\n\
    \            counter3.put(n,3)\n            counter4.put(n,1)\n        } else\
    \ {\n            if (counter.contains(n)){\n                if (counter.get(n)\
    \ == 4){\n                    if (counter2.contains(n)){\n                   \
    \     if (counter2.get(n) == 4){\n                            if (counter3.contains(n)){\n\
    \                                if (counter3.get(n) == 4){\n                \
    \                    if (counter4.contains(n)){\n                            \
    \            if (counter4.get(n) == 4)\n                                     \
    \       return true\n                                    }\n                 \
    \               }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgpnybwdr.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgpnybwdr.scala:14:27 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcounter2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgpnybwdr.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcounter3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgpnybwdr.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounter4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var evenSum = 0\n        var evenSumCount = 0\n       \
    \ for (i <- 0 to n)\n        {\n            if ((n % 2) == 0)\n              \
    \  evenSum += i\n            else\n            {\n                if (evenSumCount\
    \ >= 4)\n                    return (evenSum == 4l) //true if sum 4 even numbers,\
    \ false if not\n                evenSumCount += 1\n            }\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ntu2_g4.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isEven(n: Long): Boolean = {\n            val x = n\
    \ % 2\n            if (x == 0) true\n            else false\n        }\n     \
    \   // Base case\n        if (n == 4n) true\n        else if (n == 0n) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5dz90pg_.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (n == \e[31m4\e[0mn) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmp5dz90pg_.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m0\e\
    [0mn) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0L\n        for(i <- 0 until n) {\n         \
    \   if(i % 2 == 0) {\n                sum += i\n            }\n        }\n   \
    \     return sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4a5aw0u.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val odds = 0 until 10 filter (x => n % x == 0)\n      \
    \  val sum = (1l) :: 0 until (n / 2l)\n        val evens = (1l) :: 0 until (n\
    \ / 2l)\n\n        odds.forall(sum contains _) && evens.forall(sum contains _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv1hmcy35.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = (\e[31m1l\e[0m)\
    \ :: \e[31m0\e[0m until (n / \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                       value :: is not\
    \ a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv1hmcy35.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = (\e[31m1l\e[0m) :: \e[31m0\e[0m until (n / \e[31m2l\e[0m)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value :: is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        import scala.math._\n        val a = n\n        val b =\
    \ a\n        val c = b\n        val d = c\n        val e = d\n        val f =\
    \ e\n        val g = f\n        val h = g\n        (a + b + c + d + e + f + g\
    \ + h) == (n + 2 * n + 3 * n + 4 * n + 5 * n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqjg3ppb_.scala:27)\n\tat Problem.main(tmpqjg3ppb_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = (1l to n).toList\n        val isEqualToSumEven\
    \ = list.forall {\n            _.toString.toInt%2 == 0 && list.filter(_%2==0).toList.length\
    \ == list.size\n        }\n        if(isEqualToSumEven) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mmw1pxt.scala:22)\n\tat Problem.main(tmp_mmw1pxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var result = false\n        val list = List(1,2,3,4,5,6,7,8,9,10)\n\
    \        for(i <- 0 until n ) {\n            val temp1 = list(i)\n           \
    \ val temp2 = n\n            if(temp1%2 == 0)\n                result += temp1\
    \ == temp2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphowc5sb8.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphowc5sb8.scala:19:23 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                result += temp1 == temp2\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a\
    \ member of Boolean - did you mean Boolean.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isEvenSum(n: Long, acc: Long) : Boolean = {\n     \
    \       if (acc == 0 || acc == n) return false;\n            if (n % 2 == 0) return\
    \ isEvenSum(n / 2, acc + n); if (n % 3 == 0) return isEvenSum(n / 3, acc + n);\
    \ return true;\n        }\n        \n        isEvenSum(n, 0);\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjsroxoxb.scala:23)\n\tat Problem.main(tmpjsroxoxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // TODO: Implement this function\n        val counter =\
    \ mutable.ListBuffer[Long]()\n        var sum = 0\n        while (sum < n) {\n\
    \            sum += 2\n            counter.append(sum)\n        }\n        return\
    \ counter.contains(n) && counter.forall(_.toString.toInt==4)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgx51u5cd.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        for (i <- 0 until n) {\n         \
    \   sum += n\n        }\n        return (sum %% 4) == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptg96nfg6.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptg96nfg6.scala:15:16 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptg96nfg6.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mreturn\e[0m\
    \ (sum %% \e[31m4\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                value %% is not a member of Int\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.ListBuffer.empty[Int]\n        val evens\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until n + 1)\n        \
    \    if (i % 2 == 0) evens += i\n\n        for (i <- 0 until n + 1)\n        \
    \    if (i % 2 != 0) nums += i\n\n        if (nums.size == 4)\n            return\
    \ evens.forall(x => x % 2 == 0) && (nums.filter(_ % 2 == 0) == nums.filter(_ %\
    \ 2 == 0)(0) + nums.filter(_ % 2 == 0)(1) + nums.filter(_ % 2 == 0)(2))\n\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbzow2y3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqbzow2y3.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqbzow2y3.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Long\n\e[31m   |\e[0m          \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqbzow2y3.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n + \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Using this approach is a little bit complicated, but\
    \ we can keep the same result by changing the step size\n        val sumEvenNumbers\
    \ = n.toInt /  2\n        val sumEvenNumbersSteps = (0 until n.toInt).toStream.filter(x\
    \ => x % 2 == 0).sum.toLong\n        // The sum of the even numbers must equal\
    \ the sum of the even numbers minus the sum of the odd numbers + the sum of the\
    \ even numbers\n        val result = sumEvenNumbersSteps + sumEvenNumbers - sumEvenNumbers.toInt\n\
    \        // The result has to be equal to 0\n        result == 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprds_z2jt.scala:24)\n\tat Problem.main(tmprds_z2jt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Your code here\n        val countList = ListBuffer[Long]()\n\
    \        val list = n to 2l\n\n        // count number of even numbers in list\n\
    \        for(x <- list) {\n            if (x % 2 == 0) {\n                countList\
    \ += x\n            }\n        }\n\n        if (countList.size == 4) {\n     \
    \       true\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_2vo9g_x.scala:33)\n\tat Problem.main(tmp_2vo9g_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var sum = 0\n        while (n > 0)\n            sum +=\
    \ n % 2 \n            n = n / 2 \n        return sum == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq7b2o1h1.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += n % \e[31m2\e[0m \n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpq7b2o1h1.scala:16:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n = n /\
    \ \e[31m2\e[0m \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if( n<4 || n%4==0)\n            return false\n        else\n\
    \            return isEqualToSumSum(n, 4, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5m96zo8.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mreturn\e[0m isEqualToSumSum(n, \e[31m4\e\
    [0m, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: isEqualToSumSum\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = n to (2l) by -1\n        list.takeWhile( n =>\
    \ n % 2l == 0l).forall { n => n % 4l == 0l }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nxpewbr.scala:17)\n\tat Problem.main(tmp_nxpewbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val numbers = mutable.ArrayBuffer(2l, 3l, 4l)\n       \
    \ var sum : Long = 0\n        var evenSum : Long = 0\n        for(i <- 0 to n){\n\
    \            if (numbers(i%2) == 0) evenSum += numbers(i)\n            else sum\
    \ += numbers(i)\n        }\n        return evenSum == sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiidegmd5.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m4l\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiidegmd5.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val a = n / 2l\n        val b = a * 2l\n        val c =\
    \ a * 3l\n        val d = b * 3l\n        val summed = if (a == 0 || b == 0 ||\
    \ c == 0 || d == 0) 0 else a + b + c + d\n        return summed == n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6jht_v7.scala:23)\n\tat Problem.main(tmph6jht_v7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = List.fill(4){n}\n        val sum = nums.filter(_\
    \ % 2 == 0).sum\n        return sum == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqcq9l9h.scala:20)\n\tat Problem.main(tmpbqcq9l9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toLong.filter(_ % 2 == 0).sum\n       \
    \ return sumEven == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp845fr_92.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = n.toLong.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value filter\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = n.toInt\n        val evenSum = sum.toLong.filter(x\
    \ => (x % 2) == 0)\n        val evenSumLen = evenSum.size\n        evenSumLen\
    \ == 4 && evenSum.forall(x => sum == x+2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpokmelm7f.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e[0m = sum.toLong.filter(\e\
    [36mx\e[0m => (x % \e[31m2\e[0m) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  value filter is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isEven(x : Long) : Boolean = {\n            (x % 2)\
    \ != 0\n        }\n        val s = scala.collection.mutable.Set[Long]()\n    \
    \    s ++= 0 to n\n        s exists { x => isEven(x) && x < n }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyokk7fdh.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s ++= \e[31m0\e[0m to\
    \ n\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          Found:    (n : Long)\n\e[31m   |\e[0m                   Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val numbers = mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 to n-1) numbers +=+ i \n        return numbers.count(_ % 2 == 0) == 4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv328w4cl.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpv328w4cl.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n-\e[31m1\e\
    [0m) numbers +=+ i \n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if(n < 4) {\n            false\n        } else {\n    \
    \        val nums = Vector.fill(4 - (n % 2))(n - 2l)(n - (n / 2)l)(n - (n + 1l))\n\
    \            val total = 0l\n            for(i <- 0 until nums.size)\n       \
    \     { \n                total += nums(i)\n                if(total % 2l == 0l)\n\
    \                { \n                    if(total % 4l == 0l)\n              \
    \      { \n                        return true\n                    }\n      \
    \              else\n                    { \n                        return false\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr84lq8lt.scala:16:68 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnums\e[0m = Vector.fill(\e\
    [31m4\e[0m - (n % \e[31m2\e[0m))(n - \e[31m2l\e[0m)(n - (n / \e[31m2\e[0m)l)(n\
    \ - (n + \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr84lq8lt.scala:16:35 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnums\e[0m = Vector.fill(\e\
    [31m4\e[0m - (n % \e[31m2\e[0m))(n - \e[31m2l\e[0m)(n - (n / \e[31m2\e[0m)l)(n\
    \ - (n + \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    Long\n\e[31m   |\e[0m                                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr84lq8lt.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                total +=\
    \ nums(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value += is not a member of Long - did you mean total.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val p = n\n        var i = 0\n        val set = scala.collection.mutable.Set[Long]()\n\
    \        while (i <= 4) {\n            val x = p + 2l\n            if (x >= 0)\
    \ {\n                if (set.contains(x))\n                    return false\n\
    \                else\n                    set += x\n            }\n         \
    \   i += 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmduvqjx5.scala:31)\n\tat Problem.main(tmpmduvqjx5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = (n + n + n + 2) % 2 == 0\n        println(s\"\
    $n -> $result\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqniuy7cq.scala:18)\n\tat Problem.main(tmpqniuy7cq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '4 -> true

    '
  timestamp: 1660010035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val set = new mutable.HashSet[Long]()\n        for (i <-\
    \ 0 to n){\n            if (i % 2 != 0 && set.contains(i) && set.size() == 4)\
    \ {\n                return true\n            }\n            set += i\n      \
    \  }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkneg9_a_.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkneg9_a_.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val arr : Array[Long] = new Array[Long](4)\n        val\
    \ num : Long = n.toInt\n        val i = 4\n        while (i <= arr.length) {\n\
    \            arr(i) = num - 2 * num * num - num * num + num\n            i -=\
    \ 1\n        }\n        arr.sum == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc6j3fg_h.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n        var\
    \ i = 1\n        while (i <= n) nums += i // Add all even numbers to nums except\
    \ the number we care about\n        i -= 1\n        if (nums.size != 4) return\
    \ false\n        val total = 0\n        for ((idx, val) <- nums.view.zipWithIndex)\
    \ {\n            if ((idx % 2 == 0) && (val mod 2 = 0)) total += val\n       \
    \ }\n        return (nums.size == 4 && total % 4 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpd_kcpmnm.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m ((idx, \e[33mval\e[0m) <- nums.view.zipWithIndex)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpd_kcpmnm.scala:19:24 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m ((idx, \e[33mval\e[0m) <- nums.view.zipWithIndex)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m   \
    \                     ')' expected, but '<-' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpd_kcpmnm.scala:19:51 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mfor\e[0m ((idx, \e[33mval\e[0m) <- nums.view.zipWithIndex)\
    \ {\n\e[31m\e[31m   |\e[0m                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                            '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_kcpmnm.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_kcpmnm.scala:21:9\
    \ -------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = n.toInt\n        val count = 4\n        val evens\
    \ = List(2, 4, 6, 8)\n        for (i <- 0 until sum) {\n            if (evens.contains(sum\
    \ - i)) {\n                count -= 1\n            }\n        }\n        return\
    \ count == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb07ygjvm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count -= \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value -=\
    \ is not a member of Int - did you mean count.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val count = sum(n,4,4)\n        (n == count)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9qn028jt.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = sum(n,\e[31m4\e\
    [0m,\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = 0\n        for( i <- 1 until n ) {\n    \
    \        val isEven = i % 2 == 0\n            sumEven += i if(isEven)\n      \
    \  }\n        (sumEven == 4l)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4gn3mt1k.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sumEven += i \e[33mif\e[0m(isEven)\n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m               \
    \          end of statement expected but 'if' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4gn3mt1k.scala:14:26 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m until n ) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4gn3mt1k.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sumEven += i\
    \ \e[33mif\e[0m(isEven)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean sumEven.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val result = new mutable.HashSet[Long]()\n        // add\
    \ even numbers, from n to 2n-1\n        for (i <- n until (2*(n - 1) +1) ) {\n\
    \            val d = i % 2\n            if (d == 0)\n                result +=\
    \ i\n        }\n        result.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrdde_ej.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var count = 0\n        for (i <- 0 until n.toInt) {\n \
    \           count += 1\n            if (n / i.toDouble == 4l)\n              \
    \  count += 1\n            if (count > 4)\n                return true\n     \
    \   }\n        return false\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpda9wicvj.scala:24)\n\tat Problem.main(tmpda9wicvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        if (n <= 0l) false\n        else if (n % 2 == 0l) true\n\
    \        else isEqualToSumEven(n - 2l) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx1x23vv.scala:18)\n\tat Problem.main(tmpqx1x23vv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        n match {\n            case _ if n <  4 => false\n    \
    \        case _ if n >= 4 => true\n            case _ => isEqualToSumEven(n -\
    \ 4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp40o67v6d.scala:20)\n\tat Problem.main(tmp40o67v6d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        def isFourPositiveEven(x : (Long, Long)) : Boolean = x\
    \ match {\n            case ((x,y), (x0,y0)) =>\n                // if x is even\
    \ and y is even and x0 + y0 = n\n                (x0 % 2 == 0) && (y0 % 2 == 0)\
    \ &&\n                (x0 + y0 == n)\n            case _ => false\n        }\n\
    \        // Check if n is a multiple of 4\n        if (n % 4 == 0) \n        \
    \    isFourPositiveEven((n,n))\n        else {\n            val total = new mutable.ListBuffer[(Long,Long)]()\n\
    \            // Compute all the sums of n to 4\n            for (i = 3; i <= n;\
    \ i += 4) {\n                // Add the current iteration to the total\n     \
    \           total += ((i,i+2))\n            }\n            // If the total contains\
    \ the given number, then it's an even sum\n            if (total.contains((n,n)))\n\
    \                true\n            else {\n                // If the total does\
    \ not contain the number, then it must be equal to 4\n                val sum\
    \ = total.filterNot(_._1 == n).head._2\n                (sum == n) && (isFourPositiveEven((sum,sum)))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp53yjdj_p.scala:26:19 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (i = \e[31m3\e[0m; i <= n;\
    \ i += \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp53yjdj_p.scala:26:30 ---------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (i = \e[31m3\e[0m; i <= n; i +=\
    \ \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              '<-' expected, but ';' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp53yjdj_p.scala:26:38 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (i = \e[31m3\e[0m; i <= n;\
    \ i += \e[31m4\e[0m) {\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53yjdj_p.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                (x0 % \e\
    [31m2\e[0m == \e[31m0\e[0m) && (y0 % \e[31m2\e[0m == \e[31m0\e[0m) &&\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53yjdj_p.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mtotal\e[0m = \e[33mnew\e[0m mutable.ListBuffer[(\e[35mLong\e[0m,\e[35mLong\e\
    [0m)]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp53yjdj_p.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (i = \e[31m3\e[0m; i <= n;\
    \ i += \e[31m4\e[0m) {\n\e["
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Write your code here\n        val sumEven = List.fill(6)(0)\n\
    \        for(i<- 0 until n){\n            sumEven(i) += 2\n            if(sumEven(i)\
    \ > n){\n                return false\n            }\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6y7j6ijq.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6y7j6ijq.scala:16:23 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            sumEven(i) += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val numbers = mutable.ListBuffer(2l, 4l, 6l, 8l)\n    \
    \    (n >>> 0l).forall(numbers)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp352549vo.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m, \e[31m4l\e[0m, \e[31m6l\e[0m, \e[31m8l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp352549vo.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (n >>> \e[31m0l\e\
    [0m).forall(numbers)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value forall is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = mutable.HashSet.empty[Long]\n        for( i <-\
    \ 0 until n ) {\n            if( i % 2 == 0 ) {\n                sum += i\n  \
    \          }\n        }\n        sum.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpylyl6_6t.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpylyl6_6t.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Write your solution here\n        var evenSum = 0\n\
    \        val array = 1 to n.toInt\n        for (i <- array)\n            evenSum\
    \ += i\n\n        return evenSum == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vu_syxb.scala:24)\n\tat Problem.main(tmp3vu_syxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        var evenSum = 0\n        for(i <- 1 to n){\n          \
    \  evenSum += i\n            if( evenSum%2 == 0){\n                return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6v3sb6g.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        (n / 2) match {\n            case 0 => true\n         \
    \   case 1 => n % 2 == 0\n            case 2 => n % 4 == 0\n            case 3\
    \ => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgilf_eq.scala:22)\n\tat Problem.main(tmpbgilf_eq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sum = mutable.LinkedHashSet[Long]().toList\n      \
    \  for (i <- 1 to n) {\n            sum add i\n        }\n        if (sum.size\
    \ == 4 && sum.forall(x => x % 2 == 0)) {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiut6u7qp.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.LinkedHashSet[\e\
    [35mLong\e[0m]().toList\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpiut6u7qp.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Initialize the sum set to 0\n        val sumSet = Set()\n\
    \        sumSet += 4\n        // Iterate through all odd numbers\n        for\
    \ (i <- 1 to n/2+1) {\n            val currentSum = sumSet.sum\n            if\
    \ (n mod i == 0) {\n                // If the current number is even and equal\
    \ to the sum set (odd number modulo i)\n                if (currentSum == i) sumSet\
    \ += 4\n                else {\n                    // If the current number is\
    \ odd and different from the sum set (even number modulo i)\n                \
    \    sumSet -= 4\n                    return false\n                }\n      \
    \      }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp605ibkhp.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        sumSet += \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Found:    (\e[31m4\e[0m : Int)\n\e[31m   |\e[0m                  Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp605ibkhp.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n/\e[31m2\e[0m+\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:   \
    \ Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp605ibkhp.scala:18:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcurrentSum\e[0m = sumSet.sum\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m\
    \ in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp605ibkhp.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (n mod i == \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp605ibkhp.scala:21:47 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (currentSum == i) sumSet\
    \ += \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \          ^\e[0"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        // Start with the sum being the number itself\n       \
    \ var sum : Long = n;\n        val evenNumbers = mutable.Set[Long]()\n       \
    \ val oddNumbers = mutable.Set[Long]()\n        while (sum > 0) {\n          \
    \  // If it divides evenly, we add it to a set\n            if (sum % 2 == 0)\
    \ {\n                evenNumbers += sum\n            }\n            // If it divides\
    \ oddly, we remove it from the set\n            else {\n                oddNumbers\
    \ -= sum\n            }\n            sum -= 1 // Next we add one to the current\
    \ sum\n        }\n        // Now we can check whether there are\n        // only\
    \ 4 odd numbers in the set\n        // and 4 even numbers in the set\n       \
    \ if (oddNumbers.size == 4 && evenNumbers.size == 4) {\n            return true\n\
    \        }\n        // Otherwise the sum can't be written as the sum of 4 even\n\
    \        // and 4 odd numbers\n        else {\n            return false\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtlj_gid.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtlj_gid.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moddNumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = (0 to (n/4) - 1).map(i => 2 * i)\n        val\
    \ sumEven = list.map(x => if (x % 2 == 0) x else 0).sum\n        sumEven == n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdj1b4ki2.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m = (\e[31m0\e[0m to (n/\e[31m4\e[0m) - \e[31m1\e[0m).map(\e[36mi\e[0m => \e\
    [31m2\e[0m * i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m      \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n      (n * (n + 1) + 1) % (2l) == (n / 2l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fsdsug6.scala:18)\n\tat Problem.main(tmp4fsdsug6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val m = math.abs(n)\n        val evens = math.filter(math.abs(m)._2.isOdd,\
    \ math.abs(m)).toList.map(_._2).sum\n        evens == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnvqfwwgr.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = math.filter(math.abs(m)._2.isOdd,\
    \ math.abs(m)).toList.map(_._2).sum\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value filter is not a member\
    \ of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnvqfwwgr.scala:14:44\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = math.filter(math.abs(m)._2.isOdd, math.abs(m)).toList.map(_._2).sum\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value _2 is not a member of Long\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nCopy = n\n        var ans = false\n        while(\
    \ (n % 4) != 0) {\n            n -= 1\n        }\n        while( (n % 4) == 0)\
    \ {\n            n += 1\n            ans = ans\n        }\n        nCopy -= 1\n\
    \        while(nCopy > 0) {\n            ans = ans\n            n -= 1\n     \
    \       nCopy -= 1\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk1b88vf.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk1b88vf.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgk1b88vf.scala:22:14 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        nCopy -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value -= is not a member of Long - did you mean nCopy.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk1b88vf.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk1b88vf.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            nCopy -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value -= is not a member of Long - did you mean nCopy.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val list = List(n, (n+1l), (2n+3l), (5n+7l), (3n+4l), (8n))\n\
    \        list.forall(_.isPositive) && (list.size <= 4)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwr0rn6fz.scala:13:65 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List(n, (n+\e\
    [31m1l\e[0m), (\e[31m2\e[0mn+\e[31m3l\e[0m), (\e[31m5\e[0mn+\e[31m7l\e[0m), (\e\
    [31m3\e[0mn+\e[31m4l\e[0m), (\e[31m8\e[0mn))\n\e[31m\e[31m   |\e[0m          \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwr0rn6fz.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = List(n, (n+\e[31m1l\e[0m), (\e[31m2\e[0mn+\e[31m3l\e[0m), (\e\
    [31m5\e[0mn+\e[31m7l\e[0m), (\e[31m3\e[0mn+\e[31m4l\e[0m), (\e[31m8\e[0mn))\n\e\
    [31m\e[31m   |\e[0m                                    ^^\e[0m\n\e[31m   |\e[0m\
    \                                    value n is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwr0rn6fz.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List(n, (n+\e\
    [31m1l\e[0m), (\e[31m2\e[0mn+\e[31m3l\e[0m), (\e[31m5\e[0mn+\e[31m7l\e[0m), (\e\
    [31m3\e[0mn+\e[31m4l\e[0m), (\e[31m8\e[0mn))\n\e[31m\e[31m   |\e[0m          \
    \                                   ^^\e[0m\n\e[31m   |\e[0m                 \
    \                         value n is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwr0rn6fz.scala:13:55 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List(n, (n+\e[31m1l\e\
    [0m), (\e[31m2\e[0mn+\e[31m3l\e[0m), (\e[31m5\e[0mn+\e[31m7l\e[0m), (\e[31m3\e\
    [0mn+\e[31m4l\e[0m), (\e[31m8\e[0mn))\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                           value n is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwr0rn6fz.scala:14:22 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        list.forall(_.isPositive) && (list.size <= \e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660010045
