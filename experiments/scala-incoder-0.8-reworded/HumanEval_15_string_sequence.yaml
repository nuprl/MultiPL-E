name: HumanEval_15_string_sequence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n\
  \    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        val list = mutable.ListBuffer[String]()\n        for ( i <-\
    \ 0 until n ) list.append (s\"$i\")\n        list.toList.reverse.mkString(\" \"\
    )", "        var res = \"\";\n        var currentVal = 0L;\n        for(i <- 0\
    \ until n){\n            res += currentVal++;\n            if(i!=n-1)\n      \
    \          res += \" \";\n        }\n        return res;", "        val s = ListBuffer[String]()\n\
    \        for (i <- 0 until n) {\n            s += i.toString\n        }\n    \
    \    s.toString()", "        val numbers = mutable.ListBuffer(0)\n        for(i\
    \ <- 0 until n) {\n            numbers append i.toString\n        }\n        strings.mkString(\"\
    \ \")", "        var s = \"\"\n        for (i <- 0 until n) {\n            s +=\
    \ i.toString + \" \"\n        }\n        s", "        val buffer = new mutable.StringBuilder\n\
    \        var i = 0\n        while (i < n) {\n          buffer.append(i.toString)\n\
    \          buffer.append(\" \")\n          i += 1\n        }\n        buffer.toString",
  "        val numbers = new scala.collection.mutable.StringBuilder\n        var n\
    \ = 0l\n        while(n < n+n) {\n          numbers.append(n).append(\" \")\n\
    \          n+=1\n        }\n        return numbers.toString", "        val result\
    \ = new StringBuilder(n).reverse\n        result.toString", "        var ret :\
    \ String = \"0\"\n        for(i <- 0 to n) ret += \" \" + (i.toString + (1l))\n\
    \        ret", "        var s = \"\"\n        var i = 0\n        while (i < n)\
    \ {\n            s = s + i\n            i += 1\n        }\n        return s",
  "        val s = mutable.MutableList(0 to n)\n        while(s._size < n) {\n   \
    \         val n = s._size * 10 + 1\n            s += n\n        }\n        s.toList.toString()",
  "        var s = \"\"\n        while (n > 0) s = s(0) + \" \" + n\n        s", " \
    \       val stringBuilder = new StringBuilder\n        for (i <- 0 until n) {\n\
    \            stringBuilder.append(i)\n        }\n        return stringBuilder.toString",
  "        var s = \"\"\n        for (x<-0 to n) s += \" \" + x.toString\n       \
    \ s", "        val result = scala.collection.mutable.StringBuilder() \n      \
    \  for (i <- 0 until n) {\n            result.append(i).append(\" \")\n      \
    \  }\n        result.toString()", "        var s = \"\"\n        for (i <- 0 until\
    \ n) {\n            s += i\n        }\n        s", "      val l = ListBuffer(n.toString)\n\
    \      for (i <- 0 to (n-1)) l += i.toString\n      l.toString.trim", "      \
    \  val results: List[String] = List.fill(n max 0).toList\n        results.map(i\
    \ => i.toString).mkString(\" \")", "        var result = \"\"\n        for(i <-\
    \ 0 until n) {\n            result = result + \" \" + i\n        }\n        return\
    \ result", "        val numbers = (0 until n).map( i => i + \" \" )\n        strings.toList.mkString(\"\
    \ \", numbers.toList.mkString(\" \"))", "      var str = \"\"\n      val rem =\
    \ n % 6\n      for (i <- 0 until n / 6) {\n        if (i == rem) str = str +\"\
    \ \" + (6+(i%6))\n        else str = str + (6+(i%6))\n      }\n      str", " \
    \       val s = List.fill(n)(s\"$n\") map (x => \" \" + x)\n        s.mkString",
  '        (0 until n).map(i => i + " ").mkString(" ")', "        def stringHelper(s\
    \ : String, n:Long) = {\n            if (n>0) stringHelper(s + \" \" + n, n-1)\n\
    \            else s\n        }\n        stringHelper(\"0\", n)", "        def\
    \ stringOfDigits(n : Long, digits : mutable.Buffer[Long]) : String = {\n     \
    \       if (digits.isEmpty) {\n                digits += n\n                if\
    \ (digits.length == 1) digits.head + \" \" else strings.unzip(digits.tail).mkString(\"\
    \ \", \"\")\n            } else {\n                stringOfDigits(digits.head,\
    \ digits)\n            }\n        }\n        val strings = new mutable.ListBuffer[Long]()\n\
    \        stringOfDigits(n, strings)\n        strings += n\n        strings(0)\
    \ = \" 0\"\n        strings.take(n).mkString(\" \").stripPrefix(\" \")", "   \
    \     var ret = \"\"\n        (0 until n).foreach{\n            x => ret += \"\
    \ \" + x.toString\n        }\n        ret", "        val result = new Array[String](n)\n\
    \        val m = n to 0 by -1\n        for(i <- m) {\n            result(i) =\
    \ i.toString\n        }\n        result.mkString(\" \")", "        var result\
    \ = \"\"\n        for(i <- 0 until n) {\n            result = (result + i).asInstanceOf[String]\
    \ + \"  \"\n        }\n        result", "        val stringSeq = new mutable.StringBuilder(n.toString)\n\
    \        stringSeq.clear()\n        for(i <- 0 until n)\n        stringSeq +=\
    \ \"0 \"\n        stringSeq.toString()", "        val arr = new Array[String](n)\n\
    \        var i = 0l\n        while (i < n) {\n            arr(i) = i.toString\n\
    \            i += 1l\n        }\n        arr.mkString(\" \")", "        val seq\
    \ : Seq[String] = 0 until n\n        seq.mkString(\" \")", "        var result\
    \ = \"\"\n        for (i <- 0 to (n-1))\n            result += i\n        return\
    \ result", "        var s = \"\"\n        val a = math.pow(2, n)\n        var\
    \ i = 1\n        while i <= n {\n            s = s + i.toString() + \" \" + (a/i).toString()\
    \ + \"\\n\"\n            i += 1\n        }\n        s", "        var s = \"\"\n\
    \        for (i <- 0 until n) {\n            if (i != 0) {\n                s\
    \ += \" \"\n            }\n            s += i.toString\n        }\n        s",
  "        var res = \"\"\n        var i = n\n        while (i != 0) {\n         \
    \   res += (\" \" + (i % 10l))\n            i /= 10l\n        }\n        res",
  "        // Return an empty string if n is less than or equal to 0\n        if (n\
    \ <= 0) \"\" else (0 to n) map(i => i + \"\").mkString(\" \")", "        val arr\
    \ = new mutable.ArrayBuffer(n)\n        arr += 0l\n        var i = 0\n       \
    \ while (i < arr.length) {\n            arr += (i + 1l).toString\n           \
    \ i += 1\n        }\n        arr.toString.trim", "        var str = \"\"\n   \
    \     var i = 0\n        while(i < n) {\n            str += i.toString + \" \"\
    ;\n            i += 1\n        }\n        return str.trim", "        val ret =\
    \ new StringBuilder\n        for(i <- 0 until n)\n            ret.append(i).append(\"\
    \ \")\n        ret.toString", "        val seq:Seq[Long] = Seq.fill(n)(0l)\n \
    \       seq.mkString(\" \")", "        // TODO: replace with StringBuffer\n  \
    \      def append(x : String) : String = {\n            if (x.length() > 0) {\n\
    \                x + (\" \" * (xs.length - 1))\n            } else {\n       \
    \         x\n            }\n        }\n\n        val xs = List('0').take(n.toInt).map(_\
    \ => x => append(\"$x\" + \" \"))\n        val result = append(xs.last())\n\n\
    \        result + (if (n < xs.length) xs.drop(n).mkString(\" \") else \"\")",
  "        var out = \"\"\n        for (i <- 0 until n) {\n            out += i +\
    \ \" \"\n        }\n        return out", "        val seq = for(i <- 0 until n)\
    \ yield i.toString()\n        return seq.mkString(\" \")", "        // Using mutable\
    \ collections, we make use of the fact that the number of elements in the resulting\
    \ list is equal to n.\n        val result = new mutable.ListBuffer[String]()\n\
    \        // Generating the string by repeatedly adding n to the front.\n     \
    \   // This can be done by repeatedly calling toString on 0 to n, since strings\
    \ are immutable in Scala.\n        (0 until n).foreach { i => result += (i.toString)\
    \ }\n        return result.toList.toString", "        def stringSequenceHelper(n:\
    \ Long, acc: List[String]) : List[String] =\n            if (n < 0l)\n       \
    \         List(\"0\")\n            else\n                acc match {\n       \
    \             case Nil => List(\"0\")\n                    case head :: tail =>\n\
    \                        stringSequenceHelper(n-1, head :: acc)\n            \
    \    }\n        stringSequenceHelper(n,Nil)", "        val sb = new StringBuilder\n\
    \        for (i <- (0l) until n)\n            sb += i.toString + \" \" //(\" \"\
    \ + i.toString + \" \")\n        sb.mkString", "        var res = \"\"\n     \
    \   for (i <- 0 until n) {\n            res = res + \" \" + i\n        }\n   \
    \     res", "        val seq = scala.collection.mutable.ListBuffer(0l)\n     \
    \   (1l) until (n) foreach { elem => seq += elem }\n        seq.toString.trim",
  "        val result = mutable.ListBuffer.empty[String]\n        for (x<-0 until\
    \ n) result += x.toString\n        result.map(x => x + \" \").toString", "   \
    \     var result: String = \"\"\n        for (i <- 0 until n) {\n            result\
    \ = result + i + (\" \") + \" \" + (\" \") * n + (\"\\n\") * n\n        }\n  \
    \      result", "        val numbers = Range(0, n).toList\n        numbers.map(i\
    \ => i.toString).mkString(\" \")", "        var strings : List[String] = Nil\n\
    \        var num : Long = 0\n        while(num < n){\n            strings = strings\
    \ :+ (num.toString.substring(0,1) + \"-\" + num.toString.substring(1))\n     \
    \       num += 1\n        }\n        return strings.mkString(\" \")", "      \
    \  val result = (for (i <- 0 until n) yield i.toString)\n        new StringBuilder().append(result).reverse().toString",
  "        val result = new mutable.ListBuffer[String]()\n        val step = (1l).toLong\n\
    \        for(i <- 0 until n) result += i.toString + \" \" + step\n        result.toString",
  "        val seq = new mutable.LinkedList[String]\n        for (i <- 0 until n)\
    \ {\n            seq.add(str(i))\n        }\n        seq.toString", "        val\
    \ sb = new StringBuilder\n        var i = 0\n        while (i<n) {\n         \
    \ sb.append(i)\n          sb.append(\" \")\n          i += 1\n        }\n    \
    \    sb.toString()", "        var result = \"\"\n        for (i <- 0 until n)\n\
    \            result += (i + \" \")\n        result", "        val nums = Vector.tabulate(n)((i,s)=>\
    \ (i.toString + \" \" + s))\n        strings.mkString(\" \")", "        if (n\
    \ <= 0l) throw new IllegalArgumentException(\"n must be positive\")\n        val\
    \ result: MutableList[String] = new mutable.MutableList[String]\n        var i\
    \ = 0l\n        while (i <= n) {\n            result.add(i)\n            i +=\
    \ 10l\n        }\n        result.mkString(\" \")", "        var buffer = \"\"\n\
    \        var i = 0\n        while (i < n) {\n            buffer += (i.toString\
    \ + \" \")\n            i += 1\n        }\n        buffer", "        val s = mutable.StringBuilder()\n\
    \        for {\n            i <- 0 until n\n        } yield {\n            s.clear()\n\
    \            s.append(i)\n            s.append(\" \")\n            s.toString()\n\
    \        }", "        var s = \"\"\n        var i = 0\n        while (i<n) {\n\
    \            s = s + i.toString()\n            i = i + 1\n        }\n        return\
    \ s", "        var result = new mutable.Buffer[String]()\n        var i = 0\n\
    \        for (i <- 0 until n) {\n            result += i\n            result +=\
    \ \" \"\n        }\n        result.reverse", "        val stringBuilder = new\
    \ StringBuilder(n.toString)\n        for (i <- 0 until n) {\n            stringBuilder.append(\"\
    \ \")\n        }\n        stringBuilder.reverse", "        def loop(i: Long, accum:\
    \ String) : String = {\n            if (i >= n) accum.trim\n            else loop(i\
    \ + 1, accum + (i.toString + \" \"))\n        }\n        loop(0l, \"\")", "  \
    \      var ret = \"\"\n        var i = 0\n        while (i < n) {\n          \
    \  ret = ret + i.toString + \" \"\n            i = i + 1\n        }\n        ret",
  "        val strs = collection.mutable.ArrayBuffer.empty[String]\n        for (i\
    \ <- 0 until n) {\n            strs += i.toString\n        }\n        return strs.mkString(\"\
    \ \")", "        var s: String = \"\"\n        for (nc <- 0 until n) { s = s +\
    \ \" \" + nc }\n        s", "        def seq(n: Long, ns: mutable.Seq[Long]) :\
    \ String = { ns match {\n            case ns if ns > n => seq(n, ns :+ ns)\n \
    \           case _ => ns map { ni => s\"$ni \" }\n        } mkString \" \"\n \
    \       seq(n, Seq[Long]()) ", "        var str = \"\"\n        for(i <- 0 until\
    \ n)\n            str = str + i\n        str", "        def recurse(n: Long, s:\
    \ String) : String = {\n            if (n == 0) s\n            else {\n      \
    \          val next = recurse(n-1, s + \" \" + n)\n                if (n % 10\
    \ == 0) next\n                else {\n                    val last = next.split(\"\
    \ \")(0)\n                    next.replace(last + \" \" + n, \"\")\n         \
    \       }\n            }\n        }\n        recurse(n,\"\")", "        var result\
    \ = \"\"\n        for(i <- 0 until n){\n            result += \" \" + i\n    \
    \    }\n        return result", "        val nums = (1 to n).map(x => x.toString).mkString(\"\
    \ \")\n        nums", "        var result : String = \"\"\n        for (i <- 0\
    \ until n) {\n            result += (\" \" + ((i + 1).toString))\n        }\n\
    \        result", "        val start = n.toString.padTo(10, '0').toLong\n    \
    \    val result = (0 until start).map (x => n.toString.padTo(10, '0') + (x.toString.padTo(10,\
    \ '0'))).mkString\n        result", "        val stringList = mutable.ListBuffer[String]()\n\
    \        for ((i : Long) <- 0 until n) {\n            stringList += i\n      \
    \  }\n        stringList.mkString(\" \")", "        var buffer : mutable.StringBuilder\
    \ = new mutable.StringBuilder()\n        for(i <- 0 until n) buffer.append(i).append(\"\
    \ \")\n        buffer.toString.trim", "        // Add all the numbers in a string\n\
    \        var sb = StringBuilder()\n        for (i <- 0 until n){\n           \
    \ sb.append(i).append(\" \")\n        }\n        // Remove the trailing space\
    \ at the end\n        sb.deleteCharAt(sb.length-1)\n        return sb.toString()",
  "        var result = \"\"\n        for (x <- 0 until n) {\n            result +=\
    \ \" \" + x.toString\n        }\n        return result", "        val sequence\
    \ = List.fill(n.toInt)((0l))\n        sequence.takeWhile(_ < n).mkString(\" \"\
    )", "        var buf = new mutable.StringBuilder(\"\")\n        for (i <- 0 until\
    \ n) buf.append(i).append(\" \")\n        buf.result()", "        // Write your\
    \ logic here\n        val s = scala.collection.mutable.StringBuilder()\n     \
    \   for (i <- 0 until n) {\n            s += i.toString + \" \"\n        }\n \
    \       s.toString", "        var ret = \"\"\n        for (i <- 0 until n) {\n\
    \            ret += (i + (\" \"))\n        }\n        ret", "      val res = for\
    \ (i <- 0 until n) yield {\n        s\"$i\"\n      }\n      res.mkString(\" \"\
    )", "        val a = Array[String](n)\n        val s = a.toList\n        val sb\
    \ = new StringBuilder()\n        sb.append(s(0))\n        while (s.length > 1)\
    \ {\n            val p = s.pop\n            sb.append(\" \")\n            sb.append(s(p))\n\
    \        }\n        return sb.toString()", "        var result = \"\"\n      \
    \  var n = n\n        while(n > 0) {\n            result += (n - 1) % 10 + \"\
    \ \"\n            n /= 10\n        }\n        result", "        val list = for(i\
    \ <- 0 until n) yield {\n            val number = i\n            val s = number\n\
    \            s.toString + (if (number > 5) 1 else \"\")\n        }\n        val\
    \ list = list.mkString(\" \")\n        list", "        var s = \"\"\n        for\
    \ (x <- 0 until n) {\n            s = s + \" \" + x.toString.padLeft(2, \" \"\
    )\n        }\n        s.trim", "        val strArray = Array.fill(n / 10)(\"\"\
    +(0+i).asInstanceOf[Long])\n        strArray.take(n).mkString(\" \")", "     \
    \   var str = n + \" \";\n        while(str.length > 0) {\n            str = str.dropRight(1)\
    \ + \"0 \" + str;\n        }\n        return str;", "        var s = \"\"\n  \
    \      for (i <- 0 until n) {\n            s += i\n        }\n        s", "  \
    \      var s = \"\"\n        for (i <- 0 to n) {\n            s += i.toString\n\
    \        }\n        return s", "        val sequence = collection.mutable.ListBuffer.empty[String]\n\
    \        for (i = 0l to n) {\n            sequence += i.toString\n        }\n\
    \        sequence.toList.reverse.mkString(\" \")", "        val s = n.toString.split('\
    \ ')\n        s.map(i => { i match {\n            case x: String => x.toInt\n\
    \            case _ => 0\n        }}).foldLeft(\"\"){ (s, i) =>\n            s\
    \ + \" \" + i\n        }", "      val sb = new StringBuilder()\n      for (i <-\
    \ 0 until n) {\n        sb.append(i)\n        sb.append(' ')\n      }\n      sb.toString()",
  "        var str = Seq.empty\n        for(i <- 0 until (n+1))\n            str :+=\
    \ i\n        str.toString.trim", "        val list = ArrayBuffer(0.until(n))\n\
    \        val s = list.foldLeft(\"\")( (s,v) => s + \" \" + v)\n        s.stripMargin",
  "        val l = List(n).map(_.toString)\n        val s = l.mkString(\" \")\n  \
    \      s", "        val numSeq : mutable.Seq[Long] = mutable.Seq.empty\n     \
    \   while( numSeq.size < n ) {\n            numSeq :+= numSeq.head.asInstanceOf[Long]\n\
    \            numSeq :+= numSeq.tail.asInstanceOf[Long]\n        }\n        numSeq.take(n).foldLeft(\"\
    \"){\n            (a,b) => a +: b.toString.split(\" \")\n        }", "       \
    \ var result = \"0\"\n        for (x<-0 until n)\n            result+=(\" \" +\
    \ x + \" \")\n        result", "        val s = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            s += i\n        }\n        s.mkString(\"\
    \ \")", "        val nums = mutable.ListBuffer[Long]()\n        var num = 0l\n\
    \        while (num <= n) {\n            num += n\n            nums += num\n \
    \       }\n        nums.mkString(\" \")", "        // TODO: write your function\
    \ here\n        val stringSeq = mutable.LinkedList()\n        for(i <- 0 until\
    \ n){\n            stringSeq.add(i)\n        }\n        stringSeq.mkString(\"\
    \ \")", "        val str = \"\"\n        for (i <- 0 to n) {\n            str\
    \ += i + \" \"\n        }\n        str", '        (0l) until n foreach { n =>
    if (n % 10 > 0) yield "0" else yield "1" }', "        def strToLong(x: String)\
    \ : Long = x.toLong\n        def longToStr(x: Long) : String = x.toString\n  \
    \      def strToDouble(x: String) : Double = x.toDouble\n        def doubleToStr(x:\
    \ Double) : String = x.toString\n        \n        val stringSeq = List.range(0,n).map(i\
    \ => (str(i).takeWhile(c => c >= '0' && c <= '9').mkString(\"\") + str(i).dropWhile(c\
    \ => c >= '0' && c <= '9').mkString(\"\").reverse).reverse)\n        val intSeq\
    \ = stringSeq.map(strToLong)\n        val doubleSeq = stringSeq.map(strToDouble)\n\
    \        val strSeq = stringSeq.map(longToStr)\n        val intSet = intSeq.toSet\n\
    \        val doubleSet = doubleSeq.toSet\n        \n        val intersection =\
    \ intSet.intersect(doubleSet)\n        val difference = intSet.difference(doubleSet)\n\
    \        val symmetricDifference = intSet.symmetricDifference(doubleSet)\n   \
    \     val isDisjoint = intSeq.forall(x => !doubleSeq.contains(x))\n        \n\
    \        if(intSeq.forall(x => x < 0L) || doubleSeq.forall(x => x < 0.0) || intSeq.forall(x\
    \ => x >= n) || doubleSeq.forall(x => x >= n)) {\n            \"\"\n        }\
    \ else {\n            val stringSeq2 = List.range(0, n).map(i => str(i).takeWhile(c\
    \ => c >= '0' && c <= '9').mkString(\"\") + str(i).dropWhile(c => c >= '0' &&\
    \ c <= '9').mkString(\"\").reverse).reverse\n            val stringSeq3 = stringSeq.map(x\
    \ => x.padTo(n,' '))\n            val strSeq3 = stringSeq.map(x => x.padTo(n,'\
    \ '))\n            val intSet2 = stringSeq2.toSet\n            val doubleSet2\
    \ = stringSeq2.toSet\n            val symmetricDifference2 = stringSeq2.toSet\n\
    \            val isDisjoint2 = stringSeq2.forall(x => !stringSeq3.contains(x))\n\
    \            val isDisjoint3 = stringSeq2.forall(x => !stringSeq3.contains(x))\n\
    \            \n            val s = if(stringSeq.forall(x => x < 0L) || stringSeq.forall(x\
    \ => x >= n) || doubleSeq.forall(x => x < 0.0) || doubleSeq.forall(x => x >= n))\
    \ {\n                \"0\"\n            } else {\n                val result = ",
  "        var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \"\
    \ + i\n        }\n        s", "        val arr = new mutable.Array[Int](n)\n \
    \       var i = 0\n        while (i < n) {\n            arr(i) = (i.toString +\
    \ \" \").toInt\n            i += 1\n        }\n        arr.mkString(\" \")", " \
    \       val a = new Array[Int](n)\n        (0 to n).foreach( n => a(n) = n+1 )\n\
    \        a.toList.mkString(\" \")", "        var s = \"\"\n        for(i <- 0\
    \ to n) {\n            s += i\n        }\n        s", "        val string = new\
    \ Array[String](n+1)\n        string(0) = \"0\"\n        for (i<-n; i> -1; i--)\
    \ string(i+1) = i.toString + \" \" + string(i).toString\n        string(n) = string(n-1)\
    \ + \" \" + (string(n-2).replaceFirst(\" 1 \", \"2 \"))\n        string(0) = string(0).replaceFirst(\"\
    \ 0 \", \"1 \")\n        string.mkString(\" \")", "        val str = scala.collection.mutable.StringBuilder()\n\
    \        for(i <- 0 to n-1) {\n            str += i.toString + \" \";\n      \
    \  }\n        return str.toString;", "        val range: immutable.Range[Long]\
    \ = Range(n)\n        var result = \"\"\n        for (i <- range ) result += \"\
    \ \" + (i.toString)\n        result", "       var string = \"\"\n       for (var\
    \ i = 0; i <= n; i += 1) {\n          string += \" \" + i\n       }\n       return\
    \ string", "        val sb = new StringBuilder()\n        var i = 0l\n       \
    \ while(i < n) {\n            sb.append(i)\n            sb.append(\" \")\n   \
    \         i += 1\n        }\n        sb.toString()", "        // Initialize a\
    \ mutable array to store the numbers\n        var seq : mutable.MutableList[Long]\
    \ = mutable.MutableList(0)\n        // Loop until we run out of numbers\n    \
    \    while (seq.length < n) {\n            seq += seq.head\n        }\n      \
    \  seq.mkString(\" \")", "        // If n is greater than or equal to 0, just\
    \ return an empty string rather than throwing an exception.\n        if (n <=\
    \ 0l) \"\" else (1 to n).map(i => s\"$i\").mkString(\" \")", "        var s =\
    \ \"\"\n        for (i <- 0 until n) {\n            s = s + i\n        }\n   \
    \     return s", "        def f(n: Long, acc: List[String]) : String = {\n   \
    \         if (n <= 0) acc\n            else f(n - 1, acc + \" \" + n.toString)\n\
    \        }\n        f(n, List())", "        var s = \"\"\n        for(i <- 0 until\
    \ n){\n            s = s + \" \" + i.toString\n        }\n        return s", " \
    \       var s = \"\"\n        for (i <- 0 until n) s += i.toString()\n       \
    \ s", "        var s = \"\"\n        for (i<- 0 until n) {\n            s = s\
    \ + i\n        }\n        return s", "        val ns = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until n) ns += (i.toString + \" \")\n        ns.mkString(\"\
    \ \")", "        val result = collection.mutable.LinkedHashSet[Long]()\n     \
    \   for (i <- 0 until n){\n            result(i) = i.toString\n        }\n   \
    \     val list = result.mkString(\" \")\n        list", "        val nums = Range(0,\
    \ n).toList\n        val strings = nums.map(i => s\"$i\").mkString(\" \")\n  \
    \      return strings", "        val s = ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (i < n) {\n            s += i.toString\n            i +=\
    \ 1\n        }\n        s.toString + \" \" + i.toString", "        val list =\
    \ for {\n            i <- 0l to n\n        } yield i.toString\n        list.mkString(\"\
    \ \")", "       var string = \"0\"\n       while (n > 0) {\n           string\
    \ = \" \" + string + n\n           n -= 1\n       }\n       string", "       \
    \ val a = new Array[Long](n)\n        (0 to n).map( i => a(i) += i).toArray.mkString(\"\
    \ \")", "        val buffer = new StringBuilder\n        for (i <- 0 to n by 1)\
    \ buffer.append(i).append(\" \")\n        buffer.toString", "        var result\
    \ : String = \"\"\n        for (i <- 0 until n) {\n            result = result\
    \ + i\n        }\n        return result", "        val n = n.toInt + 1\n     \
    \   var sb = \"\"\n        for(i <- 0 until n){\n            sb +=  \" \" + i\n\
    \        }\n        return sb", "        var res : String = \"\"\n        var\
    \ i = 1\n        while (i <= n) {\n            res = res + \" \" + i\n       \
    \     i = i + 1\n        }\n        return res", "        val s = Array.ofDim[Long](n);\n\
    \        for (i <- 0 until n) {\n            s(i) = i\n        }\n        \" \"\
    \ + s.toList.mkString(\" \")", "        val s = collection.mutable.StringBuilder()\n\
    \        for (x <- 0 to n) {\n            s += x.toString.toInt + \" \" \n   \
    \     }\n        s.toString", "        val result = new StringBuilder()\n    \
    \    var i = 0\n        for (j <- 0 until n) {\n            result.append(j.toString.padLeft(3,\
    \ \"0\"))\n            result.append(\" \")\n        }\n        result.deleteCharAt(result.length()\
    \ - 1)\n        return result.toString()", "        val seqBuilder = collection.mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until n) {\n            seqBuilder += (i + \" \")\n     \
    \   }\n        seqBuilder.toString()", "        val s = mutable.MutableList.empty[Long]\n\
    \        for (i <- 0 until n) s += i\n        \" \" + s.toArray.mkString(\" \"\
    ) + \" \" + n", "        // Use recursion until you get a base case. \n      \
    \  // Keep a counter variable and pass it down recursively.\n        def stringSequenceHelper(s\
    \ : String, counter : Long) : String = {\n            // If the counter is less\
    \ than zero,\n            // return an empty string. \n            if (counter\
    \ < 0) return \"\"\n            // Otherwise, \n            // return the string\
    \ plus the counter divided by 10.\n            else return s + \" \" + stringSequenceHelper(\"\
    \" + (counter / 10), counter - n % 10).trim\n        }\n        // Return the\
    \ result from the helper method.\n        val result = stringSequenceHelper(\"\
    \", n).trim\n        // Return the result.\n        result", "        val s =\
    \ \"\"\n        for (i <- 0 until n) s += s\"$i\"\n        s", "        var seq\
    \ = \"\"\n        for (i <- 0 to n) {\n            seq += i\n        }\n     \
    \   seq", "        var ret = \"\"\n        (0 until n).foreach(x => ret += x.toString)\n\
    \        return ret", "        var result : String = null\n        for( i <- 0l\
    \ to n) result += \" \" + i.toString \n        result", "        val arr = new\
    \ Array[Int](n)\n        for (i <- 0 until n) {\n            arr(i) = i\n    \
    \    }\n        return arr.map(i => i.toString + \" \").mkString(\" \")", "  \
    \      def stringRec(n: Long, s: String) : String = {\n            if (n == 0L)\
    \ {\n                s\n            }\n            else {\n                stringRec(n-1,\
    \ s+ n%10 + \" \" + n%10*10 + \" \")\n            }\n        }\n        stringRec(n.toInt,\
    \ \"\")", "        // Write your solution here.\n        var str = \"\"\n    \
    \    (0 until n).foreach(x => str = str + \" \" + x.toString)\n        str", " \
    \       var s = \"\"\n        for (i<-0 to n-1) {\n            s += i\n      \
    \      if (i != (n-1)) {\n                s += \" \"\n            }\n        }\n\
    \        return s", "        val seqList = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(count < n) {\n            seqList += count\n\
    \            count += 1\n        }\n        seqList.toString", "        var res\
    \ = \"\"\n        for (i <- 0 until n) {\n            res = res + \" \" + i\n\
    \        }\n        return res", "        var s = \"\"\n        var i = 0\n  \
    \      while (i <= n) {\n            s = s + i.toString + \" \"\n            i\
    \ = i + 1\n        }\n        return s", "        def stringSeq(n: Long, start:\
    \ String = \"\", seq: mutable.Seq[String]) : String = {\n            if (n <=\
    \ 0) start\n            else stringSeq(n-1, start + seq.nth + \" \")\n       \
    \ }\n        stringSeq(n).mkString", "        // Complete this method.\n     \
    \   var string = \"\"\n        var i = 0\n        var j = 0\n        var k = n\n\
    \        while (i < n) {\n            j = 0\n            while (j < k) {\n   \
    \             string += i + \"\"\n                j++\n            }\n       \
    \     i++\n            k--\n        }\n        string", "        var result =\
    \ \"\"\n        for (i <- 0 until n) {\n            result += i.toString + \"\
    \ \";\n        }\n        result", "        val result = (1 to n).map(_.toString).mkString(\"\
    \ \")\n        result", "        val res : StringBuilder = new StringBuilder\n\
    \        var ind = 1\n        var last = 0\n        while (n > 0) {\n        \
    \    res.append(ind).append(\" \")\n            last = n % 10\n            n /=\
    \ 10\n            ind += last\n        }\n        res.toString", "        val\
    \ stringBuilder = new StringBuilder\n        for (i <- 0 until n) stringBuilder.append(i).append(\"\
    \ \")\n        stringBuilder.toString", "        var out: String = \"\"\n    \
    \    for(i <- 0 until n) out = out + \" \" + i\n        out", "        val ret\
    \ = new StringBuilder(n.toString.length)\n        for( i <- 0 until n ) {\n  \
    \          ret.append(i).append(\" \")\n        }\n        ret.toString()", " \
    \       val r = scala.util.Random\n        val s = \"\"\n        var i = 0\n \
    \       while (i < n) {\n            s += r.nextInt(9) + 1\n            i += 1\n\
    \        }\n        s", "        // Write your code here!\n        val list =\
    \ List(0)\n        for (i <- 0 until n) {\n            list = list :+ i\n    \
    \    }\n        list.mkString", "        var s = \"\"\n        var x = 1\n   \
    \     var i = 0\n        while (i < n) {\n            s += x\n            i +=\
    \ 1\n            x = x * 2\n        }\n        return s", "        val result\
    \ = new mutable.StringBuilder()\n        val current = new mutable.Long(0)\n \
    \       while(current <= n) {\n            result.append(\" \")\n            result.append(current.toString)\n\
    \            current += 1\n        }\n        result.toString", "        val list\
    \ = List.range(1, n+1)\n        list.mkString(\" \")", "        val list = mutable.ListBuffer[String]()\n\
    \        val zero = \"0\"\n        for (i <- 0 to n) {\n            list += zero\n\
    \        }\n        list.toList.reverse.mkString(\" \")", "      var ret = \"\"\
    \n      var current = \"\"\n      var i = 0\n      while (i < n) {\n        current\
    \ = current + i.toString + \" \"\n        ret =  ret + current\n        i += 1\n\
    \      }\n      ret", "        var result = \"\"\n        for (i <- 0 to n) {\n\
    \            result += i + \" \"\n        }\n        result", "        val x =\
    \ new mutable.ListBuffer[String]()\n        while (n > 0) {\n            val a\
    \ = n % 10\n            val b = n % 100\n            val c = n / 10\n        \
    \    val d = n / 100\n            x.append((a + (\" \" + b + \" \" + c + \" \"\
    \ + d)))\n            n -= a * 100 + b * 10 + c * 10 + d\n        }\n        x.reverse.mkString(\"\
    \ \")", "        var buffer : mutable.Builder[String] = mutable.Builder()\n  \
    \      var i = n.toInt\n        while(i != 0) {\n            buffer += i.toString\n\
    \            i -= 1\n        }\n        buffer.result", "        var s = \"\"\n\
    \        for (x<-0 until n) s = s + \" \" + x\n        s", "        var ret =\
    \ \"\"\n        for (i <- 0 until n) {\n            ret += i.toString + \" \"\
    \ //.toString\n        }\n        return ret", "        var str = \"\"\n     \
    \   for (i <- 0 until n) {\n            str = str + \" \" + i\n        }\n   \
    \     str", "        var ret: String = \"\"\n        var i = n.toInt - 1;\n  \
    \      while(i >= 0) {\n            ret += i.toString + \" \";\n            i\
    \ -= 1;\n        }\n        ret", "        val strs = mutable.MutableList.empty[String]\n\
    \        var count = 0l\n        for (x = 0l; x <= n; x += 1l) {\n           \
    \ strs += x.toString\n            if (count != x) {\n                strs += \"\
    \ \"\n            }\n            count += 1\n        }\n        strs.toList.toString",
  '        (for (i <- 0 until n) yield i.toString).mkString(" ")', "        val l\
    \ = scala.collection.mutable.StringBuilder(\"\")\n        while(n > 0) {\n   \
    \         l += n.toString\n            n = n - 1\n        }\n        l.toString",
  "        val seq = new mutable.MutableList[Long]()\n        seq :+= 0l\n       \
    \ for (i <- 1l to n) seq :+= i\n        seq.mkString(\" \")", "        var ret\
    \ = \"\"\n        for (i <- 0l to n){\n            ret += i\n            ret +=\
    \ \" \"\n        }\n        return ret", "        var result = \"\"\n        var\
    \ i = 0l\n        while (i < n) {\n            result += (i + \" \")\n       \
    \     i += 1\n        }\n        result", "        // Initialize an Array[String]\
    \ with enough capacity to store n numbers. \n        val array = Array[String](n)\n\
    \n        // Fill in the elements of the array. \n        for (i <- 0 until n)\
    \ {\n            array(i) = i.toString\n        }\n        return array.mkString(\"\
    \ \")", "        val seq = new scala.collection.mutable.StringBuilder()\n    \
    \    val currentVal = 0l\n        while (currentVal < n) {\n            seq +=\
    \ currentVal\n            seq += \" \"\n            currentVal += 1\n        }\n\
    \        seq.toString", "        var ret = \"\"\n        for (i<-0 until n) {\n\
    \            ret += i\n            ret += \" \"\n        }\n        return ret",
  "        var str = \"\"\n        for (i <- 0 until n) {\n            str = str +\
    \ \" \" + i\n        }\n        str", "        var result = \"\"\n        for(i\
    \ <- 0 to n) {\n            result += \" \" + i.toString\n        }\n        result",
  '        (0 to n).map(x => x.toString()).mkString(" ")', "        val result = new\
    \ mutable.ListBuffer[String]()\n        val start = 0l\n        var i = start\n\
    \        while (i < n) {\n            result += (i +\" \")\n            i += 1\n\
    \        }\n        result.toString()", "        def stringSequenceHelper(index\
    \ : Long, acc : String) : String = {\n            if (index < n){\n          \
    \      stringSequenceHelper(index + 1, acc + index + \" \")\n            }\n \
    \           else {\n                acc\n            }\n        }\n        stringSequenceHelper(0l,\
    \ \"\")", "        val builder = new StringBuilder()\n        var n = n\n    \
    \    while (n > 0) {\n            builder.append(n.toInt)\n            builder.append(\"\
    \ \")\n            n -= 1\n        }\n        builder.toString", "        var\
    \ ret = \"\"\n        var j = 0\n        for(i <- 0 until n) {\n            ret\
    \ += \" \" + j.toString\n            j += 1\n        }\n        ret", "      \
    \  if (n == 0l) \"\"\n        else (0 to n).map(i => i.toString + \" \").mkString(\"\
    \ \")", "        val numbers = for (i <- 0 until n) yield i.toString\n       \
    \ val result = numbers.mkString(\" \")\n        result", "      var string = \"\
    \"\n      for (x <- 0 until n) {\n        if (n % x == 0) {\n          string\
    \ += \" \" + x.toString\n          string += stringSequence((n / x).toInt)\n \
    \       }\n      }\n      string", "        val sequence = mutable.ListBuffer[Long]()\n\
    \        var index = 0\n\n        for (x <- 0 until n) {\n            index +=\
    \ 1\n            sequence += x\n            if (index == n) {\n              \
    \  sequence += \" \"\n                index = 0\n            }\n        }\n  \
    \      return sequence.toList.mkString(\" \")", "        var res = \"\"\n    \
    \    for( i <- 0 to n)\n            res = res + (i.toString + \" \")\n       \
    \ return res", "        val strs = Vector.fill(n / 2l)(1l).toVector.take(n / 2l).map(_.toString).mkString(\"\
    \ \")\n        val even = n / 2l\n        val odd  = n - even\n        if (n >\
    \ 2l)\n            strs.reverse\n        strs + \" \" + even + \" \" + odd", " \
    \       val res = for(i <- 0 until n) yield i.toString\n        res.mkString(\"\
    \ \")", "      val strSeq = Seq.empty[String]\n      for(i <- 0 until n){\n  \
    \      strSeq += i\n      }\n      strSeq.toString()", "      var str : String\
    \ = \"\"\n      for (i <- 0 until n)\n        str = str.concat(i.toString + \"\
    \ \")\n      str", "        val arr = new Array[Long](n)\n        for (i <- 0\
    \ until n) {\n            arr(i) = (i.toLong)\n        }\n        arr.mkString(\"\
    \ \")", "        if (n<1) return \"0\"\n        val numbers = List().init\n  \
    \      for (i <- 0 until n) {\n            numbers = numbers+i\n        }\n  \
    \      val sb = new StringBuilder\n        for (i <- numbers) {\n            sb.append(i).append(\"\
    \ \")\n        }\n        sb.deleteCharAt(sb.length-1)\n        sb.toString",
  "        var s = \"\"\n        for (i<- 0 until n) s += i\n        s"]
stop_tokens:
- "\n    }\n"
