language: scala
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val a = new Array[Long](x, y)\n        var z = 0l\n        for (i<- 0 until\
    \ a.length)\n        {\n            if (a(i) % 2 == 0)\n                z += a(i)\n\
    \        }\n        z match {\n            case z if (z == 0 || z > x) -1l else\
    \ z\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpng3ztqrn.scala:21:44 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m z \e[33mif\e[0m (z == \e\
    [31m0\e[0m || z > x) -\e[31m1l\e[0m \e[33melse\e[0m z\n\e[31m\e[31m   |\e[0m \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                  '=>' expected, but 'else' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpng3ztqrn.scala:13:32 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](x, y)\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Found:    (Long, Long)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpng3ztqrn.scala:21:40\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m z \e[33mif\e[0m (z == \e[31m0\e[0m || z > x) -\e[31m1l\e[0m \e[33melse\e[0m\
    \ z\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of Boolean, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x : Long = x.toLong\n        var y : Long = y.toLong\n        var z\
    \ : Long = x + y\n        while (x != z) {\n            x += 1\n            y\
    \ -= 1\n            z += 1\n        }\n        x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmp_cz6f1t3.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m : \e[35mLong\e[0m\
    \ = x.toLong\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m             x is a forward reference extending over the definition of x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E039] Reference Error: /tmp/tmp_cz6f1t3.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36my\e[0m : \e[35mLong\e[0m = y.toLong\n\e[31m\e[31m   |\e[0m               \
    \        ^\e[0m\n\e[31m   |\e[0m             y is a forward reference extending\
    \ over the definition of y\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            val tempx = x\n            x = y\n           \
    \ y = tempx\n        }\n        if (x % 2 == 0) {\n            if (x % 4 == 0\
    \ && y % 2 == 0) {\n                return -1\n            }\n            if (y\
    \ % 2 == 0) {\n                return -1\n            }\n        }\n        if\
    \ (y % 2 == 0) {\n            if (y % 4 == 0 && x % 2 == 0) {\n              \
    \  return -1\n            }\n            if (x % 2 == 0) {\n                return\
    \ -1\n            }\n        }\n        val xmin = x\n        val ymin = y\n \
    \       val xmax = x\n        val ymax = y\n        while (xmin < xmax) {\n  \
    \          val mid = (xmin + xmax) / 2\n            if (mid % 2 == 0) {\n    \
    \            if (mid % 4 == 0 && ymin % 2 == 0) {\n                    return\
    \ -1\n                }\n                if (ymin % 2 == 0) {\n              \
    \      return -1\n                }\n            }\n            if (ymin % 2 ==\
    \ 0) {\n                if (ymin % 4 == 0 && mid % 2 == 0) {\n               \
    \     return -1\n                }\n                if (mid % 2 == 0) {\n    \
    \                return -1\n                }\n            }\n            val\
    \ tempx1 = xmin\n            xmin = xmax\n            xmax = tempx1\n        }\n\
    \        while (ymin < ymax) {\n            val mid = (ymin + ymax) / 2\n    \
    \        if (mid % 2 == 0) {\n                if (mid % 4 == 0 && xmin % 2 ==\
    \ 0) {\n                    return -1\n                }\n                if (xmin\
    \ % 2 == 0) {\n                    return -1\n                }\n            }\n\
    \            if (xmin % 2 == 0) {\n                if (xmin % 4 == 0 && mid %\
    \ 2 == 0) {\n                    return -1\n                }\n              \
    \  if (mid % 2 == 0) {\n                    return -1\n                }\n   \
    \         }\n            val tempx2 = ymin\n            ymin = ymax\n        \
    \    ymax = tempx2\n        }\n        return xmin * ymin + xmax * ymax\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:15:14 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x = y\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            y = tempx\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:57:17 -----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m            xmin = xmax\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val xmin\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:58:17 -----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            xmax = tempx1\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val xmax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:79:17 -----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m            ymin = ymax\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val ymin\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsu38ff2r.scala:80:17 -----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m            ymax = tempx2\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val ymax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // If there's no even number in the range [x, y] inclusive, return -1\n\
    \        if(x > y) -1 else math.max(x + 1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplroksor9.scala:17)\n\tat Problem.main(tmplroksor9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def choose(n: Int, m: Int): Int = {\n            val ans = math.min(m, n)\n\
    \            if (ans == 0 || ans == n)\n                ans\n            else\n\
    \                choose(ans - 1, m) // Recursive call\n        }\n\n        //\
    \ If y <= x, then return -1 \n        if (y > x)\n            return -1\n    \
    \    \n        // If x == 0, then return y\n        if (x == 0)\n            return\
    \ y\n\n        // If x is even, then x - (x%2) == 0, return y\n        if (x %\
    \ 2 == 0)\n            return y\n\n        // Otherwise, find out which side of\
    \ the [x, y] interval the even number is\n        val m = math.max(x,y)\n    \
    \    val n = math.min(x,y)\n        val a = math.max(a,m)\n        val b = math.min(b,n)\n\
    \n        // Then calculate the biggest even number in the interval\n        choose(a-1,b-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc4yxdryd.scala:36:25 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.max(a,m)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc4yxdryd.scala:37:25 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.min(b,n)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x >= y)\n            -1\n        else if (x <= y)\n            1\n \
    \       else if (x == y)\n            x\n        else\n            (x - y) % 2\
    \ match {\n                case 0 => x - y + 1\n                case 1 => x -\
    \ y + 2\n                case _ => x - y\n            }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprojcki9y.scala:27)\n\tat Problem.main(tmprojcki9y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val low = math.min(x,y)\n        val high = math.max(x, y)\n        for\
    \ (i <- low until high) {\n            if (i % 2 == 0) evens += i\n          \
    \  else odds += i\n        }\n        var max_even = -1\n        val max_odd =\
    \ -1\n        for (i<- evens ++ odds) {\n            if (max_even < i && max_odd\
    \ < i) max_even = i\n            else if ((max_even < i) && (max_odd < i) && (i\
    \ == max_even)) max_odd = i\n            else if ((max_even < i) && (i == max_even))\
    \ max_even = i\n        }\n        if ((max_even < 0) && (max_odd < 0)) -1\n \
    \       else max_even\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4j7xpk4t.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4j7xpk4t.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if ((x >= y) || (x < 0l) || (y < 0l)) return -1l\n        val nums = List(1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l).sortWith(_ > _)\n\
    \        if (nums.contains(x)) x\n        else if (nums.contains(y)) y\n     \
    \   else -1l\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgx2p0m1a.scala:20)\n\tat Problem.main(tmpgx2p0m1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val array = new mutable.ArrayBuffer[Long]()\n        if (x > y)\n      \
    \      array.push(y - 1)\n        else array.push(x-1)\n        while (x < y)\
    \ {\n            val newArray = array.slice(0,array.size)\n            val temp\
    \ = newArray.head\n            val length = newArray.length\n            if (temp\
    \ % 2 == 0)\n                return temp\n            else if (temp < y)\n   \
    \             newArray.shift(2)\n            else if (temp > x)\n            \
    \    newArray.shift(-2)\n            else break\n        }\n        return -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7rs2jgn.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marray\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7rs2jgn.scala:27:17\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e\
    [0m break\n\e[31m\e[31m   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNums = List(x, y).filter { x % 2 == 0 }\n        if (evenNums.isEmpty)\
    \ {\n            return -1\n        } else if (evenNums.head >= x && evenNums.head\
    \ <= y) {\n            return evenNums.head\n        } else {\n            val\
    \ maxEvenNum = evenNums.reduceLeft(_ * 2)\n            if (maxEvenNum >= x &&\
    \ maxEvenNum <= y) {\n                return maxEvenNum\n            }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wzgch2_.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNums\e\
    [0m = List(x, y).filter { x % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Found:    Boolean\n\e[31m   |\e[0m\
    \                                           Required: \e[1m\e[32mLong\e[0m\e[1m\e\
    [32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3wzgch2_.scala:19:49 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmaxEvenNum\e[0m = evenNums.reduceLeft(_\
    \ * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3wzgch2_.scala:20:12 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \            \e[33mif\e[0m (maxEvenNum >= x && maxEvenNum <= y) {\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m\
    \   |\e[0m            Required: Long\n\e[31m   |\e[0m            Maybe you are\
    \ missing an else part for the conditional?\n\e[31m21 |\e[0m                \e\
    [33mreturn\e[0m maxEvenNum\n\e[31m22 |\e[0m            }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = mutable.ArrayBuffer(x*2,y*2)\n        val odds = mutable.ArrayBuffer(x,y)\n\
    \        while (evens.nonEmpty || odds.nonEmpty) {\n            if (evens.nonEmpty)\
    \ evens.remove(0)\n            if (odds.nonEmpty) odds.remove(0)\n           \
    \ if (evens.isEmpty && odds.isEmpty) \n                return -1\n           \
    \ if (evens.nonEmpty && odds.isEmpty) \n                return evens.head\n  \
    \          if (evens.nonEmpty && odds.nonEmpty) \n                if (evens.head\
    \ < odds.head)\n                    evens.remove(0)\n                else\n  \
    \                  odds.remove(0)\n        }\n        if (evens.nonEmpty || odds.nonEmpty)\n\
    \            evens.head + odds.head\n        else\n            -1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpymj2_zi8.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer(x*\e\
    [31m2\e[0m,y*\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpymj2_zi8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ArrayBuffer(x,y)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            var tempX = x\n            var tempY = y\n   \
    \         x = y\n            y = tempX\n        }\n        val x = x - 1\n   \
    \     val y = y - 1\n        // x is even\n        if ((y & 1) == 0) {\n     \
    \       while (x+2 < y) {\n                x += 1\n                y -= 1\n  \
    \          }\n            while (x > y) {\n                x -= 1\n          \
    \      y += 1\n            }\n            if (x > 0) {\n                x = x\
    \ -1\n            } else {\n                x = x + 1\n            }\n       \
    \ }\n        // y is even\n        else if ((x & 1) == 0) {\n            while\
    \ (y+2 < x) {\n                y += 1\n                x -= 1\n            }\n\
    \            while (y > x) {\n                y -= 1\n                x += 1\n\
    \            }\n            if (y > 0) {\n                y = y -1\n         \
    \   } else {\n                y = y + 1\n            }\n        }\n        x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3fmzah0i.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3fmzah0i.scala:20:16 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = y - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp3fmzah0i.scala:16:14 -----------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            x = y\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp3fmzah0i.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            y = tempX\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp3fmzah0i.scala:32:18 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                x = x -\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3fmzah0i.scala:34:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                x =\
    \ x + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /t"
  stdout: ''
  timestamp: 1659979257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val nums = x to y\n        val evens = 0 until nums.size\n        val maxEven\
    \ = evens.max\n        for (n <- evens if n < maxEven) yield nums(n)\n       \
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_2dk718.scala:20)\n\tat Problem.main(tmp6_2dk718.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def choose(x: Long, y: Long) : Option[Long] = if (x < y) Some(x) else choose(y,\
    \ x)\n        if (y <= x) return -1\n        choose(x, y - 1).fold(x -> -1, y\
    \ -> -1)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wqj62wf.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        choose(x, y - \e[31m1\e\
    [0m).fold(x -> -\e[31m1\e[0m, y -> -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mFound:    (Long\
    \ => ((Long, Int), (Long, Int))) => ((Long, Int), (Long, Int))\n\e[31m   |\e[0mRequired:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = for {\n            x <- 0 until x\n            y <- 0 until\
    \ y\n            i <- x to y\n        } yield i\n        val pairs = evens.filter(x\
    \ => evens.contains((x + y) / 2))\n        if(pairs.isEmpty) -1\n        else\
    \ pairs.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzaezdbc4.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            x <- \e[31m0\e[0m\
    \ until x\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Found:    (x : Long)\n\e[31m   |\e[0m            \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzaezdbc4.scala:15:25 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            y <- \e[31m0\e[0m until y\n\e[31m\e[31m   |\e[0m         \
    \                ^\e[0m\n\e[31m   |\e[0m                         Found:    (y\
    \ : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x >= y) -1\n        else if (x <= y) y\n        else \n        { \n\
    \            var max = Math.max(x, y)\n            val evens = x filter ( (y)\
    \ => y < max )\n            val odds = x filter ( (y) => y > max )\n         \
    \   evens.maxBy( y => y % 2 )\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrjuwa12.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = x filter\
    \ ( (\e[36my\e[0m) => y < max )\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrjuwa12.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36modds\e[0m = x filter ( (\e[36my\e[0m) => y > max )\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \  value filter is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNumbers = mutable.Set[Long]()\n        var smallestEven = Long.MinValue\n\
    \        var largestEven = Long.MaxValue\n        var minNum = Long.MaxValue\n\
    \        var maxNum = Long.MinValue\n        while(x != -1) {\n            x +=\
    \ 2\n            if(x % 2 == 0) evenNumbers += x\n            if(x < (minNum +\
    \ minNum)/2)\n                minNum = x\n            else\n                maxNum\
    \ = x\n        }\n        while(y != -1) {\n            y += 2\n            if(y\
    \ % 2 == 0) evenNumbers += y\n            if(y < (minNum + minNum)/2)\n      \
    \          minNum = y\n            else\n                maxNum = y\n        }\n\
    \        var result = -1L\n        for(i <- 0 to evenNumbers.size) {\n       \
    \     if((evenNumbers(i) >= minNum) && (evenNumbers(i) < maxNum))\n          \
    \      result = evenNumbers(i)\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpew3evwg7.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpew3evwg7.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            x += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpew3evwg7.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            y += \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean y.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val max = y\n        val min = x\n        var even = false\n        while\
    \ (!even) {\n            val i = (min + max) / 2\n            if (i % 2 == 0)\n\
    \                max = i\n            else\n                min = i\n        \
    \    if (min >= max)\n                even = true\n        }\n        return even\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4u5mwx08.scala:19:20 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max = i\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val max\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4u5mwx08.scala:21:20 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                min = i\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val min\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u5mwx08.scala:25:15\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mreturn\e[0m even\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (even : Boolean)\n\e[31m   |\e[0m               Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   var max_num = x\n      var min_num = y\n      while ( max_num >= min_num)\
    \ {\n        if ( max_num % 2 == 0) {\n            max_num = max_num / 2\n   \
    \     } else {\n            max_num = max_num / 2 + 1\n        }\n      }\n  \
    \    max_num\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9eyi5fa.scala:25)\n\tat Problem.main(tmpw9eyi5fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var z = 0\n        var y = y - 1\n        while (x != y) {\n           \
    \ if (x % 2 == 0) {\n                z = x + 1\n                y -= 1\n     \
    \           x /= 2\n            } else if (x % 2 != 0) {\n                z -=\
    \ 1\n                x += 1\n            }\n        }\n        if (y == 0) {\n\
    \            z = x\n        }\n        z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpifgwqdk3.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = y - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpifgwqdk3.scala:17:20 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                z = x + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpifgwqdk3.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                x /= \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpifgwqdk3.scala:22:18 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                x += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean x.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifgwqdk3.scala:26:16\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            z = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Found:    (x\
    \ : Long)\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xEvens : Set[Long] = Set(1l, x, 2*x, 3*x, 4*x, 5*x, 6*x, 7*x, 8*x, 9*x,\
    \ 10*x, 11*x, 12*x, 13*x, 14*x, 15*x)\n        val yEvens : Set[Long] = Set(1l,\
    \ y, 2*y, 3*y, 4*y, 5*y, 6*y, 7*y, 8*y, 9*y, 10*y, 11*y, 12*y, 13*y, 14*y, 15*y)\n\
    \        if (x.toLong == y.toLong) -1\n        if (yEvens.contains(x)) return\
    \ x\n        if (yEvens.contains(y)) return y\n        xEvens.find((xEvens.last).ceiling(1.0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7f8x9q13.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        xEvens.find((xEvens.last).ceiling(\e[31m1.0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value ceiling is not a member of Long\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp7f8x9q13.scala:15:34 ----------------\e\
    [0m\e[0m\n\e[33m15 |\e[0m        \e[33mif\e[0m (x.toLong == y.toLong) -\e[31m1\e\
    [0m\n\e[33m\e[33m   |\e[0m                                  ^^\e[0m\n\e[33m  \
    \ |\e[0mA pure expression does nothing in statement position; you may be omitting\
    \ necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = x to y by 2\n        val evensSum = evens.foldLeft(0)(_ + _)\n\
    \        if (evensSum < 0)\n            -1\n        else\n            evens.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe0w2hnw.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSum\e\
    [0m = evens.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                    Found:    Long\n\e[31m   |\e[0m                         \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val min = (x > y) ? x : y\n        val max = (x > y) ? y : x\n        val\
    \ num = (min + max) / 2\n        val isEven = num % 2 == 0\n        val even =\
    \ if (isEven) num else num - 1\n        if (min > max) -1\n        else if (num\
    \ < min || num > max) return -1\n        else if (num == even) return even\n \
    \       else if (num == min) return min\n        else if (num == max) return max\n\
    \        else num\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmecr3zg.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = (x > y) ? x :\
    \ \e[35my\e[0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e\
    [31m   |\e[0m                                Not found: type y\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmecr3zg.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = (x > y) ? x :\
    \ \e[35my\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value ? is not a member of Boolean\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmecr3zg.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (x > y) ? y :\
    \ \e[35mx\e[0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e\
    [31m   |\e[0m                                Not found: type x\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmecr3zg.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (x > y) ? y :\
    \ \e[35mx\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val x = if (x >= y) x else y\n        val y = if (x >= y) y else x\n   \
    \     val x = if(x < 1) 1 else x\n        val y = if(y < 1) 1 else y\n       \
    \ val num = (1l to y).toList.sortWith( (a,b) => a.compareTo(b) ).last\n      \
    \  if (num != 0l) {\n            if (x % num == 0)\n                num - 1\n\
    \            else num\n        } else {\n            if (x % y == 0)\n       \
    \         y - 1\n            else y\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5b5wapv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mif\e[0m(x\
    \ < \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined as \e\
    [33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb5b5wapv.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mif\e[0m(y\
    \ < \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined as \e\
    [33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpb5b5wapv.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mif\e[0m (x\
    \ >= y) x \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\
    \e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb5b5wapv.scala:13:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mx\e[0m = \e[33mif\e[0m (x >= y) x \e[33melse\e[0m y\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb5b5wapv.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mif\e[0m (x\
    \ >= y) y \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\
    \e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation avai"
  stdout: ''
  timestamp: 1659979267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = mutable.Set[Long](x + 1L)\n        for (i <- 0 to y-1) {\n \
    \           evens += (i + x) / 2\n        }\n        if (evens.contains(x%2))\
    \ {\n            x\n        } else {\n            -1L\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph45tvcaj.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m](x + \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph45tvcaj.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to y-\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xArray = x.toInt\n        val yArray = y.toInt\n\n        var x = -1\n\
    \        var y = -1\n        var xArrayNew = x.toInt\n        var yArrayNew =\
    \ y.toInt\n        xArrayNew -= 1\n        yArrayNew -= 1\n\n        for(xIndex\
    \ <- 0 to xArrayNew - 1; yIndex <- 0 to yArrayNew - 1) {\n            if(xArray(xIndex)\
    \ %2 == 0 && yArray(yIndex) %2 == 0) {\n                xArray(xIndex) = xArray(xIndex)\
    \ * 2\n                yArray(yIndex) = yArray(yIndex) * 3\n            }\n  \
    \          else if(xArray(xIndex) %2 != 0 && yArray(yIndex) %2 != 0) {\n     \
    \           xArray(xIndex) = xArray(xIndex) * 2\n                yArray(yIndex)\
    \ = yArray(yIndex) * 3\n            }\n            if(xArray(xIndex) < yArray(yIndex))\
    \ {\n                if(xArray(xIndex) == y) {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 2\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 3\n                }\n                else if(xArray(xIndex) == x + 1) {\n \
    \                   x = xArray(xIndex) + 1\n                    y = xArray(yIndex)\
    \ + 1\n                    xArray(xIndex) = xArray(xIndex) * 2\n             \
    \       yArray(yIndex) = yArray(yIndex) * 3\n                }\n             \
    \   else {\n                    x = xArray(xIndex) + 1\n                    y\
    \ = xArray(yIndex) + 1\n                    xArray(xIndex) = xArray(xIndex) *\
    \ 2\n                    yArray(yIndex) = yArray(yIndex) * 3\n               \
    \ }\n            }\n            else {\n                if(xArray(xIndex) == y)\
    \ {\n                    x = xArray(xIndex) + 1\n                    y = xArray(yIndex)\
    \ + 1\n                    xArray(xIndex) = xArray(xIndex) * 3\n             \
    \       yArray(yIndex) = yArray(yIndex) * 2\n                }\n             \
    \   else if(xArray(xIndex) == x + 1) {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 3\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 2\n                }\n                else {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 3\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 2\n                }\n            }\n        }\n        x\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpfuz2067_.scala:24:15 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(xArray(xIndex) %\e[31m2\e[0m\
    \ == \e[31m0\e[0m && yArray(yIndex) %\e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m               \e[33mvalue\e\
    [0m \e[35mxArray\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfuz2067_.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                xArray(xIndex) = xArray(xIndex) * \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value update is not a member of Int\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpfuz2067_.scala:25:33 -----------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                xArray(xIndex) = xArray(xIndex) * \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 \e[33mvalue\e[0m \e[35mxArray\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfuz2067_.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                yArray(yIndex)\
    \ = yArray(yIndex) * \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value update is not a member of Int\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpfuz2067_.scala:26:33 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                yArray(yIndex) = yArray(yIndex) * \e\
    [31m3\e[0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 \e[33mvalue\e[0m \e[35myArray\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpfuz2067_.scala:28:20 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(xArray(xIndex) %\e[31m2\e[0m\
    \ != \e[31m0\e[0m &"
  stdout: ''
  timestamp: 1659979272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = for (i <- x until y) \n             yield { if (i%2 == 0) i\
    \ else (i+1l) } \n\n        val maxEven = evens.max\n        if (maxEven < -1l)\
    \ -1 else maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpu6uzml6h.scala:16)\n\tat Problem$.main(tmpu6uzml6h.scala:21)\n\
    \tat Problem.main(tmpu6uzml6h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y && x <= 0)\n            return -1\n        if (x > y && x >= 0)\n\
    \            return -1\n        if (x <= y)\n            return math.max(x + x,\
    \ y + y - 1)\n        if (y >= x)\n            return math.max(x - y, x + y -\
    \ 1)\n        val even = math.min(x, y)\n        val high = math.max(even * 2,\
    \ x - even)\n        math.ceil(high / even) * 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjaczpdx7.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        math.ceil(high / even)\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evensLessThan_Y = (x % 2L) == ((y % 2L) == (0) || (y % 2L) == (1));\n\
    \        val evensGreaterThan_X = (x % 2L) == ((y % 2L) == (0) || (y % 2L) ==\
    \ (1));\n        if (evensLessThan_Y && evensGreaterThan_X) {\n            x +\
    \ y;\n        } else if (evensLessThan_Y) {\n            x;\n        } else {\n\
    \            -1L;\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp27odvxkl.scala:13:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensLessThan_Y\e[0m = (x\
    \ % \e[31m2L\e[0m) == ((y % \e[31m2L\e[0m) == (\e[31m0\e[0m) || (y % \e[31m2L\e\
    [0m) == (\e[31m1\e[0m));\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Values of types Long and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp27odvxkl.scala:14:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensGreaterThan_X\e[0m\
    \ = (x % \e[31m2L\e[0m) == ((y % \e[31m2L\e[0m) == (\e[31m0\e[0m) || (y % \e[31m2L\e\
    [0m) == (\e[31m1\e[0m));\n\e[31m\e[31m   |\e[0m                              \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \   Values of types Long and Boolean cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def even(x: Long, y: Long): Boolean = (x - y)%2==0\n        def odd(x :\
    \ Long, y : Long): Boolean = (x - y)%2!=0\n        def choose(x: Long, y: Long):\
    \ Long = {\n            def twos(x : Long, y : Long) = {\n                def\
    \ divide(x: Long, y: Long, i: Long) : Long = { if(even(x,y) && even(x-1,y))  divide(x-1,y,i)\
    \ else \n                    if(even(x,y) && even(x+1,y))  divide(x+1,y,i)  else\
    \ divide(x,y,i)\n                }\n                divide(x,y,0)\n          \
    \  }\n            twos(x,y)\n        }\n        val n = choose(x,y)\n        if(n\
    \ < x || n < y)\n            -1\n        else\n            n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var currentNum = if (x > y) x else y\n        var nextNum = x % 2 == 0 &&\
    \ y % 2 != 0 ? x + 1 : x + 2\n        while (currentNum < nextNum) {\n       \
    \     currentNum = nextNum\n            nextNum = currentNum % 2 == 0 && y % 2\
    \ != 0 ? currentNum + 1 : currentNum + 2\n        }\n        if (currentNum >=\
    \ nextNum) currentNum\n        else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpusd97ov3.scala:14:59 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mnextNum\e[0m = x % \e[31m2\e\
    [0m == \e[31m0\e[0m && y % \e[31m2\e[0m != \e[31m0\e[0m ? x + \e[31m1\e[0m : \e\
    [35mx\e[0m \e[35m+\e[0m \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                           Not found: type +\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpusd97ov3.scala:14:47 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mnextNum\e[0m = x % \e[31m2\e\
    [0m == \e[31m0\e[0m && y % \e[31m2\e[0m != \e[31m0\e[0m ? x + \e[31m1\e[0m : \e\
    [35mx\e[0m \e[35m+\e[0m \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^\e[0m\n\e[31m   |\e[0m                        \
    \                  value ? is not a member of Int\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpusd97ov3.scala:17:86 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            nextNum = currentNum % \e[31m2\e[0m == \e[31m0\e[0m && y %\
    \ \e[31m2\e[0m != \e[31m0\e[0m ? currentNum + \e[31m1\e[0m : \e[35mcurrentNum\e\
    [0m \e[35m+\e[0m \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                       Not found: type\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpusd97ov3.scala:17:56\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            nextNum = currentNum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m && y % \e[31m2\e[0m != \e[31m0\e[0m ? currentNum\
    \ + \e[31m1\e[0m : \e[35mcurrentNum\e[0m \e[35m+\e[0m \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                                          value ? is not a member of\
    \ Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x < 0 || y < 0) return -1L\n        val evens = 0 until y\n        evens.filter(_\
    \ % 2 != 0).max(x) // filter out the even numbers\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkadx7sf.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m = \e[31m0\e[0m until y\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (y : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkadx7sf.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evens.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).max(x)\
    \ \e[34m// filter out the even numbers\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \          Found:    (x : Long)\n\e[31m   |\e[0m                             \
    \        Required: Ordering[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Your code here\n        val result: Array[Long] = for (i <- x to y) yield\
    \ {\n            val temp = x % 2 * y\n            val temp1 = temp.toInt\n  \
    \          val temp2 = temp1.toLong\n            \n            // Return -1 if\
    \ x or y is zero\n            if (temp2 == 0) {\n                -1\n        \
    \    } else if (temp2 == 1) {\n                temp2\n            } else {\n \
    \               temp2\n            }\n        }\n        val maxNum = result.max\n\
    \        if (maxNum == -1) {\n            maxNum\n        } else {\n         \
    \   maxNum + 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf3knyd89.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mArray\e[0m[\e[35mLong\e[0m] = \e[33mfor\e[0m (i <- x to y) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    IndexedSeq[Long]\n\e[31m\
    \   |\e[0m                                  Required: Array[Long]\n\e[31m15 |\e\
    [0m            \e[33mval\e[0m \e[36mtemp\e[0m = x % \e[31m2\e[0m * y\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mtemp1\e[0m = temp.toInt\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36mtemp2\e[0m = temp1.toLong\n\e[31m18 |\e[0m\
    \            \n\e[31m19 |\e[0m            \e[34m// Return -1 if x or y is zero\e\
    [0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (temp2 == \e[31m0\e[0m) {\n\e[31m21\
    \ |\e[0m                -\e[31m1\e[0m\n\e[31m22 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (temp2 == \e[31m1\e[0m) {\n\e[31m23 |\e[0m                temp2\n\
    \e[31m24 |\e[0m            } \e[33melse\e[0m {\n\e[31m25 |\e[0m              \
    \  temp2\n\e[31m26 |\e[0m            }\n\e[31m27 |\e[0m        }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < 0 || y < 0 || x > y || x < y || x % 2 == 0 || y % 2 == 0) {\n  \
    \          return -1\n        }\n        if (x < y) {\n            val l = x +\
    \ (y % x)\n            if (l % 2 == 0) {\n                return l\n         \
    \   } else {\n                return -1\n            }\n        } else {\n   \
    \         val l = x + (y % x)\n            if (l % 2 == 0) {\n               \
    \ return -1\n            } else {\n                return l\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpok8a2ph0.scala:33)\n\tat Problem.main(tmpok8a2ph0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val n = x - y\n        val m = x + (y * (-1l / 4l / 2l / 2l / 2l / 2l))\n\
    \        val evens = 0 until n\n        val odds = 1 until n\n        val even\
    \ = evens.find(_ % 2 == 0)\n        val odd = odds.find(_ % 2 == 1)\n        val\
    \ res = if (even != -1L && odd != -1L) odd else even\n        res\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_753xv19.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (n : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_753xv19.scala:16:27 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = \e[31m1\e[0m\
    \ until n\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_753xv19.scala:19:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mres\e[0m = \e[33mif\e[0m (even != -\e[31m1L\e[0m && odd\
    \ != -\e[31m1L\e[0m) odd \e[33melse\e[0m even\n\e[31m\e[31m   |\e[0m         \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   Values of types Option[Int]\
    \ and Long cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp_753xv19.scala:19:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mres\e[0m = \e[33mif\e[0m (even != -\e[31m1L\e[0m && odd\
    \ != -\e[31m1L\e[0m) odd \e[33melse\e[0m even\n\e[31m\e[31m   |\e[0m         \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   Values of types\
    \ Option[Int] and Long cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_753xv19.scala:20:8 ---------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (res : Option[Int])\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x >= y) {\n            return -1\n        }\n        var z = Math.max(x,\
    \ y)\n        while(x % 2 != 0 || y % 2 != 0) {\n            z = z * 2\n     \
    \       if(x >= y) {\n                z = z * 2\n            }\n            x\
    \ = x - z\n            y = y - z\n        }\n        return z\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8vgxpo86.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            x = x - z\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp8vgxpo86.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            y = y - z\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var minValue : Long = Long.MaxValue\n        var minIndex : Long = 0\n \
    \       for (i <- 0 to (y - x + 1)) {\n            if (i % (x - y + 1) != 0) {\n\
    \                minValue += i\n                minIndex += i - 1\n          \
    \  }\n        }\n        if (minValue == (x - y + 1)) {\n            minValue\
    \ - 1\n        } else {\n            minValue - x + 1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb7iaio_7.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to (y - x + \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:  \
    \  Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // x is the smallest even number that is in the range [x, y]\n        //\
    \ that is, it must be even\n        if(x % 2 == 0) return -1l\n        \n    \
    \    // y is the largest even number that is in the range [x, y]\n        // that\
    \ is, it must be even\n        if(y % 2 == 0) return -1l\n        \n        //\
    \ Find the smallest even number that is in [x, y] that is even\n        def m(x:\
    \ Long, y: Long) : Long = {\n            while(x < y) {\n                x +=\
    \ 1\n                if(x % 2 == 0) return x\n            }\n            return\
    \ -1l\n        }\n        \n        // Find the largest even number that is in\
    \ [x, y] that is even\n        def n(x: Long, y: Long) : Long = {\n          \
    \  while(x > y) {\n                x -= 1\n                if(x % 2 == 0) return\
    \ x\n            }\n            return -1l\n        }\n        \n        // Now\
    \ find the range [x, y] that contains all even numbers\n        // If there's\
    \ no such range, then the function should return -1\n        def r(x: Long, y:\
    \ Long) : Long = {\n            var m = m(x, y)\n            var n = n(x, y)\n\
    \            \n            // If there is no even number in the range [x, y],\
    \ then we\n            // should return -1\n            if(m == -1l || n == -1l)\
    \ return -1l\n            \n            while(n < m) {\n                m -= 1\n\
    \                n += 1\n                \n                if(m%2 == 0 && n%2\
    \ == 0) return m\n            }\n            \n            return -1l\n      \
    \  }\n        \n        // If we get here, there is no such range in the range\
    \ [x, y]\n        // so return -1\n        if(r(x, y) == -1l) return -1l\n   \
    \     \n        // If there is such a range, then return the largest even number\
    \ in\n        // the range [x, y]\n        (r(x, y) - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphds9n56k.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                x += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphds9n56k.scala:33:18 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m                x -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean x.!=?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphds9n56k.scala:42:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            \e[33mvar\e\
    [0m \e[36mm\e[0m = m(x, y)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e\
    [31m   |\e[0m                    Recursive \e[33mvariable\e[0m \e[35mm\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphds9n56k.scala:43:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mvar\e\
    [0m \e[36mn\e[0m = n(x, y)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e\
    [31m   |\e[0m                    Recursive \e[33mvariable\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var min = x\n        var max = y\n        var ans = -1\n        while (min\
    \ <= max) {\n            val mid = min + max / 2\n            if (mid % 2 == 0)\
    \ {\n                ans = mid\n                break\n            }\n       \
    \     ans = -1\n            if (mid < min) {\n                max = mid\n    \
    \        } else {\n                min = mid\n            }\n        }\n     \
    \   ans\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7aqayhz_.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                ans = mid\n\e\
    [31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (mid : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7aqayhz_.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max_even : Long = -1\n        val biggest_odd = x\n        val biggest_even\
    \ = x\n        for (i <- 0 until y) if (biggest_odd > i) biggest_odd = i\n   \
    \     for (i <- 0 until y) if (biggest_even > i) biggest_even = i\n        for\
    \ (i <- 0 until y) if (i % 2 == 0) if (biggest_even > i) biggest_even = i\n  \
    \      for (i <- 0 until y) if (i % 2 != 0) if (biggest_odd > i) biggest_odd =\
    \ i\n        if (biggest_even > biggest_odd) max_even = biggest_even\n       \
    \ else max_even = -1\n        max_even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1x2ncvd_.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until y) \e[33mif\e[0m (biggest_odd > i) biggest_odd = i\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (y : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1x2ncvd_.scala:16:62\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m until y) \e[33mif\e[0m (biggest_odd > i) biggest_odd =\
    \ i\n\e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Reassignment to val\
    \ biggest_odd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1x2ncvd_.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until y) \e[33mif\e[0m (biggest_even > i) biggest_even = i\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (y : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1x2ncvd_.scala:17:64\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m until y) \e[33mif\e[0m (biggest_even > i) biggest_even\
    \ = i\n\e[31m\e[31m   |\e[0m                                                 \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Reassignment to val biggest_even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1x2ncvd_.scala:18:26 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until y) \e[33mif\e\
    [0m (i % \e[31m2\e[0m == \e[31m0"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenInts = List(x, y, z) filter (_ % 2 == 0)\n        if (evenInts.isEmpty)\
    \ -1\n        else evenInts.max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwv4h1v1.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenInts\e[0m = List(x,\
    \ y, z) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \          Not found: z\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val result = x to y by 2\n        val evenInts = result.filter(_ % 2 ==\
    \ 0)\n        if (evenInts.isEmpty) -1 else evenInts.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3uoxyrv6.scala:20)\n\tat Problem.main(tmp3uoxyrv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def find(x : Long, y : Long, max: Long): Long = {\n            if (x ==\
    \ y)\n                max\n            else if (x % 2 == 0 && y % 2 == 0)\n  \
    \              max * x + y\n            else if (x % 2 == 0 && y % 2 != 0)\n \
    \               max * x + y - 1\n            else (x % 2 != 0 && y % 2 != 0)\n\
    \                max * x - y + 1\n        }\n\n        var max = (x * y) / 2\n\
    \n        var left = x\n        var right = y\n        while(left > 0 && right\
    \ > 0)\n        {\n            max = find(left, right, max)\n            left\
    \ = max(left - 2, 0)\n            right = max(right - 2, 0)\n        }\n\n   \
    \     if(max > x)\n            max = x\n        else if(max < y)\n           \
    \ max = y\n        else\n            max = -1\n        return max\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmprw91gg1r.scala:31:19 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            left = max(left - \e[31m2\e[0m, \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m      \
    \             \e[33mvariable\e[0m \e[35mmax\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmprw91gg1r.scala:32:20 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            right = max(right - \e[31m2\e[0m, \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m     \
    \               \e[33mvariable\e[0m \e[35mmax\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if ( x > y ) -1\n        else if ( y == 0 ) return -1\n        else if (\
    \ x == 0 ) return -1\n        else {\n            var evenNum = 0\n          \
    \  var oddNum = 1\n            var maxNum = x + y\n            while (evenNum\
    \ <= maxNum) {\n                if (maxNum % evenNum == 0) evenNum = evenNum +\
    \ evenNum\n                else oddNum = oddNum + evenNum\n                maxNum\
    \ = maxNum - 1\n            }\n            if ( evenNum > oddNum ) evenNum\n \
    \           else oddNum\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.chooseNum(tmp3uynad2j.scala:21)\n\
    \tat Problem$.main(tmp3uynad2j.scala:30)\n\tat Problem.main(tmp3uynad2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var small = x\n        var big = y\n        while (small > 0 && big > 0)\
    \ {\n            if (big % 2 == 0) {\n                big = big / 2\n        \
    \    }\n            else {\n                small = small / 2\n            }\n\
    \        }\n        if (big == 0)\n            -1\n        else\n            big\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp23lscxhz.scala:29)\n\tat Problem.main(tmp23lscxhz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if((x < (y / 2))) -1\n        else (x * 2) + (y / 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_s36g05y.scala:17)\n\tat Problem.main(tmp_s36g05y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1 else x max y filter (_ % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz5xdkp_i.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (x > y) -\e[31m1\e[0m \e[33melse\e\
    [0m x max y filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \             value filter is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = List[Long]()\n        for (a <- 1 to x by 2) {\n           \
    \ if (a % 2 == 0) {\n                evens.append(a)\n            }\n        }\n\
    \        for (a <- 1 to y by 2) {\n            if (a % 2 == 0) {\n           \
    \     evens.append(a)\n            }\n        }\n        val evenBiggerOne = evens.max\n\
    \        val evenBiggerTwo = evens.filter(_ >= x).max\n        if (evenBiggerOne\
    \ == evenBiggerTwo) {\n            return evenBiggerOne\n        }\n        if\
    \ (evenBiggerTwo < evenBiggerOne) {\n            return -1\n        }\n      \
    \  return evenBiggerTwo\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzomnqn2z.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m1\e[0m to x by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \       ^\e[0m\n\e[31m   |\e[0m                       Found:    (x : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzomnqn2z.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                evens.append(a)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[Long] - did you mean evens.appended?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzomnqn2z.scala:19:23 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m (a <- \e[31m1\e[0m to y by \e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (y : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzomnqn2z.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                evens.append(a)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append\
    \ is not a member of List[Long] - did you mean evens.appended?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var sum = 0\n        for( i <- x to y) {\n            if ( i % 2 == 0) {\n\
    \                sum += i\n            }\n        }\n        \n        if( sum\
    \ < x || sum > y ) {\n            return -1\n        } else {\n            return\
    \ sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0g74ed0m.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = for (i <- x until y if i % 2 == 0) yield i\n        val maxEven\
    \ = evens.max\n        if (maxEven > -1) {\n            return maxEven\n     \
    \   } else {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpjbchrixj.scala:14)\n\tat Problem$.main(tmpjbchrixj.scala:23)\n\
    \tat Problem.main(tmpjbchrixj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var xDivisor = x/2\n        var yDivisor = y/2\n        while(y > xDivisor)\
    \ {\n            if(yDivisor % 2 == 0) {\n                y -= 1\n           \
    \ } else {\n                x -= 1\n                xDivisor = x/2\n         \
    \       yDivisor = y/2\n            }\n        }\n        if(x == yDivisor) {\n\
    \            x\n        } else {\n            xDivisor\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnv6osy64.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                y -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean y.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnv6osy64.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                x -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evensBetween = (x to y) filter ((x % 2) != 0)\n        val biggestEvens\
    \ = evensBetween.max\n        if(biggestEvens == 0) {\n            -1\n      \
    \  }\n        else{\n            biggestEvens\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgad3q1z0.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensBetween\e\
    [0m = (x to y) filter ((x % \e[31m2\e[0m) != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Boolean\n\e[31m   |\e\
    [0m                                            Required: \e[1m\e[32mLong\e[0m\e\
    [1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // If the first number is greater than the second number,\n        // then\
    \ the result is -1\n        if (x > y) \n            return -1\n\n        // Otherwise,\
    \ we need to find an even larger number\n        // to choose from [x, y]\n  \
    \      val even = math.floor(x / 2)\n\n        // If the even number in the range\
    \ is even, we're done\n        if (even % 2 == 0)\n            return even\n\n\
    \        // Otherwise, keep searching for the odd number\n        val odd = math.floor(x\
    \ / 2)\n        if (odd % 2 == 1)\n            odd\n        else\n           \
    \ chooseNum(x + 1, y + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbqrs4jft.scala:24:19\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e[0m\
    \ even\n\e[31m\e[31m   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                Found:    (even : Double)\n\e[31m   |\e[0m                  \
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbqrs4jft.scala:29:12\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            odd\n\e[31m\e[31m\
    \   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Found:    (odd : Double)\n\
    \e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (y > x) \n            throw new IllegalArgumentException(\"Input out\
    \ of range\")\n        val even = y / 2\n        if (even * 2 == y) \n       \
    \     even\n        else \n            even * 2 - y\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Input out of range\n\tat Problem$.chooseNum(tmprro3gvho.scala:14)\n\
    \tat Problem$.main(tmprro3gvho.scala:22)\n\tat Problem.main(tmprro3gvho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xMin = math.min(x, y)\n        val yMin = math.max(x, y)\n        val\
    \ result = -1l\n        val evens = collection.mutable.Queue[Long]()\n       \
    \ // Add all the even numbers into the even queue.\n        while(x <= xMin) {\n\
    \            evens += x\n            x += 1\n        }\n        // Add all the\
    \ odd numbers into the odd queue.\n        while(y <= yMin) {\n            evens\
    \ += y\n            y += 1\n        }\n        while(evens.hasNext) {\n      \
    \      val v = evens.next()\n            if((v & 1) == 1) {\n                if(result\
    \ < v) {\n                    result = v\n                }\n            }\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphn8l3y69.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            x += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphn8l3y69.scala:25:14\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            y += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean y.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphn8l3y69.scala:27:20 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mwhile\e[0m(evens.hasNext) {\n\e[31m\e[31m   |\e[0m     \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value hasNext is not a member\
    \ of scala.collection.mutable.Queue[Long]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphn8l3y69.scala:28:26 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            \e[33mval\e[0m \e[36mv\e[0m = evens.next()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next is not a member\
    \ of scala.collection.mutable.Queue[Long] - did you mean evens.head?\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmphn8l3y69.scala:31:27 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    result = v\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Write your code here\n        val m = (x-y) / 2\n        if(x > y) {\n\
    \            m*2\n        } else if (x < y) {\n            m - 2*x\n        }\
    \ else {\n            m - 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiod0nei0.scala:24)\n\tat Problem.main(tmpiod0nei0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xEven = x % 2 == 0\n        val yEven = y % 2 == 0\n        \n     \
    \   val xInts = for (i <- 0 to x-1) yield i if i % 2 == 0\n        val yInts =\
    \ for (i <- 0 to y-1) yield i if i % 2 == 0\n        \n        val xToEven = if\
    \ (xEven) xInts else xInts.filter(_ % 2 != 0)\n        val yToEven = if (yEven)\
    \ yInts else yInts.filter(_ % 2 != 0)\n        \n        val xToEvenEven = if\
    \ (xEven) xToEven else xToEven.filter(_ % 2 == 0)\n        val yToEvenEven = if\
    \ (yEven) yToEven else yToEven.filter(_ % 2 == 0)\n        \n        xToEvenEven.foldLeft(Long.MaxValue)\
    \ { \n            val accum = it.asInstanceOf[Long]\n            (accum > x ||\
    \ accum == x) ? accum : -1\n        } match {\n            case -1 => -1\n   \
    \         case n => n\n        }\n        \n        yToEvenEven.foldLeft(Long.MaxValue)\
    \ { \n            val accum = it.asInstanceOf[Long]\n            (accum > y ||\
    \ accum == y) ? accum : -1\n        } match {\n            case -1 => -1\n   \
    \         case n => n\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb6wa2muk.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mxInts\e[0m = \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m to x-\e[31m1\e[0m) \e[33myield\e[0m i \e[33mif\e[0m i %\
    \ \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \    end of statement expected but 'if' found\n\e[31m\e[31m-- Error: /tmp/tmpb6wa2muk.scala:17:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36myInts\e[0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m to y-\e\
    [31m1\e[0m) \e[33myield\e[0m i \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                ^^\e[0m\n\
    \e[31m   |\e[0m                                end of statement expected but 'if'\
    \ found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6wa2muk.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mxInts\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m to x-\e[31m1\e[0m) \e[33myield\e[0m i\
    \ \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^\e[0m\n\e[31m   |\e[0m                      \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6wa2muk.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36myInts\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m to y-\e[31m1\e[0m) \e[33myield\e[0m i\
    \ \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^\e[0m\n\e[31m   |\e[0m                      \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6wa2muk.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36maccum\e[0m = it.asIns"
  stdout: ''
  timestamp: 1659979285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var m = 1\n        var n = y\n        while (n > x && n >= m && m > 1) {\n\
    \            m = m + 1\n            n = n / 2\n        }\n        if (n == x)\
    \ {\n            return m\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl346c3wk.scala:25)\n\tat Problem.main(tmpl346c3wk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val list = List(x, y)\n        list.zipWithIndex.find { case (z, index)\
    \ =>\n            val zMod = z % 2\n            if (zMod != 0) return false\n\
    \            (index < 1) || (x != y) || (y < z)\n        }._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplkk6uto5.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (zMod\
    \ != \e[31m0\e[0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e[0m   \
    \                               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val nx = math.max(x, y)\n        val ny = math.min(x, y)\n        val evens\
    \ = mutable.Set.empty[Long]\n        for (ix <- 0 until nx; iy <- 0 until ny)\
    \ {\n            val even_x = math.max(ix, iy)\n            val even_y = math.min(ix,\
    \ iy)\n            if ((even_x % 2) == (even_y % 2)) {\n                evens\
    \ += even_x\n                evens += even_y\n            }\n        }\n     \
    \   val best = evens.max\n        if (best == -1) {\n            return -1\n \
    \       } else {\n            return best\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jgbbvbc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2jgbbvbc.scala:16:27 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (ix <- \e[31m0\e[0m until nx;\
    \ iy <- \e[31m0\e[0m until ny) {\n\e[31m\e[31m   |\e[0m                      \
    \     ^^\e[0m\n\e[31m   |\e[0m                           Found:    (nx : Long)\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2jgbbvbc.scala:16:45 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (ix <- \e[31m0\e[0m until nx;\
    \ iy <- \e[31m0\e[0m until ny) {\n\e[31m\e[31m   |\e[0m                      \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                Found:    (ny : Long)\n\e[31m   |\e[0m                      \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = for {i <- 1 to x toList if i % 2 != 0} yield i\n        val\
    \ odd = x toList filter (_ % 2 == 1)\n        val range = x toList filter (_ >\
    \ y)\n\n        if(evens.forall(range.isEmpty) || odd.forall(range.isEmpty))\n\
    \            -1L\n        else if(evens.forall(range.nonEmpty) && odd.forall(range.isEmpty))\n\
    \            evens.max\n        else odd.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmyij8ma9.scala:13:44 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mfor\e\
    [0m {i <- \e[31m1\e[0m to x toList \e[33mif\e[0m i % \e[31m2\e[0m != \e[31m0\e\
    [0m} \e[33myield\e[0m i\n\e[31m\e[31m   |\e[0m                               \
    \             ^^\e[0m\n\e[31m   |\e[0m                                       \
    \ expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmyij8ma9.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mfor\e\
    [0m {i <- \e[31m1\e[0m to x toList \e[33mif\e[0m i % \e[31m2\e[0m != \e[31m0\e\
    [0m} \e[33myield\e[0m i\n\e[31m\e[31m   |\e[0m                               \
    \    ^\e[0m\n\e[31m   |\e[0m                                   Found:    (x :\
    \ Long)\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyij8ma9.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = x toList filter\
    \ (_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value toList is not a member of Long - did you\
    \ mean x.toInt?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyij8ma9.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = x toList filter (_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \               Not found: filter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmyij8ma9.scala:15:22 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mrange\e[0m = x toList filter (_ > y)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ toList is not a member of Long - "
  stdout: ''
  timestamp: 1659979285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = (x.toLong, y.toLong)\n        var biggest = 0L\n        var\
    \ counter = 1L\n        while (counter < range._1) {\n            biggest = math.max(biggest,\
    \ counter)\n            counter += 1\n        }\n        biggest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0g9chev.scala:23)\n\tat Problem.main(tmpo0g9chev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Create a list of all the even numbers from x to y.\n        var list\
    \ = List(x until y)\n        // Remove the even numbers from list.\n        list\
    \ = list.filter(i => i % 2 == 0)\n        // If list is empty, return -1.\n  \
    \      if (list.isEmpty) {\n            return -1\n        }\n        // Else,\
    \ return the biggest even number in list.\n        else {\n            return\
    \ list.max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpossf7wly.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        list = list.filter(\e[36mi\e[0m => i % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of scala.collection.immutable.NumericRange.Exclusive[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpossf7wly.scala:23:19\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mreturn\e[0m\
    \ list.max\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       Found:    scala.collection.immutable.NumericRange.Exclusive[Long]\n\e\
    [31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   val evenNumbers = mutable.Set[Long]()\n      for (i <- x until y by 2)\n \
    \       if (i % 2 == 0) evenNumbers += i\n      if (evenNumbers.isEmpty) return\
    \ -1\n      evenNumbers.max // Or \"evenNumbers.head max\" or \"evenNumbers.max\"\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb8zvkhe8.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mevenNumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max_ev : Long = -1\n        val x_even = x % 2 == 0\n        val y_even\
    \ = y % 2 == 0\n        if (x_even && y_even) {\n            val result = x +\
    \ (y * (x - y) / 2)\n            if (result <= max_ev)\n                max_ev\
    \ = result\n        } else if (x_even && !y_even) {\n            val result =\
    \ x - (y * x + (y - x) / 2)\n            if (result <= max_ev)\n             \
    \   max_ev = result\n        } else if (y_even && !x_even) {\n            val\
    \ result = y - (x * y + (y - x) / 2)\n            if (result <= max_ev)\n    \
    \            max_ev = result\n        } else {\n            max_ev = -1\n    \
    \    }\n        max_ev\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvq5rzk6.scala:34)\n\tat Problem.main(tmpkvq5rzk6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max = 0\n        var low = x\n        var high = y\n        // We want\
    \ to find the biggest even number that is in [low, high]\n        // inclusive\n\
    \        while (low < high) {\n            // Get the mid-point\n            var\
    \ mid = (low + high) >>> 1\n            // Get the odd\n            var odd =\
    \ (mid & 1) == 0 // 1 if odd\n            // If odd, then update the biggest even\
    \ number to be the mid-point\n            // of low and high\n            if (odd)\
    \ {\n                max = mid\n                low = mid\n            } else\
    \ {\n                // Otherwise just update the high\n                high =\
    \ mid\n            }\n        }\n        if (max < x) max = -1\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6a72p1p.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = mid\n\e\
    [31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    (mid : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val rangeMin = math.min(x, y)\n        val rangeMax = math.max(x, y)\n \
    \       var evenNum = 0\n        var evenNum2 = rangeMin\n        var evenNum3\
    \ = rangeMax\n\n        for (i <- 0 to rangeMax) {\n            evenNum2 = evenNum2\
    \ + i\n            if (evenNum2 == rangeMax) {\n                evenNum2 = rangeMin\n\
    \            }\n            if (evenNum2 == rangeMin) {\n                break\n\
    \            }\n            if (evenNum2 == evenNum3) {\n                evenNum3\
    \ = rangeMax + 1\n                evenNum2 = rangeMin\n            }\n       \
    \     if (evenNum2 == evenNum) {\n                break\n            }\n     \
    \   }\n        if (evenNum2 == evenNum3) {\n            return -1l\n        }\n\
    \        evenNum3 = evenNum3 - 1\n        return evenNum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkxy26vh.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to rangeMax) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (rangeMax : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfkxy26vh.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkxy26vh.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven : Long = 0\n        var maxOdd : Long = 0\n        var x : Long\n\
    \        var y : Long\n        var xEven = 0\n        var yEven = 0\n        var\
    \ xOdd = 0\n        var yOdd = 0\n        // For each number between the min and\
    \ max inclusively\n        // Check whether the number evenly divided by 2 is\
    \ in the range\n        // [x, y] inclusive.\n        while (x < y) {\n      \
    \      x = x + 1\n            y = y - 1\n            xEven = (x % 2) == 0\n  \
    \          yEven = (y % 2) == 0\n            xOdd = (x % 2) == 1\n           \
    \ yOdd = (y % 2) == 1\n            if (xEven == yEven && xOdd == yOdd && (x !=\
    \ y || xEven || yEven)) maxEven = math.max(maxEven, x)\n            if (xEven\
    \ == yEven && xOdd == yOdd && !xEven && !yEven) maxEven = math.max(maxEven, y)\n\
    \            if (xEven == yEven && !xEven && yOdd == yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && !xEven && !yOdd) maxEven = math.max(maxEven,\
    \ y)\n            if (xEven == yEven && xOdd == yOdd && !xEven && yOdd) maxEven\
    \ = math.max(maxEven, y)\n            if (xEven == yEven && !xEven && !yOdd &&\
    \ yEven) maxEven = math.max(maxEven, x)\n            if (xEven == yEven && !xOdd\
    \ && yEven) maxEven = math.max(maxEven, y)\n            if (xEven == yEven &&\
    \ xOdd == yOdd && !xEven && !yEven) maxEven = math.max(maxEven, y)\n         \
    \   if (xEven == yEven && !xEven && yOdd == yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && !xEven && !yOdd && !xOdd) maxEven = math.max(maxEven,\
    \ y)\n            if (xEven == yEven && !xOdd && !yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && xOdd == yOdd && !xEven && !yEven) maxEven\
    \ = math.max(maxEven, y)\n            if (xEven == yEven && !xEven && yOdd ==\
    \ yEven) maxEven = math.max(maxEven, x)\n            if (xEven == yEven && !xEven\
    \ && !yOdd && yEven) maxEven\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyu235tp7.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E067] Syntax Error: /tmp/tmpyu235tp7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mx\e[0m : \e[35mLong\e[0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0mDeclaration of \e[33mvariable\e[0m \e[35mx\e[0m not allowed here:\
    \ only classes can have declared but undefined members\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E067] Syntax Error: /tmp/tmpyu235tp7.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m : \e[35mLong\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mDeclaration of \e[33mvariable\e\
    [0m \e[35my\e[0m not allowed here: only classes can have declared but undefined\
    \ members\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyu235tp7.scala:27:20\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            xEven = (x % \e[31m2\e\
    [0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Boolean\n\e[31m   |\e[0m   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyu235tp7.scala:28:20 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            yEven = (y % \e[31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \      Found:    Boolean\n\e[31m   |\e[0m                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyu235tp7.scala:29:19\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            xOdd = (x % \e[31m2\e\
    [0m) == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659979290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // We know that x and y are positive longs, so we can use them\n       \
    \ // to calculate the range of possible even number numbers\n        val maxX\
    \ = x - 1\n        val maxY = y - 1\n\n        val evenNum = maxX % 2 == 0\n\n\
    \        // Now, since we know that the range of possible numbers is [maxX, maxY],\n\
    \        // we can use that to calculate the range of possible even number numbers\n\
    \        val possibleEvenNumRange = maxX.toLong * maxY.toLong\n        // The\
    \ evenNumRange can be negative if the possible evenNumRange is negative\n    \
    \    // and we need to handle that case below\n\n        if(evenNum) {\n     \
    \       // If evenNum is true, the range of possible even number numbers is just\
    \ [maxX, maxY]\n            // and we can use that to calculate the biggest possible\
    \ even number number\n            val evenNumRange = maxX.toLong * maxY.toLong\n\
    \            if(evenNumRange > possibleEvenNumRange)\n                // In this\
    \ case, we are trying to find the biggest possible number between x and y\n  \
    \              // But in this case, the biggest even number number between x and\
    \ y is just x\n                // So, just return x\n                maxX\n  \
    \          else\n                // In this case, the biggest even number number\
    \ between x and y is just y\n                // So, return y\n               \
    \ maxY\n        } else {\n            // If evenNum is false, then we need to\
    \ calculate the\n            // biggest number between the x and the y numbers\
    \ that is even\n            val biggestEvenNum = maxX + maxY - 1\n           \
    \ // Now, we need to check the range of possible even number numbers again\n \
    \           val possibleEvenNumRange = maxX.toLong * maxY.toLong\n           \
    \ // Finally, if the biggest even number number between x and y is bigger than\
    \ \n            // the range of possible even number numbers, then this biggest\
    \ even number number \n            // is out of range. So, return -1\n       \
    \     if(biggestEvenNum > possibleEvenNumRange)\n                -1\n        \
    \    else\n                biggestEvenNum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5o9216q.scala:55)\n\tat Problem.main(tmp_5o9216q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = Vector.fill(y / 2)((y % 2)) \n        evens.foreach(x => x :=\
    \ x - 1)\n        evens.reverse.foldLeft(-1l) { (a, x) =>\n            val y =\
    \ ((x * (x+1)) / 2)\n            if (y > y) a else y\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk3y2r4h5.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m = Vector.fill(y / \e[31m2\e[0m)((y % \e[31m2\e[0m)) \n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3y2r4h5.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evens.foreach(\e\
    [36mx\e[0m => x := x - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                   value := is not a member\
    \ of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x >= y)\n            return x\n        if(x <= 0)\n            return\
    \ -1\n        var max = 0\n        while(x > 0) {\n            if(x % 2 == 0)\n\
    \                max += x\n            x /= 2\n        }\n        if(max > y)\n\
    \            return max\n        else\n            return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa0y5f66v.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                max += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa0y5f66v.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            x /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def isBiggerEven(x : Long, y : Long) : Boolean = x % 2 == 0 && y % 2 ==\
    \ 0 && x >= y\n        \n        // Add -1 to the right side of x and y if they're\
    \ both odd, \n        // or add the smallest even number between them if they\
    \ are not\n        val even = isBiggerEven(x, y) ? x + 1 : y\n        \n     \
    \   // If even == x or even == y, return even, otherwise, return even+1.\n   \
    \     even.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplwvvic9k.scala:17:48 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = isBiggerEven(x,\
    \ y) ? x + \e[31m1\e[0m : \e[35my\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                           Not found: type y\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplwvvic9k.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = isBiggerEven(x,\
    \ y) ? x + \e[31m1\e[0m : \e[35my\e[0m\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value ? is not\
    \ a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     require(x <= y)\n        var even = 0\n        var odd = 1\n        var\
    \ high = x\n        while(even < y && odd <= y){\n            while(high%2 ==\
    \ 0){\n                even += odd\n                odd += even\n            \
    \    high -= 1\n            }\n            while(high%2 != 0){\n             \
    \   even -= odd\n                odd -= even\n                high += 1\n    \
    \        }\n        }\n        if((high%2 == 0) && (even < y) && (odd < y)){\n\
    \            even = even * 2\n        }\n        if(even == y){\n            return\
    \ even\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugfptwxn.scala:38)\n\tat Problem.main(tmpugfptwxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x % 2 == 0 && y % 2 == 0)\n            x match {\n                case\
    \ x if x < y => x + chooseNum(x , y - 2)\n                case x if x == y =>\
    \ x\n                case x if x > y => x - chooseNum(x - 2, y)\n            \
    \    case _ => -1\n            }\n        else\n            -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzyyrem0.scala:24)\n\tat Problem.main(tmpkzyyrem0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var num : Long = 1\n        val evenNum = num / 2\n        val oddNum =\
    \ num % 2\n        while ((x < y) && (num < (y+1l))) {\n            if (num %\
    \ 2 == 0) {\n                num = evenNum + num\n            } else {\n     \
    \           num = oddNum + num\n            }\n        }\n        if (num < y)\
    \ { return -1l}\n        num\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = x % 2 == 0\n        val high = math.max(x, y)\n        val low\
    \ = math.min(x, y)\n        if(even)\n            high + 1\n        else\n   \
    \         math.max(low, high)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb9c_8z9.scala:22)\n\tat Problem.main(tmpjb9c_8z9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x >= y || (x <= y && x % 2 == 0)) {\n            val even = x % 2\n\
    \            val low = x\n            val high = y\n            val nums = List(low,\
    \ high).sorted.filter(i => i % 2 == even).reverse.takeWhile(i => i <= high)\n\
    \            val index = nums.indexWhere(i => i >= x && i <= y)\n            if\
    \ (index >= 0) {\n                return nums(index)\n            }\n        \
    \    else {\n                return -1\n            }\n        }\n        else\
    \ {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvy_06ni1.scala:31)\n\tat Problem.main(tmpvy_06ni1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven = -1l\n        var x = if (x >= 0) x else -x\n        var y\
    \ = if (y >= 0) y else -y\n        if (x < y) x = y\n        if (x < 1l) x = 1l\n\
    \        if (x > y-1) x = y-1\n        while (x <= y) {\n            if (x % 2\
    \ == 0)\n                maxEven = x\n            x += 2l\n        }\n       \
    \ if (maxEven == -1l)\n            maxEven = -1l\n        y -= 1l\n        while\
    \ (y >= 1) {\n            if (y % 2 == 0)\n                maxEven = y\n     \
    \       y -= 2l\n        }\n        if (maxEven == -1l)\n            maxEven =\
    \ -1l\n        maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgfztamxj.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = \e[33mif\e[0m (x\
    \ >= \e[31m0\e[0m) x \e[33melse\e[0m -x\n\e[31m\e[31m   |\e[0m               \
    \     ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvariable\e[0m\
    \ \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgfztamxj.scala:14:28 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = \e[33mif\e[0m (x >= \e[31m0\e[0m)\
    \ x \e[33melse\e[0m -x\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvariable\e[0m \e[35mx\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgfztamxj.scala:14:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mx\e[0m = \e[33mif\e[0m (x >= \e[31m0\e[0m) x \e[33melse\e[0m -x\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m     \
    \                               Recursive \e[33mvariable\e[0m \e[35mx\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgfztamxj.scala:15:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m\
    \ \e[36my\e[0m = \e[33mif\e[0m (y >= \e[31m0\e[0m) y \e[33melse\e[0m -y\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvariable\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpgfztamxj.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = \e[33mif\e[0m (y\
    \ >= \e[31m0\e[0m) y \e[33melse\e[0m -y\n\e[31m\e[31m   |\e[0m               \
    \             ^\e[0m\n\e[31m   |\e[0m                            Recursive \e\
    [33mvariable\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def findNum(ix : Long, iy : Long) = {\n            if (ix < iy) return findNum(ix\
    \ + 1, iy)\n            val num = if (ix % 2==0) ix else iy\n            if (num\
    \ == x) return num\n            findNum(ix, num-1)\n        }\n        findNum(x,\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E089] Syntax Error: /tmp/tmpq506cy7_.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (ix < iy) \e[33mreturn\e[0m\
    \ findNum(ix + \e[31m1\e[0m, iy)\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mmethod\e\
    [0m \e[35mfindNum\e[0m has a return statement; it needs a result type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E089] Syntax Error: /tmp/tmpq506cy7_.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (num == x) \e[33mreturn\e[0m\
    \ num\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           \e[33mmethod\e[0m \e[35mfindNum\e[0m has a return statement;\
    \ it needs a result type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E044] Cyclic Error:\
    \ /tmp/tmpq506cy7_.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            findNum(ix, num-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \       ^\e[0m\n\e[31m   |\e[0m            Overloaded or recursive \e[33mmethod\e\
    [0m \e[35mfindNum\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = x filter (_ % 2 == 0)\n        val odd = x filter (_ % 2 == 1)\n\
    \        if (even.isEmpty && odd.isEmpty)\n            -1\n        else {\n  \
    \          if (even.size < odd.size)\n                odd.max\n            else\n\
    \                even.max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7vpu5vg9.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = x filter (_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value filter is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7vpu5vg9.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = x filter (_ %\
    \ \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value filter is not a member of Long\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1659979295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x <= y && x > 0)\n            val nums = mutable.ListBuffer[Long]()\n\
    \            while(x != y){\n                nums += x\n                x += 1\n\
    \            }\n            nums.sorted.lastOption.getOrElse(-1)\n        else\n\
    \            -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfrgq7zw.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmfrgq7zw.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                x += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def even(x: Long) = {\n            if (x % 2 == 0) return x\n          \
    \  else return even(x-1)\n        }\n        val evenY = even(y)\n        if (x\
    \ % 2 == 0) return x\n        else if ((evenY <= y) && (y % 2 == 0)) return evenY\n\
    \        else if (evenY > y) return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E089] Syntax Error: /tmp/tmp6v8pm2e4.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e\
    [0m) \e[33mreturn\e[0m x\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              \e[33mmethod\e[0m \e[35meven\e[0m has a return\
    \ statement; it needs a result type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E089] Syntax Error:\
    \ /tmp/tmp6v8pm2e4.scala:15:17 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33melse\e[0m \e[33mreturn\e[0m even(x-\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \           \e[33mmethod\e[0m \e[35meven\e[0m has a return statement; it needs\
    \ a result type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6v8pm2e4.scala:19:24\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m ((evenY <= y) && (y % \e[31m2\e[0m == \e[31m0\e[0m)) \e[33mreturn\e\
    [0m evenY\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue <= is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6v8pm2e4.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (evenY > y) \e[33mreturn\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing,\
    \ but could be made"
  stdout: ''
  timestamp: 1659979296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            val max = x max y\n            if (max % 2 ==\
    \ 0) {\n                return max\n            } else {\n                return\
    \ -1\n            }\n        } else {\n            val max = y max x\n       \
    \     if (max % 2 == 0) {\n                return max\n            } else {\n\
    \                return -1\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wf65d_0.scala:30)\n\tat Problem.main(tmp8wf65d_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xi = x + 1\n        val yi = y + 1\n        if (yi > xi)\n         \
    \   return -1\n        val i = 2\n        var m = yi\n        while (m >= xi)\
    \ { i += 2; m -= xi}\n        if (m > xi) { i+=1; m = yi-2 }\n        (i*i)%(x*x)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpruh125o8.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mwhile\e[0m (m >= xi) { i += \e[31m2\e[0m;\
    \ m -= xi}\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                    value += is not a member of Int - did you mean i.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpruh125o8.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (m > xi) { i+=\e[31m1\e[0m; m =\
    \ yi-\e[31m2\e[0m }\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                    value += is not a member of Int - did you mean i.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if(x > y) -1 else (x until y contains _*)\n        .foldLeft(x to y by 1)((x,\
    \ y) =>\n          if(x % 2 == 0 && y % 2 == 0)\n            x.toLong * y.toLong\
    \ else -1)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt3v0czo5.scala:13:46 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mif\e[0m(x > y) -\e[31m1\e[0m \e[33melse\e\
    [0m (x until y contains _*)\n\e[31m\e[31m   |\e[0m                           \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpt3v0czo5.scala:13:44 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mif\e[0m(x > y) -\e[31m1\e[0m \e[33melse\e\
    [0m (x until y contains _*)\n\e[31m\e[31m   |\e[0m                           \
    \                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => x until y contains _$1 * \e[31mnull\e[0m.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) -1\n        else (x+y-2) /2 + 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5wkxhnd.scala:17)\n\tat Problem.main(tmpw5wkxhnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var minNum = x\n        var maxNum = y\n        \n        // Get all the\
    \ even numbers in the range\n        while (maxNum > minNum) {\n            if\
    \ (maxNum % 2 == 0) {\n                if (minNum != maxNum) {\n             \
    \       minNum = minNum + 1\n                } else {\n                    maxNum\
    \ = maxNum - 1\n                }\n            } else {\n                if (minNum\
    \ != maxNum) {\n                    minNum = minNum + 1\n                } else\
    \ {\n                    maxNum = maxNum - 1\n                }\n            }\n\
    \        }\n        \n        if (minNum == maxNum) {\n            return -1\n\
    \        } else {\n            return minNum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjm_6fx2.scala:40)\n\tat Problem.main(tmpvjm_6fx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var ans = -1\n        var even = true\n        var high = y // This is to\
    \ keep track of the highest number we've seen\n        while (x > 0) {\n     \
    \       if (even) { // We've already found an even number so check to see if we\
    \ need to change it\n                if (ans < high) {\n                    ans\
    \ = high\n                }\n                even = false\n                high\
    \ = high + (y / 2)\n            } else {\n                if (x > high) {\n  \
    \                  // we've found a number that is larger than what we already\
    \ know about\n                    high = x\n                } else if (x < high)\
    \ {\n                    // we've found a number that is smaller than what we\
    \ already know about\n                    high = high + (x / 2)\n            \
    \    }\n            }\n            x = x - 1\n        }\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphg6cwvag.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    ans = high\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (high : Long)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmphg6cwvag.scala:32:14 -----------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m            x = x - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y) return -1\n      if (x < 0) return -1\n      val max = x\n    \
    \  val min = y\n      var counter = 2\n      while(counter < max) {\n        val\
    \ m = min + (counter << 1)\n        if (m % 2 == 0) {\n          val n = m - 2\n\
    \          if (n < min) min = n\n          max = m\n        } else if (m > max)\
    \ max = m\n        counter += 1\n      }\n      return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphp7xzj2m.scala:22:27 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          \e[33mif\e[0m (n < min) min = n\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Reassignment to val min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmphp7xzj2m.scala:23:14 -----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m          max = m\n\e[31m\e[31m   |\e[0m          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmphp7xzj2m.scala:24:32 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (m > max) max\
    \ = m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Reassignment to val max\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979294
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max = x\n        var min = y\n        while((max - min) > 1) {\n   \
    \         if(max % 2 == 0) {\n                max /= 2\n            } else {\n\
    \                max *= 3\n            }\n        }\n        if(max < min) {\n\
    \            max = min\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqn5eakb.scala:28)\n\tat Problem.main(tmpkqn5eakb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < 0 || y < 0) {\n            return -1\n        }\n        if (x <\
    \ y) {\n            val lo = x / 2l\n            val hi = x % 2l\n           \
    \ val lo1 = hi / 2l\n            val hi1 = hi % 2l\n            val lo2 = lo /\
    \ 2l\n            val hi2 = lo % 2l\n            val lo3 = lo1 / 2l\n        \
    \    val hi3 = lo1 % 2l\n            val lo4 = lo2 / 2l\n            val hi4 =\
    \ lo2 % 2l\n            val lo5 = lo3 / 2l\n            val hi5 = lo3 % 2l\n \
    \           val lo6 = lo4 / 2l\n            val hi6 = lo4 % 2l\n            val\
    \ lo7 = lo5 / 2l\n            val hi7 = lo5 % 2l\n            val lo8 = lo6 /\
    \ 2l\n            val hi8 = lo6 % 2l\n            val lo9 = lo7 / 2l\n       \
    \     val hi9 = lo7 % 2l\n            val lo10 = lo8 / 2l\n            val hi10\
    \ = lo8 % 2l\n            val lo11 = lo9 / 2l\n            val hi11 = lo9 % 2l\n\
    \            val lo12 = lo10 / 2l\n            val hi12 = lo10 % 2l\n        \
    \    val lo13 = lo11 / 2l\n            val hi13 = lo11 % 2l\n            val lo14\
    \ = lo12 / 2l\n            val hi14 = lo12 % 2l\n            val lo15 = lo13 /\
    \ 2l\n            val hi15 = lo13 % 2l\n            val lo16 = lo14 / 2l\n   \
    \         val hi16 = lo14 % 2l\n            val lo17 = lo15 / 2l\n           \
    \ val hi17 = lo15 % 2l\n            val lo18 = lo16 / 2l\n            val hi18\
    \ = lo16 % 2l\n            val lo19 = lo17 / 2l\n            val hi19 = lo17 %\
    \ 2l\n            val lo20 = lo18 / 2l\n            val hi20 = lo18 % 2l\n   \
    \         val lo21 = lo19 / 2l\n            val hi21 = lo19 % 2l\n           \
    \ val lo22 = lo20 / 2l\n            val hi22 = lo20 % 2l\n            val lo23\
    \ = lo21 / 2l\n            val hi23 = lo21 % 2l\n            val lo24\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbssl0mjb.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbssl0mjb.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbssl0mjb.scala:78:1 ---------------------\e[0m\e[0m\n\
    \e[31m78 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpbssl0mjb.scala:67:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659979298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var ans = -1l\n        for (a <- 0 to y-1) if (x%2 == 0 && (a%2 != 0 ||\
    \ x <= a)) ans = a\n        ans\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7e6th21.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (a <-\
    \ \e[31m0\e[0m to y-\e[31m1\e[0m) \e[33mif\e[0m (x%\e[31m2\e[0m == \e[31m0\e[0m\
    \ && (a%\e[31m2\e[0m != \e[31m0\e[0m || x <= a)) ans = a\n\e[31m\e[31m   |\e[0m\
    \                       ^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // The variable 'biggest' will store the biggest even number in [x, y]\n\
    \        var biggest = -1L\n        // The variable 'current' will store the current\
    \ even number in [x, y]\n        var current = x\n        while (current < y)\
    \ {\n            // The variable 'even' will store if the current even number\
    \ is in range\n            var even = false\n            if (current % 2 == 0)\
    \ {\n                // This while loop will run until the current even number\
    \ in range\n                while (current < y) {\n                    // After\
    \ each iteration, the current number will increase\n                    // by\
    \ two. If the current number divided by 2 is not even,\n                    //\
    \ then the current number will stay the same.\n                    current +=\
    \ 2\n                    even = current % 2 == 0\n                }\n        \
    \        // This statement will update the biggest even number in range \n   \
    \             // if the current even number in range is bigger than the current\
    \ biggest \n                // even number in range\n                if (biggest\
    \ < current - 1) {\n                    biggest = current - 1\n              \
    \  }\n            }\n            else {\n                // This while loop will\
    \ run until the current even number in range\n                while (current <\
    \ y) {\n                    current += 2\n                    even = current %\
    \ 2 == 0\n                }\n                // This statement will update the\
    \ biggest even number in range \n                // if the current even number\
    \ in range is bigger than the current biggest \n                // even number\
    \ in range\n                if (biggest < current - 1) {\n                   \
    \ biggest = current - 1\n                }\n            }\n        }\n       \
    \ // This function returns the biggest even number in [x, y]\n        // if the\
    \ biggest even number in [x, y] is -1, then return -1\n        if (biggest ==\
    \ -1L) {\n            return -1L\n        }\n        else {\n            return\
    \ biggest\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41w_nd06.scala:60)\n\tat Problem.main(tmp41w_nd06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x : Long = 0\n        var y : Long = 0\n        var maxEven : Long =\
    \ -1\n        val evenList = mutable.ListBuffer[Long]()\n        while ( x < y\
    \ ) {\n            if ( (x%2) == 0 ) {\n                x += 1\n             \
    \   maxEven = x // Even numbers have even sum\n            }\n            if (\
    \ maxEven == -1 && x%2 != 0 ) {\n                y -= 1\n                maxEven\
    \ = y // Even numbers have even sum\n            }\n            if ( maxEven ==\
    \ -1 && x%2 == 0 ) {\n                x += 1\n                maxEven = x // Even\
    \ numbers have even sum\n            }\n            evenList.append(x)\n     \
    \   }\n        evenList.lastOption.getOrElse(-1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjbosubf.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            val min = math.min(x, y)\n            val max\
    \ = math.max(x, y)\n            val even_numbers = mutable.ListBuffer[Long]()\n\
    \            val not_even_numbers = mutable.ListBuffer[Long]()\n            while\
    \ (min <= max) {\n                if (min % 2 == 0) {\n                    even_numbers\
    \ += min\n                } else {\n                    not_even_numbers += min\n\
    \                }\n                min += 1\n            }\n            if (even_numbers.isEmpty)\
    \ -1\n            else even_numbers.max - 1\n        } else {\n            val\
    \ min = math.min(y, x)\n            val max = math.max(y, x)\n            val\
    \ even_numbers = mutable.ListBuffer[Long]()\n            val not_even_numbers\
    \ = mutable.ListBuffer[Long]()\n            while (min <= max) {\n           \
    \     if (min % 2 == 0) {\n                    even_numbers += min\n         \
    \       } else {\n                    not_even_numbers += min\n              \
    \  }\n                min += 1\n            }\n            if (even_numbers.isEmpty)\
    \ -1\n            else even_numbers.max - 1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovag6nj2.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven_numbers\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovag6nj2.scala:17:35\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnot_even_numbers\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpovag6nj2.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                min += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Long - did you mean min.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpovag6nj2.scala:31:31 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m            \e[33mval\e[0m \e[36meven_numbers\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovag6nj2.scala:32:35 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mnot_even_numbers\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpovag6nj2.scala:39:20 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = x toList filter (_ %2 == 0)\n        val odd = x toList filter\
    \ (_ %2 == 1)\n        if(evens.nonEmpty && odd.nonEmpty) {\n            if(evens.max\
    \ < odd.max)\n                -1\n            else if(odd.max < evens.max)\n \
    \               evens.max\n            else\n                -1\n        }\n \
    \       else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0v3owdu.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = x toList filter\
    \ (_ %\e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList is not a member of Long\
    \ - did you mean x.toInt?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0v3owdu.scala:13:29\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = x toList filter (_ %\e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   Not found: filter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc0v3owdu.scala:14:20 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = x toList filter (_\
    \ %\e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value toList is not a member of Long - did you\
    \ mean x.toInt?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0v3owdu.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = x toList filter (_ %\e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \               Not found: filter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var evenNum = 0\n        val startNum = x\n        val endNum = y\n\n  \
    \      for(i <- 0 until endNum) {\n            if(startNum % 2 == 0) {\n     \
    \           evenNum = startNum\n                startNum = startNum + 1\n    \
    \        }\n            else {\n                startNum = startNum + 1\n    \
    \        }\n        }\n\n        if(evenNum == 0) {\n            return -1\n \
    \       }\n        return evenNum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zgdez_v.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until endNum) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (endNum : Long)\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3zgdez_v.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                evenNum = startNum\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (startNum : Long)\n\e[31m   |\e[0m                        \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3zgdez_v.scala:20:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                startNum\
    \ = startNum + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val startNum\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp3zgdez_v.scala:23:25 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                startNum = startNum + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val startNum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def checkIfNumber(num : Long) : Boolean = {\n            if (num > 0 &&\
    \ num < 10) {\n                return true\n            }\n            else {\n\
    \                return false\n            }\n        }\n        \n        val\
    \ checkX : Boolean = checkIfNumber(x)\n        val checkY : Boolean = checkIfNumber(y)\n\
    \        if (checkX != checkY) {\n            val numx = Math.abs(x).toInt\n \
    \           val numy = Math.abs(y).toInt\n            if (numx < numy) {\n   \
    \             val x = numx\n                val y = numy\n            }\n    \
    \        else {\n                val x = numy\n                val y = numx\n\
    \            }\n        }\n        var currentResult = -1;\n        var currentNumber\
    \ = x;\n        var start = false;\n        if (checkX == true) {\n          \
    \  while (currentNumber <= y) {\n                if (currentNumber % 2 == 0) {\n\
    \                    currentResult = currentNumber;\n                    start\
    \ = true;\n                }\n                currentNumber += 1;\n          \
    \  }\n        }\n        if (checkY == true) {\n            while (currentNumber\
    \ >= y) {\n                if (currentNumber % 2 == 0) {\n                   \
    \ currentResult = currentNumber;\n                    start = true;\n        \
    \        }\n                currentNumber -= 1;\n            }\n        }\n  \
    \      if (start == false) {\n            currentResult = -1;\n        }\n   \
    \     return currentResult;\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyl66mo6g.scala:42:36\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m                    currentResult\
    \ = currentNumber;\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (currentNumber\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyl66mo6g.scala:51:36\
    \ --------------------\e[0m\e[0m\n\e[31m51 |\e[0m                    currentResult\
    \ = currentNumber;\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (currentNumber\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x > y) \n            chooseNum(y, x)\n        else \n            x %\
    \ 2 == 0 ? x : -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpkumt_7.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            x % \e[31m2\e[0m == \e[31m0\e[0m ? x : -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m\
    \                     value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def loop(x1 : Long, y1 : Long) : Long = {\n            if (y1 > y) return\
    \ y1\n            if (x1 >= x) return x1\n            if (y1 % 2 == 0) return\
    \ loop(x1 +2, y1 + 1)\n            loop(x1 + 1, y1 + 2)\n        }\n        loop(x,\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp462b83k6.scala:22)\n\tat Problem.main(tmp462b83k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val r = x to y\n        var ans = 1\n        for (i<-r; i+=2) {\n      \
    \      if (i*i > ans) ans = i*i\n        }\n        if (ans == 0) -1\n       \
    \ else ans\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppybhwbbx.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-r; i+=\e[31m2\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           '<-' expected, but ')' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = x to y by 2\n        val even = range.filter(x => x % 2 == 0l).last\n\
    \        if (even != -1l) even else -1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty.tail\n\tat scala.collection.immutable.Vector.last(Vector.scala:283)\n\
    \tat Problem$.chooseNum(tmpntjc1_xh.scala:14)\n\tat Problem$.main(tmpntjc1_xh.scala:19)\n\
    \tat Problem.main(tmpntjc1_xh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val numbers = Range(x, y).map(i => i.toLong % 2 == 0).toList\n        if(numbers.isEmpty)\
    \ {\n            return -1l\n        } else {\n            val highest = numbers.max\n\
    \            val indexOfHighest = numbers.indexOf(highest)\n            if(indexOfHighest\
    \ > 0) {\n                numbers.drop(indexOfHighest)\n            } else {\n\
    \                -1l\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7geofcn.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e\
    [0m = Range(x, y).map(\e[36mi\e[0m => i.toLong % \e[31m2\e[0m == \e[31m0\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (x : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_7geofcn.scala:13:31 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = Range(x, y).map(\e[36mi\e\
    [0m => i.toLong % \e[31m2\e[0m == \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (y : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7geofcn.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                numbers.drop(indexOfHighest)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Found:    List[Boolean]\n\e[31m   |\e[0m           \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val rangeList = List(x, y, x+10, y+10, x+100, y+100) //create a list \n\
    \                                                                   // of numbers\
    \ \n                                                                   // in the\
    \ range [x, y]\n        val evenNumbers = rangeList.filter(x => x % 2 == 0) //filter\
    \ only \n                                                                // even\
    \ numbers\n        var maxEven = -1L  //set the initial max even number\n    \
    \    for (i <- evenNumbers) //go through all the even numbers in the range\n \
    \       {\n            if (maxEven == -1L || x >= i && x <= i+100) //if there's\
    \ a bigger even number\n            {\n                maxEven = i //set the max\
    \ even number to the current even number\n            }\n        }\n        return\
    \ maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe23rre6j.scala:29)\n\tat Problem.main(tmpe23rre6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z: Long = x / y\n        if(z * y != x) \n            chooseNum(z, y)\n\
    \        else {\n            val z2: Long = y / x\n            if(z2 * x != y)\
    \ \n                chooseNum(z2, x)\n            else {\n                val\
    \ z3: Long = (z * z) + z2\n                if(z3 % 2 == 0) {\n               \
    \     z3\n                } else \n                    -1\n            }\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.chooseNum(tmp8599xb93.scala:17)\n\
    \tat Problem$.main(tmp8599xb93.scala:30)\n\tat Problem.main(tmp8599xb93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val m = x to y by 2\n        val x = m(0)\n        val y = m(2)\n      \
    \  val n = x + y\n        if (n >= 0) n\n        else if (n < 0) -1\n        else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk6zk7dh8.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = m(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = math.ceil(y / 2)\n        val min = math.floor(x / 2)\n     \
    \   if (x < even) min\n        else if (x > even) even\n        else min\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9fp9f41.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (x < even)\
    \ min\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Found:    (min : Double)\n\e[31m   |\e[0m               \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9fp9f41.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (x > even) even\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (even : Double)\n\e[31m  \
    \ |\e[0m                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpp9fp9f41.scala:17:13 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m min\n\e[31m\e[31m   |\e[0m  \
    \           ^^^\e[0m\n\e[31m   |\e[0m             Found:    (min : Double)\n\e\
    [31m   |\e[0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x = x\n        var y = y\n        var z = x - y\n        \n        while\
    \ (z >= 0)\n        {\n            if ((z & 1) == 0)\n            {\n        \
    \        return z\n            }\n            z = z / 2\n        }\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1cnx5lhm.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp1cnx5lhm.scala:14:16 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = y\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y || x <= 0) -1\n        else scala.math.ceil(x / 2) * (if (y %\
    \ 2 == 0) x % 2 else x - 1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpicl0rl16.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m scala.math.ceil(x\
    \ / \e[31m2\e[0m) * (\e[33mif\e[0m (y % \e[31m2\e[0m == \e[31m0\e[0m) x % \e[31m2\e\
    [0m \e[33melse\e[0m x - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            val diff = y - x\n            if (diff % 2 ==\
    \ 0) {\n                val even = diff / 2\n                if (even >= x &&\
    \ even <= y) even\n                else -1L\n            } else {\n          \
    \      -1L\n            }\n        } else if (x == y) {\n            x\n     \
    \   } else if (x > y) {\n            val diff = x - y\n            if (diff %\
    \ 2 == 0) {\n                val even = diff / 2\n                if (even >=\
    \ x && even <= y) even\n                else -1L\n            } else {\n     \
    \           -1L\n            }\n        } else {\n            -1L\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7myo_9aj.scala:38)\n\tat Problem.main(tmp7myo_9aj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val low = math.min(x,y)\n        val high = math.max(x, y)\n        var\
    \ ans = 0L\n        for (num <- low to high) {\n            if (num % 2 == 0)\
    \ {\n                if (ans < num) ans = num\n            }\n        }\n    \
    \    if (ans == -1l) -1\n        else ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdaafwzd.scala:26)\n\tat Problem.main(tmpkdaafwzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xRange = Range(x, y)\n        val maxEvenNum = -1\n        xRange.foreach(x\
    \ => {\n            val isEven = x % 2 == 0\n            if(isEven) {\n      \
    \          val curNum = x + (isEven << 1)\n                if(maxEvenNum < curNum)\
    \ {\n                    maxEvenNum = curNum\n                }\n            }\n\
    \        })\n        maxEvenNum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8bk8i7_.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mxRange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (x : Long)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpt8bk8i7_.scala:13:30 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mxRange\e[0m = Range(x, y)\n\e\
    [31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m     \
    \                         Found:    (y : Long)\n\e[31m   |\e[0m              \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt8bk8i7_.scala:18:41 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                \e[33mval\e[0m \e[36mcurNum\e[0m = x + (isEven << \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value << is not a member of Boolean\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpt8bk8i7_.scala:20:31 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    maxEvenNum = curNum\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \              Reassignment to val maxEvenNum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenList = List(1, 2, 4, 5, 7, 10, 12, 14, 16, 20, 24, 28, 32)\n   \
    \     val oddList = List(4, 8, 12)\n        var evenMax : Long = IntStream.range(1,\
    \ y, 2).sum\n        var oddMax : Long = IntStream.range(x, 2, 2).sum\n      \
    \  \n        if(evenMax > oddMax) {\n            evenMax = -1\n        }\n   \
    \     \n        if(evenMax == -1) {\n            return -1\n        }\n      \
    \  \n        for(i <- 1 to evenList.size) {\n            evenMax = evenMax * evenList(i)\
    \ + evenList(i) * evenMax\n        }\n        \n        for(i <- 1 to oddList.size)\
    \ {\n            oddMax = oddMax * oddList(i) + oddList(i) * oddMax\n        }\n\
    \        \n        if(evenMax == oddMax) {\n            return evenMax\n     \
    \   } else {\n            return -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpciukhkq1.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mevenMax\e[0m : \e[35mLong\e\
    [0m = IntStream.range(\e[31m1\e[0m, y, \e[31m2\e[0m).sum\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: IntStream\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpciukhkq1.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mvar\e[0m \e[36moddMax\e[0m : \e[35mLong\e[0m = IntStream.range(x,\
    \ \e[31m2\e[0m, \e[31m2\e[0m).sum\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ IntStream\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var xEven = x % 2 == 0\n        var yEven = y % 2 == 0\n        if (x !=\
    \ x || y != y) return(-1)\n        var m = (x - y) / 2\n        var xEvenMore\
    \ = m % 2 == 0\n        var yEvenMore = y % 2 == 0\n        var mMore = m % 2\
    \ == 0\n        var mEvenMore = m%2 == 0\n        if (yEvenMore) {\n         \
    \   if (xEvenMore) {\n                if (mEvenMore) {\n                    if\
    \ (mMore == 0) {\n                        xEven = x % 2 == 0\n               \
    \     }\n                    if (xEven) {\n                        yEven = y %\
    \ 2 == 0\n                        m = (x - y) / 2\n                    }\n   \
    \                 if (yEven) {\n                        mMore = m % 2 == 0\n \
    \                   }\n                }\n            } else {\n             \
    \   if (mEvenMore) {\n                    if (mMore == 0) {\n                \
    \        xEven = x % 2 == 0\n                    }\n                    if (xEven)\
    \ {\n                        yEven = y % 2 == 0\n                        m = (x\
    \ - y) / 2\n                    }\n                    if (yEven) {\n        \
    \                mMore = m % 2 == 0\n                    }\n                }\n\
    \            }\n        }\n        if (yEven) {\n            if (xEven) {\n  \
    \              if (mEvenMore) {\n                    if (mMore == 0) {\n     \
    \                   xEven = x % 2 == 0\n                    }\n              \
    \      if (xEven) {\n                        yEven = y % 2 == 0\n            \
    \            m = (x - y) / 2\n                    }\n                    if (yEven)\
    \ {\n                        mMore = m % 2 == 0\n                    }\n     \
    \           }\n            } else {\n                if (mEvenMore) {\n      \
    \              if (mMore == 0) {\n                        xEven = x % 2 == 0\n\
    \                    }\n                    if (xEven) {\n                   \
    \     yEven = y % 2 == 0\n                        m = (x - y) / 2\n          \
    \          }\n                    if (yEven) {\n                        mMore\
    \ = m % 2 == 0\n                    }\n                }\n            }\n    \
    \    }\n        if (yEven) {\n            if (xEven) {\n                if (mEvenMore)\
    \ {\n                    if (mMore == 0) {\n                        xEven = x\
    \ % 2 == 0\n                    }\n                    if (xEven) {\n        \
    \                yEven = y % 2 == 0\n                        m = (x - y) / 2\n\
    \                    }\n                    if (yEven) {\n                   \
    \     mMore = m % 2 == 0\n                    }\n                }\n         \
    \   } else {\n                if (mEvenMore) {\n                    if (mMore\
    \ == 0) {\n                        xEven = x % 2 == 0\n                    }\n\
    \                    if (xEven) {\n                        yEven = y % 2 == 0\n\
    \                        m = (x - y) / 2\n                    }\n            \
    \        if (yEven) {\n                        mMore = m % 2 == 0\n          \
    \          }\n                }\n            }\n        }\n        if (yEven)\
    \ {\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2e6sfrxv.scala:122:0 ---------------------------\e\
    [0m\e[0m\n\e[31m122 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:24:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:37:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:53:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m53 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:66:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m66 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:82:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m82 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2e6sfrxv.scala:95:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m95 |\e[0m       \
    \             \e[33mif\e[0m (mMore == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x: Long = x\n        var y: Long = y\n        var z: Long = z\n    \
    \    var flag: Boolean = flag\n        var bigger: Long = bigger\n        var\
    \ i: Int = 0\n        var j: Int = 0\n        while ((z != 0) && (i != 0)) {\n\
    \            if (((i * x) % y) != 0) {\n                flag = false\n       \
    \         bigger = z\n                z = z - ((i * x) % y)\n            } else\
    \ {\n                flag = true\n                z = z - ((i * x) % y)\n    \
    \        }\n            i = i + 1\n        }\n        \n        if ((z == 0) &&\
    \ (i == 0)) {\n            if (flag == true) {\n                return -1\n  \
    \          }\n            else {\n                return z\n            }\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuxvhhf2n.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m ((z ==\
    \ \e[31m0\e[0m) && (i == \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m33 |\e[0m            \e[33mif\e[0m (flag == \e[31mtrue\e[0m) {\n\e[31m34\
    \ |\e[0m                \e[33mreturn\e[0m -\e[31m1\e[0m\n\e[31m35 |\e[0m     \
    \       }\n\e[31m36 |\e[0m            \e[33melse\e[0m {\n\e[31m37 |\e[0m     \
    \           \e[33mreturn\e[0m z\n\e[31m38 |\e[0m            }\n\e[31m39 |\e[0m\
    \        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y || x == y){\n            return -1\n        }\n        var even\
    \ = 1\n        var odd = 2\n        var evenMax = 0\n        var oddMax = 0\n\
    \        while (even <= y){\n            evenMax = even\n            while (evenMax\
    \ < x){\n                evenMax += even\n                if (evenMax > y){\n\
    \                    break\n                }\n            }\n            if (evenMax\
    \ < x){\n                break\n            }\n            odd += 1\n        \
    \    while (odd <= y){\n                oddMax = odd\n                while (oddMax\
    \ < x){\n                    oddMax += odd\n                    if (oddMax > y){\n\
    \                        break\n                    }\n                }\n   \
    \             if (oddMax < x){\n                    break\n                }\n\
    \                odd += 1\n            }\n            if (even == evenMax && odd\
    \ == oddMax){\n                return evenMax\n            }\n            if (even\
    \ > evenMax && odd > oddMax){\n                return -1\n            }\n    \
    \    }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kibweeh.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kibweeh.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kibweeh.scala:37:24\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5kibweeh.scala:41:20 ------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val nums = mutable.ListBuffer(x, y)\n        while(nums.head < nums.last)\
    \ {\n            nums +=: (nums.head * 2l).toInt\n        }\n        if(nums.last\
    \ < nums.head) {\n            return -1l\n        } else {\n            nums.last\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpop9n4f1y.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(x,\
    \ y)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val max = Math.max(x, y)\n        val min = Math.min(x, y)\n        if (max\
    \ == min) {\n            return -1\n        } else if (max % 2 == 0) {\n     \
    \       max / 2\n        } else {\n            max * 3 + 1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2iqacrvf.scala:24)\n\tat Problem.main(tmp2iqacrvf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xEven = x % 2 == 0\n        val yEven = y % 2 == 0\n        val bothEven\
    \ = xEven && yEven\n        if(xEven && yEven)\n            x\n        else if\
    \ (!xEven && !yEven)\n            -1\n        else if (!xEven)\n            chooseNum(y\
    \ - 1, y)\n        else if (!yEven)\n            chooseNum(x, y - 1)\n       \
    \ else if (!bothEven)\n            -1\n        else\n            chooseNum(x -\
    \ 1, y) - 1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqx7zj8h.scala:30)\n\tat Problem.main(tmpzqx7zj8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result = -1\n        var max = 0\n        while(y >= x) {\n        \
    \    if (y%2 == 0 && y>max) {\n                result = y\n                max\
    \ = y\n            }\n            y -= 1\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e9647g5.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                result = y\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (y : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e9647g5.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                max = y\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (y : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4e9647g5.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            y -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean y.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x = x\n        var y = y\n        while (true) {\n            if (x\
    \ >= y) {\n                return x\n            }\n            if (x < y) {\n\
    \                x += 1\n            } else {\n                y -= 1\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwjxns7mp.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpwjxns7mp.scala:14:16 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = y\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwjxns7mp.scala:15:8 ---------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mwhile\e[0m (\e[31mtrue\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m16 |\e[0m            \e[33mif\e[0m (x >= y) {\n\e[31m17 |\e[0m \
    \               \e[33mreturn\e[0m x\n\e[31m18 |\e[0m            }\n\e[31m19 |\e\
    [0m            \e[33mif\e[0m (x < y) {\n\e[31m20 |\e[0m                x += \e\
    [31m1\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m {\n\e[31m22 |\e[0m  \
    \              y -= \e[31m1\e[0m\n\e[31m23 |\e[0m            }\n\e[31m24 |\e[0m\
    \        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val a = (x - y).asInstanceOf[Int]\n        if (a==0) return x\n        if\
    \ (a==1) return y\n        if (a==2) return x+y\n        a%2 match {\n       \
    \     case true => x+y\n            case false => chooseNum(x+y, y)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq091rbsu.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31mtrue\e[0m => x+y\n\e\
    [31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpq091rbsu.scala:19:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31mfalse\e[0m => chooseNum(x+y,\
    \ y)\n\e[31m\e[31m   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Values of types Boolean and Int cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var biggerNum = 0\n        var smallerNum = x\n        while(smallerNum\
    \ <= y && biggerNum < y){\n            if(x % smallerNum == 0){\n            \
    \    biggerNum += 1\n            }\n            smallerNum += 1\n        }\n \
    \       if(biggerNum == y){\n            -1\n        }\n        else {\n     \
    \       biggerNum\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzjwn_58.scala:29)\n\tat Problem.main(tmpdzjwn_58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val result = ((x / y) >>> 0) * y\n        result + (if (y > x) (x % y) else\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1h51qes.scala:17)\n\tat Problem.main(tmpy1h51qes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var evenEvenMax = x\n        while (evenEvenMax % 2 == 0) {\n          \
    \  evenEvenMax /= 2\n        }\n        var evenMax = y\n        while (evenMax\
    \ % 2 == 0) {\n            evenMax /= 2\n        }\n        if (evenEvenMax <\
    \ evenMax) {\n            return -1\n        }\n        if (evenEvenMax == evenMax)\
    \ {\n            evenEvenMax\n        }\n        evenEvenMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12vt8xeu.scala:30)\n\tat Problem.main(tmp12vt8xeu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) return -1\n        if (x > y) return 1\n\n        // First try\
    \ the even numbers in range(x, y)\n        // If there is no even number in range,\
    \ then try the odd numbers in range(x, y)\n        // If there is no odd number\
    \ in range, then there is no such number.\n        val evenList = x until y filter\
    \ { x => (x % 2 == 0) }\n        val oddList = x until y filter { x => (x % 2\
    \ != 0) }\n\n        val biggestEven = evenList max evenList reduceLeftOption(_\
    \ + _)\n        val biggestOdd = oddList max oddList reduceLeftOption(_ + _)\n\
    \        if (biggestEven != biggestOdd) biggestEven.get\n        else -1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej3ww83c.scala:22:39\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbiggestEven\e\
    [0m = evenList max evenList reduceLeftOption(_ + _)\n\e[31m\e[31m   |\e[0m   \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       Found:    (evenList : IndexedSeq[Long])\n\e[31m   |\e\
    [0m                                 Required: Ordering[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej3ww83c.scala:23:37 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbiggestOdd\e[0m = oddList\
    \ max oddList reduceLeftOption(_ + _)\n\e[31m\e[31m   |\e[0m                 \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    (oddList : IndexedSeq[Long])\n\e[31m   |\e[0m              \
    \                    Required: Ordering[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z = x to y by 2\n        z.lastOption.map {\n            case x if(x\
    \ % 2 == 0) => x\n            case _ => -1\n        }.getOrElse(-1L)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjs_64ada.scala:22)\n\tat Problem.main(tmpjs_64ada.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def isEven(x: Long) = x % 2 == 0\n        if (y > x) {\n            val\
    \ yEven = isEven(y) \n            val xEven = isEven(x)\n            if (yEven\
    \ || xEven) return yEven\n            else return -1\n        }\n        else\
    \ {\n            val xEven = isEven(x)\n            if (xEven) return x\n    \
    \        else return -1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8k4z0r0k.scala:17:39\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (yEven\
    \ || xEven) \e[33mreturn\e[0m yEven\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          Found:    (yEven : Boolean)\n\e[31m   |\e[0m                      \
    \                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result : Long = -1;\n        if(x >= y) {\n            if(y % 2 == 0)\n\
    \                result = x;\n            else {\n                if(x % 2 ==\
    \ 0) {\n                    result = (x / 2) + y\n                } else {\n \
    \                   result = x - y;\n                }\n            }\n      \
    \  } else {\n            if(y % 2 == 0)\n                result = y;\n       \
    \     else {\n                if(x % 2 == 0) {\n                    result = x\
    \ - y;\n                } else {\n                    result = (x / 2) + y;\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijb3o4vw.scala:38)\n\tat Problem.main(tmpijb3o4vw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val max: Long = if (x < y) x else y\n        (0 until max).find(x => x *\
    \ x >= y) match {\n            case 0 => x\n            case n => y\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp261j9o93.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (\e[31m0\e[0m until max).find(\e\
    [36mx\e[0m => x * x >= y) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m          \
    \       ^^^\e[0m\n\e[31m   |\e[0m                 Found:    (max : Long)\n\e[31m\
    \   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp261j9o93.scala:15:17 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m => x\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m    Values of types Int and\
    \ Option[Int] cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659979319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var smallest = x\n        var biggest = y\n        var even = 0\n      \
    \  var odd = 0\n        while (biggest - smallest + 1 <= 1) {\n            val\
    \ x = BigInt(smallest)\n            val y = BigInt(biggest)\n            if (x\
    \ / y % 2 == 0) {\n                even += 2\n            }\n            else\
    \ {\n                odd += 2\n            }\n            smallest += 2\n    \
    \        biggest -= 2\n        }\n        if (even > odd) {\n            even\n\
    \        }\n        else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0m0mt131.scala:37)\n\tat Problem.main(tmp0m0mt131.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val nums = mutable.Queue[Long]()\n        var result = x\n        for (i\
    \ = x + 1; i <= y; i++) {\n            if (i % 2 == 0) nums.add(i)\n         \
    \   if (nums.contains(i) && nums.head % 2 == 0) result = i\n        }\n      \
    \  if (result == -1) result = -1\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5lp8csax.scala:15:15 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i = x + \e[31m1\e[0m; i <= y;\
    \ i++) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m        \
    \       ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5lp8csax.scala:15:30\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i = x + \e[31m1\e[0m; i <= y; i++) {\n\e[31m\e[31m   |\e[0m               \
    \               ^\e[0m\n\e[31m   |\e[0m                              '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5lp8csax.scala:15:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i = x + \e[31m1\e[0m; i <= y; i++) {\n\e[31m\e[31m   |\e[0m               \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \  pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5lp8csax.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.Queue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5lp8csax.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i\
    \ = x + \e[31m1\e[0m; i <= y; i++) {\n\e[31m\e[31m   |\e[0m                  \
    \    ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  impor"
  stdout: ''
  timestamp: 1659979320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < 0 || y < 0)\n            return -1\n        val result = x + (y\
    \ - x) / 2\n        if (result < x)\n            return x\n        else if(result\
    \ > y)\n            return y\n        else\n            result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnyjcm14h.scala:24)\n\tat Problem.main(tmpnyjcm14h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val min = if (x < y) x else y\n        val max = if (x > y) x else y\n\n\
    \        // We use an interval of length 2x to determine whether a number is even,\n\
    \        // because it is easy to prove that every even number divides evenly.\n\
    \        val interval = for(i <- min.until(max)) yield i * (i + 1) / 2\n     \
    \   val evens = interval.filter(_ % 2 == 0)\n\n        // We only need to check\
    \ whether a number is in the interval if it is\n        // even. Otherwise, it\
    \ must be odd.\n        val odds = evens.filter(_ % 2 != 0)\n        odds.headOption.flatMap(odd.filter(x\
    \ => x <= x && x >= y)).getOrElse(-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7rw1dtb.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        odds.headOption.flatMap(odd.filter(\e[36mx\e\
    [0m => x <= x && x >= y)).getOrElse(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \         Not found: odd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNums = mutable.Set[Long]()\n        for (i <- x to y){\n       \
    \     if (i % 2 == 0) evenNums.add(i)\n        }\n        if (evenNums.isEmpty)\
    \ -1l\n        else evenNums.max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj085fcso.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // The range in which we must search is [x, y], inclusive\n        val range\
    \ = (x to y) map (_.toLong).toSeq\n        // The array of numbers from 0 to x\n\
    \        val arr = range.map(i => 0 until (i.toLong))\n        // The array of\
    \ numbers from 0 to y\n        val arr2 = range.map(i => 0 until (i.toLong))\n\
    \        // The array of numbers whose sum is equal to x and whose difference\
    \ is equal to y\n        val arr3 = range.map(i => 0 until (i.toLong))\n     \
    \   val arr31 = (0 to x) map (i => 0 until (i.toLong))\n        val arr32 = (0\
    \ to y) map (i => 0 until (i.toLong))\n        val arr33 = (0 to x) map (i =>\
    \ 0 until (i.toLong))\n        val arr34 = (0 to y) map (i => 0 until (i.toLong))\n\
    \        val arr35 = (0 to x) map (i => 0 until (i.toLong))\n        val arr36\
    \ = (0 to y) map (i => 0 until (i.toLong))\n        val arr37 = (0 to x) map (i\
    \ => 0 until (i.toLong))\n        val arr38 = (0 to y) map (i => 0 until (i.toLong))\n\
    \        val arr39 = (0 to x) map (i => 0 until (i.toLong))\n        val arr40\
    \ = (0 to y) map (i => 0 until (i.toLong))\n        val arr41 = (0 to x) map (i\
    \ => 0 until (i.toLong))\n        val arr42 = (0 to y) map (i => 0 until (i.toLong))\n\
    \        val arr43 = (0 to x) map (i => 0 until (i.toLong))\n        val arr44\
    \ = (0 to y) map (i => 0 until (i.toLong))\n        val arr45 = (0 to x) map (i\
    \ => 0 until (i.toLong))\n        val arr46 = (0 to y) map (i => 0 until (i.toLong))\n\
    \        val arr47 = (0 to x) map (i => 0 until (i.toLong))\n        val arr48\
    \ = (0 to y) map (i => 0 until (i.toLong))\n        val arr49 = (0 to x) map (i\
    \ => 0 until (i.toLong))\n        val arr50 = (0 to y) map (i => 0 until (i.toLong))\n\
    \        val arr51 = (0 to x) map (i => 0 until (i.toLong))\n        val arr5\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxy23bzqd.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxy23bzqd.scala:14:34\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mrange\e[0m = (x to y) map (_.toLong).toSeq\n\e[31m\e[31m   |\e[0m  \
    \                                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1.toLong.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxy23bzqd.scala:16:44 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = range.map(\e\
    [36mi\e[0m => \e[31m0\e[0m until (i.toLong))\n\e[31m\e[31m   |\e[0m          \
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxy23bzqd.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = range.map(\e\
    [36mi\e[0m => \e[31m0\e[0m until (i.toLong))\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31"
  stdout: ''
  timestamp: 1659979325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var ans = -1\n        val i = new Array[Int](2L);\n        val j = new Array[Int](2L);\n\
    \        var isEven = true;\n        // find out whether the number is in the\
    \ range [x, y]\n        if((x - y) > 0 && (x - y) <= 10) {\n            var i\
    \ = x - (y / 2);\n            var j = y + (x / 2);\n            while((i <= y)\
    \ && (j <= x)) {\n                if(j <= x && i != 0) {\n                   \
    \ j += 2;\n                }\n                if(i < y && i != 0) {\n        \
    \            i += 2;\n                }\n                if(i == y || j == x)\
    \ {\n                    if((i % 2) != (j %2)) {\n                        isEven\
    \ = false;\n                    }\n                }\n                else {\n\
    \                    if(i != 0) {\n                        i += 2;\n         \
    \           }\n                    if(j != 0) {\n                        j +=\
    \ 2;\n                    }\n                }\n            }\n        }\n   \
    \     if(isEven) {\n            ans = x + 1;\n        }\n        else {\n    \
    \        ans = x - 1;\n        }\n        return ans;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqyw51fjx.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mi\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](\e[31m2L\e[0m);\n\e[31m\e\
    [31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m         \
    \                      Found:    (\e[31m2L\e[0m : Long)\n\e[31m   |\e[0m     \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqyw51fjx.scala:15:31 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](\e[31m2L\e[0m);\n\e[31m\e[31m   |\e[0m                   \
    \            ^^\e[0m\n\e[31m   |\e[0m                               Found:   \
    \ (\e[31m2L\e[0m : Long)\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqyw51fjx.scala:44:18\
    \ --------------------\e[0m\e[0m\n\e[31m44 |\e[0m            ans = x + \e[31m1\e\
    [0m;\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqyw51fjx.scala:47:18\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m            ans = x - \e[31m1\e\
    [0m;\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenList = getEvenList(y)\n\n        var currentVal = x\n        var\
    \ currentNum = evenList(evenList.length - 1)\n        var currentOdd = false\n\
    \n        while (currentNum <= x && currentVal <= y) {\n            if (currentNum\
    \ % 2 == 0 && currentVal % 2 == 0) {\n                currentOdd = true\n    \
    \            val remainder = currentNum / 2\n                currentNum = remainder\n\
    \                currentVal = remainder\n            } else if ((currentNum %\
    \ 2 != 0) && (currentVal % 2 != 0)) {\n                currentOdd = false\n  \
    \              val remainder = currentVal / 2\n                currentVal = remainder\n\
    \                currentNum = remainder\n            } else {\n              \
    \  if (currentNum > currentVal) {\n                    currentNum = currentVal\
    \ + 1\n                } else {\n                    currentVal = currentNum +\
    \ 1\n                }\n            }\n        }\n        currentNum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxr6b1te.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = getEvenList(y)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Not found: getEvenList\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Using Math.min and Math.max we can define a range of possible \n    \
    \    // integer numbers within the range [x, y] inclusive. \n        val x1 =\
    \ Math.min(x,y)\n        val x2 = Math.max(x, y)\n\n        // Using an iterator\
    \ we can define an iterator of possible \n        // numbers that will lie between\
    \ x1 and x2 inclusive.\n        val it = Iterator.iterate(x1, x2) { n =>\n   \
    \         if (n % 2 == 0) n else -(n + 1)\n        }\n        val evenNumbers\
    \ = it.filter(_ % 2 == 0)\n        val oddNumbers = it.filter(_ % 2 == 1)\n\n\
    \        // We can now iterate through our evenNumbers list to find the\n    \
    \    // biggest even number in the list.\n        evenNumbers.find(_ % 2 == 0).getOrElse(-1l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptomeet22.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mit\e\
    [0m = Iterator.iterate(x1, x2) { \e[36mn\e[0m =>\n\e[31m\e[31m   |\e[0m      \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \                  Found:    (x2 : Long)\n\e[31m   |\e[0m                    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenList: List[(Long, Long)] =\n            (x until (x + y) zip (y\
    \ until x)) filter (_._2 % 2==0) map (x -> y)\n        val biggerEven = evenList.maxBy(_._1)._1\n\
    \        if (biggerEven==x) biggerEven else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd7_ay3if.scala:14:72\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            (x until (x + y)\
    \ zip (y until x)) filter (_._2 % \e[31m2\e[0m==\e[31m0\e[0m) map (x -> y)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \       Found:    (Long, Long)\n\e[31m   |\e[0m                              \
    \           Required: (\e[1m\e[32m(\e[0mLong, Long\e[1m\e[32m)\e[0m)\e[1m\e[32m\
    \ \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mAny\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result : Long = 0\n        for(i <- x until y) {\n            if(i%2\
    \ == 0) {\n                result = i\n            }\n        }\n        if(result\
    \ == 0) {\n            return -1l\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2phh90a.scala:27)\n\tat Problem.main(tmpx2phh90a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max = x\n        var min = y\n        while (min < max) {\n        \
    \    val mid = min + max/2;\n            if (mid%2 == 0) {\n                max\
    \ = mid\n            } else {\n                min = mid\n            }\n    \
    \    }\n        if (min >= y) {\n            return -1\n        } else {\n   \
    \         return min\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplqb5zset.scala:30)\n\tat Problem.main(tmplqb5zset.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNumbers = mutable.ArrayBuffer.empty[Long]\n        x until y foreach\
    \ { i => evenNumbers += i }\n        if (evenNumbers.isEmpty) -1\n        else\
    \ evenNumbers.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5m9gxwkg.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = mutable.Stack[Long](x until y)\n        while(evens.length ne\
    \ 0){\n            if(evens.head % 2 != 0) evens.pop()\n            else evens.push(evens.head\
    \ - 1)\n        }\n        if(evens.isEmpty) -1\n        else evens.head\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplf5lemkh.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Stack[\e\
    [35mLong\e[0m](x until y)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNumbers : mutable.Set[Long] = mutable.Set.empty[Long]\n        val\
    \ evenNumbersSize : Long = evenNumbers.size\n        while (x < y) {\n       \
    \     val currentNum : Long = x + y\n            val currentNumSize = evenNumbers.size\n\
    \            if (currentNumSize < evenNumbersSize) {\n                val evenNum\
    \ : Long = x + currentNum\n                if (evenNum % 2 != 0) {\n         \
    \           evenNumbers += currentNum\n                }\n            }\n    \
    \    }\n        if (evenNumbers.size == 0) {\n            -1\n        } else {\n\
    \            val evenNumbersSize: Long = evenNumbers.size\n            if (evenNumbersSize\
    \ == evenNumbersSize) {\n                evenNumbers.last\n            } else\
    \ {\n                -1\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0fyvdpes.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0fyvdpes.scala:13:46\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevenNumbers\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = Range(x, y)\n        range.maxBy(x => math.gcd(x.toInt, y.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntlo1n0_.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(x, y)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (x : Long)\n\e[31m   |\e[0m    \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpntlo1n0_.scala:13:29 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(x, y)\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (y : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpntlo1n0_.scala:14:30 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        range.maxBy(\e[36mx\e[0m => math.gcd(x.toInt, y.toInt))\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             value gcd is not a member of math\n\e[31m\e[31m-- Error: /tmp/tmpntlo1n0_.scala:14:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ range.maxBy(\e[36mx\e[0m => math.gcd(x.toInt, y.toInt))\n\e[31m\e[31m   |\e\
    [0m                                                    ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x+1 == y)\n            return x\n        val m = x % y\n        if(m\
    \ == 0)\n            return x\n        if(m == 1)\n            return y\n    \
    \    if(x == y)\n            return -1\n        return chooseNum(x-1, y)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuox9_i5.scala:25)\n\tat Problem.main(tmpsuox9_i5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            val min = Math.min(x, y)\n            val max\
    \ = Math.max(x, y)\n            val range = max - min\n            val half =\
    \ range / 2\n            val evenRange = range % 2 == 0 ? half: half+1\n     \
    \       var num : Long = 0\n            while (num <= max) {\n               \
    \ if (num % 2 == 0) {\n                    if (num >= min && num <= min + evenRange)\
    \ {\n                        num = num + min\n                    } else {\n \
    \                       return num\n                    }\n                }\n\
    \                num += 1\n            }\n            return -1\n        }\n \
    \       else {\n            val min = Math.min(y, x)\n            val max = Math.max(y,\
    \ x)\n            val range = max - min\n            val half = range / 2\n  \
    \          val evenRange = range % 2 == 0 ? half: half+1\n            var num\
    \ : Long = 0\n            while (num <= max) {\n                if (num % 2 ==\
    \ 0) {\n                    if (num >= min && num <= min + evenRange) {\n    \
    \                    num = num + min\n                    } else {\n         \
    \               return num\n                    }\n                }\n       \
    \         num += 1\n            }\n            return -1\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cq9eqdi.scala:18:55 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenRange\e[0m = range\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? half: \e[35mhalf+\e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Not found: type\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0cq9eqdi.scala:18:43\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenRange\e[0m = range % \e[31m2\e[0m == \e[31m0\e[0m ? half: \e[35mhalf+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                         value ? is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cq9eqdi.scala:37:55\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenRange\e[0m = range % \e[31m2\e[0m == \e[31m0\e[0m ? half: \e[35mhalf+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \             Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0cq9eqdi.scala:37:43 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m            \e[33mval\e[0m \e[36mevenRange\e[0m = range % \e[31m2\e[0m == \e\
    [31m0\e[0m ? half: \e[35mhalf+\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   value ? is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659979329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i = x\n        var j = y\n        var even = 1\n\n        while (i <\
    \ j) {\n            if (i % 2 == 0) {\n                even = even + 1\n     \
    \           i += 1\n            } else {\n                even = even - 1\n  \
    \              j -= 1\n            }\n        }\n\n        if (even == 1) {\n\
    \            return i\n        } else {\n            return -1\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8g5leys.scala:34)\n\tat Problem.main(tmpj8g5leys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = (x, y).unzip\n        var maxRange = 0l\n        var even =\
    \ 0l\n\n        range.foreach {\n            x => {\n                range.foreach\
    \ {\n                    y => {\n                        if(x._2._2 < y._1._2)\
    \ max = y\n                    }\n                }\n            }\n        }\n\
    \n        max = range._1\n        max = range._1\n        range.foreach {\n  \
    \          x => {\n                range.foreach {\n                    y => {\n\
    \                        if(x._2._2 >= y._1._2 && x._2._2 <= max._1) even = x._2\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  if(even < maxRange) even\n        else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_4sxtc71.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (x, y).unzip\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ unzip is not a member of (Long, Long) - did you mean (Long, Long).zip?\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp_4sxtc71.scala:27:12 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        max = range._1\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val <none>\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp_4sxtc71.scala:28:12 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        max = range._1\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val <none>\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val max = Math.max(x, y)\n        val min = Math.min(x, y)\n        if(max\
    \ == min) {\n            return -1\n        }\n        val even = max % 2 == 0\n\
    \        val range = max - min + 1\n        var result = -1\n        if(even)\
    \ {\n            val c = ((min - 2 + max) % range) / 2\n            result = min\
    \ - c + 2\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp166pl3_c.scala:23:21\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result = min - c\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def checkIfEven(num : Long, x :Long, y : Long) : Boolean = {\n         \
    \   if (num < 0) false\n            if (num > y) false\n            else if (num\
    \ % 2 == 0 && num >= x && num >= y) true\n            else false\n        }\n\
    \        def chooseNumHelper(x : Long, y : Long) : Long = {\n            if (checkIfEven(x,\
    \ x, y)) return x\n            if (checkIfEven(y, y, x)) return y\n          \
    \  val x = x + 1\n            val y = y + 1\n            chooseNumHelper(x, y)\n\
    \        }\n        val maxNum = x + y - 1\n        chooseNumHelper(maxNum, maxNum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt9rk7oah.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = x + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m        \
    \            Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt9rk7oah.scala:23:20 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = y + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m        \
    \            Recursive \e[33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpt9rk7oah.scala:14:25 ----------------\e\
    [0m\e[0m\n\e[33m14 |\e[0m            \e[33mif\e[0m (num < \e[31m0\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val minX = x - 1\n        val maxY = y - 1\n        val nums = mutable.ListBuffer[Int]()\n\
    \        for (xx <- minX until maxY)\n            if (isEven(xx))\n          \
    \      nums += xx\n        if (nums.isEmpty)\n            -1\n        else\n \
    \           nums.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwxs8_3cq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwxs8_3cq.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (isEven(xx))\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isEven\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val l = Math.min(x, y)\n        val r = Math.max(x, y)\n        \n     \
    \   // check if l - r is even\n        if (l - r % 2 == 0)\n            l - r\
    \ // 2\n        else\n            -1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4gtcl_u.scala:23)\n\tat Problem.main(tmpg4gtcl_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (y > x) {\n            val r = x % y\n            if (r == 0) {\n   \
    \             return y\n            } else if (r > 0) {\n                return\
    \ chooseNum(y, r)\n            } else {\n                return -1\n         \
    \   }\n        } else {\n            val r = y % x\n            if (r == 0) {\n\
    \                return x\n            } else if (r > 0) {\n                return\
    \ chooseNum(x, r)\n            } else {\n                return -1\n         \
    \   }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\
    \tat Problem$.chooseNum(tmp_64i_v7h.scala:27)\n\tat Problem$"
  stdout: ''
  timestamp: 1659979329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val maxEven = BigInt(1)\n        val evens = mutable.Queue[BigInt]()\n \
    \       val evensCount = mutable.Queue[BigInt]()\n        val xUpper = BigInt(Math.max(x,\
    \ y))\n        val yUpper = BigInt(Math.min(x, y))\n        while(evensCount.dequeue._2\
    \ <= Math.max(x, y)) {\n            if(evens.dequeue._2 % 2 != 0)\n          \
    \      evensCount.enqueue(evens.dequeue._2)\n            else {\n            \
    \    evens.enqueue(evens.dequeue._2)\n                evensCount.enqueue(evensCount.dequeue._2)\n\
    \            }\n        }\n        while(evensCount.dequeue._2 <= yUpper) {\n\
    \            if(evens.dequeue._2 % 2 == 0)\n                evensCount.enqueue(evens.dequeue._2)\n\
    \            else {\n                evens.enqueue(evens.dequeue._2)\n       \
    \         evensCount.enqueue(evensCount.dequeue._2)\n            }\n        }\n\
    \        while(evensCount.dequeue._2 <= xUpper) {\n            if(evens.dequeue._2\
    \ == 0)\n                evensCount.enqueue(evens.dequeue._2)\n            else\
    \ {\n                evens.enqueue(evens.dequeue._2)\n                evensCount.enqueue(evensCount.dequeue._2)\n\
    \            }\n        }\n        if(evensCount.dequeue._2 >= Math.max(x, y))\n\
    \            evens.enqueue(evens.dequeue._2)\n        else if(evensCount.dequeue._2\
    \ >= yUpper)\n            evens.enqueue(evens.dequeue._2)\n        else if(evensCount.dequeue._2\
    \ >= xUpper)\n            evens.enqueue(evens.dequeue._2)\n        else\n    \
    \        -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpht18f_l_.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Queue[\e\
    [35mBigInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpht18f_l_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.Queue[\e\
    [35mBigInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = (x.toLong until y.toLong).filter(x % 2 == 0).min\n        val\
    \ odds = (x+1l until y).toSet.filter(x % 2 != 0).min\n\n        if (evens > 0l)\
    \ {\n            if (evens % 2 == 0l) {\n                evens\n            }\
    \ else {\n                odds\n            }\n        } else if (odds > 0l) {\n\
    \            odds\n        } else {\n            -1l\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptq04cf63.scala:13:53\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m = (x.toLong until y.toLong).filter(x % \e[31m2\e[0m == \e[31m0\e[0m).min\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mLong\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptq04cf63.scala:14:47\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e\
    [0m = (x+\e[31m1l\e[0m until y).toSet.filter(x % \e[31m2\e[0m != \e[31m0\e[0m).min\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mLong\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmptq04cf63.scala:14:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36modds\e[0m = (x+\e[31m1l\e[0m until y).toSet.filter(x %\
    \ \e[31m2\e[0m != \e[31m0\e[0m).min\n\e[31m\e[31m   |\e[0m                   \
    \                                           ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\e[31m   |\e[0m\
    \    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that\
    \ match type java.util.Comparator[Any].\n3 errors found\n"
  stdout: ''
  timestamp: 1659979332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            if (x.toInt % 2 != 0 && y.toInt % 2 == 0) {\n\
    \                return x\n            }\n        } else if (x > y) {\n      \
    \      if (x.toInt % 2 == 0 && y.toInt % 2 != 0) {\n                return y\n\
    \            }\n        } else {\n            if (x.toInt % 2 == 0 && y.toInt\
    \ % 2 == 0) {\n                return x\n            }\n        }\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptv357n13.scala:29)\n\tat Problem.main(tmptv357n13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x >= y) -1\n      else if (x == y) return x\n      else if (x < y) { if\
    \ (y % 2 == 0) x else -1 }\n      else { if (x % 2 == 0) y else -1 }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdbbxk6ti.scala:19)\n\tat Problem.main(tmpdbbxk6ti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x >= y) {\n            -1\n        } else {\n            val ans : Long\
    \ = 0\n            while(y>=0) {\n                val z = y * y\n            \
    \    if(z > x) {\n                    val ans = y\n                    break\n\
    \                } else if(z == x) {\n                    val t = x\n        \
    \            x = y\n                    y = t\n                } else {\n    \
    \                y--\n                }\n            }\n            ans\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnv1o7x4x.scala:27:23 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    y--\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnv1o7x4x.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpnv1o7x4x.scala:24:22 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    x = y\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment to\
    \ val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnv1o7x4x.scala:25:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                   \
    \ y = t\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val y\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var a = x\n        var b = y\n        while(true){\n            if(a >=\
    \ b)\n                return -1\n            else if(a < b)\n                a\
    \ = x + 1\n            else\n                b = y + 1\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6k0mv5x.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m(\e\
    [31mtrue\e[0m){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m16 |\e[0m            \e\
    [33mif\e[0m(a >= b)\n\e[31m17 |\e[0m                \e[33mreturn\e[0m -\e[31m1\e\
    [0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(a < b)\n\e[31m19\
    \ |\e[0m                a = x + \e[31m1\e[0m\n\e[31m20 |\e[0m            \e[33melse\e\
    [0m\n\e[31m21 |\e[0m                b = y + \e[31m1\e[0m\n\e[31m22 |\e[0m    \
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = x % 2 == 0\n        val low = if (even && !y) -1 else y\n   \
    \     val high = if (even) y else x\n        val lowVal = if (even) x - 1 else\
    \ if (y) x - 1 else x\n        val highVal = if (even) y + 1 else if (x) y + 1\
    \ else y\n        val evenNum = if (even) x else y\n        val lowNum = if (even)\
    \ y else x\n        val highNum = if (even) x else y\n        if (low >= high)\
    \ return -1\n        if (lowVal < 0 || highVal < 0) return -1\n        if (evenNum\
    \ < lowNum || evenNum < highNum) return -1\n        if (lowNum == highNum) {\n\
    \            if (lowVal < highVal) return lowVal\n            else return highVal\n\
    \        }\n        val lowEven = if (even) lowNum - 1 else if (lowNum > 0) lowNum\
    \ - 1\n        val highEven = if (even) highNum + 1 else if (highNum < 0) highNum\
    \ + 1\n        val minEven = if (even) lowNum - 1 else if (lowNum > 0) lowNum\n\
    \        val maxEven = if (even) highNum + 1 else if (highNum < 0) highNum\n \
    \       val lowEvenNum = if (even) lowNum else if (lowNum < 0) lowNum\n      \
    \  val highEvenNum = if (even) highNum else if (highNum < 0) highNum\n       \
    \ if (lowEven >= highEven) return -1\n        if (minEven < 0 || maxEven < 0)\
    \ return -1\n        if (lowEvenNum < minEven || lowEvenNum > maxEven) return\
    \ -1\n        val minEvenVal = if (even) highNum - 1 else if (highNum > 0) highNum\n\
    \        val maxEvenVal = if (even) lowNum + 1 else if (lowNum < 0) lowNum\n \
    \       val lowEvenVal = if (even) highNum else if (highNum < 0) highNum\n   \
    \     if (lowEvenVal < minEvenVal || lowEvenVal > maxEvenVal) return -1\n    \
    \    lowEvenVal + highEvenVal\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr6czll14.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlow\e[0m = \e[33mif\e[0m\
    \ (even && !y) -\e[31m1\e[0m \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m        \
    \                      ^^\e[0m\n\e[31m   |\e[0m         value unary_! is not a\
    \ member of Long - did you mean y.unary_+?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr6czll14.scala:16:46 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mlowVal\e[0m = \e[33mif\e[0m (even) x - \e\
    [31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y) x - \e[31m1\e[0m \e[33melse\e[0m\
    \ x\n\e[31m\e[31m   |\e[0m                                              ^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (y : Long)\n\
    \e[31m   |\e[0m                                              Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr6czll14.scala:17:47\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhighVal\e\
    [0m = \e[33mif\e[0m (even) y + \e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (x)\
    \ y + \e[31m1\e[0m \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m                  \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    (x : Long)\n\e[31m   |\e[0m                \
    \                               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr6czll14.scala:34:20 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (lowEven >= highEven) \e[33mreturn\e\
    [0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue >= is not a member of AnyVal, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x<0 || y<0) return -1\n        var biggest = y+1\n        if(y>x) biggest\
    \ = x\n        var even = 0\n        // Loop through y from bottom to top and\
    \ check if we found even number\n        // if y<x then loop through y from top\
    \ to bottom and check if we found even number\n        for(i <- x to biggest-1)\
    \ {\n            if(i%2==0) {\n                even = i+1\n                break\n\
    \            }\n        }\n        if(even == 0) return -1\n        for(i <- y\
    \ to biggest-1) {\n            if(i%2==0) {\n                even = i+1\n    \
    \            break\n            }\n        }\n        if(even == 0) return -1\n\
    \        return even\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg17fbgcu.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                even = i+\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg17fbgcu.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg17fbgcu.scala:28:23\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                even = i+\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg17fbgcu.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenList  = List(1l, 2l, 3l, 4l, 5l)\n        var maxEven = -1l\n  \
    \      var evenIdx = 0\n        var xIdx = 1l\n        var yIdx = 1l\n       \
    \ while (xIdx < x && yIdx < y ) {\n            if (evenList[evenIdx] == (xIdx\
    \ * yIdx)) {\n                maxEven = xIdx * yIdx\n            } else if (evenList[evenIdx]\
    \ > maxEven) {\n                maxEven = evenList[evenIdx]\n            }\n \
    \           evenIdx += 1\n            xIdx += 1\n            yIdx += 1\n     \
    \   }\n        if (maxEven < -1l) {\n            maxEven = -1l\n        }\n  \
    \      return maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdggevsu.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (evenList[\e[35mevenIdx\e[0m]\
    \ == (xIdx * yIdx)) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: type evenIdx\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdggevsu.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (evenList[evenIdx]\
    \ > maxEven) {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: type evenIdx\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdggevsu.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxEven =\
    \ evenList[\e[35mevenIdx\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not\
    \ found: type evenIdx\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \    if(x>y) y <- x\n       if(y<x) x <- y\n       while(true){\n         x <-\
    \ x filter (_%2==0)\n         y <- y filter (_%2==0)\n         if(y<=x || x ==\
    \ 0) return y\n         else x <- x filter (_%2==0)\n       }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpozwjoao4.scala:13:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m       \e[33mif\e[0m(x>y) y <- x\n\e[31m\e[31m   |\e\
    [0m                 ^^\e[0m\n\e[31m   |\e[0m                 end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpozwjoao4.scala:14:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \e\
    [33mif\e[0m(y<x) x <- y\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m\
    \   |\e[0m                 end of statement expected but '<-' found\n\e[31m\e\
    [31m-- Error: /tmp/tmpozwjoao4.scala:16:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m         x <- x filter (_%\e[31m2\e[0m==\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m           ^^\e[0m\n\e[31m   |\e[0m           end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpozwjoao4.scala:17:11\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \  y <- y filter (_%\e[31m2\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \    ^^\e[0m\n\e[31m   |\e[0m           end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpozwjoao4.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m         \e[33melse\e[0m x <- x filter (_%\e[31m2\e[0m==\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0m   \
    \             end of statement expected but '<-' found\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpozwjoao4.scala:13:15 ----------------\e[0m\e\
    [0m\n\e[33m13 |\e[0m       \e[33mif\e[0m(x>y) y <- x\n\e[33m\e[33m   |\e[0m  \
    \             ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpozwjoao4.scala:14:15 ----------------\e\
    [0m\e[0m\n\e[33m14 |\e[0m       \e[33mif\e[0m(y<x) x <- y\n\e[33m\e[33m   |\e\
    [0m               ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation availa"
  stdout: ''
  timestamp: 1659979331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def oddOrEven(x: Long) : Boolean = x%2 == 0\n        def getMin(nums: List[Long],\
    \ start: Long, result: List[Long]): (List[Long], Long) = {\n            if (nums.isEmpty)\n\
    \                return (result, start)\n            \n            val minNum\
    \ = nums.min\n            val nextResult = getMin(nums.filter(_ != minNum), min\
    \ + minNum, result)\n            \n            if (nextResult._1 != nums)\n  \
    \              return (result, start)\n            \n            if (nextResult._2\
    \ > start)\n                return (nextResult._2, nextResult._2 + minNum)\n \
    \           else\n                return (nextResult._1, nextResult._2)\n    \
    \    }\n        \n        val list = List(x to y)\n        val result = getMin(list,\
    \ 1, list)._1\n        \n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp30che_iw.scala:19:62 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnextResult\e[0m = getMin(nums.filter(_\
    \ != minNum), min + minNum, result)\n\e[31m\e[31m   |\e[0m                   \
    \                                           ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ expected type ?{ + : ? }\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30che_iw.scala:25:35\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mreturn\e\
    [0m (nextResult._2, nextResult._2 + minNum)\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    Long\n\e[31m   |\e[0m                        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp30che_iw.scala:31:28 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = getMin(list, \e\
    [31m1\e[0m, list)._1\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (list : List[scala.collection.immutable.NumericRange.Inclusive[Long]])\n\
    \e[31m   |\e[0mRequired: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp30che_iw.scala:31:37 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = getMin(list, \e[31m1\e[0m,\
    \ list)._1\n\e[31m\e[31m   |\e[0m                                     ^^^^\e[0m\n\
    \e[31m   |\e[0mFound:    (list : List[scala.collection.immutable.NumericRange.Inclusive[Long]])\n\
    \e[31m   |\e[0mRequired: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x >= y) \n            return -1l\n        var even = 1\n        var\
    \ bigger = x\n        var currentBigger = bigger\n        var evenBigger = bigger\n\
    \        var evenBiggerToCheck = bigger\n        while (evenBigger < y) {\n  \
    \          evenBigger = evenBiggerToCheck\n            evenBiggerToCheck += even\n\
    \            if (evenBiggerToCheck > y) \n                evenBiggerToCheck =\
    \ y\n            even += 2\n            currentBigger = bigger\n            if\
    \ (even >= y) \n                break\n            bigger = evenBiggerToCheck\n\
    \            evenBigger = evenBiggerToCheck + even\n            if (evenBiggerToCheck\
    \ > y) \n                evenBiggerToCheck = y\n            even += 2\n      \
    \      currentBigger = bigger\n            if (even >= y) \n                break\n\
    \        }\n        evenBigger = evenBiggerToCheck\n        if (evenBiggerToCheck\
    \ == x)\n            evenBigger = -1l\n        return evenBigger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3vbq2ge.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3vbq2ge.scala:36:16 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evenNumbers = y until x + 1\n        var maxEven = 0\n        for (i\
    \ <- evenNumbers)\n            if (i % 2 == 0)\n                maxEven = max(maxEven,\
    \ i)\n\n        if (maxEven == 0)\n            return -1\n        else\n     \
    \       return maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbnn9a4cb.scala:17:39\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                maxEven = max(maxEven,\
    \ i)\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (i : Long)\n\e[31m\
    \   |\e[0m                                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var num1 = x\n        var num2 = y\n        var max_even = -1\n        while\
    \ (true) {\n            while (num1 % 2 == 0) num1 /= 2\n            if (num2\
    \ < num1) return -1\n            if (num1 == num2) return num1\n            if\
    \ (num1 > num2) num2 -= 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8wf29zfk.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (\e\
    [31mtrue\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m17 |\e[0m     \
    \       \e[33mwhile\e[0m (num1 % \e[31m2\e[0m == \e[31m0\e[0m) num1 /= \e[31m2\e\
    [0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (num2 < num1) \e[33mreturn\e[0m\
    \ -\e[31m1\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (num1 == num2) \e[33mreturn\e\
    [0m num1\n\e[31m20 |\e[0m            \e[33mif\e[0m (num1 > num2) num2 -= \e[31m1\e\
    [0m\n\e[31m21 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \    var maxEven = -1L\n       val xEven = (x%2) == 0\n       val yEven = (y%2)\
    \ == 0\n       var minEven = x + 1\n       val xEvenEven = (x%2) == 0\n      \
    \ val yEvenEven = (y%2) == 0\n       val xEvenEvenEven = (x%2) == 0\n       val\
    \ yEvenEvenEven = (y%2) == 0\n       val xEvenEvenEvenEven = (x%2) == 0\n    \
    \   val yEvenEvenEvenEven = (y%2) == 0\n       val xEvenEvenEvenEvenEven = (x%2)\
    \ == 0\n       val yEvenEvenEvenEvenEven = (y%2) == 0\n       var minEvenEven\
    \ = x + 1\n       val xEvenEvenEvenEvenEvenEven = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEven = (x%2) == 0\n      \
    \ val yEvenEvenEvenEvenEvenEvenEven = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEven = (y%2) == 0\n\
    \       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (x%2) == 0\n       val\
    \ yEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven =\
    \ (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy166jmvd.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy166jmvd.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven = -1L\n        for(i <- 0 until x until y) {\n            if(i\
    \ % 2 == 0) {\n                if (maxEven == -1L) maxEven = i\n             \
    \   else maxEven = if (i >  maxEven) maxEven else i\n            }\n        }\n\
    \        if (maxEven != -1L) maxEven\n        else -1L\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6fonbuic.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until x until y) {\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (x : Long)\n\e[31m   |\e\
    [0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= 0 || y <= 0)\n            return -1\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = x to y by 2\n        for (x <- 0 until n) {\n            if (n\
    \ % x == 0) {\n                list += n\n            }\n        }\n        if\
    \ (list.size > 0)\n            return list.toArray.max\n        -1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsltmqxka.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsltmqxka.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \    Found:    (n : scala.collection.immutable.NumericRange[Long])\n\e[31m   |\e\
    [0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsltmqxka.scala:18:18 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mif\e[0m (n % x == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of scala.collection.immutable.NumericRange[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var current = x\n        var found = false\n        while (current < y)\
    \ {\n            val res = current + y\n            if (res > y) { found = false;\
    \ break }\n            if (res >= y) {\n                found = true\n       \
    \         break\n            }\n            current = res\n        }\n       \
    \ if (!found) -1\n        else current\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswalj6yk.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (res > y) { found = \e[31mfalse\e\
    [0m; break }\n\e[31m\e[31m   |\e[0m                                          ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswalj6yk.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            val x = math.abs(x)\n            val y = math.abs(y)\n\
    \            if (x == y) -1\n            else (x * (x + 1) / 2)\n        } else\
    \ {\n            val y = math.abs(y)\n            if (y > x) -1\n            else\
    \ (y * (y + 1) / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhn_65a1.scala:14:29 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = math.abs(x)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwhn_65a1.scala:15:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36my\e[0m = math.abs(y)\n\e[31m\e[31m   |\e[0m                        \
    \     ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwhn_65a1.scala:19:29 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36my\e[0m = math.abs(y)\n\e[31m\e[31m  \
    \ |\e[0m                             ^\e[0m\n\e[31m   |\e[0m                 \
    \            Recursive \e[33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i = 2\n        var j = 1\n        var result = -1L\n        while (i\
    \ <= (y+j)) {\n            if (i + (x+j) < y) {\n                result = i +\
    \ (x+j)\n                i = i + 1\n                j = j + 1\n            } else\
    \ if ((i + (x+j)) == y) {\n                result = i + (x+j)\n              \
    \  i = i + 1\n                j = j + 1\n            } else if (i + (x+j) == y)\
    \ {\n                result = -1\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (y > x)\n            throw new IllegalArgumentException(\"y cannot be\
    \ greater than x\")\n        val numEven = 0\n        val numOdd = 0\n       \
    \ for (ix <- xL to yL) {\n            if (ix % 2 == 0) {\n                numEven\
    \ += 1\n            } else {\n                numOdd += 1\n            }\n   \
    \     }\n        if (numEven > numOdd) {\n            return x\n        } else\
    \ if (numEven == numOdd) {\n            return -1\n        } else {\n        \
    \    return y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshr5l41z.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (ix <- xL to yL) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ xL\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var max = -1\n        // loop through every even number between x and y\n\
    \        for (i <- x.toLong to y.toLong by 2l) \n            if (i % 2 == 0) \n\
    \                if (max < i) max = i\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvepbc_be.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m\
    \ (max < i) max = i\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (i : Long)\n\e\
    [31m   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = x until y filter { n => n % 2 == 0 } map (n => n -> 0) toList\n\
    \        val odds = x until y filter { n => n % 2 != 0 } map (n => n -> 1) toList\n\
    \        val result = \n            evens.maxBy(_._1) match {\n              \
    \  case Some(pair) => pair._2\n                case None => -1\n            }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe5f02h9k.scala:13:81 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = x until y filter\
    \ { \e[36mn\e[0m => n % \e[31m2\e[0m == \e[31m0\e[0m } map (\e[36mn\e[0m => n\
    \ -> \e[31m0\e[0m) toList\n\e[31m\e[31m   |\e[0m                             \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                         expression expected but \e[31mend of statement\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe5f02h9k.scala:14:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = x until y filter { \e[36mn\e[0m => n % \e[31m2\e[0m != \e\
    [31m0\e[0m } map (\e[36mn\e[0m => n -> \e[31m1\e[0m) toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^\e[0m\n\e[31m   |\e[0m                          expression expected but\
    \ \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpe5f02h9k.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            evens.maxBy(_._1) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value maxBy is not a member\
    \ of (Long, Int)\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5f02h9k.scala:17:35\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e\
    [0m Some(pair) => pair._2\n\e[31m\e[31m   |\e[0m                             \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var evenOrOdd : Int = 0\n        while (x <= y) {\n            if (x % 2\
    \ == 0) {\n                evenOrOdd += 1\n            }\n            x += 1\n\
    \        }\n        if (evenOrOdd == 2) {\n            return x\n        } else\
    \ if (evenOrOdd == 1) {\n            return -1\n        } else {\n           \
    \ return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp12cri96m.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            x += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = (x to y by 2)\n        range.foldLeft[Long](-1l) { (max, next)\
    \ =>\n            if (max % 2 == 0 && next >= 0l) next else max\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2ctpwgy.scala:19)\n\tat Problem.main(tmpb2ctpwgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Check base case\n        if(x < y)\n            return -1\n        if(y\
    \ == 0)\n            return x\n        // Recursive case\n        val mid = (x\
    \ + y) / 2\n        if(mid % 2 == 0)\n            return chooseNum(mid, y - 1)\n\
    \        return chooseNum(x - 1, mid)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81x_7rob.scala:25)\n\tat Problem.main(tmp81x_7rob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val num = math.min(x, y)\n        val diff = math.abs(x - num)\n       \
    \ if (diff % 2 == 0) num else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1a1x2yqe.scala:18)\n\tat Problem.main(tmp1a1x2yqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Initialize variables \n        var x : int = x\n        var y : int =\
    \ y\n        var ans : Long = -1\n        // Iterate until you get an even number\n\
    \        while (x % 2 == 0 && y % 2 == 0) {\n            // Increment x and y\n\
    \            x += 1\n            y += 1\n        }\n        // At this point,\
    \ the numbers are x and y that make the range you want.\n        // The biggest\
    \ even number in the range is the one that\n        // is not in the range. If\
    \ there's no even number in the range,\n        // then return -1.\n        if\
    \ (x > y) {\n            while (x < y) {\n                // If x is bigger than\
    \ y, increment y by 1\n                y += 1\n                // If y is even\
    \ then break\n                if (y % 2 == 0) return y\n            }\n      \
    \  }\n        // If y is bigger than x, increment x by 1\n        x += 1\n   \
    \     // If x is even then break\n        if (x % 2 == 0) return x\n        //\
    \ If none of the above happens then return -1\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72c_4gnf.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m : \e[35mint\e[0m\
    \ = x\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp72c_4gnf.scala:15:16 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mvar\e[0m \e[36my\e[0m : \e[35mint\e[0m = y\n\e[31m\e[31m   |\e\
    [0m                ^^^\e[0m\n\e[31m   |\e[0m                Not found: type int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if(x > y) -1\n        else if(x <= y) 0\n        else math.max(math.min(x\
    \ + (y - x) / 2, x), y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpne6ssxw5.scala:18)\n\tat Problem.main(tmpne6ssxw5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) \n            chooseNum(x+1, y)\n        else \n           \
    \ chooseNum(x, y)+1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\
    \tat Problem$.chooseNum(tmpilbv0aiv.scala:16)\n\tat Problem$"
  stdout: ''
  timestamp: 1659979344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven = -1\n        // Scan the array in range from x to y inclusive\n\
    \        var i : Long = (x + y - 1l) / 2l\n        while (i <= y) {\n        \
    \    if (i % 2 == 0) {\n                if (maxEven == -1l || (maxEven.lt(i)))\
    \ {\n                    maxEven = i\n                }\n            }\n     \
    \       i += 1\n        }\n        if (maxEven == -1l) {\n            maxEven\
    \ = x - 1l\n        }\n        return maxEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyk6yobse.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (maxEven == -\e[31m1l\e\
    [0m || (maxEven.lt(i))) {\n\e[31m\e[31m   |\e[0m                             \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \     value lt is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyk6yobse.scala:19:30 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \                    maxEven = i\n\e[31m\e[31m   |\e[0m                      \
    \        ^\e[0m\n\e[31m   |\e[0m                              Found:    (i : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyk6yobse.scala:25:22 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            maxEven = x - \e[31m1l\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var biggerEven = Long.MaxValue\n        for (a <- x until y; b <- x until\
    \ y) {\n            if (a%2 != 0 && b%2 == 0) {\n                val num = a /\
    \ 2 * b\n                if (num > biggerEven) {\n                    biggerEven\
    \ = num\n                }\n            }\n        }\n        if (biggerEven <\
    \ Long.MaxValue) {\n            return biggerEven\n        } else {\n        \
    \    return -1l\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwz5o0zah.scala:29)\n\tat Problem.main(tmpwz5o0zah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y)\n            chooseNum(y, x)\n        else if (x > y)\n     \
    \       chooseNum(x, y)\n        else if (x < y && x == y)\n            x\n  \
    \      else\n            -1\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val nx = math.abs(x)\n        val ny = math.abs(y)\n        var sum : Long\
    \ = 0\n        if (nx > ny){\n            val min = (nx + ny) / 2\n          \
    \  val max = (nx - ny) / 2\n            var i = 0\n            var j = 0\n   \
    \         var even = 0\n            while(i < min){\n                while (j\
    \ < max){\n                    if ( math.abs(j) == math.abs(i)){\n           \
    \             even = even + 1\n                    }\n                    j =\
    \ (j + 1) % nx\n                }\n                i = i + 1\n               \
    \ sum = (sum + even) % nx\n                even = 0\n            }\n         \
    \   if (even < min){\n                sum = sum + even\n            }\n      \
    \  }else{\n            val min = (ny + nx) / 2\n            val max = (ny - nx)\
    \ / 2\n            var i = 0\n            var j = 0\n            var even = 0\n\
    \            while(i < min){\n                while (j < max){\n             \
    \       if ( math.abs(j) == math.abs(i)){\n                        even = even\
    \ + 1\n                    }\n                    j = (j + 1) % ny\n         \
    \       }\n                i = i + 1\n                sum = (sum + even) % ny\n\
    \                even = 0\n            }\n            if (even < min){\n     \
    \           sum = sum + even\n            }\n        }\n        if (sum < 0){\n\
    \            return -1\n        }else{\n            return sum\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_u2n3lhd.scala:27:24\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    j = (j +\
    \ \e[31m1\e[0m) % nx\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_u2n3lhd.scala:47:24 --------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m                    j = (j + \e[31m1\e[0m) % ny\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val num = scala.math.max(x, y)\n        val inRange = (num > 0) && (num\
    \ < y)\n        if(inRange){\n            val evens = num.toString.toInt/2\n \
    \           val even = evens % 2\n            val evenBigger = if(even == 1) y\
    \ else x\n            val evenBiggerEven = if(even == 1) x else y\n          \
    \  if(evenBigger < evenBiggerEven) -1\n            else evenBigger\n        }\n\
    \        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv6hm81jw.scala:26)\n\tat Problem.main(tmpv6hm81jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y) {\n            val temp = x\n            x = y\n            y\
    \ = temp\n        }\n        if (x < 1l || y < 1l) {\n            return -1l\n\
    \        }\n        val even = 0l\n        val odd = 0l\n        val evenBigger\
    \ = 0l\n        val oddBigger = 0l\n        val range = x-long(y+1l)\n       \
    \ val range2 = range/2\n        val i = range - 1l\n        while (i >= 0l) {\n\
    \            if (x % i == 0l) {\n                if (y % i == 0l) {\n        \
    \            even = even+1l\n                    evenBigger = evenBigger+1l\n\
    \                } else {\n                    odd = odd+1l\n                \
    \    oddBigger = oddBigger+1l\n                }\n            }\n            i\
    \ -= 1l\n        }\n        if (evenBigger > oddBigger) {\n            return\
    \ even\n        } else {\n            return odd\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9qzwhje9.scala:15:14 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x = y\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9qzwhje9.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            y = temp\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9qzwhje9.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = x-long(y+\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp9qzwhje9.scala:31:25 -----------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    even = even+\e[31m1l\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Reassignment to val even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp9qzwhje9.scala:32:31 -----------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                    evenBigger = evenBigger+\e[31m1l\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val evenBigger\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9qzwhje9.scala:34:24 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    odd = odd+\e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Reassignment to val odd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available w"
  stdout: ''
  timestamp: 1659979345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = (x % 2 == 0) && (y % 2 == 0)\n        val odd  = (x % 2 != 0)\
    \ && (y % 2 != 0)\n        val max = even.or(odd)\n        if (max) x else y\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9s5nuy5n.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = even.or(odd)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         value or is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = x to y by 2\n        var ans = -1l\n        for (even <- evens)\
    \ {\n            if (even.forall(_.isEven)) ans = even\n        }\n        ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps5af2p8i.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (even.forall(_.isEven)) ans\
    \ = even\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value forall is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val result = for(n <- 2 to x) yield {\n            val remainder = n % y\n\
    \            if (remainder < 0)\n                remainder + y\n            else\
    \ if (remainder == 0)\n                n\n            else \n                n\
    \ - remainder\n        }\n        if (result.length < 1) -1\n        else result.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn3lf166.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mfor\e[0m(n <- \e[31m2\e[0m to x) \e[33myield\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          Found:    (x : Long)\n\e[31m   |\e[0m             \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpvn3lf166.scala:23:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33melse\e[0m result.max\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ >: AnyVal\n\e[31m   |\e[0m..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mB\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\e[31m   |\e[0m\
    \    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that\
    \ match type java.util.Comparator[B].\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven = -1;\n        var even = -1;\n        var min = x;\n      \
    \  var max = y;\n        while (max < min) {\n            even = maxEven + 1\n\
    \            if (even % 2 == 0) {\n                maxEven = even\n          \
    \      max = even + 1\n            } else {\n                max = even - 1\n\
    \            }\n            min = even - 1\n        }\n        even = maxEven\
    \ + 1\n        if (even % 2 == 0) {\n            maxEven = even\n        } else\
    \ {\n            max = even - 1\n        }\n        return maxEven\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp30599150.scala:36)\n\tat Problem.main(tmp30599150.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z = (x - y) / 2\n        z match {\n            case 0 => y\n      \
    \      case _ => if (z % 2 == 0) y else x\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq093fjga.scala:20)\n\tat Problem.main(tmpq093fjga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val minX : Long = x - y \n        val minY : Long = y - x\n        val evenList\
    \ : List[Long] = List(x, y, x + y, x - y, x + y + x, x + y - y)\n        val oddList:\
    \ List[Long] = List(x, x + y, x + y + x, x - y, x - y + x, x - y + y)\n\n    \
    \    var evenIndex = 0\n        var oddIndex = 0\n\n        for(i <- evenList)\
    \ {\n            if(i / 2 == 0) evenIndex += 1\n        }\n\n        for(i <-\
    \ oddList) {\n            if(i / 2 == 1) oddIndex += 1\n        }\n\n        evenIndex\
    \ % 2 != 0 ? oddList[(oddIndex + 1)] : evenList[evenIndex]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecthh_yd.scala:29:55 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        evenIndex % \e[31m2\e[0m != \e[31m0\e[0m ? oddList[(\e\
    [35moddIndex\e[0m \e[35m+\e[0m \e[31m1\e[0m)] : \e[35mevenList\e[0m[\e[35mevenIndex\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \       Not found: type evenList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpecthh_yd.scala:29:27 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        evenIndex % \e[31m2\e[0m != \e[31m0\e[0m ? oddList[(\e[35moddIndex\e\
    [0m \e[35m+\e[0m \e[31m1\e[0m)] : \e[35mevenList\e[0m[\e[35mevenIndex\e[0m]\n\e\
    [31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                 value ? is not a member of Int\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpecthh_yd.scala:29:47 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        evenIndex % \e[31m2\e[0m != \e[31m0\e[0m ? oddList[(\e[35moddIndex\e\
    [0m \e[35m+\e[0m \e[31m1\e[0m)] : \e[35mevenList\e[0m[\e[35mevenIndex\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                               Not found: type +\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val biggest = y max x\n        if(isEven(biggest)) return biggest\n    \
    \    return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdk0xjyi5.scala:14:11 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(isEven(biggest)) \e[33mreturn\e\
    [0m biggest\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \       Not found: isEven\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var num : Long = x;\n        while(num < y) {\n            val temp = num;\n\
    \            num = num + 2;\n            if(temp % 2 == 0) {\n               \
    \ num = temp;\n            } else {\n                num = num - 2;\n        \
    \    }\n        }\n        num;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val xs = for (x <- 1 to y) yield x + 1\n        val ys = for (y <- 1 to\
    \ x) yield y + 1\n        val zs = for (x <- xs; y <- ys; if (x < y) yield x +\
    \ y)\n        for (z <- zs) if (z %% 2 = 0) z else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2o0lvw55.scala:15:51 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mzs\e[0m = \e[33mfor\e[0m\
    \ (x <- xs; y <- ys; \e[33mif\e[0m (x < y) \e[33myield\e[0m x + y)\n\e[31m\e[31m\
    \   |\e[0m                                                   ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         ')' expected, but 'yield' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2o0lvw55.scala:16:33 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (z <- zs) \e[33mif\e[0m (z %%\
    \ \e[31m2\e[0m = \e[31m0\e[0m) z \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m            \
    \                     ')' expected, but '=' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2o0lvw55.scala:13:32 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = \e[33mfor\e[0m (x <- \e\
    [31m1\e[0m to y) \e[33myield\e[0m x + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \       Found:    (y : Long)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2o0lvw55.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mys\e\
    [0m = \e[33mfor\e[0m (y <- \e[31m1\e[0m to x) \e[33myield\e[0m y + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Found:    (x : Long)\n\e[31m   |\e[0m        \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2o0lvw55.scala:16:18 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (z <- zs) \e[33mif\e[0m (z %% \e[31m2\e\
    [0m = \e[31m0\e[0m) z \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \               ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35mzs\e[0m needs type\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979349
