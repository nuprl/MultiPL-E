name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"\
  abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def\
  \ vowelsCount(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        val vowelsVowelSet = scala.collection.mutable.Set.empty[Char]\n\
    \        val vowelsVowelSetString = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n \
    \       for (i <- 0 until s.length - 1) {\n            if ((s.charAt(i) == 'a'\
    \ && vowelsVowelSet.contains('a')) || (s.charAt(i) == 'e' && vowelsVowelSet.contains('e'))\
    \ || (s.charAt(i) == 'i' && vowelsVowelSet.contains('i')) || (s.charAt(i) == 'o'\
    \ && vowelsVowelSet.contains('o')) || (s.charAt(i) == 'u' && vowelsVowelSet.contains('u')))\
    \ {\n                vowelsVowelSetString += s.charAt(i)\n                vowelsVowelSet\
    \ += s.charAt(i)\n            }\n        }\n        if (vowelsVowelSetString ==\
    \ Set(\"y\"))\n            vowelsVowelSetString += ('y')\n        (vowelsVowelSetString\
    \ == vowelsVowelSet).length", "      val vowels = \"aeiou\"\n      val vowelCount\
    \ = 0\n      for(i <- 0 until s.length - 1 ) {\n        if(vowels.indexOf(s.charAt(i))\
    \ > -1) {\n          vowelCount += 1\n        }\n      }\n      vowelCount", " \
    \       val vowels_l = ('a' to 'u') ++ 'y' \n        var vowels = 0\n        for\
    \ (c <- s) {\n            if (vowels_l.contains(c)) {\n                vowels\
    \ += 1\n            }\n        }\n        vowels", "        var counter = 0\n\
    \        var i = s.length\n        while (i > 0) {\n            if (s.charAt(i\
    \ - 1) === 'a' || s.charAt(i - 1) === 'e' || s.charAt(i - 1) === 'i' || s.charAt(i\
    \ - 1) === 'o' || s.charAt(i - 1) === 'u') {\n                counter = counter\
    \ + 1\n            }\n            i--\n        }\n        counter", "        val\
    \ vowelsSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        s.toLowerCase.foldLeft(0L){\
    \ case (acc, letter) => acc + (vowelsSet contains letter) }", "        var count\
    \ = 1\n        for(ch <- s)\n            if(ch == 'a' || ch == 'e' || ch == 'i'\
    \ || ch == 'o' || ch == 'u')\n                count += 1\n        val vowels =\
    \ s.length - count + 1\n        if(vowels == 0)\n            return 0\n      \
    \  if(vowels == 1 && s.charAt(s.length - 1) != 'y')\n            vowels\n    \
    \    else\n            vowels * (vowels/s.length)", "        // Write your code\
    \ here\n        val vowels = \"aeiouAEIOU\".toSet\n        val vowelscount = s.length\n\
    \        vowels.foreach(x => vowelscount += s.indexOf(x) >= 0)\n        vowelscount",
  "        val vowels = \"aeiou\".toCharArray\n        var count = 0L\n        for\
    \ (i<-0 to s.length-1) {\n            if (vowels(i) == s(i)) {\n             \
    \   count += 1\n            }\n        }\n        count", "        val c = s.toCharArray\n\
    \        val vowels = Array('a','e','i','o','u')\n        val vowelsCount = new\
    \ mutable.ArrayBuffer[Long]()\n        for (i <- 0 until c.length) {\n       \
    \     vowelsCount += vowels.filter(_ == c(i)).size\n        }\n        c.toList.foldLeft(0){(sum,\
    \ a) => sum + a}", "        s.count( c => \n            (c equals ('a') ||\n \
    \            c equals ('e') ||\n             c equals ('i') ||\n             c\
    \ equals ('o') ||\n             c equals ('u')) &&\n            !(c == 'y' &&\
    \ s.last.isUpper)\n        )", "        var count = 0\n        for (v <- \"aeiouy\"\
    .toCharArray) {\n            count += 1\n            if (s.endsWith(v)) {\n  \
    \              count += 1\n                break\n            }\n        }\n \
    \       return count", "        val lst : mutable.Seq[Char] = s.toList\n     \
    \   val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val\
    \ slen = lst.size\n        val n = 0\n        for( i <- 0 until slen) {\n    \
    \        val v = lst(i)\n            n += vowels.contains(v)\n        }\n    \
    \    n", "        def vowelCount(s : String) : Long = {\n            var count\
    \ = 0;\n            var i = 0;\n            while (i < s.length){\n          \
    \      count += if(i == s.length - 1) 1 else (s.charAt(i) == s.charAt(i+1));\n\
    \                i += 1\n            }\n            return count\n        }\n\
    \        return vowelCount(s)", "        val result = mutable.Map[Char, Long]()\n\
    \        for (i <- s.indices) {\n            if ((s.charAt(i) == 'a') || (s.charAt(i)\
    \ == 'e') || (s.charAt(i) == 'i') || (s.charAt(i) == 'o') || (s.charAt(i) == 'u'))\
    \ {\n                result(s.charAt(i)) = result.getOrElse(s.charAt(i), 0) +\
    \ 1\n            }\n        }\n        result.get('y')", "        val vowels =\
    \ \"aeiou\"\n        s.toCharArray.filter(x => vowels.indexOf(x) != -1).length",
  "        val counts : mutable.HashMap[Char, Int] = mutable.HashMap()\n        for\
    \ (c <- s) {\n            if (counts.contains(c))\n                counts(c) =\
    \ counts(c) + 1\n            else\n                counts.put(c, 1) \n       \
    \ }\n        val vowels = counts.filter(_._2 > 0).size\n        (vowels * s.length)",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelEndChar\
    \ = s match {\n            case x :: rest =>\n                if (vowels.contains(x)\
    \ && x.length == 1) {\n                    x\n                } else {\n     \
    \               if (vowelEndChar == x) \"y\" else vowelEndChar\n             \
    \   }\n            case _ =>\n                \"y\"\n        }\n        val vowels\
    \ = vowels.toSet\n        val vowelsCount = s.length.toLong\n        if (vowelsCount\
    \ == 0) 0L\n        else if (vowelsCount == 1 && vowels.contains(vowelEndChar))\
    \ 1L\n        else vowelsCount.productIterator.filter(vowels.contains).length",
  "        val arr = s.toCharArray\n        val vowels = 'a' -> 'e' -> 'i' -> 'o'\
    \ -> 'u' -> 'y'\n        val counts = scala.collection.mutable.Map.empty[Char,\
    \ Int]\n        for (i <- 0 until arr.length) {\n            val letter = arr(i).toLowerCase\n\
    \            counts.put(vowels(letter), counts.getOrElse(letter, 0L) + 1)\n  \
    \      }\n        counts.getOrElse('y', 0L)", "        val vowels = \"aeiou\"\n\
    \        val vowelsCount = mutable.HashMap[Char, Long]()\n        s.foreach {\
    \ letter =>\n            if (vowels.contains(letter)) vowelsCount(letter) += 1\n\
    \        }\n        vowelsCount.filter(_._2 > 0).size", "        // Your code\
    \ goes here!\n        val vowels = ('a' to 'u').toSet\n        var count = 0\n\
    \        for ( letter <- s ) {\n            if(vowels.contains(letter)) {\n  \
    \              count += 1\n            }\n        }\n        count", "       \
    \ val vowels = \"aeiou\".toSet\n        val count = s.length\n        var sum\
    \ = 0L\n        for (i <- 0 until count) {\n            if (vowels.contains(s.charAt(i)))\
    \ {\n                sum = sum + 1\n            }\n        }\n        sum", " \
    \       s.toLowerCase\n            .split(\"\") // Split string into characters,\
    \ ignoring case for simplicity\n            .filter(_.isUpper) // Select only\
    \ uppercase characters\n            .filter(_.isLetter) // Select only letters\
    \ (for simplicity, assume not accented)\n            .filter(!_.isDigit) // Remove\
    \ non-numeric characters\n            .filter(s => s == \"a\" || s == \"e\" ||\
    \ s == \"i\" || s == \"o\" || s == \"u\") // Select only vowels\n            .size",
  "        val letters = mutable.MutableList[String]()\n        for(i <- 0 until s.length){\n\
    \            if(s(i)==\"a\" || s(i)==\"e\" || s(i)==\"i\" || s(i)==\"o\" || s(i)==\"\
    u\"){\n                letters += s(i)\n            }\n            if(s(i)==\"\
    y\"){\n                letters += s(i)\n            }\n        }\n        letters.count\
    \ { case (\"a\" | \"e\" | \"i\" | \"o\" | \"u\") => true }", "        var vowels\
    \ = Set.empty[Char]\n        for (c <- s) {\n            vowels += c\n       \
    \ }\n        vowels.size + (if (s.endsWith('y')) 1 else 0)", "        var count\
    \ = 0.0\n        for (c in s.toCharArray) {\n          if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            count += 1\n          }\n\
    \        }\n        val vowels = Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        if\
    \ (count % 2 != 0) {\n          (count - vowels.size) * vowels.size\n        }\
    \ else {\n          count * vowels.size\n        }", "        var count = 0\n\
    \        var letters = s.toCharArray\n        var firstLetter = letters(0)\n \
    \       while (firstLetter != ' ') {\n            letters = letters.dropRight(1)\n\
    \            firstLetter = letters(0)\n        }\n\n        for (letter <- letters)\
    \ {\n            if ('a' <= letter && letter <= 'u') {\n                count\
    \ += 1\n            }\n        }\n        letters = letters.dropRight(1)\n   \
    \     var lastLetter = letters(0)\n        while (lastLetter != ' ') {\n     \
    \       letters = letters.dropRight(1)\n            lastLetter = letters(0)\n\
    \        }\n\n        for (letter <- letters) {\n            if ('a' <= letter\
    \ && letter <= 'u') {\n                count += 1\n            }\n        }\n\
    \        return count", "      s.toUpperCase.count(x => x == 'A'\n        | x\
    \ == 'E'\n        | x == 'I'\n        | x == 'O'\n        | x == 'U')", "    \
    \    var c = 0\n        var i = 0\n        while (i < s.length()) {\n        \
    \    if (s.charAt(i) == 'a') {\n                c += 1\n            } else if\
    \ (s.charAt(i) == 'e') {\n                c += 1\n            } else if (s.charAt(i)\
    \ == 'i') {\n                c += 1\n            } else if (s.charAt(i) == 'o')\
    \ {\n                c += 1\n            } else if (s.charAt(i) == 'u') {\n  \
    \              c += 1\n            } else if (s.charAt(i) == 'y') {\n        \
    \        if (i != s.length() - 1) {\n                    c += 1\n            \
    \    }\n            }\n            i += 1\n        }\n        c", "        var\
    \ count = 0L\n        for (c <- s) {\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                count += 1L\n         \
    \   }\n        }\n        if (s.size == 0 || count > 0) {\n            return\
    \ count\n        }\n        return 0L", "        val vowels = \"aeiou\"\n    \
    \    var count = 0L\n        for ( c <- s ) {\n            if (\"aeiou\".contains(c))\
    \ {\n                count += 1L\n            }\n        }\n        return count",
  "        var vowelCount = 1\n        for(x<-s.toCharArray)\n        {\n        \
    \    if(x=='a' || x=='e' || x=='i' || x=='o' || x=='u')\n            {\n     \
    \           vowelCount += 1\n            }\n        }\n        vowelCount", " \
    \       val vowels = scala.collection.mutable.Set.empty[Char]\n        var count\
    \ = 0L\n        for (char <- s)\n            if (vowels.contains(char)) count\
    \ += 1\n            else vowels += char\n        vowels.size", "        val vowels\
    \  = \"aeiou\"\n        val vowelsSet = vowels.toSet\n        val setLen = s.length\n\
    \        val vowelCount = ((s.toLowerCase() match {\n            case vowelsSet(i)\
    \ => i\n            case _          => -1\n        }).toList map { i =>\n    \
    \        vowels.indexOf(i)\n        }).sum\n        (vowelCount == setLen) ? vowelCount\
    \ : -1", '        // code here', "        var count = 0\n        s.toLowerCase.foreach(x\
    \ => {\n            if(x ==\"a\" || x == \"e\" || x == \"i\" || x == \"o\" ||\
    \ x == \"u\") {\n                count++\n            }\n        })\n        return\
    \ count", "        // Your code here\n        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val vowels_count = 0\n        for(i <- 0 until s.length)\
    \ vowels_count += vowels.contains(s.charAt(i))\n        vowels_count", "     \
    \   val vowels = mutable.Set.empty[Char]\n        val lowerCases = s.toLowerCase\
    \ // Make it case insensitive\n        for (c <- lowerCases) {\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                vowels\
    \ += c\n        }\n        val vowelCount = vowels.size // return number of vowels\n\
    \        vowelCount //return number of vowels", "        val count = mutable.HashSet[Char]()\n\
    \        s.foreach(c => count += c)\n        count.count(_ == 'a') + (if (s.endsWith('y'))\
    \ 1 else 0)", "        val l = (s.length)\n        val x = s.toCharArray\n   \
    \     val z = Array.ofDim[Int](l)\n        for (i <- 0 until l)\n            z(i)\
    \ = (x(i %) + (x(i) <> 'a' && !(x(i) <> 'y'))).toLong\n        val n = z(0)\n\
    \        var count = 0L\n        for (i <- 1 until l)\n            if (z(i) !=\
    \ n)\n                count++\n        Long(count)", "        val counts = mutable.HashMap[Char,Long]()\n\
    \        for (c <- s.toCharArray) {\n            counts(c) match {\n         \
    \   case None     => counts += ((c) -> 1)\n            case Some(x) => counts\
    \ += ((c) -> x + 1)\n            }\n        }\n        counts.filter(_._2 > 0).values.sum",
  "        def findVowel(s: String, index : Int) : Long = {\n            if (index\
    \ < s.length){\n                var vowelCount = 0\n                if (s.charAt(index)\
    \ == 'a'){\n                    vowelCount+=1\n                }\n           \
    \     if (s.charAt(index) == 'e'){\n                    vowelCount+=1\n      \
    \          }\n                if (s.charAt(index) == 'i'){\n                 \
    \   vowelCount+=1\n                }\n                if (s.charAt(index) == 'o'){\n\
    \                    vowelCount+=1\n                }\n                if (s.charAt(index)\
    \ == 'u'){\n                    vowelCount+=1\n                }\n           \
    \     if (s.charAt(index) == 'y'){\n                    vowelCount+=1\n      \
    \          }\n                if (s.charAt(index) == ' '){\n                 \
    \   vowelCount+=1\n                }\n                return vowelCount\n    \
    \        }\n            return 0\n        }\n        def findVowels(s: String)\
    \ : Long = {\n            var vowelCount = 0\n            for (i <- 0 to s.length-1){\n\
    \                var countOfVowels = findVowel(s, i)\n                vowelCount\
    \ += countOfVowels\n            }\n            return vowelCount\n        }\n\
    \        return findVowels(s)", "        s.toList match {\n            case x\
    \ if (x == null || x.length == 0) => 0\n            case xs =>\n             \
    \   var cnt = 0\n                var lastChar = xs.last\n                for (x\
    \ <- xs) {\n                    if (x.equalsIgnoreCase(lastChar) || x == \"y\"\
    ) {\n                        cnt += 1\n                    }\n               \
    \     lastChar = x\n                }\n                cnt\n        }", "    \
    \    val vowels = \"aeiouAEIOU\".toList\n        var count = 0L\n        val letters\
    \ = s.toCharArray\n        for (i <- 0 until letters.length) count += (if (vowels(letters(i)))\
    \ 1 else 0L)\n        count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val numVowels = s.length\n        val vowelsArray = Array.ofDim[Char](numVowels)\n\
    \        for(i <- 0 until numVowels)\n            vowelsArray(i) = s(i)\n    \
    \        vowelsArray(i)\n        for(i <- 0 until numVowels)\n            if(vowels(s(i)))\n\
    \                vowelsArray(i) -= 1\n        vowelsArray.length", "      var\
    \ count = 1\n      var pos = 0\n      val chars = s.toCharArray\n      while (pos\
    \ < chars.length) {\n        if (chars(pos) == 'a' || chars(pos) == 'e' || chars(pos)\
    \ == 'i' || chars(pos) == 'o' || chars(pos) == 'u') {\n          count = count\
    \ + 1\n        }\n        pos += 1\n      }\n      (count - s.length)", "    \
    \    val vowels = mutable.Set.empty[Char]\n        for (letter <- s) {\n     \
    \       vowels += letter\n        }\n        return vowels.size + (s.toString.toLowerCase.endsWith(\"\
    y\") match {\n            case true => 1\n            case _ => 0\n        })",
  "        val vowels = Set[Char]('a','e','i','o','u')\n        val counts = mutable.HashMap[Char,\
    \ Int]()\n        for (letter <- s) {\n            if (!vowels.contains(letter))\
    \ continue \n            if (letter.isEmpty) continue \n            if (!counts.contains(letter))\
    \ {\n                counts += letter -> 1\n            } else {\n           \
    \     counts(letter) += 1\n            }\n        }\n        counts.map{ case\
    \ (k,v) => v.toLong }.reduce(_ + _).toLong", "        val vowels = \"aeiou\".toCharArray\n\
    \        val result = new mutable.HashMap[Char, Int]()\n        var wordLen =\
    \ s.length()\n        for ( c <- s.toCharArray ) {\n            if ( vowels(c)\
    \ ) result += (c -> 1)\n            else wordLen -= 1\n        }\n        result.size\
    \ + (if ( wordLen == 0 ) 1 else 0)", "      var count = 0\n      var currentChar\
    \ = s.charAt(0)\n      var nextChar = s.charAt(1)\n      while (nextChar != null)\
    \ {\n        if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i'\
    \ || currentChar == 'o' || currentChar == 'u') {\n          count += 1\n     \
    \   }\n        currentChar = nextChar\n        nextChar = s.charAt(2)\n      }\n\
    \      if (currentChar == 'y') {\n        count += 1\n      }\n      return count",
  "        val count = mutable.ListBuffer[Char]()\n        val vowels = 'aeiou'.toCharArray\n\
    \        for (i <- s.length - 1 to 0 by -1) {\n            if (vowels(i) != 'u'\
    \ && vowels(i) != 'o' && vowels(i) != 'a') {\n                count += vowels(i)\n\
    \            }\n        }\n        count.length", "        var vowels :List[Char]\
    \ = Nil\n        var i = 0\n        while (i < s.length - 1) {\n            if\
    \ (vowels.contains(s.charAt(i))) {\n                i += 1\n            } else\
    \ {\n                vowels ::= s.charAt(i)\n                i += 1\n        \
    \    }\n        }\n        vowels.length", "        val v = s.toLowerCase().toCharArray.toList.filter(!Character.isLetter(ch)).toList\n\
    \        val vCount = v.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n        vCount", "        val vowels = Set(\"aeiouy\")\n     \
    \   val vowelsCount = Set()\n        var count = 0\n        for (word <- s.split(\"\
    \\\\W\")) {\n            val wordCount = word.split(\"a\").length\n          \
    \  count += wordCount\n            for (vowel <- vowels) {\n                if\
    \ (word.contains(vowel)) {\n                    vowelsCount += count\n       \
    \         }\n            }\n        }\n        vowelsCount.toLong", "        val\
    \ vowels = \"aeiou\".toSet\n        var count = 0\n        s.foreach(x => if (vowels.contains(x))\
    \ count += 1)\n        count", "        val vowels = List(\"a\",\"e\",\"i\",\"\
    o\",\"u\")\n        var count = 0L\n        for (v <- vowels) {\n            if\
    \ (s.indexOf(v) != -1) {\n                count += 1L\n            }\n       \
    \ }\n        if (s.indexOf(\"y\") == -1) {\n            count += 1L\n        }\n\
    \        count", "        val list = mutable.MutableList(s.reverse.zipWithIndex.filter(_._1\
    \ == _._1).map(_._2._2))\n        val vowels = \"aeiou\".toSet\n        val count\
    \ = list.filterNot(vowels.contains).size\n        return count", '       // Your
    code goes here', "        val counts = new mutable.HashMap[Char, Int]()\n    \
    \    for (c <- s.toCharArray)\n            if (counts.getOrElse(c, 0) < 1)\n \
    \               counts.put(c.toLowerCase, counts.size + (if (c == 'y') 1 else\
    \ 0))\n        counts.values.sum", "        var n = 0\n        var v = true\n\
    \        for (x <- s.toCharArray) {\n            if (v) n += (v = x == 'a' ||\
    \ x == 'e' || x == 'i' || x == 'o' || x == 'u')\n            v = !v\n        }\n\
    \        n", "        val vowels = ('a' to 'u').toSet\n        var count = 0\n\
    \        for (i <- 0 until s.length) count += vowels(s(i))\n        count", " \
    \       var count=0\n        var i=s.length-1\n        while(i>=0){\n        \
    \    if(s(i)=='a')\n                count=count+1\n            i=i-1\n       \
    \ }\n        return count", "        val vowels = \"aeiouAEIOU\"\n        var\
    \ count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ == -1) count++\n        return count", "        val vowels_count = s.count(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        if (s.last.equals(\"\
    y\"))\n            vowels_count + 1\n        else\n            vowels_count",
  "        // Count vowels and store them in a map\n        val vowels = mutable.HashMap[Char,\
    \ Int]()\n\n        // Iterate through all characters in s\n        s.foreach(x\
    \ => { \n            // Check if the character is a vowel\n            if (x.toLowerCase\
    \ == \"a\" || x.toLowerCase == \"e\" || x.toLowerCase == \"i\" || x.toLowerCase\
    \ == \"o\" || x.toLowerCase == \"u\") {\n                vowels += (x.toLowerCase\
    \ -> 1) // Increment vowel count for each vowel\n            }\n        })\n\n\
    \        // Return sum of the vowel counts\n        vowels.values.sum", "    \
    \    val letters = Vector.tabulate(s.length){ i => s.charAt(i).toLowerCase }\n\
    \        letters.filter{ letter => letter ==='a' || letter ==='e' || letter ==='i'\
    \ || letter ==='o' || letter ==='u'}.size", "        if(s.isEmpty) 0\n       \
    \ else {\n            val vowels : Set[String] = Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\")\n            var count = 0L\n            for(i <- 1 to s.length)\n      \
    \          if(vowels.contains(s.charAt(i)) || s.charAt(i) == 'y') count+=1\n \
    \           count\n        }", "        var count = 0\n        for (letter <-\
    \ s) {\n            if (letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u')\n                count += 1\n        }\n        if\
    \ (s.length == 1 && s.head == 'y')\n            count += 1\n        return count",
  "        var count : Long = 0\n        for(i <- 0 until s.length) {\n          \
    \  val v = s.charAt(i).toLowerCase\n            if(v == 'a' || v == 'e' || v ==\
    \ 'i' || v == 'o' || v == 'u') {\n                count += 1\n            }\n\
    \        }\n        count", "       val vowels = Set('a','e','i','o','u')\n  \
    \     val nVowels = s.length\n       var total = 0\n       for (i <- 0 to nVowels\
    \ - 1) {\n          if (vowels.contains(s.charAt(i))) {\n             total =\
    \ total + 1\n          }\n       }\n       return total", "        var count =\
    \ 0\n        var vowels = ('a','e','i','o','u')\n        for(c <- s) {\n     \
    \       if(c == 'a') count += vowels.length\n            if(c == 'e') count +=\
    \ vowels.length\n            if(c == 'i') count += vowels.length\n           \
    \ if(c == 'o') count += vowels.length\n            if(c == 'u') count += vowels.length\n\
    \        }\n        count + vowels.length", "        var count = 1L\n        for\
    \ (ch <- s.toCharArray) {\n            if (ch == 'a' || ch == 'e' || ch == 'i'\
    \ || ch == 'o' || ch == 'u') count += 1\n        }\n        return count", " \
    \       var count = 0L\n        var vowels = \"aeiouAEIOU\"\n        for (c <-\
    \ s) {\n            if (vowels(c)) {\n                count += 1\n           \
    \ }\n        }\n        count", "        val vowels = scala.collection.mutable.HashSet[String]()\n\
    \        vowels += \"a\"\n        vowels += \"e\"\n        vowels += \"i\"\n \
    \       vowels += \"o\"\n        vowels += \"u\"\n        vowels += \"y\"\n  \
    \      vowels += \"Y\"\n        val wordCounts = scala.collection.mutable.HashMap[String,\
    \ Long]()\n        var count = 0L\n        for (w <- s.split(\"\\\\W+\")) {\n\
    \            if (vowels.contains(w)) {\n                count += 1\n         \
    \   }\n            wordCounts.put(w, count)\n            count = 0\n        }\n\
    \        val wordCount = wordCounts.values.sum\n        val uniqueWordCount =\
    \ wordCounts.size\n        wordCounts", '        // Solution here', "        val\
    \ vowels = Set(\n            \"a\", \"e\", \"i\", \"o\", \"u\",\n            \"\
    A\", \"E\", \"I\", \"O\", \"U\",\n            \"a\", \"e\", \"i\", \"o\", \"u\"\
    ,\n            \"A\", \"E\", \"I\", \"O\", \"U\"\n        )\n        var count\
    \ = s.length\n        for( x <- 0 until count ) {\n            val sub = s.substring(\
    \ x, x + 1 )\n            if( vowels.contains( sub.toLowerCase ) ) {\n       \
    \         count += 1\n            }\n        }\n        count", '       // Your
    code here', "        var vowelCount = 0L\n        for (i <- s.indices) {\n   \
    \         if (s(i) == 'a')\n                vowelCount = vowelCount + 1\n    \
    \        else if (s(i) == 'e')\n                vowelCount = vowelCount + 1\n\
    \            else if (s(i) == 'i')\n                vowelCount = vowelCount +\
    \ 1\n            else if (s(i) == 'o')\n                vowelCount = vowelCount\
    \ + 1\n            else if (s(i) == 'u')\n                vowelCount = vowelCount\
    \ + 1\n        }\n        vowelCount", "        // Your code here\n        val\
    \ aSet = new mutable.HashSet[Char]()\n        for (i <- 0 until s.length) aSet\
    \ += s.charAt(i)\n        aSet.toSeq.filter(_ == 'a' || _ == 'e' || _ == 'i' ||\
    \ _ == 'o' || _ == 'u').length", "        val array = s.toUpperCase() // Convert\
    \ the string to an array of characters and then upper case\n        var count\
    \ = 0L\n        var last = 0\n        for (i <- 0 until array.length) {\n    \
    \        val c = array(i)\n            if (\"AEIOUY\".indexOf(c) != -1){\n   \
    \             count++ \n            }\n            if (\"AEIOUY\".indexOf(c) !=\
    \ -1 && array(i) != c) {\n                count++ \n            }\n          \
    \  last = i\n        }\n        if (last < array.length-1){\n            count\
    \ += 1L\n        }\n        count", "        val vowels = \"aeiou\".toSet\n  \
    \      val n = s.length\n        val count = mutable.ListBuffer[Char]()\n    \
    \    for ((i, c) <- s.zipWithIndex) {\n            if (vowels(c))\n          \
    \      count += c\n        }\n        count.filterNot(vowels).size", "       \
    \ var count = 0\n        for (i <- 0 until s.length) count += s.charAt(i) == 'a'\
    \ ||\n            s.charAt(i) == 'e' ||\n            s.charAt(i) == 'i' ||\n \
    \           s.charAt(i) == 'o' ||\n            s.charAt(i) == 'u'\n        if\
    \ (s.charAt(s.length - 1) == 'y') count += 1\n        \n        count", "    \
    \    var count = 0\n        for (char <- s) {\n            count += if(char ==\
    \ 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u') 1 else 0\n\
    \        }\n        count", "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            val c = s.charAt(i)\n            val isVowel = c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n            if (isVowel)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\")\n       \
    \ var vowelCount = 0\n        var vowelCountIndex = -1\n        var vowelIndex\
    \ = -1\n        var stringLength = s.length\n        while (vowelCountIndex <\
    \ stringLength) {\n            vowelIndex = s.indexOf(vowels(0), vowelCountIndex)\n\
    \            if (vowelIndex >= 0) {\n                vowelCount += 1\n       \
    \         vowelCountIndex = vowelIndex\n            } else {\n               \
    \ vowelCountIndex -= 1\n            }\n        }\n        vowelCount", "     \
    \   val vowels = \"aeiou\".toCharArray\n        var cnt = 0\n        val len =\
    \ s.length\n        for (i <- 0 until len) {\n            val c = s.charAt(i)\n\
    \            if (vowels.contains(c))\n                cnt += 1\n        }\n  \
    \      cnt", "         val vowels : mutable.Set[Char] = mutable.Set('a','e','i','o','u')\n\
    \         if (s == \"\") return 0\n         var count = 0\n         val list =\
    \ s.toList\n         list.foreach(c => if (vowels.contains(c)) count += 1)\n \
    \        count\n     }\n }\n</code>\n<|/ a tags=scala |>\n<| a |>\n<code>\nscala>\
    \ val vowels = Set('a','e','i','o','u')\nvowels: scala.collection.immutable.Set[Char]\
    \ = Set(a, e, i, o, u)\n\nscala> val word = \"abcde\"\nword: String = abcde\n\n\
    scala> val count = vowels diff word.toLowerCase map {c=>\n     | if (vowels contains\
    \ c) 1 else 0\n     | }\ncount: scala.collection.immutable.Map[Char,Int] = Map(e\
    \ -> 1, a -> 1, i -> 0, o -> 0)\n</code>\n<|/ a dscore=2 tags=scala |>\n<| a dscore=1\
    \ |>\nThe simplest possible answer:\n<code>\n\"abcde\".toLowerCase map {c=>\n\
    \  if (('a','e','i','o','u').contains(c)) 1\n  else 0\n}\n</code>\n<|/ a tags=scala\
    \ |>\n<| c |>\nThanks for your answer, but that code is giving the error \"type\
    \ mismatch\"\n<|/ c |>\n<| c |>\nI've used your example `\"abcde\"` string and\
    \ provided my own `Map` of vowels. Could you paste your code with your example\
    \ and let me know what error you get? Maybe you've made a typo or something else.\n\
    <|/ c |>\n<| a tags=scala |>\n<code>\nscala> val vowels = Set('a','e','i','o','u')\n\
    vowels: scala.collection.immutable.Set[Char] = Set(a, e, i, o, u)\n\nscala> val\
    \ word = \"abcde\"\nword: String = abcde\n\nscala> val count = word.map(c => if\
    \ (vowels contains c) 1 else 0)\ncount: List[Int] = List(0, 1, 0, 0, 0)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe OP wants a `Set[Int]`\n<|/ c |>\n<| c |>\n\"The\
    \ OP wants a Set[Int]\" - I disagree\n<|/ c |>\n<| c |>\n`vowels` isn't `Set[Char]`, ",
  "        val vowels = Array('a','e','i','o','u')\n        val count = mutable.ListBuffer[String]()\n\
    \        for (x <- s) {\n            if (vowels(x) == vowels(s.length-1))\n  \
    \              count += x\n        }\n        count.length", '        // Solution
    goes here', "        // Write code here\n        var vowel_count = 0\n       \
    \ for (i<-0 until s.length){\n            if (s.charAt(i) == 'a'){\n         \
    \       vowel_count += 1\n            }\n            if (s.charAt(i) == 'e'){\n\
    \                vowel_count += 1\n            }\n            if (s.charAt(i)\
    \ == 'i'){\n                vowel_count += 1\n            }\n            if (s.charAt(i)\
    \ == 'o'){\n                vowel_count += 1\n            }\n            if (s.charAt(i)\
    \ == 'u'){\n                vowel_count += 1\n            }\n            if (s.charAt(i)\
    \ == 'y'){\n                vowel_count += 1\n            }\n        }\n     \
    \   vowel_count", "        var count = 0\n        val list = s.toList\n      \
    \  for(elm <- list)\n            if(elm == \"a\" || elm == \"e\" || elm == \"\
    i\" || elm == \"o\" || elm == \"u\" || elm == \"y\")\n                count +=\
    \ 1\n        count", "        // TODO your code:\n        var count = 0\n    \
    \    for (i <- 0 to s.length - 1) {\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n\
    \                count += 1\n            } else if (s.charAt(i) == 'y') {\n  \
    \              count += 1\n                i += 1 // move to next char\n     \
    \       }\n        }\n        count", "        val a = \"a\".toCharArray\n   \
    \     val e = \"e\".toCharArray\n        val i = \"i\".toCharArray\n        val\
    \ o = \"o\".toCharArray\n        val u = \"u\".toCharArray\n        val y = \"\
    y\".toCharArray\n        val z = s.length\n        val count = z.toLong\n    \
    \    val count = s.filter(_ == 'a').size\n        val count = s.filter(_ == 'e').size\n\
    \        val count = s.filter(_ == 'i').size\n        val count = s.filter(_ ==\
    \ 'o').size\n        val count = s.filter(_ == 'u').size\n        val count =\
    \ s.filter(_ == 'y').size\n        val count = s.filter(_ == 'z').size\n     \
    \   count", "        def vowels(s : String) : Set[Char] = {\n            val vowels\
    \ = scala.collection.mutable.Set[Char]('a', 'e', 'i', 'o', 'u')\n            var\
    \ i = 0\n            var n = 0\n            var s = s\n            while (i <\
    \ s.length) {\n                if (vowels(s(i)).contains('y')) n += 1\n      \
    \          else n -= 1\n                i += 1\n            }\n            if\
    \ (n == 0) n += 1\n            vowels\n        }\n        vowels(s).size", " \
    \       val counts : mutable.Map[String, Long] = mutable.HashMap[String, Long]()\n\
    \        for(c <- s) {\n            if(counts.getOrElse(c) == null) counts.put(c,\
    \ 1L)\n            else counts.put(c, (counts.get(c) + 1))\n        }\n      \
    \  counts.filter(_._2 > 0).map(_._2).sum", "        var count = 0L\n        var\
    \ last = 0L\n        for (c:Char <- s) {\n            count += 1\n           \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \      last = c\n            }\n        }\n        count += 1\n        if (last\
    \ != 'y') {\n            count += 1\n        }\n        count", "        var count\
    \ = 0L\n        for(i <- 0 until s.length){\n            if(s.charAt(i) == 'a'\
    \ || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i)\
    \ == 'u')\n                count += 1L\n        }\n        count", "        val\
    \ array = s.toLowerCase().toCharArray\n        val count = mutable.ArrayBuffer(0)\n\
    \        for (i <- 0 until array.length) if (array(i) == 'a' || array(i) == 'e'\
    \ || array(i) == 'i' || array(i) == 'o' || array(i) == 'u') count += 1 \n    \
    \    if (array.length == 0) 0\n        else if (array.length == 1) 1\n       \
    \ else count.sum", "        val vowels = \"aeiou\".toSet\n        val count =\
    \ mutableListBuffer[String]()\n        val split = s.toCharArray\n        for\
    \ (i <- 0 to split.length - 1) {\n            if (vowels(s(i)))\n            \
    \    count += s(i)\n        }\n        count.toList.size", "       val vowels\
    \ = ('a' to 'u').toSet\n       val end = s.indexOf(\"y\")\n       if (end != -1)\n\
    \           vowels(s.charAt(end-1))\n       else\n           vowels.size", " \
    \       val vowels = Vector('a', 'e', 'i', 'o', 'u', 'y')\n        s.toLowerCase\n\
    \        .map(_.toChar)\n        .filter(x => vowels.contains(x))\n        .size",
  "        val counts : mutable.Set[String] = mutable.Set[String]()\n        val array\
    \ = s.toCharArray.dropRight(s.length)\n        for (i <- 0 to array.length - 1)\
    \ {\n            counts += array(i)\n        }\n        counts.count(\"aeiouy\"\
    )", "        val arr = s.split(\"\")\n        val vowels = arr.map(x => if (x\
    \ == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u') x else \"\")\n     \
    \   val y = vowels.last\n        vowels.filter(_ != y).length", "        var count\
    \ = 0\n        var lastVowel = s.charAt(s.length - 1)\n        var lastVowelIsAConsonant\
    \ = false\n        for (i <- 0 until s.length)\n        {\n            var current\
    \ = s.charAt(i)\n            var currentIsConsonant = false\n            if ('a'\
    \ <= current && current <= 'z')\n            {\n                count += 1\n \
    \               lastVowelIsAConsonant = false\n            }\n            else\n\
    \            {\n                if ('e' <= current && current <= 'z')\n      \
    \          {\n                    count += 2\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('i' <=\
    \ current && current <= 'z')\n                {\n                    count +=\
    \ 3\n                    lastVowelIsAConsonant = true\n                }\n   \
    \             else\n                if ('o' <= current && current <= 'z')\n  \
    \              {\n                    count += 4\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('u' <=\
    \ current && current <= 'z')\n                {\n                    count +=\
    \ 5\n                    lastVowelIsAConsonant = true\n                }\n   \
    \             else\n                if ('y' <= current && current <= 'z')\n  \
    \              {\n                    count += 6\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('y' <=\
    \ current && current <= 'z')\n                {\n                    count +=\
    \ 6\n                    lastVowelIsAConsonant = true\n                }\n   \
    \             else\n                if ('y' <= current && current <= 'z')\n  \
    \              {\n                    count += 6\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('y' <=\
    \ current && current <= 'z')\n                {\n                    count +=\
    \ 6\n                    lastVowelIsAConsonant = true\n                }\n   \
    \             else\n                if ('a' <= current && current <= 'z')\n  \
    \              {\n                    count += 7\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('a' <=\
    \ current && current <= 'z')\n                {\n                    count +=\
    \ 7\n                    lastVowelIsAConsonant = true\n                }\n   \
    \             else\n                if ('a' <= current && current <= 'z')\n  \
    \              {\n                    count += 7\n                    lastVowelIsAConsonant\
    \ = true\n                }\n                else\n                if ('a' <=\
    \ current && current <= '", "        val vowels = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val vowelsCount = s.map(x => vowels.find(_ == x))\n     \
    \   vowelsCount.count(_ == true)", "        val l = 1\n        for (v <- \"AEIOUY\"\
    .toCharArray) {\n            val l1 = s.count(v => v == v)\n            val l2\
    \ = s.lastIndexOf(v) + 1\n            l += l1 + l2 - (l1 - l2)\n        }\n  \
    \      l", "        var count = 0L\n        for (c <- s) {\n            val vowel\
    \ = if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') c else ''\n\
    \            if (vowel == '') count = 1L\n            else if (vowel == 'y') count\
    \ += 1L\n            else count += 0L\n        }\n        count", "        val\
    \ vowels = \"aeiou\".toSet\n        var count = 0\n        var cur = s\n     \
    \   while (cur.length >= 1) {\n            val v = cur.charAt(0)\n           \
    \ if (vowels.contains(v)) {\n                count += 1\n            }\n     \
    \       cur = cur.substring(1)\n        }\n        count.toLong", "        val\
    \ vowels = Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        vowels.count(vowels.find(_==s.last).toSet)",
  "        val countVowels = s filter { c => c match {\n            case \"a\" | \"\
    e\" | \"i\" | \"o\" | \"u\" => true\n            case _ => false\n        }",
  "        val vowels = ('a' to 'z' | 'A' to 'Z' | 'y' to 'z').toList\n        val\
    \ wordLength = s.length\n        val vowelsCount = new mutable.MutableLong[String]\n\
    \        for (i<- 0 until wordLength) {\n            if (vowels.contains(s(i)))\
    \ {\n                vowelsCount.value(i) = vowelsCount.value(i) + 1 \n      \
    \      }\n        }\n        vowelsCount.length", "        var count = 0\n   \
    \     for(ch <- s) {\n          val index = ch.toInt\n          val l = index.toLong\n\
    \          val bit = (1 & (l - 1).toInt)\n          count += bit == 0 ? 0 : 1\n\
    \        }\n        count\n      }\n}\n</code>\n<|/ a tags=string,count,scala\
    \ |>\n<| a tags=string,count,scala |>\n<code>\nval listString: ListBuffer[String]\
    \ = ListBuffer(\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\")\nval str:\
    \ String = \"abcde\"\nfor (x <- listString){\n  if (x.contains(str)){\n    println(x.length)\n\
    \  }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is incorrect. The OP wants\
    \ the number of vowels, not the length of the string.\n<|/ c |>\n<| a |>\nI came\
    \ up with another solution:\n<code>\ndef vowels(s: String): Int = s.filterNot(_\
    \ == 'a').filter(x => x != 'a').length\n</code>\n<|/ a dscore=0 tags=string,count,scala\
    \ |>\n<| a tags=string,count,scala |>\nAnother solution:\n<code>\nval listString:\
    \ ListBuffer[String] = ListBuffer(\"abcde\", \"abcde\", \"abcde\", \"abcde\",\
    \ \"abcde\")\nval str: String = \"abcde\"\n\nval result = listString.map{x=>x.count(y\
    \ => y == str)}.sum\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution also doesn't\
    \ count 'e'.\n<|/ c |>\n<| a tags=string,count,scala |>\n<code>\ndef vowels(s:String):Int=s.toCharArray().foldLeft((0,0)){case((count,c),i)=>\n\
    \      if(c.equals('a')) \n        count + 1\n      else if(c == 'e')\n      \
    \  count + 1\n      else if(c == 'i')\n        count + 1\n      else if(c == 'o')\n\
    \        count + 1\n      else if(c == 'u')\n        count + 1\n      else if(c\
    \ == 'y') \n        count + 1\n      else \n        count \n  }._1\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,count,scala |>\n<code>\ndef vowels(s:String):Int={\n\
    \  var count = 0\n  for(x <- s.toCharArray()){\n    count += if(x =='a'||x =='e'||x\
    \ =='i'||x =='o'||x =='", "        val vowelsCount_map = Map[String, Long]()\n\
    \        for (i <- 0 to s.length-1) {\n            val c = s.charAt(i)\n     \
    \       if (vowelsCount_map.contains(c)) {\n                vowelsCount_map(c)\
    \ = vowelsCount_map(c) + 1 }\n            else { vowelsCount_map(c) = 1 } }\n\
    \        vowelsCount_map.values.toArray.sum", "        val vowels = Array(\"a\"\
    ,\"e\",\"i\",\"o\",\"u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n\
    \        s.reverse.filter(x => vowels.contains(x)).length + vowelsCount", "  \
    \      val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val lengths\
    \ = s.map(_.length)\n        val vowelCounts = lengths.scanLeft(0)(_ + lengths.last)\n\
    \                .map(vowelCounts.count(_ == 1))\n                .filter(_ >\
    \ 0)\n                .map(_._2)\n                .sum\n        vowelCounts",
  "        def isVowel(x: Char): Boolean = \n            x match {\n            case\
    \ 'a' | 'e' | 'i' | 'o' | 'u' => {\n                true\n            }\n    \
    \        case _ => {\n                false\n            }\n        }\n      \
    \  val vowels = mutable.Set[Char]('a','e','i','o','u')\n        val count = s.length\n\
    \        if (count == 0) 0\n        else {\n            var vowelCount = 0\n \
    \           for (i <- 0 until count) {\n                val c = s.charAt(i)\n\
    \                if (!vowels.contains(c)) {\n                    vowelCount +=\
    \ 1\n                }\n            }\n            vowelCount\n        }", " \
    \        var count = 0\n         val vowels = \"aeiou\"\n         for (i <- 0\
    \ until s.length) {\n            val subString = s.substring(i, s.length)\n  \
    \          count += vowels.count(subString.toChar)\n         }\n         count",
  "        var numVowels : Long = 0\n        var vowel : String = \"\"\n        for\
    \ (letter : String <- s.split(\"\")) {\n            if (\"aeiou\".contains(letter))\
    \ {\n                vowel = letter\n            }\n        }\n        if (\"\
    y\".equals(vowel)) {\n            for (letter : String <- s.split(\"\")) {\n \
    \               if (letter != \"y\" && letter != \"Y\") {\n                  \
    \  numVowels += 1\n                }\n            }\n        }\n        return\
    \ numVowels", "        val vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    \
    \    var count = 0\n        for (letter <- s) {\n            if (vowels.contains(letter))\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val vowels = \"aeiou\"\n        val count = mutableListBuffer[Long]()\n\
    \        for (i <- 0 until s.length) count+=1 if (vowels.contains(s.charAt(i)))\n\
    \        return count.length", "        val s = \"\"\n        val vowels = \"\
    AEIOUY\"\n        val count = Array[Long]()\n        for( i <- 0 until s.length\
    \ ) {\n            if( vowels.contains(s.charAt(i)) ) {\n                count\
    \ += 1 \n            }\n        }\n        return count.reduce((a, b) => a + b)",
  "        val c = s.length\n        var c = 0\n        var i = 0\n        var k =\
    \ 0\n        var v = 0\n        while (i < c) {\n            if (s.charAt(i) ==\
    \ 'a') {\n                v = v + 1\n            }\n            else if (s.charAt(i)\
    \ == 'e') {\n                v = v + 1\n            }\n            else if (s.charAt(i)\
    \ == 'i') {\n                v = v + 1\n            }\n            else if (s.charAt(i)\
    \ == 'o') {\n                v = v + 1\n            }\n            else if (s.charAt(i)\
    \ == 'u') {\n                v = v + 1\n            }\n            else {\n  \
    \              k = k + 1\n            }\n            i = i + 1\n        }\n  \
    \      if (k == c) {\n            return v\n        }\n        else {\n      \
    \      return 0\n        }", "        val vowels = \"aeiou\"\n        val n =\
    \ s.length\n        var count = 0L\n        var i = 1\n        while (i <= n)\
    \ {\n            val x = s.charAt(i-1)\n            val y = s.charAt(i)\n    \
    \        if (vowels(x.toUpperCase()) && (y.toUpperCase() == vowels(x.toUpperCase())))\
    \ {\n                count += 1L\n                i += 1\n            }\n    \
    \        else {\n                i += 1\n            }\n        }\n        count",
  "        val vowels =  mutable.ListBuffer[Char]('a','e','i','o','u','y')\n     \
    \   var count = 0\n        for(char <- s) {\n            if(vowels.contains(char))\
    \ count += 1\n        }\n        count.toLong", "       var count = 1\n      \
    \ for (i <- 0 until s.length)\n           if (('A' <= s.charAt(i) ) && (s.charAt(i)\
    \ <= 'z')) count++ \n           else if ('a' <= s.charAt(i) ) && (s.charAt(i)\
    \ <= 'z')\n           else if ('e' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n\
    \           else if ('i' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n          \
    \ else if ('o' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n           else if ('u'\
    \ <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n           else if ('y' <= s.charAt(i)\
    \ ) && (s.charAt(i) <= 'z')\n           count++\n       count\n   }\n\n    //\
    \ Write a function vowels_count_mutable which takes a string representing\n  \
    \  // a word as input and returns the number of vowels in the string.\n    //\
    \ Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    //\
    \ vowel, but only when it is at the end of the given word.\n    // Example:\n\
    \    // >>> vowels_count_mutable((\"abcde\"))\n    // (2l)\n    // >>> vowels_count_mutable((\"\
    ACEDY\"))\n    // (3l)\n    def vowels_count_mutable(s : String) : Long = {\n\
    \       val count = collection.mutable.HashMap[Char, Long]()\n       for (i <-\
    \ 0 until s.length)\n           if (('A' <= s.charAt(i) ) && (s.charAt(i) <= 'z'))\
    \ count.put(s.charAt(i), count\n           else if ('a' <= s.charAt(i) ) && (s.charAt(i)\
    \ <= 'z')\n           else if ('e' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n\
    \           else if ('i' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n          \
    \ else if ('o' <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n           else if ('u'\
    \ <= s.charAt(i) ) && (s.charAt(i) <= 'z')\n           else if ('y' <= s.charAt(i)\
    \ ) && (s.charAt(i) <= 'z')\n           count.put(s.charAt(i), count+1 )\n   \
    \    count.valuesIterator.sum", "        var count = 0L\n        var index = 0\n\
    \        while (index < s.length) {\n            var c = s(index)\n          \
    \  if (\"aeiouAEIOU\".indexOf(c) >= 0) {\n                count += 1\n       \
    \     }\n            index += 1\n        }\n        count", "        s.toLowerCase().toList.filter(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u').size", "      \
    \  var count = 0;\n        var vowels = \"aeiouAEIOU\".toSet\n        var yCount\
    \ = 0\n        val wordArray = s.toLowerCase split \"\"\n        wordArray.foreach(\
    \ w => {\n            val vowelCountArray = vowels.count( vowel => w.startsWith(vowel)\
    \ )\n            count += vowelCountArray(0)\n            count += vowelCountArray(1)\n\
    \            count += vowelCountArray(2)\n            if (w.endsWith(\"y\")) {\n\
    \                yCount += 1\n            }\n        })\n        count += yCount\n\
    \        count += wordArray.length - 1\n        count", "        // Your code\
    \ here.\n        val vowels : mutable.Set[Char] = scala.collection.mutable.Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val count : mutable.Map[Char, Int] = scala.collection.mutable.Map[Char,\
    \ Int]()\n        for(c <- s) {\n            if('z' == c) {\n                count\
    \ += 1\n            } else {\n                count += vowels(c).size\n      \
    \      }\n        }\n        count.filter(_._2 > 1).map(_._1).reduceLeft(_ + _)",
  '        s.replaceAll("""[^AEIOUaeiouy]""", "-").count(i => i != "-")', "      \
    \  def isVowel(ch: Char) = ('a' to 'z') contains ch\n        val counts = mutable.HashMap[(Char,\
    \ Char), Long]()\n        for (ch <- s.chars) {\n            counts.put((ch, ch),\
    \ 1l) // one count for both\n            if (ch == 'y' && chs.last != 'y') counts.put((chs.last,\
    \ ch), 1l)\n            else counts.put((ch, chs.last), 1l)\n        }\n     \
    \   counts.values.sum", "        // Write your code here\n        var count=0\n\
    \        var last=-1\n        for(i <- 0 to s.length-1){\n            if(last==-1\
    \ || s[i]=='a'){\n                count+=1\n            }\n            last=s[i]\n\
    \        }\n        return count", "        val vowels = \"aeiou\"\n        val\
    \ vowels_count = s.filter(c => vowels.contains(c)).size\n        vowels_count",
  "        val vs = List('a', 'e', 'i', 'o', 'u')\n        val vowels = vs.filter(v\
    \ => s.contains(v))\n        s.toString.split('').map(_.toChar).filter { c =>\n\
    \            vowels.contains(c.charAt(0)) &&\n            vowels.contains(c.charAt(1))\
    \ &&\n            vowels.contains(c.charAt(2)) &&\n            vowels.contains(c.charAt(3))\
    \ &&\n            vowels.contains(c.charAt(4)) &&\n            vowels.contains(c.charAt(5))\
    \ &&\n            vowels.contains(c.charAt(6))\n        }.size", "        // Solution\
    \ is here\n        var res = 0L\n        for(ch <- s){\n            if(ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'){\n                res +=\
    \ 1\n            }\n        }\n        res", "        val vowels = ('a','e','i','o','u')\n\
    \        val vowels_array = Array(vowels: _*)\n\n        val vowels_count = s.toList\n\
    \            .map{ x =>\n                vowels_array.indexOf(x.toUpperCase)\n\
    \            }\n            .sum\n            .toLong\n\n        vowels_count",
  "        val count = mutable.MutableMap[Char, Long]()\n        s.map(c => if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count(c) += 1 else 0\
    \ ).sum", "        val vowels = \"aieou\"\n        s.foldLeft(0){ case (n,c) =>\n\
    \            (n + (if (vowels.contains(c)) 1 else 0)) * (if (c == 'y' && (n+2)>s.length)\
    \ 2 else 1)\n        }", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsSet = mutable.Set[Char](vowels.toSeq: _*)\n        var count\
    \ = 0\n        for(letter <- s){\n            if((letter == 'a') || (letter ==\
    \ 'e') || (letter == 'i') || (letter == 'o') || (letter == 'u')){\n          \
    \      count += 1\n            }else if((letter == ' ') && (vowelsSet.contains(letter))){\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   var count = 0L\n        var c = 0\n        var x = 0\n        for(ch <- s)\
    \ {\n            if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch ==\
    \ 'u') {\n                count += 1\n            }\n            if(ch == 'y'\
    \ && c == 0) {\n                count += 1\n                x = 0\n          \
    \  }\n            x += 1\n            c += 1\n        }\n        if(x > 0) {\n\
    \            count += x\n        }\n        count + 1", "        val vowels =\
    \ Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        s.toLowerCase().count(c =>\
    \ vowels.indexOf(c) >= 0)", "        var count = 0\n        for(char <- s) {\n\
    \            val lowerCaseChar = char.toLowerCase\n            val lowerCaseChars\
    \ = lowerCaseChar.toList\n            if(lowerCaseChars.contains(\"a\") || lowerCaseChars.contains(\"\
    e\") || lowerCaseChars.contains(\"i\") || lowerCaseChars.contains(\"o\") || lowerCaseChars.contains(\"\
    u\")) {\n                count += 1\n            }\n        }\n        count +\
    \ 1", "        val vowels = Set('a','e','i','o','u')\n        val vowelCounts\
    \ = mutable.Map[Char, Int]()\n        for (i <- 1 to s.length - 1) {\n       \
    \     vowelCounts += (s.charAt(i) == s.charAt(i).toLower ? s.charAt(i).toLower:\
    \ s.charAt(i).toUpper) ++ vowels\n        }\n        vowelCounts.count{case (k,\
    \ v) => v >= 1}", "        var count = 0L\n        for (ch <- s) {\n         \
    \   if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' &&\n   \
    \            ch != 'y')\n                count += 1\n        }\n        count",
  "        // TODO: Your code here!\n        val vowels = \"aeiou\"\n        val vowel_count\
    \ = 0\n        for(letter <- s) {\n            if((letter in vowels) && !(letter\
    \ == s(s.length-1))) {\n                vowel_count = vowel_count + 1\n      \
    \      }\n        }\n        vowel_count", "        val vowels = List(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        var count = 0\n        s.foreach(c => {\n \
    \           if (vowels.contains(c))\n                count += 1\n        })\n\
    \        count", "        var count : Long = 0\n        var vowelCount = 0\n \
    \       var finalString = \"\"\n        var i = s.length() - 1\n        while\
    \ (i >= 0) {\n            if (vowels.contains(s(i))) {\n                vowelCount\
    \ = vowelCount + 1\n            }\n            else {\n                count =\
    \ count + 1\n            }\n            i--\n        }\n        finalString =\
    \ finalString + (vowelCount)\n        return count", "        val vowels = \"\
    aeiou\"\n        var count = 0\n        for (x <- s) {\n            val a = x.toLowerCase\
    \ \n            if (vowels.indexOf(a) != -1)\n                count += 1\n   \
    \     }\n        count", "        val list = s.toCharArray\n        val count\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until list.length){\n        \
    \    if(list(i) == 'a' || list(i) == 'e' || list(i) == 'i' || list(i) == 'o' ||\
    \ list(i) == 'u' || list(i) == 'y'){\n                count += list(i)\n     \
    \       }\n        }\n        return count.length", "        //Write your code\
    \ here\n        val vowelList: mutable.HashSet[Char] = mutable.HashSet[Char]()\n\
    \        var count = 0\n        for (v <- s) {\n            if (vowelList.contains(v))\n\
    \                count += 1\n            else\n                vowelList += v\n\
    \        }\n        \n        return count", "        var vowelsCount = 0\n  \
    \      var vowelsCountIndex = 0\n        var vowelsCountIndexEnd = 0\n       \
    \ var vowelsCountIndexStart = 0\n        var vowelsCountIndexEndStart = 0\n  \
    \      var vowelsCountIndexStartEnd = 0\n        val wordArray = s.toUpperCase().toCharArray\n\
    \        for (i <- 0 until wordArray.length)\n        {\n            if (vowelsCountIndex\
    \ == 0 && vowelsCountIndexEnd == 0 && vowelsCountIndexStart == 0 && vowelsCountIndexEndStart\
    \ == 0)\n            {\n                vowelsCountIndexStart = i\n          \
    \      vowelsCountIndexEnd = i + 1\n            }\n            if (vowelsCountIndex\
    \ == 0 && vowelsCountIndexEnd == 0 && vowelsCountIndexStart != 0)\n          \
    \  {\n                vowelsCountIndexEnd = i\n                vowelsCountIndexStartEnd\
    \ = i + 1\n            }\n            if (vowelsCountIndex != 0 && vowelsCountIndexEnd\
    \ == 0 && vowelsCountIndexStart != 0 && vowelsCountIndexEndStart != 0)\n     \
    \       {\n                vowelsCountIndexEnd = i\n                vowelsCountIndexStartEnd\
    \ = i + 1\n            }\n            if (vowelsCountIndex != 0 && vowelsCountIndexEnd\
    \ == 0 && vowelsCountIndexStart != 0 && vowelsCountIndexEndStart != 0 && vowelsCountIndexStart\
    \ != vowelsCountIndexEnd)\n            {\n                vowelsCountIndexEnd\
    \ = i\n                vowelsCountIndexStartEnd = i + 1\n            }\n     \
    \       if (vowelsCountIndex != 0 && vowelsCountIndexEnd == 0 && vowelsCountIndexStart\
    \ != 0 && vowelsCountIndexEndStart != 0 && vowelsCountIndexStart == vowelsCountIndexEnd)\n\
    \            {\n                vowelsCountIndexEnd = i\n                vowelsCountIndexStartEnd\
    \ = i + 1\n            }\n            if (vowelsCountIndex != 0 && vowelsCountIndexEnd\
    \ == 0 && vowelsCountIndexStart != 0 && vowelsCountIndexEndStart != 0 && vowelsCountIndexStart\
    \ != vowelsCountIndexEnd)\n            {\n                vowelsCountIndexStart\
    \ = i\n                vowelsCountIndexStartEnd = i + 1\n            }\n     \
    \       if (vowelsCountIndex != 0 && vowelsCountIndexEnd == 0 && vowelsCountIndexStart\
    \ != 0 && vowelsCountIndexEndStart != 0 && vowelsCountIndexStart != vowelsCountIndexEnd)\n\
    \            {\n                vowelsCountIndexStart = i\n                vowelsCountIndexEndStart\
    \ = i + 1\n            }\n            if (vowelsCountIndex != 0 && vowelsCountIndexEnd\
    \ == 0 && vowelsCountIndexStart != 0 && vowelsCountIndexEndStart != 0 && vowelsCountIndexStart\
    \ == vowelsCountIndexEnd)\n            {\n", "        var vowelCount = 1\n   \
    \     for ( c <- s.toCharArray ) {\n            if ( c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' ) {\n                vowelCount += 1\n      \
    \      }\n        }\n        vowelCount", "        var count : Long = 0\n    \
    \    val alphabet = List('a', 'e', 'i', 'o', 'u')\n        val wordCount = s.split(\"\
    \\\\s+\").length\n        for (i <- 0 to wordCount -1) {\n            val word\
    \ = s.substring(i,i+1)\n            val foundChar = word.filter(c => alphabet.isInstance(c)).map(_.asInstanceOf[Char]).toList\n\
    \            count += foundChar.count(c => c =='a')\n            count += foundChar.count(c\
    \ => c == 'e')\n            count += foundChar.count(c => c == 'i')\n        \
    \    count += foundChar.count(c => c == 'o')\n            count += foundChar.count(c\
    \ => c == 'u')\n            count += word.filter(c => !alphabet.isInstance(c)).count(c\
    \ => c =='y')\n        }\n        count", "        var count = 0\n        var\
    \ vowels = ('a','e','i','o','u')\n        var lastVowel = 'y'\n        for (c\
    \ <- s) {\n            if (vowels(c) == lastVowel) {\n                count +=\
    \ 1\n            }\n            lastVowel = c\n        }\n        count", "  \
    \      val vowelSet = mutable.Set.empty[Char]\n        val vowelCount = mutable.List.empty[Long]\n\
    \        for (i <- 0 until s.length)\n        {\n            val char = s.charAt(i)\n\
    \            val isVowel = ('a' <= char && char <= 'u') || ('e' <= char && char\
    \ <= 'i') || ('i' <= char && char <= 'o') || ('o' <= char && char <= 'u')\n  \
    \          if (vowelSet.contains(char) && !isVowel)\n                vowelCount\
    \ += -1\n            else\n                vowelSet += char\n        }\n     \
    \   vowelCount.length", "        val vowels = \"aeiouAEIOU\"\n        val strArray\
    \ = s.toUpperCase.split(\"\").toArray\n        var count = 0\n        for (x <-\
    \ strArray) {\n            count += (strArray.indexOf(x).toLong + 1) match {\n\
    \                case -1 => vowels.indexOf(x).toLong\n                case i if\
    \ vowels.indexOf(x).toLong == i => vowels.indexOf(x).toLong\n                case\
    \ i => 0\n            }\n        }\n        return count", "        var i = 0\n\
    \        val vowels = \"aeiouAEIOU\".toSet\n        var num = 0\n        val lengths\
    \ = s.toList.length\n        var vowelIndex = 0\n        for (i <- 0 until lengths)\
    \ {\n            if (vowels(s(i))) {\n                num += 1\n            }\n\
    \            val c = s(i)\n            if (vowelIndex < vowels.length && vowels(c))\
    \ {\n                vowelIndex += 1\n            }\n        }\n        num",
  "        s.replaceAll(\"[^aeiou]\", \"\")\n            .replaceAll(\"y\", \"\")\n\
    \            .chars\n            .filter(_.isLetter)\n            .count(_ ==\
    \ 'a')", "        val arr = s.toList\n        val vc = arr.count(_ == 'a')\n \
    \       vc += arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n       \
    \ vc += arr.count(_ == 'o')\n        vc += arr.count(_ == 'u')\n        vc +=\
    \ arr.count(_ == 'y')\n        val len = s.length\n        vc += arr.count(_ ==\
    \ 'a')\n        vc += arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n\
    \        vc += arr.count(_ == 'o')\n        vc += arr.count(_ == 'u')\n      \
    \  vc += arr.count(_ == 'y')\n        vc += arr.count(_ == 'a')\n        vc +=\
    \ arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n        vc += arr.count(_\
    \ == 'o')\n        vc += arr.count(_ == 'u')\n        vc += arr.count(_ == 'y')\n\
    \        vc += arr.count(_ == 'a')\n        vc += arr.count(_ == 'e')\n      \
    \  vc += arr.count(_ == 'i')\n        vc += arr.count(_ == 'o')\n        vc +=\
    \ arr.count(_ == 'u')\n        vc += arr.count(_ == 'y')\n        vc += arr.count(_\
    \ == 'a')\n        vc += arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n\
    \        vc += arr.count(_ == 'o')\n        vc += arr.count(_ == 'u')\n      \
    \  vc += arr.count(_ == 'y')\n        vc += arr.count(_ == 'a')\n        vc +=\
    \ arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n        vc += arr.count(_\
    \ == 'o')\n        vc += arr.count(_ == 'u')\n        vc += arr.count(_ == 'y')\n\
    \        vc += arr.count(_ == 'a')\n        vc += arr.count(_ == 'e')\n      \
    \  vc += arr.count(_ == 'i')\n        vc += arr.count(_ == 'o')\n        vc +=\
    \ arr.count(_ == 'u')\n        vc += arr.count(_ == 'y')\n        vc += arr.count(_\
    \ == 'a')\n        vc += arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n\
    \        vc += arr.count(_ == 'o')\n        vc += arr.count(_ == 'u')\n      \
    \  vc += arr.count(_ == 'y')\n        vc += arr.count(_ == 'a')\n        vc +=\
    \ arr.count(_ == 'e')\n        vc += arr.count(_ == 'i')\n        vc += arr.count(_",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowel_end\
    \ = \"y\" :: vowels\n        vowel_end.forall(vowels.contains)\n            ?\
    \ vowels.count(vowels.contains)\n            : 0", "        val vowelsMap = Map('a'\
    \ -> 1, 'e' -> 1, 'i' -> 1, 'o' -> 1, 'u' -> 1)\n        var vowelsCount = 0\n\
    \        for (x <- s) {\n            if (vowelsMap.contains(x))\n            \
    \    vowelsCount += 1\n        }\n        if (vowelsCount > 0 && vowelsCount !=\
    \ s.length)\n            vowelsCount\n        else\n            vowelsCount +\
    \ (if (s.last == 'y') 1 else 0)", "        var count : Long = 0\n        for(letter\
    \ : String <- s.toCharArray()){\n            if(letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u'){\n                count\
    \ += 1\n            }\n        }\n        return count", "        val vowels =\
    \ \"aeiou\"\n        val count = s.count(x => vowels.indexOf(x) >= 0)\n      \
    \  count + count(s.last)", "        var i = 0\n        var n = 0\n        var\
    \ vowels = \"aeiou\"\n        val length = s.length\n        while (i<length){\n\
    \            if (vowels.indexOf(s.charAt(i).toString.toLowerCase) >=0)\n     \
    \       {\n                n += 1\n            }\n            i += 1\n       \
    \ }\n        n", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        s.toList\n            .map(_.toLowerCase)\n            .map(v => vowels.contains(v))\n\
    \            .sum", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val vowelsSet = vowels.toSet\n        val vowelCount = s.filter(vowelsSet.contains).length\n\
    \        val vowelsCount = 0\n        for (i <- 0 to s.length - 1) {\n       \
    \     if (vowelsSet.contains(s.charAt(i))) {\n                vowelsCount = vowelsCount\
    \ + 1\n            }\n        }\n        vowelsCount", "        var count = 0L\n\
    \        var lastChar = s.charAt(s.length-1)\n        for (i <- 0 until s.length\
    \ -1) {\n            if (lastChar == 'y' && s.charAt(i) == 'y') count++\n    \
    \        if (lastChar == 'a' && s.charAt(i) == 'a') count++\n            if (lastChar\
    \ == 'e' && s.charAt(i) == 'e') count++\n            if (lastChar == 'i' && s.charAt(i)\
    \ == 'i') count++\n            if (lastChar == 'o' && s.charAt(i) == 'o') count++\n\
    \            if (lastChar == 'u' && s.charAt(i) == 'u') count++\n            lastChar\
    \ = s.charAt(i)\n        }\n        count", "      var count = 0L\n      s.toList\
    \ match {\n        case Nil => count\n        case Nil :+ _ => count\n       \
    \ case _ :+ _ => count\n        case _ :+ x => {\n          val last = s.last\n\
    \          val y = last equals x.toLowerCase || last equals \"y\" ? \"y\" : last\n\
    \          count += y == \"y\" || y == \"e\" || y == \"a\" ? 1 : 0\n        }\n\
    \      }\n      count", "        val vowels = \"aeiou\".toList\n        val vowelCount\
    \ = 0\n        for (a <- 0 until s.length) {\n            vowelCount += vowels.count(s.charAt(a)\
    \ match {\n                case 'a' | 'e' | 'i' | 'o' | 'u' => 1\n           \
    \     case _ => 0\n            })\n        }\n        vowelCount", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0L\n        for (i\
    \ <- 0 until s.length - 1) {\n            if (vowels(i) == s(i)) {\n         \
    \       count += 1\n            }\n        }\n        count", "        val vowels\
    \ = \"aeiou\".toCharArray\n        val count = s.length\n        var sum = 0\n\
    \        for(i <- 0 until count) {\n            val ch = s.charAt(i)\n       \
    \     if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n  \
    \              sum += vowels.length\n            }\n        }\n        sum", " \
    \     var vowel_count = s.toCharArray.filter( c => c =='a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u').length\n      vowel_count = vowel_count + 1\n \
    \     return vowel_count", "      val vowelSet = new mutable.HashSet[Char]()\n\
    \      s.toCharArray.foreach(vowelSet += _)\n      vowelSet.size * (vowelSet.size\
    \ + 1) / 2", "        val vowels = \"aeiou\".toSet\n        val y = \"y\".toChar\n\
    \        val n = s.length\n\n        val vowelsCount = for (i <- 0 until n) yield\
    \ {\n            val n = s.charAt(i)\n\n            if (n.isLower) {\n       \
    \         vowels contains n.toLower\n            } else if (n.isUpper) {\n   \
    \             vowels contains n.toUpper\n            } else if (n.isDigit) {\n\
    \                false\n            } else if (n.toChar != y || n == y && i ==\
    \ n - 1) {\n                vowels contains n.toChar\n            } else {\n \
    \               false\n            }\n        }.sum\n\n        vowelsCount", " \
    \       // TODO: Write the function here\n        var count = 0\n        s.iterator().foreach\
    \ { x =>\n            if (x == \"a\")\n                count += 1\n          \
    \  if (x == \"e\")\n                count += 1\n            if (x == \"i\")\n\
    \                count += 1\n            if (x == \"o\")\n                count\
    \ += 1\n            if (x == \"u\")\n                count += 1\n        }\n \
    \       count", "        // write your code here\n        var i = 0\n        var\
    \ j = 0\n        var count = 0\n        for(i <- 0 until s.length){\n        \
    \    for(j <- 0 until s.length){\n                if(i == j)\n               \
    \     continue\n                if(s(i) == s(j) && s(i) != 'y')\n            \
    \        count++\n            }\n        }\n        return count", "       var\
    \ count = 0L\n       var vowels = Array('a','e','i','o','u')\n       var lastVowel:\
    \ Option[Char] = None\n       for (c1 <- s ; c2 <- vowels) {\n           if (c1\
    \ == c2) {\n               count += 1\n               lastVowel = Some(c1)\n \
    \          }\n       }\n       lastVowel.orElse {\n           for (c1 <- s ; c2\
    \ <- vowels) {\n               if (c1 != c2) {\n                   count += 1\n\
    \                   lastVowel = Some(c1)\n               }\n           }\n   \
    \    }\n       count", "        // write your code here\n        val vowels =\
    \ List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowel_count = s.count(vowels).toLong\n\
    \        vowel_count += s.last.equals(\"y\") ? 1 : 0\n        vowel_count", " \
    \       var count = 0L\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u'){\n                count += 1\n            }\n        }\n\
    \        return count", "       var vowelSet = mutable.Set[Char]()\n       for\
    \ (letter <- s.toCharArray) vowelSet += letter\n       vowelSet.count { letter\
    \ =>\n           letter =='a' || letter =='e' || letter =='i' || letter =='o'\
    \ || letter =='u'\n       }", "        var count = 0\n        val wordLength =\
    \ s.length\n        for (i <- 0 until wordLength) {\n            if (s.charAt(i)\
    \ == 'a') count += 1\n            if (s.charAt(i) == 'e') count += 1\n       \
    \     if (s.charAt(i) == 'i') count += 1\n            if (s.charAt(i) == 'o')\
    \ count += 1\n            if (s.charAt(i) == 'u') count += 1\n            if (s.charAt(i)\
    \ == 'y' && i + 1 == wordLength) count += 1\n        }\n        count", "    \
    \    val vowelsCountArray = Array('a', 'e', 'i', 'o', 'u')\n        val array\
    \ = s.toCharArray\n        var index = 0\n        var count = 0\n        var isVowel\
    \ = true\n\n        while (index < array.length) {\n            if (array[index]\
    \ == vowelsCountArray(0)) {\n                count += 1\n            } else {\n\
    \                isVowel = false\n            }\n            index += 1\n    \
    \    }\n\n        if (isVowel) {\n            count += 1\n        }\n        count",
  "        var count = 0\n        for (c <- s) {\n            if (c =='a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') count += 1\n            if (c == 'y')\
    \ count -= 1\n        }\n        s.length * count", "        val vowels = \"aeiouAEIOU\"\
    \n        val count = s.length\n        s.toCharArray.filter(vowels.indexOf(_)\
    \ > -1).length", "        val n = s.length()\n        val vowels = \"aeiouAEIOU\"\
    \n        var count = 0\n        for (i <- 0 until n) {\n            val v = s(i)\n\
    \            if (vowels.indexOf(v) >= 0) {\n                count += 1\n     \
    \       }\n        }\n        count", "        // Write your code here\n     \
    \   var vowels: Long = 0\n        var chars = s.toCharArray\n        for (i <-\
    \ 0 until chars.length) {\n            if(chars(i) == 'a' || chars(i) == 'e' ||\
    \ chars(i) == 'i' || chars(i) == 'o' || chars(i) == 'u'){\n                vowels\
    \ += 1\n            }\n        }\n        return vowels", "        val vowels\
    \ = \"aaiou\"\n        val vowels_count = s.length - vowels.length\n        val\
    \ vowels_array = vowels.toCharArray\n        val vowels_array_len = vowels_array.length\n\
    \        var i = 0\n        var j = 0\n        var count = 0\n        while (i\
    \ < s.length)\n            if (vowels_count(s.charAt(i)) > 0 && vowels_count(s.charAt(i))\
    \ == vowels_count(s.charAt(i + 1))) {\n                count = count + 1\n   \
    \             i = i + 1\n            }\n            else {\n                while\
    \ (j < vowels_array_len)\n                    if (vowels_count(s.charAt(i)) >\
    \ 0 && vowels_count(s.charAt(i)) == vowels_count(s.charAt(i + 1))) {\n       \
    \                 count = count + 1\n                        i = i + 1\n     \
    \                   break\n                    }\n                    else {\n\
    \                        j = j + 1\n                    }\n            }\n   \
    \     vowels_count", "        // Your code here\n        val vowels = mutable.ArrayBuffer(\n\
    \            ('a'),\n            ('e'),\n            ('i'),\n            ('o'),\n\
    \            ('u'),\n            ('y'),\n        )\n        val vowelCount = 0\n\
    \        for(x <- 0 until s.length){\n            if(!vowels(x)){\n          \
    \      if(s.length == x){\n                    vowelCount += 1\n             \
    \   }\n            }\n        }\n        vowelCount", "        def isVowel(ch:\
    \ Char): Boolean = {\n            ch match {\n                case 'a' | 'e' |\
    \ 'i' | 'o' | 'u' =>\n                    true\n                case _ => false\n\
    \            }\n        }\n\n        var count = 0\n        for (i <- s.indices)\
    \ {\n            if (isVowel(s.charAt(i))) {\n                count += 1\n   \
    \         }\n        }\n        count", "        var count = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e'\
    \ ||\n                s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\n          \
    \      s.charAt(i) == 'u')\n                count++\n        count", "       \
    \ val map = Map('a','e','i','o','u')\n        var vowels = 0\n        var lastVowel\
    \ = -1\n        var index = s.length\n        while(index != 0) {\n          \
    \  if(map(s(index-1)) != -1){\n                lastVowel = s(index-1)\n      \
    \          vowels = vowels + 1\n            }\n            index = index - 1\n\
    \        }\n        if(lastVowel == -1)\n            return vowels\n        else\n\
    \            return vowels + 1", "        var count = 0\n        var count = 0\n\
    \        for (i <- 0 to s.length-1) {\n            if (s.charAt(i) == 'a') count+=1\n\
    \            if (s.charAt(i) == 'e') count+=1\n            if (s.charAt(i) ==\
    \ 'i') count+=1\n            if (s.charAt(i) == 'o') count+=1\n            if\
    \ (s.charAt(i) == 'u') count+=1\n            if (s.charAt(i) == 'y') count +=\
    \ 2\n        }\n        count + 1", "        s.foreach(w => {\n            val\
    \ vowels = Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\")\n            val found = vowels.find(!vowels.contains(w))\n\
    \            found match {\n                case Some(true) => vowels.add(w)\n\
    \                case _ => vowels.remove(w)\n            }\n        })\n     \
    \   vowels.toSet.size // returns the number of vowels", "        val count = mutable.Map.empty[Char,\
    \ Long]\n        for(c: Char <- s) c match {\n            case 'a' => count.update(c,\
    \ 1L)\n            case 'e' => count.update(c + 1, 1L)\n            case 'i' =>\
    \ count.update(c + 2, 1L)\n            case 'o' => count.update(c + 3, 1L)\n \
    \           case 'u' => count.update(c + 4, 1L)\n            case _ => count.update(c,\
    \ 1L)\n        }\n        count.size * (1L / count.size)", "        // Write code\
    \ here\n        var vowelsCount = 0.0\n        for(i <- 0 until s.length)\n  \
    \      {\n            if(s(i) == 'a' ||\n                s(i) == 'e' ||\n    \
    \            s(i) == 'i' ||\n                s(i) == 'o' ||\n                s(i)\
    \ == 'u' ||\n                s(i) == 'y' ||\n                s(i) == 'A' ||\n\
    \                s(i) == 'E' ||\n                s(i) == 'I' ||\n            \
    \    s(i) == 'O' ||\n                s(i) == 'U' ||\n                s(i) == 'Y')\n\
    \            {\n                vowelsCount += 1\n            }\n        }\n \
    \       vowelsCount", "        var count = 0\n        s.toCharArray.foreach {\
    \ ch =>\n            if(ch == 'a') count += 1\n            if(ch == 'e') count\
    \ += 1\n            if(ch == 'i') count += 1\n            if(ch == 'o') count\
    \ += 1\n            if(ch == 'u') count += 1\n            if(ch == 'y') count\
    \ += 1\n        }\n        count.toLong", "      val vowels = \"aeiouAEIOU\".toCharArray\n\
    \      var count = 0L\n      var pos = 0\n      while (pos < s.length){\n    \
    \    val c = s.charAt(pos)\n        if (!vowels(c))\n          count += 1\n  \
    \      pos += 1\n      }\n      count", "        var count = 0\n        for(x\
    \ <- s.toCharArray) {\n            if(x != 'y' && x != 'e' && x != 'i' && x !=\
    \ 'o' && x != 'u' && x != 'a' && x != 'y') {\n                count += 1\n   \
    \         }\n        }\n        count", "        var count = 0\n        var lastVowel\
    \ : Option[String] = None\n\n        s.split('').foreach(c => {\n            if\
    \ (c =~ \"[aeiou]\") {\n                count += 1\n                lastVowel\
    \ = Some(c)\n            }\n        })\n\n        if (lastVowel.isDefined && lastVowel.get()\
    \ == \"y\") {\n            count += 1\n        }\n\n        count", "        var\
    \ count = 0\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i)\
    \ == 'a') count+=1\n            if (s.charAt(i) == 'e') count+=1\n           \
    \ if (s.charAt(i) == 'i') count+=1\n            if (s.charAt(i) == 'o') count+=1\n\
    \            if (s.charAt(i) == 'u') count+=1\n        }\n        count", "  \
    \      val arr = s.toCharArray\n        val counts = new mutable.HashSet[Char]\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) == 'a' || arr(i)\
    \ == 'e' || arr(i) == 'i' || arr(i) == 'o' || arr(i) == 'u') {\n             \
    \   counts += arr(i)\n            }\n        }\n        return counts.length"]
stop_tokens:
- "\n    }\n"
