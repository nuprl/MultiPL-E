language: scala
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isMultiplyPrime = (a.toInt) < (100)\n        println(isMultiplyPrime)\n\
    \        return isMultiplyPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8yghm1x.scala:17)\n\tat Problem.main(tmpq8yghm1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'true

    '
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = List(3, 5)\n        val product = a / primes.head\n\
    \        var isPrime = true\n        for (pprime <- primes until primes.last)\
    \ {\n            val divisor = product / pprime\n            product -= divisor\n\
    \            if (product < 1)\n                isPrime = false\n        }\n  \
    \      return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvgul1lzd.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (pprime <- primes until primes.last)\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value until is not a member of List[Int] - did you mean primes.unzip?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b = 0\n        var c = 0\n        var d = 0\n        var e =\
    \ 0\n        var f = 0\n        var g = 0\n        var h = 0\n        for(i <-\
    \ 1 to a) {\n            for(j <- 1 to a) {\n                for(h <- 1 to a)\
    \ {\n                    for(k <- 1 to a) {\n                        for(l <-\
    \ 1 to a) {\n                            for(m <- 1 to a) {\n                \
    \                for(n <- 1 to a) {\n                                    for(p\
    \  <- 1 to a) {\n                                        for(q  <- 1 to a) {\n\
    \                                            for(q1 <- 1 to a) {\n           \
    \                                     for(q2 <- 1 to a) {\n                  \
    \                                  for(q3 <- 1 to a) {\n                     \
    \                                   for(q4 <- 1 to a) {\n                    \
    \                                        for(q5 <- 1 to a) {\n               \
    \                                                 for(q6 <- 1 to a) {\n      \
    \                                                              for(q7 <- 1 to\
    \ a) {\n                                                                     \
    \   for(q8 <- 1 to a) {\n                                                    \
    \                        for(q9 <- 1 to a) {\n                               \
    \                                                 for(q10<- 1 to a) {\n      \
    \                                                                            \
    \  for(q11<- 1 to a) {\n                                                     \
    \                                   for(q12 <- 1 to a) {\n                   \
    \                                                                         for(q13\
    \ <- 1 to a) {\n                                                             \
    \                                   for(q14 <- 1 to a) {\n                   \
    \                                                                            \
    \     for(q15 <- 1 to a) {\n                                                 \
    \                                                       for(q16 <- 1 to a) {\n\
    \                                                                            \
    \                                for(q17 <- 1 to a) {\n                      \
    \                                                                            \
    \              for(q18 <- 1 to a) {\n                                        \
    \                                                                            for(q19\
    \ <- 1 to a) {\n                                                             \
    \                                                           for(q20 <- 1 to a)\
    \ {\n                                                                        \
    \                                                    for(q21 <- 1 to a) {\n  \
    \                                                                            \
    \                                                  for(q22 <- 1 to a) {\n    \
    \                                                                            \
    \                                                    for(q23 <- 1 to a) {\n  \
    \                                                                            \
    \                                                          for(q24 <- 1 to a)\
    \ {\n                                                                        \
    \                                                                    if(isPrime(j)&&isPrime(k)&&isPrime(l))&&\n\
    \                                                                            \
    \                                                                        isPrime(m)&&isPrime(n)&&isPrime(p)&&isPrime(q)&&isPrime(q1)&&\n\
    \                                                                            \
    \                                                                        isPrime(q2)&&isPrime(q3)&&isPrime(q4)&&isPrime(q5)&&isPrime(q6)&&isPrime(q7)&&\n\
    \                                                                            \
    \                                                                        isPrime(q8)&&isPrime(q9)&&isPrime(q10)&&isPrime(q11)&&isPrime(q12)&&isPrime(q13)&&\n\
    \                                                                            \
    \                                                                        isPrime(q14)&&isPrime(q15)&&isPrime(q16)&&isPrime(q17)&&isPrime(q18)&&isPrime(q19)&&\n\
    \                                                                            \
    \                                                                        isPrime(q20)&&isPrime(q21)&&isPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppkfly1mh.scala:73:0 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkfly1mh.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to a) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (a : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppkfly1mh.scala:20:26 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to a) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkfly1mh.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e[0m(h\
    \ <- \e[31m1\e[0m to a) {\n\e[31m\e[31m   |\e[0m                             \
    \ ^\e[0m\n\e[31m   |\e[0m                              Found:    (a : Long)\n\e\
    [31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkfly1mh.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mfor\e[0m(k <- \e[31m1\e[0m\
    \ to a) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (a : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppkfly1mh.scala:23:38 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        \e[33mfor\e[0m(l <- \e[31m1\e\
    [0m to a) {\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a % 2 == 0 || a % 3 == 0) return false\n        if (a > 100)\
    \ return false\n        // Knowing that (a) is less then 100. \n        // Example:\n\
    \        // >>> isMultiplyPrime((30l))\n        // (true)\n        // 30 = 2 *\
    \ 3 * 5\n        val primes = new mutable.HashSet[Long]()\n        for (i = 31;\
    \ i > 1; i--) {\n            if (a % i == 0 || a % 3 == 0 || a % i == 0) {\n \
    \               primes.add(i)\n            }\n        }\n        return primes.size\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wo909ym.scala:20:15 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = \e[31m31\e[0m; i > \e[31m1\e\
    [0m; i--) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m     \
    \          ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wo909ym.scala:20:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m31\e[0m; i > \e[31m1\e[0m; i--) {\n\e[31m\e[31m   |\e[0m        \
    \                  ^\e[0m\n\e[31m   |\e[0m                          '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7wo909ym.scala:20:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m31\e[0m; i > \e[31m1\e[0m; i--) {\n\e[31m\e[31m   |\e[0m        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7wo909ym.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7wo909ym.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mfor\e[0m (i = \e[31m31\e[0m; i > \e[31m1\e[0m; i--) {\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a\
    \ member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asSc"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val nums = mutable.Set.empty[Long]\n        for(i <- 2 until a /\
    \ 3) {\n            val n = (i/2) * 3\n            val isPrime = isPrime(n)\n\
    \            if(!isPrime)\n                nums += n\n        }\n        return\
    \ !nums.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydlccx54.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpydlccx54.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m until a / \e\
    [31m3\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Long\n\e[31m   |\e[0m           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = new mutable.ArrayList[Long](100L, (2 * 3 * 5)) //(100L,\
    \ 2L, 3L, 5L)\n        for (p <- list){\n            if(!isPrime(p) && !isMultiplyPrime(p))\
    \ \n                list.remove(p)\n        }\n        return list.isEmpty\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ob7irre.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](\e[31m100L\e[0m, (\e[31m2\e[0m * \e[31m3\e\
    [0m * \e[31m5\e[0m)) \e[34m//(100L, 2L, 3L, 5L)\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isPrime : Boolean = true\n        var isPrimeTwo : Boolean =\
    \ false\n        for(i <- 2 to 100) {\n            for(j <- 3 to 100) {\n    \
    \            if(i * j == a) {\n                    isPrime = false\n         \
    \           break\n                } else if(j * i == a) {\n                 \
    \   isPrimeTwo = true\n                }\n            }\n            if(isPrime\
    \ && isPrimeTwo) {\n                return true\n            }\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3hvmadp.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n: Long): Boolean = {\n            if (n < 2) false\n\
    \            else if (n % 2 == 0) false\n            else {\n                var\
    \ i = 3\n                while (i < n) {\n                    if (n % i == 0)\
    \ return false\n                    i += 1\n                }\n              \
    \  return true\n            }\n        }\n        var isMultiplyPrime = true\n\
    \        var b = 0\n        var count = 0\n        val arr = new mutable.ArrayBuilder[Long]\n\
    \        val arr1 = new mutable.ArrayBuilder[Long]\n        val arr2 = new mutable.ArrayBuilder[Long]\n\
    \        while (!isPrime(a) && b < 100) {\n            arr += a\n            arr1\
    \ += b\n            arr2 += b * b\n            a += 1\n            b += 1\n  \
    \          count += 1\n        }\n        if (count == 0) {\n            isMultiplyPrime\
    \ = false\n        }\n        else {\n            val isPrime2 = false\n     \
    \       var isPrime3 = false\n            var isPrime4 = false\n            var\
    \ isPrime5 = false\n            var count = 0\n            while (!isPrime2) {\n\
    \                var num = a\n                a -= 1\n                num -= 1\n\
    \                while (!isPrime3) {\n                    if (num % 2 == 0) {\n\
    \                        isPrime2 = true\n                    }\n            \
    \        else {\n                        num -= 1\n                    }\n   \
    \             }\n                a += 1\n                val n = num * a\n   \
    \             if (n % 2 == 0) {\n                    isPrime2 = true\n       \
    \         }\n                while (!isPrime4) {\n                    if (n %\
    \ 3 == 0) {\n                        isPrime4 = true\n                    }\n\
    \                    else {\n                        n -= 1\n                \
    \    }\n                }\n                a += 1\n                val m = num\
    \ * a\n                if (n % 3 == 0) {\n                    isPrime4 = true\n\
    \                }\n                while (!isPrime5) {\n                    if\
    \ (n % 5 == 0) {\n                        isPrime5 = true\n                  \
    \  }\n                    else {\n                        n -= 1\n           \
    \         }\n                }\n                a += 1\n                val o\
    \ = num * a\n                if (n % 5 == 0) {\n                    isPrime5 =\
    \ true\n                }\n                val q = a * num\n                if\
    \ (n % 7 == 0) {\n                    isPrime5 = true\n                }\n   \
    \             a += 1\n                val r = a * num\n                if (n %\
    \ 7 == 0) {\n                    isPrime5 = true\n                }\n        \
    \        a += 1\n                val s = a * num\n                if (n % 7 ==\
    \ 0) {\n                    isPrime5 = true\n                }\n             \
    \   a += 1\n                val t = a * num\n                if (n % 7 == 0) {\n\
    \                    isPrime5 = true\n                }\n                a +=\
    \ 1\n                val u = a * num\n                if (n % 7 == 0) {\n    \
    \                isPrime5 = true\n                }\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8p5g9rp_.scala:130:0 ---------------------------\e\
    [0m\e[0m\n\e[31m130 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8p5g9rp_.scala:27:22\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36marr\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8p5g9rp_.scala:28:23 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36marr1\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8p5g9rp_.scala:29:23 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8p5g9rp_.scala:34:14\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            a += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean a.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8p5g9rp_.scala:39:28 --------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m            isMultiplyPrime = \e[31mfalse\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tm"
  stdout: ''
  timestamp: 1659979295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // We need our own function to check whether a number is prime\n\
    \        def checkPrime(x : Long) : Boolean = x match {\n            case 2 |\
    \ 3 | 5 | 7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 => true\n            case _ =>\
    \ false\n        }\n\n        // Our prime numbers array\n        val primeNumbers\
    \ = mutable.Array[Int](2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n\n        // Start\
    \ from 2 and check whether the number is prime\n        var isPrime = true\n \
    \       for (x <- primeNumbers) {\n            // If it is not prime\n       \
    \     if (!checkPrime(x)) {\n                // Then it is not the multiplication\
    \ of 3 prime numbers\n                isPrime = false\n                break\n\
    \            }\n        }\n\n        // Return whether the number is multiplication\
    \ of 3 prime numbers\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgte0v5s.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbers\e[0m = mutable.Array[\e\
    [35mInt\e[0m](\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m, \e[31m7\e[0m, \e[31m11\e\
    [0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e[31m23\e[0m, \e[31m29\e[0m)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val factors = Primes.filter(p => a % p != 0)\n        factors.size\
    \ < 2\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_p332u7z.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = Primes.filter(\e\
    [36mp\e[0m => a % p != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: Primes\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b : Long = a - 1\n        val list : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        while(b > 0){\n            val t = b\
    \ / 2\n            val list = t until a\n            b := t * 3\n            list\
    \ ::= t\n        }\n        if(list.contains(a))\n            true\n        else\n\
    \            false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqyzxaa0h.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqyzxaa0h.scala:13:47\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqyzxaa0h.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            b := t * \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value := is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqyzxaa0h.scala:18:17\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            list ::= t\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of scala.collection.immutable.NumericRange.Exclusive[Long] - did you\
    \ mean list.:++?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // TODO\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpern9qb53.scala:11:46\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36misMultiplyPrime\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m     \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                          Required: Boolean\n\e[31m12 |\e[0m\
    \        \e[34m// TODO\e[0m\n\e[31m13 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        a match {\n            case x if (x < 100) => true\n            case\
    \ x => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoo7_5d9.scala:18)\n\tat Problem.main(tmpsoo7_5d9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n      val two = new scala.util.Random().nextInt\n      if (two == 3 || two\
    \ == 5)\n        true\n      else if (a % 2 == 0)\n        false\n      else {\n\
    \        var count = 0\n        var check : Long = a\n        while (check !=\
    \ 0) {\n          if (check % 2 == 0)\n            count++\n          check =\
    \ check >> 1\n        }\n        return count < 4\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0_zitebz.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            count++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val arr = a.toInt\n        def isPrime(num: Int) : Boolean = num\
    \ <= 1 || !num % 2\n\n        var mult = 0\n\n        for(n <- arr to arr.toInt){\n\
    \            if(isPrime(n)){\n                if(mult < 100){\n              \
    \      mult += n\n                }\n                else if(mult > 100 && mult\
    \ < 100 * 3){\n                    mult += n\n                }\n            }\n\
    \        }\n\n        return mult % 3 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfewb6mwt.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mnum\e\
    [0m: \e[35mInt\e[0m) : \e[35mBoolean\e[0m = num <= \e[31m1\e[0m || !num % \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \   ^^^^\e[0m\n\e[31m   |\e[0m        value unary_! is not a member of Int - did\
    \ you mean num.unary_+?\n1 error found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val array = (3l) :: 5l :: 8l :: 13l :: 17l :: 19l :: 25l :: 29l ::\
    \ 30l\n        val primes = array.filter( x => { val y = x.toInt\n           \
    \                          (y % 2 == 0 && y % 3 == 0) })\n        primes.length\
    \ == 3 && primes.forall( x => a % x == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps323cek5.scala:12:72 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36marray\e[0m = (\e[31m3l\e\
    [0m) :: \e[31m5l\e[0m :: \e[31m8l\e[0m :: \e[31m13l\e[0m :: \e[31m17l\e[0m ::\
    \ \e[31m19l\e[0m :: \e[31m25l\e[0m :: \e[31m29l\e[0m :: \e[31m30l\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ :: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val numPrimes = mutable.Set[Long]()\n        val divBy3 = mutable.Set[Long]()\n\
    \        def isPrime(x : Long) : Boolean = x % 2 == 0 && x != 1 \n        def\
    \ isMultipleOf(x : Long) : Boolean = {\n            for (i <- 1 to x) {\n    \
    \            if (isPrime(i)) numPrimes += i\n            }\n            (x % numPrimes.isEmpty)\
    \ == false\n        }\n        def addDivisor(x : Long) : Boolean = numPrimes.contains(x)\
    \ && divBy3.contains(x)\n        def addDivisors(x : Long) : Boolean = {\n   \
    \         for (i <- 1 to x) {\n                if (isPrime(i)) {\n           \
    \         numPrimes += i\n                    divBy3 += i\n                }\n\
    \            }\n            (x % numPrimes.isEmpty) == false\n        }\n    \
    \    if (a == 1) true\n        else numPrimes.forall(isPrime) && divBy3.forall(isMultipleOf)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdd072jxg.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumPrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdd072jxg.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivBy3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdd072jxg.scala:16:27 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (i <- \e[31m1\e[0m to x) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (x : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdd072jxg.scala:23:27\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to x) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (x : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val divisors = mutable.Set[Long]()\n        divisors.add(a)\n   \
    \     while (!divisors.isEmpty) {\n            var j = 1\n            while (divisors.contains(j\
    \ * j)) {\n                j += 1\n            }\n            divisors.remove(j)\n\
    \            if (j < 100) {\n                divisors.add(j)\n            }\n\
    \        }\n        divisors.size == 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ivbi2i4.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def checkPrimes(a : Long, prime : Long) : Boolean = {\n         \
    \   prime < 100 && a % prime == 0 && a * prime < 10000L\n        }\n        val\
    \ m = a.toInt\n        val primes = mutable.ArrayBuffer(2L to m).filter{ checkPrimes(_,\
    \ _) }\n        (primes exists { prime => prime * prime == a })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6azyeds.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2L\e[0m to m).filter{ checkPrimes(_, _) }\n\e[31m\e[31m   |\e[0m         \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if((a < 100l)) {\n            return false\n        }\n        val\
    \ setA = MutableSet[Long]()\n        val setB = MutableSet[Long]()\n        var\
    \ i : Long = 1l\n        while(i <= a){\n            if(isPrime(i)){\n       \
    \         setA.add(i)\n                setB.add(i*i)\n                i += 1\n\
    \            }\n            i += 1\n        }\n        setB.forall(a => setA.exists(b\
    \ => a == b))\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvphq2ipn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msetA\e[0m = MutableSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: MutableSet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvphq2ipn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msetB\e[0m = MutableSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: MutableSet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvphq2ipn.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(isPrime(i)){\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // TODO: implement this function\n        // hint: you do not need\
    \ to worry about the multiplication of more than 100 primes, just check\n    \
    \    // the numbers that are less than 100.\n        var aPrime = a\n        //\
    \ a prime must be greater than 2\n        while (aPrime < 100) {\n           \
    \ if (isPrime(aPrime) == true) {\n                // add aPrime to aPrimePrimePrimes\n\
    \                val aPrimePrimes = mutable.Set[Long]()\n                aPrimePrimes\
    \ += aPrime\n                val aPrimePrimePrimes = aPrimePrimes.filter(_ % 2\
    \ == 0)\n                aPrimePrimePrimes.foreach(aPrimePrime => {\n        \
    \            val aPrimePrimePrimes = aPrimePrimes.filter(_ % aPrimePrime == 0)\n\
    \                    aPrimePrimePrimes.foreach(aPrimePrimePrime => {\n       \
    \                 val aPrimePrimePrimes = aPrimePrimes.filter(_ % aPrimePrimePrime\
    \ == 0)\n                        aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                            val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                            aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                    val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                    aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                        val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                        aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                            val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                            aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                                val aPrimePrimePrimes\
    \ = aPrimePrimes.filter(_ % aPrimePrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzowh90xi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzowh90xi.scala:40:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpzowh90xi.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzowh90xi.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(aPrime) == \e[31mtrue\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzowh90xi.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36maPrimePrimes\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val mul = 3L\n        val arr: Array[Long] = new Array[Long](mul)\n\
    \        var count = 0L\n        for (i<-0 until mul) {\n            arr(i) =\
    \ 1l\n        }\n        val sum: Long = arr.sum\n        val prime: Set[Long]\
    \ = prime factorization(a) \n        for(i<-0 until prime.length) {\n        \
    \    val tmp: Long = 1l\n            for(j <- 0 until i) {\n                tmp\
    \ += arr(j)\n            }\n            if(tmp == sum) {\n                count++\n\
    \            }\n        }\n        if(count == 3) {\n            true\n      \
    \  } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph8ce3ocq.scala:26:23 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph8ce3ocq.scala:13:47 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m: \e[35mArray\e[0m[\e[35mLong\e[0m]\
    \ = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](mul)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                             Found:    (mul : Long)\n\e[31m \
    \  |\e[0m                                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph8ce3ocq.scala:15:24 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m until mul) {\n\
    \e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m       \
    \                 Found:    (mul : Long)\n\e[31m   |\e[0m                    \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8ce3ocq.scala:19:37\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mprime\e[0m: \e[35mSet\e[0m[\e[35mLong\e[0m] = prime factorization(a) \n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m     value factorization is not a member of collection.mutable.Set[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8ce3ocq.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m until prime.length)\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of collection.mutable.Set[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmph8ce3ocq.scala:23:20 --"
  stdout: ''
  timestamp: 1659979294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val num = scala.math.gcd(a, 100l)\n        val primes = mutable.ArrayBuffer.empty[Int]\n\
    \        for {\n            p <- 2 to scala.math.sqrt(num)\n        } yield {\n\
    \            if (a % p == 0) primes += p\n        }\n        primes.forall(x =>\
    \ a % x == 0) || (primes.forall(x => scala.math.gcd(a, x) == 1) && (scala.math.sqrt(num)\
    \ % primes.head == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu27k6btr.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = scala.math.gcd(a,\
    \ \e[31m100l\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value gcd is not a member of math\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpu27k6btr.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu27k6btr.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            p <- \e[31m2\e[0m to scala.math.sqrt(num)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    Double\n\e[31m   |\e[0m             \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var p = 2L\n        var q = 5L\n        while (q > p) {\n       \
    \     var r = q\n            while (r % p != 0L) {\n                r += 1L\n\
    \            }\n            if (a == r) \n                return true\n      \
    \      p += 1L\n            q -= 1L\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpav332aei.scala:28)\n\tat Problem.main(tmpav332aei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // write your code here\n        var m = scala.math.BigInt(a)\n \
    \       var prime = scala.collection.mutable.MutableList[scala.math.BigInt]()\n\
    \        var k = 0\n        var b = 0\n        while (m < 10) {\n            if\
    \ (prime.isEmpty || prime.isEmpty && prime.isEmpty || k != 2) {\n            \
    \    k += 1\n                while (m % k == 0) {\n                    prime +=\
    \ k\n                    m /= k\n                }\n            }\n          \
    \  else if (((prime.remove(0)).compareTo(m) == 0) || (prime.isEmpty && m > 100))\
    \ {\n                b += 1\n                m /= k\n            }\n         \
    \   else {\n                m /= k\n                b += 1\n                m\
    \ /= k\n            }\n        }\n        // println(\"prime : \" + (prime))\n\
    \        prime += k\n        return (prime.isEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr02jkeaj.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mprime\e[0m = scala.collection.mutable.MutableList[scala.math.BigInt]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list: List[Long] = List(2, 3, 5).filter((i) => a % i != 0).toList\n\
    \        list.indexOf(list.last) > -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe75bgdx9.scala:12:71\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = List(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e\
    [0m).filter((\e[36mi\e[0m) => a % i != \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m                               Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primeFactorsSet = a.toSet\n        val factorsSet = primeFactorsSet.filter\
    \ {\n            (n: Long) => (n % 3 != 0) && (n % 5 != 0)\n        }\n      \
    \  (primeFactorsSet.toSet.size < a.toSet.size * 3) &&\n        (factorsSet.size\
    \ == primeFactorsSet.size)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmv7r90u2.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsSet\e[0m = a.toSet\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value toSet is not a member of Long - did you mean a.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = primeFactors(a)\n        val threePrimes = primes.filter(p\
    \ => p*p < a)\n        if(threePrimes.isEmpty) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhux32pm.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primeFactors(a)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                    Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var flag = false\n        var product = a / 100\n        var check\
    \ = 0\n        while(product > 2) {\n            if(product % 2 == 0 && product\
    \ != 1) {\n                check = 1\n            }\n            if(product %\
    \ 2 == 0 && product == 1) {\n                flag = true\n                break\n\
    \            }\n            product /= 2\n        }\n        if(flag)\n      \
    \      return true\n        else \n            return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgevmqhh.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var max = 3L\n        var list = new ListBuffer[Int]()\n        var\
    \ flag = false\n        for(i <- 2 until max by 2){\n            if(a%i == 0){\n\
    \                for(j <- 1 until max/i){\n                    if(a%i == 0){\n\
    \                        list+=(j)\n                        if(list.contains(j)){\n\
    \                            flag = true\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return flag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppko8f7dv.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m until max by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                \
    \         ^^^\e[0m\n\e[31m   |\e[0m                         Found:    (max : Long)\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppko8f7dv.scala:17:33 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m(j <- \e[31m1\e[0m until\
    \ max/i){\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    Long\n\e[31m   |\e[0m\
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppko8f7dv.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                            break;\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // TODO: Write your code here\n        var result = false\n     \
    \   for (i <- 0 until 100) {\n            val b = a * i\n            if (b % 3\
    \ == 0 && b % 5 != 0) {\n                result = true\n                break\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tzq7rxp.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b = 0\n        var c = 0\n        var d = 1\n\n        var isPrime\
    \ = true\n        var isMultiplicationPrime = true\n\n        while (a > 0 &&\
    \ !isPrime) {\n            if (a % d == 0) {\n                a /= d\n       \
    \         isPrime = true\n            } else {\n                a /= d\n     \
    \           isPrime = false\n                isMultiplicationPrime = false\n \
    \           }\n\n            if (a == 1) {\n                isMultiplicationPrime\
    \ = true\n                a = 2\n            }\n\n            d = d + 2\n    \
    \        b = b + 2\n        }\n\n        if (a == 1) {\n            isMultiplicationPrime\
    \ = true\n            a = 2\n        }\n\n        if (b == 0) {\n            isMultiplicationPrime\
    \ = true\n            return false\n        }\n\n        if (isPrime == true &&\
    \ isMultiplicationPrime == true) {\n            return true\n        } else {\n\
    \            return false\n        }\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2n466jt.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                a /= d\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2n466jt.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                a /= d\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean a.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpd2n466jt.scala:31:18 -----------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                a = \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val a\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpd2n466jt.scala:40:14 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            a = \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isMultiplyPrime(a : Long, i : Int, multiply : Boolean): Boolean\
    \ = {\n            if(i <=0){\n                multiply\n            }else {\n\
    \                val x = a%i+a\n                x <- (isMultiplyPrime(x, i-1,\
    \ multiply)&&isMultiplyPrime(x, i+1, multiply)&&isMultiplyPrime(x, i+2, multiply))\n\
    \            }\n        }\n        val list = mutable.ListBuffer[Long]()\n   \
    \     val mul = true\n        while(mul){\n            list+=a\n            val\
    \ b = list.filter( _ % 3 == 0).length\n            mul = b == 1\n            list.remove(b)\n\
    \        }\n        isMultiplyPrime(a, list.size, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcbjg8xdz.scala:17:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                x <- (isMultiplyPrime(x, i-\e[31m1\e\
    [0m, multiply)&&isMultiplyPrime(x, i+\e[31m1\e[0m, multiply)&&isMultiplyPrime(x,\
    \ i+\e[31m2\e[0m, multiply))\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\
    \e[31m   |\e[0m                  end of statement expected but '<-' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbjg8xdz.scala:17:16 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                x <- (isMultiplyPrime(x, i-\e[31m1\e\
    [0m, multiply)&&isMultiplyPrime(x, i+\e[31m1\e[0m, multiply)&&isMultiplyPrime(x,\
    \ i+\e[31m2\e[0m, multiply))\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e\
    [31m   |\e[0m                Found:    (x : Long)\n\e[31m   |\e[0m           \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcbjg8xdz.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcbjg8xdz.scala:25:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            mul = b\
    \ == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val mul\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primeList = scala.collection.mutable.ListBuffer[Int]()\n    \
    \    def isPrime(x: Int) : Boolean = x > 0\n        def addPrime(x: Int) : Unit\
    \ = if (isPrime(x)) { primeList += x; addPrime(x+1) }\n        primeList.initFrom(-a,\
    \ a).filter(isPrime).foreach(addPrime)\n        val n = primeList.size\n     \
    \   primeList filter (x => x == n) => true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt2qi2z4x.scala:17:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        primeList filter (\e[36mx\e[0m => x == n) =>\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        not a legal formal parameter\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt2qi2z4x.scala:15:18 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        primeList.initFrom(-a, a).filter(isPrime).foreach(addPrime)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue initFrom\
    \ is not a member of scala.collection.mutable.ListBuffer[Int]\n2 errors found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primeList = new mutable.ListBuffer[Long]()\n        val isPrime\
    \ = true\n        var i = 1\n        while (i < a) {\n            if ((a % i)\
    \ == 0) {\n                isPrime = false\n                break\n          \
    \  }\n            if (primeList.contains(i)) {\n                isPrime = false\n\
    \                break\n            } else {\n                primeList.append(i)\n\
    \                i += 1\n            }\n        }\n        primeList.toList.length\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ta4c4im.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5ta4c4im.scala:17:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                isPrime\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ta4c4im.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp5ta4c4im.scala:21:24 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5ta4c4im.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a > 100) return false\n        var n = a\n        while (n %\
    \ 3 == 0 && n >= 2) {\n            n /= 3\n        }\n        while (n % 5 ==\
    \ 0 && n >= 2) {\n            n /= 5\n        }\n        n <= 2 && return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd1pkrxbp.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        n <= \e[31m2\e[0m && \e[33mreturn\e[0m \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             expression expected but \e[31mreturn\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.Set.empty[Long]\n\n        for( i <- 2 to a.toInt\
    \ ){\n            if( primes.contains(a) || (a % i == 0) ){\n                primes\
    \ += a\n            }\n        }\n        primes.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1gbkp25p.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n         val primes = mutable.Set()\n         primes.add(2)\n         primes.add(3)\n\
    \         primes.add(5)\n         primes.add(7)\n         primes.add(11)\n   \
    \      primes.add(13)\n         primes.add(17)\n         primes.add(19)\n    \
    \     primes.add(23)\n         primes.add(29)\n         primes.add(31)\n     \
    \    primes.add(37)\n         primes.add(41)\n         primes.add(43)\n      \
    \   primes.add(59)\n         primes.add(61)\n         primes.add(67)\n       \
    \  primes.add(71)\n         primes.add(73)\n         primes.add(79)\n        \
    \ primes.add(83)\n         primes.add(89)\n         primes.add(97)\n\n       \
    \  val x = a / primes.last\n         val y = a % primes.last\n         if (x <=\
    \ y && primes.contains(a)) {\n             return true\n         }\n         return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu55nbu2k.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m         \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplyPrime = false\n        var primeNumbers = Vector.empty[Long]\n\
    \        var divisor = 2\n\n        for (i <- a until a / divisor) {\n       \
    \     if ((i.toLong == 1) && (primeNumbers.contains(i))) {\n                divisor\
    \ = 2\n            }\n            else if ((i.toLong == 1) && (primeNumbers.size\
    \ == 1)) {\n                divisor = 2\n                isMultiplyPrime = true\n\
    \            }\n            else if ((i.toLong % divisor) != 0) {\n          \
    \      divisor = divisor + 1\n            }\n            else {\n            \
    \    primeNumbers = primeNumbers :+ i\n                divisor = 2\n         \
    \   }\n        }\n        return isMultiplyPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzwzlfev.scala:36)\n\tat Problem.main(tmphzwzlfev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplication :Boolean = true\n\n        if (a % 3 != 0 ||\
    \ a < 100) {\n            isMultiplication = false\n        } else {\n       \
    \     val primes = Vector.fill(100)(3).find(x => x > 0).filter(_ % 2 != 0).filter(_\
    \ % 3 != 0)\n            val count = primes.count { x => x % a == 0 }\n      \
    \      isMultiplication = count > 1\n        }\n        isMultiplication\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) ==\
    \ (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpco1lyd0l.scala:25)\n\tat Problem.main(tmpco1lyd0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplyPrime = true\n        var primeCount = 0\n        var\
    \ primes = mutable.ListBuffer[Long]()\n        for(i <- 2 to (100l*100l)) {\n\
    \            if(a%i == 0) {\n                primeCount += 1\n               \
    \ primes += i\n            }\n        }\n        if(primeCount == 3) {\n     \
    \       for(prime <- primes) {\n                if(!primes.contains(a%prime))\
    \ {\n                    isMultiplyPrime = false\n                }\n        \
    \    }\n        }\n        primeCount = 0\n        if(isMultiplyPrime) {\n   \
    \         println(\"true\")\n        } else {\n            println(\"false\")\n\
    \        }\n        return isMultiplyPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwzq4plo.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmwzq4plo.scala:15:23 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to (\e[31m100l\e\
    [0m*\e[31m100l\e[0m)) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (\e[31m10000L\e[0m : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a%2 == 0) \n            false\n        else\n            for(i<-2\
    \ until a/2) \n                if(a%i==0) \n                    false\n      \
    \          else \n                    a = a/i\n            true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5axfp2m.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m(i<-\e\
    [31m2\e[0m until a/\e[31m2\e[0m) \n\e[31m\e[31m   |\e[0m                     \
    \      ^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpx5axfp2m.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    a = a/i\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var primeSet = mutable.HashSet[Long]()\n        primeSet.add(1l)\n\
    \        for (i<2 to a) {\n            if (primeSet.contains((i*i))) {\n     \
    \           primeSet.add((i*i))\n            }\n        }\n        return primeSet.size\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ftwpxkb.scala:14:23 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<\e[31m2\e[0m to a) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     '<-' expected, but '{' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ftwpxkb.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e\
    [36mprimeSet\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ftwpxkb.scala:18:9\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if ((a % 2) == 0) return false\n        val primes = Set(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997)\n        primes.forall(x => a%x==0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbj18_9cf.scala:18)\n\tat Problem.main(tmpbj18_9cf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(p: Long): Boolean = {\n            // Check for prime\
    \ numbers between 2 and sqrt(p)\n            p until (p / 2).toInt == 1\n    \
    \    }\n        // Iterate from 2 to sqrt(a)\n        for (p = 2 to (a/2).toInt)\
    \ {\n            // If a = p * p then p is prime\n            if (isPrime(p))\
    \ \n                // Return true\n                return(true)\n        }\n\
    \        // If primes cannot be found then false\n        return(false)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpww4qcozy.scala:17:15 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (p = \e[31m2\e[0m to (a/\e[31m2\e\
    [0m).toInt) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m   \
    \            ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpww4qcozy.scala:17:35 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m (p = \e[31m2\e[0m to (a/\e[31m2\e[0m).toInt) {\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   '<-' expected, but '{' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpww4qcozy.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            p until (p / \e[31m2\e[0m).toInt == \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    Boolean\n\e[31m   |\e[0m             \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww4qcozy.scala:22:9\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitCon"
  stdout: ''
  timestamp: 1659979308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // (a) = 30 = 2 * 3 * 5\n        var isMultiplyPrime = true \n  \
    \      if (a < 100) isMultiplyPrime = true\n        else {\n            // All\
    \ numbers < 100 are prime numbers.\n            var num = (a / 30) + 1\n     \
    \       var isPrime = false \n            // While the number is not a prime number,\
    \ keep adding numbers from the smallest to the largest.\n            while (!isPrime\
    \ && num < 100) {\n                if (num * num == a) isPrime = true\n      \
    \          num += 1 \n            }\n            isMultiplyPrime = !isPrime\n\
    \        }\n        return isMultiplyPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcgflk1j.scala:29)\n\tat Problem.main(tmpbcgflk1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val m = a / 3\n        var b = 3\n        val primes = mutable.ListBuffer[Long]()\n\
    \        while(!isPrime(b)) {\n            primes += b\n            b += 1\n \
    \       }\n        primes.toList match {\n            case List() => false //\
    \ Nothing is prime\n            case x if x == a => true // Found the number\n\
    \            case x :: xs => { \n                x % primes.head != 0 && isMultiplyPrime(3\
    \ * primes.head + 1) // Not prime\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4eo4_65y.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4eo4_65y.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m(!isPrime(b)) {\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4eo4_65y.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                x % primes.head\
    \ != \e[31m0\e[0m && isMultiplyPrime(\e[31m3\e[0m * primes.head + \e[31m1\e[0m)\
    \ \e[34m// Not prime\e[0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n       def isPrime(a : Long) : Boolean = {\n           var isPrime = false\n\
    \           if(a < 2l) isPrime = true\n           else {\n               var counter\
    \ = 1\n               for(i <- 2l to math.sqrt((a-1l)) by 1l) {\n            \
    \       if((a%i)==0) counter = counter + 1\n               }\n               if(counter\
    \ == 3) isPrime = true\n           }\n           return isPrime\n       }\n  \
    \     val b = a%2l\n       if(a == 0 || a == 1l) true\n       else if(b == 0)\
    \ false\n       else if(b == 1) isPrime(a-1l)\n       else a match {\n       \
    \    case _ if isPrime(a) || isPrime(a-1l) => false\n           case _ => isMultiplyPrime(a-1l)\n\
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvxl3iva.scala:17:39\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m               \e[33mfor\e[0m(i\
    \ <- \e[31m2l\e[0m to math.sqrt((a-\e[31m1l\e[0m)) by \e[31m1l\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Found:    Double\n\e[31m   |\e[0m           \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a%3 != 0 || a%3!=2 || a%5!=0) false\n        else if(a < 100)\
    \ true\n        else{\n            var isPrime : Boolean = true\n            var\
    \ primes : Array[Long] = Array(1, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n         \
    \   var aPrimeIndex : Long = 0\n            primes.foreach(prime =>\n        \
    \        if(a%prime == 0){\n                    isPrime = false\n            \
    \        return\n                }\n            )\n            if(isPrime)\n \
    \               for(prime <- primes){\n                    aPrimeIndex += 1\n\
    \                    if(aPrimeIndex > 100){\n                        aPrimeIndex\
    \ = 0\n                    }\n                    if(a%prime != 0) false\n   \
    \             }\n            else\n                false\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3kulh5k.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    Unit\n\e[31m   |\e[0m                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3kulh5k.scala:25:16\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mfor\e[0m(prime\
    \ <- primes){\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m  \
    \              Found:    Unit\n\e[31m   |\e[0m                Required: Boolean\n\
    \e[31m26 |\e[0m                    aPrimeIndex += \e[31m1\e[0m\n\e[31m27 |\e[0m\
    \                    \e[33mif\e[0m(aPrimeIndex > \e[31m100\e[0m){\n\e[31m28 |\e\
    [0m                        aPrimeIndex = \e[31m0\e[0m\n\e[31m29 |\e[0m       \
    \             }\n\e[31m30 |\e[0m                    \e[33mif\e[0m(a%prime != \e\
    [31m0\e[0m) \e[31mfalse\e[0m\n\e[31m31 |\e[0m                }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val factorList = mutable.ListBuffer.empty[Long]\n        factorList\
    \ += 2\n        factorList += 3\n        factorList += 5\n        \n        //\
    \ Start searching for the number in the factorList\n        var flag = true\n\
    \        while (factorList.nonEmpty) {\n            var i = 1\n            while\
    \ (i < factorList.size) {\n                if (a%factorList(i) == 0) {\n     \
    \               // Flag is set to false to indicate we have found a factor.\n\
    \                    flag = false\n                }\n                i ++\n \
    \           }\n            factorList += i \n        }\n        \n        // Return\
    \ true if we found a factor else false\n        flag\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1_xp857t.scala:26:20 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                i ++\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_xp857t.scala:12:25\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val arr : Array[Long] = Array.fill(100)(2l) ++ Array.fill(100)(3l)\
    \ ++\n            Array.fill(100)(5l) ++ Array.fill(100)(7l) ++\n            Array.fill(100)(11l)\
    \ ++  Array.fill(100)(13l) ++\n            Array.fill(100)(17l) ++  Array.fill(100)(19l)\
    \ ++\n            Array.fill(100)(23l) ++  Array.fill(100)(29l) ++\n         \
    \   Array.fill(100)(31l) ++  Array.fill(100)(37l) ++\n            Array.fill(100)(41l)\
    \ ++  Array.fill(100)(43l) ++\n            Array.fill(100)(47l) ++  Array.fill(100)(53l)\
    \ ++\n            Array.fill(100)(59l) ++  Array.fill(100)(61l) ++\n         \
    \   Array.fill(100)(67l) ++  Array.fill(100)(71l) ++\n            Array.fill(100)(73l)\
    \ ++  Array.fill(100)(79l) ++\n            Array.fill(100)(83l) ++  Array.fill(100)(89l)\
    \ ++\n            Array.fill(100)(97l) ++  Array.fill(100)(101l) ++\n        \
    \    Array.fill(100)(103l) ++  Array.fill(100)(107l) ++\n            Array.fill(100)(109l)\
    \ ++  Array.fill(100)(113l) ++\n            Array.fill(100)(117l) ++  Array.fill(100)(121l)\
    \ ++\n            Array.fill(100)(123l) ++  Array.fill(100)(127l) ++\n       \
    \     Array.fill(100)(131l) ++  Array.fill(100)(137l) ++\n            Array.fill(100)(139l)\
    \ ++  Array.fill(100)(147l) ++\n            Array.fill(100)(151l) ++  Array.fill(100)(157l)\
    \ ++\n            Array.fill(100)(159l) ++  Array.fill(100)(163l) ++\n       \
    \     Array.fill(100)(167l) ++  Array.fill(100)(173l) ++\n            Array.fill(100)(179l)\
    \ ++  Array.fill(100)(181l) ++\n            Array.fill(100)(191l) ++  Array.fill(100)(193l)\
    \ ++\n            Array.fill(100)(197l) ++  Array.fill(100)(199l) ++\n       \
    \     Array.fill(100)(211l) ++  Array.fill(100)(223l) ++\n            Array.fill(100\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph3en_zxi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmph3en_zxi.scala:37:60\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36marr\e[0m : \e[35mArray\e[0m[\e[35mLong\e[0m] = Array.fill(\e[31m100\e\
    [0m)(\e[31m2l\e[0m) ++ Array.fill(\e[31m100\e[0m)(\e[31m3l\e[0m) ++\n\e[31m13\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m5l\e[0m) ++ Array.fill(\e\
    [31m100\e[0m)(\e[31m7l\e[0m) ++\n\e[31m14 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m11l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m13l\e[0m) ++\n\e[31m15\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m17l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m19l\e[0m) ++\n\e[31m16 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m23l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m29l\e[0m) ++\n\e[31m17\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m31l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m37l\e[0m) ++\n\e[31m18 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m41l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m43l\e[0m) ++\n\e[31m19\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m47l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m53l\e[0m) ++\n\e[31m20 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m59l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m61l\e[0m) ++\n\e[31m21\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m67l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m71l\e[0m) ++\n\e[31m22 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m73l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m79l\e[0m) ++\n\e[31m23\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m83l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m89l\e[0m) ++\n\e[31m24 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m97l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m101l\e[0m) ++\n\e[31m25\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[31m103l\e[0m) ++  Array.fill(\e\
    [31m100\e[0m)(\e[31m107l\e[0m) ++\n\e[31m26 |\e[0m            Array.fill(\e[31m100\e\
    [0m)(\e[31m109l\e[0m) ++  Array.fill(\e[31m100\e[0m)(\e[31m113l\e[0m) ++\n\e[31m27\
    \ |\e[0m            Array.fill(\e[31m100\e[0m)(\e[3"
  stdout: ''
  timestamp: 1659979313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        \n        val aPrimes = List(3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val bPrimes\
    \ = List(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        \n        // a is too high\n        if(a >\
    \ 100){\n            return false\n        }\n        // a is too low\n      \
    \  if(a<0){\n            return false\n        }\n        // a is prime\n    \
    \    if(aPrimes.contains(a)){\n            return true\n        }\n        //\
    \ a is not prime\n        if(bPrimes.contains(a)){\n            return false\n\
    \        }\n        // a is divisible by any two primes\n        val divisor =\
    \ a / 2\n        for(d <- List(divisor, divisor*2, divisor*3, divisor*4, divisor*5,\
    \ divisor*6, divisor*7, divisor*8, divisor*9, divisor*10)) {\n            if(a\
    \ % d == 0){\n                return false\n            }\n        }\n       \
    \ \n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa53oasso.scala:43)\n\tat Problem.main(tmpa53oasso.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(a : Long) : Boolean = {\n            val factors = prime\
    \ / 2\n            var i = 2\n            while(i < factors.toInt){\n        \
    \        val rem = factors.toInt % i\n                if(i == rem) true\n    \
    \            else if(!rem) false\n                i += 2\n            }\n    \
    \    }\n        def isMultiplication(a, b) =\n            a.toInt == b.toInt &&\
    \ (a * b).toInt == a\n        val prime = (2 to 100).toSet \n        if(prime\
    \ contains a) isPrime(a)\n        else if(a.signum > 0) isPrime(a) && isMultiplication(prime,\
    \ a) || isMultiplication(prime, a)\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa5dqnhhm.scala:22:30 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mdef\e[0m \e[36misMultiplication\e[0m(\e\
    [36ma\e[0m, \e[36mb\e[0m) =\n\e[31m\e[31m   |\e[0m                           \
    \   ^\e[0m\n\e[31m   |\e[0m                              ':' expected, but ','\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa5dqnhhm.scala:22:33 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mdef\e[0m \e[36misMultiplication\e[0m(\e\
    [36ma\e[0m, \e[36mb\e[0m) =\n\e[31m\e[31m   |\e[0m                           \
    \      ^\e[0m\n\e[31m   |\e[0m                                 ':' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa5dqnhhm.scala:13:32\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfactors\e[0m = prime / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not a member of Set[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5dqnhhm.scala:15:12 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mwhile\e[0m(i < factors.toInt){\n\e\
    [31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\
    \e[31m   |\e[0m            Required: Boolean\n\e[31m16 |\e[0m                \e\
    [33mval\e[0m \e[36mrem\e[0m = factors.toInt % i\n\e[31m17 |\e[0m             \
    \   \e[33mif\e[0m(i == rem) \e[31mtrue\e[0m\n\e[31m18 |\e[0m                \e\
    [33melse\e[0m \e[33mif\e[0m(!rem) \e[31mfalse\e[0m\n\e[31m19 |\e[0m          \
    \      i += \e[31m2\e[0m\n\e[31m20 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa5dqnhhm.scala:25:26 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(prime contains a) isPrime(a)\n\e\
    [31m\e[31m  "
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // a = (2 * 3 * 5)\n        val b = 2\n        val c = 5\n      \
    \  var counter = 1000\n        var isPrime = true\n\n        while (counter >\
    \ 0) {\n            if (b % a == 0 && c % a == 0) {\n                counter +=\
    \ 1\n            } else {\n                counter = 0\n                isPrime\
    \ = false\n            }\n            b += 1\n            c += 1\n        }\n\
    \        return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5g46j6m.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            b += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean b.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5g46j6m.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            c += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean c.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Create a set that will store the multiplication prime numbers.\
    \ \n        val set = new mutable.HashSet[Long]()\n        // Create an array\
    \ that will store the multiplication prime numbers multiplied by 3\n        val\
    \ three = Array.fill(100)(3L)\n        // Create a boolean variable to test if\
    \ the number is prime or not \n        var isPrime = true\n        // Create a\
    \ variable that will store the value of the given number \n        var value =\
    \ a\n        // While the given number is not prime \n        while (!isPrime)\
    \ {\n            // For every multiplication prime in the set \n            for\
    \ (x<-set) {\n                // For every multiplication prime in the array\n\
    \                for (i<-0 to three.length) {\n                    // If the multiplication\
    \ prime is equal to the number then we set it false \n                    if (three(i)\
    \ == (x * (x + 3))) {\n                        // If the multiplication prime\
    \ is not in the set then we add it to the set \n                        if (!set.add(x\
    \ * (x + 3))) {\n                            // If we add it to the set then the\
    \ number is prime \n                            isPrime = false\n            \
    \                break\n                        }\n                    }\n   \
    \             }\n            }\n            // If the given number is not prime\
    \ then we add the number to the set \n            if (!set.add(a)) {\n       \
    \         // If the set does not contain the given number then the number is prime\
    \ \n                isPrime = false\n            }\n        }\n        // If the\
    \ set contains the given number then the number is prime \n        if (set.contains(a))\
    \ {\n            true\n        } else {\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9svuphno.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.Set[Long]()\n        for (i <- 2 to a-2) {\n\
    \            val isPrime = true\n            primes += i\n            if (isPrime)\
    \ {\n                for (j <- i-1; j <- i+primes.size-1 if (i*j > a)) \n    \
    \                if (a%j == 0) isPrime = false\n            }\n            if\
    \ (isPrime) primes += i\n        }\n        primes size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqqd1_fj2.scala:22:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        primes size == \e[31m3\e[0m\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but integer literal found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqd1_fj2.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqd1_fj2.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to a-\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqqd1_fj2.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m (j <- i-\e[31m1\e[0m;\
    \ j <- i+primes.size-\e[31m1\e[0m \e[33mif\e[0m (i*j > a)) \n\e[31m\e[31m   |\e\
    [0m                          ^^^\e[0m\n\e[31m   |\e[0m                       \
    \   value foreach is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val two = new Long(2) //prime number 2\n        val three = new Long(3)\
    \ //prime number 3\n        val five = new Long(5) //prime number 5\n        val\
    \ isPrime = a != 0L //a is not 0\n        val result = (a % two == 0 && a % three\
    \ == 0 && a % five == 0) //a is multiple of 2 or 3 or 5\n        val numbers =\
    \ new mutable.ListBuffer[Long]() //list of prime numbers up to a\n        for(i\
    \ <- 2L until a) {\n            if (isPrime(i)) {\n                numbers +=\
    \ i //append prime number to numbers list\n            }\n        }\n        //check\
    \ if the numbers list has 3 elements\n        if(numbers.length != 3) {\n    \
    \        return false\n        }\n        //check if all numbers in the list are\
    \ multiples of 3 or 5\n        for(number <- numbers) {\n            if(number\
    \ % two == 0 && number % three == 0 && number % five == 0) {\n               \
    \ result = true\n                break\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu1brsug3.scala:12:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mtwo\e[0m = \e[33mnew\e[0m\
    \ \e[35mLong\e[0m(\e[31m2\e[0m) \e[34m//prime number 2\e[0m\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mconstructor\e[0m \e[35mLong\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m: (): Long\n\e[31m\e[31m-- Error: /tmp/tmpu1brsug3.scala:13:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mthree\e[0m = \e[33mnew\e\
    [0m \e[35mLong\e[0m(\e[31m3\e[0m) \e[34m//prime number 3\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                             ^\e[0m\n\e[31m   |\e[0m         too many\
    \ arguments for \e[33mconstructor\e[0m \e[35mLong\e[0m in \e[33mclass\e[0m \e\
    [35mLong\e[0m: (): Long\n\e[31m\e[31m-- Error: /tmp/tmpu1brsug3.scala:14:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfive\e[0m = \e[33mnew\e\
    [0m \e[35mLong\e[0m(\e[31m5\e[0m) \e[34m//prime number 5\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                            ^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mconstructor\e[0m \e[35mLong\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m: (): Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1brsug3.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnumbers\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]() \e[34m//list\
    \ of prime numbers up to a\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpu1brsug3.scala:19:16 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                \e[33mvalue\e\
    [0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def primes(a: Long): List[Int] = {\n            // http://stackoverflow.com/questions/206816/how-to-list-all-primes-below-n-in-java\n\
    \            // http://stackoverflow.com/questions/2187578/list-of-primes-below-n-in-java\n\
    \            // http://stackoverflow.com/questions/14241859/fast-algorithm-to-list-primes-in-range-3-100000000-for-java\n\
    \            // http://stackoverflow.com/questions/2200918/is-there-a-fast-algorithm-to-find-the-primes-of-a-number-in-java\n\
    \            val primes = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \         val isPrime = (x : (Int, Int) => Boolean)(x => {\n                x\
    \ match {\n                    case (y @ _, _) if y > a => (y == a) || (y > a\
    \ && (y % a != 0))\n                    case _ => false\n                }\n \
    \           })\n            val sqrt = (n : Int) => if (n == 0 || n > 100) -1\
    \ else math.floor(math.sqrt(n))\n            primes += 2\n            primes ++=\
    \ (3 to sqrt(a).toInt) filter isPrime\n            primes\n        }\n       \
    \ val primes = primes(a)\n        val primesSet = primes.toSet\n        primesSet\
    \ contains (a * 3 + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5o0q3h19.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primes(a)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mprimes\
    \ is already defined as \e[33mmethod\e[0m \e[35mprimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o0q3h19.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36misPrime\e[0m = (x : (\e[35mInt\e[0m, \e[35mInt\e[0m) => \e[35mBoolean\e\
    [0m)(\e[36mx\e[0m => {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp5o0q3h19.scala:18:54 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36misPrime\e[0m = (x :\
    \ (\e[35mInt\e[0m, \e[35mInt\e[0m) => \e[35mBoolean\e[0m)(\e[36mx\e[0m => {\n\e\
    [31m\e[31m   |\e[0m                                                      ^\e[0m\n\
    \e[31m   |\e[0m                          Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                          I could not infer the type of the\
    \ parameter x.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o0q3h19.scala:20:39\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e\
    [0m (y @ _, _) \e[33mif\e[0m y > a => (y == a) || (y > a && (y % a != \e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: y\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o0q3h19.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m (y @ _, _) \e[33mif\e\
    [0m y > a => (y == a) || (y > a && (y % a != \e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                 ^\e[0m\n\e[31m   |\e[0m  \
    \      "
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = PrimeFinder.getPrimesLessThan(100).filter(_ != a)\n\
    \        primes.forall(prime => a % prime == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpces16r8z.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = PrimeFinder.getPrimesLessThan(\e\
    [31m100\e[0m).filter(_ != a)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: PrimeFinder\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultipleOfThreePrimes = false\n        for (i<-0 until a by\
    \ 2) {\n            if((a % 2) == 0 && (a % 3) == 0 && (a % 5) == 0) {\n     \
    \           isMultipleOfThreePrimes = true\n                break;\n         \
    \   }\n        }\n        return isMultipleOfThreePrimes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp55bf_a83.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until a by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \       ^\e[0m\n\e[31m   |\e[0m                        Found:    (a : Long)\n\e\
    [31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp55bf_a83.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                break;\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(a : Long) : Boolean = {\n            for(i <- 2l; i <\
    \ ( 100 / a ) ; i += 1) {\n                if(a % i == 0) {\n                \
    \    return false\n                }\n            }\n            return true\n\
    \        }\n\n        def isMultiPrime(a : Long) : Boolean = {\n            for(i\
    \ <- 2l; i < ( 100 / a ) ; i += 1) {\n                if(a % i == 0) {\n     \
    \               if(isPrime(i) == isPrime(a)) {\n                        return\
    \ true\n                    }\n                }\n            }\n            return\
    \ false\n        }\n        return isMultiPrime(a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_v6qevt7.scala:13:41 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2l\e[0m; i < (\
    \ \e[31m100\e[0m / a ) ; i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                    '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp_v6qevt7.scala:13:49 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2l\e[0m; i < ( \e[31m100\e\
    [0m / a ) ; i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                  '<-' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp_v6qevt7.scala:22:41 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2l\e[0m; i < ( \e[31m100\e\
    [0m / a ) ; i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \       '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_v6qevt7.scala:22:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e\
    [0m(i <- \e[31m2l\e[0m; i < ( \e[31m100\e[0m / a ) ; i += \e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                                 ^\e[0m\n\e\
    [31m   |\e[0m                                            '<-' expected, but ')'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_v6qevt7.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2l\e[0m; i < (\
    \ \e[31m100\e[0m / a ) ; i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \            ^^\e[0m\n\e[31m   |\e[0m                     value foreach is not\
    \ a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_v6qevt7.scala:22:21\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m2l\e[0m; i < ( \e[31m100\e[0m / a ) ; i += \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m                   \
    \  value foreach is not a member "
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val prime : mutable.HashSet[Long] = mutable.HashSet[Long]()\n   \
    \     var temp = a\n        for(i <- 2 to 100) {\n            if(temp % i == 0)\
    \ {\n                prime.add(i)\n            }\n        }\n        temp += 1\n\
    \        while(temp <= 100) {\n            if(prime(temp)) {\n               \
    \ return true\n            }\n            temp += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqnjshve.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m : mutable.HashSet[\e\
    [35mLong\e[0m] = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqnjshve.scala:12:44\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mprime\e[0m : mutable.HashSet[\e[35mLong\e[0m] = mutable.HashSet[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(i : Int) : Boolean = {\n            val isPrime = true\n\
    \            for(j <= i / 2; j++ ){\n                val x = i - j * j\n     \
    \           if( x % 2 == 0 ){\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            isPrime\n   \
    \     }\n        val isTrue = true\n        for(i <- 3 to (math.min(100, a)) )\n\
    \        {\n            if(!isPrime(i) && isTrue) {\n                isTrue =\
    \ false\n            }\n        }\n        if(isTrue) {\n            true\n  \
    \      } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmymr2_ld.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m(j <= i / \e[31m2\e[0m; j++\
    \ ){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m \
    \                         ')' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax\
    \ Error: /tmp/tmpmymr2_ld.scala:14:32 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m            \e[33mfor\e[0m(j <= i / \e[31m2\e[0m; j++ ){\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmymr2_ld.scala:24:37 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e[31m3\e[0m to (math.min(\e[31m100\e\
    [0m, a)) )\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\
    \e[31m   |\e[0m                                     Found:    (a : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpmymr2_ld.scala:27:23 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                isTrue = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Reassignment to val isTrue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val b : Int = a / 100\n        val c = a % 100\n        var sum =\
    \ 0\n        for( i <- 0 until b)\n        {\n            if((b - i) < 2)\n  \
    \          {\n                sum = sum + i\n            }\n            else\n\
    \            {\n                val k : Int = c / i\n                val m = c\
    \ % i\n                if( (k == 0) || (m == 0) )\n                {\n       \
    \             sum = sum + i\n                }\n            }\n        }\n   \
    \     sum <= a && sum >= a\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a3wcyo.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mb\e\
    [0m : \e[35mInt\e[0m = a / \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e\
    [31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa3a3wcyo.scala:23:30 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mk\e[0m : \e[35mInt\e\
    [0m = c / i\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e\
    [31m   |\e[0m                              Found:    Long\n\e[31m   |\e[0m   \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var result = false\n        var n = a\n        while (n>=1l) {\n\
    \            if (isPrime(n)) {\n                if (isPrime(n+3)) {\n        \
    \            if (isPrime(n+5)) {\n                        if (isPrime(n+7)) {\n\
    \                            result = true\n                            break\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            n -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpk2i0pg.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (isPrime(n)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpk2i0pg.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e\
    [0m (isPrime(n+\e[31m3\e[0m)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpk2i0pg.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    \e[33mif\e[0m (isPrime(n+\e[31m5\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfpk2i0pg.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        \e[33mif\e[0m (isPrime(n+\e[31m7\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpk2i0pg.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // YOUR CODE HERE\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcwbayihl.scala:11:46\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36misMultiplyPrime\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m     \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                          Required: Boolean\n\e[31m12 |\e[0m\
    \        \e[34m// YOUR CODE HERE\e[0m\n\e[31m13 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isPrime = true\n        var mult = 1\n        // The loop checks\
    \ the factors up to 100 for all possible factors\n        var factors =  for(i\
    \ <- 2 to 100) {\n            if(a%i == 0) {\n                isPrime = false\n\
    \                break\n            }\n            if(i * mult  > 100) {\n   \
    \             isPrime = false\n                break\n            }\n        \
    \    if(mult%i == 0) {\n                mult = mult*i\n            } else {\n\
    \                mult = mult\n            }\n        }\n        isPrime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jvhrfif.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jvhrfif.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isMultiplication = (a % 2 == 0) && (a % 3 == 0) && (a % 5 ==\
    \ 0)\n        println(\"a : \" + a)\n        println(\"isMultiplication : \" +\
    \ isMultiplication)\n        val isPrime = new mutable.HashSet[Int]()\n      \
    \  for (i <- 2 to a/2) {\n            if (a%i == 0) {\n                println(\"\
    isPrime : \" + i)\n                isPrime += i\n            }\n        }\n  \
    \      println(\"isPrime : \" + isPrime)\n        return (isMultiplication &&\
    \ isPrime.length == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6r0dzscq.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6r0dzscq.scala:16:23\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to a/\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        for (i<- 0 until 100) {\n            if (isPrime(a) && isPrime(a+3)\
    \ && isPrime(a+5)) \n                return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56m3ucd6.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (isPrime(a) && isPrime(a+\e\
    [31m3\e[0m) && isPrime(a+\e[31m5\e[0m)) \n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var result = true\n        var primes = Set[Long]()\n        for\
    \ (i <- 2 to a/2) {\n            primes ++= primeCheck(a, i)\n        }\n    \
    \    // If this number is not divisible by 3 or 5, then it's not multiplicable\n\
    \        if (! (a%2 == 0 || a%3 == 0)){\n            result = false\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4iutlrj1.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to a/\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4iutlrj1.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            primes ++= primeCheck(a, i)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: primeCheck\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a<100) { \n            return false\n        }\n        val primeList\
    \ = List(2,3,5,7)\n        val resultList = mutable.ListBuffer.empty[Boolean]\n\
    \        for (p<-primeList) {\n            if ((a%p)==0) { \n                continue\n\
    \            }\n            if ((p+1)<=(a/p)) {\n                for (i<-primeList)\
    \ {\n                    if ((a%i) == 0) {\n                        break\n  \
    \                  }\n                    if ((i%p)==0) {\n                  \
    \      resultList += ((i==p)&&(p<(a/i))); \n                        break\n  \
    \                  }\n                }\n            }\n        }\n        if\
    \ (resultList.count() == 3) {\n            return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabe9ssp8.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpabe9ssp8.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabe9ssp8.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpabe9ssp8.scala:28:24 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                        break\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val test = (a\
    \ / primes.last).toInt\n        primes.take(test) foreach (x => if (a % x == 0)\
    \ return false)\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3inpgi5.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(\e\
    [31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m, \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.Set[Long]()\n        var i = 3\n        while(i\
    \ < (a / i) + 1) {\n            if(primes.contains(i)) {\n                primes\
    \ += i\n            }\n            i += 1\n        }\n        primes.forall(prime\
    \ => {\n            val primeFactor = (a / prime)\n            if(primeFactor\
    \ == 1) true\n            else if(primeFactor > 1) false\n            else prime\
    \ + primes.contains(primeFactor)\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpunp8p4nz.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val m = 3\n        val nums = mutable.ArrayBuffer(m)\n\n        while\
    \ (nums.length < 100) {\n            val y = m * m * m\n            if (nums.contains(y))\
    \ nums += m\n            else {\n                nums += m\n                val\
    \ y = m * m * m\n                if (nums.contains(y)) nums += m\n           \
    \ }\n        }\n        val a = nums.takeWhile(_ > a).toArray\n        val b =\
    \ nums.dropWhile(_ > a).toArray\n        if (a != b && a.sum == b.sum) {\n   \
    \         return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbt2twoxf.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer(m)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val result = a.toInt\n        val primes = primesOf3Plus2\n     \
    \   primes.contains(result)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnmny7zfd.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primesOf3Plus2\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: primesOf3Plus2\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplyPrime : Boolean = true\n        for (i = 1 to a.toInt)\
    \ {\n            var temp = a\n            while (temp % 3 == 0) temp /= 3\n \
    \           if (temp == 2) isMultiplyPrime = false\n        }\n        return\
    \ isMultiplyPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgyrp_nmo.scala:13:15 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m to a.toInt)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgyrp_nmo.scala:13:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m to a.toInt) {\n\e[31m\e[31m   |\e[0m                     \
    \          ^\e[0m\n\e[31m   |\e[0m                               '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgyrp_nmo.scala:17:9\
    \ -------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.HashSet[Long]()\n        val isPrime = mutable.HashSet[Boolean]()\n\
    \        for (i <- 2 to a/2+1) {\n            if (isPrime(i)) {\n            \
    \    primes.add(i)\n            }\n        }\n        for (i <- 3 to a/3+1) {\n\
    \            if (isPrime(i)) {\n                primes.add(i)\n            }\n\
    \        }\n        for (i <- 5 to a/5+1) {\n            if (isPrime(i)) {\n \
    \               primes.add(i)\n            }\n        }\n        primes.contains(a)\
    \ && a\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna5u0s78.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpna5u0s78.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.HashSet[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpna5u0s78.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to a/\e[31m2\e\
    [0m+\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpna5u0s78.scala:19:23 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m3\e[0m to a/\e[31m3\e[0m+\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna5u0s78.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m5\e[0m to a/\e[31m5\e[0m+\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:   \
    \ Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if ((a%2 == 0 && a%3 == 0) || (a%2 == 0 && a%5 == 0)) {\n       \
    \     return true\n        }\n        if ((a%4 == 0) || (a%6 == 0)) {\n      \
    \      return false\n        }\n        for (i <- 2 to a) {\n            if (i%2\
    \ != 0 && i%3 == 0 || i%2 != 0 && i%5 == 0 || i%4 != 0 || i%6 != 0) {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpba7vkvc1.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to a) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (a : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val arr = mutable.ArrayBuffer.empty[(Long, Long)]\n        def isPrime(n:\
    \ Long): Boolean = {\n            val div = n.toLong / 2\n            div <= 1\
    \ && div > 0\n        }\n\n        for (d <- 2 to (a.toInt)) {\n            if\
    \ ((d <= a) &&  isPrime(d)) {\n                arr += (d -> (n = 0))\n       \
    \         for (x <- d until a / d) {\n                    if ((x % d) == 0)\n\
    \                        n = 1\n                    else\n                   \
    \     n = 0\n                }\n            }\n        }\n        arr.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1u0o2t_n.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = mutable.ArrayBuffer.empty[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1u0o2t_n.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e[0m (x <- d until a / d) {\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    Long\n\e[31m   |\e[0m         \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1u0o2t_n.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                        n = \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1u0o2t_n.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        n\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isPrime = true\n        var remainder = a % 10\n        var count\
    \ = 3\n        for(i <- 2 until count) {\n            if(remainder <= 0) break\n\
    \            isPrime = (remainder % i == 0)\n            remainder = a / i\n \
    \       }\n        if(!isPrime) {\n            isMultiplyPrime = false\n     \
    \   }\n        isMultiplyPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79f6_fyo.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(remainder <= \e[31m0\e[0m)\
    \ break\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79f6_fyo.scala:21:30 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            isMultiplyPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e[0m\
    \                              Required: Long => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79f6_fyo.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        isMultiplyPrime\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mLong\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.ArrayBuffer(3, 5, 7)\n        val res = mutable.ArrayBuffer[Long]()\n\
    \        val factors = mutable.ArrayBuffer[Long]()\n        val num = a / 3\n\
    \        primes.takeWhile(p => p <= num).foreach { p =>\n            val n = num\
    \ % p\n            factors += n\n            n match {\n                case 0\
    \ => res  += num\n                case _ => if (num % n) res  += n\n         \
    \   }\n            num =/= p\n        }\n        (factors.length == primes.length)\
    \ && res.size == num\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xwkvahv.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m3\e[0m, \e[31m5\e[0m, \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xwkvahv.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xwkvahv.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isPrime = new mutable.HashSet[Long]()\n        val count = new\
    \ mutable.HashMap[Long, Int]()\n        val arr = (100 to 100l).toArray\n    \
    \    for(i <- 1 to arr.length) {\n            if(!isPrime.contains(arr(i))) {\n\
    \                var remain = arr(i) \n                while(!(remain % 3 == 0))\
    \ {\n                    isPrime.add(remain)\n                    remain += 1\n\
    \                }\n                count.put(arr(i), remain)\n            }\n\
    \        }\n        if(count.contains(a)) {\n            count.remove(a)\n   \
    \         count.size\n        } else {\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbf12x92.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbf12x92.scala:13:24\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzbf12x92.scala:14:26 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = (\e[31m100\e[0m to\
    \ \e[31m100l\e[0m).toArray\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (\e[31m100L\e[0m : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n : Int) : Boolean = {\n            for (i <- 2 to sqrt(n))\
    \ {\n                if (n % i == 0)\n                return false\n         \
    \   }\n            return true\n        }\n        var flag = 0\n        for (i\
    \ <- 2 to a) {\n            flag = flag + i\n            if (isPrime(i)) {\n \
    \               if (flag == a)\n                    return true\n            \
    \    else\n                    return false\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbsswvyux.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m2\e[0m to sqrt(n)) {\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Double\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbsswvyux.scala:20:23 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to a) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (a : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b = 2\n        var result = False\n        while(result == False\
    \ && b < 100) {\n            val isPrime = a % b == 0 && b <= Math.sqrt(a)\n \
    \           if(b * b <= a && isPrime) {\n                result := true\n    \
    \        }\n            b += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjp1cggr.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = False\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Your code here\n        val primes = mutable.HashSet[Long]()\n\
    \        val isPrime = mutable.HashSet[Long]()\n        val primeFactors = mutable.HashSet[Long]()\n\
    \n        for(i <- 2l to (a+2l)){\n            if(i%2l==0l) primes.add(i)\n  \
    \          for(j <- 2l to Math.sqrt(i).toInt + 1l){\n                if(i%j==0l){\n\
    \                    primeFactors.add(j)\n                    primes.add(i)\n\
    \                    primeFactors.add(i)\n                }\n            }\n \
    \       }\n        primeFactors.toSeq.filter(primeFactors.contains).foldLeft(true){\
    \ (a, b) => a * b }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbtqwjhv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfbtqwjhv.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfbtqwjhv.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var counter = 0\n        for (i <- 2 to a)\n            if (a%i==0)\n\
    \                if (counter == 3 || counter == 5)\n                    return\
    \ true\n                else {\n                    counter += 1 \n          \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwgf5tva0.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to a)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (a : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.ArrayBuffer.empty[Int]\n        primes += 2\n\
    \        primes += 3\n        primes += 5\n\n        def isPrime(p : Int) : Boolean\
    \ = \n            val isPrime = true\n            for(i <- 2 until primes.size)\
    \ \n                if(!primes.contains(((p * i).toInt))) \n                 \
    \   isPrime = false\n            isPrime\n        \n        for(i <- primes until\
    \ primes.max) \n            if(isPrime(i)) primes += i\n            \n       \
    \ primes.contains(a)\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptqr1byrt.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmptqr1byrt.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(num : Int) : Boolean = {\n            for (i <- 2 to\
    \ (num / 2)) {\n                if (num % i == 0)\n                    return\
    \ false\n            }\n            true\n        }\n        val n = 3\n     \
    \   val mult = a.toInt\n        var primesFound = 0\n        for (i = n to mult)\
    \ {\n            if (isPrime(i) && primesFound < 3) {\n                primesFound\
    \ += 1\n            }\n        }\n        return primesFound == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsy852i9z.scala:22:15 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i = n to mult) {\n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected, but\
    \ '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsy852i9z.scala:22:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m\
    \ (i = n to mult) {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            '<-' expected, but '{' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpsy852i9z.scala:26:9 -------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var flag = true\n        var count = 0\n        var p1 = 2l\n   \
    \     var p2 = 2l\n        var p3 = 2l\n        while(count <= 100){\n       \
    \     if((p1%p2 == 0) && (p2%p3 == 0) && (p1 != p2) && p1 != p3){\n          \
    \      flag = false \n                break\n            }\n            count\
    \ = count + 1\n            p1 = p1 + 2l\n            p2 = p2 + 2l\n          \
    \  p3 = p3 + 2l\n        }\n        return flag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8rwhfj4u.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = new ListBuffer[Long]()\n        for(i <- 2 to a/2+1){\n\
    \            for(ii <- 2 to a/2+1){\n                if(i*ii == a){\n        \
    \            list+= a\n                    list+= ii\n                    list+=\
    \ a\n                    list+= ii\n                }\n            }\n       \
    \ }\n        list.takeWhile(x => x <= a).length == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl1tvrvrf.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to a/\e[31m2\e[0m+\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e\
    [31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl1tvrvrf.scala:14:27 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m(ii <- \e[31m2\e[0m to a/\e\
    [31m2\e[0m+\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // TODO write your solution here\n        var isPrime = true\n  \
    \      var result = a\n        while(result % 2 == 0) result = result / 2\n  \
    \      while(result % 3 == 0) result = result / 3\n        while(result % 5 ==\
    \ 0) result = result / 5\n        while(result % 7 == 0) result = result / 7\n\
    \        while(result % 11 == 0) result = result / 11\n        while(result %\
    \ 13 == 0) result = result / 13\n        while(result % 17 == 0) result = result\
    \ / 17\n        while(result % 19 == 0) result = result / 19\n        while(result\
    \ % 23 == 0) result = result / 23\n        while(result % 29 == 0) result = result\
    \ / 29\n        while(result % 31 == 0) result = result / 31\n        while(result\
    \ % 37 == 0) result = result / 37\n        while(result % 41 == 0) result = result\
    \ / 41\n        while(result % 43 == 0) result = result / 43\n        while(result\
    \ % 47 == 0) result = result / 47\n        while(result % 53 == 0) result = result\
    \ / 53\n        while(result % 59 == 0) result = result / 59\n        while(result\
    \ % 61 == 0) result = result / 61\n        while(result % 67 == 0) result = result\
    \ / 67\n        while(result % 71 == 0) result = result / 71\n        while(result\
    \ % 73 == 0) result = result / 73\n        while(result % 89 == 0) result = result\
    \ / 89\n        while(result % 97 == 0) result = result / 97\n        while(result\
    \ % 109 == 0) result = result / 109\n        while(result % 113 == 0) result =\
    \ result / 113\n        while(result % 127 == 0) result = result / 127\n     \
    \   while(result % 131 == 0) result = result / 131\n        while(result % 139\
    \ == 0) result = result / 139\n        while(result % 147 == 0) result = result\
    \ / 147\n        while(result % 153 == 0) result = result / 153\n        while(result\
    \ % 161 == 0) result = result / 161\n        while(result % 179 == 0) result =\
    \ result / 179\n        while(result % 187 == 0) result = result / 187\n     \
    \   while(result % 193 == 0) result = result / 193\n        while(result % 199\
    \ == 0) result = result / 199\n        while(result % 209 == 0) result = result\
    \ / 209\n        while(result % 217 == 0) result = result / 217\n        while(result\
    \ % 227 == 0) result = result / 227\n        while(result % 239 == 0) result =\
    \ result / 239\n        while(result % 241 == 0) result = result / 241\n     \
    \   while(result % 251 == 0) result = result / 25\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4gzw16w2.scala:55:8\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m        \e[33mwhile\e[0m(result\
    \ % \e[31m251\e[0m == \e[31m0\e[0m) result = result / \e[31m25\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a%2 == 0 || a%3 == 0)\n            return false\n        // a\
    \ is a multiple of 2 & 3\n        // so check whether a is multiple of 4 & 6\n\
    \        var isMultiplicity : Boolean = true\n        var mult : Int = 2\n   \
    \     var divisor : Int = 5\n        while( isMultiplicity && mult < 100) {\n\
    \            if( a%mult == 0) {\n                isMultiplicity =  false\n   \
    \         } else if( a%mult == divisor) {\n                divisor += 2\n    \
    \        }\n            mult += 2\n        }\n        return isMultiplicity &&\
    \ mult < 100\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy353gvxm.scala:31)\n\tat Problem.main(tmpy353gvxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val n = scala.math.pow(a, 3.0).toInt\n        for {\n           \
    \ i <- 0 until 100\n            j = i + 1 until 100\n            k = j + 1 until\
    \ 100\n        } yield {\n            (n == i * j * k)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu64ef1rj.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            k = j + \e[31m1\e[0m until \e[31m100\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of Range, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpu64ef1rj.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            (n == i * j * k)\n\e[31m\e[31m   |\e[0m \
    \                 ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments ((j : Range))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var i = 0\n        var n = a\n        var factors = Array[Long]()\n\
    \        factors = factorization(n)\n        if(factors.size == 3)\n        {\n\
    \            var isPrime = true\n            while(isPrime && i < factors.length)\n\
    \            {\n                if((n % factors(i)) < 2)\n                {\n\
    \                    isPrime = false\n                }\n                i +=\
    \ 1\n            }\n        }\n        return isPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv36rmcg2.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factors = factorization(n)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: factorization\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv36rmcg2.scala:28:15\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mreturn\e[0m\
    \ isPrime\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \              Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val m = a / 3\n        val n = a / 3\n        var k = 6\n       \
    \ while (k * k <= m) {\n            if ((m % k) == 0) {\n                if ((n\
    \ % k) == 0) {\n                    false\n                } else {\n        \
    \            true\n                }\n            } else {\n                true\n\
    \            }\n            k += 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnrw356r.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (k\
    \ * k <= m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m16 |\e[0m         \
    \   \e[33mif\e[0m ((m % k) == \e[31m0\e[0m) {\n\e[31m17 |\e[0m               \
    \ \e[33mif\e[0m ((n % k) == \e[31m0\e[0m) {\n\e[31m18 |\e[0m                 \
    \   \e[31mfalse\e[0m\n\e[31m19 |\e[0m                } \e[33melse\e[0m {\n\e[31m20\
    \ |\e[0m                    \e[31mtrue\e[0m\n\e[31m21 |\e[0m                }\n\
    \e[31m22 |\e[0m            } \e[33melse\e[0m {\n\e[31m23 |\e[0m              \
    \  \e[31mtrue\e[0m\n\e[31m24 |\e[0m            }\n\e[31m25 |\e[0m            k\
    \ += \e[31m1\e[0m\n\e[31m26 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100) {\n            val primes = mutable.Set.empty[Long]\n\
    \            var i = 2\n            while(i <= a) {\n                val isPrime\
    \ = primes.contains(i) // check whether already added\n                if(!isPrime)\
    \ {\n                    primes += i\n                    if (i*i > a) { // check\
    \ whether i is prime or not\n                        primes += i*i\n         \
    \           }\n                }\n                i += 2\n            }\n    \
    \        primes.size == 3\n        }\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphbbsdbyw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = mutable.ListBuffer[Long]()\n        for (i = 2 to (a/2)\
    \ by 2){\n            val test = (i * i).toLong\n            if (a % test == 0)\n\
    \                list.add(test)\n        }\n        if (list.size > 3) {\n   \
    \         val set = Set(1, 3)\n            for (e <- list) if (!(set.contains(e)))\n\
    \                return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpum2iaxwd.scala:13:15 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m to (a/\e[31m2\e\
    [0m) by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e\
    [0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpum2iaxwd.scala:13:33 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m to (a/\e[31m2\e[0m) by \e[31m2\e\
    [0m){\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m  \
    \ |\e[0m                                 '<-' expected, but '{' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmpum2iaxwd.scala:22:9 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpum2iaxwd.scala:12:19 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpum2iaxwd.scala:17:9 -------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConve"
  stdout: ''
  timestamp: 1659979331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n         var i : Int = 3\n         val list = List(2, 3, 5, 7, 11, 13)\n\
    \         while (i < list.length && a < list(i * i)) {\n              i += 1\n\
    \         }\n         if (i >= list.length) {\n              return false\n  \
    \       } else {\n              return list(i) == a\n         }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 9\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isMultiplyPrime(tmphospa_3c.scala:14)\n\tat Problem$.main(tmphospa_3c.scala:24)\n\
    \tat Problem.main(tmphospa_3c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Create list of prime numbers in ascending order (starting from\
    \ 2).\n        val primes: List[Long] = \n          List (2l).takeWhile (p =>\
    \ ! (primes contains p)) ++ \n              (2l).dropWhile (p => primes contains\
    \ p)\n            // Create list of all numbers from 1 to a\n            .flatMap(i\
    \ => 1 to a).filter { i =>\n                // Check is a number is prime\n  \
    \              primes.exists { \n                    // Checking if prime divides\
    \ number in question\n                    (p : Long) => p % i == 0 \n        \
    \        } \n            }\n\n        // Return true if there is 3 primes in list\
    \ \n        primes.size == 3\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfpffbrur.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m              (\e[31m2l\e[0m).dropWhile (\e[36mp\e[0m\
    \ => primes contains p)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m              value dropWhile is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes: List[Long] = getPrimes(100)\n        val primeSum = primes.map((a\
    \ * _)).sum\n        primeSum <= a\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg9rzdxd4.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = getPrimes(\e[31m100\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: getPrimes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val l = a.toInt\n        // Check if number is divisible by 3\n \
    \       if(l % 3 == 0) return true\n        // Otherwise we know it is not divisible\
    \ by 3\n        var i = 2\n        while(i < l) {\n            if(l % i == 0)\
    \ return false\n            i += 1\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6zm0at91.scala:24)\n\tat Problem.main(tmp6zm0at91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var a = a % 3\n        if (a == 0 || a == 1) return true\n      \
    \  val max = (2 * a)\n        var j = 2\n        var prime = true\n        var\
    \ m = 2\n        while (prime && j < a) {\n            m = (j + 2) % a\n     \
    \       prime = !prime\n            j += 1\n        }\n        prime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp81ftv8us.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = a % \e[31m3\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // (a) is less then 100\n        val max = (100l * a).toLong\n  \
    \      val set: mutable.Set[Long] = mutable.Set.empty\n\n        // Find all prime\
    \ numbers between 1 and max\n        for (i <- 2 to max) {\n            if (isPrime(i))\
    \ {\n                set += i\n            }\n        }\n\n        // Check if\
    \ multiplication of 3 prime numbers is the same number\n        for (i <- 3 to\
    \ max) {\n            if (set.contains((3 * i))) {\n                return true\n\
    \            }\n        }\n\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplg9n5dgf.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplg9n5dgf.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplg9n5dgf.scala:17:23 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to max) {\n\e[31m\e[31m   |\e\
    [0m                       ^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (max : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplg9n5dgf.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplg9n5dgf.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m3\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n: Long, m: Long, i: Int) : Boolean = {\n           \
    \ if (m < 0 || n <= 0 ) false\n            if (n % m == 0) false\n           \
    \ if (i < 100 && isPrime(n / m, m, i + 1)) true\n            else false\n    \
    \    }\n        val n = a / 100\n        val m = a % 100\n        val primes =\
    \ mutable.MutableList(2L).asInstanceOf[mutable.List[Long]]\n        val i = 5\n\
    \        while (primes.size < 100) primes = primes :+ 2L\n        while ((primes.size\
    \ > 2L * m) && (primes.size < a)) {\n            primes = primes.takeWhile(x =>\
    \ isPrime(n, x, i)) :+ 2L\n            i += 1\n        }\n        primes.contains(a)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvclslxz5.scala:20:58 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.MutableList(\e\
    [31m2L\e[0m).asInstanceOf[mutable.List[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvclslxz5.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.MutableList(\e[31m2L\e[0m).asInstanceOf[mutable.List[\e\
    [35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpvclslxz5.scala:22:41 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m (primes.size < \e[31m100\e[0m)\
    \ primes = primes :+ \e[31m2L\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \              ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \               Reassignment to val primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpvclslxz5.scala:24:19 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            primes = primes.takeWhile(\e[36mx\e[0m => isPrime(n,\
    \ x, i)) :+ \e[31m2L\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val primes\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvclslxz5.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n\e[33m\e[33m-- [E129] Pote"
  stdout: ''
  timestamp: 1659979335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n : Int) : Boolean = {\n            val sqrt = (math.sqrt(n).toInt)\n\
    \            for( i <- 2 to sqrt ) {\n                if( n % i == 0 ) \n    \
    \                return false\n            }\n            true\n        }\n\n\
    \        // If n is less than 3, return true\n        if( a < 3 )\n          \
    \  return true\n\n        // Create a set for primes\n        val primes = mutable.Set[Long]()\n\
    \n        // For numbers below 3, check if they're primes\n        for( i <- 3\
    \ to (100/3).toLong ) {\n            if( isPrime(i) ) {\n                primes.add(i)\n\
    \            }\n        }\n\n        // Add all numbers that are less than a\n\
    \        for( i <- 2 to (100 - a).toLong ) {\n            if( isPrime(i) ) {\n\
    \                primes.add(i)\n            }\n        }\n\n        // Check if\
    \ there are 3 or more prime numbers in the set\n        if(primes.size() >= 3\
    \ )\n            return true\n\n        // Return false otherwise\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvlt7cnw6.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvlt7cnw6.scala:29:31 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m( i <- \e[31m3\e[0m to (\e[31m100\e\
    [0m/\e[31m3\e[0m).toLong ) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m   \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvlt7cnw6.scala:36:33 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m2\e[0m to (\e[31m100\e[0m - a).toLong\
    \ ) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    Long\n\e[31m   |\e[0m             \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val num = math.abs(a)\n        val primes = mutable.PriorityQueue()\n\
    \        for(i <- 2 until num) {\n            if(i % 2 == 0) primes += i\n   \
    \     }\n        // Add all odd divisors\n        for(i <- 3 until num) {\n  \
    \          val div = i % 2\n            if(div == 0) primes += i\n        }\n\n\
    \        // Add all primes less than the given number\n        for(i <- primes\
    \ if (i < num) primes += i )\n        primes.size < 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6mb3h9u7.scala:24:49 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- primes \e[33mif\e[0m (i <\
    \ num) primes += i )\n\e[31m\e[31m   |\e[0m                                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6mb3h9u7.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.PriorityQueue()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6mb3h9u7.scala:14:25 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m until num) {\n\e[31m\e[31m  \
    \ |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (num : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6mb3h9u7.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m3\e[0m until num) {\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (num : Long)\n\e[31m   |\e[0m\
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = scala.collection.mutable.Set[Long]()\n        for(i\
    \ <- 2 to a) {\n            if(i>2) primes.add(i)\n            else if(i%primes.contains(0)==0)\
    \ primes.remove(i)\n        }\n        primes.contains(a) == true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3vbmywiz.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to a) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (a : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp3vbmywiz.scala:15:21 -----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(i%primes.contains(\e[31m0\e\
    [0m)==\e[31m0\e[0m) primes.remove(i)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments (Boolean)\n2 errors found\n"
  stdout: ''
  timestamp: 1659979335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val l = new mutable.ListBuffer[Long]()\n        l.clear()\n     \
    \   var i = 0\n        while (a > 0) {\n            if (isPrime(i)) {\n      \
    \          l.append(i)\n                if (l.length == 3) {\n               \
    \     a = a*l(0)*l(1)*l(2) - a\n                    l.clear()\n              \
    \  }\n                i = i + 1\n            }\n            i = i + 1\n      \
    \  }\n        (a > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29u_k3x5.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29u_k3x5.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(i)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp29u_k3x5.scala:19:22 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                    a = a*l(\e[31m0\e[0m)*l(\e[31m1\e[0m)*l(\e\
    [31m2\e[0m) - a\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val a\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = a.get.filter(_ < 100) toList\n        val list2 = list.filter(_%2==0)\n\
    \        val list3 = list.filter(_%3==0)\n        list2.filter(_%5==0).isEmpty\
    \ && (list3.filter(_%5==0).isEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjo4kj_dn.scala:12:47 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = a.get.filter(_\
    \ < \e[31m100\e[0m) toList\n\e[31m\e[31m   |\e[0m                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjo4kj_dn.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = a.get.filter(_\
    \ < \e[31m100\e[0m) toList\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value get is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val factors = List[Long]()\n        for (i <- 2L to Math.sqrt(a))\
    \ {\n            if (a % i == 0) {\n                factors += i\n           \
    \ }\n        }\n        if (factors.size < 3) {\n            return false\n  \
    \      }\n        var isPrime = true\n        factors.reverse.foreach { f =>\n\
    \            if (a % f == 0) {\n                isPrime = false\n            }\n\
    \        }\n        return isPrime\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_y0k3grl.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2L\e[0m to Math.sqrt(a)) {\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Double\n\
    \e[31m   |\e[0m                        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_y0k3grl.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                factors += i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member\
    \ of List[Long] - did you mean factors.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val n = math.ceil(a/3)\n        val nums = (0 until n).filter(_*3\
    \ <= a)\n        return nums.length == 2 && nums.last > 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpesqk7_8v.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = (\e[31m0\e[0m until n).filter(_*\e[31m3\e[0m <= a)\n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   Found:    (n : Double)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n        def\
    \ isPrime(x: Long) : Boolean = {\n            var j : Long = 0\n            while(j\
    \ < (x * x + 1) / x) {\n                if(x % primes(j) == 0) {\n           \
    \         return false\n                }\n                j += 1\n          \
    \  }\n            return true\n        }\n\n        if(a<100) {\n            for(i\
    \ <- 1 to a) {\n                if(isPrime(i)) {\n                    return false\n\
    \                }\n            }\n            return true\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuhx4glc.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m(x\
    \ % primes(j) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \        ^\e[0m\n\e[31m   |\e[0m                              Found:    (j : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuhx4glc.scala:25:26 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m(i <- \e[31m1\e[0m to a) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var result = 0\n        for (i <- 1 until a) {\n            result\
    \ := result + (if (a % i == 0) 0 else 1)\n        }\n        if (result == 3)\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9ipcw3m.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until a) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc9ipcw3m.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            result := result + (\e[33mif\e[0m (a % i == \e\
    [31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value := is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var n = 0\n        for(i <- 2 to 100) {\n            for(j <- 3 to\
    \ i) {\n                if(i % j == 0) return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5vnz9kd.scala:22)\n\tat Problem.main(tmpq5vnz9kd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var flag = 0\n        var count = 3\n        var p = 2\n        var\
    \ i = 0\n        var j = a.toInt\n        var a3 = a * a\n        while(count\
    \ <= j) {\n            i = j % p\n            if(a3 == i) {\n                flag\
    \ = 1\n            }\n            p += 1\n            count += 1\n        }\n\
    \        flag match {\n            case 0 => true\n            case 1 => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphu7p9ha9.scala:32)\n\tat Problem.main(tmphu7p9ha9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n       if(isPrime(a)) {\n           for (i <- 0 until a) {\n            \
    \   if(isPrime(i)) {\n                   for(j <- 0 until a) {\n             \
    \          if((i*j) == a) {\n                           return true\n        \
    \               }\n                   }\n               }\n           }\n    \
    \   }\n       false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxh95mzh.scala:12:10 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m       \e[33mif\e[0m(isPrime(a)) {\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^\e[0m\n\e[31m   |\e[0m          Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxh95mzh.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m           \e[33mfor\e[0m (i <- \e[31m0\e[0m until a)\
    \ {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (a : Long)\n\e[31m   |\e[0m          \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkxh95mzh.scala:14:18 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m               \e[33mif\e[0m(isPrime(i)) {\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: isPrime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxh95mzh.scala:15:36\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                   \e[33mfor\e\
    [0m(j <- \e[31m0\e[0m until a) {\n\e[31m\e[31m   |\e[0m                      \
    \              ^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (a : Long)\n\e[31m   |\e[0m                                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        \n        val primes: Array[Long] = primeList(a)\n        if (primes.length\
    \ < 3)\n            return false\n        val isMultiplyPrime: Boolean = primes.exists(p\
    \ => a % p == 0)\n        return isMultiplyPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsiesxh68.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m: \e[35mArray\e\
    [0m[\e[35mLong\e[0m] = primeList(a)\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    Not found: primeList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isMultiple(n : Long) : Boolean = {\n            var i = 2\n \
    \           while (i <= n && n % i == 0) {\n                i += 1\n         \
    \   }\n            (i != n)\n        }\n        var i = 0\n        while (i <=\
    \ 100 && isMultiple(a * i)) {\n            i += 1\n        }\n        (i != 100)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbi1h2444.scala:26)\n\tat Problem.main(tmpbi1h2444.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b = a\n        // We will use this to see if we have a new prime\
    \ number\n        var isPrime = false\n        // Use a mutable List to store\
    \ the previous prime numbers\n        var primeNumbers = mutable.ListBuffer[Long]()\n\
    \        // The for loop will go up to 100 - 3\n        // The prime numbers are\
    \ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97\n        for (i<- 2 to 100-3) {\n            // For each\
    \ number between 2 and the number we are checking\n            // check if it\
    \ is a multiple of the number we are checking\n            // if so then store\
    \ it in our list and reset our check\n            // This is because once we get\
    \ the first 3 prime numbers,\n            // the previous primes will not be prime\
    \ numbers\n            if (a%i == 0) {\n                b = a/i\n            \
    \    // If we have a new prime number\n                // We will store it in\
    \ our mutable list\n                if (b != 1) {\n                    isPrime\
    \ = true\n                    primeNumbers += b\n                }\n         \
    \       // We will reset our check\n                b = a\n            }\n   \
    \     }\n        // If the list is not empty and the last number is not 1\n  \
    \      // then we know that we have found a multiple of 3\n        // otherwise\
    \ we are not finding 3 prime numbers\n        if (isPrime && primeNumbers.last\
    \ != 1) {\n            isPrime = false\n        }\n        return isPrime\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9fcl7zu9.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mprimeNumbers\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100) \n            return false\n        var primes = Array(1,\
    \ 2, 3)\n        var remainder = a % 3\n        \n        while (remainder ==\
    \ 0 && primes.length < 3)\n        {\n            primes = primes :+ 2\n     \
    \       remainder = a % 3\n        }\n\n        primes foreach (p => {\n     \
    \       if (a % p == 0 && primes.isEmpty || (primes.contains(p * 2) && (primes.contains(p\
    \ / 2) || primes.contains(p / 3))))\n            {\n                primes = primes.filterNot(p\
    \ => p <= remainder)\n                remainder = 0\n            }\n        })\n\
    \        remainder = 0 \n        remainder == 0 && (primes.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxlgd22zl.scala:35)\n\tat Problem.main(tmpxlgd22zl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val a = math.abs(a)\n        var isPrime = true\n        var aPrime\
    \ = a\n        for (i<-2 until aPrime) {\n            if (aPrime % i == 0) {\n\
    \                isPrime = false\n                break\n            }\n     \
    \   }\n        if (isPrime) {\n            return true\n        }\n        else\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpioj3cmiq.scala:12:25 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpioj3cmiq.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        \n        def check(a:Int) : Boolean = a > 100\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n\
    \        def isPrime(a:Int) : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n\
    \        def isPrime(a:Int) : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n\
    \        def isPrime(a:Int) : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n\
    \        def isPrime(a:Int) : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n\
    \        def isPrime(a:Int) : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isMultiple(a:\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfz3apsjg.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfz3apsjg.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mdef\e[0m \e[36misMultiple\e[0m(\e[36ma\e[0m:\e[35mInt\e\
    [0m) : \e[35mBoolean\e[0m = a % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misMultiple\
    \ is already defined as \e[33mmethod\e[0m \e[35misMultiple\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz3apsjg.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m\
    \ \e[36misPrime\e[0m(\e[36ma\e[0m:\e[35mInt\e[0m) : \e[35mBoolean\e[0m = a % \e\
    [31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrime is already defined as \e[33mmethod\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfz3apsjg.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mdef\e[0m \e[36misMultiple\e[0m(\e[36ma\e[0m:\e[35mInt\e\
    [0m) : \e[35mBoolean\e[0m = a % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misMultiple\
    \ is already defined as \e[33mmethod\e[0m \e[35misMultiple\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz3apsjg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m\
    \ \e[36misPrime\e[0m(\e[36ma\e[0m:\e[35mInt\e[0m) : \e[35mBoolean\e[0m = a % \e\
    [31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrime is already defined as \e[33mmetho"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = Vector(2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L,\
    \ 31L, 37L, 41L, 43L, 47L, 53L, 59L, \n                            61L, 67L, 71L,\
    \ 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, \n      \
    \                      137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, \n                            199L, 211L, 223L, 227L, 229L,\
    \ 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, \n                         \
    \   277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L,\
    \ \n                            359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L,\
    \ 411L, 419L, 421L, 431L, 433L, \n                            439L, 443L, 449L,\
    \ 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, \n             \
    \               521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L,\
    \ 599L, 601L, \n                            607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, \n                            683L,\
    \ 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, \n \
    \                           773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L, 853L, 857L, 859L, \n                            863L, 877L, 881L, 883L,\
    \ 887L, 907L, 911L, 919L, 929L, 937L, 941L, 947L, \n                         \
    \   953L, 967L, 971L, 977L, 983L, 991L, 997L, 1003L, 101L, 1021L, 1023L, 1027L,\
    \ \n                            1031L, 1037L, 1041L, 1047L, 1051L, 1059L, 1061L,\
    \ 1063L, 1069L, 1087L, 1091L, \n                            1093L, 10\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhcv0w0q.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnhcv0w0q.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.Set[Long]()\n        for (i = 2 to a-1) { //iterate\
    \ over all prime numbers starting from 2 to n\n            if (!primes.contains(i))\
    \ { //if the current element is not already in the prime set\n               \
    \ primes.add(i) //then add it to the prime set\n                if (isPrime(i)\
    \ && isMultiplyPrime(i * a)) //if the current number is a prime number and is\
    \ the multiplication of 3 prime numbers\n                    return true //then\
    \ return true\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ufzfi1i.scala:13:15 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m to a-\e[31m1\e\
    [0m) { \e[34m//iterate over all prime numbers starting from 2 to n\e[0m\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ufzfi1i.scala:13:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m2\e[0m to a-\e[31m1\e[0m) { \e[34m//iterate over all prime numbers\
    \ starting from 2 to n\e[0m\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           '<-' expected, but '{' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ufzfi1i.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6ufzfi1i.scala:19:9 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[3"
  stdout: ''
  timestamp: 1659979345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = (2 to Math.sqrt(a) by 2).filter(i => i%2==0 && i%3==0)\n\
    \        if (list.size>1) {\n            list.foreach(i=>{\n                val\
    \ list1 = list.filter(ii => ii%i==0)\n                if (list1.size>1) {\n  \
    \                  list1.foreach(ii=>{\n                        val list2 = list1.filter(iii\
    \ => iii%i==0)\n                        if (list2.size>1) {\n                \
    \            list2.foreach(iii=>{\n                                val list3 =\
    \ list2.filter(iiii => iiii%i==0)\n                                if (list3.size>1)\
    \ {\n                                    list3.foreach(iii=>{\n              \
    \                          val list4 = list3.filter(iiii => iiiii%i==0)\n    \
    \                                    if (list4.size>1) {\n                   \
    \                         list4.foreach(iiii=>{\n                            \
    \                    val list5 = list4.filter(iiiii => iiiii%i==0)\n         \
    \                                       if (list5.size>1) {\n                \
    \                                    list5.foreach(iiii=>{\n                 \
    \                                       val list6 = list5.filter(iiiii => iiiii%i==0)\n\
    \                                                        if (list6.size>1) {\n\
    \                                                            list6.foreach(iiii=>{\n\
    \                                                                val list7 = list6.filter(iiiii\
    \ => iiiii%i==0)\n                                                           \
    \     if (list7.size>1) {\n                                                  \
    \                  list7.foreach(iiii=>{\n                                   \
    \                                     val list8 = list7.filter(iiiii => iiiii%i==0)\n\
    \                                                                        if (list8.size>1)\
    \ {\n                                                            return false\n\
    \                                                        }\n                 \
    \                                                   })\n                     \
    \                                           } else {\n                       \
    \                                             return false\n                 \
    \                                               }\n                          \
    \                                  })\n                                      \
    \                  } else {\n                                                \
    \            return false\n                                                  \
    \      }\n                                                    })\n           \
    \                                     } else {\n                             \
    \                       return false\n                                       \
    \         }\n                                            })\n                \
    \                        } else {\n                            return false\n\
    \                        }\n                    })\n                } else {\n\
    \                    return false\n                }\n            })\n       \
    \ } else {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_b31io6j.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp_b31io6j.scala:79:0 ----------------------------\e[0m\e[0m\n\e[31m79\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_b31io6j.scala:12:34 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = (\e[31m2\e[0m\
    \ to Math.sqrt(a) by \e[31m2\e[0m).filter(\e[36mi\e[0m => i%\e[31m2\e[0m==\e[31m0\e\
    [0m && i%\e[31m3\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:    Double\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_b31io6j.scala:24:73 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                                        \e[33mval\e[0m\
    \ \e[36mlist4\e[0m = list3.filter(\e[36miiii\e[0m => iiiii%i==\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                      Not found: iiiii\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val listPrimes = List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l,\
    \ 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l,\
    \ 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l,\
    \ 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l,\
    \ 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 297l, 303l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 411l, 419l, 421l, 431l, 439l, 443l, 449l, 457l, 461l, 463l, 467l,\
    \ 479l, 487l, 491l, 499l, 501l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l,\
    \ 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l,\
    \ 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 711l, 715l, 719l, 727l, 733l,\
    \ 737l, 743l, 751l, 757l, 761l, 767l, 773l, 787l, 797l, 809l, 811l, 821l, 823l,\
    \ 827l, 829l, 839l, 853l, 857l, 859l, 863l, 877l, 881l, 883l, 887l, 907l, 911l,\
    \ 919l, 929l, 937l, 941l, 947l, 953l, 967l, 971l, 977l, 983l, 991l, 997l, 1003l,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz_aaydye.scala:13:4 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz_aaydye.scala:13:5 ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = Vector(2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L,\
    \ 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L)\n\
    \        val primeFactors = Vector(3L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L)\n\
    \n        // check if its not a multiple of any of the prime factors\n       \
    \ if(primeFactors.contains(a % primeFactors(0))){\n            return false\n\
    \        }\n        // now check if its less then 100\n        if(primes.contains(a\
    \ % primes(0))){\n            return true\n        }\n        // if its less,\
    \ check if its less the 100\n        if(a < 100){\n            return isMultiplyPrime(a\
    \ * 3L)\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8r34ys4j.scala:31)\n\tat Problem.main(tmp8r34ys4j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var a : Int\n        a = a / 100\n        var b = 2\n        var\
    \ c = 3\n        var d = 5\n        while (a < 3) {\n            if (isPrime(a))\
    \ {\n                if (a == b) {\n                    b++\n                \
    \    if (b < c) {\n                        c++\n                    }\n      \
    \          } else {\n                    c++\n                }\n            }\n\
    \            a++\n        }\n        val l = List(a to c)\n        if (l.contains(\
    \ l(c) + l(a)))\n            return true\n        else\n            return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfzm2xqyo.scala:20:23 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    b++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpfzm2xqyo.scala:25:23 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                    c++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfzm2xqyo.scala:28:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            a++\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E067] Syntax Error:\
    \ /tmp/tmpfzm2xqyo.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m : \e[35mInt\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^\e[0m\n\e[31m   |\e[0mDeclaration of \e[33mvariable\e[0m \e[35ma\e\
    [0m not allowed here: only classes can have declared but undefined members\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzm2xqyo.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(a)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfzm2xqyo.scala:31:29 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (l.contains( l(c) + l(a)))\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of scala.collection.immutable."
  stdout: ''
  timestamp: 1659979346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplyPrime = true\n        var isMultiplyPrime2 = true\n\
    \        var isMultiplyPrime3 = true\n        var isMultiplyPrime4 = true\n\n\
    \        if (a == 2) isMultiplyPrime = false\n        if (a == 3) {\n        \
    \    isMultiplyPrime = false\n            isMultiplyPrime2 = false\n        }\n\
    \        if (a >= 100) {\n            isMultiplyPrime = false\n            isMultiplyPrime2\
    \ = false\n            isMultiplyPrime3 = false\n            isMultiplyPrime4\
    \ = false\n        }\n\n        if (isMultiplyPrime == true) return  (true)\n\
    \        if (isMultiplyPrime2 == true) return  (true)\n        if (isMultiplyPrime3\
    \ == true) return  (true)\n        if (isMultiplyPrime4 == true) return  (true)\n\
    \n        val primesList: mutable.Seq[Long] = primes(100l)\n        primesList.foreach(a\
    \ => {\n            if (a > a) {\n                if (a % 2 == 0 && a % 3 != 0)\
    \ isMultiplyPrime2 = false\n                if (a % 2 == 1 && a % 3 != 1) isMultiplyPrime2\
    \ = false\n                if (a % 3 == 1 && a % 2 != 1) isMultiplyPrime2 = false\n\
    \                if (a % 3 == 2 && a % 2 != 2) isMultiplyPrime2 = false\n    \
    \            if (a % 4 == 3 && a % 2 != 3) isMultiplyPrime2 = false\n        \
    \        if (a % 4 == 2 && a % 3 != 2) isMultiplyPrime2 = false\n            \
    \    if (a % 5 == 3 && a % 3 != 3) isMultiplyPrime2 = false\n                if\
    \ (a % 5 == 2 && a % 2 != 2) isMultiplyPrime2 = false\n                if (a %\
    \ 6 == 3 && a % 3 != 3) isMultiplyPrime2 = false\n                if (a % 6 ==\
    \ 2 && a % 2 != 2) isMultiplyPrime2 = false\n            }\n        })\n\n   \
    \     if (isMultiplyPrime2 == true) return  (true)\n        if (isMultiplyPrime3\
    \ == true) return  (true)\n        if (isMultiplyPrime4 == true) return  (true)\n\
    \n        return  (false)\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rlvv89m.scala:34:24 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesList\e[0m: mutable.Seq[\e\
    [35mLong\e[0m] = primes(\e[31m100l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rlvv89m.scala:34:44\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesList\e[0m: mutable.Seq[\e[35mLong\e[0m] = primes(\e[31m100l\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Not found: primes\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var result = (true: java.lang.Boolean)\n        var lastPrime = 0\n\
    \        var isPrime = true\n        while (isPrime == true) {\n            //\
    \ if last prime is bigger than current one then it is composite else prime\n \
    \           if (a < lastPrime) {\n                isPrime = false\n          \
    \  } else {\n                lastPrime = a\n            }\n            // if current\
    \ number is equal to or greater than 1 then it is composite else prime\n     \
    \       if (a <= 1) {\n                isPrime = false\n            } else {\n\
    \                var currentPrime = 3\n                var currentNumber = 3\n\
    \                var i = 1\n                while (currentPrime != currentNumber)\
    \ {\n                    // for smaller numbers current prime must be greater\
    \ than last prime \n                    // therefore while loop should be infinite\n\
    \                    while ((currentPrime * currentPrime) < lastPrime) {\n   \
    \                     currentPrime = currentPrime + 1\n                    }\n\
    \                    // for bigger numbers current prime must be less then last\
    \ prime \n                    // therefore while loop should finish at 0\n   \
    \                 while ((currentPrime * currentPrime) >= lastPrime) {\n     \
    \                   currentPrime = currentPrime - 1\n                    }\n \
    \                   // if current prime is same with last prime then it is composite\
    \ otherwise prime \n                    if (currentPrime == lastPrime) {\n   \
    \                     isPrime = false\n                    } else {\n        \
    \                currentNumber = currentPrime * currentNumber\n              \
    \          i = i + 1\n                    }\n                }\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1tytu1_f.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                lastPrime = a\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (a : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isPrime = a.toInt%2==1\n        var mult = 1\n        var counter\
    \ = 1\n        for(x <- 3 to a/2 by 2){\n            mult *= x\n            for(x\
    \ <- 3 to x/2 by 2){\n                mult += x\n            }\n            mult\
    \ /= x\n            counter++ // increment the counter \n        }\n        if(a%mult==0){\n\
    \            return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6d3d29ww.scala:21:21 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            counter++ \e[34m// increment the counter\
    \ \e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m   \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6d3d29ww.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(x <- \e[31m3\e[0m to a/\e[31m2\e\
    [0m by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m           \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isMultiplyPrime(i:Int, mc:Int, m:Int):Boolean = \n        if\
    \ (i==0 && mc>0) true\n        else if (mc==0) false\n        else { \n      \
    \      if (m%i==0) isMultiplyPrime(i+1, mc, m+1)\n            else isMultiplyPrime(i+1,\
    \ mc+1, m)\n        }\n        isMultiplyPrime(0, 3, a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvic7ltw8.scala:19:30\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        isMultiplyPrime(\e[31m0\e\
    [0m, \e[31m3\e[0m, a)\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (a : Long)\n\e[31m\
    \   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val num = 31l\n        val primes = mutable.HashSet[Long]()\n   \
    \     while(num > 0){\n            if(primes.contains(num)){\n               \
    \ return false\n            }\n            if(num%2 == 0){\n                primes\
    \ += 2\n            }\n            if(num%3 == 0){\n                primes +=\
    \ 3\n            }\n            num /= 2\n        }\n        true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra1qjrv9.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpra1qjrv9.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            num /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // return true if the a is less than 100\n        if(a < 100) {\n\
    \            // a is less than 100 return false\n            return false\n  \
    \      }\n        // a is a prime number\n        var n = 3\n        // iterate\
    \ through the number until it divides\n        while(n <= a) {\n            if(a\
    \ % n == 0) {\n                return false\n            }\n            // if\
    \ n is divisible by i then n is no prime\n            if(a%n != 0) {\n       \
    \         return false\n            }\n            // update n\n            n\
    \ = n + 2\n        }\n        // return true if a is divisible by 3 and 5\n  \
    \      return true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cxwvgvi.scala:36)\n\tat Problem.main(tmp7cxwvgvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100) {\n            // Find all prime numbers between 1 and\
    \ a using sieve of erathosthenes\n            val allPrimes = Array[Long]()\n\
    \            for( num <- 1 until a) {\n                if (isPrime(num)) {\n \
    \                   allPrimes += num\n                }\n            }\n     \
    \       \n            // Check if 3 primes are in the array\n            val found\
    \ = 3\n            val primes = allPrimes.toSet.takeWhile(p => found > 0)\n  \
    \          \n            if (primes.size == 3) {\n                return true\n\
    \            } else {\n                return false\n            }\n        }\
    \ else {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7whpkd_h.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m( num\
    \ <- \e[31m1\e[0m until a) {\n\e[31m\e[31m   |\e[0m                          \
    \      ^\e[0m\n\e[31m   |\e[0m                                Found:    (a : Long)\n\
    \e[31m   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7whpkd_h.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (isPrime(num)) {\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7whpkd_h.scala:17:30 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                    allPrimes += num\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of Array[Long]\
    \ - did you mean allPrimes.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100l) true\n        else a match {\n            case 2l :\
    \ Long => {\n                if (isMultiplyPrime(3*a)) isMultiplyPrime(5*a)\n\
    \                else false\n            }\n            case 3l : Long => {\n\
    \                if (isMultiplyPrime(5*a)) isMultiplyPrime(7*a)\n            \
    \    else false\n            }\n            case 5l : Long => {\n            \
    \    if (isMultiplyPrime(7*a)) isMultiplyPrime(11*a)\n                else false\n\
    \            }\n            case 7l : Long => {\n                if (isMultiplyPrime(11*a))\
    \ isMultiplyPrime(13*a)\n                else false\n            }\n         \
    \   case 11l : Long => {\n                if (isMultiplyPrime(13*a)) isMultiplyPrime(17*a)\n\
    \                else false\n            }\n            case 13l : Long => {\n\
    \                if (isMultiplyPrime(17*a)) isMultiplyPrime(19*a)\n          \
    \      else false\n            }\n            case 17l : Long => {\n         \
    \       if (isMultiplyPrime(19*a)) isMultiplyPrime(23*a)\n                else\
    \ false\n            }\n            case 19l : Long => {\n                if (isMultiplyPrime(23*a))\
    \ isMultiplyPrime(29*a)\n                else false\n            }\n         \
    \   case 23l : Long => {\n                if (isMultiplyPrime(29*a)) isMultiplyPrime(31*a)\n\
    \                else false\n            }\n            case 29l : Long => {\n\
    \                if (isMultiplyPrime(31*a)) true\n                else false\n\
    \            }\n            case 31l : Long => {\n                if (isMultiplyPrime(33*a))\
    \ true\n                else false\n            }\n            case 33l : Long\
    \ => {\n                if (isMultiplyPrime(37*a)) true\n                else\
    \ false\n            }\n            case 37l : Long => {\n                if (isMultiplyPrime(41*a))\
    \ true\n                else false\n            }\n            case 41l : Long\
    \ => {\n                if (isMultiplyPrime(43*a)) true\n                else\
    \ false\n            }\n            case 43l : Long => {\n                if (isMultiplyPrime(47*a))\
    \ true\n                else false\n            }\n            case 47l : Long\
    \ => {\n                if (isMultiplyPrime(53*a)) true\n                else\
    \ false\n            }\n            case 53l : Long => {\n                if (isMultiplyPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpghifqxqj.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpghifqxqj.scala:95:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpghifqxqj.scala:79:20 --------------------\e[0m\e[0m\n\
    \e[31m79 |\e[0m                \e[33mif\e[0m (isMultiplyPrime\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    \e[1m\e[31mLong\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e\
    [31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpghifqxqj.scala:92:5\
    \ ---------------------\e[0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpghifqxqj.scala:81:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m81 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val a = ((a % 10000000) + 1) div 10000000\n        val list1 = List(2,\
    \ 3, 5)\n        val list2 = List(2, 3, 7, 11)\n        val list3 = List(3, 5,\
    \ 7, 11)\n        if (list1.exists(x => x == a))\n            return true\n  \
    \      if (list2.exists(x => x == a))\n            return true\n        if (list3.exists(x\
    \ => x == a))\n            return true\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp95z8_yvc.scala:12:18 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = ((a % \e[31m10000000\e\
    [0m) + \e[31m1\e[0m) div \e[31m10000000\e[0m\n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e\
    [35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if ((a < 100) && (a % 3 == 0) && (a % 5 == 0)) {\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjc0a39_b.scala:20)\n\tat Problem.main(tmpjc0a39_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.ArrayBuffer.empty[Int]\n\n        def isPrime(n:\
    \ Int) : Boolean = n <= 1 || (n % 2 != 0 && n % 3 != 0) || (n % 5 == 0)\n    \
    \    def isMultiplication(n: Int) : Boolean = n != 1 && !isPrime(n)\n\n      \
    \  def findPrimes(n : Int) : Unit = {\n            if ((isPrime(n) == true) &&\
    \ (n <= 100)) {\n                primes += n\n            }\n            if (n\
    \ % 2 == 0) findPrimes(n / 2)\n            if (n % 3 == 0) findPrimes(n / 3)\n\
    \            if (n % 5 == 0) findPrimes(n / 5)\n        }\n\n        primes ++=\
    \ List(3, 5).filter(x => x > a)\n        var i = 2\n        while (i < primes.size\
    \ + 1) {\n            if (isMultiplication(a) && isMultiplication(primes(i)))\
    \ {\n                return true\n            }\n            i += 2\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wqn305k.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6wqn305k.scala:29:33 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (isMultiplication(a) && isMultiplication(primes(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (a : Long)\n\e[31m   |\e[0m    \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Use an accumulator to keep track of whether we've found a multiply\
    \ prime\n        // This will be used because we know that multiplying any number\
    \ with 3 primes\n        // will result in no prime number left to divide by\n\
    \        var multPrime = true\n        // Keep a copy of the original number (a)\
    \ \n        val original = a\n        // Create a mutable set to keep track of\
    \ all the prime numbers we \n        // know about\n        val primes = scala.collection.mutable.Set()\n\
    \        // Loop through the numbers from 1 to 'a' \n        for (x <- 1 to original)\
    \ {\n            // if the current number is divisible by any number we know about,\
    \ \n            // set multPrime to false\n            if (x % primes.contains(0)\
    \ == false)\n                multPrime = false\n            // if x is prime number,\
    \ add to the set of prime numbers we know about\n            if (isPrime(x) ==\
    \ true)\n                primes += x\n        }\n        // If we found a multiply\
    \ prime number, return true\n        if (multPrime)\n            return true\n\
    \        // If we didn't find a multiply prime number, return false\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkqwi07d.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m1\e[0m to original) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (original : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnkqwi07d.scala:25:36 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (x % primes.contains(\e[31m0\e\
    [0m) == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                             \
    \       ^\e[0m\n\e[31m   |\e[0m                                    Found:    (\e\
    [31m0\e[0m : Int)\n\e[31m   |\e[0m                                    Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnkqwi07d.scala:25:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e\
    [0m (x % primes.contains(\e[31m0\e[0m) == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments (Boolean)\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpnkqwi07d.scala:28:16 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33mif\e[0m (isPrime(x) == \e[31mtrue\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkqwi07d.scala:29:26\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                primes += x\n\
    \e[31m\e[31m   |\e[0m                          ^\e["
  stdout: ''
  timestamp: 1659979352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var primes : List[Long] = Nil\n        var num : Long = a\n\n   \
    \     while(num > 2) {\n            if(primes.contains(num)) {\n             \
    \   return false\n            }\n            primes = primes ::: List(num + 1)\
    \ //prepend 1 to prime number\n            for(i <- 0 until primes.size) {\n \
    \               num -= primes(i)\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp08tp4hg.scala:27)\n\tat Problem.main(tmpp08tp4hg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = Seq(3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n\
    \        var isPrime = true\n        for (i <- primes.iterator) {\n          \
    \  if (a.mod(i) == 0) isPrime = false\n        }\n        isPrime\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0vkyggz0.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (a.mod(i) == \e[31m0\e[0m)\
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // We know that a is less then 100.\n        // We can compute if\
    \ 3 is a prime by checking if 3 is divisible by 5 or 7\n        if (a < 100) {\n\
    \            return false\n        }\n        // We need to know if a is a multiple\
    \ of 3 or 5. \n        // If 2 is a multiple of 3, we can divide by 3 and check\
    \ if it is a prime.\n        // If 2 is not a multiple of 3, we can divide by\
    \ 5 and check if it is a prime.\n        if (a % 3 == 0) {\n            return\
    \ isPrime(a)\n        }\n        if (a % 5 == 0) {\n            return isPrime(a)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodemfqat.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mreturn\e[0m isPrime(a)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodemfqat.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e\
    [0m isPrime(a)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isPrime = (2 to a.toInt).forall(i => a.toLong.quot(i).toDouble\
    \ > 1.0)\n        if(isPrime) a % 2==0 && a % 3==0 && a.divide(4).toLong.quot(2).toDouble\
    \ < 1.0 else false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3285ljz.scala:12:58 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2\e\
    [0m to a.toInt).forall(\e[36mi\e[0m => a.toLong.quot(i).toDouble > \e[31m1.0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue quot is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3285ljz.scala:13:46\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m(isPrime)\
    \ a % \e[31m2\e[0m==\e[31m0\e[0m && a % \e[31m3\e[0m==\e[31m0\e[0m && a.divide(\e\
    [31m4\e[0m).toLong.quot(\e[31m2\e[0m).toDouble < \e[31m1.0\e[0m \e[33melse\e[0m\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value\
    \ divide is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659979355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // The answer is false if less than 100 \n        if (a <= 100) {\n\
    \            // Get all prime numbers between 1 and a \n            // The product\
    \ of 2 primes is a factor of 3. \n            // Therefore, we can stop this loop\
    \ when product >= 3 \n            // The product of 3 primes is a factor of 5\
    \ * 7 * 11. \n            var primes = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \            var i = 2\n            while(a % i != 0) {\n                primes\
    \ += i\n                a /= i\n            }\n            for(p <- primes.takeWhile(_\
    \ <= a)) {\n                if(a % p == 0) {\n                    return false\n\
    \                }\n            }\n            // The product of 3 primes is a\
    \ factor of a prime number a\n            // Therefore, a is a multiple of 3 primes.\
    \ \n            return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps4ha0i4i.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                a /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean a.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val num = (1 until a).toList\n        val prime = 2 until a\n   \
    \     val l = (2l).pow(a)\n        prime forall {\n            _ % _ == 0 => false\n\
    \            _ % _ == 1 => true\n        }\n        for {\n            a <- num\n\
    \            b <- prime\n        } yield a*b == l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9686zcm7.scala:16:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            _ % _ == \e[31m0\e[0m => \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            not\
    \ a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmp9686zcm7.scala:17:18\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     _ % _ == \e[31m1\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            not a legal formal parameter\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9686zcm7.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = (\e[31m1\e[0m\
    \ until a).toList\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (a : Long)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9686zcm7.scala:13:28 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m = \e[31m2\e[0m until\
    \ a\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (a : Long)\n\e[31m   |\e[0m           \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9686zcm7.scala:14:21 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36ml\e[0m = (\e[31m2l\e[0m).pow(a)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue pow is not a member\
    \ of Long, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m   |\e[0m\
    \  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9686zcm7.scala:19:8 ---------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mfor\e[0m {\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659979355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val prime : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        val prime : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        val prime : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        var sum = 0\n        prime.append(1)\n        for (prime <- prime) {\n\
    \            var i = 0\n            while (true) {\n                if (i % a\
    \ == 0) {\n                    sum += prime\n                    prime.remove(i)\n\
    \                    prime.append(i)\n                    if (i == 100) {\n  \
    \                      return true\n                    }\n                } else\
    \ {\n                    i += 1\n                }\n                if (prime.isEmpty)\
    \ {\n                    break\n                }\n            }\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyjj8rep7.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprime is already defined as \e[33mvalue\e[0m \e[35mprime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyjj8rep7.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprime is already defined as \e[33mvalue\e[0m \e[35mprime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyjj8rep7.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyjj8rep7.scala:12:48\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mprime\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n: Long) : Boolean = {\n            var factor: Long\
    \ = 0\n            if (n % 2 == 0) return false\n            var i = 2L\n    \
    \        while (i <= n/2L) {\n                if (n % i == 0) return false\n \
    \               i += 2L\n            }\n            return true\n        }\n \
    \       val prime = mutable.LinkedList[Long]()\n        val primes = mutable.LinkedList[Long]()\n\
    \        var divisor: Long = 1\n        var isMultiplicationPrime = false\n  \
    \      prime += 2L\n        primes += 2L\n        while (prime != primes.head)\
    \ {\n            divisor += 1L\n            if (divisor <= a) continue\n     \
    \       while (prime != primes.head && isPrime(primes.head)) {\n             \
    \   primes.head += divisor\n                prime += divisor\n            }\n\
    \            if (prime == primes.head) {\n                isMultiplicationPrime\
    \ = true\n                break\n            }\n        }\n        isMultiplyPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeitkm5gu.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprime\e[0m = mutable.LinkedList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeitkm5gu.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.LinkedList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeitkm5gu.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (divisor <= a) continue\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: continue\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeitkm5gu.scala:37:16 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeitkm5gu.scala:40:8 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        isMultiplyPrime\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mLong\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var numPrime = 0\n        var i = 2\n        while (i <= a) {\n \
    \           if (isPrime(i)) {\n                numPrime += 1\n            }\n\
    \            i += 1\n        }\n\n        if (numPrime >= 3) {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprc1pvwvs.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a%2 == 0 || a%3 == 0) true\n        else false \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2j6cy9u.scala:19)\n\tat Problem.main(tmpr2j6cy9u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val isMultiPrime = a.toInt == Math.ceil(a.toDouble / 3).toInt\n \
    \       val numPrimes: Map[Int, Boolean] = \n            primeFactors.filter(_\
    \ > a).map(p => (p, true)).toMap\n        val result = (numPrimes.filter(a % _._2).length\
    \ == 3)\n        result && isMultiPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwoibgbey.scala:14:12 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            primeFactors.filter(_ > a).map(\e[36mp\e\
    [0m => (p, \e[31mtrue\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpwoibgbey.scala:15:41 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (numPrimes.filter(a\
    \ % _._2).length == \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((_$2._2 : => Boolean))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val p = scala.math.BigInt(a)\n        val primes = List(2l,3l,5l,7l,11l,13l,17l,19l,23l,29l,31l,37l,41l,43l,47l,53l,59l,61l,67l,71l,73l,79l,83l,89l,97l)\n\
    \        val p = p.divide(BigInt(primes(1)))\n        (p.compareTo(BigInt(primes(2)))\
    \ < 0 && p.compareTo(BigInt(primes(3))) < 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuel1i58d.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = p.divide(BigInt(primes(\e\
    [31m1\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isMultiplyPrime = 0\n        if (a > 100) isMultiplyPrime = false\n\
    \        else {\n            val number: Array[Long] = new Array[Long](100)\n\
    \            var product: Long = 0\n            var maxProduct = Long.MaxValue\n\
    \n            for (i <- 2 to a) {\n                val currentProduct = 1\n  \
    \              for ((j <- 2 to i) {\n                    if (i * j > number.length)\
    \ {\n                        val newArray = new Array[Long](i * j)\n         \
    \               Array.copy(number, 0, newArray, 0, i * j)\n                  \
    \      number = newArray\n                    }\n                    val currentMultiplication\
    \ = number(i) * j\n                    if (currentMultiplication > maxProduct)\
    \ {\n                        maxProduct = currentMultiplication\n            \
    \        }\n                    if (currentProduct * currentMultiplication > product)\
    \ {\n                        product = currentProduct * currentMultiplication\n\
    \                    }\n                    currentProduct *= j\n            \
    \    })\n            }\n            isMultiplyPrime = product <= maxProduct\n\
    \        }\n        isMultiplyPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfyhqnzmr.scala:21:24 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e[0m ((j <- \e[31m2\e[0m to\
    \ i) {\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m\
    \                        ')' expected, but '<-' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpfyhqnzmr.scala:21:35 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m                \e[33mfor\e[0m ((j <- \e[31m2\e[0m to i) {\n\e[31m\e\
    [31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m      \
    \                             '<-' expected, but '{' found\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpfyhqnzmr.scala:35:18 ---------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m                })\n\e[31m\e[31m   |\e[0m                \
    \  ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfyhqnzmr.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (a > \e\
    [31m100\e[0m) isMultiplyPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                       Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfyhqnzmr.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (i <- \e[31m2\e[0m to a) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (a : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyhqnzmr.scala:35:17\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                })\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of "
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val arrList = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val arrPrime = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var count = 0\n        var bool1 = false\n        var\
    \ bool2 = false\n        var bool3 = false\n        var bool4 = false\n      \
    \  var bool5 = false\n        var bool6 = false\n        var bool7 = false\n \
    \       var bool8 = false\n        var bool9 = false\n        var bool10 = false\n\
    \        var bool11 = false\n        var bool12 = false\n        var bool13 =\
    \ false\n        var bool14 = false\n        var bool15 = false\n        var bool16\
    \ = false\n        var bool17 = false\n        var bool18 = false\n        var\
    \ bool19 = false\n        var bool20 = false\n        var bool21 = false\n   \
    \     var bool22 = false\n        var bool23 = false\n        var bool24 = false\n\
    \        var bool25 = false\n        var bool26 = false\n        var bool27 =\
    \ false\n        var bool28 = false\n        var bool29 = false\n        var bool30\
    \ = false\n        var bool31 = false\n        var bool32 = false\n        var\
    \ bool33 = false\n        var bool34 = false\n        var bool35 = false\n   \
    \     var bool36 = false\n        var bool37 = false\n        var bool38 = false\n\
    \        var bool39 = false\n        var bool40 = false\n        var bool41 =\
    \ false\n        var bool42 = false\n        var bool43 = false\n        var bool44\
    \ = false\n        var bool45 = false\n        var bool46 = false\n        var\
    \ bool47 = false\n        var bool48 = false\n        var bool49 = false\n   \
    \     var bool50 = false\n        var bool51 = false\n        var bool52 = false\n\
    \        var bool53 = false\n        var bool54 = false\n        var bool55 =\
    \ false\n        var bool56 = false\n        var bool57 = false\n        var bool58\
    \ = false\n        var bool59 = false\n        var bool60 = false\n        var\
    \ bool61 = false\n        var bool62 = false\n        var bool63 = false\n   \
    \     var bool64 = false\n        var bool65 = false\n        var bool66 = false\n\
    \        var bool67 = false\n        var bool68 = false\n        var bool69 =\
    \ false\n        var bool70 = false\n        var bool71 = false\n        var bool72\
    \ = false\n        var bool73 = false\n        var bool74 = false\n        var\
    \ bool75 = false\n        var bool76 = false\n        var bool77 = false\n   \
    \     var bool78 = false\n        var bool79 = false\n        var bool80 = false\n\
    \        var bool81 = false\n        var bool82 = false\n        var bool\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpesksqrl9.scala:98:4 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpesksqrl9.scala:98:5 ---------------------\e[0m\e[0m\n\e[31m98 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val listOfPrimes = List(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n\
    \        for (i <- listOfPrimes) {\n            if (a % i == 0)\n            \
    \    return false\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1k1n94ck.scala:21)\n\tat Problem.main(tmp1k1n94ck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        //  a < 100\n        val p = findPrimes(a)\n        for(i<-0 to p-2){\n\
    \            if(p==i){\n                return true\n            }\n         \
    \   if(p.toLong*p == i){\n                return true\n            }\n       \
    \ }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i3q8cj_.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = findPrimes(a)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: findPrimes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if((a % 3 != 0) || (a < 100)) {\n            return false\n     \
    \   }\n        var sum = 0\n        var num = 2\n        var i = 1\n        while(i\
    \ < a) {\n            sum += i\n            num += 1\n            i += 1\n   \
    \     }\n        while(sum > num) {\n            sum += num\n            num +=\
    \ 1\n        }\n        return (num == 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbor2m81.scala:31)\n\tat Problem.main(tmpvbor2m81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(n: Long) : Boolean = {\n            n <= 1 || !(n % 2\
    \ == 0 || n % 3 == 0)\n        }\n        def isMulti(n: Long) : Boolean = {\n\
    \            n <= 100 && !(n % 3 == 0 || n % 5 == 0)\n        }\n        \n  \
    \      if (isPrime(a)) {\n            if (isMulti(a)) {\n                true\n\
    \            } else {\n                false\n            }\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputzht0tc.scala:31)\n\tat Problem.main(tmputzht0tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val a1 = a / 3 * 3\n        val a2 = a / 3 * 5\n        val a3 =\
    \ a / 3 * 7\n        val a4 = a / 3 * 9\n        val a5 = a / 3 * 11\n       \
    \ val a6 = a / 3 * 13\n        val a7 = a / 3 * 17\n        val a8 = a / 3 * 19\n\
    \        val a9 = a / 3 * 21\n        val a10 = a / 3 * 23\n        val a11 =\
    \ a / 3 * 25\n        val a12 = a / 3 * 27\n        val a13 = a / 3 * 29\n   \
    \     val a14 = a / 3 * 31\n        val a15 = a / 3 * 33\n        val a16 = a\
    \ / 3 * 35\n        val a17 = a / 3 * 37\n        val a18 = a / 3 * 39\n     \
    \   val a19 = a / 3 * 41\n        val a20 = a / 3 * 43\n        val a21 = a /\
    \ 3 * 45\n        val a22 = a / 3 * 47\n        val a23 = a / 3 * 49\n       \
    \ val a24 = a / 3 * 51\n        val a25 = a / 3 * 53\n        val a26 = a / 3\
    \ * 55\n        val a27 = a / 3 * 57\n        val a28 = a / 3 * 59\n        val\
    \ a29 = a / 3 * 61\n        val a30 = a / 3 * 63\n        val a31 = a / 3 * 65\n\
    \        val a32 = a / 3 * 67\n        val a33 = a / 3 * 69\n        val a34 =\
    \ a / 3 * 71\n        val a35 = a / 3 * 73\n        val a36 = a / 3 * 75\n   \
    \     val a37 = a / 3 * 77\n        val a38 = a / 3 * 79\n        val a39 = a\
    \ / 3 * 81\n        val a40 = a / 3 * 83\n        val a41 = a / 3 * 85\n     \
    \   val a42 = a / 3 * 87\n        val a43 = a / 3 * 89\n        val a44 = a /\
    \ 3 * 91\n        val a45 = a / 3 * 93\n        val a46 = a / 3 * 95\n       \
    \ val a47 = a / 3 * 97\n        val a48 = a / 3 * 99\n        val a49 = a / 3\
    \ * 101\n        val a50 = a / 3 * 103\n        val a51 = a / 3 * 105\n      \
    \  val a52 = a / 3 * 107\n        val a53 = a / 3 * 109\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpmyf1bt0_.scala:65:11 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyf1bt0_.scala:66:5 ---------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 until\
    \ a){\n            if(a % i == 0){\n                nums += i\n            }\n\
    \        }\n        nums.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka64nipy.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpka64nipy.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m until a){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (a : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a%15 == 0 && a%7 == 0 && a%3 == 0 && a%5 == 0 && a%7 == 0 && a%11\
    \ == 0 && a%13 == 0) {\n            return true\n        }\n        else {\n \
    \           return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa6enn1lq.scala:21)\n\tat Problem.main(tmpa6enn1lq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        for (x <- 1 to a) {\n            for (p <- 2 to (x-1)) {\n      \
    \          if (x == 3 && p == 2)\n                    return true\n          \
    \      if (x == p && x == x-p)\n                    return true\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgo4137ci.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m1\e[0m to a) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (a : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val n = 30 % a\n        val m = n / 3\n        val listOfPrimes =\
    \ List(2, 3, 5)\n        for(x <- listOfPrimes) {\n            if (n == x*m) {\n\
    \                return true\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkivu8evi.scala:23)\n\tat Problem.main(tmpkivu8evi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var prime : mutable.Set[Long] = new mutable.Set[Long]()\n       \
    \ prime += 2l\n        var factor: Long = a / prime.get(0)\n        prime += a\
    \ / prime.get(0)\n        for (i in 1 to prime.size) {\n            factor = factor\
    \ / prime.get(i)\n            prime += a / prime.get(i)\n            if (factor\
    \ == 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlpeesm7.scala:16:35 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i in \e[31m1\e[0m to prime.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m  \
    \ |\e[0m                                   '<-' expected, but '{' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptlpeesm7.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mprime\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlpeesm7.scala:12:44\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e\
    [36mprime\e[0m : mutable.Set[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlpeesm7.scala:20:9\
    \ -------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert"
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = mutable.MutableList[Long]()\n        var b = a\n     \
    \   while(b > 0) {\n            val list = mutable.MutableList[Long]()\n     \
    \       for(x <- 2 until b) {\n                if(a % x == 0) {\n            \
    \        b += 1\n                } else {\n                    list.+=x\n    \
    \            }\n            }\n            if(list.size == 3) {\n            \
    \    list.clear()\n                return true\n            } else {\n       \
    \         list.clear()\n                b += 1\n            }\n        }\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdb3zuglr.scala:20:28 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    list.+=x\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdb3zuglr.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdb3zuglr.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdb3zuglr.scala:16:29 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(x <- \e[31m2\e[0m until b)\
    \ {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (b : Long)\n\e[31m   |\e[0m          \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primeList = new scala.collection.mutable.MutableList[Long]()\n\
    \        primeList.add(2)\n        primeList.add(3)\n        primeList.add(5)\n\
    \n        def isPrime(i : Long) : Boolean = {\n            if (i < 2)\n      \
    \          false\n            else\n                primeList.contains(i)\n  \
    \      }\n\n        def isMultiplyPrime(a: Long, b: Long) : Boolean = {\n    \
    \        if (a < 0 || b < 0)\n                false\n            else\n      \
    \      {\n                if (a == b)\n                    true\n            \
    \    else\n                {\n                    for (i <- 1 to a) {\n      \
    \                  if (isPrime(i))\n                            primeList.remove(i)\n\
    \                    }\n                    for (j <- 1 to b) {\n            \
    \            if (isPrime(j))\n                            primeList.add(j)\n \
    \                   }\n                    if (primeList.size == 0)\n        \
    \                return false\n                    else\n                    \
    \    return true\n                }\n            }\n        }\n\n        def checkPrime(x:\
    \ Long, i: Int) : Boolean = {\n            val j = x\n            if (j <= a)\
    \ return\n            if (primeList.contains(j)) return\n            if (primeList.size\
    \ == 0) {\n                primeList.add(j)\n                return\n        \
    \    }\n            checkPrime(j, i + 1)\n        }\n\n        def checkPrime(x:\
    \ Long, i: Int) : Boolean = {\n            val j = x\n            if (j <= a)\
    \ return\n            if (primeList.contains(j)) return\n            if (primeList.size\
    \ == 0) {\n                primeList.add(j)\n                return\n        \
    \    }\n            checkPrime(j, i + 1)\n        }\n\n        val check = (a\
    \ until a * 3) map checkPrime\n        val list = check.mkString(\",\")\n    \
    \    println(list.split(\",\").filter(_.nonEmpty).length == 3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptgsv4fcm.scala:60:12 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mdef\e[0m \e[36mcheckPrime\e[0m(\e[36mx\e\
    [0m: \e[35mLong\e[0m, \e[36mi\e[0m: \e[35mInt\e[0m) : \e[35mBoolean\e[0m = {\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mcheckPrime is already defined\
    \ as \e[33mmethod\e[0m \e[35mcheckPrime\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m61 |\e[0m            \e[33mval\e[0m \e[36mj\e[0m = x\n\e[31m62 |\e[0m  \
    \          \e[33mif\e[0m (j <= a) \e[33mreturn\e[0m\n\e[31m63 |\e[0m         \
    \   \e[33mif\e[0m (primeList.contains(j)) \e[33mreturn\e[0m\n\e[31m64 |\e[0m \
    \           \e[33mif\e[0m (primeList.size == \e[31m0\e[0m) {\n\e[31m65 |\e[0m\
    \                primeList.add(j)\n\e[31m66 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m67 |\e[0m            }\n\e[31m68 |\e[0m            checkPrime(j, i\
    \ + \e[31m1\e[0m)\n\e[31m69 |\e[0m        }\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptgsv4fcm.scala:12:53 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeList\e[0m = \e[33mnew\e[0m scala.collection.mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            type MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgsv4fcm.scala:33:35 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mfor\e[0m (i <- \e[31m1\e[0m\
    \ to a) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (a : Long)\n\e[31m \
    \  |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgsv4fcm.scala:37:35 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    \e[33mfor\e[0m (j <- \e[31m1\e[0m\
    \ to b) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    "
  stdout: ''
  timestamp: 1659979366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Write your solution here\n        val product = a.toInt\n    \
    \    val isMultiplicationPrime = true\n        if(product == 2) true\n       \
    \ else if(product % 3 == 0) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0xxia78r.scala:22)\n\tat Problem.main(tmp0xxia78r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = new mutable.HashSet[Long]()\n        val list2 = new mutable.HashSet[Long]()\n\
    \        val list3 = new mutable.HashSet[Long]()\n        val list4 = new mutable.HashSet[Long]()\n\
    \n        list.add(a)\n        list.add(a+3)\n        list.add(a+5)\n        list.add(a+7)\n\
    \n        list2.add(a+3)\n        list2.add(a+5)\n        list2.add(a+7)\n\n \
    \       list3.add(a+5)\n        list3.add(a+7)\n\n        list4.add(a+7)\n\n \
    \       list3.remove(5)\n\n        list2.remove(7)\n        list2.remove(3)\n\n\
    \        list.remove(7)\n        list.remove(5)\n\n        list2.remove(3)\n \
    \       list2.remove(5)\n\n        list.remove(5)\n        list.remove(7)\n\n\
    \        list.remove(7)\n        list.remove(3)\n\n        list.remove(7)\n  \
    \      list.remove(3)\n\n        list2.remove(3)\n        list2.remove(7)\n  \
    \      list2.remove(5)\n\n        list2.remove(3)\n        list2.remove(5)\n \
    \       list2.remove(7)\n\n        list3.remove(3)\n        list3.remove(5)\n\
    \        list3.remove(7)\n\n        list3.remove(5)\n        list3.remove(7)\n\
    \n        list4.add(7)\n\n        list2.remove(3)\n        list2.remove(5)\n \
    \       list2.remove(7)\n\n        list.remove(7)\n        list.remove(5)\n  \
    \      list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n  \
    \      list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n    \
    \    list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n    \
    \    list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n      \
    \  list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n      \
    \  list.remove(7)\n        list.remove(3)\n\n        list2.remove(3)\n       \
    \ list2.remove(5)\n        list2.remove(7)\n\n        list.remove(7)\n       \
    \ list.remove(5)\n        list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\
    \n        list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n \
    \       list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n \
    \       list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n   \
    \     list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n   \
    \     list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n     \
    \   list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n     \
    \   list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n       \
    \ list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n       \
    \ list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\
    \n        list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n \
    \       list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n \
    \       list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n   \
    \     list.remove(\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4r6w8my2.scala:166:20 --------------------------\e\
    [0m\e[0m\n\e[31m166 |\e[0m        list.remove(\n\e[31m\e[31m    |\e[0m       \
    \             ^\e[0m\n\e[31m    |\e[0m                    expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4r6w8my2.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4r6w8my2.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4r6w8my2.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlist3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4r6w8my2.scala:15:24 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mlist4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var flag : Boolean = false\n        for(i <- (2 to a)){\n       \
    \     for(j <- (2 to a)){\n                for(k <- (2 to a)){\n             \
    \       if((i*j*k == a)) {\n                        flag = true\n            \
    \            break\n                    }\n                }\n            }\n\
    \        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet37yjku.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- (\e\
    [31m2\e[0m to a)){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (a : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpet37yjku.scala:14:27 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mfor\e[0m(j <- (\e[31m2\e[0m to a)){\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (a : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet37yjku.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m(k\
    \ <- (\e[31m2\e[0m to a)){\n\e[31m\e[31m   |\e[0m                            \
    \   ^\e[0m\n\e[31m   |\e[0m                               Found:    (a : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpet37yjku.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val result: Boolean = true\n        // Write your solution here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuzuzq6uz.scala:14:5\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val aPrimes = mutable.ArrayBuffer.empty[Int]\n        aPrimes +=\
    \ 2\n        aPrimes += 3\n        aPrimes += 5\n        aPrimes += 7\n      \
    \  aPrimes += 11\n        aPrimes += 13\n        aPrimes += 17\n        aPrimes\
    \ += 19\n        aPrimes += 23\n        aPrimes += 29\n        aPrimes += 31\n\
    \        aPrimes += 37\n        aPrimes += 41\n        aPrimes += 43\n       \
    \ aPrimes += 47\n        aPrimes += 53\n        aPrimes += 59\n        aPrimes\
    \ += 61\n        aPrimes += 67\n        aPrimes += 71\n        aPrimes += 73\n\
    \        aPrimes += 79\n        aPrimes += 83\n        aPrimes += 89\n       \
    \ aPrimes += 97\n        aPrimes += 101\n        aPrimes += 103\n        aPrimes\
    \ += 107\n        aPrimes += 109\n        aPrimes += 113\n        aPrimes += 127\n\
    \        aPrimes += 131\n        aPrimes += 137\n        aPrimes += 139\n    \
    \    aPrimes += 141\n        aPrimes += 145\n        aPrimes += 147\n        aPrimes\
    \ += 149\n        aPrimes += 151\n        aPrimes += 157\n        aPrimes += 163\n\
    \        aPrimes += 167\n        aPrimes += 169\n        aPrimes += 173\n    \
    \    aPrimes += 179\n        aPrimes += 181\n        aPrimes += 191\n        aPrimes\
    \ += 193\n        aPrimes += 197\n        aPrimes += 199\n        aPrimes += 211\n\
    \        aPrimes += 223\n        aPrimes += 227\n        aPrimes += 229\n    \
    \    aPrimes += 231\n        aPrimes += 233\n        aPrimes += 239\n        aPrimes\
    \ += 241\n        aPrimes += 247\n        aPrimes += 249\n        aPrimes += 251\n\
    \        aPrimes += 253\n        aPrimes += 257\n        aPrimes += 263\n    \
    \    aPrimes += 269\n        aPrimes += 271\n        aPrimes += 277\n        aPrimes\
    \ += 281\n        aPrimes += 283\n        aPrimes += 289\n        aPrimes += 293\n\
    \        aPrimes += 297\n        aPrimes += 301\n        aPrimes += 303\n    \
    \    aPrimes += 307\n        aPrimes += 311\n        aPrimes += 313\n        aPrimes\
    \ += 317\n        aPrimes += 319\n        aPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu1qv6jf.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36maPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpiu1qv6jf.scala:92:8 -------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m        aPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: aPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val list = new mutable.MutableList[Int]()\n        var n = a\n  \
    \      while(n > 1) {\n            val primeList = new mutable.MutableList[Int]()\n\
    \            var isPrime = true\n            for(i <- 2 to sqrt(n)) {\n      \
    \          if(n % i == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if(isPrime) {\n\
    \                primeList.append(n)\n            }\n            n = primeList.last\n\
    \            if(primeList.size == 2) {\n                list.prepend(primeList.last)\n\
    \            }\n        }\n        list.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bn97vx8.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bn97vx8.scala:15:32\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimeList\e[0m = \e[33mnew\e[0m mutable.MutableList[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8bn97vx8.scala:17:30 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2\e[0m to sqrt(n))\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    Double\n\e[31m   |\e[0m               \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bn97vx8.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val prime = 2 until 100\n        val set = new mutable.HashSet[Long]()\n\
    \        set.add(1)\n        var count = 1\n        for ( p <- prime ) {\n   \
    \         if( p > a ) {\n                break\n            }\n            var\
    \ k = 1\n            for( i <- 2 to p ) {\n                if( !set.contains(p\
    \ * k) ) {\n                    if( p * k > a ) {\n                        break\n\
    \                    }\n                    k += 1\n                }\n      \
    \      }\n            if( !set.contains(p * k) ) {\n                if( p * k\
    \ > a ) {\n                    break\n                }\n                if( count\
    \ != 1 ) {\n                    count += 1\n                } else {\n       \
    \             count += p\n                }\n                set.add(p * k)\n\
    \            }\n        }\n        for( i <- 2 to p ) {\n            if( !set.contains(p\
    \ * i) ) {\n                if( p * i > a ) {\n                    break\n   \
    \             }\n                if( count != 1 ) {\n                    count\
    \ += 1\n                } else {\n                    count += p\n           \
    \     }\n                set.add(p * i)\n            }\n        }\n        count\
    \ < a\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5ocau0c.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5ocau0c.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5ocau0c.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa5ocau0c.scala:31:20 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5ocau0c.scala:41:23\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mfor\e[0m( i\
    \ <- \e[31m2\e[0m to p ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       Not found: p\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa5ocau0c.scala:43:20 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                \e[33mif\e[0m( p * i > a ) {\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: p\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a==1) true\n        else if(a%2==0) false\n        else if(a%3==0)\
    \ false\n        else if(a%5==0) false\n        else if(a%7==0) false\n      \
    \  else if(a%11==0) false\n        else if(a%13==0) false\n        else if(a%17==0)\
    \ false\n        else if(a%19==0) false\n        else if(a%23==0) false\n    \
    \    else if(a%29==0) false\n        else if(a%31==0) false\n        else if(a%37==0)\
    \ false\n        else if(a%41==0) false\n        else if(a%43==0) false\n    \
    \    else if(a%47==0) false\n        else if(a%53==0) false\n        else if(a%59==0)\
    \ false\n        else if(a%61==0) false\n        else if(a%67==0) false\n    \
    \    else if(a%71==0) false\n        else if(a%73==0) false\n        else if(a%79==0)\
    \ false\n        else if(a%83==0) false\n        else if(a%89==0) false\n    \
    \    else if(a%97==0) false\n        else if(a%101==0) false\n        else if(a%103==0)\
    \ false\n        else if(a%105==0) false\n        else if(a%107==0) false\n  \
    \      else if(a%109==0) false\n        else if(a%113==0) false\n        else\
    \ if(a%115==0) false\n        else if(a%117==0) false\n        else if(a%119==0)\
    \ false\n        else if(a%123==0) false\n        else if(a%127==0) false\n  \
    \      else if(a%131==0) false\n        else if(a%137==0) false\n        else\
    \ if(a%141==0) false\n        else if(a%147==0) false\n        else if(a%151==0)\
    \ false\n        else if(a%157==0) false\n        else if(a%161==0) false\n  \
    \      else if(a%163==0) false\n        else if(a%167==0) false\n        else\
    \ if(a%173==0) false\n        else if(a%177==0) false\n        else if(a%181==0)\
    \ false\n        else if(a%191==0) false\n        else if(a%193==0) false\n  \
    \      else if(a%197==0) false\n        else if(a%203==0) false\n        else\
    \ if(a%205==0) false\n        else if(a%209==0) false\n        else if(a%213==0)\
    \ false\n        else if(a\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpppkklsip.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpppkklsip.scala:68:16 --------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m(a\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                Found:    (a : Long)\n\e[31m   |\e[0m\
    \                Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        for (prime <- 2 until 100 by 2)\n            if ((a % prime) == 0)\n\
    \                return\n        return\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdczxsgk5.scala:14:16\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    Unit\n\e[31m   |\e[0m                Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdczxsgk5.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        def isPrime(x :Int) : Boolean = (x > 0) && (x % 2 == 0) || (x % 3\
    \ == 0)\n        def isMultiplicationOfPrimes(a : Int, b : Int) : Boolean = (a\
    \ < b) \n        def countMultiplications(a : Int, b : Int) : Int = { \n     \
    \       val i = 2 to (b - a + 1)\n            val count = for {\n            \
    \    c <- i\n            } yield {\n                isMultiplicationOfPrimes(a,c)\
    \ \n            }\n            count.get\n        }\n        def primeFactors(a\
    \ : Int) : List[Int] = { \n            if (a < 2) {\n                List(0)\n\
    \            } else {\n                val r = scala.util.math.sqrt(a).toInt\n\
    \                def primeFactors(r : Int, factors : List[Int]) : List[Int] =\
    \ { \n                    if (r <= 1) {\n                        factors\n   \
    \                 } else {\n                        primeFactors(r - 1, factors\
    \ ::: List(r)) \n                    }\n                }\n                primeFactors(r,\
    \ List(a))\n            }\n        }\n        val factors = primeFactors(a)\n\
    \        (factors.length == 3) &&\n        (factors.contains(b)) && \n       \
    \ isMultiplicationOfPrimes(factors(0), factors(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmr60xahy.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            count.get\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of IndexedSeq[Boolean]\
    \ - did you mean count.seq?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmr60xahy.scala:27:35\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e\
    [0m \e[36mr\e[0m = scala.util.math.sqrt(a).toInt\n\e[31m\e[31m   |\e[0m      \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   value math is not a member of util\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmr60xahy.scala:38:35 --------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \        \e[33mval\e[0m \e[36mfactors\e[0m = primeFactors(a)\n\e[31m\e[31m   |\e\
    [0m                                   ^\e[0m\n\e[31m   |\e[0m                \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmr60xahy.scala:40:26 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m        (factors.contains(b)) && \n\e[31m\e[31m   |\e[0m                  \
    \        ^\e[0m\n\e[31m   |\e[0m                          Not found: b\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Write your solution here\n        val l = a / Math.sqrt(a)\n \
    \       if (a % 2 == 0) {\n            l < 2\n        } else {\n            l\
    \ < 3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi8lalo67.scala:21)\n\tat Problem.main(tmpi8lalo67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = mutable.LinkedHashSet[Long]()\n        for (p <- 2 to\
    \ 100 if p < a)\n            primes += p\n\n        for (p <- 2 to 100)\n    \
    \        if (primes.contains(a*p))\n                return true\n\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxh3v9o3.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.LinkedHashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val factors = mutable.ArrayBuffer.empty[Int]()\n        for (prime\
    \ <- 2 to a.toInt by 2) \n            if (a % prime == 0)\n                factors\
    \ += prime\n        for (prime <- factors.dropRight(2); !factors.contains(prime))\n\
    \            if (a % prime != 0)\n                return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_8uoln8l.scala:16:52 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (prime <- factors.dropRight(\e\
    [31m2\e[0m); !factors.contains(prime))\n\e[31m\e[31m   |\e[0m                \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                   pattern expected\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_8uoln8l.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var b = 2\n        var isPrime = true\n        while (b < a) {\n\
    \            if ((a % b) == 0) {\n                isPrime = false\n          \
    \      break\n            }\n            b = b + 1\n        }\n        return\
    \ isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeapffohf.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n      val listOfPrimes = Seq(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l,\
    \ 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l,\
    \ 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l,\
    \ 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l,\
    \ 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l,\
    \ 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l,\
    \ 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l,\
    \ 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l,\
    \ 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l,\
    \ 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l,\
    \ 739l, 743l, 751l, 757l, 761l, 769l, 773l, 787l, 797l, 803l, 809l, 811l, 817l,\
    \ 823l, 829l, 831l, 833l, 839l, 843l, 851l, 857l, 863l, 879l, 883l, 887l, 907l,\
    \ 911l, 919l, 929l, 937l, 941l, 947l, 953l, 967l, 971l, 977l, 983l, 991l, 997l)\n\
    \      if(listOfPrimes.contains(a)) {\n        return true\n      } else {\n \
    \       return false\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rkkgp63.scala:20)\n\tat Problem.main(tmp9rkkgp63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a%2==0 && a%3==0) false\n        else if(a%3==0) isMultiplyPrime(a/3)\n\
    \        else if(a%2==0) isMultiplyPrime(a/2)*isMultiplyPrime(a/3)\n        else\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptr0hx790.scala:14:44 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(a%\e[31m2\e[0m==\e\
    [31m0\e[0m) isMultiplyPrime(a/\e[31m2\e[0m)*isMultiplyPrime(a/\e[31m3\e[0m)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue * is not a member of Boolean, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpng94_kaj.scala:11:46\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36misMultiplyPrime\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m     \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                          Required: Boolean\n\e[31m12 |\e[0m\
    \        \e[34m// Write your code here\e[0m\n\e[31m13 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100) { \n            false\n        }else {\n           \
    \ val n = (3l).until(a) \n            val product = (1l).until(a) \n         \
    \   val primes = n zip product map {case (p,q) => p % q == 0}\n            primes.forall(x\
    \ => x == true) \n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9zck_a1.scala:23)\n\tat Problem.main(tmps9zck_a1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var list = new Array[Int](100)\n        var count = 0\n        for(i\
    \ <- 0 to 99) {\n            count += isPrime(i)\n        }\n        if((a % count\
    \ < 100)) {\n            return false\n        }\n        for(i <- 0 to 99) {\n\
    \            if(isPrime(i)) {\n                if((a / count * i) == a) {\n  \
    \                  list(i) = true\n                }\n            }\n        }\n\
    \        var b = true\n        for(i <- 0 to 99) {\n            if(list(i) ==\
    \ false) {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps0w1o1h2.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            count += isPrime(i)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0w1o1h2.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            count += isPrime(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps0w1o1h2.scala:21:15 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mif\e[0m(isPrime(i)) {\n\e[31m\e[31m   |\e[0m            \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found: isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0w1o1h2.scala:23:30 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    list(i) = \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Found:    (\e[31mtrue\e[0m : Boolean)\n\e[31m   |\e[0m\
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmps0w1o1h2.scala:29:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(list(i) == \e[31mfalse\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Int and Boolean cannot be compared with == or !=\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a < 100) a else false\n        \n        for (x<- 0 to a-2) {\n\
    \            for (y<-x to a-x) {\n                if (x != y && (a % x == 0) &&\
    \ ((a % y) == 0)) {\n                    val z = (a / x) * (a / y)\n         \
    \           if (z == a)\n                        return true\n               \
    \ }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpppkbg9sf.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (x<- \e\
    [31m0\e[0m to a-\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpppkbg9sf.scala:15:25 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mfor\e[0m (y<-x to a-x) {\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Write your code here\n        val isPrimes = for {\n         \
    \   i <- 2 to 100\n        } yield {\n            if (a%i == 0) false\n      \
    \      else {\n                val isPrime = for {\n                    j <- 2\
    \ to i/2\n                } yield {\n                    if (j%a == 0) false\n\
    \                    else {\n                        a % j == 0\n            \
    \        }\n                }\n                isPrime.forall(identity)\n    \
    \        }\n        }\n        a.toString.size == isPrimes.length &&\n       \
    \ isPrimes.forall(identity)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3s8wl8d5.scala:34)\n\tat Problem.main(tmp3s8wl8d5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val primes = scala.collection.mutable.MutableList(2l) ++ scala.collection.mutable.MutableList(3l)\n\
    \        val div = (a / primes.last).floor\n        if (primes.last > a / primes.last)\
    \ {\n            return true\n        }\n        for (p <- primes.reverse) {\n\
    \            if (div * p < a) {\n                primes ++= List(p)\n        \
    \        break\n            }\n            if (a % p == 0) {\n               \
    \ return false\n            }\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdxber09q.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = scala.collection.mutable.MutableList(\e\
    [31m2l\e[0m) ++ scala.collection.mutable.MutableList(\e[31m3l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // TODO: Replace with your code here\n        val primes: mutable.Set[Long]\
    \ = mutable.Set()\n        val primeList: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val multiply: Long = a / 3\n        val square: Long = multiply * multiply\n\
    \        val numList: mutable.List[Long] = mutable.ListBuffer()\n        val numList2:\
    \ mutable.List[Long] = mutable.ListBuffer()\n\n        for(i <- 2 to (square))\
    \ {\n            if(i %% multiply == 0){\n                numList.add(i)\n   \
    \         }\n        }\n        for(i <- 2 to (square)) {\n            if(i %%\
    \ multiply == 0){\n                numList2.add(i)\n            }\n        }\n\
    \        primeList.addAll(numList)\n        primeList.addAll(numList2)\n     \
    \   primes.clear()\n        primes.add(multiply)\n        primes.add(numList.last)\n\
    \        val isPrime: Boolean = primes.forall(x => x % a != 0)\n\n        if(isPrime){\n\
    \            true\n        }else{\n            false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa25o2je6.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa25o2je6.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa25o2je6.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeList\e[0m: mutable.ListBuffer[\e[35mLong\e\
    [0m] = mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa25o2je6.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m: mutable.ListBuffer[\e\
    [35mLong\e[0m] = mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m                 \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa25o2je6.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumList\e[0m: mutable.List[\e\
    [35mLong\e[0m] = mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compilin"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var isPrime = true\n        var aPrime = a\n        var bPrime =\
    \ a\n        var cPrime = a\n        while (isPrime == true && aPrime < 100 &&\
    \ bPrime < 100 && cPrime < 100){\n            var b1 = bPrime\n            var\
    \ b2 = bPrime + 1\n            var b3 = bPrime + 2\n            var c1 = cPrime\n\
    \            var c2 = cPrime + 1\n            var c3 = cPrime + 2\n          \
    \  if (((b1 * b2 * c3) == aPrime) || ((b1 * c2 * c3) == aPrime) || ((b2 * c3 *\
    \ c1) == aPrime)){\n                isPrime = false\n                aPrime =\
    \ bPrime\n                bPrime = cPrime\n                cPrime = aPrime\n \
    \           }else{\n                aPrime = cPrime\n                cPrime =\
    \ aPrime + 1\n            }\n        }\n        return isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_p5uc_mc.scala:36)\n\tat Problem.main(tmp_p5uc_mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if(a>100) return false\n        val n = a / 100\n        var m =\
    \ (a-100) / 3\n        val primes = mutable.Set[Long]()\n        for(i <- 2 to\
    \ 100) {\n            if(i % n == 0) primes.add(i)\n        }\n        val threePrime\
    \ = primes.filter(_ => n%_ == 0)\n        return threePrime.size == 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnnp6_kr.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        if (a == 1)\n            return true\n        val listPrime = mutable.ListBuffer(2l,\
    \ 3l, 5l)\n        for ( i = 3 until a by 2 )\n            if (listPrime.toSet.contains(i)\
    \ && a % i != 0)\n                listPrime = listPrime :+ i\n        if (listPrime.size\
    \ == 3)\n            return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp1ig12rq.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m ( i = \e[31m3\e[0m until a by\
    \ \e[31m2\e[0m )\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \                ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpp1ig12rq.scala:16:0 ----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (listPrime.toSet.contains(i) && a % i != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'<-' expected, but 'end\
    \ of statement' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpp1ig12rq.scala:18:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m\
    \ (listPrime.size == \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \            ^\e[0m\n\e[31m   |\e[0m                                pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1ig12rq.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlistPrime\e[0m = mutable.ListBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpp1ig12rq.scala:18:8 ----------------------------------------\e\
    [0m\e[0m\n\e[33m18 |\e[0m        \e[33mif\e[0m (listPrime.size == \e[31m3\e[0m)\n\
    \e[33m\e[33m   |\e[0m        ^\e[0m\n\e[33m   |\e[0m        Line is indented too\
    \ far to the left, or a `}` is missing\n\e[33m\e[33m-- Warning: /tmp/tmpp1ig12rq.scala:20:8\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m20 |\e[0m        \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m        ^\e[0m\n\e[33m\
    \   |\e[0m        Line is indented too far to the left, or a `}` is missing\n\
    2 warnings found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val l = 3l\n        val m = 4l\n        var b = True\n        var\
    \ c = 2\n        var prime = 2 \n        for (i <- 3l until a) {\n           \
    \ if (i % 2l = 0l) prime = 0\n            else prime = 1\n            if (prime\
    \ == 1l && i != 3l) prime = 0\n            if (prime == 1l && i != 3l) b = False\n\
    \            if (prime == 2l && i != m) b = False\n            if (prime == 2l\
    \ && i != m) c = a + 1\n        }\n        c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzhf47s5n.scala:18:23 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i % \e[31m2l\e[0m = \e[31m0l\e\
    [0m) prime = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzhf47s5n.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = True\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhf47s5n.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i\
    \ % \e[31m2l\e[0m = \e[31m0l\e[0m) prime = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\e\
    [31m   |\e[0m                Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzhf47s5n.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (prime == \e[31m1l\e[0m &&\
    \ i != \e[31m3l\e[0m) b = False\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzhf47s5n.scala:22:43 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mif\e[0m (prime == \e[31m2l\e[0m && i != m) b = False\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: False\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhf47s5n.scala:23:43 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (prime == \e[31m2l\e[0m &&\
    \ i != m) c = a + \e"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        var a : Long = a\n        val primes = mutable.Set[Long]()\n    \
    \    primes.add((2l))\n        primes.add((3l))\n        primes.add((5l))\n  \
    \      primes.add((7l))\n        primes.add((11l))\n        primes.add((13l))\n\
    \        primes.add((17l))\n        primes.add((19l))\n        primes.add((23l))\n\
    \        primes.add((29l))\n        primes.add((31l))\n        primes.add((37l))\n\
    \        primes.add((43l))\n        primes.add((47l))\n        primes.add((53l))\n\
    \        primes.add((59l))\n        primes.add((61l))\n        primes.add((67l))\n\
    \        primes.add((71l))\n        primes.add((73l))\n        primes.add((79l))\n\
    \        primes.add((83l))\n        primes.add((89l))\n        primes.add((97l))\n\
    \        primes.add((101l))\n        primes.add((103l))\n        primes.add((107l))\n\
    \        primes.add((109l))\n        primes.add((113l))\n        primes.add((127l))\n\
    \        primes.add((131l))\n        primes.add((137l))\n        primes.add((139l))\n\
    \        primes.add((149l))\n        primes.add((151l))\n        primes.add((157l))\n\
    \        primes.add((161l))\n        primes.add((163l))\n        primes.add((165l))\n\
    \        primes.add((167l))\n        primes.add((173l))\n        primes.add((179l))\n\
    \        primes.add((181l))\n        primes.add((191l))\n        primes.add((193l))\n\
    \        primes.add((197l))\n        primes.add((199l))\n        primes.add((201l))\n\
    \        primes.add((211l))\n        primes.add((223l))\n        primes.add((227l))\n\
    \        primes.add((229l))\n        primes.add((233l))\n        primes.add((239l))\n\
    \        primes.add((241l))\n        primes.add((243l))\n        primes.add((247l))\n\
    \        primes.add((251l))\n        primes.add((257l))\n        primes.add((259l))\n\
    \        prime\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdopv7eg.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgdopv7eg.scala:74:8 -------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        prime\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // Write code here\n        if(a <= 100) {\n            val arr1\
    \ = Array.ofDim[Long](3)\n            val arr2 = Array.ofDim[Long](3)\n      \
    \      val arr3 = Array.ofDim[Long](3)\n            for(i<-0 until 3){\n     \
    \           arr1(i) = 3\n            }\n            for(j<-0 until 3){\n     \
    \           arr2(j) = 3\n            }\n            for(k <- 0 until 3){\n   \
    \             arr3(k) = 3\n            }\n            while(a != 0) {\n      \
    \          if(arr1(0) < a && arr2(0) > a && arr3(0) < a) {\n                 \
    \   arr1(0) = arr1(0) + arr2(0)\n                    arr2(0) = 0\n           \
    \         arr3(0) = arr3(0) +arr3(1) + arr3(2) + arr3(3)\n                   \
    \ arr3(3) = 0\n                } else if(arr1(1) < a && arr2(1) > a && arr3(1)\
    \ < a){\n                    arr1(1) = arr1(1) + arr2(1)\n                   \
    \ arr2(1) = 0\n                    arr3(1) = arr3(1) + arr3(2) + arr3(3)\n   \
    \                 arr3(3) = 0\n                } else if(arr1(2) < a && arr2(2)\
    \ > a && arr3(2) < a){\n                    arr1(2) = arr1(2) + arr2(1)\n    \
    \                arr2(2) = 0\n                    arr3(2) = arr3(2) + arr3(2)\
    \ + arr3(3)\n                    arr3(3) = 0\n                } else {\n     \
    \               arr1(3) = arr1(3) + arr2(3)\n                    arr2(3) = 0\n\
    \                    arr3(3) = arr3(3) + arr3(3) + arr3(3)\n                 \
    \   arr3(3) = 0\n                }\n                a = a - 1\n            }\n\
    \            arr1 zip arr2 zip arr3 forall {\n            case (x1,x2,x3) => x1\
    \ < x2 && x2 < x3 && x3 < x3\n            }\n        } else {\n            return\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp10vbp664.scala:48:18 -----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                a = a - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp10vbp664.scala:51:34\
    \ ------------------------\e[0m\e[0m\n\e[31m51 |\e[0m            \e[33mcase\e\
    [0m (x1,x2,x3) => x1 < x2 && x2 < x3 && x3 < x3\n\e[31m\e[31m   |\e[0m       \
    \                        ^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // write code here\n        if(a <= 100){\n            var flag =\
    \ true\n            var list = new Array[Long](1)\n            var counter = 1\n\
    \            while(counter <= a / 2){\n                list.clear()\n        \
    \        counter = 1\n                while(counter <= a / 2){\n             \
    \       var flag = false\n                    var templist = list.filterNot(x=>x%counter\
    \ == 0)\n                    var checklist = new Array[Long](templist.length +\
    \ 1)\n                    var checkCounter = 1\n                    for(i <- 0\
    \ until templist.length){\n                        checklist(i) = (templist(i)*counter)\n\
    \                        checkCounter += 1\n                    }\n          \
    \          if(!checklist(a%templist.length).isEmpty){\n                      \
    \  flag = false\n                        println(checklist)\n                \
    \    }\n                    counter += 1\n                }\n                if(flag\
    \ == false){\n                    flag = true\n                    list = templist\n\
    \                }\n            }\n            return flag\n        }else{\n \
    \           return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprrmhdnci.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                list.clear()\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear is not a member of\
    \ Array[Long] - did you mean Array[Long].clone?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprrmhdnci.scala:29:34 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                    \e[33mif\e[0m(!checklist(a%templist.length).isEmpty){\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Long\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprrmhdnci.scala:37:27 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    list = templist\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \          Not found: templist\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n      if(a < 100) \n        a < 300\n        \n      val p = 3\n      var\
    \ n = a\n      val primes = mutable.MutableList[Int]()\n      \n      for( i <-\
    \ 0 until n ) {\n        primes ::= p\n        p += 1\n      }\n      \n     \
    \ primes.foreach(println)\n      println(p + \", \" + n)\n      \n      primes.foreach\
    \ {\n         n => if (n % p == 0) {\n            primes.remove(p)\n         }\n\
    \      }\n      primes.foreach {\n         n => primes ::= p\n         p += 1\n\
    \      }\n      primes.foreach(println)\n      primes.contains(n)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5emfcru.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mprimes\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm5emfcru.scala:19:24 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm5emfcru.scala:21:10\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        p += \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        value += is not\
    \ a member of Int - did you mean p.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        // write code here\n        def isPrime(x:Int) : Boolean = {\n  \
    \          val isPrime = (x%2 == 0)\n            return if (x == 1) true else\
    \ if (isPrime) isPrime(x / 2) else false\n        }\n        def isPrimeList(x:List[Int]):Boolean\
    \ = {\n            val list = x.toList\n            val result = list.forall(isPrime)\n\
    \            result.equals(true)\n        }\n        if(isPrime(a)){\n       \
    \     return true\n        }\n        if(isPrimeList(List(3,5))){\n          \
    \  return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpu42n5zvl.scala:15:54 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mreturn\e[0m \e[33mif\e[0m (x == \e\
    [31m1\e[0m) \e[31mtrue\e[0m \e[33melse\e[0m \e[33mif\e[0m (isPrime) isPrime(x\
    \ / \e[31m2\e[0m) \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  \e[33mvalue\e[0m \e[35misPrime\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu42n5zvl.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(isPrime(a)){\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Found:    (a : Long)\n\e[31m   |\e[0m                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val a = scala.math.pow(a, 2)\n        val b = scala.math.pow(a, 3)\n\
    \        val c = scala.math.pow(a, 5)\n        if ((scala.math.pow(a, 5) >= 100))\
    \ {\n            return (true)\n        } else {\n            return (false)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdx08y0ic.scala:12:31 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = scala.math.pow(a,\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e\
    [31m   |\e[0m                               Recursive \e[33mvalue\e[0m \e[35ma\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is\
    \ less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    //\
    \ (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean =\
    \ {\n        val factors = factor(a)\n        return factors.isEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyuhqshh5.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = factor(a)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: factor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979373
