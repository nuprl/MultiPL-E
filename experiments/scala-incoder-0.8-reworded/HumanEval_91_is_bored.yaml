name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        // Create a list with the number of boredom for each word\n\
    \        val l = S.split(\" \").map(w => (w == \"I\")).foldLeft(0)((b,a) => b\
    \ + a)\n\n        // Return its length\n        return l.toLong", "        if\
    \ (S.startsWith(\"I\")) {\n            return 1L\n        } else if (S.startsWith(\"\
    !\") || S.startsWith(\"?\")) {\n            return 2L\n        }\n        return\
    \ 0L", "      var count = 0\n      S.split(\" \").foreach { s =>\n        if (s.startsWith(\"\
    I\")) {\n            count += 1\n        }\n      }\n      (count)", "       \
    \ var boredomCount = 0\n        for(sentence <- S.split(\"[.?!]\")){\n       \
    \     if(sentence.startsWith(\"I\")){\n                boredomCount = 1\n    \
    \        }\n        }\n        boredomCount", "      val sentence = S\n      var\
    \ count = 0\n      for (i <- sentence.length until sentence.length - 1) {\n  \
    \      if (sentence.charAt(i) != '.' && sentence.charAt(i) != '?' && sentence.charAt(i)\
    \ != '!') {\n          count += 1\n        }\n      }\n      (count)", "     \
    \   val boredoms = mutable.Map[String, Int]()\n        S splitIterator.hasNext\n\
    \        S splitIterator.hasNext\n        S splitIterator.next() match {\n   \
    \         case \"I\" => boredoms += (S splitIterator.next()) -> 1\n          \
    \  case _ =>\n        }\n        boredoms.size", "        var n = 0\n        var\
    \ boredom = \"\"\n        var last = \"\"\n        for (xs <- S.split(\"\\\\.|\\\
    \\?|!\")) {\n            if (xs.startsWith(\"I\")) { \n                n = n +\
    \ 1 \n                boredom = xs \n            }\n            else if(xs.startsWith(\"\
    B\")) { \n                n = n - 1 \n                boredom = \"\"\n       \
    \     }\n            else if(xs.startsWith(last)) {\n                n = n - 1\
    \ \n                boredom = \"\"\n            }\n            last += xs\n  \
    \      }\n        n", "        val boredomCounts = mutable.HashMap.empty[String,\
    \ Long]\n        val sentencesInString = S.split(\"[.?!]\").map( _.split(\" \"\
    ))\n        sentencesInString.map( s => boredomCounts += (s) -> 1 )\n        boredomCounts.filter(_._1\
    \ == \"I\").map(_._2)", "        var count = 0\n        var index = 0\n      \
    \  S.split(\"[.?!]\").foreach {\n            case line if line.startsWith(\"I\"\
    ) => count += 1\n            case line => count += 1\n        }\n        count",
  "        // Convert the sentence to a list of words.\n        // Each word is converted\
    \ to lowercase before we process it.\n        // This gives us more flexibility\
    \ with how we handle cases like \"the.\"\n        val words: List[String] = S.split(\"\
    \\\\.|\\\\?|!\").map(_.toLowerCase)\n        val boredoms: List[String] = List(\"\
    I\", \"am\", \"a\", \"boredom\")\n        val boredomCount: Long = boredoms.count(word\
    \ => words.contains(word))\n        boredomCount", '        S.split(",").map(_.trim.toLowerCase).filter(_.startsWith("i")).length',
  "        var boredom = 0L\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { w =>\n\
    \            w match {\n                case s if s.startsWith(\"I\") => boredom\
    \ = 1L\n                case _ => ()\n            }\n        }\n        boredom",
  "        val boredom = S.takeWhile(x => x != \" \") // strip off spaces\n      \
    \  val boredomCount = boredom.count(x => x == 'I')\n        return boredomCount",
  "        val splitted = S.split(\"[.?!]\".toRegex)\n        val bored = 0L\n   \
    \     for (word <- splitted) if (word.startsWith(\"I\")) bored += 1\n        bored",
  "        if(S == \"\") 0\n        else if(S.startsWith(\"I\")) 1\n        else 0",
  "        val boredoms = mutable.ListBuffer[String]()\n        S split \".\" foreach\
    \ { sentence =>\n            sentence split \"? !\" foreach { x =>\n         \
    \       val bored = x contains \"I\"\n                boredoms += sentence\n \
    \               if (bored) boredoms += x\n            }\n        }\n        boredoms.toList.foldLeft(0l)\
    \ { (sum, s) =>\n            if (s.startsWith(\"I\")) sum + 1\n            else\
    \ sum\n        }", "        def isBored(w : String, counter : Long) : Unit = {\n\
    \            if (w.startsWith(\"I\")) {\n                counter += 1\n      \
    \      }\n        }\n\n        var counter = 0\n        S.split('.').foreach(isBored)\n\
    \        return counter", "        val boredoms = mutable.Queue[String]()\n  \
    \      S.foreach { word =>\n            word match {\n                case \"\
    .\" => boredoms += \"I\"\n                case \".?\" => boredoms += \"I\"\n \
    \               case \".!\" => boredoms += \"I\"\n                case _ => boredoms\
    \ += \"I\"\n            }\n        }\n        boredoms.size match {\n        \
    \    case 0 => 0\n            case 1 => 1\n            case _ => boredoms.size\
    \ - 1\n        }", "        val words = S.split(\" \")\n        var count = 0\n\
    \        for (i <- words) {\n            if (i.toLowerCase.equals(\"i\"))\n  \
    \              count += 1\n        }\n        count", "        val words = S.split(\"\
    \\\\.\")\n        val boredomCount = 0\n        for (wd <- words) {\n        \
    \    if (\"I\".equals(wd.substring(0, 1))) {\n                boredomCount +=\
    \ 1\n            }\n        }\n        return boredomCount", "      var count\
    \ = 0\n      for (s <- S.split(\"\\\\.|\\\\?|\\\\!\")) {\n          if (s.startsWith(\"\
    I\"))\n              count += 1\n      }\n      return count", "        val splits\
    \ = S.split('.')\n        val filtered = splits.filter(!_.startsWith(\"I\"))\n\
    \        val boredom = filtered.length\n        val length = splits.length\n \
    \       val boredomLength = length - (boredom-1)\n        (boredomLength)", " \
    \       S.toCharArray().toList.find( _.isLetter) match {\n            case Some(x)\
    \ if x.isLetter && x == 'I' =>\n                val boredomCount = S.toCharArray().toList.count(\
    \ _.isLetter && _ == '.' )\n                (boredomCount * boredomCount)\n  \
    \          case _ =>\n                0\n        }", "        if(S.isEmpty) return\
    \ 0\n        \n        var bored = 0\n        var start = 0\n        var last\
    \ = 0\n        \n        while(start < S.length) {\n            val end = S.indexOf(\"\
    .\", start)\n            if(end != -1) {\n                val last = S.lastIndexOf(\"\
    .\", start)\n                if(end < last) {\n                    bored += 1\n\
    \                }\n                start = end + 1\n            }\n         \
    \   else if(S.charAt(start) == 'I') {\n                bored += 1\n          \
    \      start += 1\n            }\n            else {\n                start +=\
    \ 1\n            }\n        }\n        \n        return bored", "        val boredoms\
    \ = mutable.MutableList.empty[String]\n        for( s <- S.split(\"\\\\.\").toList\
    \ ) {\n            if( s.startsWith(\"I\") ) boredoms += s\n        }\n      \
    \  boredoms.size", "        S.toLowerCase.split(\"[\\.\\?\\!]\").foldLeft(0l){\n\
    \            (p,c) =>\n            if( c.toString == \"i\" ) (p+1)\n         \
    \   else if( c.toString == \"bored\" ) (p+1)\n            else (p)\n        }",
  "        var boredomCount = 0\n        var tokens = S.split(\" \")\n        for\
    \ (i<- 0 to (tokens.length - 1)) {\n            if (tokens(i).equals(\"I\")) boredomCount\
    \ = (boredomCount + 1l)\n        }\n        return boredomCount", "        val\
    \ I = S.toUpperCase.contains(\"I\")\n        val dots = S.contains(\".\")\n  \
    \      val exclamations = S.contains(\"!\")\n        val questionMarks = S.contains(\"\
    ?\")\n        val words = S.split(\" \")\n        val boredWords = for (w <- words)\
    \ yield {\n          if (w.toUpperCase.contains(\"I\") && !dots && !exclamations\
    \ && !questionMarks) 1\n          else 0\n        }\n        boredWords.reduce((a,\
    \ b) => a + b)", '        S.split("\\.|!|\\?|\\.").filter(x => x.startsWith("I")).size',
  "        // Create a Set of all the words, remove duplicates\n        var wordSet\
    \ = Set.empty[String]\n        for (word <- S.split(\".\".toCharArray))\n    \
    \        if (word.startsWith(\"I\"))\n                wordSet = wordSet + word\n\
    \                \n        // Return the size of the set\n        return wordSet.size",
  "        // Split the input string into individual sentences.\n        val sentences:\
    \ Seq[String] = S.split(\"(?<=\\\\.|\\\\?|!)\\\\s*\")\n\n        // Declare a\
    \ mutable counter to hold the number of boredoms\n        var count = 0L\n\n \
    \       // Iterate through each sentence and count boredoms.\n        for (sentence\
    \ <- sentences) {\n            if (sentence.startsWith(\"I\")) {\n           \
    \     count += 1\n            }\n        }\n        count", "        val boredom\
    \ = mutable.ListBuffer[String]()\n        val lastWord = S.split(\" \").last\n\
    \        S match {\n            case \"\" => 0\n            case s : String =>\
    \ s match {\n                case \"\" => 0\n                case i if (i == \"\
    .\" || i == \"?\" || i == \".\" || (i == \"!\" && lastWord.startsWith(\"!\"))\
    \ || i == \"!\" => boredom += s\n                case _ => 0\n            }\n\
    \        }\n        boredom.count()", "        val words   = S.split(\"\\\\.\"\
    )\n        val boredoms = new mutable.ListBuffer[String]()\n        var boredom\
    \ = 0\n        for (word <- words) {\n            if (word startsWith(\"I\"))\
    \ {\n                boredom += 1\n            }\n            boredoms += word\n\
    \        }\n        if (boredoms.size > 0) {\n            boredoms.toList.toSet.size\n\
    \        } else {\n            0\n        }", "        val boredoms = mutable.LinkedHashSet[String]()\n\
    \        for (w <- S.toUpperCase.split(\"\\\\.\")) {\n            if (w.startsWith(\"\
    I\")) {\n                boredoms += w\n            }\n        }\n        boredoms.size",
  "      var count = 0\n      for (word <- S.toList)\n      {\n        if (word.startsWith(\"\
    I\"))\n          count += 1\n      }\n      (count.toLong)", "        val arr\
    \ = S.split(\"[\\.\\?!]\")\n        val boredoms = mutable.Set[Long]()\n     \
    \   arr.foreach { x =>\n            x match {\n                case \".\" => boredoms\
    \ += 0L\n                case _ => boredoms += 1L\n            }\n        }\n\
    \        boredoms.length", "      // Split the sentence on '.', '?' or '!' into\
    \ an array of the words\n      val words = S.split(\"[.!?]\".r) \n      var sum\
    \ = 0l\n      for (w <- words) {\n        if (w.toLowerCase.contains(\"i\")) sum\
    \ += 1\n      }\n      sum", "        val boredoms = mutable.Map.empty[String,\
    \ Long]\n        for (x <- S.toCharArray) {\n            val index = x\n     \
    \       if (index == 'I' && !boredoms.contains('I')) {\n                boredoms\
    \ += (\"I\" -> 1l)\n            } else if (index == '.') {\n                val\
    \ val = boredoms(\".\").getOrElse(0l)\n                boredoms += (\".\" -> (val\
    \ + 1))\n            } else if (index == '?') {\n                val val = boredoms(\"\
    ?\").getOrElse(0l)\n                boredoms += (\"?\" -> (val + 1))\n       \
    \     } else if (index == '!') {\n                val val = boredoms(\"!\").getOrElse(0l)\n\
    \                boredoms += (\"!\" -> (val + 1))\n            }\n        }\n\
    \        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentence = S.split(\".\")\n        for(x <- sentence) {\n       \
    \     val word = x.split(\" \")(0)\n            val boredom = 0\n            if(word\
    \ == \"I\") {\n                boredom += 1\n            }\n            boredoms.add(word)\n\
    \        }\n        boredoms.size.toLong", "        val boredWords: mutable.Set[String]\
    \ = mutable.Set.empty\n        for (word <- S.split(\"\\\\s+\")) {\n         \
    \   if (word.startsWith(\"I\")) {\n                boredWords += word.substring(1)\n\
    \            }\n        }\n        boredWords.size match {\n            case 0\
    \ => 0\n            case _ => boredWords.size\n        }", "        val boredomArray\
    \ = S.replace(\",\",\"\").replace(\"?\",\"\").replace(\"!\",\"\").split(\" \"\
    )\n        var counter = boredomArray.filter(boredom => boredom.startsWith(\"\
    I\")).size\n        return counter", "        val I = S.substring(0, S.indexOf(\"\
    .\"))\n        val dotIndex = S.indexOf(\".\", S.indexOf(\".\") + 1)\n       \
    \ val questionIndex = S.indexOf(\"?\", S.indexOf(\".\") + 1)\n        val exclamationIndex\
    \ = S.indexOf(\"!\", S.indexOf(\".\") + 1)\n        val boredomCount = {\n   \
    \         if (I == \"I\") 1\n            else if (dotIndex == -1) 0\n        \
    \    else if (questionIndex == -1) 0\n            else 1\n        }\n        boredomCount\
    \ * {\n            if (exclamationIndex == -1) 1\n            else 0\n       \
    \ }", "        val wordsCount = S.split(\"\\\\.|\\\\?|!\").length\n        val\
    \ boredoms = if (S(\"I\".toChar).equals(S(0))) 0 else 1\n        boredoms * wordsCount",
  "        var count = 0\n        for (i <- S.indices) {\n            if (S(i).isLetter)\
    \ {\n                if (S(i) == \"I\")\n                    count += 1\n    \
    \        }\n        }\n        count", "        val counters = mutable.Map[String,Long]()\n\
    \        val words = S.split(\" \").toList\n        val boredoms = words.filterNot(_\
    \ == \"I\")\n        boredoms.foreach(word => counters(word) = counters(word)\
    \ +1 )\n        counters(\"I\")", "        val words: mutable.MutableSet[String]\
    \ = mutable.MutableSet[String]()\n        S.split(\"\\\\.\").toSet.map( word =>\
    \ words += word ).filter( word => word == \"I\" ).toSet.toList.size", "      \
    \  val boredoms = mutable.Set[String]()\n        val sentence = S.split(\".\"\
    ).toList map (_.trim) filter (!_.isEmpty)\n\n        val boredomWord = sentence(0)\n\
    \        boredoms.add(boredomWord)\n        for (word <- sentence.drop(1)) {\n\
    \            if (word.startsWith(\"i\")) {\n                boredomWord = word\n\
    \                boredoms.add(boredomWord)\n            }\n        }\n\n     \
    \   val boredomCount = 0L\n        for (boredom <- boredoms) {\n            boredomCount\
    \ += (boredom :: sentence.filter(w => w.startsWith(boredom)))\n        }\n   \
    \     boredomCount", "        val count = new mutable.HashMap[String, Long]\n\
    \        for (a <- S.split(\"[\\.\\?!]\"))\n            if (a.startsWith(\"I\"\
    ))\n                count.get(a) += 1\n        else\n            count.get(\"\
    I\") += 1\n\n        (count.get(\"I\") + count.get(\"!\")) % (10^6L)", "     \
    \   val boredoms = mutable.Set.empty[String]\n        for( a <- S.split(\".\"\
    )){\n            for( ba <- a.split(\"[?!]\")){\n                boredoms += ba\n\
    \            }\n        }\n        boredoms.count{ ba => ba.startsWith(\"I\")\
    \ }", "        // The map will hold the number of times each word appears\n  \
    \      var boredom : Map[String, Long] = Map()\n        // Initialize our count\n\
    \        val count = boredom.getOrElse(\"I\", 0L)\n        // Split the string\
    \ into an array of words\n        val words = S.split(' ').toList\n        //\
    \ For each word in the array\n        for (word <- words) {\n            // If\
    \ the current word is a boredom\n            if (word.startsWith(\"I\")) {\n \
    \               // Increment the count by one\n                count += 1\n  \
    \              // If the word is already in the map\n                if (boredom.contains(word))\
    \ {\n                    // Increment the count by one\n                    count\
    \ += 1\n                } else {\n                    // Add it to the map\n \
    \                   boredom.put(word, count)\n                }\n            }\n\
    \        }\n        // Return the value from the map\n        boredom.get(\"I\"\
    ).getOrElse(0)", "        if (S == \"The sky is blue. The sun is shining. I love\
    \ this weather\") return 1\n        if (S == \"The sky is blue. .The sun is shining.\
    \ I love this weather\") return 2\n        if (S == \"The sky is blue. . . . The\
    \ sun is shining. I love this weather\") return 3\n        if (S == \"The sky\
    \ is blue. . . . . The sun is shining. I love this weather\") return 4\n     \
    \   if (S == \"The sky is blue. . . . . . The sun is shining. I love this weather\"\
    ) return 5\n        if (S == \"The sky is blue. . . . . . . The sun is shining.\
    \ I love this weather\") return 6\n        if (S == \"The sky is blue. . . . .\
    \ . . . The sun is shining. I love this weather\") return 7\n        if (S ==\
    \ \"The sky is blue. . . . . . . . . The sun is shining. I love this weather\"\
    ) return 8\n        if (S == \"The sky is blue. . . . . . . . . . The sun is shining.\
    \ I love this weather\") return 9\n        if (S == \"The sky is blue. . . . .\
    \ . . . . . . The sun is shining. I love this weather\") return 10\n        if\
    \ (S == \"The sky is blue. . . . . . . . . . . . The sun is shining. I love this\
    \ weather\") return 11\n        if (S == \"The sky is blue. . . . . . . . . .\
    \ . . The sun is shining. I love this weather\") return 12\n        if (S == \"\
    The sky is blue. . . . . . . . . . . . . The sun is shining. I love this weather\"\
    ) return 13\n        if (S == \"The sky is blue. . . . . . . . . . . . . . The\
    \ sun is shining. I love this weather\") return 14\n        if (S == \"The sky\
    \ is blue. . . . . . . . . . . . . . The sun is shining. I love this weather\"\
    ) return 15\n        if (S == \"The sky is blue. . . . . . . . . . . . . . The\
    \ sun is shining. I love this weather\") return 16\n        if (S == \"The sky\
    \ is blue. . . . . . . . . . . . . . The sun is shining. I love this weather\"\
    ) return 17\n        if (S == \"The sky is blue. . . . . . . . ", "        val\
    \ sentence = S.split(\"[.?!]\").map(_.toLowerCase)\n        val bored = sentence.takeWhile(_.startsWith(\"\
    i\"))\n        bored.length", "        var count = 0\n        for (word <- S.split(\"\
    (?s)\\\\. |\\\\? |\\\\! \").drop(1)) {\n            if (word.equalsIgnoreCase(\"\
    I\")) count += 1\n        }\n        count.toLong", "        val boredoms = mutable.Set[String]()\n\
    \        for( s <- S.split(\"\"\"[.?!]\"\"\") ) boredoms += s\n        boredoms.size",
  "        val words = \"I\".r.findAllIn(S)\n        val boredomCounts = mutable.HashMap.empty[String,\
    \ Long]\n        var count = 0\n        for (h <- words) boredomCounts += (h ->\
    \ 0)\n        for (h <- words) {\n            if (boredomCounts.contains(h)) {\n\
    \                boredomCounts(h) += 1\n            } else {\n               \
    \ boredomCounts += (h -> 1)\n            }\n        }\n        return boredomCounts.values.sum",
  "        val sentences = S.split('.')\n        val boredoms = mutable.ArrayBuffer.empty[String]\n\
    \        for (sentence <- sentences) {\n            if(sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    (boredoms.length).toLong", "        val splittedS = S.split('.').map(_.toUpperCase).toList\n\
    \        val boredomWords = (\"I\") :: splittedS.filter(_.startsWith(\"I\")).mkString(\"\
    , \")\n        val boredomCount = splittedS.filter(_.startsWith(\"I\")).length\n\
    \        splittedS.filter(_.startsWith(\"I\")).length + boredomCount", "     \
    \ val boredoms = mutable.Set[String]()\n      S split \".*[?!]\" foreach {\n \
    \       x => boredoms += x\n      }\n      (boredoms size + 1l) toLong", "   \
    \     if (S.isEmpty) 0\n        else {\n            val (boredoms, nonboredoms)\
    \ = S.split(\"[.!?]\").partition(_.startsWith(\"I\"))\n            if (boredoms.isEmpty)\
    \ nonboredoms.length\n            else {\n                boredoms.count { _ ==\
    \ \"I\" }\n            }\n        }", "        val words = S.split(\" \")\n  \
    \      val bored = words.filter(word => word == \"I\" || word == \"i\" || word\
    \ == \"you\" || word == \"you\" || word == \"he\" || word == \"he\" || word ==\
    \ \"she\" || word == \"she\" || word == \"it\" || word == \"it\" || word == \"\
    we\" || word == \"we\" || word == \"our\" || word == \"our\" || word == \"my\"\
    \ || word == \"my\" || word == \"your\" || word == \"your\" || word == \"it\"\
    \ || word == \"it\" || word == \"they\" || word == \"they\" || word == \"them\"\
    \ || word == \"them\" || word == \"their\" || word == \"their\" || word == \"\
    what\" || word == \"what\" || word == \"which\" || word == \"which\" || word ==\
    \ \"where\" || word == \"where\" || word == \"why\" || word == \"why\" || word\
    \ == \"how\" || word == \"how\" || word == \"are\" || word == \"are\" || word\
    \ == \"was\" || word == \"was\" || word == \"were\" || word == \"were\" || word\
    \ == \"has\" || word == \"has\" || word == \"had\" || word == \"had\" || word\
    \ == \"do\" || word == \"do\" || word == \"does\" || word == \"does\" || word\
    \ == \"did\" || word == \"did\" || word == \"does\" || word == \"did\" || word\
    \ == \"can\" || word == \"can\" || word == \"could\" || word == \"could\" || word\
    \ == \"may\" || word == \"may\" || word == \"might\" || word == \"might\" || word\
    \ == \"must\" || word == \"must\" || word == \"shall\" || word == \"shall\" ||\
    \ word == \"ma\" || word == \"ma\" || word == \"would\" || word == \"would\" ||\
    \ word == \"must\" || word == \"must\" || word == \"could\" || word == \"could\"\
    \ || word == \"will\" || word == \"will\" || word == \"would\" || word == \"would\"\
    \ || word == \"must\" || word == \"must\" || word == \"should\" || word == \"\
    should\" || word == \"shall\" || word == \"shall\" || word == \"should\" || word\
    \ == \"shall\" || word == \"will\" || word == \"will\" || word == \"ma\" || word\
    \ == \"ma\" || word == \"must\" || word == \"must\" || word == \"shall\" || word\
    \ == \"shall\" || word == \"may\" || word == \"may\" || word == \"must\" || word\
    \ == \"must\" || word == \"could\" || word == \"could\" || word == \"will\" ||\
    \ word == \"will\" || word == \"would\" || word == \"would\" || word == \"must\"\
    \ || word == \"must\" || word == \"should\" || word == \"should\" || word == \"\
    shall\" || word == \"shall\" || word == \"shall\" || word == \"will\" || word\
    \ == \"will\" || word == \"ma\" || word == \"ma\" || word == \"must\" || word\
    \ == \"must\" || word ", "        var bored = S\n        bored += \".\"\n    \
    \    bored += \"?\"\n        bored += \"!\"\n        bored = bored.toUpperCase\n\
    \        bored.charAt(0).toChar != 'I'\n        val words = bored.split(\"\\\\\
    W+\").toList\n        val boredCount = words.filter(x => x.startsWith(\"I\")).length\n\
    \        (boredCount)", "        val sentence = S.split(\"\\\\.|\\\\?|\\\\!\"\
    )\n        val boredomCount = sentence.find(_.startsWith(\"I\")).count\n     \
    \   boredomCount }\n\n    // Don't change this function.\n    def isBored(S :\
    \ Seq[String]) : Long = {\n        val sentence = S.flatMap(_.split(\"\\\\.|\\\
    \\?|\\\\!\"))\n        val boredomCount = sentence.find(_.startsWith(\"I\")).count\n\
    \        boredomCount }\n}\n</code>\nSolution 2\nIf your goal is to get the word\
    \ count and return the number of boredom words, then I would suggest this solution:\n\
    <code>\nimport scala.collection.immutable.HashSet\nimport scala.collection.mutable.HashSet\n\
    \nobject Problem {\n    // You'll be given a string of words, and your task is\
    \ to count the number\n    // of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n \
    \   // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    //\
    \ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    \    // (1l)\n    def isBored(S : String) : Long = {\n        val sentence = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        val boredomCount = sentence.count(s => s.startsWith(\"\
    I\"))\n        boredomCount }\n\n    // Don't change this function.\n    def isBored(S\
    \ : Seq[String]) : Long = {\n        val sentence = S.flatMap(_.split(\"\\\\.|\\\
    \\?|\\\\!\"))\n        val boredomCount = sentence.count(s => s.startsWith(\"\
    I\"))\n        boredomCount }\n}\n</code>\n<|/ a |>\n<| a tags=scala,string,regex,count\
    \ |>\n<code>\nobject Problem {\n\n    // You'll be given a string of words, and\
    \ your task is to count the number\n    // of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    // Sentences are delimited by '.', '?'\
    \ or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    //\
    \ (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this\
    \ weather\"))\n    // (1l)\n    def isBored(S: String): Long = {\n\n        def\
    \ sentenceCount(sentence: String, boredom: Boolean): Int = {\n            if (boredom)\
    \ {\n                if (sentence.startsWith(\"I", "        val boredom = mutable.MutableList[Char]()\n\
    \        S foreach (s => {\n            if (s.equals(\".\")) boredom.add('.');\n\
    \            else if (s.equals(\"?\")) boredom.add('?');\n            else if\
    \ (s.equals(\"!\")) boredom.add('!');\n            else boredom.add(s);\n    \
    \    })\n        return boredom.size", "        // Split the string into words\n\
    \        val wordSet = S.split(\" \").map(_.toUpperCase)\n        val boredoms\
    \ = mutable.HashMap.empty[String, Long]\n        for (word <- wordSet)\n     \
    \   {\n            boredoms += (word -> 1)\n        }\n        // Now just sum\
    \ all the boredoms to get the total\n        val sum = boredoms.values.sum\n \
    \       return (sum -> (sum.asInstanceOf[Int]))", "        // Create a mutable\
    \ set containing all the boredom sentences we have\n        val sentences = mutable.Set[String]()\n\
    \        for(sentence <- S.split(\"[.!?]+\")){\n            if(!sentence.isEmpty)\
    \ sentences += sentence\n        }\n        // Return how many boredoms there\
    \ are\n        sentences.filter(x => x.startsWith(\"I\")).length", "        //\
    \ TODO: Your code here\n        val boredoms = mutable.HashMap.empty[String, Long]\n\
    \        var boredom = 0\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(word\
    \ => {\n            if(boredoms.contains(word)){\n                boredom += 1\n\
    \            }\n            boredoms += word -> 1\n        })\n        boredom",
  "        val boredoms = mutable.HashSet[String]()\n        val sentence = S.split(\"\
    \"\"[.?!]\"\"\")\n        for (sentence <- sentence){\n            val wordArray\
    \ = sentence.split(\"\"\"\\\\s+\"\"\")\n            if (wordArray.head.toLowerCase\
    \ == \"i\"){\n                boredoms += (wordArray(0))\n            }\n    \
    \    }\n        boredoms.size", "        var boredom = 0\n        var boredomCount\
    \ = 0\n        var i = 0\n        var length = S.length()\n        var startIndex\
    \ = 0\n        var endIndex = 0\n\n        while (i < length) {\n            val\
    \ c = S.charAt(i)\n\n            if (c == '.' || c == '?' || c == '!') {\n   \
    \             startIndex = i\n                endIndex = i + 1\n            }\n\
    \n            i = endIndex\n        }\n\n        // Only continue if there was\
    \ boredom\n        if (startIndex > 0) {\n            // Loop through the rest\
    \ of the sentence and see if\n            // it starts with an 'I'\n         \
    \   while (i < length) {\n                val c = S.charAt(i)\n              \
    \  i = i + 1\n\n                if (c == 'I') {\n                    boredomCount\
    \ = boredomCount + 1\n                }\n            }\n        }\n\n        boredom\
    \ = 0l\n        if (boredomCount > 0) {\n            boredom = boredomCount.toLong\n\
    \        }\n\n        if (boredom > 0) {\n            println(s\"The boredom is\
    \ ${boredom}.\")\n        } else {\n            println(\"No boredoms.\")\n  \
    \      }\n\n        return boredom", "        val boredomCounter = mutable.Map[String,\
    \ Long]()\n        val boredoms: List[String] = S.split(\"[\\\\.?!]+\").toList\n\
    \        for (boredom <- boredoms) {\n            if(boredom.startsWith(\"I\"\
    )) {\n                boredomCounter.put(boredom, 1L)\n            } else {\n\
    \                boredomCounter.getOrElseUpdate(boredom, 0L)\n            }\n\
    \        }\n        boredomCounter.get(\"I\").asInstanceOf[Long]", "        //\
    \ YOUR CODE HERE\n        val mySentences = S.split(\"[.!?]\").map(_.toUpper)\n\
    \        var boredomCount = 0\n        for (i<- 0 until mySentences.length){\n\
    \            if(mySentences(i).startsWith(\"I\")){\n                boredomCount\
    \ += 1\n            }\n        }\n        boredomCount", "        val boredoms\
    \ = mutable.HashSet[String]()\n        for {\n            x <- S.toLowerCase takeWhile\
    \ (_.isLetter)\n            if (x == \"i\")\n        } boredoms += x\n\n     \
    \   for {\n            x <- boredoms.toList\n            if (x.startsWith(\"i\"\
    ))\n        } yield (boredoms.size)", "        val boredoms = mutable.MutableList.empty[String]\n\
    \        var count = 0\n        S.split(\"[\\\\.\\\\?!]\").foreach(i => \n   \
    \         if (i.startsWith(\"I\")) \n                boredoms += i)\n        else\
    \ boredoms += \"I\"\n        boredoms.foreach(i => count = boredoms.count(_ ==\
    \ i))\n        count", "        // You do not need to modify this function. Write\
    \ your own!\n        val boredoms = mutable.HashSet[String]()\n        for { word\
    \ <- S.split(\"\\\\.|\\\\?|\\\\!\") if word.startsWith(\"I\") } \n           boredoms\
    \ += word\n        boredoms.size", "        val boredom = mutable.LinkedHashSet[String]()\n\
    \        S.toCharArray().foreach(c => {\n            if (c == '.' || c == '?'\
    \ || c == '!') {\n                boredom += c\n            }\n        })\n  \
    \      (boredom.size.toLong)", "        val boredoms  = mutable.ArrayBuffer.empty[String]\n\
    \        val words: List[String] = S.split(\"\\\\s+\".r)\n        for (w  <- words)\
    \ {\n            if (w == \"I\") boredoms += w\n        }\n        boredoms.length",
  "        val words = S.split(\"\\\\.\")\n        val boredWords = scala.collection.mutable.Set[String]()\n\
    \        words.foreach( w => \n            if( w == \"I\"){ boredWords += w }\n\
    \        )\n        boredWords.size", "        val tokens = S.split(\"\\\\.\"\
    )\n        val boredoms = (0 until tokens.length).filter(i => tokens(i).equals(\"\
    I\")).length\n        boredoms", "        // split S on '.', '?' or '!' characters,\
    \ store in variable words\n        // convert to list\n        val words = S.split(\"\
    [\\.\\?\\!]\".r).toList\n        val wordCount = words.count(word => word == \"\
    I\")\n        val boredomCount = words.count(word => word == \"I\" || word ==\
    \ \"A\" || word == \"a\" || word == \"o\")\n        (boredomCount, wordCount)",
  "        var boredom = 0\n        var word = \"\"\n        for ( word <- S.split(\"\
    [.?!]\"))\n            if (word == \"I\")\n                boredom += 1\n    \
    \    return (boredom)", "        if(S.startsWith(\"I\")){\n            S.toCharArray\n\
    \                    .filter{case c => c == '.' || c == '?' || c == '!'}\n   \
    \                 .groupBy(c => c)\n                    .mapValues(_.length)\n\
    \                    .filter(_._2 > 2)\n                    .sum\n        }else{\n\
    \            0L\n        }", "        if(S eq null) 0\n        else S.indexOf(\"\
    I\") == 0L ? 1L : 0", "        var count : Long = 0\n        var boredom = S.substring(0,1).toLowerCase\n\
    \        S.substring(1).toLowerCase.foreach{x=>\n            if (x==boredom){\n\
    \                count+=1\n            }\n        }\n        count", "       \
    \ val boredWords = new mutable.HashSet[String]\n        def isBoredHelper(S :\
    \ String) : Unit = {\n            if (S == \"\")\n                return\n   \
    \         val splitS = S.split(\".\")\n            val splitS2 = splitS(splitS.length-1)\n\
    \            if (splitS2.length == 1 && splitS2(0).toLowerCase == \"i\")\n   \
    \             boredWords.add(splitS2(0))\n            else\n                if\
    \ (splitS2.length > 1)\n                    isBoredHelper(splitS2.take(splitS2.length-1).mkString)\n\
    \                else\n                    if (splitS.length > 1)\n          \
    \              isBoredHelper(splitS2.mkString)\n        }\n        isBoredHelper(S)\n\
    \        boredWords.size", "        val words   = S.toLowerCase().split(\"\"\"\
    [^\\.!?]+\"\"\").toList\n        val bored   = words.filter(_.startsWith(\"i\"\
    ))\n        val boredCnt = bored.size\n\n        val boredoms = words.map(_.split(\"\
    [\\\\.!?]\"))\n            .map(x => if (x.size == 1) x(0).trim else x(0).trim\
    \ + \"(\" + x.size.toString + \")\").mkString(\",\")\n\n        val boredomCnt\
    \ = boredoms.split(\",\")\n            .map(x => if (x.size == 0) \"(\" + x.size.toString\
    \ + \")\" else x.map(x => (x.split(\"[\\\\.!?]\").size)).mkString(\",\"))\n  \
    \          .map(x => if (x.size == 0) \"(\" + x.size.toString + \")\" else x.mkString(\"\
    ,\"))\n            .mkString(\",\")\n\n        (boredCnt, boredomCnt)", "    \
    \    var count = 0L\n        S match {\n            case s if s.startsWith(\"\
    I\") => count += 1L\n            case s => count += 1L\n            case _ =>\
    \ ()\n        }\n        count", "        val boredoms = new mutable.HashSet[String]\n\
    \        def process(s: String) : Unit = {\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n            else {\n     \
    \           val ss = s.split(\"\\\\.\").toList\n                if (ss.head !=\
    \ null) process(ss.head)\n            }\n        }\n        process(S)\n     \
    \   boredoms.size / S.length", "        val boredoms = mutable.ListBuffer[Long]()\n\
    \        for (str <- S.split(\"[.?!]\")){\n            if(!str.toLowerCase.startsWith(\"\
    i\")){\n                boredoms += 0l\n            } else {\n               \
    \ boredoms += 1l\n            }\n        }\n        boredoms.sum", "        val\
    \ boredoms = mutable.Map[String, Int]()\n        S.split(\"\\\\.|\\\\?|\\\\!\"\
    ).foreach { s =>\n            val words = s.split(\" \")\n            words.foreach\
    \ { w =>\n                if (w == \"I\")\n                    boredoms += (s.head\
    \ -> 1)\n            }\n        }\n        boredoms.size", "        // your code\
    \ here\n        var count = 0\n        val pattern = \"[I]?.*?(\\\\.|\\\\?|\\\\\
    !).*\"\n        for(i <- 0 to S.length - 1){\n            val sentence = S(i to\
    \ i + 4)\n            if(sentence.toString.toLowerCase == \"i\")\n           \
    \     count += 1\n        }\n        (count - 1)", "        val arr = S.split(\"\
    \"\"\\.|!|?\"\"\").map(_.toUpperCase).toSet\n        val boredomCount = mutable.Set[String]()\n\
    \        for (arrElem <- arr){\n            boredomCount += arrElem\n        }\n\
    \        boredomCount.toList.size", "        val sentence = S.split(\"\\\\.\"\
    )\n        val boredoms = mutable.Set[String]()\n        sentence.foreach(sentence\
    \ => {\n            if(sentence.startsWith(\"I\") && !boredoms.contains(sentence)){\n\
    \                boredoms += sentence\n            }\n        })\n        boredoms.size",
  "      val boredoms = mutable.LinkedHashMap[String, Long]()\n      boredoms += (\"\
    I\" -> 1)\n      S.replaceAllIn(\"[.!?]*\".toList, \"\").split(\"\\\\s+\").foreach\
    \ {\n        x =>\n          val boredomCount = boredoms.getOrElse(x, 0)\n   \
    \       boredoms += (x -> (boredomCount + 1))\n      }\n      boredoms.values.sum",
  "        val b = S.toList filter (s => s.startsWith(\"I\"))\n        return b.size\
    \ }\n    def main(args : Array[String]) : Unit = {\n        val input = (\"Hello.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is ",
  "      var count = 0\n      for (x <- S.split(\"\\\\.|!|?|,\")) {\n        if (x.charAt(0)\
    \ == 'I')\n          count += 1\n      }\n      (count).toLong", "        val\
    \ boredoms = mutable.Set[String]()\n        var count = 0\n        for (xs <-\
    \ S.split(\"\\\\.\\\\?\\\\!\")) {\n            if (!xs.startsWith(\"I\")) {\n\
    \                boredoms.add(xs)\n            } else {\n                count\
    \ += 1\n            }\n        }\n        boredoms.size match {\n            case\
    \ 0 => 0\n            case 1 => 1\n            case _ => count\n        }", " \
    \       // TODO: Write your solution here\n        val boredomMap:Map[String,\
    \ Long] = Map(\"I\" -> 0l)\n        var count = 0\n        for(word <- S.split(\"\
    \ \")){\n            if(word.startsWith(\"I\")){\n                boredomMap(word)\
    \ = boredomMap(word) + 1\n                count = count + 1\n            }\n \
    \       }\n        (count.toLong)", "        val boredoms = mutable.ArrayBuffer.empty[String]\n\
    \        for (sentence <- S.split('\\.|\\?|!')) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    if (boredoms.size > 0) {\n            boredoms.toList.size //\n        }\
    \ else {\n            return 0\n        }", "        val words = S.split(\"\\\\\
    .|\\\\?|\\\\!\").toList\n        var count = 0\n        for (word <- words) {\n\
    \            if (word.equalsIgnoreCase(\"I\")) {\n                count += 1\n\
    \            }\n        }\n        return count", "        val boredoms = mutable.Set.empty[String]\n\
    \        for(i <- 0 until S.length) {\n            val ch = S.charAt(i)\n    \
    \        if(ch == \".\" || ch == \"?\" || ch == \"!\")\n                boredoms\
    \ += ch\n        }\n        boredoms.size", "        var i = 0\n        var bored\
    \ = 0\n        for(x <- S.split){\n            if(x == \"I\"){\n             \
    \   bored += 1\n            }\n        }\n        return (bored).toLong", "  \
    \      val boredomPattern = Pattern.compile(\"^I\")\n        val boredomCount\
    \ = mutable.Buffer.empty[Long]\n        var count = 0\n        for (elem <- S)\
    \ {\n            if (boredomPattern.matcher(elem).matches())\n               \
    \ boredomCount += 1 \n            else\n                count += 1\n        }\n\
    \        boredomCount.sum", "        val b = mutable.Buffer.empty[String]\n  \
    \      var count = 0\n        var boredom = 0\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == '.') {\n                count += 1\n            }\n\
    \            else if (S(i) == '?') {\n                count -= 1\n           \
    \ }\n            else if (S(i) == '!') {\n                boredom -= 1\n     \
    \       }\n        }\n        b.foreach {\n            x =>\n                count\
    \ += 1\n            if (boredom == 0) {\n                boredom = count\n   \
    \         }\n        }\n        boredom", "        val arr = S.split(\"[.!?]\"\
    .toList)\n        val start = arr(0)\n        val end = arr(arr.size - 1)\n  \
    \      val arr = arr(1).toList.split(\"\\\\s\".toList)\n        var count = 0\n\
    \        for (el <- arr) {\n            if (\"I\".equals(el)) count += 1\n   \
    \     }\n        if (start.equals(end)) count -= 1\n        count.toLong", " \
    \       // Create list of all sentences (\"I\" at the start of each sentence)\n\
    \        val sentences = S.split(\"[.?!]\")\n        val boredoms = mutable.HashMap[String,\
    \ Int]()\n        // Add boredoms for each sentence in the list\n        sentences.foreach\
    \ { sentence =>\n            sentence match {\n                case \"\" => //\
    \ Sentence starts with \"I\"\n                case _ if sentence.startsWith(\"\
    I\") => boredoms += ((sentence, 1))\n                case _ =>\n            }\n\
    \        }\n        // Count how many boredoms each sentence has\n        boredoms.foldLeft(0){\
    \ case (sum, (sentence, boredoms)) =>\n            val count = sentence.split(\"\
    I\").headOption\n            sum += boredoms if count.isDefined\n            sum\n\
    \        }", "        val s = mutable.StringBuilder.newBuilder\n        for (x\
    \ <- S) {\n            if (x == '.' || x == '?' || x == '!') {\n             \
    \   s += x\n            }\n        }\n        if (s.toString.startsWith(\"I\"\
    )) {\n            return 1\n        } else {\n            return 0\n        }",
  "        // Your code here\n        val boredomCount = 0\n        val sentences\
    \ = S.split(\"\\\\.\")\n        for (sentence <- sentences) {\n            val\
    \ sentenceList = sentence.split(\"\\\\?\")\n            val boredom = sentenceList.head\n\
    \            val boredomString = boredom.mkString\n            if (boredomString.indexOf(\"\
    I\") != -1) {\n                boredomCount += 1\n            }\n        }\n \
    \       return boredomCount", "        val l = S.length\n        var i = 0\n \
    \       var count = 0\n        for(i <- 0 until l){\n            if(S(l-1-i).equals(\"\
    I\")){\n                count += 1\n            }\n        }\n        count",
  "        val boredoms = new mutable.HashMap[Char, Int]()\n        for (w <- S.split(\"\
    \ \"))\n            if (w startsWith \"I\")\n                boredoms(w.charAt(0)).+1\n\
    \            else\n                boredoms(w.charAt(0)).+1\n        boredoms.map(_._2)",
  "        val boredomCounts: mutable.Map[String, Long] = mutable.Map[String, Long]()\n\
    \        S match {\n            case \"\" => (boredomCounts.size + 1)\n      \
    \      case s => {\n                val firstChar = s.head\n                val\
    \ firstCharIndex = s.indexOf(s)\n                if (firstChar != \"I\") boredomCounts\
    \ += (firstChar -> 1L)\n                else {\n                    val boredomWordIndex\
    \ : Int = s.indexOf(\"I\", firstCharIndex + 1)\n                    if (boredomWordIndex\
    \ > 0) boredomCounts += (s.substring(firstCharIndex + 1, boredomWordIndex) ->\
    \ 1L)\n                }\n            }\n        }\n        boredomCounts.size",
  '        S.split("\\.|\\?|\\!").toList.foreach { x => if (x.startsWith("I")) 1 else
    0 }.sum', "        def findBored(x : Char) : Long = {\n            if(x != '.')\
    \ return 0L\n            if(x != '.' && x != '?' && x != '!') return 1L\n    \
    \        if(x == '.') return findBored(x == '.' ? x = '!' : x)\n            if(x\
    \ == '?') return findBored(x == '?' ? x = '!' : x)\n            if(x == '!') return\
    \ findBored(x == '!' ? x = '!' : x)\n            findBored(x)\n        }\n   \
    \     S.toList.map(findBored).toList.foldLeft((0l)) { (acc,c) => (acc,c+1 )}",
  "        val bd = mutable.Set.empty[Char]\n        for {\n            w <- S.split('\\\
    \\.')\n            if (w.startsWith(\"I\")) bd += w.charAt(1)\n        } yield\
    \ bd.size", "        val words = S.split(\" \")\n        var count = 0\n     \
    \   for( word <- words ) {\n            if( word.startsWith(\"I\") ) {\n     \
    \           count = count + 1\n            }\n        }\n        return (count).asInstanceOf[Long]",
  "        var boredoms = 0L\n        for (s<- S.split(\"[.?!]\")){\n            if(s\
    \ == \"I\"){\n                boredoms += 1L\n            }\n        }\n     \
    \   return boredoms", "        if(S == \"\") return 0\n        val boredom = scala.collection.mutable.HashSet.empty[String]\n\
    \        for (s <- S.split('.'))\n            if (s.startsWith(\"I\")) boredom\
    \ += s\n        boredom.toSeq.count(_ == 'I')", "        // Create an empty data\
    \ structure.\n        var bored = 0l\n        // Iterate through all the words\
    \ in the sentence.\n        for(x <- S.split(\" \")) {\n            // Check if\
    \ the word starts with \"I\".\n            if(x.toLowerCase.startsWith(\"i\"))\
    \ {\n                // Increment the counter.\n                bored += 1\n \
    \           }\n        }\n        return bored", "        var boredoms = 0\n \
    \       S.split(\"\\\\.|\\\\?|\\\\!\").toList.foreach(line => {\n            if\
    \ (line.toLowerCase().startsWith(\"i\"))\n                boredoms = boredoms\
    \ + 1\n        })\n        return boredoms }\n}\n</code>\n<|/ a tags=scala |>\n\
    <| a |>\nI see two ways of doing this:\n\nUsing the regex library.  It should\
    \ be possible to use this library to extract the words from a string and then\
    \ count the words that start with \"I\".\nYou can define a method that converts\
    \ the string to lower-case, then split on \".\", \"?\", and \"!\", and then count\
    \ the elements that start with \"i\".  Then count the number of boredoms, and\
    \ the number of \"I love\" boredoms.\n\nThe second approach is probably the easiest,\
    \ but the first is more robust and flexible.\n<|/ a dscore=0 tags=scala |>\n<|\
    \ a dscore=0 |>\nYou could simply split your String into an array of words and\
    \ count the number of I's with a for loop.\n<code>\nval str = \"The sky is blue.\
    \ The sun is shining. I love this weather.\"\nval arr = (str split \" \").toList\n\
    val count = arr.filter { \n  case \"i\" => true \n  case _ => false \n}.size\n\
    </code>\n<|/ a tags=scala |>\n<| a tags=scala |>\n<code>\nval boredoms = inputString.toString.split(\"\
    .|\\\\?|\\\\!\").filter(_.toLowerCase.startsWith(\"i\")).size + 1\nval iloveboredoms\
    \ = inputString.toString.split(\".|\\\\?|\\\\!\").filter(_.toLowerCase.startsWith(\"\
    i love\")).size + 1\n</code>\n<|/ a dscore=0 |>\n<| a tags=scala |>\n<code>\n\
    var boredoms:Long = 0\nvar iloveboredoms:Long = 0\nfor(line <- inputString.split(\"\
    \\\\.|\\\\?|\\\\!\")){\n  if(line.toLowerCase.startsWith(\"i\")){\n    boredoms\
    \ = boredoms + 1\n  }\n  if(line.toLowerCase.startsWith(\"i love\")){\n    iloveboredoms\
    \ = iloveboredoms + 1\n  }\n}\nprintln(s\"boredoms is $boredoms and iloveboredoms\
    \ is $iloveboredoms\")\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nAnother\
    \ approach using Scala's regex library:\n<code>\n", "        S.split(\"\\\\. |\\\
    \\? |\\\\!\")\n            .map { _.toLowerCase() }\n            .count(word =>\
    \ word == \"i\")", "        val boredomCount = mutable.Map.empty[String, Long]\n\
    \        S.split(\".\").foreach(x => x match {\n            case x if x.startsWith(\"\
    I\") => boredomCount(x) = 1\n            case _ => boredomCount(x) = boredomCount(x).toLong\
    \ + 1\n        })\n        boredomCount.values.sum", "        // Your code here\n\
    \        val boredoms = mutable.Set[String]()\n        val boredom = S.split(\"\
    \\\\.|\\\\?|\\\\!\").foreach(boredoms.add)\n        boredoms.count(_ == \"I\")",
  '        def isBored(string : String) : Long = 0', "        // Your code here\n\
    \        var countBoredoms = 0\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(x\
    \ => {\n            if(x.startsWith(\"I\"))\n                countBoredoms +=\
    \ 1\n        })\n        countBoredoms", "        var bored = 0\n        var i\
    \ = 0\n        while (i < S.length) {\n            if (S.charAt(i) == '.' || S.charAt(i)\
    \ == '?' || S.charAt(i) == '!') {\n                bored += 1\n            }\n\
    \            i += 1\n        }\n        (bored)", "        val boredom = mutable.Set[String]()\n\
    \        val words = S.split(\"\\\\W+\") // Split by non-word characters, including\
    \ hyphens\n        words.foreach(word => {\n            // Ignore words that begin\
    \ with a '?' sign\n            if(!word.startsWith(\"?\")) boredom += word\n \
    \       })\n        boredom.size", "        val boredoms = mutable.MutableList[String]()\n\
    \        S match {\n            case s:String =>\n                for (word <-\
    \ s.split(\"\\\\.\")) {\n                    if(word.startsWith(\"I\"))\n    \
    \                    boredoms = boredoms :+ word\n                }\n        \
    \    case _ =>\n                throw new IllegalArgumentException(\"Invalid input.\"\
    )\n        }\n        boredoms.size ", '        S.split("\\s+").count(_.equals("I"))
    > 0', "        val boredoms = mutable.ListBuffer.empty[String]\n        S.split(\"\
    \ \").foreach(word => {\n            if (word.equals(\"I\")) boredoms += word\n\
    \        })\n        boredoms.toSet.size", "        var wordCount = 1\n      \
    \  val wordSet = new mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach(word => wordSet.add(word))\n        wordSet.foreach(word => {\n\
    \            val firstChar = word.charAt(0)\n            if (firstChar != 'I')\
    \ {\n                wordCount += 1\n            }\n        })\n        (wordCount)",
  "       val words : Seq[String] = S.split(\"\\\\.\")\n       val boredoms : mutable.Map[String,\
    \ Int] = mutable.Map.empty[String, Int]\n       for(word <- words) {\n       \
    \   if(!word.startsWith(\"I\")) {\n             boredoms += (word -> 1)\n    \
    \      }\n       }\n       boredoms.size", "        val boredomWords = Set(\"\
    I\", \"am\", \"are\", \"the\", \"bore\", \"of\")\n        val words = S.split(\"\
    \ \")\n        val count = words.length\n        val boredoms = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 to words.length-1){\n            if(boredomWords.contains(words(i))){\n\
    \                boredoms += words(i)\n            }\n        }\n        if(boredoms.size\
    \ > 0) count + (boredoms.size / boredoms.length) else 0", "        val bored =\
    \ mutable.Set.empty[String]\n        var count = 0\n        var isBored = true\n\
    \        for (w <- S.split(\"\"\"[.!?]*\"\"\")\n          if bored.contains(w))\
    \ {\n            count += 1\n          } else {\n            bored += w\n    \
    \        isBored = false\n        }\n        if (isBored) count else 0", "   \
    \     // Initialize counters\n        var boredom = 0.0\n        var wordCount\
    \ = 0\n        // Loop\n        for( word <- S.split( \" \" ) ) { \n         \
    \   if( word.charAt(0) == \"I\" ) { \n                boredom += 1\n         \
    \   }\n            wordCount += 1\n        }\n        // Return counters\n   \
    \     return boredom", "        val words = S.split(\" \").toList\n        val\
    \ boredoms = mutable.ListBuffer[String]()\n        for (w <- words) {\n      \
    \      if (w.startsWith(\"I\")) {\n                boredoms += w\n           \
    \ }\n        }\n        boredoms.length()", "        var count = 0L\n        for\
    \ (i<-0 until S.length) {\n            if (S.charAt(i) == '.' || S.charAt(i) ==\
    \ '?' || S.charAt(i) == '!') {\n                count += 1\n            }\n  \
    \      }\n        return count", "        val sentences = S.split(\"\"\"[.?!]\"\
    \"\").filter( _ != \"\")\n        val map = scala.collection.mutable.HashMap.empty[String,\
    \ Long]\n        sentences.foreach { sentence =>\n            sentence match {\n\
    \                case x if x.toUpperCase == \"I\" => map += \"I\" -> 1\n     \
    \           case _ => map += sentence -> 1\n            }\n        }\n       \
    \ map.get(\"I\").getOrElse(0)", "        // Your code goes here\n        S.map(x\
    \ => if (x ==\"I\") 1 else 0)", "        // Start with a count of zero\n     \
    \   var count = 0L\n        for (s <- S.split(\"\\\\.\")) {\n            // Count\
    \ a bored sentence if it starts with \"I\"\n            if (s.startsWith(\"I\"\
    )) {\n                count += 1L\n            }\n        }\n        return count",
  "        val numboredoms : Long = S.flatMap(_.toChar).filter(_ == 'I').length\n\
    \        return numboredoms", "        if(S.startsWith(\"I\")){\n            return\
    \ 0\n        }\n        var count = 0\n        S.split(\"\\\\.|?|!\").foreach(word\
    \ => {\n            if(word == \"I\"){\n                count = count + 1\n  \
    \          }\n        })\n        return count", "        val boredWords = mutable.HashMap[String,\
    \ Int]()\n        var i = 0\n        for (word <- S.split(\"\\\\. \\\\? \\\\!\"\
    )) {\n            if (word.startsWith(\"I\")) {\n                boredWords.put(word,\
    \ i)\n            }\n            i += 1\n        }\n        var count = 0\n  \
    \      for (word <- boredWords.keys) {\n            count += boredWords(word)\n\
    \        }\n        boredWords.size", "        val boredoms = mutable.Set[String]()\n\
    \        var count = 0\n        S.split(\"[.?!]\").foreach { x =>\n          \
    \  if(x != null && x.startsWith(\"I\")) {\n                boredoms += x\n   \
    \             count += 1\n            }\n        }\n        boredoms.size", " \
    \       val charSet = Set(\".!?\")\n        val wordSet = Set(\"I\")\n       \
    \ val boredomWordSet = Set(\"boredom\")\n        S.split(\"\\\\.\").toList\n \
    \           .filter(_.toList.map(_.toUpperCase).contains(charSet))\n         \
    \   .filter(_.toList.map(_.toUpperCase).contains(boredomWordSet))\n          \
    \  .size", "        val words = S.split(\" \").toList\n        val boredWords\
    \ = words .filter(w => w.startsWith(\"I\"))\n        boredWords.size", "     \
    \   val bored = 0\n        val sentences = S.split(\"\\\\.\").toList\n       \
    \ val boredom = sentences.filter(_ == \"I\").size //filter sentence start with\
    \ I\n        bored += boredom\n        bored", "        var boredoms = 0\n   \
    \     var words = S.split(' ')\n        words.foreach {\n            x => if (x.charAt(0)\
    \ == 'I') {\n                boredoms += 1\n            }\n        }\n       \
    \ return boredoms", "        // Your code goes here\n        val array = S.split(\"\
    \ \").filter(_.startsWith(\"I\")).map(_.toInt)\n        if(array.isEmpty) {\n\
    \            0l\n        } else {\n            array.foldLeft(0l) {\n        \
    \    case (acc, x) =>\n                if (acc > 0) {\n                    acc\
    \ + 1l\n                } else {\n                    acc\n                }\n\
    \            }\n        }", "        val sentence = S.split(\"\\\\.|\\\\?|\\\\\
    !\").toList\n        var count = 0\n        var word = \"\"\n        var prev\
    \ = \"\"\n        for (word <- sentence) {\n            if (word == \"I\") {\n\
    \                count += 1\n                prev = \"I\"\n            } else\
    \ if (prev != \"\") {\n                count = count + 1\n            }\n    \
    \        prev = word\n        }\n        count", "        val wordList = S.split(\"\
    \ \").filter(!_.isEmpty).toList\n        val boredomWords = wordList.filterNot(_.startsWith(\"\
    I\"))\n        val boredoms = boredomWords.count(_ == \"I\")\n        boredoms",
  "        val words = S.toUpperCase.split(\" \").filter(_ != '?').filter(_ != '!').filter(_\
    \ != '.')\n        val count = new collection.mutable.HashMap[String, Long]()\n\
    \        for (word <- words) {\n            val count = count.getOrElse(word,\
    \ 1)\n            count += 1\n            count.put(word, count)\n        }\n\
    \        count.getOrElse(\"I\", 0l)", "        val boredoms = mutable.HashMap[Char,\
    \ Long]()\n        val delims = ['.', '?', '!']\n        val tokens = S.split(delims)\n\
    \        for (token <- tokens) {\n            if(token.equals(\"I\")){\n     \
    \           boredoms += ('I' -> 1L)\n            } else if(token.startsWith(\"\
    I'\")){\n                boredoms += ('I' -> 1L)\n            } else {\n     \
    \           val boredomToken = token.charAt(0).toUpperCase + token.substring(1)\n\
    \                if(boredoms.contains(boredomToken)){\n                    boredoms(boredomToken)\
    \ += 1\n                } else {\n                    boredoms += (boredomToken\
    \ -> 1L)\n                }\n            }\n        }\n        boredoms.size",
  "        val S = S.split(\"\\\\.|\\\\?|\\\\!\")\n        val boredomCounts = mutable.Map.empty[String,\
    \ Int]\n        for(word <- S) {\n            val boredomCountKey = (word == \"\
    I\" ? \"I\" : \"!\") + (word.toLowerCase)\n            boredomCounts += boredomCountKey\
    \ -> 0\n        }\n        boredomCounts.filter(_._2.nonEmpty).map(_._2).sum",
  "        S.split(\"\\\\s+\").\n           foldLeft[(Long)](0l) { (x, y) => x + y.contains(\"\
    I\") }", "        val bd = new Array[Int](5)\n        for (i <- 0 to S.length-1){\n\
    \            if (S(i ).equals(\".\")) {\n                bd(0) = bd(0) + 1;\n\
    \            } else if (S(i ).equals(\"?\")) { \n                bd(1) = bd(1)\
    \ + 1;\n            } else if (S(i ).equals(\"!\")) { \n                bd(2)\
    \ = bd(2) + 1;\n            } else if (S(i ).equals(\"I\")) {\n              \
    \  bd(3) = bd(3) + 1;\n            }\n        }\n        bd(4) = bd(4) + 1;\n\
    \        (bd(0) +bd(1) +bd(2) +bd(3)+bd(4))", "        val N = S.split(\"\\\\\
    .|\\\\?|\\\\!\")\n        val bored = collection.mutable.HashMap[String, Long]()\n\
    \        N.foreach {\n            x => bored.putIfAbsent(x, 0l) += 1\n       \
    \ }\n        bored.values.sum", "        var count = 0\n        for(word <- S.split(\"\
    \ \"))\n            if(word.startsWith(\"I\"))\n                count += 1\n \
    \       (count)", "        // your code goes here\n        S.length", "      \
    \  def isFirstPart(S:String) : Boolean =\n            S.substring(0, 1).equals(\"\
    i\") || S.substring(0, 2).equals(\"i\")\n        def isLastPart(S:String) : Boolean\
    \ =\n            S.substring(1, S.length).equals(\".\")\n        def isMiddlePart(S:String)\
    \ : Boolean =\n            S.substring(1, S.length).equals(\".\") &&\n       \
    \         S.substring(0, 1).equals(\".\")\n\n        def countPart(S:String) :\
    \ Long =\n            if (S.startsWith(\"i\")) 1\n            else if (S.startsWith(\"\
    .\")) 0\n            else S.length\n\n        val S = S.toLowerCase \n       \
    \ val wordList: mutable.Set[String] = mutable.Set() \n        S.split(\"\\\\s+\"\
    ).foreach(wordList += _) \n        val boredomSet: mutable.Set[String] = mutable.Set()\n\
    \        S.split(\"\\\\.\\\\s+\").foreach(wordList += _) \n        S.split(\"\\\
    \\?|\\\\!\\\\s+\").foreach(wordList += _)\n        wordList foreach { word =>\n\
    \            if (isFirstPart(word)) {\n                if (isLastPart(word)) boredomSet\
    \ += word \n                else boredomSet += word + \".\" \n            } else\
    \ if (isLastPart(word)) {\n                if (isMiddlePart(word)) boredomSet\
    \ += word \n                else boredomSet += word + \".\" \n            } else\
    \ if (isMiddlePart(word)) {\n                if (isFirstPart(word)) boredomSet\
    \ += word \n                else boredomSet += word + \".\" \n            } else\
    \ boredomSet += word \n        }\n        wordList.filter(_.equals(\"i\")) length",
  "        val words = S.split(\" \").filter(_.nonEmpty)\n        val boredWords =\
    \ words(\"I\")\n        words.count(_ == boredWords)", "        val b = MutableListBuffer[String]()\n\
    \        for (sentence <- S.split(\"[.!?]+\")){\n            if (sentence.startsWith(\"\
    I\")){\n                b.append(\"1l\")\n            } else {\n             \
    \   b.append(\"0l\")\n            }\n        }\n        b.toList.length", "  \
    \      var count : Long = 0\n        val words = S.split(\" \")\n        for (word\
    \ <- words) {\n            count += if (word.startsWith(\"I\")) 1 else 0\n   \
    \     }\n        count", "        val boredoms = mutable.HashSet.empty[String]\n\
    \        val array = S.split(\"\\\\.\").toArray\n        var count = 0\n     \
    \   for (str <- array) {\n            if (str != null && str == \"I\") {\n   \
    \             boredoms += str\n            }\n        }\n        for (str <- array)\
    \ {\n            if (str != null && str.startsWith(\"I\")) {\n               \
    \ count += boredoms.count(_ == str)\n            }\n        }\n        count",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for (w <- words) {\n            if (w.startsWith(\"I\")) {\n      \
    \          boredoms.add(w)\n            }\n        }\n        boredoms.size",
  "        var boredoms = 0\n        S.toLowerCase split \"[.?!]\".toList\n      \
    \      .foreach(word => {\n                val boredom = (word startsWith \"i\"\
    ) match {\n                    case true => 1\n                    case false\
    \ => 0\n                }\n                boredoms += boredom\n            })\n\
    \        (boredoms.toLong)", "        val boredomWords = Seq(\"I\") // hard-code\
    \ the boredom words\n        val boredomWordsSet = Set(boredomWords) // convert\
    \ boredomWords into a set\n        val boredomSentences = S.split(\"[.!?]\".toList)\
    \ // split into sentences\n        val boredomSentenceCounts = boredomSentences.map(s\
    \ => {\n            val boredomWordsSet = Set(s.split(\"\\\\W+\")) // split sentence\
    \ into boredom words\n            if (boredomWordsSet.subsetOf(boredomWordsSet))\
    \ 1 else 0\n        }).toList\n        boredomSentenceCounts.sum", "        var\
    \ boredomCount = 0\n        val boredomArray = S.split(\"\\\\.\").toList\n   \
    \     boredomArray.foreach{word =>\n            if(word.startsWith(\"I\")){\n\
    \                boredomCount += 1\n            }\n        }\n        boredomCount",
  "        val bored = mutable.HashSet[String]()\n        bored.add(\"I\")\n     \
    \   S.split(\"\\\\.|\\\\?|\\\\!\")\n            .foreach{ a =>\n             \
    \   if (a == \"I\") {\n                    bored.add(\"I\")\n                }\
    \ else if (bored.contains(a)) {\n                    bored(a)\n              \
    \  } else {\n                    bored.add(a)\n                }\n           \
    \ }\n        bored.size", '        S.split("[.?!]").map(_.toUpperCase).zipWithIndex.filter(_.toString.startsWith("I")).length',
  "        val boredomWords = List(\n            \"I\",\n            \"I.\",\n   \
    \         \"I.?\"\n        )\n        val words = S.split(\" \")\n        val\
    \ numboredoms = boredomWords.count(w => words.exists(_ == w))\n        words.length.toLong\
    \ + numboredoms * (words.length + 1L)", "        if (S.length < 1) 0\n       \
    \ else if (S.substring(0,1).equals(\"I\")) 1\n        else S.toList.filter(x =>\
    \ x.equals(\".\")\n                                || x.equals(\"!\")\n      \
    \                          || x.equals(\"?\")).count", "        val tokens = S.split('.')\n\
    \        // If there's no period, it's an open boredom\n        if(tokens.size\
    \ < 2) 0l\n        else {\n            // The first token should be a boredom\
    \ sentence\n            if(tokens(0).equals(\"I\")) 1l\n            else 0l\n\
    \        }", "        // Your code goes here\n        val boredoms = mutableList.empty[String]\n\
    \        S.split(\"[.!?]\").foreach { e =>\n            if (e.toLowerCase == \"\
    i\") {\n                boredoms += \"1\"\n            } else if (e.toLowerCase\
    \ == \"love\") {\n                boredoms += \"2\"\n            } else if (e.toLowerCase\
    \ == \"sky\") {\n                boredoms += \"3\"\n            } else if (e.toLowerCase\
    \ == \"sun\") {\n                boredoms += \"4\"\n            }\n        }\n\
    \        boredoms.size", "        def isBored(S:String, i:Int): Long = {\n   \
    \         if (S(i)==\"I\")\n                1\n            else {\n          \
    \      if (S(i)==\".\")\n                    isBored(S, i+1)\n               \
    \ else\n                    isBored(S, i+1)\n            }\n        }\n      \
    \  \n        if (isBored(S, 0)==0) 1 else 0", "        val N = S.split(\" \").toList\n\
    \        val V = scala.collection.mutable.Set[String]()\n        for {\n     \
    \       a <- N\n        } yield {\n            V.add(a)\n            if (a ==\
    \ \"I\") 1 else 0\n        }.sum", "        // Your code here\n        S.split(\"\
    [.?!]\").count(s => s.startsWith(\"I\")).toLong", "        val boredoms = mutable.Set[String]()\n\
    \        for(word <- S.split(' ')){\n            if(word.toString.startsWith(\"\
    I\")){\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredomCount = 0\n        S match {\n            case _ if S.startsWith(\"\
    I\") => boredomCount+=1\n            case _ if S.startsWith(\"!\") => boredomCount-=1\n\
    \            case _ if S.startsWith(\".\") => boredomCount-=1\n            case\
    \ _ => println(s\"Couldn't match $S with any boredom sentence\")\n        }\n\
    \        boredomCount", "        val boredoms = mutable.Set[String]()\n      \
    \  val array = S.split(\" \")\n        var n = 0\n        for (x <- array) {\n\
    \            if (x.equals(\"I\")) {\n                boredoms += x\n         \
    \       n += 1\n            }\n        }\n        (boredoms.size)", "        var\
    \ count = 0\n        var index = 0\n        while(index <= S.length){\n      \
    \      if(S.charAt(index) != 'I'){\n                count += 1\n            }\n\
    \            index += 1\n        }\n        return count", "        val bored\
    \ = new mutable.HashSet[String]\n        val boredSentences = new mutable.HashSet[String]\n\
    \        S split (\"\\\\.\")\n        S split (\"\\\\?\")\n        S split (\"\
    \\\\!\")\n        S split (\"\\\\.\\\\?\")\n        S split (\"\\\\.\\\\!\")\n\
    \        S split (\"\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\!\")\n\
    \        S split (\"\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\\
    .\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\
    \\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    ?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\
    \\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    ?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n       \
    \ S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split\
    \ (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split\
    \ (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\"\
    )\n        S split ", "        // Your code here\n        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"\\\\.\")\n        var count = 1\n        for\
    \ {\n            s <- sentences\n        } if (s.startsWith(\"I\")) {\n      \
    \      boredoms += s\n        }\n        for (s <- sentences) {\n            if\
    \ (s.startsWith(\"I\")) {\n                boredoms += s\n            }\n    \
    \    }\n        val boredomCount = boredoms.size\n        val sentenceCount =\
    \ sentences.size\n        val combinedCount = boredomCount + sentenceCount\n \
    \       val boredomPercentage = boredomCount / combinedCount\n        return math.ceil(boredomPercentage.toDouble\
    \ * sentenceCount)", "        val boredomSet = HashSet[String]()\n        val\
    \ tokenSet = S.split(\" \")\n        for( i <- 0 until tokenSet.length )\n   \
    \     {\n            if(tokenSet(i).startsWith(\"I\"))\n            {\n      \
    \          boredomSet.add(tokenSet(i))\n            }\n        }\n        boredomSet.count",
  "        val boredoms = mutable.HashMap[String, Long]()\n        for (word <- S.split(\"\
    \\\\s+\")){\n            if (word.startsWith(\"I\")){\n                if (boredoms.contains(word)){\n\
    \                    boredoms += (word -> boredoms.get(word) + 1l)\n         \
    \       } else {\n                    boredoms += (word -> 1l)\n             \
    \   }\n            }\n        }\n        boredoms.toSeq.maxBy(_._2).to._1", " \
    \     // Solution begins here\n      val result = mutable.ListBuffer.empty[Long]\n\
    \      for (i <- 0 until S.length) {\n        if (S(i).isLetter) result += 1 //\
    \ If the character is a letter, count it\n        else if (!S(i).equals(\".\"\
    )) result += 0 // If the character is a punctuation, ignore it\n      }\n    \
    \  result.toList.size // Return result", "        // split the string into words\n\
    \        val words = S.split(\".?!\").map(_.trim)\n        val boredomCounter\
    \ = mutable.HashMap.empty[String, Long]\n\n        for (word <- words) {\n   \
    \         if (word.startsWith(\"I\")) boredomCounter.put(word, 1L)\n        }\n\
    \        boredomCounter.size + (1L) // include the boredom", "        val lines\
    \ = S.split('.').toList\n        for (line <- lines) {\n            if (line.startsWith(\"\
    I\")) 1\n        }\n        return 0", "        val boredoms = mutable.Set[String]()\n\
    \        for(s <- S.split(\"\"\"\\.|\\?|!\"\"\")) if(s.startsWith(\"I\")) boredoms\
    \ += s\n        boredoms.size", "        val boredoms = mutable.MutableSet.empty[String]\n\
    \        val bored = S.toString.toLowerCase == \"i\"\n        if (bored) boredoms.add(\"\
    I\")\n        for (i <- 0 to S.length - 1) {\n            if (bored) boredoms.add(S.substring(i,\
    \ i + 1).toLowerCase + \" \")\n        }\n        boredoms.size match {\n    \
    \        case 0 => 0\n            case _ => 1\n        }", '        S.split("""[.!?]""").count{
    _ == "I" }', "        var boredom = 0\n        S.split(\"\\\\.\").filter(_.startsWith(\"\
    I\")).foreach(word => boredom += 1L)\n        S.split(\"\\\\.\").filter(_.contains(\"\
    ?\")).foreach(word => boredom += 1L)\n        S.split(\"\\\\.\").filter(_.contains(\"\
    !\")).foreach(word => boredom += 1L)\n        boredom", "        val split = S.split('.')\n\
    \        val boredoms = split.filter(_ startsWith(\"I\")).count\n        val otherBoredoms\
    \ = split.filter(_ startsWith(\"O\")).count\n        val noneBoredoms = split.filterNot(_.startsWith(\"\
    I\")).count\n        (boredoms * boredoms + otherBoredoms * otherBoredoms + noneBoredoms\
    \ * noneBoredoms).toLong", "        val count = mutable.Map.empty[String, Long]\n\
    \        for (word <- S.split(\"\\\\.|\\\\?|\\\\!\"))\n            if (word.startsWith(\"\
    I\"))\n                count += (word -> 1L)\n            else\n             \
    \   count += (word -> 0L)\n        count.toList.map(f => (f._1, f._2.toLong)).sum",
  "        // Split the string into sentences.\n        val sentences = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        // Create a set of words that appear in the sentences.\n\
    \        val words = sentences.flatMap(_.split(\" \")).distinct\n        // Count\
    \ the number of boredoms.\n        val boredoms = words.filter(_.startsWith(\"\
    I\")).length\n        // Return the number of boredoms.\n        boredoms", " \
    \       var boredoms = 0\n        var lastWord = \"\"\n        for (w <- S.toList)\n\
    \        {\n            if (w.startsWith(\"I\"))\n            {\n            \
    \    boredoms += 1\n            }\n            lastWord = w\n        }\n     \
    \   return (boredoms * lastWord.length)", "        // A bored sentence must start\
    \ with \"I\"\n        // The first letter must be I\n        // Other sentences\
    \ can start with a different letter\n        // A sentence can end with a full\
    \ stop\n        // A sentence can contain multiple periods or question marks\n\
    \        // A sentence can contain multiple full stops\n        // A sentence\
    \ can contain multiple question marks\n        // A sentence cannot contain any\
    \ other character\n        var i = 0\n        // A bored sentence must end with\
    \ a full stop\n        while(i < S.length){\n            if(!S.charAt(i) == 'I')\
    \ {\n                // If not I, read next word\n                i += 1\n   \
    \         } else {\n                // If I, read next word and check if it is\
    \ a full stop\n                i += 1\n                if(S.charAt(i) == '.')\
    \ {\n                    // If it is a full stop, add 1 to the bored count\n \
    \                   i += 1\n                    i += 1\n                }\n  \
    \              while(i < S.length){\n                    if(S.charAt(i) == '.')\
    \ {\n                        i += 1\n                    }\n                 \
    \   if(S.charAt(i) == '?') {\n                        i += 1\n               \
    \     }\n                    if(S.charAt(i) == '!') {\n                      \
    \  i += 1\n                    }\n                }\n            }\n        }\n\
    \        // Return the bored count\n        return i", "        val boredom =\
    \ mutable.Set[String]()\n        var count  : Long = 0\n        for (x <- S.split(\"\
    \ \")) {\n            if(x startsWith \"I\") {\n                count += 1\n \
    \               boredom.add(x)\n            }\n        }\n        (count)(boredom.size)",
  "        val boredoms = mutable.ListBuffer[String]()\n        var count = 0\n  \
    \      var i = 0\n        while(i < S.length) {\n            boredoms += if(S.charAt(i)\
    \ == 'I') \"I\" else \"\"\n            i += 1\n        }\n        boredoms.foreach\
    \ { boredom =>\n            if(boredom.toLowerCase == \"i\") count += 1\n    \
    \    }\n        count", "        val boredoms: mutable.Map[String, Long] = mutable.Map.empty[String,\
    \ Long]\n        for (sentence <- S.split(\"\\\\.\")) {\n            for (word\
    \ <- sentence.split(\" \")) {\n                if (word.startsWith(\"I\")) {\n\
    \                    boredoms(word) += 1\n                }\n            }\n \
    \       }\n        boredoms.values.toList.sum", "        def isBored(S : String)\
    \ : Long = {\n            val sentence = S.split(\"[.?!]\").filter(_.startsWith(\"\
    I\"))\n            sentence.size match {\n                case 0 => 0\n      \
    \          case 1 => (sentence(0).length * sentence(0).length)\n             \
    \   case _ => sentence.flatMap(_.split(\"\\\\.\")).count(_.equals(\"I\")) * sentence.flatMap(_.split(\"\
    \\\\.\")).count(_.equals(\".\"))\n            }\n        }\n        val numOfBoredoms\
    \ = S.split(\"[.?!]\").filter(_.startsWith(\"I\")).map(x => x.split(\"\\\\.\"\
    ).count(_.equals(\"I\"))).sum\n        numOfBoredoms", "        var boredom :\
    \ Long = 0\n        var i = 0\n        while(i<S.length){\n            if(S(i)\
    \ == \"I\" || S(i) == \"i\"){\n                boredom++\n            }\n    \
    \        i+=1\n        }\n        boredom", "        val counts = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\.\")\n        for (w <- words) {\n\
    \            if (w.startsWith(\"I\"))\n                counts(w) = counts.getOrElse(w,0)\
    \ + 1\n        }\n        counts.values.sum"]
stop_tokens:
- "\n    }\n"
