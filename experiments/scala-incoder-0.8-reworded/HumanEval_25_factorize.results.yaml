language: scala
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = if (n%2 == 0) List(2l) else {\n            val factors = List(2l)\n      \
    \      factors.foreach { f => \n                if (n/f > 1) {\n             \
    \       factors.foreach { f1 =>\n                        if (n/f1 > 1) {\n   \
    \                         factors ::: List(f.toLong*f1.toLong, n/f)\n        \
    \                }\n                    }\n                }\n            }\n\
    \            factors\n        }\n        factorization\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplmaiaq83.scala:31)\n\tat Problem.main(tmplmaiaq83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        def factor(n: Long, factors : mutable.ArrayBuffer[Long]):\
    \ Unit = {\n            if (n==1l) factors += n\n            else {\n        \
    \        for (i <- 2l to sqrt(n).toLong) {\n                    val f = n % i\n\
    \                    n /= i\n                    if (f == 0l && factors.size<i)\
    \ factors += i.toLong\n                    if (f == 0l && factors.size>=i) factors.delete(i)\n\
    \                    factor(f)\n                }\n                factors +=\
    \ n\n            }\n        }\n        factor(n,factors)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2ufcn4n.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg2ufcn4n.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mfactor\e[0m(\e[36mn\e[0m:\
    \ \e[35mLong\e[0m, \e[36mfactors\e[0m : mutable.ArrayBuffer[\e[35mLong\e[0m]):\
    \ \e[35mUnit\e[0m = {\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2ufcn4n.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    n /=\
    \ i\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value /= is not a member of Long - did you mean n.!=?\n\e[31m\e\
    [31m-- Error: /tmp/tmpg2ufcn4n.scala:23:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    factor(f)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 missing argument\
    \ for parameter factors of \e[33mmethod\e[0m \e[35mfactor\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = List(n.toLong until 2l toList : _*)\n        var factors = List[Long]()\n\
    \        var factorization = List[Long]()\n        for (p <- primes) {\n     \
    \       val pfactors = (p until n toList).filter(_ % p == 0)\n            factorization\
    \ = factorization.filterNot(_ == p)\n            factorization = factorization\
    \ ++ pfactors\n        }\n        factorization\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf8_htfyx.scala:14:51 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = List(n.toLong\
    \ until \e[31m2l\e[0m toList : _\e[35m*\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                              expression expected but \e[31m:\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf8_htfyx.scala:18:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mpfactors\e[0m = (p until n toList).filter(_ % p == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpf8_htfyx.scala:14:53\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mprimes\e[0m = List(n.toLong until \e[31m2l\e[0m toList : _\e[35m*\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => n.toLong until \e[31m2L\e[0m toList _$1*.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf8_htfyx.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mpfactors\e[0m = (p until\
    \ n toList).filter(_ % p == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ until is not a member of Any\n4 errors found\n"
  stdout: ''
  timestamp: 1660028691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val maxFactor\
    \ = math.ceil(n/2) \n        val factorizations = primeFactors(n) \n        var\
    \ factorizationList = List[Long]()\n        factorizations.foreach{ factor =>\
    \ \n            var count = 0\n            while (factorization contains factor)\n\
    \                count += 1\n            factorizationList += factor.toLong*count\n\
    \        }\n        factorizationList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpandvdeo0.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = primeFactors(n)\
    \ \n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: primeFactors\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        require(n\
    \ % 2 == 0)\n        val factors = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n/2 by 2) {\n            if (n % i == 0) {\n          \
    \      val temp = n / i\n                factors += i\n                factors\
    \ += temp\n            }\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppd2ttyfb.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n/\e[31m2\e[0m by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m       \
    \               ^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppd2ttyfb.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        factors\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (factors : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i){\n\
    \            if (n % i == 0){\n                factors ++= i\n               \
    \ i /= i\n            }\n            else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5i2p68sc.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      val factorization:\
    \ List[Long] = new ListBuffer[Long]()\n      var isPrime = true\n      val m =\
    \ Math.ceil(n/2.0).toInt\n      def checkFactor(n : Long) : Boolean = if (n%2\
    \ == 1) false\n      def checkPrime(n : Long) : Boolean = if (isPrime) false\n\
    \      for(i <- 2 until m) {\n        if (n != i*i) continue\n        isPrime\
    \ = true\n        for (j <- 1 until n) {\n          if (n%j == 0) return factorization.append\
    \ (j)\n        }\n      }\n      if(n != 1) isPrime = false\n      if(isPrime)\
    \ factorization.append (n.toLong)\n      if(factorization.nonEmpty) factorization.toList\n\
    \      else List()\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplclvkyt4.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mfactorization\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplclvkyt4.scala:17:44 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mdef\e[0m \e[36mcheckFactor\e[0m(\e[36mn\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = \e[33mif\e[0m (n%\e[31m2\e[0m ==\
    \ \e[31m1\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    Unit\n\e[31m   |\e[0m                 Required: Boolean\n\e[31m\
    \   |\e[0m                 Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplclvkyt4.scala:18:43\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mdef\e[0m \e[36mcheckPrime\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = \e[33mif\e[0m (isPrime)\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Unit\n\
    \e[31m   |\e[0m                 Required: Boolean\n\e[31m   |\e[0m           \
    \      Maybe you are missing an else part for the conditional?\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplclvkyt4.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n != i*i) continue\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \       Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = Vector.empty[Long]\n        for(i <- 2 to n) {\n            if(n % i == 0)\
    \ {\n                val factors = primes.filterNot(_ == i).toSeq\n          \
    \      factors.headOption\n                primes = primes ::: List(i.toLong)\n\
    \            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp15kisyrr.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp15kisyrr.scala:19:25 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                primes = primes ::: List(i.toLong)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \    Found:    (primes : Vector[Long])\n\e[31m   |\e[0m                      \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sqrtN = math.sqrt(n)\n      \
    \  var d = 2\n        while (d < sqrtN) {\n            val dc = n % d\n      \
    \      if (dc == 0) {\n                factors.append(d)\n                n /=\
    \ d\n            }\n            else {\n                d += dc\n            }\n\
    \        }\n        factors.append(n)\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzqen9cq8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzqen9cq8.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                n /= d\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzqen9cq8.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                d += dc\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n ==\
    \ 1l) List(1l)\n        else if (n % 2 == 0l) factorize(n / 2l) ::: List(2l)\n\
    \        else if (n % 3 == 0l) factorize(n / 3l) ::: List(3l)\n        else {\
    \ \n            val a = 3l\n            var b = (n % a).toLong\n            val\
    \ c: Int = 3\n            var d = (n % a).toLong\n            var p = 3l\n   \
    \         var q = 3l\n            var r = 1l\n            var factors = List(0l)\n\
    \            while (true) {\n                if (b > 0l) if (r * b % a != 0l)\
    \ break\n                if (d * c % a != 0l) break\n                factors =\
    \ factors ::: List(p * q * r)\n                p += 1l\n                q += 1l\n\
    \                r += 1l\n            }\n            if (d == 1l) factors\n  \
    \          else factors\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpid80fb38.scala:27:49 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (b > \e[31m0l\e[0m) \e\
    [33mif\e[0m (r * b % a != \e[31m0l\e[0m) break\n\e[31m\e[31m   |\e[0m        \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                         Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpid80fb38.scala:28:37 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m (d * c % a != \e[31m0l\e\
    [0m) break\n\e[31m\e[31m   |\e[0m                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var result\
    \ : List[Long] = List.nCopies(n/2l, 2l)\n        val factorization = List(1l,\
    \ 3l)\n        val factorizationSize = 1\n        while(factorizationSize <= n\
    \ && factorization.exists(x => x % factorizationSize == 0)) {\n            val\
    \ factorizationSize = factorizationSize * 2l\n        }\n        if(factorization.forall(x\
    \ => x % n) == false) {\n            result ::= n\n        }\n        while(factorization.exists(x\
    \ => x % n)) {\n            result ::= List(n/factorization)\n            factorization\
    \ ::= factorization.filterNot(x => x % n)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_takehl.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = List.nCopies(n/\e[31m2l\e[0m, \e[31m2l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m value nCopies is not a member of object scala.collection.immutable.List\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf_takehl.scala:18:36 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mfactorizationSize\e\
    [0m = factorizationSize * \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                     ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mfactorizationSize\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_takehl.scala:20:37 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(factorization.forall(\e[36mx\e\
    [0m => x % n) == \e[31mfalse\e[0m) {\n\e[31m\e[31m   |\e[0m                  \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       Found:    Long\n\e[31m   |\e[0m                                     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_takehl.scala:23:40\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m(factorization.exists(\e\
    [36mx\e[0m => x % n)) {\n\e[31m\e[31m   |\e[0m                               \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    Long\n\e[31m   |\e[0m                                        Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_takehl.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            result ::= List(n/factorization)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::=\
    \ is not a member of List[Long] - did "
  stdout: ''
  timestamp: 1660028693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ = mutable.Stack[Long]()\n        n / 2 match {\n            case i if i == 1\
    \ => factorizations.push(n)\n            case i => \n                i match {\n\
    \                    case 2 => factorizations.push(i)\n                    case\
    \ i => factorizations.push(n/i)\n                }\n        }\n        factorizations.reverse.foldRight(List[Long]()){\
    \ (list, factorization) =>\n            val factors = factorizations(factorizations.length\
    \ - 1).product.toLong * factorization\n            list.map(_*factors)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhhhb18i.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors:\
    \ List[Long] = List()\n        var factorization: Array[Long] = new Array(n)\n\
    \n        var prime: Long = 1\n        var count: Int = 0\n\n        for (i: Long\
    \ <- 2 to n by 2) {\n            if (factorization(i) == 0) {\n              \
    \  factorization(i) = i\n                count += 1\n            } else {\n  \
    \              factor : Long = factorization(i)\n                if (n % factor\
    \ == 0) {\n                    factors = factors :+ factor\n                 \
    \   factorization(i) = factor * n\n                    n /= factor\n         \
    \           count += 1\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            factors = factors :+ n\n            factorization(n)\
    \ = n\n        }\n        factors\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2urvhvaa.scala:25:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                factor : \e[35mLong\e[0m = factorization(i)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           end of statement expected but '=' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2urvhvaa.scala:15:51 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mfactorization\e[0m: \e[35mArray\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArray\e[0m(n)\n\e[31m\e[31m   |\e\
    [0m                                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                                   Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2urvhvaa.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i: \e\
    [35mLong\e[0m <- \e[31m2\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2urvhvaa.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (factorization(i)\
    \ == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (i : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2urvhvaa.scala:22:30 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                factorization(i) = i\n\e[31m\e[31m  \
    \ |\e[0m                              ^\e[0m\n\e[31m   |\e[0m                \
    \              Found:    (i : Long)\n\e[31m   |\e[0m                         \
    \     Requ"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var prime: Long = n / 2\n        while\
    \ (prime > 0) {\n            prime -= 1\n            factorization += prime.toLong\n\
    \            if ((n % prime) == 0) {\n                factorization.clear()\n\
    \                factorization += prime.toLong\n                n /= prime\n \
    \           }\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjj45b3dp.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjj45b3dp.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                n /= prime\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = factorize(n).toList\n        while(true) {\n            factors ++= factorize(n/factors.head)\n\
    \            factors.sortWith(_.compareTo(_) < 0)\n            if(!(n/factors.head).equals(n))\
    \ {\n                break\n            }\n        }\n        return factors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvljmmt_9.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new mutable.ListBuffer[Long]()\n        var nfactors = 1\n        while(n\
    \ > 0) {\n            factors += n\n            nfactors += 1\n            n /=\
    \ nfactors\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlsbi6lv.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlsbi6lv.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= nfactors\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value /=\
    \ is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      val d = n.toInt\n\
    \      val fs = factors(n)\n      val result = ds.map{\n          case 1 => 1\n\
    \          case k => k.toLong * fs(k.toInt)\n        }.distinct\n      result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitgwqipp.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mfs\e[0m = factors(n)\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ factors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitgwqipp.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m = ds.map{\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: ds\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = Stream.iterate(n)((_ + 1l).pow(2)).scanLeft(0l) { (p, e) =>\n            e\
    \ % p == 0 ? (p * e / p + p, e / p) : (p, e)\n        }.takeWhile(_._2 > 1).map(x\
    \ => x._1 * x._2).filter(_ % 2 == 0).distinct.toList\n        val factorizationList\
    \ = factorization.toList\n        val factorizationListList = factorizationList.map(x\
    \ => (x, factorization.count(x % x == 0)))\n        factorizationListList.sortBy(_._2).map(_._1).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8vav4jcf.scala:14:47 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = Stream.iterate(n)((_\
    \ + \e[31m1l\e[0m).pow(\e[31m2\e[0m)).scanLeft(\e[31m0l\e[0m) { (\e[36mp\e[0m,\
    \ \e[36me\e[0m) =>\n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => _$1 + \e[31m1L\e[0m.\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8vav4jcf.scala:15:51 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            e % p == \e[31m0\e[0m ? (p * e / p + p, e / p)\
    \ : (\e[35mp\e[0m, \e[35me\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                           Not found: type p\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8vav4jcf.scala:15:54 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            e % p == \e[31m0\e[0m ? (p * e / p + p, e\
    \ / p) : (\e[35mp\e[0m, \e[35me\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                      Not found: type e\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vav4jcf.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            e % p == \e[31m0\e[0m ? (p * e / p + p, e\
    \ / p) : (\e[35mp\e[0m, \e[35me\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^\e[0m\n\e[31m   |\e[0m                     value ? is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vav4jcf.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }.takeWhile(_._2 > \e[31m1\e[0m).map(x => x._1\
    \ * x._2).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).distinct.toList\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ _2 is not a member of Lon"
  stdout: ''
  timestamp: 1660028693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizationsByNumber\
    \ = n.toInt\n        var factorizations : List[Long] = List.empty\n        for(number\
    \ <- 1 to n / 2)\n            factorizations = factorizations ::: (number :: factorizations.map(n\
    \ % _).filter(_ % number == 0))\n\n        return factorizations\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8yr5lake.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(number\
    \ <- \e[31m1\e[0m to n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8yr5lake.scala:17:29 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorizations = factorizations ::: (number\
    \ :: factorizations.map(n % _).filter(_ % number == \e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    List[\e[1m\e[31mAnyVal\e\
    [0m]\n\e[31m   |\e[0m                             Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Use two\
    \ for loops to find prime factors\n        for (d <- 2 to Math.sqrt(n)) {\n  \
    \          val divisor = n % d\n            if (divisor == 0)\n              \
    \  continue\n            for (nd <- 3 to Math.sqrt(divisor)) {\n             \
    \   if (nd > d)\n                    break\n                val remainder = divisor\
    \ % nd\n                if (remainder == 0)\n                    break\n     \
    \           if (nd == d)\n                    List(d, nd)\n            }\n   \
    \     }\n        // Add factor to factorized list of factors\n        val factorized\
    \ = List(1L)\n        for (d <- 2 to Math.sqrt(n)) {\n            val divisor\
    \ = n % d\n            if (divisor == 0)\n                continue\n         \
    \   for (nd <- 3 to Math.sqrt(divisor)) {\n                if (nd > d)\n     \
    \               break\n                val remainder = divisor % nd\n        \
    \        if (remainder == 0)\n                    factorized ::= nd\n        \
    \    }\n        }\n        factorized\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cerxrr8.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (d <-\
    \ \e[31m2\e[0m to Math.sqrt(n)) {\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Double\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8cerxrr8.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cerxrr8.scala:19:37\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (nd\
    \ <- \e[31m3\e[0m to Math.sqrt(divisor)) {\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Double\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cerxrr8.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8cerxrr8.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cerxrr8.scala:31:32 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m (d <- \e[31m2\e[0m to Math.sqrt(n))\
    \ {\n\e[31m\e[31m   |\e[0m                       ^"
  stdout: ''
  timestamp: 1660028693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        while (n > 1) {\n            if (n % 2 == 0) factors\
    \ += 2\n            n /= 2\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9ukc4_b.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) factors += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9ukc4_b.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ = mutable.ListBuffer.empty[List[Long]]\n        for (f <- 2l; f <= sqrt(n);\
    \ f += 1) {\n            if (n % f == 0) {\n                factorizations +=\
    \ f :: factorize(n / f)\n            }\n        }\n        factorizations.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo32h168g.scala:15:34 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (f <- \e[31m2l\e[0m; f <= sqrt(n);\
    \ f += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                  '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo32h168g.scala:15:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (f <- \e[31m2l\e[0m; f <= sqrt(n); f += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                          ^\e[0m\n\e[31m   |\e[0m         \
    \                                 '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo32h168g.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                       \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo32h168g.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (f\
    \ <- \e[31m2l\e[0m; f <= sqrt(n); f += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                  ^^\e[0m\n\e[31m   |\e[0m                  value foreach is\
    \ not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660028691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = new scala.collection.mutable.ArrayBuffer[Long]()\n        var factor = 1\n\
    \        while(factor <= n) {\n            if(n % factor == 0) {\n           \
    \     factors += 1\n            }\n            factor += 2\n        }\n      \
    \  factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp584hw4je.scala:25)\n\tat Problem.main(tmp584hw4je.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Make a\
    \ list of prime factors of n\n        val factorizations : List[Long] = PrimeFactorizationsOf(n).map(_.toLong)\n\
    \        // Make a sorted list of these factors\n        val factorsSorted : Sorted[Long]\
    \ = new TreeSet(factorizations)\n        // Convert back into a List\n       \
    \ factorsSorted.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp188rr3p2.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m : \e\
    [35mList\e[0m[\e[35mLong\e[0m] = PrimeFactorizationsOf(n).map(_.toLong)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Not found: PrimeFactorizationsOf\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp188rr3p2.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorsSorted\e[0m : \e[35mSorted\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e\
    [35mTreeSet\e[0m(factorizations)\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: type\
    \ Sorted\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp188rr3p2.scala:17:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsSorted\e[0m : \e\
    [35mSorted\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mTreeSet\e[0m(factorizations)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e[0m \e[35mTreeSet\e\
    [0m in \e[33mclass\e[0m \e[35mTreeSet\e[0m: ()(\e[33mimplicit \e[0mord: Ordering[A]):\
    \ scala.collection.mutable.TreeSet[A]\n3 errors found\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = new mutable.HashSet[Long]\n        var factorization = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        \n        // Find prime factors\n        for( f <- 1 to n  ) {\n    \
    \        if( n % f == 0) {\n                factors += f // Add new factor to\
    \ factors set\n                factorization.append(f)\n                factorization.length\n\
    \            } else\n                factorization += f // Add new factor to factorization\n\
    \        }\n        \n        // Remove duplicate factors\n        val distinctFactors\
    \ = factorization.toList\n        val newFactorization = distinctFactors.distinct\n\
    \        \n        // Return factorization\n        return newFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqh_n_ql.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplqh_n_ql.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m( f <-\
    \ \e[31m1\e[0m to n  ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = []\n        var i = 2L\n        var factor = 1\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ n /= i\n            } else {\n                i += 1\n            }\n      \
    \  }\n        factors += n\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnh58br2.scala:14:23 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmptnh58br2.scala:15:0 ----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m2L\e[0m\n\e[31m\e[31m   |\e\
    [0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptnh58br2.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                factors += i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Null - did you mean Null.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptnh58br2.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                n /= i\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m                value /= is not a member of Long - did you mean n.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptnh58br2.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        factors += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.con"
  stdout: ''
  timestamp: 1660028701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizeRecursive(n)\n        factorization.toList filter (_ != 1l)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkof3bbe4.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizeRecursive(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizeRecursive\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new mutable.HashSet[Long]()\n        factorize(n,factors)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfwtrf2_.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppfwtrf2_.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        factorize(n,factors)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Found:    (Long, Nothing)\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val divisors\
    \ = n / 2l.toLong\n        var factors = List[Long]()\n        while(divisors\
    \ > 2l) {\n            factors ::= divisors.toLong\n            divisors /= 2l.toLong\n\
    \        }\n        factors ::= divisors.toLong\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihan49dd.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            divisors /= \e[31m2l\e[0m.toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /=\
    \ is not a member of Long - did you mean divisors.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = (n / 2l).toInt\n        val factors = ListBuffer.empty[Long]\n        factors\
    \ ++= n / 2l\n        var p = 2l\n        while (p < factorization) {\n      \
    \      if (n % p == 0) {\n                factors += p\n                n /= p\n\
    \            } else {\n                p += 1\n            }\n        }\n    \
    \    factors ++ factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw4cxo8dc.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        factors ++= n / \e[31m2l\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw4cxo8dc.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                n /= p\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpw4cxo8dc.scala:26:8 ---------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        factors ++ factors.toList\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = n / 2 // initial step\n        val primeFactorization = factorization * factorization\
    \ // rewrite initial factor as prime factor\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        var i = 2\n        while(i <= factorization) {\n            val j = factorization\n\
    \            while(j <= primeFactorization) {\n                if( n % i == 0)\
    \ {\n                    factors.append(i)\n                    factors.append(j)\n\
    \                    n /= i\n                    i /= 2\n                    j\
    \ /= 2\n                }\n                j += 1\n            }\n           \
    \ i += 1\n        }\n        if(n > 1) {\n            factors.append(n)\n    \
    \    }\n        factors.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1fffo39.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpd1fffo39.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    n /= i\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not\
    \ a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpd1fffo39.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                    j /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not a member of\
    \ Long - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd1fffo39.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean j.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Get prime\
    \ factors\n        val factorization = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (n % i == 0) {\n            factorization.append(i)\n\
    \            n /= i\n        }\n\n        // Get prime factors\n        val factorization\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (n % i == 0) {\n            factorization.append(i)\n            n /= i\n  \
    \      }\n\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2t01zjvt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2t01zjvt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e\
    [0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2t01zjvt.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n /= i\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2t01zjvt.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            n /= i\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.HashSet[Long]()\n        val primes = scala.util.Either.ofRight(BigInt(n).toInt).filter(_\
    \ > 1).toRight()\n        if (primes.isRight) {\n            while (primes.isRight)\
    \ {\n                val prime = primes.toRight()\n                val divisors\
    \ = BigInt(prime).toInt.downTo(2).toIterator.filter(_ > 1).toList //1..n factorization\n\
    \                val divisor = divisors.head\n                if (factorization.contains(divisor))\
    \ {\n                    continue\n                } else {\n                \
    \    factorization.add(divisor)\n                }\n                divisors.tail.foreach\
    \ {\n                    case x => factorization.add(x * divisor)\n          \
    \      }\n            }\n        }\n        factorization.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitmlf5j6.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpitmlf5j6.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = scala.util.Either.ofRight(BigInt(n).toInt).filter(_\
    \ > \e[31m1\e[0m).toRight()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value ofRight is not a member of object scala.util.Either\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitmlf5j6.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    continue\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val list\
    \ = n.toString.toLongArray.map(_.toInt)\n        val factorizations : HashSet[Long]\
    \ = HashSet(2l)\n        for (i = 2 until list.length) factorizations += i * list(i)\n\
    \        factorizations match {\n            case empty if factorizations.size\
    \ == 0 =>\n                List() // no factors\n            case empty => factorizations.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetmjgozr.scala:16:15 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m until list.length)\
    \ factorizations += i * list(i)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e\
    [31m   |\e[0m               '<-' expected, but '=' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpetmjgozr.scala:14:30 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = n.toString.toLongArray.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   value toLongArray is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpetmjgozr.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m until list.length)\
    \ factorizations += i * list(i)\n\e[31m\e[31m   |\e[0m                       \
    \             ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n <=\
    \ 1) {\n            List[Long]()\n        }\n        else {\n            var prime\
    \ : Long = 1\n            var factors = List[Long]()\n            while (prime\
    \ < n) {\n                while (n % prime == 0) {\n                    factors\
    \ ::= prime\n                    n /= prime\n                }\n             \
    \   prime += 1\n            }\n            factors\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4g3yifba.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    n /= prime\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is\
    \ not a member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val fmap\
    \ = mutable.Map.empty[Long, Int]\n        val factors = mutable.List.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            fmap += i -> 0\n        }\n   \
    \     for (x<- 1 to n by 2) {\n            val xf = x % fmap.getOrElse(x, 0)\n\
    \            if (xf > 1) {\n                fmap += x -> xf - 1\n            \
    \    factors += x\n            }\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9lrfhyo.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfmap\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9lrfhyo.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa9lrfhyo.scala:16:23 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (n : Long)\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9lrfhyo.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (x<- \e\
    [31m1\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \  ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\e[31m \
    \  |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(p:\
    \ Long) : Boolean = p <= n && all(n%_ == 0, _ % p == 0)\n        val primeFactors\
    \ = ListBuffer.empty[Long]\n        for (i<-2 until n) {\n            if (isPrime(i))\
    \ {\n                primeFactors += i.toLong\n            }\n        }\n    \
    \    primeFactors.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvnk3bbjs.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mp\e[0m:\
    \ \e[35mLong\e[0m) : \e[35mBoolean\e[0m = p <= n && all(n%_ == \e[31m0\e[0m, _\
    \ % p == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \                   Not found: all\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvnk3bbjs.scala:16:24 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m (i<-\e[31m2\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (n : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnk3bbjs.scala:21:21 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        primeFactors.reverse\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n < 2L)\
    \ List()\n        else (2l..n).sliding(2L).map(_.product).filter(_ > 0l).map(_\
    \ / _.toLong).toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcer2enlu.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (\e[31m2l\e[0m..n).sliding(\e\
    [31m2L\e[0m).map(_.product).filter(_ > \e[31m0l\e[0m).map(_ / _.toLong).toList\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ an identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = factors(n)\n        val factorList = new mutable.ListBuffer[Long]()\n    \
    \    factors.map{n =>\n            val p = factors.count(x => x % n == 0)\n  \
    \          factorList.+=(p * n)\n        }\n        factorList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9mkhocap.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = factors(n)\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mfactors\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9mkhocap.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        val maxFactor = math.ceil(n/Math.sqrt(n)).toLong\n\
    \        for(i = 1l to maxFactor) if(n % i == 0) factors += i\n        if(!factors.isEmpty)\
    \ factors.reverse\n        else List(1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplf_1t73k.scala:16:14 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i = \e[31m1l\e[0m to maxFactor)\
    \ \e[33mif\e[0m(n % i == \e[31m0\e[0m) factors += i\n\e[31m\e[31m   |\e[0m   \
    \           ^\e[0m\n\e[31m   |\e[0m              ')' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplf_1t73k.scala:16:33 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i = \e[31m1l\e[0m to maxFactor)\
    \ \e[33mif\e[0m(n % i == \e[31m0\e[0m) factors += i\n\e[31m\e[31m   |\e[0m   \
    \                              ^^\e[0m\n\e[31m   |\e[0m                      \
    \           '<-' expected, but 'if' found\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplf_1t73k.scala:17:36 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mif\e[0m(!factors.isEmpty) factors.reverse\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m        \
    \                            expression expected but \e[31m'.'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplf_1t73k.scala:16:60\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m1l\e[0m to maxFactor) \e[33mif\e[0m(n % i == \e[31m0\e[0m) factors +=\
    \ i\n\e[31m\e[31m   |\e[0m                                                   \
    \         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import co"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val isPrime\
    \ = List.fill(factorization(n))(false)\n        val factorizations = factorization(n)\n\
    \        val factorizationList = List(1l.toLong :: factorizations)\n        val\
    \ largestFactorization = factorizationList.map(l => if (l.length > 0) l.reduceRight(_\
    \ * _) else 1l).last\n\n        factorizationList.zip(largestFactorization).filter(_._1).map\
    \ { case (n, v) =>\n            val pFactors = v / (n-1).toInt\n            val\
    \ multiple = n - (pFactors * n)\n            (multiple, pFactors)\n        }.sortBy(_._1).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhc6bqyy.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = List.fill(factorization(n))(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: factorization\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhc6bqyy.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizations\e[0m = factorization(n)\n\e[31m\e[31m   |\e[0m            \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \     Not found: factorization\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnhc6bqyy.scala:17:68 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mlargestFactorization\e[0m = factorizationList.map(\e\
    [36ml\e[0m => \e[33mif\e[0m (l.length > \e[31m0\e[0m) l.reduceRight(_ * _) \e\
    [33melse\e[0m \e[31m1l\e[0m).last\n\e[31m\e[31m   |\e[0m                     \
    \                                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                value length is not a member of Nothing\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnhc6bqyy.scala:17:82 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlargestFactorization\e[0m\
    \ = factorizationList.map(\e[36ml\e[0m => \e[33mif\e[0m (l.length > \e[31m0\e\
    [0m) l.reduceRight(_ * _) \e[33melse\e[0m \e[31m1l\e[0m).last\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reduceRight is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import\
    \ collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = BigInt(n).primeFactors(50).toList\n        val factorizationCount = mutable.HashSet[Long]()\n\
    \        factorization.foreach { f =>\n            factorizationCount += f.toLong\n\
    \        }\n        factorizationCount / n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yn2evq5.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = BigInt(n).primeFactors(\e\
    [31m50\e[0m).toList\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value primeFactors is not a member\
    \ of BigInt\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yn2evq5.scala:15:33\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationCount\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2l*3l*5l*7l until n) \n\
    \            for(p <- primes(i)) if(n % p == 0) factors += p :: 1\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkxq51sm.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplkxq51sm.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(p <- primes(i)) \e[33mif\e\
    [0m(n % p == \e[31m0\e[0m) factors += p :: \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Use recursion\n\
    \        if (n <= 1) {\n            return List(1l.toLong)\n        }\n      \
    \  val minFactor = math.ceil(math.sqrt(n))\n        var list: List[Long] = Nil\n\
    \        for (factor <- 2 to minFactor) {\n            if (n % factor == 0) {\n\
    \                val count = n / factor\n                list = list :+ factor.toLong\
    \ * count\n                n -= count\n            }\n        }\n        if (n\
    \ > 1) {\n            list = list :+ n.toLong\n        }\n        list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa0vp5gj8.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (factor\
    \ <- \e[31m2\e[0m to minFactor) {\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:    (minFactor\
    \ : Double)\n\e[31m   |\e[0m                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa0vp5gj8.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                n -= count\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val product\
    \ = n.toInt\n        val factorization = factorizeHelper(n)\n        factorization.map(f\
    \ => product / f)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxboihx3.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizeHelper(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizeHelper\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // This solution\
    \ relies on Sieve of Eratosthenes approach:\n        // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        // We need to generate list of numbers up to the square root of our target\
    \ number.\n        // We also have to check whether these numbers are already\
    \ part of our solutions.\n        // We start with the numbers from 2 (2, 4, 5,\
    \ 7, 11, 13, 17, 19) and then we go up until\n        // we hit the square root\
    \ of the number we are looking for. This way we ensure that no number is\n   \
    \     // repeated.\n        // If we ever see number that is part of our solutions,\
    \ we remove them from the list (they are redundant).\n        // After this we\
    \ go through our list and add numbers that are part of our list to the list of\
    \ factors\n        // if we see this number already in our list we remove it from\
    \ the list\n        // We end up with list of factors ordered from smallest to\
    \ largest\n        val factors = mutable.ListBuffer[Long]()\n        val range\
    \ = (2 to math.sqrt(n)).mkString(\"..\")\n        range.split(\".\").dropRight(1).map(i\
    \ => factors ++= factorize(n.toLong*i.toLong))\n\n        val list = factors.toList\n\
    \        val primes = list.filterNot(n => factors.exists(f => f == n))\n     \
    \   list ++ primes\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw78th3zk.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw78th3zk.scala:26:35 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (\e[31m2\e\
    [0m to math.sqrt(n)).mkString(\e[31m\"..\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Found:    Double\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpw78th3zk.scala:27:88 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        range.split(\e[31m\".\"\e[0m).dropRight(\e[31m1\e\
    [0m).map(\e[36mi\e[0m => factors ++= factorize(n.toLong*i.toLong))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     \
    \                                     where:    B is a type variable\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factorize(n\
    \ : Long, result : mutable.ListBuffer[Long]) : Unit = {\n            if (n > 1)\
    \ {\n                val f = n / 2\n                var count = 0\n          \
    \      for (x <- 1 to f) {\n                    if (n % x == 0) {\n          \
    \              count += 1\n                    }\n                }\n        \
    \        result.update(1, count)\n                factorize(f, result)\n     \
    \       }\n        }\n        var result = mutable.ListBuffer[Long]()\n      \
    \  factorize(n, result)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzo7zirl.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36mfactorize\e[0m(\e[36mn\e\
    [0m : \e[35mLong\e[0m, \e[36mresult\e[0m : mutable.ListBuffer[\e[35mLong\e[0m])\
    \ : \e[35mUnit\e[0m = {\n\e[31m\e[31m   |\e[0m                               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzo7zirl.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mfor\e[0m\
    \ (x <- \e[31m1\e[0m to f) {\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (f : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzo7zirl.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors:\
    \ Map[Long, Long] = scala.collection.mutable.Map(2l -> n, 3l -> n, 4l -> n, 5l\
    \ -> n)\n        val factorsN: List[Long] = List.from(factors.keySet)\n      \
    \  val factorsP = factorsN.sortWith( (a, b) => a % b < 0 ? -1 : 1)\n        val\
    \ numOfFactors = factorsP.size\n        val factorizedN: List[Long] = List.fill(numOfFactors)(n).map(x\
    \ => factors(x))\n        factorizedN.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvgk07g78.scala:16:62 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorsP\e[0m = factorsN.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => a % b < \e[31m0\e[0m ? -\e[31m1\e[0m : \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                         \
    \ value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = ListBuffer[Long]()\n        factorize(n, factors)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvs32iiu.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        factorize(n, factors)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \       Found:    (Long, scala.collection.mutable.ListBuffer[Long])\n\e[31m  \
    \ |\e[0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = ListBuffer.empty[Long]\n        for (d <- 2l.toLong until n by 2l.toLong)\
    \ {\n            if ((n % d) == 0)\n                factors ++= (d:: factorize((n\
    \ / d).toLong))\n        }\n        factors match {\n            case Nil => List(n.toLong)\n\
    \            case xs => xs\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpumq2d9q1.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Nil\
    \ => List(n.toLong)\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m\
    \   |\e[0m        Required: scala.collection.mutable.ListBuffer[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m        where:    Nil  is a getter in \e[33mpackage\
    \ object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m                  Nil\xB2 is a\
    \ object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with expected type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpumq2d9q1.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m xs\
    \ => xs\n\e[31m\e[31m   |\e[0m                       ^^\e[0m\n\e[31m   |\e[0m\
    \              Found:    (xs : scala.collection.mutable.ListBuffer[Long])\n\e\
    [31m   |\e[0m              Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = List(n)\n        val factors = Set()\n        while(factorization.nonEmpty)\
    \ {\n            val currentN = (factorization.head / 2).toLong\n            factors.remove(currentN);\n\
    \            factorization -= currentN\n            factorization.headOption match\
    \ {\n                case Some(v) => factors += v\n                case None =>\
    \ break\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc222popm.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            factors.remove(currentN);\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    (currentN : Long)\n\e[31m   |\e[0m     \
    \                      Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc222popm.scala:19:26 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            factorization -= currentN\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value -= is not a member\
    \ of List[Long] - did you mean factorization.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc222popm.scala:21:43 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mcase\e[0m Some(v) => factors += v\n\e[31m\e[31m\
    \   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m \
    \                                          Found:    (v : Long)\n\e[31m   |\e\
    [0m                                           Required: Nothing\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc222popm.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m None => break\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                     Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Initialize\
    \ our result list.\n        val factorization = mutable.ArrayBuffer(n.toLong)\n\
    \n        // Scan the given number from smallest to largest.\n        var nn =\
    \ n\n        while(n > 1) {\n            // Find how many times n divides into\
    \ itself.\n            var nDivisors = 0\n            while(n % 2 == 0) {\n  \
    \              n = n / 2\n                nDivisors = nDivisors + 1\n        \
    \    }\n\n            // Add n to the list of factors if its not in the factorization.\n\
    \            if(nDivisors < factorization.length) {\n                factorization\
    \ += n\n            }\n\n            // Go on to the next factor.\n          \
    \  n = math.floor(n/2)\n        }\n\n        // Return list of prime factors.\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7s1sjp.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpsk7s1sjp.scala:23:18 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                n = n / \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsk7s1sjp.scala:33:26\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            n = math.floor(n/\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Found:    Double\n\e[31m   |\e[0m                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.HashMap.empty[Long, Int]\n        factors.update(n,1)\n        var\
    \ i = 2\n        while(i < factors.size) {\n            val cur = factors(i)\n\
    \            val next = factors.size\n            while(next > cur) {\n      \
    \          val tmp = factors.update(i * i,1)\n                factors.update(i\
    \ * i + cur,tmp)\n                cur += tmp\n                next -= 1\n    \
    \        }\n            i += 1\n        }\n        val factorsList = factors.values.toList.sortWith(_\
    \ < _)\n        factorsList.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrzae9gg.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(num\
    \ : Long): Boolean = (2 to (num / 2l)).forall(num => (num % _) == 0l)\n      \
    \  def factorizeRecur(factor : Long, result : List[Long]) : List[Long] = {\n \
    \           val temp = factor.toLong * 2\n            val list1 = factorizeRecur(factor,\
    \ result :: (if (isPrime(temp)) temp.toLong else num)) \n            val list2\
    \ = factorizeRecur(temp, result :: result)\n            (list1 ++ list2)\n   \
    \     }\n        if (isPrime(n))\n            n.toLong\n        else\n       \
    \     factorizeRecur(2l.toLong, List[Long]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp611qfpzt.scala:14:50\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e\
    [0m(\e[36mnum\e[0m : \e[35mLong\e[0m): \e[35mBoolean\e[0m = (\e[31m2\e[0m to (num\
    \ / \e[31m2l\e[0m)).forall(\e[36mnum\e[0m => (num % _) == \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    Long\n\
    \e[31m   |\e[0m                                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp611qfpzt.scala:14:82 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mnum\e\
    [0m : \e[35mLong\e[0m): \e[35mBoolean\e[0m = (\e[31m2\e[0m to (num / \e[31m2l\e\
    [0m)).forall(\e[36mnum\e[0m => (num % _) == \e[31m0l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => num % _$1.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp611qfpzt.scala:17:94\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlist1\e[0m = factorizeRecur(factor, result :: (\e[33mif\e[0m (isPrime(temp))\
    \ temp.toLong \e[33melse\e[0m num)) \n\e[31m\e[31m   |\e[0m                  \
    \                                                                            ^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Not found: num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp611qfpzt.scala:18:45\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mlist2\e[0m = factorizeRecur(temp, result :: result)\n\e[31m\e[31m   |\e[0m\
    \                                             ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    ("
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(x:\
    \ Long) : Boolean =\n            (x == 2) ||\n            (x % 2 != 0 && x !=\
    \ 1 && x != 3)\n        def isDivisibleBy(n : Long) : Boolean =\n            n\
    \ % 2 == 0\n        def generatePrimes(n : Long) : List[Long] =\n            if\
    \ (n == 2) List(2)\n            else if (n % 2 == 0) List(2)\n            else\
    \ {\n                var i = 2\n                val factors = mutable.Stack[Long]()\n\
    \                factors.push(2)\n                while (i <= n)\n           \
    \         if (n % i == 0) i += 1\n                    else factors.push(i % 2)\n\
    \                factors.reverse\n            }\n        def addFactors(primes\
    \ : List[Long], factor : Long) : List[Long] =\n            primes match {\n  \
    \          case Nil => List(factor)\n            case prime :: Nil => List(factor,\
    \ prime)\n            case prime :: factors =>\n                if (prime * factor\
    \ == n)\n                    factors :: prime\n                else if (isPrime(prime))\n\
    \                    addFactors(primes, factor * prime)\n                else\
    \ if (isPrime(factor))\n                    addFactors(primes, factor * factor)\n\
    \                else\n                    factors.tail :: prime\n           \
    \ }\n        def checkIfPossible(primes : List[Long], factor : Long) : Boolean\
    \ =\n            if (primes.contains(factor))\n                true\n        \
    \    else\n                factor % primes.head == 0\n        def generatePrimes(n\
    \ : Long) : List[Long] =\n            if (n == 2) List(2)\n            else if\
    \ (n % 2 == 0) List(2)\n            else {\n                var i = 2\n      \
    \          val factors = mutable.Stack[Long]()\n                factors.push(2)\n\
    \                while (i <= n)\n                    if (n % i == 0) i += 1\n\
    \                    else factors.push(i % 2)\n                factors.reverse\n\
    \            }\n        def checkIfPossible(primes : List[Long], factor : Long)\
    \ : Boolean =\n            if (primes.contains(factor))\n                true\n\
    \            else\n                factor % primes.head == 0\n        if (n <\
    \ 2)\n            throw new ArithmeticException(\"The input number should be greater\
    \ than 1\")\n        else\n            n match {\n                case _ =>\n\
    \                    var primes = generatePrimes(n)\n                    primes\
    \ match {\n                        case Nil => List()\n                      \
    \  case prime :: Nil => List(prime)\n                        case prime :: factors\
    \ =>\n                            if (prime * factor == n)\n                 \
    \               factors :: prime\n                            else if (isPrime(prime))\n\
    \                                addFactors(primes, factor * prime)\n        \
    \                    else if (isPrime(factor))\n                             \
    \   addFactors(primes, \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2q4wnhoa.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2q4wnhoa.scala:96:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2q4wnhoa.scala:50:12 ---------------------------\e[0m\e[0m\n\e\
    [31m50 |\e[0m        \e[33mdef\e[0m \e[36mgeneratePrimes\e[0m(\e[36mn\e[0m : \e\
    [35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] =\n\e[31m\e[31m   |\e[0m   \
    \     ^\e[0m\n\e[31m   |\e[0mgeneratePrimes is already defined as \e[33mmethod\e\
    [0m \e[35mgeneratePrimes\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m51\
    \ |\e[0m            \e[33mif\e[0m (n == \e[31m2\e[0m) List(\e[31m2\e[0m)\n\e[31m52\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) List(\e[31m2\e[0m)\n\e[31m53 |\e[0m            \e[33melse\e[0m {\n\e[31m54\
    \ |\e[0m                \e[33mvar\e[0m \e[36mi\e[0m = \e[31m2\e[0m\n\e[31m55 |\e\
    [0m                \e[33mval\e[0m \e[36mfactors\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m56 |\e[0m                factors.push(\e[31m2\e[0m)\n\e[31m57 |\e\
    [0m                \e[33mwhile\e[0m (i <= n)\n\e[31m58 |\e[0m                \
    \    \e[33mif\e[0m (n % i == \e[31m0\e[0m) i += \e[31m1\e[0m\n\e[31m59 |\e[0m\
    \                    \e[33melse\e[0m factors.push(i % \e[31m2\e[0m)\n\e[31m60\
    \ |\e[0m                factors.reverse\n\e[31m61 |\e[0m            }\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2q4wnhoa.scala:62:12 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mdef\e[0m \e[36mcheckIfPossible\e[0m(\e\
    [36mprimes\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mfactor\e[0m : \e[35mLong\e\
    [0m) : \e[35mBoolean\e[0m =\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mcheckIfPossible is already defined as \e[33mmethod\e[0m \e[35mcheckIfPossible\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m63 |\e["
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizationsForNum\
    \ = List(1)\n        var factorizationsForNumList : List[Long] = factorizationsForNum\n\
    \        while (n>1) {\n            n / 2\n            factorizationsForNumList\
    \ ::: factorizationsForNumList.reduceLeft{ (x,y) => x * y} * factorizationsForNumList.last\n\
    \            factorizationsForNum = factorizationsForNumList\n            factorizationsForNumList\
    \ = new List[Long](1)\n        }\n        factorizationsForNumList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu_b2gfh9.scala:15:52\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationsForNumList\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = factorizationsForNum\n\e[31m\e[31m  \
    \ |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (factorizationsForNum\
    \ : List[Int])\n\e[31m   |\e[0m                            Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu_b2gfh9.scala:18:37\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            factorizationsForNumList\
    \ ::: factorizationsForNumList.reduceLeft{ (\e[36mx\e[0m,\e[36my\e[0m) => x *\
    \ y} * factorizationsForNumList.last\n\e[31m\e[31m   |\e[0m                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value ::: is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu_b2gfh9.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            factorizationsForNum\
    \ = factorizationsForNumList\n\e[31m\e[31m   |\e[0m                          \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \  Found:    (factorizationsForNumList : List[Long])\n\e[31m   |\e[0m        \
    \               Required: List[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpu_b2gfh9.scala:20:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     factorizationsForNumList = \e[33mnew\e[0m \e[35mList\e[0m[\e[35mLong\e[0m](\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m   too many arguments for \e[33mconstructor\e\
    [0m \e[35mList\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: (): List[Long]\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factors(n)\n        val result = new mutable.ArrayList[Long]()\n        var\
    \ i : Long = 0\n        while (i < factorization.length) {\n            if (factorization.contains(i))\
    \ {\n                result.add(factorization(i).toLong)\n                i +=\
    \ 1\n            } else {\n                i += 1\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3sp1kuv.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factors(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: factors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn3sp1kuv.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val f = (p\
    \ : Long) => {\n            if (p == 1) 1\n            else { val d = p%p; if\
    \ (d == 2) p*p*p else p }\n        }\n        val c = if (n%2 == 0) 2 else n-1\n\
    \        val n = n.toLong\n        var result = (List(1): Long)\n        while\
    \ (c > 0) {\n            val r = f(c)\n            if (r > n) {\n            \
    \    result = (f(n))\n                break\n            } else {\n          \
    \      result = (result :+ r)\n                c /= r\n            }\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa5tlfcu6.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5tlfcu6.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = (List(\e[31m1\e\
    [0m): \e[35mLong\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    List[Int]\n\e[31m   |\e[0m    \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa5tlfcu6.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpa5tlfcu6.scala:27:33 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                result = (result :+ r)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                value :+ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpa5tlfcu6.scala:28:18 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                c /= r\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                value /= is not a member of Int - did you mean\
    \ c.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5tlfcu6.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Long)\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer(2l)\n        for(d <- 2l; if (n % d == 0) factors += d)\n\
    \        for(d <- 2l; if (n % d == 0) factors += d)\n        if (n > 2l) factors\
    \ ++= factorize(n / 2l)\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfwccit87.scala:15:49 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(d <- \e[31m2l\e[0m; \e[33mif\e\
    [0m (n % d == \e[31m0\e[0m) factors += d)\n\e[31m\e[31m   |\e[0m             \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                      expression expected but \e[31m')'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfwccit87.scala:16:49 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(d <- \e[31m2l\e[0m; \e[33mif\e\
    [0m (n % d == \e[31m0\e[0m) factors += d)\n\e[31m\e[31m   |\e[0m             \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                      expression expected but \e[31m')'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwccit87.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfwccit87.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(d <- \e[31m2l\e[0m; \e[33mif\e\
    [0m (n % d == \e[31m0\e[0m) factors += d)\n\e[31m\e[31m   |\e[0m             \
    \    ^^\e[0m\n\e[31m   |\e[0m                 value withFilter is not a member\
    \ of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        var m = n\n     \
    \   val maxFactor = math.ceil(n/m)\n        var i = 2\n        while (m % i >\
    \ 0) {\n            primes.append(i)\n            m /= i\n            i += 1\n\
    \        }\n        primes.append(m)\n        (primes: _*)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E031] Syntax Error: /tmp/tmpyjfefeid.scala:24:17 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        (primes: \e[35m_*\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 * can be used only for\
    \ last argument\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyjfefeid.scala:24:9\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        (primes: \e[35m_*\e\
    [0m)\n\e[31m\e[31m   |\e[0m         ^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (primes : scala.collection.mutable.ListBuffer[Long])\n\e[31m   |\e[0m   \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer(n.toLong.toInt)\n        for (i <- 2l to n.toLong.toInt.toLong\
    \ / 2l)\n            if (n % i == 0)\n                factors.append(i)\n    \
    \            factors.append(n.toLong.toInt.toLong / i)\n                factors.append(n.toLong.toInt.toLong\
    \ / i)\n                factors.append(n.toLong.toInt.toLong / i)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnj58kgg.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer(n.toLong.toInt)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val nums\
    \ = 1 :: 2 :: 3 :: 4 :: 5 :: 6 :: 7 :: 8 :: 9 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: 10 ::\
    \ 10 :: 10 :: 10 :: 10 :: 10 :: 10 :: \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzawgjot9.scala:14:1533 -------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[31m1\e[0m\
    \ :: \e[31m2\e[0m :: \e[31m3\e[0m :: \e[31m4\e[0m :: \e[31m5\e[0m :: \e[31m6\e\
    [0m :: \e[31m7\e[0m :: \e[31m8\e[0m :: \e[31m9\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m\
    \ :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e\
    [0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e[31m10\e[0m :: \e\
    [3"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpzawgjot9.scala

    '
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new mutable.HashSet[Long]()\n        val primes = Primes.primes\n        for\
    \ (prime <- primes) {\n            while (n%prime == 0) {\n                factors\
    \ += prime\n                n /= prime\n            }\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpey2g2bg_.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpey2g2bg_.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = Primes.primes\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: Primes\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        for {\n            i <- 2 to Math.sqrt(n)\n\
    \        } while (n % i == 0) {\n            factors += i\n            n /= i\n\
    \        }\n        if (n != 1) {\n            factors += n\n        }\n     \
    \   factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqzg3wly8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqzg3wly8.scala:16:31 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            i <- \e[31m2\e[0m to Math.sqrt(n)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \              Found:    Double\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqzg3wly8.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= i\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new scala.collection.mutable.HashSet[Long]\n        val m = n.toInt\n    \
    \    // Generate prime factors until no more are found\n        for (x <- 2 to\
    \ (n/2)){\n            if ((n/x) == 0) \n                factors.add(x)\n    \
    \        else\n                for (x <- 2 to (math.floor(n/x)+1))\n         \
    \           if (n % x == 0)\n                        factors.add(x)\n        }\n\
    \        // Return factors in list from smallest to largest\n        factors.toList.sortWith(x\
    \ => x.toLong <=> n.toLong).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54r095r1.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m2\e[0m to (n/\e[31m2\e[0m)){\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp54r095r1.scala:21:32 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e[0m (x <- \e[31m2\e[0m to\
    \ (math.floor(n/x)+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      Found:    Double\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp54r095r1.scala:26:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        factors.toList.sortWith(\e\
    [36mx\e[0m => x.toLong <=> n.toLong).toList\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Wrong number of parameters, expected: 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660028716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = scala.collection.mutable.List[Long]()\n        var primesDivisorsUntilFactorization\
    \ = scala.collection.mutable.Map[Long,Long]()\n\n        while (n >= 2) {\n  \
    \          var x = 2\n            while (x < (n-1)) {\n                var divisor\
    \ = 0\n                if (n % x == 0) {\n                    divisor = x + 1\n\
    \                }\n                x += 1\n                factors += divisor.toLong\n\
    \            }\n            primesDivisorsUntilFactorization(n) = factors\n  \
    \          factors = List[Long]()\n        }\n\n        // Now all prime factors\
    \ appeared once in factorization, so take list of these as factors for n.\n  \
    \      primesDivisorsUntilFactorization.toList.map { case (k,v) => k.toLong *\
    \ v.toLong }.takeWhile(i => i <= n).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xp614mz.scala:14:47 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = scala.collection.mutable.List[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did\
    \ you mean mutable.ListMap?\n1 error found\n"
  stdout: ''
  timestamp: 1660028717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Sieve\
    \ of Eratosthenes\n        val max = Long.MaxValue\n        val primes = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        var nextPrime : Long = n / 2\n        while (nextPrime != 1) {\n    \
    \        if (n % nextPrime == 0) {\n                primes.append(nextPrime)\n\
    \            }\n            nextPrime = primes.last\n        }\n        primes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_s3q5i8a.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        primes\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (primes : scala.collection.mutable.ArrayBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = List(1, 3, 5, 7, 11, 13, 17, 19)\n        val factorizations = primes.map(x\
    \ => (n, x))\n        val factorizations = factorizations.filter(_._2 % x.toLong\
    \ == 0)\n        factorizations.map(x => x._2.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2b715fw_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = factorizations.filter(_._2\
    \ % x.toLong == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if(n % 2\
    \ == 0){\n            factorize(n/2) + List(n.toLong)\n        }\n        else\
    \ {\n            val primeFactorization = factorization(n)\n            primeFactorization.map{\n\
    \                case x: List[Long] => List(x.head.toLong * x.last.toLong)\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfxwnpip7.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorize(n/\e[31m2\e[0m) + List(n.toLong)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfxwnpip7.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mprimeFactorization\e\
    [0m = factorization(n)\n\e[31m\e[31m   |\e[0m                                \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorization\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(n\
    \ : Long) : Boolean = {\n            for(i <- 2l.toLong to (n.toLong/i.toLong.toLong\
    \ - 1))\n                if (n % i == 0) return false\n            return true\n\
    \        }\n        if (n.toLong > 2) List(2l.toLong)\n        else {\n      \
    \      val factors = List(0l)\n            for(i <- 2l.toLong to sqrt(n).toLong\
    \ - 1)\n                if (isPrime(i) && n % i == 0)\n                    factors.updated(i)\n\
    \            factors\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30op8or9.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2l\e[0m.toLong\
    \ to (n.toLong/i.toLong.toLong - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                            Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp30op8or9.scala:24:36 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    factors.updated(i)\n\e[31m\e[31m   |\e\
    [0m                                    ^\e[0m\n\e[31m   |\e[0m               \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = List(2l..n).sliding(2)\n        factorization.map { x => (x.last / x.head)\
    \ } ++ List(1l)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpflxlln9c.scala:14:36 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = List(\e\
    [31m2l\e[0m..n).sliding(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \ an identifier expected, but '.' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpflxlln9c.scala:15:41 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        factorization.map { \e[36mx\e[0m => (x.last / x.head) } ++ List(\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value / is not a member\
    \ of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1660028719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var result\
    \ : List[Long] = List()\n        for (d <- 2 to n by 2) {\n            for (e\
    \ = n / d ; (d * e) % n = 0 ; d /= e)\n            if (d > 2) result += d.toLong\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tzny86v.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (e = n / d ; (d * e) % n =\
    \ \e[31m0\e[0m ; d /= e)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp4tzny86v.scala:16:53 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (e = n / d ; (d * e) % n = \e[31m0\e\
    [0m ; d /= e)\n\e[31m\e[31m   |\e[0m                                         \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \   '<-' expected, but ')' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4tzny86v.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (d <-\
    \ \e[31m2\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \       ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4tzny86v.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (e = n / d ; (d * e) % n =\
    \ \e[31m0\e[0m ; d /= e)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0mvalue map is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1660028724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for( i <- 2l*n until\
    \ n if n % i == 0 ) {\n            val newFactor = n\n            while( (newFactor\
    \ % i) != 0 ) {\n                val newFactor = newFactor / i\n             \
    \   newFactor += 1\n            }\n            factors += i.toLong\n        }\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkrqsvux0.scala:18:32 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mnewFactor\e[0m =\
    \ newFactor / i\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\
    \e[31m   |\e[0m                                Recursive \e[33mvalue\e[0m \e[35mnewFactor\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for {\n            f <- 2 to sqrt(n)\n\
    \            divisor = n / f\n            divisorIsPrime = isPrime(divisor)\n\
    \        } if (divisorIsPrime) {\n            factors.append(f)\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mp5zwya.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_mp5zwya.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            f <- \e[31m2\e[0m to sqrt(n)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Found:    Double\n\e[31m   |\e[0m                      Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mp5zwya.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            divisorIsPrime\
    \ = isPrime(divisor)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Sieve\
    \ of Eratosthenes for primes <= n.\n        // This code doesn't handle non-prime\
    \ factors.\n        if (n <= 1) {\n            List(1L)\n        } else {\n  \
    \          var f = 1L\n            var i = 0\n            // Fill factor set with\
    \ factors of n.\n            var ps : List[Long] = List()\n            while (f\
    \ <= n) {\n                if (n % f == 0) {\n                    ps = ps :: List(f);\
    \ //ps :: List(i, f)\n                    i = i + 1\n                }\n     \
    \           f = f + 1\n            }\n            // Append remaining factors\
    \ to list of prime factors.\n            ps = ps :: List(n)\n            // Factor\
    \ list ps in descending order of number of occurrences.\n            ps.sortBy(-_)\n\
    \            ps\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps32cat52.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    ps = ps ::\
    \ List(f); \e[34m//ps :: List(i, f)\e[0m\n\e[31m\e[31m   |\e[0m              \
    \           ^^\e[0m\n\e[31m   |\e[0m                         Found:    (ps : List[Long])\n\
    \e[31m   |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps32cat52.scala:31:17 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            ps = ps :: List(n)\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 Found:    (ps : List[Long])\n\
    \e[31m   |\e[0m                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n <=\
    \ 1l) List()\n        if (n == 1l) return List()\n        val factorization =\
    \ factorizations(n)\n        factorization.filter(_ > 1).filter(_ % 2 == 0).foldLeft(List[Long]())\
    \ ((acc, f) => acc :+ f * (n%f).toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsjdou16t.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      val factorization\
    \ = new mutable.ListBuffer[Long]()\n      for {\n        i <- 2 to n by 2\n  \
    \      if n % i == 0\n      } factorization += i\n      factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96wzmwfz.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mfactorization\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96wzmwfz.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        i <- \e[31m2\e[0m to\
    \ n by \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  Found:    (n : Long)\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new mutable.HashSet[Long]()\n        for (f <- 2l until n) if (n % f == 0)\
    \ factors += f\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphghx55h_.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      val factors:\
    \ List[Long] = n #:: factorize(n/factors(n))\n      factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaz97rg35.scala:14:58\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mfactors\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = n #:: factorize(n/factors(n))\n\e[31m\e\
    [31m   |\e[0m                                                          ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = new mutable.ListBuffer[Long]\n        val max = math.ceil(sqrt(n).toDouble)\n\
    \        for ( i:= 2l to max ) {\n            if (n % i == 0) {\n            \
    \    var p = i\n                while ( n % p == 0 ) {\n                    p\
    \ += 1\n                }\n                factorization += i\n              \
    \  factorization += p\n            }\n        }\n        return factorization.toList.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2kefsb35.scala:16:30 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m ( i:= \e[31m2l\e[0m to max ) {\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           '<-' expected, but '{' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2kefsb35.scala:14:32 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kefsb35.scala:25:9\
    \ -------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorization\
    \ : mutable.Seq[Long] = null\n        var temp : Long = 1\n        while (n !=\
    \ 0) {\n            if (n % temp == 0) {\n                if (factorization ==\
    \ null) {\n                    factorization = mutable.Seq.fill(n/temp)(temp.hashCode()).toList\n\
    \                } else {\n                    factorization += temp.hashCode()\n\
    \                }\n                temp = 1\n            } else {\n         \
    \       temp += 1\n            }\n            n /= temp\n        }\n        if\
    \ (factorization != null) {\n            factorization.toList\n        } else\
    \ {\n            List[Long]()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dbyyb7q.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorization\e[0m : mutable.Seq[\e\
    [35mLong\e[0m] = \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dbyyb7q.scala:19:36\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    factorization\
    \ = mutable.Seq.fill(n/temp)(temp.hashCode()).toList\n\e[31m\e[31m   |\e[0m  \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6dbyyb7q.scala:27:14 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            n /= temp\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var n = n\n        while (n % 2 == 0)\
    \ {\n            factors += 2\n            n /= 2\n        }\n        while (n\
    \ % 3 == 0) {\n            factors += 3\n            n /= 3\n        }\n     \
    \   var n = n\n        while (n % 5 == 0) {\n            factors += 5\n      \
    \      n /= 5\n        }\n        var n = n\n        while (n % 7 == 0) {\n  \
    \          factors += 7\n            n /= 7\n        }\n        factors ++= n\
    \ until 1\n        factors.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbyc3iu8y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvariable\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpbyc3iu8y.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvariable\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbyc3iu8y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbyc3iu8y.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        for( i <- 2l.toLong to n by 2l.toLong\
    \ ){\n            for( j <- 2l.toLong to i by 2l.toLong ){\n                if(\
    \ (i % j) == 0 ) factors += j\n            }\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjt_ug56e.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        \n        var j : Long = 1\n        \n        while\
    \ (j <= n / j.toLong) {\n            \n            val f = n%j.toLong\n      \
    \      \n            if (factors.contains(f)) {\n                continue\n  \
    \          }\n            \n            if (j.toLong == n) {\n               \
    \ factors ::= f\n            } else {\n                factors ::= f :: factorize(j)\n\
    \            }\n            \n            j += 1\n        }\n        \n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjsn3thbx.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjsn3thbx.scala:29:24\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                factors ::=\
    \ f :: factorize(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value ::= is not a member of List[Long] - did you mean List[Long].::?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primesUpToN\
    \ : List[Long] = List(2, 3, 5) // First two prime numbers which are smaller than\
    \ n\n        var i : Long = 1\n        var primeFactors : List[Long] = List(2,\
    \ 3) // First two prime factors of the given number\n        while (i < primesUpToN.length)\
    \ {\n            while (n % primesUpToN(i) == 0) {\n                primeFactors\
    \ = primeFactors :+ (primesUpToN(i).toLong)\n                n /= primesUpToN(i)\n\
    \            }\n            i += 1\n        }\n        primeFactors\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxkwr696.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mwhile\e[0m\
    \ (n % primesUpToN(i) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \   Found:    (i : Long)\n\e[31m   |\e[0m                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxkwr696.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                primeFactors\
    \ = primeFactors :+ (primesUpToN(i).toLong)\n\e[31m\e[31m   |\e[0m           \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                Found:    (i : Long)\n\e[31m\
    \   |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprxkwr696.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                n /= primesUpToN(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprxkwr696.scala:20:33 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                n /= primesUpToN(i)\n\e[31m\e[31m   |\e[0m\
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                          \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n)\n        if (factorization.isEmpty) {\n            List()\n \
    \       } else {\n            val factors = factorization.reduceLeft((x,y) =>\
    \ x*y).toList\n            factors.map(f => n.div(f).toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyf1ravwj.scala:18:65 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = factorization.reduceLeft((\e\
    [36mx\e[0m,\e[36my\e[0m) => x*y).toList\n\e[31m\e[31m   |\e[0m               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \         value toList is not a member of Long - did you mean Long.toInt?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Check\
    \ if n can be evenly divided by any smaller number (including n itself)\n    \
    \    if (n % 2 == 0)\n            List(n / 2)\n        else {\n            val\
    \ factors = mutable.ListBuffer.empty[Long]\n            val primes = mutable.ListBuffer.empty[Long]\n\
    \n            primes += 2\n            // Find factors\n            while (n %\
    \ prime == 0) {\n                factors += prime\n                n /= prime\n\
    \            }\n            factors ++= primes.takeWhile(_ < n)\n            factors\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg7vnm54.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg7vnm54.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg7vnm54.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mwhile\e[0m (n % prime == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbg7vnm54.scala:25:18 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                n /= prime\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg7vnm54.scala:25:21\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                n /= prime\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = primeFactorization(n).reverse.zipWithIndex.toList\n        factorization.filter(_._2\
    \ % n == 0).map(_._1).toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kpnwcjr.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = primeFactorization(n).reverse.zipWithIndex.toList\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: primeFactorization\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.util.mutable.ArrayBuffer.empty[Long]\n        val maxFactor = math.ceil(n/2).toLong\n\
    \        for (i = 2 to maxFactor) if (n % i == 0) {\n            val k = n/i\n\
    \            factors += k\n            n/=i\n        }\n        if (n > 1) {\n\
    \            factors += n\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzncqcz_9.scala:16:15 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m to maxFactor)\
    \ \e[33mif\e[0m (n % i == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m             \
    \  ^\e[0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpzncqcz_9.scala:16:33 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m to maxFactor)\
    \ \e[33mif\e[0m (n % i == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m             \
    \                    ^^\e[0m\n\e[31m   |\e[0m                                \
    \ '<-' expected, but 'if' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzncqcz_9.scala:25:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzncqcz_9.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = scala.util.mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value mutable is not a member of util\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzncqcz_9.scala:20:9 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConve"
  stdout: ''
  timestamp: 1660028729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n);\n        val factorList = new mutable.HashSet[Long]();\n\
    \        for (i <- factorization.toArray) {\n            factorList += i\n   \
    \     }\n        return (factorList.toList.toArray)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdnkz8r1w.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n);\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnkz8r1w.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorList\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]();\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n <=\
    \ 1) List(n.toLong)\n        else if (n == 1) List(n.toLong)\n        else {\n\
    \            var factors = List[Long](1L).iterator ++ List.fill(n - 1) {\n   \
    \             n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp36m4fwx0.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_\
    \ => n%_ => n%_ => n%_ \n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m\
    \   |\e[0m                not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp36m4fwx0.scala:18:24 -----------------------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ => n%_ =>\
    \ n%_ => n%_ => n%_ \n\e[31m\e[31m   |\e[0m            "
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmp36m4fwx0.scala

    '
  timestamp: 1660028729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new scala.collection.mutable.ListBuffer[Long]()\n        factors.addFirst(n)\n\
    \        for (i <- 2 to ((Math.sqrt(n.toDouble)/2).toInt)) {\n            if (n\
    \ % i == 0) {\n                n /= i;\n                factors.addFirst(i);\n\
    \            }\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpprautw70.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factors.addFirst(n)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue addFirst is not a member of\
    \ scala.collection.mutable.ListBuffer[Long]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpprautw70.scala:18:18 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                n /= i;\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m                value /= is not a member of Long - did you mean n.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpprautw70.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                factors.addFirst(i);\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue addFirst is\
    \ not a member of scala.collection.mutable.ListBuffer[Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpprautw70.scala:22:8 ---------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        factors\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (factors : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = Vector.empty[Long]\n        var i = 2\n        while ((n % i) == 0) {\n  \
    \          factors = factors :+ i\n            n = n / i\n            i = i +\
    \ 1\n        }\n        if (n != 1) {\n            factors = factors :+ n\n  \
    \      }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_csyaosk.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = n / i\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = new mutable.HashMap[Long, Int]()\n        var factorList = new mutable.ListBuffer[Long]()\n\
    \n        while (n % 2 == 0) {\n            n /= 2\n            factors += 2 ->\
    \ 1\n        }\n\n        while (n > 1) {\n            n /= 2\n            factors\
    \ += 2 -> 1\n            if (n % 2 == 0) {\n                n /= 2\n         \
    \       factors += 2 -> 1\n            }\n        }\n\n        for ( (k, v) <-\
    \ factors.iterator) {\n            while (n > 1) {\n                if (n % 2\
    \ == 0) {\n                    n /= 2\n                    factors += 2 -> 1\n\
    \                }\n                else {\n                    n /= 2\n     \
    \               factors += k -> v\n                }\n            }\n        }\n\
    \n        factorList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp17zezph8.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp17zezph8.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mvar\e[0m \e[36mfactorList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17zezph8.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17zezph8.scala:23:14\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp17zezph8.scala:26:18 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean n.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val pFactors\
    \ : mutable.LinkedList[Long] = new mutable.LinkedList[Long]()\n        var factors\
    \ = 2L;\n        while(factors < n) {\n            if(n % factors == 0) {\n  \
    \              pFactors += factors\n            }\n            factors += 2L\n\
    \        }\n        if(n % factors == 0)\n            pFactors += n\n        pFactors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpog_vjst7.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpFactors\e[0m : mutable.LinkedList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpog_vjst7.scala:14:54 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mpFactors\e[0m : mutable.LinkedList[\e[35mLong\e\
    [0m] = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Make list\
    \ of prime numbers from 1 to n\n        var ps: List[Long] = List[Long]()\n  \
    \      var primes: List[Long] = List[Long]()\n        primes = (0 until (n).toList).filter(x\
    \ => (n % x) == 0)\n        for (prime <- primes) {\n            val p = prime\
    \ - 1\n            var f = 2\n            while ((f * p) < n) {\n            \
    \    f += 1\n            }\n            ps ++= List(f.toLong)\n        }\n   \
    \     ps.sortBy(x => x).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifzq9ib3.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        primes = (\e[31m0\e[0m until (n).toList).filter(\e\
    [36mx\e[0m => (n % x) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList is not a member\
    \ of Long - did you mean n.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n ==\
    \ 1)\n            return List(n.toLong)\n        val primeFactorizations = factorizePrimeFactorizations(n)\n\
    \        var max = 0\n        for (prime <- primeFactorizations) {\n         \
    \   if (max < prime.size)\n                max = prime.size\n        }\n     \
    \   val factors = List.fill(max)(0)\n        for (prime <- primeFactorizations)\
    \ {\n            var factor = 0\n            for (factor <- prime until prime.size)\
    \ {\n                factors(factor) = factors(factor) + (prime.size - factor)\n\
    \            }\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jcf4amb.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = factorizePrimeFactorizations(n)\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Not found: factorizePrimeFactorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jcf4amb.scala:29:16 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        factors.toList\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var pf :\
    \ List[Long] = List[Long]()\n        var factors = List(n).distinct.toList\n \
    \       var factorsCount = List[Long]()\n        var counter = List[Long]()\n\
    \        var i = factors.indexWhere(x => x == 1)\n        while(i < factors.size\
    \ - 1) {\n            var factorsNext = factors.drop(i)\n            var count\
    \ = factors.count(x => x == i)\n            if(count > 0) {\n                factorsCount\
    \ = factorsCount.::(i)\n                counter = counter.::(count)\n        \
    \    }\n            i += factorsNext.size - 1\n        }\n        while(counter.nonEmpty)\
    \ {\n            var current = counter.head\n            counter = counter.tail\n\
    \            pf = pf.::(current)\n        }\n        factorsCount\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primeFactors\
    \ = factor(n) \n        val listOfLongs = primeFactors.map(_.toLong).toList\n\
    \        listOfLongs.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx538_0lz.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = factor(n)\
    \ \n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: factor\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(p\
    \ : Long) : Boolean = {\n            var flag = false\n            for(i <- 2\
    \ to math.floor(math.sqrt(p))) if(p % i == 0) {flag = true; break}\n         \
    \   flag\n        }\n        def factor(n: Long) : List[Long] = {\n          \
    \  if(isPrime(n)) {\n                n :: factor(n)\n            } else {\n  \
    \              n :: factor(n + 1)\n            }\n        }\n        factor(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwfehmy9.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m2\e[0m to math.floor(math.sqrt(p))) \e[33mif\e[0m(p % i == \e[31m0\e\
    [0m) {flag = \e[31mtrue\e[0m; break}\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Found:    Double\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprwfehmy9.scala:16:81\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m2\e[0m to math.floor(math.sqrt(p))) \e[33mif\e[0m(p % i == \e[31m0\e\
    [0m) {flag = \e[31mtrue\e[0m; break}\n\e[31m\e[31m   |\e[0m                  \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        require(n\
    \ > 0, \"n must be > 0\")\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        for (f <- factors(n)) {\n            factors += f\n        }\n      \
    \  factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44e2f03p.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      n match {\n\
    \        case n if n <= 3L => List(n)\n        case n if n%2 == 0L => List(2L*n)\n\
    \        case n if n%3 == 0L => List(3L*n)\n        case n if n % 5 == 0L => List(5L*n)\n\
    \        case _ =>\n          val n1 = n/2L\n          val n2 = n1*2L\n      \
    \    val n3 = n2*2L\n          val n4 = n3*3L\n          val n5 = n4*5L\n    \
    \      val n6 = n5*7L\n          List(n1, n2, n3, n4, n5, n6)\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwj8o9093.scala:31)\n\tat Problem.main(tmpwj8o9093.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n.toInt\
    \ == 1) return (List.fill(n.toInt)(1l.toLong).toList)\n        val factorizations\
    \ : Set[Long] = factorizations(n)\n        val factors : List[Long] = List(1l.toLong)\n\
    \        for (factor <- factorizations ; i <- 1 to factor) {\n            factors\
    \ ++= factorize(factor * i)\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplujj4nhu.scala:15:55\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e\
    [0m : \e[35mSet\e[0m[\e[35mLong\e[0m] = factorizations(n)\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    Boolean\n\e[31m   |\e[0m      \
    \                            Required: collection.mutable.Set[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplujj4nhu.scala:17:50 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (factor <- factorizations ; i\
    \ <- \e[31m1\e[0m to factor) {\n\e[31m\e[31m   |\e[0m                        \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Found:    (factor : Long)\n\e[31m   |\e[0m         \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplujj4nhu.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factors ++= factorize(factor * i)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value ++= is not\
    \ a member of List[Long] - did you mean factors.++?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorization\
    \ = mutable.ListBuffer.empty[Long]\n        for (factor <- 1l to n) factorization\
    \ += factor\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjzrz_fo.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        while(n > 1) {\n            val f\
    \ = math.ceil(math.sqrt(n))\n            factors += f\n            n /= f\n  \
    \      }\n        factors.toList.reverse.flatMap(f => List(f.toLong, 1))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqqxvq1j.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpuqqxvq1j.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= f\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val divisors\
    \ = List (2l,3l,5l,7l,11l,13l,17l,29l,37l,59l,83l,97l,127l)\n        val factors\
    \ = List.fill(n){ divisors.head }\n        factors.foldLeft(List[Long]())((acc,\
    \ el) => acc.filterNot(divisor => el % divisor == 0)).filterNot(x => x == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi5jbmau.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e\
    [0m = List.fill(n){ divisors.head }\n\e[31m\e[31m   |\e[0m                   \
    \             ^\e[0m\n\e[31m   |\e[0m                                Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val m = math.min(math.ceil(n/2),\
    \ 1000000l)\n        val factors = mutable.BitSet(m+1)\n        val numPrimes\
    \ = mutable.BitSet(m+1)\n        val primes = mutable.BitSet(m+1)\n\n        val\
    \ factorsPrime = mutable.BitSet(m+1)\n        val factorsPrime2 = mutable.BitSet(m+1)\n\
    \n        for (i <- 2l.until(m)) {\n            numPrimes(i) = 0\n           \
    \ primes(i) = false\n        }\n\n        for (i <- m+1 to 3l) factorsPrime(i)\
    \ = 0\n\n        for (i <- 3l to n-1l) {\n            if (numPrimes(i) > 0) {\n\
    \                if (primes(i)) {\n                    factorsPrime(factorsPrime.indexOf(i))\
    \ = 1\n                    factorsPrime2(factorsPrime2.indexOf(i)) = 1\n     \
    \           } else {\n                    if (factorsPrime(factorsPrime.indexOf(i))\
    \ < factorsPrime2(factorsPrime2.indexOf(i))) factorsPrime(factorsPrime.indexOf(i))\
    \ = 1\n                    else factorsPrime2(factorsPrime2.indexOf(i)) = 1\n\
    \                }\n                numPrimes(i) -= 1\n                primes(i)\
    \ = false\n            } else {\n                numPrimes(i) += 1\n         \
    \       if (primes(i)) {\n                    factorsPrime(factorsPrime.indexOf(i))\
    \ = 1\n                    factorsPrime2(factorsPrime2.indexOf(i)) = 1\n     \
    \           } else {\n                    if (factorsPrime(factorsPrime.indexOf(i))\
    \ < factorsPrime2(factorsPrime2.indexOf(i))) factorsPrime(factorsPrime.indexOf(i))\
    \ = 1\n                    else factorsPrime2(factorsPrime2.indexOf(i)) = 1\n\
    \                }\n            }\n        }\n\n        val result = factorsPrime.toList\n\
    \        result.zip(factorsPrime2).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ojxx_dc.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.BitSet(m+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ojxx_dc.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumPrimes\e[0m = mutable.BitSet(m+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_ojxx_dc.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.BitSet(m+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ojxx_dc.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorsPrime\e[0m = mutable.BitSet(m+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ojxx_dc.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorsPrime2\e[0m = mutable.BitSet(m+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ojxx_dc.scala:22:27 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <"
  stdout: ''
  timestamp: 1660028739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factor(n)\n        val product = factorization.product\n        val factorizationList\
    \ = factorization.toList\n        val primeFactors = factorizationList.reduceLeft((x,y)\
    \ => x * y)\n        primeFactors.toList.map(x => product / x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpif0om__c.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factor(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: factor\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var primes = List[Long]()\n        val factorization\
    \ = PrimeFactorization(n)\n        primes = factorization.getPrimes()\n      \
    \  factors = factorization.getFactors()\n        primes.map(n => n).foldLeft(List[Long]())\
    \ { (list, p) => list.zipWithIndex.foldLeft(List[Long]()) { (list, f) => \n  \
    \          (if (f % p == 0) list :+ p, f + 1l) \n        }}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vt3bo6o.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = PrimeFactorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: PrimeFactorization\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9vt3bo6o.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            (\e[33mif\e[0m (f % p == \e[31m0\e[0m) list\
    \ :+ p, f + \e[31m1l\e[0m) \n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of (Long @uncheckedVariance, Int), but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9vt3bo6o.scala:20:42\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            (\e[33mif\e[0m\
    \ (f % p == \e[31m0\e[0m) list :+ p, f + \e[31m1l\e[0m) \n\e[31m\e[31m   |\e[0m\
    \                                        ^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of (Long @uncheckedVariance, Int), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factorizeHelper(x\
    \ : int) : List[Long] = {\n            if (x % 2 == 0) List(x) else x match {\n\
    \                case x if x < 1 => List()\n                case x if (x % 2)\
    \ == 0 => (x :: factorizeHelper(x / 2))\n                case x => (x :: factorizeHelper((x\
    \ / 2)) ::: factorizeHelper((x % 2)))\n            }\n        }\n        factorizeHelper(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg876ry6.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36mfactorizeHelper\e[0m(\e\
    [36mx\e[0m : \e[35mint\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e\
    [31m   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val numSquares = 2l\n\n        while(n\
    \ / numSquares >= 1) {\n            val primes = scala.math.sqrt((numSquares *\
    \ numSquares - n)/numSquares)\n            for(prime <- primes until numSquares)\
    \ {\n                if(n % prime == 0) {\n                    factors += prime.toLong\n\
    \                    n /= prime\n                    break\n                }\n\
    \            }\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4sstu2p.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpd4sstu2p.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m(prime <- primes until numSquares)\
    \ {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue until is not a member of Double, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        for (d <- 2 until n / 2) {\n     \
    \       if (n % d == 0) factors += d\n        }\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8g7u9jn.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx8g7u9jn.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (d <- \e[31m2\e[0m until n / \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Long\n\e[31m   |\e[0m          \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val l = math.sqrt(n)\n\
    \        val l1 = l.toInt\n        val factorization = factors(n)\n        var\
    \ l = l\n        var k = 0\n        var f = factorization.toList\n        while(k\
    \ <= l1) {\n            l = l / 2\n            f = f -- factorization\n      \
    \      k = k + l\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm68aez8h.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e\
    [0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm68aez8h.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factors(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: factors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpm68aez8h.scala:21:14 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            l = l / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm68aez8h.scala:23:16\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            k = k + l\n\e[31m\e\
    [31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Double\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm68aez8h.scala:25:10 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value toList is not a member of Double - did you mean\
    \ l.toInt?\n5 errors found\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factor(n:\
    \ Long, list : List[Long]): List[Long] = {\n            if (n % 2 == 0) list::(n)\n\
    \            else {\n                val p = (2 * n) + 1l\n                val\
    \ q = math.ceil(p/2)\n                val plist = factor(p, list)\n          \
    \      val qlist = factor(q, plist)\n                plist ::: qlist\n       \
    \     }\n        }\n        val list = new mutable.ListBuffer[Long]()\n      \
    \  factor(n, list)\n        list.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcr_i9ds1.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) list::(n)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value :: is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcr_i9ds1.scala:20:35 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mqlist\e[0m = factor(q,\
    \ plist)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (q : Double)\n\e[31m  \
    \ |\e[0m                                   Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr_i9ds1.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val n = n.toInt\n\
    \        val factors = mutable.LinkedHashMap[Long, Int]()\n        for (i <- 2\
    \ to n) if (n % i == 0) factors.put(i, factors.getOrElse(i, 0) + 1l) \n      \
    \  factors.toList.sortBy(-_._1).map(_._2).toList \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv7m2_6ar.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpv7m2_6ar.scala:15:22 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.LinkedHashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = n.toString.toList.map(x => BigInt(x.toChar))\n            .reduceLeft(_ ++\
    \ _)\n            .toList.filter(_ > 1).map { x => BigInt(x.toChar) }\n      \
    \      .toList.map(x => x.pow(BigInt(factorization.toSet.count(_ == x)))).toList\n\
    \n        (factorization.map(x => x * BigInt(factorization.count(_ == x))).toList\
    \ ::: factorization.filter(!_ % _ > 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5niyyyto.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            .reduceLeft(_ ++ _)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                        value\
    \ ++ is not a member of BigInt\n1 error found\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Initialize\
    \ prime factorization to empty map\n        var factorization = scala.collection.mutable.Map[(Long,\
    \ Int), Long]()\n        // Find prime factors\n        var i = 1\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                i += 1\n    \
    \            var factors = factorization.getOrElseUpdate(i -> 1L, i -> 0L)\n \
    \               factors += i\n                factorization += (i -> factors)\n\
    \            }\n        }\n        factorization.filter {\n            case (k,\
    \ v) => v > 0\n        }.keys.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_4nhugm.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mvar\e[0m\
    \ \e[36mfactors\e[0m = factorization.getOrElseUpdate(i -> \e[31m1L\e[0m, i ->\
    \ \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                          Found:    (Int, Long)\n\e[31m   |\e[0m            \
    \                                       Required: (Long, Int)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_4nhugm.scala:21:69 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mvar\e[0m \e[36mfactors\e[0m = factorization.getOrElseUpdate(i\
    \ -> \e[31m1L\e[0m, i -> \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                                      ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                   Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mInt\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m                                                   Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_4nhugm.scala:23:34\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                factorization\
    \ += (i -> factors)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (Int, Long)\n\e\
    [31m   |\e[0m                                  Required: (\e[1m\e[32m(\e[0m\e\
    [1m\e[32mLong\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mInt\e[1m\e[32m)\e[0m, Long)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_4nhugm.scala:28:15\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        factorization.filter\
    \ {\n\e[31m27 |\e[0m            \e[33mcase\e[0m (k, v) => v > \e[31m0\e[0m\n\e\
    [31m28 |\e[0m        }.keys.toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = ListBuffer.empty[Long]\n        factorize(n, (factors, 0))\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvftzn8jq.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        factorize(n, (factors,\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      Found:    (Long, (scala.collection.mutable.ListBuffer[Long],\
    \ Int))\n\e[31m   |\e[0m      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factor(n:\
    \ Long) : List[Long] = {\n            if (n <= 1) List()\n            else {\n\
    \                var result = List();\n                var isPrime = true\n  \
    \              var numOfFactors = 1;\n                for (i <- 1 until n) {\n\
    \                    if (n % i == 0) {\n                        numOfFactors =\
    \ numOfFactors * i;\n                        isPrime = false\n               \
    \         break;\n                    }\n                }\n                if\
    \ (isPrime) {\n                    result :+= numOfFactors\n                }\n\
    \                for (i <- 1 until numOfFactors) {\n                    result\
    \ :+= i\n                }\n                result\n            }\n        }\n\
    \        factor(n)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1t165u2.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mfor\e[0m\
    \ (i <- \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                       \
    \           ^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1t165u2.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                        break;\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn1t165u2.scala:28:27 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                    result :+= numOfFactors\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not\
    \ a member of List[Nothing] - did you mean List[Nothing].:+?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn1t165u2.scala:31:27 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    result :+= i\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not a member of\
    \ List[Nothing] - did you mean List[Nothing].:+?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = mutable.List.empty[Long]\n        for(i <- 2 until n){\n            factors\
    \ ++= PrimeFactors.factor(n)\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_wc4o7ac.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_wc4o7ac.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factorize(i\
    \ : Int, l : List[Long]) : List[Long] = {\n            if (i >= 1 && i <= n) l\
    \ :+ n\n            else {\n                val fs = factorize(i.toInt, l :+ i.toLong)\n\
    \                for (i <- 0 until fs.size) {\n                    if (fs(i) <\
    \ fs.size) {\n                        factorize(fs(i), fs)\n                 \
    \   }\n                    else {\n                        fs(i)\n           \
    \         }\n                }\n            }\n        }\n        factorize(0,\
    \ List.empty[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqos239k.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        factorize(fs(i),\
    \ fs)\n\e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    Long\n\e[31m   |\e[0m  \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      def isPrime(p:\
    \ Long) : Boolean = {\n        for(q <- 2 to (p-1))\n          if(!(p%q == 0))\n\
    \            return false\n        return true\n      }\n      val factors = 2\
    \ to n\n      val isPrime2 = isPrime(factors.last.toLong)\n      var factorization\
    \ = factors.tail\n      if(isPrime2) {\n        factorization.last\n      }\n\
    \      else {\n        var isPrime3 = false\n        var factorization2 = factorization.tail\n\
    \        while(factorization2.nonEmpty && !isPrime3) {\n          if(factorization2.head.toLong\
    \ == factorization2.last.toLong) {\n            factorization2 :+ factorization2.head\n\
    \          }\n          else {\n            isPrime3 = isPrime(factorization2.head.toLong)\n\
    \            factorization2 :+ factorization2.head\n          }\n        }\n \
    \       if(isPrime3) {\n          factorization.last\n        }\n        else\
    \ {\n          factorization.reverse :+ factorization2.reverse :+ factorization2.head\n\
    \        }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgnkem969.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(q <- \e\
    [31m2\e[0m to (p-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m   \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgnkem969.scala:20:25 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m      \e[33mval\e[0m \e[36mfactors\e[0m = \e[31m2\e[0m to n\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgnkem969.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        factorization.last\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Int\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgnkem969.scala:39:24 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m          factorization.last\n\e[31m\e[31m   |\e[0m \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Found:    Int\n\e\
    [31m   |\e[0m          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgnkem969.scala:42:10 --------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m          factorization.reverse :+ factorization2.reverse\
    \ :+ factorization2.head\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Found:    IndexedSeq[Matchable]\n\e[31m   |\e[0m\
    \          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = Vector.empty[Long]\n        var primes = Vector.empty[Long]\n        var i\
    \ = 2\n        var j = 2\n        while ((i <= n)) {\n            var found =\
    \ false\n            while (!found && j < factors.size) {\n                if\
    \ ((n % j) == 0) {\n                    found = true\n                    i +=\
    \ 1\n                    factors += j\n                } else {\n            \
    \        j += 1\n                }\n            }\n            if (found) {\n\
    \                primes += i\n            }\n            i += 1\n        }\n \
    \       if (primes.size == factors.size) {\n            primes\n        } else\
    \ {\n            factors\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgga1r6n5.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    factors += j\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of Vector[Long] - did you mean Vector[Long].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgga1r6n5.scala:30:23 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                primes += i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of Vector[Long] - did you mean Vector[Long].!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgga1r6n5.scala:35:12 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            primes\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (primes : Vector[Long])\n\e\
    [31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgga1r6n5.scala:37:12 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            factors\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (factors : Vector[Long])\n\
    \e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val res =\
    \ new mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var p = 2l\n        while (p * p <= n) {\n            if ((n % (p * p)\
    \ == 0) || (p * p <= n && n % p == 0)) {\n                primes += p\n      \
    \          n /= p\n            }\n            else {\n                p += 1\n\
    \            }\n        }\n        primes.foreach { p =>\n            while (n\
    \ % p == 0) {\n                n /= p\n                res += p.toLong\n     \
    \       }\n        }\n        if (n > 1) {\n            res += n.toLong\n    \
    \    }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v80s_9c.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v80s_9c.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9v80s_9c.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                n /= p\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = ListBuffer[Long]()\n        var i : Long = 1\n        while (i <= n) {\n \
    \           i = 2\n            while (i * i <= n) {\n                i ++\n  \
    \          }\n            factors += i.toLong\n            i ++\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkzi887wt.scala:19:20 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                i ++\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkzi887wt.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            i ++\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def primeFactors(n\
    \ : Long) : List[Long] = {\n            if (n < 0) throw new IllegalArgumentException(\"\
    Negative value is not a prime number.\");\n            val factorization = Vector.empty[Long]\n\
    \            var divisor : Long = 1\n            while (divisor <= n) {\n    \
    \            if (n % divisor == 0) {\n                    factorization += divisor\n\
    \                    divisor += 1\n                } else {\n                \
    \    divisor = divisor + 1\n                }\n            }\n            if (n\
    \ > 2) {\n                factorization += 2\n            }\n            factorization\n\
    \        }\n        val factorization = primeFactors(n)\n        if (factorization.isEmpty)\
    \ List(n) else {\n            val factorizedFactorization = factorization.map(n\
    \ => n * (factorization.count(_ == n)))\n            factorizedFactorization.sorted\
    \ ::: List(factorization.last)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp59rdj_mt.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    factorization += divisor\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +=\
    \ is not a member of Vector[Long] - did you mean factorization.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp59rdj_mt.scala:27:30 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                factorization += \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is\
    \ not a member of Vector[Long] - did you mean factorization.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp59rdj_mt.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            factorization\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (factorization\
    \ : Vector[Long])\n\e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorizations\
    \ : List[Long] = List();\n        var factors : List[Long] = List();\n\n     \
    \   // Find prime factors\n        var divisor : Long = n\n        do {\n    \
    \        divisor = divisor * 2 \n        } while (divisor <= n)\n\n        factorizations\
    \ = primes(divisor)\n        factors = List(divisor)\n\n        var isPrime :\
    \ Boolean = false;\n\n        for(divisor <- factorizations) {\n            divisor\
    \ += divisor\n            if (n % divisor == 0) {\n                isPrime = true\n\
    \            }\n        }\n\n        if (isPrime) factors :: factorizations;\n\
    \        else factorizations;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu14or_xg.scala:19:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdo\e[0m {\n\e[31m\e[31m   |\e[0m      \
    \  ^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'do' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu14or_xg.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        factorizations = primes(divisor)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           Not found: primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu14or_xg.scala:29:20 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            divisor += divisor\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ divisor.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu14or_xg.scala:35:21\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m (isPrime)\
    \ factors :: factorizations;\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    (factors : List[Long])\n\e\
    [31m   |\e[0m                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // If n is\
    \ already factored, then return it\n        if ((n % 2) == 0) {\n            return\
    \ (List(n))\n        }\n        // If n is prime, then return its factors\n  \
    \      if (n == 3l) {\n            return (List(2l.toLong))\n        }\n     \
    \   // Find smallest factor\n        val smallerFactors = n % smallerFactor(n).toLong\n\
    \        val smallerFactorIndex = smallerFactors.toInt\n        // Find second\
    \ smallest factor\n        val smallerFactors2 = smallerFactors % smallerFactor(n).toLong\n\
    \        val smallerFactorIndex2 = smallerFactors2.toInt\n\n        // Add all\
    \ factors of n except smallest factor to list\n        val factors = List(n).toList.filter((_\
    \ % smallerFactors) != 0)\n        // Add smallest factor to list as many times\
    \ as it appeared in factorization\n        val factors2 = factors.map { x => x\
    \ + (smallerFactorIndex + smallerFactorIndex2) }\n        // Return result\n \
    \       return factors2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9x6n921d.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msmallerFactors\e[0m = n\
    \ % smallerFactor(n).toLong\n\e[31m\e[31m   |\e[0m                           \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: smallerFactor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9x6n921d.scala:30:45\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e\
    [0m \e[36mfactors\e[0m = List(n).toList.filter((_ % smallerFactors) != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => _$1 % smallerFactors.\n2 errors found\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primeFactorsCache\
    \ = mutable.HashMap[Long, List[Long]]()\n        factorizeInternal(n, primeFactorsCache)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiph5mtn.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCache\e[0m =\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiph5mtn.scala:15:8 -------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorizeInternal(n, primeFactorsCache)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ factorizeInternal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long](2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l,\
    \ 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l,\
    \ 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l,\
    \ 191l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l,\
    \ 269l, 271l, 277l, 281l, 283l, 293l, 297l, 303l, 307l, 311l, 313l, 317l, 331l,\
    \ 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l,\
    \ 419l, 421l, 431l, 437l, 439l, 463l, 467l, 479l, 487l, 493l, 499l, 503l, 509l,\
    \ 521l, 523l, 539l, 541l, 547l, 557l, 561l, 563l, 569l, 573l, 587l, 597l, 601l,\
    \ 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l,\
    \ 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l, 767l,\
    \ 773l, 787l, 797l, 803l, 809l, 811l, 821l, 823l, 827l, 829l, 839l, 853l, 857l,\
    \ 859l, 863l, 877l, 881l, 883l, 887l, 907l, 911l, 919l, 929l, 937l, 941l, 947l,\
    \ 953l, 967l, 971l, 977l, 983l, 991l, 997l)\n        while(n > 1) {\n        \
    \    var d = 2l\n            while(d * d <= n && factors.contains(d)) {\n    \
    \            d += 1\n            }\n            factors = factors :+ d\n     \
    \       n -= d\n        }\n        factors.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpknwop7x0.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n -= d\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long - did\
    \ you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factorizeUtil(n\
    \ : Long, factors : mutable.Set[Long]) : List[Long] = {\n            if (n ==\
    \ 1l) List(1l) else if (factors contains n) List(factors.toList) else if (n %\
    \ 2 == 0) factorizeUtil(n / 2l, factors + 2l) else factorizeUtil(n / 3l, factors\
    \ + 2l) :: factorizeUtil(n / 3l, factors + 3l)\n        }\n\n        factorizeUtil(n,\
    \ mutable.Set[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdi4b6m0.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36mfactorizeUtil\e[0m(\e[36mn\e\
    [0m : \e[35mLong\e[0m, \e[36mfactors\e[0m : mutable.Set[\e[35mLong\e[0m]) : \e\
    [35mList\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                    \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkdi4b6m0.scala:15:159 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (n == \e[31m1l\e[0m) List(\e\
    [31m1l\e[0m) \e[33melse\e[0m \e[33mif\e[0m (factors contains n) List(factors.toList)\
    \ \e[33melse\e[0m \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) factorizeUtil(n\
    \ / \e[31m2l\e[0m, factors + \e[31m2l\e[0m) \e[33melse\e[0m factorizeUtil(n /\
    \ \e[31m3l\e[0m, factors + \e[31m2l\e[0m) :: factorizeUtil(n / \e[31m3l\e[0m,\
    \ factors + \e[31m3l\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m                                                    Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdi4b6m0.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        factorizeUtil(n, mutable.Set[\e[35mLong\e[0m]())\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.Set()\n        for(i <- 2 to n) while(n % i == 0) factors.add(i)\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jsk_kgw.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.Set()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3jsk_kgw.scala:15:22 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n) \e[33mwhile\e\
    [0m(n % i == \e[31m0\e[0m) factors.add(i)\n\e[31m\e[31m   |\e[0m             \
    \         ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\e\
    [31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        for(i = 2; i <= sqrt(n); i += 1) {\n \
    \           for(cnt <- n / i if cnt > 1) { \n                list += i * cnt.toLong\n\
    \                n -= i * cnt\n            }\n        }\n        if (n > 1) {\n\
    \            list += n.toLong\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0u9j56ej.scala:15:14 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i = \e[31m2\e[0m; i <= sqrt(n);\
    \ i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0u9j56ej.scala:15:31 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m(i = \e[31m2\e[0m; i <= sqrt(n); i += \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but ';' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp0u9j56ej.scala:15:39 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i = \e[31m2\e[0m; i <= sqrt(n);\
    \ i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0u9j56ej.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0u9j56ej.scala:15:17\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m2\e[0m; i <= sqrt(n); i += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \               ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.con"
  stdout: ''
  timestamp: 1660028751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = new mutable.ListBuffer[Long]()\n        while(n > 1) {\n            var current\
    \ = 3\n            while(current != n) {\n                if(n % current == 0)\
    \ {\n                    n /= current\n                    factors += current\n\
    \                    break\n                }\n                current += 2\n\
    \            }\n            if(current > 1) {\n                factors += current\n\
    \            }\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_94w74d.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq_94w74d.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    n /=\
    \ current\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value /= is not a member of Long - did you mean n.!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_94w74d.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        require(n\
    \ >= 2l, s\"'factorize' requires integer greater than equal to 2.\")\n       \
    \ // To find factors, we first use Sieve of Eratosthenes\n        // To see how\
    \ it works, read here: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n \
    \       // In short, first find primes less than or equal to n\n        // Then\
    \ filter out composite numbers\n        var primes : (Iterable[Int], Iterable[Int])\
    \ = (2 to n).filter { x =>\n            for (y <- 2 until x if x % y == 0) yield\
    \ y\n        }\n        val factorization = primes.foldLeft(List(1l))((acc, x)\
    \ => {\n            val current = acc.last\n            val newFactorization =\
    \ List(x * current)\n            val newPrimes = primes.filter { y =>\n      \
    \          y > x\n            }\n            (newFactorization :: newPrimes, newFactorization\
    \ :: acc)\n        })\n        factorization.reverse.flatMap(_.toList).filter(i\
    \ => n % i == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplc_9sv_h.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e\
    [0m : (\e[35mIterable\e[0m[\e[35mInt\e[0m], \e[35mIterable\e[0m[\e[35mInt\e[0m])\
    \ = (\e[31m2\e[0m to n).filter { \e[36mx\e[0m =>\n\e[31m\e[31m   |\e[0m      \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplc_9sv_h.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (y\
    \ <- \e[31m2\e[0m until x \e[33mif\e[0m x % y == \e[31m0\e[0m) \e[33myield\e[0m\
    \ y\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    IndexedSeq[Int]\n\e[31m   |\e[0m   \
    \         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmplc_9sv_h.scala:22:35 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = primes.foldLeft(List(\e[31m1l\e\
    [0m))((\e[36macc\e[0m, \e[36mx\e[0m) => {\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foldLeft is not a member\
    \ of (collection.mutable.Iterable[Int], collection.mutable.Iterable[Int])\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = mutable.MutableList[Long]()\n        var divisor = 2\n        while (n > 0)\
    \ {\n            if (n % divisor == 0) {\n                factors += divisor\n\
    \                n /= divisor\n            } else {\n                divisor +=\
    \ 1\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2jzcnol.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn2jzcnol.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= divisor\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def isPrime(n:\
    \ Long) = {\n            if (n==1 || n==2) true\n            else {\n        \
    \        val div: BigInt = BigInt(n) / 2\n                var remainder: Long\
    \ = 1\n                for(i <- 1 to div.toInt) {\n                    remainder\
    \ = div - BigInt(i.toDouble)\n                    if (remainder == 0) return false\n\
    \                }\n                true\n            }\n        }\n        def\
    \ factorizeIter(n: Long): List[Long] = { \n            var factors: List[Long]\
    \ = List.empty[Long]\n            val sqrt: BigInt = BigInt(math.pow(n.toDouble,0.5))\n\
    \            for(i <- 1 to sqrt) {\n                val root: BigInt = BigInt(n.toDouble)\
    \ - BigInt(i.toDouble)\n                val p: Long = if (isPrime(root)) 1 \n\
    \                else if (isPrime(root*root)) root\n                else root\
    \ * root\n                if (p!=n)\n                    factors ::= p\n     \
    \       }\n            factors\n        }\n        factorizeIter(n) match {\n\
    \            case Nil => Nil\n            case list => list.sortBy(_.toString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpepbh65k7.scala:20:38 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    remainder = div - BigInt(i.toDouble)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mobject\e[0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger):\
    \ BigInt\n\e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x:\
    \ String): BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m\
    \ (x: Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m\
    \ (i: Int): BigInt\n\e[31m   |\e[0mmatch arguments ((i.toDouble : => Double))\n\
    \e[31m\e[31m-- [E089] Syntax Error: /tmp/tmpepbh65k7.scala:21:40 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mmethod\e\
    [0m \e[35misPrime\e[0m has a return statement; it needs a result type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpepbh65k7.scala:28:31 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36msqrt\e[0m: \e[35mBigInt\e\
    [0m = BigInt(math.pow(n.toDouble,\e[31m0.5\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mBigInt\e\
    [0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\e[31m   |\e\
    [0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String): BigInt\n\e[31m\
    \   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (bitlength:\
    \ Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (signum:\
    \ Int, magnitude: Array[Byte]): BigInt\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val product\
    \ = n.toLong\n        var factors = List[Long](1l)\n        while (n > 1) {\n\
    \            n /= product\n            factors ::= product\n        }\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihg5k296.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= product\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var primeCount = 1\n        while (n>1)\
    \ {\n            if (n % primeCount == 0) {\n                factorization +=\
    \ primeCount\n                n /= primeCount\n            }\n            else\
    \ {\n                primeCount += 1\n            }\n        }\n        if (n==1)\
    \ { factorization += n.toLong }\n        factorization.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdunlyvwu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdunlyvwu.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= primeCount\n\e[31m\e[31m   |\e[0m\
    \                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Write\
    \ your code here\n        val divisors = mutable.ArrayBuffer.empty[Long]\n   \
    \     var i : Int = 0\n        val factors = new mutable.ArrayBuffer[Long]\n \
    \       while(divisors.length <= n) {\n            val curr = divisors(i)\n  \
    \          val factor = 1\n            while (n > curr && n % curr == 0) factor\
    \ += 1\n            if (factor > 1) {\n                divisors(i) += factor\n\
    \                factors += factor.toLong\n                n /= curr\n       \
    \         i += 1\n            }\n        }\n        factors.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf2a4rua.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwf2a4rua.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwf2a4rua.scala:21:53\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mwhile\e\
    [0m (n > curr && n % curr == \e[31m0\e[0m) factor += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value += is not a member of Int - did you mean factor.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwf2a4rua.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                n /= curr\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // check\
    \ if factorization is possible.\n        if (n==1) return List()\n        // find\
    \ factors in range [2, sqrt(n)]\n        val factors = List.range(2, math.sqrt(n).toInt)\n\
    \        // if n is not evenly divisible by factors then return factors only\n\
    \        if (n % factors.last != 0) {\n            return factors\n        }\n\
    \        // calculate list of prime factors\n        val factorization = factors.foldLeft((List[Long](),\
    \ List[Long]()))((x, y) => {\n            val factorization = x._2.filter (p =>\
    \ y % p == 0)\n            (factorization :+ y, factorization.filter (p => y %\
    \ p == 0))\n        })\n        // rearrange factorization list to match original\
    \ input order.\n        factorization.foldRight(List())((x, y) => x ++ y)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptpu09n5w.scala:20:19\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mreturn\e[0m\
    \ factors\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Found:    (factors : List[Int])\n\e[31m   |\e[0m       \
    \            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptpu09n5w.scala:28:22 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        factorization.foldRight(List())((\e[36mx\e[0m, \e[36my\e[0m) => x ++\
    \ y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value foldRight is not a member of (List[Long], List[Long])\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer(2)\n\n        for(i <- 2 to Math.ceil(n/2))\n         \
    \   if(!n % i)\n                factorization.add(i)\n\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5q_y95d.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5q_y95d.scala:16:31 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to Math.ceil(n/\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    Double\n\e[31m   |\e[0m       \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx5q_y95d.scala:17:15 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mif\e[0m(!n % i)\n\e[31m\e[31m   |\e[0m               ^^\e\
    [0m\n\e[31m   |\e[0m         value unary_! is not a member of Long - did you mean\
    \ n.unary_+?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = []\n        for (i = 2l to Math.sqrt(n).toLong by 2) {\n            if (n\
    \ % i == 0) {\n                factors = factors ++ List(i.toLong)\n         \
    \       while (n % i == 0) {\n                    n /= i\n                }\n\
    \            }\n        }\n        n match {\n            case 0 => factors\n\
    \            case _ => factors ++ List(n.toLong)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwi5df4i.scala:14:23 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmppwi5df4i.scala:15:0 ----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m (i = \e[31m2l\e[0m to Math.sqrt(n).toLong by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but\
    \ 'end of statement' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwi5df4i.scala:15:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m2l\e[0m to Math.sqrt(n).toLong by \e[31m2\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected, but\
    \ '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwi5df4i.scala:15:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m2l\e[0m to Math.sqrt(n).toLong by \e[31m2\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m                                            '<-' expected, but '{' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmppwi5df4i.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwi5df4i.scala:22:9\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def makefactors(n\
    \ : Long) : List[Long] = {\n            val factors = mutable.ListBuffer[Long]()\n\
    \            while (n > 1) {\n                if (n % 2 == 0) {\n            \
    \        factors += 2\n                    n /= 2\n                } else {\n\
    \                    n /= 2\n                    factors += n\n              \
    \  }\n            }\n            factors.toList\n        }\n        return makefactors(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxffbimlt.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxffbimlt.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    n /= \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxffbimlt.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                    n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not a member\
    \ of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def findDivisors(n\
    \ : Long) : List[Long] = {\n            var divisors = List();\n            val\
    \ q = math.ceil(n/2);\n            while (q > 1) {\n                if (n % q\
    \ == 0) {\n                    divisors ::= q.toLong;\n                    n =\
    \ q;\n                } else {\n                    q >>= 1;\n               \
    \ }\n            }\n            if (n != 1l) divisors ::= n.toLong;\n        \
    \    divisors\n        }\n\n        def findFactors(n : Long) : List[Long] = {\n\
    \            var factors = List();\n            var q = n-1;\n            while\
    \ (q > 1) {\n                if (n % q == 0) {\n                    factors ::=\
    \ q.toLong;\n                    n = q;\n                } else {\n          \
    \          q >>= 1;\n                }\n            }\n            if (n != 1l)\
    \ factors ::= n.toLong;\n            factors\n        }\n        if (n%2 == 1l)\
    \ List(n.toLong)\n        else if (n % 3 == 0) List(2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong)\n        else if (n % 5 == 0) List(3l.toLong, 5l.toLong)\n      \
    \  else List(2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z0uyii3.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    divisors ::= q.toLong;\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is\
    \ not a member of List[Nothing] - did you mean List[Nothing].::?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_z0uyii3.scala:20:24 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    n = q;\n\e[31m\e[31m   |\e[0m   \
    \                     ^\e[0m\n\e[31m   |\e[0m                        Found:  \
    \  (q : Double)\n\e[31m   |\e[0m                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z0uyii3.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    q >>= \e[31m1\e[0m;\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ >>= is not a member of Double - did you mean q.>=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_z0uyii3.scala:25:34 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mif\e[0m (n != \e[31m1l\e[0m) divisors ::= n.toLong;\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue ::= is not a member of List[Nothing] - did you mean List[Nothing].::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z0uyii3.scala:34:28 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    factors ::= q.toLong;\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[Nothing] - did you mean List[Nothing].::?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp_z0uyii3.scala:35:22 -----------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m                    n = q;\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z0uyii3.scala:40:33\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            "
  stdout: ''
  timestamp: 1660028758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = ListBuffer[Long]()\n        var i = 2\n        while (i <= Math.sqrt(n)) {\n\
    \            if (n % i == 0) {\n                factors += i.toLong\n        \
    \        while (n % i == 0) {\n                    factors += i.toLong\n     \
    \               n /= i\n                }\n            }\n            i += 1\n\
    \        }\n        factors.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxdy5fuq7.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    n /= i\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not\
    \ a member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n < 2L)\
    \ Nil\n        else {\n            val factors = mutable.List.fill(n.toInt - 1)(2L)\n\
    \            val i = 3L\n            while (i < n.toInt) {\n                val\
    \ r = n % i\n                factors(i) += 1\n                n /= i\n       \
    \         if (r != 0) i += 1\n            }\n            factors.toList\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphyavzucp.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = mutable.List.fill(n.toInt\
    \ - \e[31m1\e[0m)(\e[31m2L\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphyavzucp.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphyavzucp.scala:22:30 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mif\e[0m (r != \e[31m0\e[0m) i += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m    \
    \               value += is not a member of Long - did you mean i.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ : mutable.Set[Long] = mutable.Set[Long]()\n        val divisors : mutable.Map[Long,\
    \ Int] = mutable.Map.empty[Long, Int]\n\n        def findDivisors(x : Long) :\
    \ Unit = {\n            divisors(x) = divisors.getOrElse(x, 0) + 1\n         \
    \   if (divisors(x) > n) {\n                return\n            }\n\n        \
    \    if (n / x == x) {\n                factorizations.add(x)\n            }\n\
    \            if (x > 1) {\n                for (i <- divisors.keys) {\n      \
    \              if (divisors(i) > n) {\n                        continue\n    \
    \                }\n\n                    if (x % i == 0) {\n                \
    \        divisors(i) = divisors.getOrElse(i, 0) + 1\n                        findDivisors(x\
    \ / i)\n                        divisors(i) = divisors.getOrElse(i, 0) - 1\n \
    \                   }\n                }\n            }\n        }\n\n       \
    \ divisors(n) = 1\n        findDivisors(n)\n        factorizations.toList.sortWith(_\
    \ < _).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o3iywh_.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o3iywh_.scala:14:49\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizations\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o3iywh_.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisors\e[0m : mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o3iywh_.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ : List[Long] = for (i <- 2l until n) yield {\n            val factorization\
    \ = factorizations(i)\n            if (factorization.isDefined) {\n          \
    \      factorization.get\n            } else {\n                val result = factorizations(i\
    \ - 1)\n                result.getOrElse(1l)\n            }\n        }\n     \
    \   factorizations.filter(_ > 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplfr93hh4.scala:15:47\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mfactorization\e[0m = factorizations(i)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (i : Long)\n\e[31m   |\e[0m          \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplfr93hh4.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (factorization.isDefined) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value isDefined is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmplfr93hh4.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                factorization.get\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value get\
    \ is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplfr93hh4.scala:19:44\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m\
    \ \e[36mresult\e[0m = factorizations(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                       Found:    Long\n\e[31m   |\e[0m      \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplfr93hh4.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.getOrElse(\e[31m1l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value getOrElse is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660028760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors:\
    \ mutable.Set[Long] = mutable.Set()\n        for(i <- 1 to n/2) {\n          \
    \  for(j <- 2 to n/i) {\n                if(i*j == n) {\n                    factors\
    \ += (i.toLong)\n                    factors += (j.toLong)\n                 \
    \   factors += (i*j.toLong)\n                }\n            }\n        }\n   \
    \     factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jskpo9l.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jskpo9l.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jskpo9l.scala:15:22 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n/\e[31m2\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jskpo9l.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(j <- \e[31m2\e[0m to n/i)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        def isPrime(x : Long) : Boolean = x.isPrime\
    \ && x != 1 && x != n\n        for(n <- 2 until n) if(isPrime(n)) {\n        \
    \    val m = n / 2\n            while(m != 1) { \n                if(n % m ==\
    \ 0){ factors += m; break}\n                m += 2\n            }\n        }\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ln7lm9w.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8ln7lm9w.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mx\e[0m\
    \ : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = x.isPrime && x != \e[31m1\e[0m &&\
    \ x != n\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value isPrime is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ln7lm9w.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(n <- \e\
    [31m2\e[0m until n) \e[33mif\e[0m(isPrime(n)) {\n\e[31m\e[31m   |\e[0m       \
    \                  ^\e[0m\n\e[31m   |\e[0m                         Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ln7lm9w.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m(n % m == \e[31m0\e[0m){\
    \ factors += m; break}\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8ln7lm9w.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                m += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean m.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorization:\
    \ List[Long] = Nil\n        var currentFactor = n.toInt\n        var prevFactor\
    \ = 1L\n        while(currentFactor > 1L) {\n            if(prevFactor % currentFactor\
    \ == 0) {\n                factorization :+= currentFactor\n                prevFactor\
    \ += 1\n                currentFactor /= currentFactor\n            } else {\n\
    \                prevFactor += 1\n                currentFactor /= currentFactor\n\
    \            }\n        }\n        factorization\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12dhbos5.scala:30)\n\tat Problem.main(tmp12dhbos5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var primeList\
    \ = List[Long]()\n        var nextPrime = 2\n        while (n % nextPrime != 0)\
    \ {\n            primeList :+= nextPrime\n            n /= nextPrime\n       \
    \     nextPrime = primeList._2\n        }\n        primeList :+= n\n        primeList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwj6i1bl.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= nextPrime\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwj6i1bl.scala:19:34\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            nextPrime = primeList._2\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value _2 is not a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n      val a = scala.math.BigInt(n)\n\
    \      val b = scala.math.BigInt(2)\n      val factors = new scala.collection.mutable.HashSet[Long]()\n\
    \      while (!factors.isEmpty) {\n        val c = scala.math.BigInt(a)\n    \
    \    if (c > 1) factors += c\n        a += b\n      }\n      factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9caa9w4g.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = scala.math.BigInt(a)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e\
    [0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\
    \e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String):\
    \ BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m\
    \   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e\
    [31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i:\
    \ Int): BigInt\n\e[31m   |\e[0mmatch arguments ((a : BigInt))\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9caa9w4g.scala:20:10 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        a += b\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        value += is not a member of BigInt - did you mean a.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.HashSet[Long]()\n        for(i <- 2 to n){\n            if(n % i ==\
    \ 0){\n                factors += i\n                n /= i\n            }\n \
    \       }\n        n match {\n            case 0 => factors\n            case\
    \ i => factors ++ factorize(i)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz74eocys.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz74eocys.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz74eocys.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = scala.collection.mutable.HashMap[Int, Int]()\n        val primes = scala.collection.mutable.HashSet[Long]()\n\
    \        var i = 1\n        while(i <= n) {\n            var x = 1\n         \
    \   while(n % x == 0) {\n                x += 1\n            }\n            primes\
    \ += x\n            n /= x\n            if(factorization.contains(x)) {\n    \
    \            factorization.updated(x, factorization.get(x))\n            } else\
    \ {\n                factorization.updated(x, 1)\n            }\n            i\
    \ += 1\n        }\n        val primeFactors = primes.toList.map(x => x * factorization.get(x))\n\
    \        primeFactors.reverse //reverse list to match requirements\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeeuggb_3.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n /= x\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeeuggb_3.scala:31:72\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e\
    [0m = primes.toList.map(\e[36mx\e[0m => x * factorization.get(x))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^\e[0m\n\e[31m   |\e[0m                                                \
    \    Found:    (x : Long)\n\e[31m   |\e[0m                                   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpeeuggb_3.scala:31:52 -----------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = primes.toList.map(\e\
    [36mx\e[0m => x * factorization.get(x))\n\e[31m\e[31m   |\e[0m               \
    \                                   ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (Option[Int])\n3 errors found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val d = n.toInt\n\
    \        val list = Array.fill(d)(2) // List contains pairs of numbers (prime\
    \ factor, number of times it appeared in factorization)\n        val factorization\
    \ = scala.collection.mutable.ArrayBuffer.empty[List[Long]]\n        for(d <- 2\
    \ until d) {\n            val p = math.gcd(d, n) \n            if (p != 1) {\n\
    \                list.updated(p, 1l) //update number of times that appeared in\
    \ factorization\n                factorization += List(d -> 1l) //update factorization\
    \ list with 1 time\n                n = math.gcd(n, p)\n            }\n      \
    \  }\n        if (n > 1L) list.updated(n, 1l) //update number of times that appeared\
    \ in factorization\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxeumyz9.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mp\e[0m = math.gcd(d,\
    \ n) \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value gcd is not a member of math\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcxeumyz9.scala:21:38 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                factorization += List(d -> \e[31m1l\e[0m)\
    \ \e[34m//update factorization list with 1 time\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                           Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e[1m\e\
    [31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m            \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcxeumyz9.scala:22:25 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                n = math.gcd(n, p)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value gcd\
    \ is not a member of math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxeumyz9.scala:25:33\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (n > \e\
    [31m1L\e[0m) list.updated(n, \e[31m1l\e[0m) \e[34m//update number of times that\
    \ appeared in factorization\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                                 Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxeumyz9.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        factorization.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    List[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explai"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = new mutable.HashMap[Long, Int]()\n        var divisor = n\n        var divisorPrime\
    \ = divisor\n        val factor = new mutable.ListBuffer[Long]()\n        while\
    \ (divisor > 0) {\n            divisor % divisorPrime match {\n              \
    \  case 0 => divisorPrime = divisorPrime.toInt\n                case _ => divisorPrime\
    \ = divisorPrime / 2\n            }\n            divisor match {\n           \
    \     case 0 => divisorPrime * divisor match {\n                    case 0 =>\
    \ factors += (divisorPrime -> divisor.toInt)\n                    case 1 => factors\
    \ += (divisorPrime -> 1)\n                    case _ => factors += (divisorPrime\
    \ -> divisor.toInt)\n                }\n                case _ => factors += (divisorPrime\
    \ -> divisor.toInt)\n            }\n        }\n        factor.toList.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjh19irkh.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjh19irkh.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactor\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors:\
    \ mutable.MutableList[Long] = mutable.MutableList[Long]()\n        val primes\
    \ = Primes.primes\n        val primeFactorizations : mutable.MutableSet[Long]\
    \ = mutable.MutableSet[Long]()\n\n        // To avoid calculating same factors\
    \ multiple times\n        var factorFound = false\n\n        for (p <- primes)\
    \ {\n            val primeFactorization = n.toPrime / p\n            if (primeFactorization.toLong\
    \ == n) {\n                // If factorization is equal to original number\n \
    \               factorFound = true\n            } else {\n                // If\
    \ factorization is not equal to original number\n                primeFactorizations.union(primeFactorization)\n\
    \            }\n        }\n\n        if (factorFound) {\n            for (p <-\
    \ primes) {\n                // If factorization is equal to original number\n\
    \                if (primeFactorizations.contains(p.toLong))\n               \
    \     continue\n                factors.union(p.toLong * primeFactorizations.count(_\
    \ == p.toLong))\n            }\n        } else {\n            for (p <- primes)\
    \ {\n                // If factorization is not equal to original number\n   \
    \             if (!primeFactorizations.contains(p.toLong))\n                 \
    \   continue\n                factors.union(p.toLong * primeFactorizations.count(_\
    \ == p.toLong))\n            }\n        }\n\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo92txy50.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m: mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo92txy50.scala:14:49\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m: mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo92txy50.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = Primes.primes\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ Primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo92txy50.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactorizations\e[0m : mutable.MutableSet[\e[35mLong\e[0m] = mutable.MutableSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo92txy50.scala:16:61 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ : mutable.MutableSet[\e[35mLong\e[0m] = mutable.MutableSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val n = n.toInt\n\
    \        // If input is 1 then just return it\n        if (n == 1) List(n)\n \
    \       // If input is prime number then return all its factors\n        else\
    \ if (primeCheck(n)) n\n        else {\n            var tempFactors = List(1)\n\
    \            // Iterate through all odd numbers except n for factorization\n \
    \           for (i <- 2 to n by 2) {\n                // If input number is divisible\
    \ by i then put it in list\n                if (n % i == 0) tempFactors = tempFactors\
    \ :+ i\n            }\n            // Return factors of n which appeared only\
    \ once\n            list(tempFactors)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy4krrw5o.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy4krrw5o.scala:18:17 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (primeCheck(n)) n\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Not found: primeCheck\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy4krrw5o.scala:27:12 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            list(tempFactors)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: list\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val sqrt = Math.sqrt(n)\n\
    \        var nRemainder = n\n\n        for(d <- 2 to sqrt) {\n            if(n\
    \ % d == 0) {\n                factors += d\n                n /= d\n        \
    \        nRemainder -= 1\n            }\n        }\n        factors ++= 1 to nRemainder\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp986dyjbv.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(d <- \e\
    [31m2\e[0m to sqrt) {\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    (sqrt : Double)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp986dyjbv.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                n /= d\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp986dyjbv.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        factors ++= \e[31m1\e\
    [0m to nRemainder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (nRemainder : Long)\n\e\
    [31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorization\
    \ = List[Long](1l)\n        for(i <- 2 to Math.sqrt(n).toInt by 2)\n         \
    \   factorization :+= if (n % i == 0) i else n / i\n        factorization\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgv843v13.scala:16:30 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorization :+= \e[33mif\e[0m (n % i ==\
    \ \e[31m0\e[0m) i \e[33melse\e[0m n / i\n\e[31m\e[31m   |\e[0m               \
    \               ^^\e[0m\n\e[31m   |\e[0m                              expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgv843v13.scala:16:26 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            factorization :+= \e[33mif\e[0m (n % i == \e[31m0\e[0m) i \e[33melse\e\
    [0m n / i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value :+= is not a member of List[Long] - did you mean List[Long].:+?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // TODO:\
    \ add checking if n is prime - not included now\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val maxFactor = 2L\n        while (n > 1L) {\n            if ((n % maxFactor)\
    \ == 0) {\n                factors += maxFactor\n                n /= maxFactor\n\
    \            } else {\n                maxFactor += 1\n            }\n       \
    \ }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoyo7fnhc.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpoyo7fnhc.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                n /= maxFactor\n\e[31m\e[31m   |\e[0m\
    \                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyo7fnhc.scala:22:26\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxFactor\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value += is not a member of Long - did you mean maxFactor.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors:\
    \ mutable.HashMap[Long, Int] = mutable.HashMap()\n        for(i <- 2l to n.toLong)\
    \ {\n            var p = i\n            while(true) {\n                if(!factors.contains(p))\
    \ {\n                    factors += (p -> 1l)\n                    break\n   \
    \             }\n                p += 1\n            }\n        }\n        var\
    \ factorization = factors.toSeq.sortBy(_._1).reverse\n        var factorizationList\
    \ = List[Long]()\n        for(i <- 0 to factorization.length-1) {\n          \
    \  var f = factorization.take(i).toList\n            factorizationList = factorizationList\
    \ :+ f(0)*f.drop(1).sum\n        }\n        factorizationList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvff7m5u.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m: mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.HashMap()\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvff7m5u.scala:14:50\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mfactors\e[0m: mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m] = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvff7m5u.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def getFactors(x\
    \ : Long) : List[Long] = {\n            val factorizationsOfx = factorizations(x)\n\
    \            var sumOfFactors = 0\n            for (i <- factorizationsOfx.indices)\
    \ {\n                var cur = factorizationsOfx(i)\n                while(cur.length\
    \ > 1) {\n                    cur = factorizationsOfx(cur.filter(_ < x))\n   \
    \                 sumOfFactors += cur.length\n                }\n            }\n\
    \            val list = List(1l.toLong, sumOfFactors.toLong)\n            list.filter(_\
    \ != 0)\n        }\n        val sumOfFactors = n.toLong * getFactors(n).sum\n\
    \        sumOfFactors.toLong * getFactors(sumOfFactors).takeWhile(_ != 0).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpckb3t6yq.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mfactorizationsOfx\e\
    [0m = factorizations(x)\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \ Not found: factorizations\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpckb3t6yq.scala:28:28 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        sumOfFactors.toLong * getFactors(sumOfFactors).takeWhile(_ !=\
    \ \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((List[Long]#reverse : => List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = primeFactors(n)\n        factors.foreach(x => factors.remove(x))\n       \
    \ return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzctvvzaf.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = primeFactors(n)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = mutable.ArrayBuffer(2)\n        var k = 3\n        while(primes.size + k <\
    \ primes.length && k <= n){\n            while (k*k < n) {\n                primes\
    \ += k\n                k += 1\n            }\n            k += 2\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpur89o8yf.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var nPrimeFactors\
    \ = n\n        var factorization: List[Long] = List[Long]()\n        while (nPrimeFactors\
    \ > 1) {\n            factorization = factorization:+ nPrimeFactors\n        \
    \    nPrimeFactors /= 2\n        }\n        factorization = factorization:+ nPrimeFactors\n\
    \        factorization\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5xo4g9i.scala:24)\n\tat Problem.main(tmpb5xo4g9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        (2 to n by 1).foreach{f => \n   \
    \         val q = n / f \n            n -= f * q\n            factors += f\n \
    \           factors += q\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_jm91t8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx_jm91t8.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (\e[31m2\e[0m to n by \e[31m1\e[0m).foreach{\e\
    [36mf\e[0m => \n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m   \
    \           Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_jm91t8.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n -= f * q\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ =\n            n.toLong ->\n            List(1l) ::\n            List(n.toLong\
    \ ->\n                (2 to n.toLong.toInt) filter {\n                    x =>\
    \ (n % x) == 0\n                } map {\n                    x => x * x\n    \
    \            }) ::\n            List(n.toLong ->\n                (2 to n.toLong.toInt)\
    \ filter {\n                    x => (n % x) == 0 && x != 1\n                }\
    \ map {\n                    x => x * x\n                }) ::\n            (2\
    \ to n.toLong.toInt) filter {\n                x => (n % x) == 1 && x != 1\n \
    \           } map {\n                x => x * x\n            }\n        val factors\
    \ = factorizations(n)\n        val primes = factorizations(n.toLong.toInt)\n \
    \       (factors ++ primes).sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb14nrp5h.scala:28:19 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                }) ::\n\e[31m\e[31m   |\e[0m        \
    \           ^\e[0m\n\e[31m   |\e[0mvalue :: is not a member of scala.collection.immutable.Range.Inclusive\
    \ - did you mean Inclusive.+:?\n\e[31m29 |\e[0m            (\e[31m2\e[0m to n.toLong.toInt)\
    \ filter {\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb14nrp5h.scala:24:38\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            List(n.toLong\
    \ ->\n\e[31m24 |\e[0m                (\e[31m2\e[0m to n.toLong.toInt) filter {\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0mvalue filter is not\
    \ a member of (Long, scala.collection.immutable.Range.Inclusive)\n2 errors found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorize(n,factorization)\n    \
    \    factorization.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43qzmikf.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43qzmikf.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n,factorization)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        var i = 1\n    \
    \    while(n % i == 0) {\n            n /= i\n            factors += i\n     \
    \   }\n        if(n != 1) {\n            factors += n\n        }\n        factors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9h8jige.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= i\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_9h8jige.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        factors\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (factors : scala.collection.mutable.ArrayBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizations\
    \ : MutableList[Long] = new MutableList[Long]\n        val factorCounts : mutable.Map[Long,\
    \ Int] = mutable.Map.empty[Long, Int]\n        for (f <- 2 until math.sqrt(n))\
    \ {\n            if ((n % f) == 0) {\n                factorizations.update(f)\n\
    \                factorCounts(f) = factorCounts.getOrElse(f, 0) + 1\n        \
    \    }\n        }\n        factorizations.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp7a55vc.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m : \e\
    [35mMutableList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: type MutableList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp7a55vc.scala:14:53\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizations\e[0m : \e[35mMutableList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e\
    [0m \e[35mMutableList\e[0m[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                            Not found: type MutableList\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp7a55vc.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorCounts\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyp7a55vc.scala:15:52 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorCounts\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyp7a55vc.scala:16:35 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e["
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        for (i <- 2 to n.toInt)\
    \ {\n            val fact = i / i.toLong\n            if (fact > 1) {\n      \
    \          factors += i.toLong\n                factors += fact - 1\n        \
    \    }\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6dsa0vwn.scala:25)\n\tat Problem.main(tmp6dsa0vwn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = primeFactors(n)\n        val factorized = factors.foldLeft(List[Long](0l)){\n\
    \            (acc: List[Long], x: Long) => acc ::: factorization(x, acc)\n   \
    \     }\n        factorized\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelq9ha_0.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = primeFactors(n)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpelq9ha_0.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m: \e[35mList\e[0m[\e[35mLong\e\
    [0m], \e[36mx\e[0m: \e[35mLong\e[0m) => acc ::: factorization(x, acc)\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ factorization\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        for (prime <- PrimeFactors(n))\
    \ {\n            while (n % prime == 0) {\n                factors += prime\n\
    \                n /= prime\n            }\n        }\n        if (n > 1) {\n\
    \            factors += n\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicrkca2h.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (prime <- PrimeFactors(n)) {\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: PrimeFactors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorizer\
    \ = BigInt(n.toString.toInt)\n        val factorization = BigInt(factorizer).divideAndRemainder(BigInt(2))\n\
    \        val factorizationList = List(factorization._1.toLong, factorization._2.toLong)\n\
    \        if (factorization._1 == 0) factorizationList\n        else {\n      \
    \      val factorizationList2 = factorization._2.toLong * factorizationList\n\
    \            val factorizationList3 = List(factorization._1.toLong, factorizationList2)\n\
    \            factorizationList3\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpk6j0mgt3.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = BigInt(factorizer).divideAndRemainder(BigInt(\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mobject\e[0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger):\
    \ BigInt\n\e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x:\
    \ String): BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m\
    \ (x: Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m\
    \ (i: Int): BigInt\n\e[31m   |\e[0mmatch arguments ((factorizer : BigInt))\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.HashSet[Long]()\n        // Factorize n\n        var d = 2\n     \
    \   var q = n\n        var r = n\n        while (q > 0) {\n            val a =\
    \ r / d\n            r = q % d\n            q = a\n            factors.add(a)\n\
    \            d = d + 1\n        }\n        factors :: factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b756q4_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val divisor\
    \ = 2 // Only test divisors up to sqrt(n)\n        val factorization = mutable.ListBuffer.empty[Long]\n\
    \        while(divisor <= math.sqrt(n)) {\n            val next = n/divisor\n\
    \            if(next * divisor = n) factorization.append(next)\n            else\
    \ if(next * divisor > n) factorization.append(next)\n            else factorization.append(next\
    \ * divisor)\n            divisor *= 2\n        }\n        if(math.sqrt(n) * 2\
    \ == n) factorization.append(math.sqrt(n))\n        else factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1aqw9e9h.scala:18:30 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(next * divisor = n) factorization.append(next)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           ')' expected, but '=' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1aqw9e9h.scala:15:28 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1aqw9e9h.scala:18:15 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(next * divisor = n) factorization.append(next)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \          Found:    Long\n\e[31m   |\e[0m               Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1aqw9e9h.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            divisor *= \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value *= is not a member of Int - did you mean divisor.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = Factorization(n.toInt)\n        factorization.factorize\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgti38mg.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = Factorization(n.toInt)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Not found: Factorization\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val n = n.toInt\n\
    \        var factors = scala.collection.mutable.ListBuffer.empty[Long]\n     \
    \   var i = 2\n        while (i <= n) {\n            var j = i\n            while\
    \ (j * i <= n) {\n                j *= i\n            }\n            factors +=\
    \ i.toLong\n            i += 1\n        }\n        factors.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpccjpebk9.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def factorize(n\
    \ : Long) : List[Long] = {\n            val factorization = n.factors\n      \
    \      val factorizationCount = n.factors.size\n            factorization.filter\
    \ { x => (n % x) == 0 }.map { x => x * factorizationCount }\n        }\n     \
    \   factorize(n)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfazy06w3.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mfactorization\e[0m =\
    \ n.factors\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value factors is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfazy06w3.scala:16:39\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfactorizationCount\e[0m = n.factors.size\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                     value factors is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = if (isPrime(n)) {\n            if (n == 1l) List(1l)\n            else {\n\
    \                var factors = List[Long]()\n                for (i <- 2l until\
    \ n.toInt)\n                    if (n % i == 0)\n                        factors\
    \ ::= i.toLong\n                factors\n            }\n        } else {\n   \
    \         val factorization = factorizeRecursive(n, List())\n            for (i\
    \ <- factorization.reverse)\n                if (i == n) factorization ::= 1l\n\
    \                else if (i != 1l) factorization ::= i.toLong\n            else\
    \ factorization\n        }\n        factorization\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpset1rtn3.scala:28:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m factorization\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            end of statement expected\
    \ but 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpset1rtn3.scala:14:32\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = \e[33mif\e[0m (isPrime(n)) {\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpset1rtn3.scala:24:32 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mval\e[0m \e[36mfactorization\e[0m = factorizeRecursive(n,\
    \ List())\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: factorizeRecursive\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n ==\
    \ 0)\n            List()\n        else {\n            val factors = n % 2 match\
    \ {\n                case 0 => List(n.toLong)\n                case 1 => List(n.toLong.toLong*2)\n\
    \                case _ => factorize(n / 2)\n            }\n            for (f\
    \ <- factors) {\n                for ((p, factor) <- factors.iterator.zipWithNext)\
    \ {\n                    if (f == factor * p)\n                        break\n\
    \                }\n                if (factor != 0)\n                    factors\
    \ ::: List(f)\n                else\n                    factors ::: List(f.toLong)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj11si5y_.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mfor\e[0m ((p, factor) <- factors.iterator.zipWithNext)\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value zipWithNext is not a member of\
    \ Iterator[Long]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj11si5y_.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m (factor != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: factor\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors:\
    \ List[Long] = List(1, 2)\n        val primes = List(2, 3, 5, 7, 11)\n       \
    \ primes.foreach(x => if (n%x == 0) factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4c_55hhc.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        primes.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (n%x == \e[31m0\e[0m) factors += x)\n\e[31m\e[31m   |\e[0m                 \
    \                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not\
    \ a member of List[Long] - did you mean factors.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primeFactors\
    \ = primeFactors(n)\n        val factorization = n #:: primeFactors\n        val\
    \ factorizationPrimes = factorization.groupBy(_ % primeFactors.head)\n       \
    \ val factorizationPrimesList = factorizationPrimes map { case (factor, primes)\
    \ =>\n            prime map { prime =>\n                factor * prime\n     \
    \       }\n        }\n        factorizationPrimesList.flatten.distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwsazjgfe.scala:14:27 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = primeFactors(n)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mprimeFactors\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors:\
    \ mutable.Set[Long] = mutable.Set()\n        val factorList = primeFactors(n)\n\
    \        val factorization: mutable.Map[Long, Long] = mutable.Map()\n        for\
    \ (a <- factorList) {\n            for (b <- factorList.filter(a==_)) {\n    \
    \            factors += a * b\n            }\n            factorization += a ->\
    \ 1\n        }\n        factorization.toList filter {_._2 <= n} map {_._1}\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpzeop_o.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptpzeop_o.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptpzeop_o.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorList\e[0m = primeFactors(n)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptpzeop_o.scala:16:27 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m: mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.Map()\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpzeop_o.scala:16:53\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m: mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m] = mutable.Map()\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availa"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factor\
    \ : Long = 1\n        var factorList : List[Long] = Nil\n        while (n >= factor)\
    \ {\n            factorList ::= factor\n            factor = factor * 2 // double\
    \ of current factor\n            if (n % factor == 0) {\n                n /=\
    \ factor\n            }\n        }\n        if (n > 1) {\n            factorList\
    \ ::= n\n        }\n        factorList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2qri6w_o.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val primes\
    \ = 2 until n by 2\n        primes.foldLeft(List(nil)){ case (res, x) =>\n   \
    \         if ((x % res.last) == 0) (res :+ x) else res\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmporbwis5a.scala:14:29\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = \e[31m2\e[0m until n by \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                 ^\e[0m\n\e[31m   |\e[0m                             Found: \
    \   (n : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmporbwis5a.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        primes.foldLeft(List(nil)){\
    \ \e[33mcase\e[0m (res, x) =>\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Not found: nil\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val fd =\
    \ factors(n)\n        val nFactor = fd.length\n        val primeFactors = Vector.fill(nFactor)(0l).toList\n\
    \        var maxFactor = 0L\n        for(i <- 0 until fd.length) {\n         \
    \   val x = fd(i)\n            val m = n / x\n            val r = x % 1\n    \
    \        if (m == 0)\n                primeFactors(i) = maxFactor\n          \
    \  else if (m < maxFactor) {\n                maxFactor = m\n                primeFactors(i)\
    \ = maxFactor\n            } else {\n                primeFactors(i) = x\n   \
    \         }\n        }\n        return primeFactors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmr6bumiz.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfd\e[0m = factors(n)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \     Not found: factors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmr6bumiz.scala:23:16 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                primeFactors(i) = maxFactor\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long]\
    \ - did you mean primeFactors.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmr6bumiz.scala:26:16 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                primeFactors(i) = maxFactor\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long]\
    \ - did you mean primeFactors.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmr6bumiz.scala:28:16 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                primeFactors(i) = x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of List[Long] - did you mean\
    \ primeFactors.updated?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Find primes\
    \ using Sieve of Eratosthenes\n        // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        // http://www.scala-lang.org/docu/files/collections-api/collections_40.html\n\
    \        // http://math.stackexchange.com/questions/72939/how-to-implement-sieve-of-eratosthenes-in-java\n\
    \n        val sieve = new Array[Long](math.MaxInt)\n        var p = 2\n\n    \
    \    // To avoid infinite loop\n        while(p < n) sieve(p) = p\n        p +=\
    \ 2 // To avoid infinite loop\n        val limit = p\n\n        for(i <- 2 until\
    \ limit) sieve(i) = false\n        var factorList = List[Long]()\n        for(i\
    \ <- 2 until limit){\n            if(!sieve(i)) factorList += i\n        }\n \
    \       factorList.reverse.dropWhile(e => e % 2 == 0).takeWhile(e => e % 2 ==\
    \ 0).map(e => e + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcs1i88h5.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msieve\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mLong\e[0m](math.MaxInt)\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ MaxInt is not a member of math - did you mean math.BigInt?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcs1i88h5.scala:27:43 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m until limit) sieve(i)\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \   Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e[0m                  \
    \                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcs1i88h5.scala:30:15 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            \e[33mif\e[0m(!sieve(i)) factorList += i\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_!\
    \ is not a member of Long - did you mean Long.unary_+?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcs1i88h5.scala:30:37 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            \e[33mif\e[0m(!sieve(i)) factorList += i\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \ value += is not a member of List[Long] - did you mean List[Long].!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val a = n.toInt\n\
    \        val m = 2l\n        val d = 2l\n        val m1 = 2l\n        val d =\
    \ 2l\n        val l = new collection.mutable.ListBuffer[Long]()\n        while\
    \ (m * d <= a) {\n            if (a % m == 0) {\n                val p = a.toLong\
    \ / m\n                l.append(p)\n                a = a - p * m\n          \
    \  }\n            if (a % d == 0) {\n                val p = a.toLong / d\n  \
    \              l.append(p)\n                a = a - p * d\n            }\n   \
    \         m += 1\n            d += 1\n        }\n        if (a > 2l*m) {\n   \
    \         l.append(a)\n            l.size\n        } else {\n            l.size\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ry2gzqw.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[31m2l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ry2gzqw.scala:24:20 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                a = a - p * m\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ry2gzqw.scala:29:20 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                a = a - p * d\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ry2gzqw.scala:31:14 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            m += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean m.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ry2gzqw.scala:32:14\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            d += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean d.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8ry2gzqw.scala:36:14 --------------------\e[0m\e[0m\n\
    \e[31m36 |\e[0m            l.size\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    Int\n\e[31m   |\e[0m            Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ry2"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.List.empty[Long]\n        val limit = math.pow(n, 2l).toInt\n    \
    \    for (i <- 2l.toLong to limit) {\n            if (n % i == 0l) {\n       \
    \         val p = n / i\n                factors +=+ p\n                if (n\
    \ % i == 0l) factors += p.toLong\n                factors += i\n            }\n\
    \        }\n        factors\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3he8bz61.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = n.toString.split(\"(?<=\\\\d)\").filterNot(_.isEmpty)\n        val factors:\
    \ List[Long] = factorization.map(factorize)\n        factors.flatten.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnv4ni4ix.scala:15:52\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = factorization.map(factorize)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Found:    \e[1m\e[31mLong\e\
    [0m => List[Long]\n\e[31m   |\e[0m                                          Required:\
    \ \e[1m\e[32mString\e[0m => List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpnv4ni4ix.scala:16:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        factors.flatten.distinct\n\e[31m\e[31m   |\e[0m  \
    \                     ^\e[0m\n\e[31m   |\e[0mno given instance of type Long =>\
    \ IterableOnce[B] was found for parameter toIterableOnce of \e[33mmethod\e[0m\
    \ \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \  = List();\n        var factorization = n.toInt;\n        // The value of n\
    \ should be the product of all factors\n        while (n != 1) {\n           \
    \ if (n % 2 == 0) {\n                factors += 2\n                factorization\
    \ *= 2\n                n /= 2\n            } else if (n % 3 == 0) {\n       \
    \         factors += 3\n                factorization *= 3\n                n\
    \ /= 3\n            }\n        }\n        return factors.toList + factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx5zpd5tg.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                factors += \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[Nothing] - did you mean List[Nothing].!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpx5zpd5tg.scala:21:18 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx5zpd5tg.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                factors +=\
    \ \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue += is not a member of List[Nothing] - did you mean List[Nothing].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx5zpd5tg.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                n /= \e[31m3\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx5zpd5tg.scala:28:30 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mreturn\e[0m factors.toList + factorization.toList\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[Nothing], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx5zpd5tg.scala:28:46 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mreturn\e[0m factors.toList + factorization.toList\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           val"
  stdout: ''
  timestamp: 1660028780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        require(n\
    \ >= 2l, \"Given number must be greater than or equal to 2\")\n        require(n%1\
    \ == 0, \"Given number must be a positive integer and even\")\n        val primeFactors\
    \ = mutable.Set[Long]()\n        val factorization = factorizeHelper(n)\n    \
    \    factorization.foreach { f =>\n            primeFactors += f\n        }\n\
    \        primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q6c03kl.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q6c03kl.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizeHelper(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizeHelper\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        def primes(prime\
    \ : Long, limit : Long) : List[Long] = {\n            val list = new mutable.ListBuffer[Long]()\n\
    \            var counter = 1\n\n            while (prime < limit) {\n        \
    \        if (n % prime == 0) {\n                    list += prime\n          \
    \          n /= prime\n                    counter += 1\n                } else\
    \ {\n                    prime += 1\n                }\n            }\n      \
    \      list.toList\n        }\n\n        val limit = n.toInt\n        var prime\
    \ = 2l\n        var list = primes(prime, limit)\n        var factors = new mutable.ListBuffer[Long]()\n\
    \n        while (!list.isEmpty) {\n            var i = 0\n            while (i\
    \ < list.size) {\n                val number = list(i)\n                if (number\
    \ % prime == 0) {\n                    factors += number\n                   \
    \ factors += factors(number / prime)\n                }\n                i +=\
    \ 1\n            }\n\n            list = primes(prime, limit)\n            prime\
    \ = prime + 1l\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8_ovl32h.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_ovl32h.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    n /=\
    \ prime\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m \
    \                  value /= is not a member of Long - did you mean n.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8_ovl32h.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    prime += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of Long - did you mean prime.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8_ovl32h.scala:33:26 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 1 to Math.sqrt(n)) {\n  \
    \          if(n % i == 0) {\n                factors.append(i)\n             \
    \   factors.append(n/i)\n                break\n            }\n        }\n   \
    \     factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5em49134.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5em49134.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to Math.sqrt(n)) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Double\n\e[31m   |\e[0m  \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5em49134.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        // Prime\
    \ number list can be generated using a sieve of Eratosthenes algorithm.\n    \
    \    // Factorization is done using dynamic programming.\n        // Primes below\
    \ 10 are trivially factorized.\n        var primes = new Vector[Long](10l..n).toSet\n\
    \        val factorization = new mutable.LinkedHashSet[Long]\n        // Fill\
    \ the prime list from 1 to sqrt(n).\n        var i = 2\n        while (i <= n)\
    \ {\n            if (primes.contains(i)) {\n                primes = primes.filter(_\
    \ != i)\n                factorization.add(i)\n            }\n            i +=\
    \ 1\n        }\n        val factors = new Vector[Long]()\n        for (i <- 1\
    \ to n) {\n            if (factorization.contains(i)) {\n                factors\
    \ += i\n                factorization.remove(i)\n            }\n        }\n  \
    \      factors.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4fmn5f6.scala:17:42 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mVector\e[0m[\e[35mLong\e[0m](\e[31m10l\e[0m..n).toSet\n\e[31m\e[31m\
    \   |\e[0m                                          ^\e[0m\n\e[31m   |\e[0m  \
    \                                 an identifier expected, but '.' found\n\e[31m\e\
    [31m-- Error: /tmp/tmpi4fmn5f6.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mVector\e[0m[\e[35mLong\e[0m](\e[31m10l\e[0m..n).toSet\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mconstructor\e\
    [0m \e[35mVector\e[0m cannot be accessed as a member of Vector[Long] from module\
    \ class Problem$.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4fmn5f6.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = \e[33mnew\e[0m mutable.LinkedHashSet[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpi4fmn5f6.scala:28:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m \e[35mVector\e[0m[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mconstructor\e[0m \e[35mVector\e\
    [0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4fmn5f6.scala:29:23 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factorization\
    \ = List.empty[Long]\n        var temp : List[Long] = List(n)\n        var i :\
    \ Long = 0\n        while (i <= temp.length) {\n            val factors = temp.toSet\n\
    \            var newFactors = factors.filterNot(f => temp.contains(f))\n     \
    \       var newLength = newFactors.reduce((a, b) => a * b)\n            factorization\
    \ :+= newLength.toLong\n            temp = newFactors\n            i += newLength\n\
    \        }\n        factorization.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph2f2rfva.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            temp = newFactors\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              Found:    (newFactors : Set[Long])\n\e[31m   |\e[0m           \
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028779
