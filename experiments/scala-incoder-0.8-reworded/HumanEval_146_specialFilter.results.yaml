language: scala
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter { x\
    \ => x > 10 && x.isOdd && x.isOdd }.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb845wz56.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter { \e[36mx\e[0m => x > \e[31m10\e\
    [0m && x.isOdd && x.isOdd }.size\n\e[31m\e[31m   |\e[0m                      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb845wz56.scala:13:50 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        nums.filter { \e[36mx\e[0m => x > \e[31m10\e[0m && x.isOdd && x.isOdd\
    \ }.size\n\e[31m\e[31m   |\e[0m                                              \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value isOdd\
    \ is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10).count(x => x.toString.takeWhile(_ == '1').tail.forall(x => x % 2 ==\
    \ 1)) + nums.filter(x => x > 10).count(x => x.toString.takeWhile(_ == '1').tail.forall(x\
    \ => x % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp017uczq_.scala:17)\n\tat Problem.main(tmp017uczq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 1\n\
    \        for (nn <- nums) {\n            if (nn.toLong > 10l && nn.toLong % 2\
    \ == 1 && nn.toLong % 2 == 1) count ++\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd6qq6ww5.scala:15:85 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (nn.toLong > \e[31m10l\e[0m\
    \ && nn.toLong % \e[31m2\e[0m == \e[31m1\e[0m && nn.toLong % \e[31m2\e[0m == \e\
    [31m1\e[0m) count ++\n\e[31m\e[31m   |\e[0m                                  \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numbers = nums.map(\
    \ _ % 2 == 0 );\n        val evens  = nums.filter(n => n % 2 == 0);\n        val\
    \ firstEven = evens.head\n        val lastEven  = evens.last\n        val firstOdd\
    \ = evens.find(_ % 2 == 1)\n        val lastOdd = evens.find(_ % 2 == 0)\n   \
    \     val evensCount = ( evens diff evens.head ).length\n        val oddsCount\
    \ = ( odds diff odds.last ).length\n        val count = (firstEven + lastEven)\
    \ * (firstOdd + lastOdd)\n        numbers.reduce( _ + _ )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrhar7tf.scala:19:44\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e\
    [0m = ( evens diff evens.head ).length\n\e[31m\e[31m   |\e[0m                \
    \                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \     Required: scala.collection.Seq[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptrhar7tf.scala:20:26 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddsCount\e[0m = ( odds diff\
    \ odds.last ).length\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: odds\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptrhar7tf.scala:21:55 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = (firstEven\
    \ + lastEven) * (firstOdd + lastOdd)\n\e[31m\e[31m   |\e[0m                  \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of Option[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptrhar7tf.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        numbers.reduce( _ + _ )\n\e[31m\e[31m   |\e[0m\
    \                        ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Boolean,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infix"
  stdout: ''
  timestamp: 1660029085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        require(nums.length\
    \ >= 2)\n        val odds = nums.filter(x => (x % 2) != 0)\n        require(odds.length\
    \ == 2)\n        val first = odds.head\n        val last = odds.last\n       \
    \ require(odds.tail.forall(x => (x % 2) == 0) && odds.head.asInstanceOf[Int] ==\
    \ odds.last.asInstanceOf[Int])\n        if (first > 10 && last > 10 && odds.head\
    \ % 2 == 1) {\n            nums.count(x => x > 10) && odds.tail.forall(x => x\
    \ % 2 == 1)\n        } else {\n            nums.count(x => x > 10) || odds.tail.forall(x\
    \ => x % 2 == 1)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplytc_5dh.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            nums.count(\e[36mx\e[0m => x > \e[31m10\e\
    [0m) && odds.tail.forall(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value && is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplytc_5dh.scala:22:36 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m) || odds.tail.forall(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value || is\
    \ not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        nums.foreach{i => \n            if (i>10 && i%2==0 && i/10==i%10){\n\
    \                count = count+1\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmgfdl53.scala:23)\n\tat Problem.main(tmprmgfdl53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter( x =>\
    \ x > 10l).filter( x => (x % 2) == 1).filter( x => (x % 2) != 0).count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphz622_2h.scala:13:6\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m      nums.filter( \e[36mx\e\
    [0m => x > \e[31m10l\e[0m).filter( \e[36mx\e[0m => (x % \e[31m2\e[0m) == \e[31m1\e\
    [0m).filter( \e[36mx\e[0m => (x % \e[31m2\e[0m) != \e[31m0\e[0m).count\n\e[31m\e\
    [31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    (Long => Boolean) => Int\n\e[31m   |\e[0m\
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      val odd = mutable.Buffer[Long]()\n\
    \      \n      // Step 1: \n      //    Iterate through the list\n      //   \
    \ If element is a Long, add it to the odd list\n      //    If element is anything\
    \ else, throw an exception\n      //    \n      \n      // Step 2: \n      //\
    \    Iterate through the list\n      //    If element is a Long, remove first\
    \ digit from element\n      //    If element is a Long, remove last digit from\
    \ element\n      //    If element is a Long, add it to the odd list\n      //\
    \    If element is anything else, throw an exception\n      //    \n      \n \
    \     odd.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxunesh5.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36modd\e[0m = mutable.Buffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.toList flatMap\
    \ { n =>\n            val oddFirst = n % 10 % 2 != 0\n            val oddLast\
    \ = n % 10 != 0\n            if (n > 10 && oddFirst && oddLast)\n            \
    \    Some(n)\n            else\n                None\n        }.size \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmph3aert7s.scala:13:30 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.toList flatMap { \e[36mn\e[0m =>\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \               Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m     \
    \                     I could not infer the type of the parameter n.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val n = nums.count(_\
    \ > 10)\n        val m = nums.filter(_ % 2 != 0).length\n        val f = nums.filter(_\
    \ % 2 == 0).last\n        val odd = (f.toString.charAt(f.toString.length() - 1).toChar\
    \ == '1')\n        (n - m) < (n - 1) * ((n - 1) * (odd ? 2 : 1)) + (m - f) < (m\
    \ - 1) * ((m - 1) * (odd ? 2 : 1))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkp1c3j_7.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (n - m) < (n - \e[31m1\e[0m) * ((n - \e[31m1\e\
    [0m) * (odd ? \e[31m2\e[0m : \e[31m1\e[0m)) + (m - f) < (m - \e[31m1\e[0m) * ((m\
    \ - \e[31m1\e[0m) * (odd ? \e[31m2\e[0m : \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value ? is not a member of Boolean\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkp1c3j_7.scala:17:92 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (n - m) < (n - \e[31m1\e[0m) * ((n - \e[31m1\e\
    [0m) * (odd ? \e[31m2\e[0m : \e[31m1\e[0m)) + (m - f) < (m - \e[31m1\e[0m) * ((m\
    \ - \e[31m1\e[0m) * (odd ? \e[31m2\e[0m : \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (num <- nums)\n        {\n            if (num > 10 && num.firstDigit\
    \ % 2 == 1 && num.lastDigit % 2 == 1)\n                count += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0f4etpwc.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && num.firstDigit\
    \ % \e[31m2\e[0m == \e[31m1\e[0m && num.lastDigit % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value firstDigit is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0f4etpwc.scala:16:59 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && num.firstDigit\
    \ % \e[31m2\e[0m == \e[31m1\e[0m && num.lastDigit % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ lastDigit is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        nums.foreach { number =>\n            if (number.toString.toLong > 10\
    \ && number.toString.toLong % 2 == 0) {\n                if (number.toString.toLong\
    \ % 2 != 0 && number.toString.toLong % 2 != 1) {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c2d0coq.scala:25)\n\tat Problem.main(tmp9c2d0coq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val even = nums.filter{\
    \ x => x.toInt % 2 == 0 }\n        val odd = nums.filter{ x => x.toInt % 2 !=\
    \ 0 }\n        val odd_even = odd.filter{ x => x.toInt % 2 == 0 }\n        val\
    \ odd_odd = odd.filter{ x => x.toInt % 2 != 0 }\n\n        if (odd_even.size ==\
    \ 0) 1\n        else if (odd_odd.size == 0) 2\n        else odd_even.size + odd_odd.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm14u16rf.scala:23)\n\tat Problem.main(tmpm14u16rf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val filteredList\
    \ = nums.filter(num=> num > 10 && num % 2 == 0 && num % 2 != 0)\n        val firstOdd\
    \ = filteredList.head\n        val lastOdd = filteredList.last\n        val result\
    \ = (lastOdd - firstOdd) / 2 + firstOdd\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.specialFilter(tmponew4su5.scala:14)\n\
    \tat Problem$.main(tmponew4su5.scala:20)\n\tat Problem.main(tmponew4su5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val odd = nums.find(_\
    \ % 2 == 1).toList\n        val first = nums.find(_ % 2 == 0).toList\n       \
    \ nums.filter(x => x > 10).count(x => odd.contains(x) && first.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpco8ymyfh.scala:19)\n\tat Problem.main(tmpco8ymyfh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_.toString.toLong\
    \ > 10) && (nums.exists(_ % 2 == 1) && nums.exists(_ % 2 == 0)).fold(0l) {\n \
    \           (nums, nums.length) => (nums, nums.length + 1)\n        }._1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc85gu3xi.scala:14:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (\e[36mnums\e[0m, nums.length) => (nums,\
    \ nums.length + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   not a legal formal parameter\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc85gu3xi.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(_.toString.toLong > \e[31m10\e[0m)\
    \ && (nums.exists(_ % \e[31m2\e[0m == \e[31m1\e[0m) && nums.exists(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m)).fold(\e[31m0l\e[0m) {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value && is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc85gu3xi.scala:13:99 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        nums.count(_.toString.toLong > \e[31m10\e[0m) && (nums.exists(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) && nums.exists(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m)).fold(\e[31m0l\e[0m) {\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value fold is not a member\
    \ of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val even = nums.filter(x\
    \ => x%2==0).size\n        val odd = nums.filter(x => x%2==1).size\n        val\
    \ firstOdd  = nums.filter(x => x%3==1).size\n        val lastOdd  = nums.filter(x\
    \ => x%3==0).size\n        return (even + odd) + (firstOdd + lastOdd)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdg0b_fr.scala:20)\n\tat Problem.main(tmptdg0b_fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\
    \ return 0\n        var count = 0\n        for (x <- nums) {\n            if (x\
    \ > 10) count += 1\n            if (x % 2 == 0 && x % 2 != 1) count += 1\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3mv_3o7.scala:22)\n\tat Problem.main(tmpp3mv_3o7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (n <- nums) {\n            if (n > 10l) {\n                for (i\
    \ <- 0 until n.toString.length) {\n                    if (n.toString.charAt(i)\
    \ == '1') count += 1\n                }\n            } else {\n              \
    \  for (i <- 0 until n.toString.length) {\n                    if (n.toString.charAt(i)\
    \ == '1') count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpor0cs5tn.scala:28)\n\tat Problem.main(tmpor0cs5tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        \n        def oddNumber(x\
    \ : Long) : Boolean = {\n            if (x % 2 == 0) true\n            else false\n\
    \        }\n        \n        def oddFirst(x : Long) : Boolean = {\n         \
    \   if (x % 2 != 0 && x % 2 == 1) true\n            else false\n        }\n  \
    \      \n        def oddLast(x : Long) : Boolean = {\n            if (x % 2 !=\
    \ 0 && x % 2 != 1 && x % 2 != 0) true\n            else false\n        }\n   \
    \     \n        def oddAndFirst(x : Long) : Boolean = {\n            if (x % 2\
    \ != 0 && x % 2 == 1) true\n            else false\n        }\n        \n    \
    \    def oddAndLast(x : Long) : Boolean = {\n            if (x % 2 != 0 && x %\
    \ 2 != 1 && x % 2 != 0) true\n            else false\n        }\n        \n  \
    \      var count : Long = 0\n        \n        for (x <- nums) {\n           \
    \ if (oddNumber(x)) {\n                if (oddFirst(x)) {\n                  \
    \  if (oddLast(x)) {\n                        if (oddAndFirst(x)) {\n        \
    \                    if (oddAndLast(x)) count+=1\n                        } else\
    \ count+=1\n                    } else count+=1\n                } else count+=1\n\
    \            } else count+=1\n        }\n        \n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_rvvdau4.scala:56)\n\tat Problem.main(tmp_rvvdau4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var evenCounter\
    \ = 0\n        var oddCounter = 0\n        for (i<- nums){\n            if (i\
    \ % 2 == 0){\n                evenCounter += 1\n            }\n            else\
    \ {\n                oddCounter += 1\n            }\n        }\n        if (evenCounter\
    \ >= 2 && oddCounter >= 2) {\n            evenCounter * oddCounter\n        }\n\
    \        else {\n            0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ft2s_fe.scala:32)\n\tat Problem.main(tmp7ft2s_fe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count : Long\
    \ = 0\n        var firstDigit : Long = 0\n        var lastDigit : Long = 0\n \
    \       for( x <- nums) {\n            if(x>10 && firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1) {\n                count += 1\n            }\n            firstDigit\
    \ = x / 10 % 10\n            lastDigit = x % 10\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphuuw0q2r.scala:27)\n\tat Problem.main(tmphuuw0q2r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.count(x => x\
    \ > 10 && nums.last.mod(2) == 1 && nums.head.mod(2) == 1) \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_1i11vp.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m &&\
    \ nums.last.mod(\e[31m2\e[0m) == \e[31m1\e[0m && nums.head.mod(\e[31m2\e[0m) ==\
    \ \e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_1i11vp.scala:13:67\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m      nums.count(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && nums.last.mod(\e[31m2\e[0m) == \e[31m1\e[0m && nums.head.mod(\e\
    [31m2\e[0m) == \e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m                         \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod\
    \ is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0;\n\
    \        var lastOdd = nums.last.asInstanceOf[Int] % 2 != 0;\n        for {\n\
    \            first <- nums.headOption;\n            last <- nums.lastOption;\n\
    \            if ((first.asInstanceOf[Int] + last.asInstanceOf[Int]).asInstanceOf[Int]\
    \ > 10) {\n                count = count + 1;\n            }\n        } while\
    \ (lastOdd);\n        count \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33becg17.scala:21:25 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        } \e[33mwhile\e[0m (lastOdd);\n\e[31m\e[31m \
    \  |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                    \
    \     'do' expected, but ';' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp33becg17.scala:18:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e\
    [0m ((first.asInstanceOf[\e[35mInt\e[0m] + last.asInstanceOf[\e[35mInt\e[0m]).asInstanceOf[\e\
    [35mInt\e[0m] > \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if(nums.isEmpty)\
    \ return 0\n        var count = 0\n        var first = nums(0).toInt\n       \
    \ var last = nums(nums.length-1).toInt\n        for(i <- 0 until nums.length)\
    \ {\n            if(nums(i) > 10) {\n                if(nums(i) % 2 == 1 && first\
    \ % 2 == 1 && last % 2 == 1) count+=1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptjwyewpp.scala:26)\n\tat Problem.main(tmptjwyewpp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var oddDigit = 0\n\
    \        var firstEvenDigit = 0\n        var lastEvenDigit = 0\n        var firstEvenOdd\
    \ = 0\n        var lastEvenOdd = 0\n        var firstOdd = 0\n        var lastOdd\
    \ = 0\n        for (n <- nums) {\n            oddDigit += n % 10\n           \
    \ lastOdd += n % 10\n            firstOdd += n / 10\n            lastEvenOdd +=\
    \ n / 10\n            firstEvenOdd += n / 10\n            lastEvenDigit += n %\
    \ 10\n            firstEvenDigit += n / 10\n            lastEvenDigit += n % 10\n\
    \        }\n        return (oddDigit / 2 + (firstEvenOdd % 2) + (lastEvenOdd %\
    \ 2)) / 3\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq36838uy.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            oddDigit += n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpq36838uy.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            lastOdd += n % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq36838uy.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            firstOdd += n\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq36838uy.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lastEvenOdd += n / \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpq36838uy.scala:25:25 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            firstEvenOdd += n / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq36838uy.scala:26:26 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            lastEvenDigit += n % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq36838uy.scala:27:27\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            firstEvenDigit\
    \ += n / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq36838uy.scala:28:26 --"
  stdout: ''
  timestamp: 1660029094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val listEven = nums.filter(_\
    \ % 2 == 0)\n        listEven.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60ahjikb.scala:17)\n\tat Problem.main(tmp60ahjikb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val counts = nums.map{n\
    \ => if(n > 10l) 1L else 0L}.groupBy(_).mapValues(_.length)\n        if (counts.contains(\"\
    1\"))\n            1\n        else if (counts.contains(\"2\"))\n            2\n\
    \        else\n            0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyi7f0ln_.scala:13:67 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = nums.map{\e\
    [36mn\e[0m => \e[33mif\e[0m(n > \e[31m10l\e[0m) \e[31m1L\e[0m \e[33melse\e[0m\
    \ \e[31m0L\e[0m}.groupBy(_).mapValues(_.length)\n\e[31m\e[31m   |\e[0m       \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => \n\e[31m   |\e[0m     nums.map(\n\e[31m   |\e[0m       {\n\e[31m\
    \   |\e[0m         n => \n\e[31m   |\e[0m           {\n\e[31m   |\e[0m       \
    \      \e[33mif \e[0m(n > \e[31m10L\e[0m) \e[31m1L\e[0m\e[33m else \e[0m\e[31m0L\e\
    [0m\n\e[31m   |\e[0m           }\n\e[31m   |\e[0m       }\n\e[31m   |\e[0m   \
    \  ).groupBy(_$1).mapValues(_$2 => _$2.length).\n1 error found\n"
  stdout: ''
  timestamp: 1660029089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(i =>\
    \ i >= 10).count { i => \n            i % 2 == 1 && \n            i / 10 % 2 ==\
    \ 1 && \n            i / 100 % 2 == 1 && \n            i / 1000 % 2 == 1 && \n\
    \            i / 10000 % 2 == 1 && \n            i / 100000 % 2 == 1 && \n   \
    \         i / 1000000 % 2 == 1 && \n            i / 10000000 % 2 == 1 && \n  \
    \          i / 100000000 % 2 == 1 && \n            i / 1000000000 % 2 == 1 &&\
    \ \n            i / 10000000000 % 2 == 1 && \n            i / 100000000000 % 2\
    \ == 1 && \n            i / 1000000000000 % 2 == 1 && \n            i / 10000000000000\
    \ % 2 == 1 && \n            i / 100000000000000 % 2 == 1 && \n            i /\
    \ 1000000000000000 % 2 == 1 && \n            i / 10000000000000000 % 2 == 1 &&\
    \ \n            i / 100000000000000000 % 2 == 1 && \n            i / 1000000000000000000\
    \ % 2 == 1 && \n            i / 10000000000000000000 % 2 == 1 && \n          \
    \  i / 100000000000000000000 % 2 == 1 && \n            i / 1000000000000000000000\
    \ % 2 == 1 && \n            i / 10000000000000000000000 % 2 == 1 && \n       \
    \     i / 100000000000000000000000 % 2 == 1 && \n            i / 1000000000000000000000000\
    \ % 2 == 1 && \n            i / 10000000000000000000000000 % 2 == 1 && \n    \
    \        i / 100000000000000000000000000 % 2 == 1 && \n            i / 1000000000000000000000000000\
    \ % 2 == 1 && \n            i / 10000000000000000000000000000 % 2 == 1 && \n \
    \           i / 100000000000000000000000000000 % 2 == 1 && \n            i / 1000000000000000000000000000000\
    \ % 2 == 1 && \n            i / 10000000000000000000000000000000 % 2 == 1 && \n\
    \            i / 100000000000000000000000000000000 % 2 == 1 && \n            i\
    \ / 1000000000000000000000000000000000 % 2 == 1 && \n            i / 10000000000000000000000000000000000\
    \ % 2 == 1 && \n            i / 100000000000000000000000000000000000 % 2 == 1\
    \ && \n            i / 1000000000000000000000000000000000000 % 2 == 1 && \n  \
    \          i / 10000000000000000000000000000000000000 % 2 == 1 && \n         \
    \   i / 100000000000000000000000000000000000000 % 2 == 1 && \n            i /\
    \ 1000000000000000000000000000000000000000 % 2 == 1 && \n            i / 10000000000000000000000000000000000000000\
    \ % 2 == 1 && \n            i / 100000000000000000000000000000000000000000 % 2\
    \ == 1 && \n            i / 1000000000000000000000000000000000000000000 % 2 ==\
    \ 1 && \n            i / 100000000000000000000000000000000000 % 2 == 1 && \n \
    \           i / 1000000000000000000000000000000000000 % 2 == 1 && \n         \
    \   i / 10000000000\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4jlmrw4d.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i / \e[31m10000000000\e[0m % \e[31m2\e[0m\
    \ == \e[31m1\e[0m && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:25:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     i / \e[31m100000000000\e[0m % \e[31m2\e[0m == \e[31m1\e[0m && \n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i / \e[31m1000000000000\e[0m % \e[31m2\e\
    [0m == \e[31m1\e[0m && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:27:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     i / \e[31m10000000000000\e[0m % \e[31m2\e[0m == \e[31m1\e[0m && \n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:28:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            i / \e[31m100000000000000\e[0m % \e[31m2\e\
    [0m == \e[31m1\e[0m && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:29:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \     i / \e[31m1000000000000000\e[0m % \e[31m2\e[0m == \e[31m1\e[0m && \n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      number too large\n\e[31m\e[31m-- Error: /tmp/tmp4jlmrw4d.scala:30:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            i / \e[31m10000000000000000\e[0m % \e[31m2\e\
    [0m == \e[31m1\e[0m &&"
  stdout: ''
  timestamp: 1660029095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x=>x>10\
    \ && ((x % 1).toInt % 2).toLong == (x % 1).toInt).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpthj7n39v.scala:17)\n\tat Problem.main(tmpthj7n39v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        require(nums.nonEmpty)\n\
    \        val n = nums.head\n        val odd = nums.dropWhile(x => x < 10).last\n\
    \        val odd_digit = nums.filter(_ % 10 == 0)\n        if (odd_digit.last\
    \ % 2 == 1)\n            n - odd\n        else\n            n - 10\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.specialFilter(tmpfnxlojli.scala:15)\n\
    \tat Problem$.main(tmpfnxlojli.scala:23)\n\tat Problem.main(tmpfnxlojli.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsAsString\
    \ = nums.mkString(\"[\", \",\", \"]\")\n        nums.count(_ > 10) && nums.last.asDigit.isOdd\
    \ && nums.head.asDigit.isOdd && (nums.mkString.toInt % 2) != 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx34bvlkk.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.count(_ > \e[31m10\e[0m) && nums.last.asDigit.isOdd\
    \ && nums.head.asDigit.isOdd && (nums.mkString.toInt % \e[31m2\e[0m) != \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value && is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx34bvlkk.scala:14:40 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        nums.count(_ > \e[31m10\e[0m) && nums.last.asDigit.isOdd && nums.head.asDigit.isOdd\
    \ && (nums.mkString.toInt % \e[31m2\e[0m) != \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         value asDigit is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val odd = nums.filter(x\
    \ => (x.toInt % 2).toDouble == 1.0)\n        odd.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzj7jalm0.scala:17)\n\tat Problem.main(tmpzj7jalm0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(n =>\
    \ n.toInt > 10 && n.toInt == n.toInt.&(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9t9ejkwb.scala:17)\n\tat Problem.main(tmp9t9ejkwb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsFiltered\
    \ = nums.filter(x => x > 10).flatMap(x => List(x, x / 10)).groupBy(x => x / 10).mapValues(x\
    \ => x.size)\n        val odd = numsFiltered.filter(x => x._2 == 1 && x._3 % 2\
    \ != 0).map(_._1).sum\n        numsFiltered.filter(_._2 == 1 || _._2 == odd).map(_._1).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphiz379hf.scala:14:58 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = numsFiltered.filter(\e\
    [36mx\e[0m => x._2 == \e[31m1\e[0m && x._3 % \e[31m2\e[0m != \e[31m0\e[0m).map(_._1).sum\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m            value _3 is not a member of (Long, Int) - did\
    \ you mean x._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphiz379hf.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        numsFiltered.filter(_._2\
    \ == \e[31m1\e[0m || _._2 == odd).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ _2 is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val ns = nums\n\
    \        ns.count(num) =>\n            ((num % 10l > 10l) \n                &&\
    \ ((num % 10l%2 == 1l)\n                    && ((num % 10l%2 == 1l) && (num.last%2\
    \ == 1l)))\n                    && ((ns.head % 10l%2 == 1l)\n                \
    \        && (ns.last%2 == 1l)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr2kxgq3t.scala:14:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        ns.count(num) =>\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        not a legal formal parameter\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2kxgq3t.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            ((num % \e[31m10l\e[0m > \e[31m10l\e[0m)\
    \ \n\e[31m\e[31m   |\e[0m              ^^^\e[0m\n\e[31m   |\e[0m             \
    \ Not found: num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsGreaterThan10\
    \ = nums.filter{n => n > 10}\n        val numsFirstAndLastOdd = numsGreaterThan10.filter{\
    \ n =>\n                val last = n % 10\n                (last % 2 == 1) &&\
    \ last > 0\n            }\n        return numsFirstAndLastOdd.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcv7sqhqr.scala:23)\n\tat Problem.main(tmpcv7sqhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsM = nums.filter(num\
    \ => num > 10)\n        numsM.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfa7sjl22.scala:18)\n\tat Problem.main(tmpfa7sjl22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val counter: mutable.Map[Long,\
    \ Int] = mutable.Map.empty[Long, Int]\n        for (n <- nums) {\n           \
    \ val l = n.toLong\n            if (l % 2 != 0 && l % 1 != 0) {\n            \
    \    counter(l) = 0\n            }\n            counter(l) += 1\n        }\n \
    \       counter.filter(_._2 == 1).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwod3jwv2.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m: mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwod3jwv2.scala:13:46 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m: mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val ans = nums.filter(x\
    \ => x > 10 && x % 2 == 1 && x % 3 == 1)\n        ans.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qjy9n5g.scala:18)\n\tat Problem.main(tmp7qjy9n5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(x => x\
    \ > 10 and x % 2 != 0 && (x % 10 == 1)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnncgb7uu.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      nums.filter(\e[36mx\e[0m => x > \e[31m10\e[0m and\
    \ x % \e[31m2\e[0m != \e[31m0\e[0m && (x % \e[31m10\e[0m == \e[31m1\e[0m)).length\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      value and is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660029095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val ns = nums.filter(_\
    \ % 2 == 1).map(_ / 2)\n        if (ns.size > 1)\n            ns.count(x => x\
    \ > 10) && (ns.head % 2 == 1 && (ns.last % 2 == 1))\n        else\n          \
    \  ns.head > 10\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm7m5vbe7.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            ns.count(\e[36mx\e[0m => x > \e[31m10\e[0m)\
    \ && (ns.head % \e[31m2\e[0m == \e[31m1\e[0m && (ns.last % \e[31m2\e[0m == \e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value && is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpm7m5vbe7.scala:17:12 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            ns.head > \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Boolean\n\
    \e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\
    \ {\n            return 0\n        }\n        \n        var count : Long = 0\n\
    \        \n        var first = nums.head\n        \n        while (count < nums.size)\
    \ {\n            var last = nums.last\n            \n            while (last >\
    \ 10) {\n                last = last.abs\n            }\n            \n      \
    \      if (first % 2 != 0 && last % 2 != 0) {\n                count += 1\n  \
    \          }\n            \n            nums = nums.tail\n            first =\
    \ nums.head\n        }\n        \n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3obj6aib.scala:32:17 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            nums = nums.tail\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val nums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7byq4s4o.scala:17)\n\tat Problem.main(tmp7byq4s4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter { n\
    \ => n > 10 && n.toString.charAt(0) % 2 == 1 && n.toString.charAt(n.toString.length-1)%2\
    \ == 1 }.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (n <- nums if n.toString.length > 1) {\n            if (n.toString.charAt(0).toInt\
    \ == 1 && (n.toString.charAt(1).toInt == 1 || n.toString.charAt(1).toInt == 3)\n\
    \                    && (n.toString.charAt(2).toInt == 1 || n.toString.charAt(2).toInt\
    \ == 3)) {\n                count += 1\n            }\n        }\n        count\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tznexs4.scala:24)\n\tat Problem.main(tmp0tznexs4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val sum = 0\n  \
    \      for(num <- nums) {\n            sum += num\n            if(num > 10l){\n\
    \                val last = num % 10\n                if(last.equals(1)) {\n \
    \                   sum += 1\n                }\n                if(last.equals(3))\
    \ {\n                    sum += 1\n                }\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn9u208q.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += num\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn9u208q.scala:19:24\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    sum +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn9u208q.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    sum += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var sum = 0\n  \
    \      for (i <- nums) {\n            if (i > 10) {\n                if (i % 2\
    \ == 0) {\n                    sum += i\n                }\n            } else\
    \ {\n                if (i % 2 != 0) {\n                    sum += i\n       \
    \         }\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfn68uro4.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    sum += i\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfn68uro4.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                    sum += i\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of Int\
    \ - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var i = 1 // iterate over the first element\n        while(i < nums.length)\
    \ {\n            if(nums(i) > 10) {\n                if(nums(i) % 2 == 1) {\n\
    \                    count += 1\n                }\n                i += (nums(i)\
    \ - 10) / 2\n            }\n            else {\n                i += 1\n     \
    \       }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy3gd5nrg.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                i += (nums(i) - \e[31m10\e[0m) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val set1 = Set(nums.takeWhile(_\
    \ > 10).toSet)\n        val set2 = Set(nums.last.asInstanceOf[Int] - nums.head.asInstanceOf[Int])\n\
    \        set1.size + (set2.size + 1) * set2.size == nums.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2lsrb2l.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        set1.size + (set2.size\
    \ + \e[31m1\e[0m) * set2.size == nums.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def checkFilter(aList\
    \ : List[Long]) : Int = {\n            val first = List.apply(aList) take 2 getOrElse\
    \ 0\n            val last = List.apply(aList) last getOrElse 0\n            val\
    \ odd = first % 2 == 0\n            val even = last % 2 == 0\n            if (odd\
    \ and even) {\n                val odd_first = first take 1\n                val\
    \ odd_last = last take 1\n                if (odd_first == odd_last) {\n     \
    \               aList.indexOf(aList.indexOf(aList.indexOf(first)) +1)\n      \
    \          } else {\n                    aList.indexOf(aList.indexOf(first) +\
    \ 1)\n                }\n            } else {\n                aList.indexOf(aList.indexOf(first)\
    \ + 1)\n            }\n        }\n        nums match {\n            case Nil =>\
    \ 0\n            case aList => checkFilter(aList)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpary9pkmj.scala:15:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mlast\e[0m = List.apply(aList)\
    \ last getOrElse \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                               ^\e[0m\n\e[31m   |\e[0m                     end\
    \ of statement expected but integer literal found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpary9pkmj.scala:14:49 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m = List.apply(aList) take \e\
    [31m2\e[0m getOrElse \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    value getOrElse is not a member of List[List[Long]]\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpary9pkmj.scala:15:46 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mlast\e[0m = List.apply(aList)\
    \ last getOrElse \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                      Not found: getOrElse\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpary9pkmj.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36modd_last\e[0m =\
    \ last take \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value take is\
    \ not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660029106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Solution 1\n\
    \        // return (nums.toIterator.filter(num => num.toLong > 10).count(num =>\
    \ num.toLong % 2 != 0 && num.toLong % 10 != 0).toLong)\n        \n        // Solution\
    \ 2\n        // return nums.iterator.filter(num => num > 10).count(num => num\
    \ % 2 != 0 && num % 10 != 0).toLong\n\n        // Solution 3\n        val even\
    \ = nums.iterator.filter(num => num.toLong % 2 == 0).count(num => num.toLong %\
    \ 10 != 0).toLong\n        val odd = nums.iterator.filter(num => num.toLong %\
    \ 2 != 0).count(num => num.toLong % 10 != 0).toLong\n        odd + (even * 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9holav6w.scala:25)\n\tat Problem.main(tmp9holav6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count : Long\
    \ = 0\n        for (i <- 0 until nums.length) {\n            // If the number\
    \ is odd and first and last digits are odd then add 1 to the count variable\n\
    \            if (nums(i) % 2 != 0 && nums(i).modulo(10).mod(2) == 1) {\n     \
    \           count += 1\n            }\n        }\n        count // Return the\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpksaiznk2.scala:16:44 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (nums(i) % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m && nums(i).modulo(\e[31m10\e[0m).mod(\e[31m2\e[0m) == \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value modulo is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Only odd nums\n\
    \        val oddNums = nums.filter { n % 2 == 1 }\n        // Check if first and\
    \ last digit are odd\n        val isOdd1 = oddNums.forall(x => x % 2 == 1)\n \
    \       val isOdd2 = oddNums.last.lastOption.isDefined\n        val isOdd3 = oddNums.head.lastOption.isDefined\n\
    \        // Return 1 if nums are greater than 10 and odd and both first and last\
    \ digits are odd\n        if (isOdd1 & isOdd2 & isOdd3) {\n            1\n   \
    \     } else {\n            return 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqks14ry.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddNums\e[0m = nums.filter\
    \ { n % \e[31m2\e[0m == \e[31m1\e[0m }\n\e[31m\e[31m   |\e[0m                \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \   Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiqks14ry.scala:17:34\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36misOdd2\e[0m = oddNums.last.lastOption.isDefined\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \        value lastOption is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpiqks14ry.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36misOdd3\e[0m = oddNums.head.lastOption.isDefined\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value lastOption is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.toList.filter(_\
    \ > 10).count(x => x % 2 == 0 && x.toString.substring(0,1).charAt(0) == x.toString.substring(0,1).charAt(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.specialFilter$$anonfun$2(tmpgcfqhuz7.scala:13)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\
    \tat scala.collection.AbstractIterable.count(Iterable.scala:926)\n\tat Problem$.specialFilter(tmpgcfqhuz7.scala:13)\n\
    \tat Problem$.main(tmpgcfqhuz7.scala:17)\n\tat Problem.main(tmpgcfqhuz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(n => n\
    \ % 10 > 0 && math.floor(n / 10) % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa8dxizcm.scala:17)\n\tat Problem.main(tmpa8dxizcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsIter = nums.iterator.asScala\n\
    \        var count = 0\n        numsIter.foreach { x =>\n            if(x>10)\
    \ {\n                if(x%2 == 1 && x%100 != 0) {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp46mlp623.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsIter\e[0m = nums.iterator.asScala\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value asScala is not a member of Iterator[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums match {\n \
    \           case Nil => 0\n            case x::xs => if(x > 10 && x.toString.charAt(0).toInt\
    \ % 2 == 1 && x.toString.charAt(0).toInt % 2 == 1 && x.toString.charAt(x.length-1).toInt\
    \ % 2 == 1) 1 \n            else specialFilter(xs)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jwmpvyf.scala:15:137 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x::xs => \e[33mif\e[0m(x\
    \ > \e[31m10\e[0m && x.toString.charAt(\e[31m0\e[0m).toInt % \e[31m2\e[0m == \e\
    [31m1\e[0m && x.toString.charAt(\e[31m0\e[0m).toInt % \e[31m2\e[0m == \e[31m1\e\
    [0m && x.toString.charAt(x.length-\e[31m1\e[0m).toInt % \e[31m2\e[0m == \e[31m1\e\
    [0m) \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \             value length is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.filterNot(nums.contains)\n\
    \        if (numsCopy.isEmpty) 0\n        else if (numsCopy.head > 10 && numsCopy.last.asDigit\
    \ % 2 == 1)\n            1\n        else numsCopy.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2s6r0yg7.scala:15:53 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (numsCopy.head\
    \ > \e[31m10\e[0m && numsCopy.last.asDigit % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value asDigit is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = nums.filter(\
    \ x => (x % 10 >= 10) && ((x % 10) % 2 == 1)) \n        count = count + nums.filter(x\
    \ => (x % 10 >= 10) && ((x % 10) % 2 == 0)).size\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpteon4ksq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        count = count + nums.filter(\e[36mx\e[0m => (x\
    \ % \e[31m10\e[0m >= \e[31m10\e[0m) && ((x % \e[31m10\e[0m) % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)).size\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpteon4ksq.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m count\n\
    \e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ Found:    (count : List[Long])\n\e[31m   |\e[0m               Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val list = nums.toList\n\
    \        val result: List[Long] = List.empty[Long]\n        for (x <- list) {\n\
    \            val y = (x % 10).toInt\n            val z = (x % 100).toInt\n   \
    \         if (y % 2 == 1 && z % 2 != 1 && y != z) {\n                result ::=\
    \ x\n            }\n        }\n        result.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdecabtnw.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result ::= x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value ::= is not a member\
    \ of List[Long] - did you mean result.::?\n1 error found\n"
  stdout: ''
  timestamp: 1660029108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.toList match\
    \ {\n            case Nil => 0\n            case head :: tail => {\n         \
    \       if(head.headOption.exists(_ % 2 != 0) && tail.lastOption.exists(_ % 2\
    \ != 0)) {\n                    if(tail.head.headOption.exists(_ % 2 != 0) ||\
    \ tail.last.lastOption.exists(_ % 2 != 0)) {\n                        specialFilter(tail)\n\
    \                    } else {\n                        1\n                   \
    \ }\n                } else {\n                    specialFilter(tail)\n     \
    \           }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcmerq72m.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m(head.headOption.exists(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m) && tail.lastOption.exists(_ % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value headOption is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcmerq72m.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    \e[33mif\e[0m(tail.head.headOption.exists(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m) || tail.last.lastOption.exists(_ % \e[31m2\e\
    [0m != \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value headOption is not a member of\
    \ Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x % 2 == 1 && ((x / 10) % 2) == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2vgohsg.scala:18)\n\tat Problem.main(tmpk2vgohsg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        for (x <- nums if x.toLong > 10) {\n            if (x.toInt % 2 != 0)\
    \ {\n                val first = x.toInt / 10\n                if (first % 2 !=\
    \ 0) {\n                    val last = (x.toInt / 10).toInt\n                \
    \    if (last == 1) {\n                        result += x\n                 \
    \   }\n                }\n            }\n        }\n        result.toList.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zkiln0t.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if(nums.isEmpty)\
    \ 0\n        else {\n            var count = 0\n            var odds = 1\n   \
    \         for((i <- 0 until nums.size)) {\n                if(nums(i) > 10 &&\
    \ i % 2 != 0) {\n                    if(nums(i) > 10) { odds = odds + 1 ; }\n\
    \                    if(nums(i) > 10) { odds = odds + 1 ; }\n                \
    \    count = count + 1\n                }\n            }\n            (count *\
    \ odds)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphfem6kbf.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m((i <- \e[31m0\e[0m until nums.size))\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m        \
    \           ')' expected, but '<-' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphfem6kbf.scala:17:42 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mfor\e[0m((i <- \e[31m0\e[0m until nums.size)) {\n\e\
    [31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                          '<-' expected, but '{' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphfem6kbf.scala:25:8 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphfem6kbf.scala:23:13 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e\
    [0mvalue foreach is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660029110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Write code here\n\
    \        nums.count(x => x > 10) && (nums(0) % 2 == 1) && (nums(nums.length -\
    \ 1) % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdfn32aoi.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m)\
    \ && (nums(\e[31m0\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m) && (nums(nums.length\
    \ - \e[31m1\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value && is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num % 2 == 0 && nums.firstOption.filter(_ % 2 == 0).isDefined).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo8yaviyx.scala:13:60 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e[0m => num > \e[31m10\e\
    [0m && num % \e[31m2\e[0m == \e[31m0\e[0m && nums.firstOption.filter(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m).isDefined).length\n\e[31m\e[31m   |\e[0m                \
    \                                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ firstOption is not a member of List[Long] - did you mean nums.lastOption?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val res = nums.filter(x\
    \ => x > 10 && x(0) % 2 != 0 && x(nums.length-1) % 2 != 0)\n        res.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp0a5y6bh4.scala:13:45 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = nums.filter(\e\
    [36mx\e[0m => x > \e[31m10\e[0m && x(\e[31m0\e[0m) % \e[31m2\e[0m != \e[31m0\e\
    [0m && x(nums.length-\e[31m1\e[0m) % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                                    \e[33mparameter\e[0m \e[35mx\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp0a5y6bh4.scala:13:62\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mres\e[0m = nums.filter(\e[36mx\e[0m => x > \e[31m10\e[0m && x(\e[31m0\e\
    [0m) % \e[31m2\e[0m != \e[31m0\e[0m && x(nums.length-\e[31m1\e[0m) % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \           \e[33mparameter\e[0m \e[35mx\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n       var count = 0\n \
    \      var first = 0\n       var last = 0\n       nums foreach { x => \n     \
    \      if (x > 10) { \n               if (first % 2 == 0 && (last % 2 == 1)) {\n\
    \                   count = count + 1\n               }\n               first\
    \ = x\n               last = x\n           }\n       }\n       count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kdkbyfl.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m               first = x\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (x : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kdkbyfl.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m               last = x\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var ans = nums.size\n\
    \        for (ns <- nums) {\n            val n = math.pow(n, 2)\n            if\
    \ (n > 10l.toLong && n % 1l.toLong % 2l.toLong == 0){\n                ans -=\
    \ 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwze1lmq9.scala:15:29 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = math.pow(n,\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10l && x % 10l == 1l && x % 10l == 3l).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf83kfbkb.scala:17)\n\tat Problem.main(tmpf83kfbkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val count = nums.filter(x\
    \ => x > 10).size\n        val firstOdd = nums.filter(x => x % 2 == 1).size\n\
    \        val lastOdd = nums.filter(x => x % 2 == 0).size\n        (count, firstOdd,\
    \ lastOdd)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_to4yrgi.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (count, firstOdd, lastOdd)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (Int, Int, Int)\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        require(nums.length\
    \ >= 1)\n        val numsHash = nums.toStream.foldLeft(Map[Long, Long]())((acc,\
    \ n) => \n            if (acc.contains(n))\n                acc\n            else\
    \ acc + (n -> (acc(n) + 1))\n        )\n        numsHash.filter(_._2 > 10).filter(_._2._1\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9nletx9p.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        numsHash.filter(_._2 > \e[31m10\e[0m).filter(_._2._1\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                     value _1 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val evens = nums.filter(n\
    \ => n % 2 == 0l)\n        val odds = nums.filter(n => n % 2 != 0l)\n        val\
    \ oddsEvens = odds ++ evens\n        oddsEvens.count{ n => n % 10 % 2 != 0l }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpncua98a6.scala:19)\n\tat Problem.main(tmpncua98a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_ > 10)\
    \ && (nums.take(1).head % 2 != 0) && (nums.last % 2 != 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeni7zqyu.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.take(\e\
    [31m1\e[0m).head % \e[31m2\e[0m != \e[31m0\e[0m) && (nums.last % \e[31m2\e[0m\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value && is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums match {\n \
    \           case Nil => 0\n            case x :: xs => if(x > 10) { specialFilter(xs)\
    \ } else { 1 + specialFilter(xs) }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6re4s1e9.scala:19)\n\tat Problem.main(tmp6re4s1e9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        nums.foreach { x => \n            if (x > 10l && x % 2 == 1l && x % 2\
    \ == 0l && x % 2 != 0l) {\n                count += 1\n            }\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp375_iifc.scala:23)\n\tat Problem.main(tmp375_iifc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsArr = nums.toArray\n\
    \        var count = 0\n        for (a <- 0 until numsArr.length)\n          \
    \  if (numsArr(a) > 10) {\n                count += 1\n                if (numsArr(a).remainder(2).sum\
    \ == 1) {\n                    if (numsArr(a).remainder(2).sum == 1 && numsArr(a).isOdd\
    \ && numsArr(a).tail.isOdd) count += 1\n                }\n            }\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcltcv0ox.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (numsArr(a).remainder(\e\
    [31m2\e[0m).sum == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remainder is not a member of Long, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcltcv0ox.scala:19:35\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mif\e\
    [0m (numsArr(a).remainder(\e[31m2\e[0m).sum == \e[31m1\e[0m && numsArr(a).isOdd\
    \ && numsArr(a).tail.isOdd) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remainder\
    \ is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = nums.filter(num\
    \ => num > 10 && num % 2 == 1 && num % 3 == 1).length\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqvqrpug.scala:18)\n\tat Problem.main(tmpoqvqrpug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.count(x\
    \ => x > 10 && (x % 2) == 1)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2jsvt6f.scala:18)\n\tat Problem.main(tmpk2jsvt6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter((l)\
    \ => l > 10l.toLong && l.toLong.mod(2l.toLong) == 1).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpunh1fd12.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter((\e[36ml\e[0m) => l > \e[31m10l\e\
    [0m.toLong && l.toLong.mod(\e[31m2l\e[0m.toLong) == \e[31m1\e[0m).size\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue mod is not a member of Long, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val n = nums.length\n\
    \        var count = 0L\n        for (i <- 0 until n) {\n            if (nums(i)\
    \ > 10L) {\n                if (nums(i) % 2L != 1L)\n                    count+=1\n\
    \                if (nums(i) % 2L != 0L)\n                    count+=1\n     \
    \       }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplm14ssh6.scala:27)\n\tat Problem.main(tmplm14ssh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var filteredNums\
    \ = nums\n        var cnt = 0\n        for (num <- filteredNums) {\n         \
    \   if (num > 10) cnt += 1\n            else if ((num % 2) == 0) cnt += 1\n  \
    \          else cnt += 0\n        }\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41rnu61o.scala:23)\n\tat Problem.main(tmp41rnu61o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var numsRes : List[Long]\
    \ = nums\n        var sum = 0\n        for(n <- nums) {\n            if (n > 10l.toLong\
    \ && numsRes.last._1 % 2 == 0 && numsRes.head._1 % 2 == 1)\n                sum\
    \ = sum + 1\n            numsRes = numsRes.tail\n        }\n        sum.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7166_ijq.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (n > \e[31m10l\e[0m.toLong\
    \ && numsRes.last._1 % \e[31m2\e[0m == \e[31m0\e[0m && numsRes.head._1 % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7166_ijq.scala:16:75\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m\
    \ (n > \e[31m10l\e[0m.toLong && numsRes.last._1 % \e[31m2\e[0m == \e[31m0\e[0m\
    \ && numsRes.head._1 % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (x <- nums) {\n            if (x > 10 && nums(0) % 2 == 0 && nums(1)\
    \ % 2 == 0) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_hi07zr.scala:23)\n\tat Problem.main(tmpi_hi07zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if(nums.isEmpty)\
    \ 0\n        else {\n            val first = nums(0)\n            val last = nums(nums.length\
    \ - 1)\n            val firstOdd = (first / 2).mod(BigInt(2))\n            val\
    \ lastOdd = (last / 2).mod(BigInt(2))\n            if(firstOdd && lastOdd) 1\n\
    \            else\n                nums.length - specialFilter(nums.dropRight(1).drop(1))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkq_nf43g.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mfirstOdd\e[0m = (first\
    \ / \e[31m2\e[0m).mod(BigInt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Long, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkq_nf43g.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mlastOdd\e[0m = (last\
    \ / \e[31m2\e[0m).mod(BigInt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Long, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num % 2 == 1 && num % 2 == 1 && num % 2 == 1).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj7jwn3er.scala:18)\n\tat Problem.main(tmpj7jwn3er.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num.asInstanceOf[Long] % 2 == 0 && num.asInstanceOf[Long] % 2\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86w88_l0.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e\
    [0m => num > \e[31m10\e[0m && num.asInstanceOf[\e[35mLong\e[0m] % \e[31m2\e[0m\
    \ == \e[31m0\e[0m && num.asInstanceOf[\e[35mLong\e[0m] % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      val oddFirst = nums.filter(_\
    \ % 2 == 1).head\n      val oddLast = nums.filter(_ % 2 == 1).last\n      val\
    \ firstOdd = nums.filter(_ % 2 == 0 & _ % 1 == 0).head\n      val lastOdd = nums.filter(_\
    \ % 2 == 0 & _ % 1 == 0).last\n      val evenFirst = nums.filter(_ % 2 == 0).head\n\
    \      val evenLast = nums.filter(_ % 2 == 0).last\n      val numsGreaterThan10\
    \ = nums.filter(_ > 10)\n      val firstOddEven = numsGreaterThan10.filter(_ %\
    \ 2 == 0 & _ % 1 == 0).head\n      val lastOddEven = numsGreaterThan10.filter(_\
    \ % 2 == 0 & _ % 1 == 0).last\n      val evenFirstOdd = numsGreaterThan10.filter(_\
    \ % 2 == 0 & _ % 1 == 1).head\n      val evenLastOdd = numsGreaterThan10.filter(_\
    \ % 2 == 0 & _ % 1 == 1).last\n      (oddFirst + oddLast + evenFirst + evenLast\
    \ + firstOdd + lastOdd + evenFirst + evenLast + firstOddEven + lastOddEven + evenFirstOdd\
    \ + evenLastOdd + numsGreaterThan10).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpiqpppldt.scala:15:33 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mfirstOdd\e[0m = nums.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m & _ % \e[31m1\e[0m == \e[31m0\e[0m).head\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpiqpppldt.scala:16:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e\
    [36mlastOdd\e[0m = nums.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m & _ % \e[31m1\e\
    [0m == \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpiqpppldt.scala:20:50 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m      \e[33mval\e[0m \e[36mfirstOddEven\e[0m = numsGreaterThan10.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m & _ % \e[31m1\e[0m == \e[31m0\e[0m).head\n\e\
    [31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpiqpppldt.scala:21:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e\
    [36mlastOddEven\e[0m = numsGreaterThan10.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m & _ % \e[31m1\e[0m == \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpiqpppldt.scala:22:50 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mevenFirstOdd\e[0m = numsGreaterThan10.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m & _ % \e[31m1\e[0m == \e[31m1\e[0m).head\n\e\
    [31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of param"
  stdout: ''
  timestamp: 1660029118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0\n\
    \        for(num <- nums) if(num > 10) result += num.toInt\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp093ql9hp.scala:19)\n\tat Problem.main(tmp093ql9hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_.toString.toLong\
    \ > 10 && nums.head.toString.toLong % 2 == 1 && nums.last.toString.toLong % 2\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__bm_svi.scala:17)\n\tat Problem.main(tmp__bm_svi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var evenCount =\
    \ 0\n        var oddCount = 0\n        var firstOddCount = 0\n        var lastOddCount\
    \ = 0\n        for (i <- nums) {\n            if (i % 2 != 0) {\n            \
    \    if (i > 10) {\n                    if (i >= 100) {\n                    \
    \    if (i >= 10000) {\n                            if (i >= 100000) {\n     \
    \                           if (i >= 1000000) {\n                            \
    \        if (i >= 10000000) {\n                                        if (i >=\
    \ 100000000) {\n                                            if (i >= 1000000000)\
    \ {\n                                                if (i >= 10000000000) {\n\
    \                                                    if (i >= 100000000000) {\n\
    \                                                        if (i >= 1000000000000)\
    \ {\n                                                            if (i >= 100000000000000)\
    \ {\n                                                                evenCount\
    \ += 1\n                                                                if (i\
    \ % 2 != 0) {\n                                                              \
    \      firstOddCount += 1\n                                                  \
    \              }\n                                                           \
    \ }\n                                                            else {\n    \
    \                                                            evenCount += 1\n\
    \                                                                lastOddCount\
    \ += 1\n                                                            }\n      \
    \                                                  }\n                       \
    \                                 else {\n                                   \
    \                         evenCount += 1\n                                   \
    \                         lastOddCount += 1\n                                \
    \                        }\n                                                 \
    \   }\n                                                    else {\n          \
    \                                              evenCount += 1\n              \
    \                                          lastOddCount += 1\n               \
    \                                     }\n                                    \
    \            }\n                                                else {\n     \
    \                                               evenCount += 1\n             \
    \                                       lastOddCount += 1\n                  \
    \                              }\n                                           \
    \ }\n                                            else {\n                    \
    \                            evenCount += 1\n                                \
    \                lastOddCount += 1\n                                         \
    \   }\n                                        }\n                           \
    \             else {\n                                            evenCount +=\
    \ 1\n                                            lastOddCount += 1\n         \
    \                               }\n                                    }\n   \
    \                                 else {\n                                   \
    \     evenCount += 1\n                                        lastOddCount +=\
    \ 1\n                                    }\n                                }\n\
    \                                else {\n                                    evenCount\
    \ += 1\n                                    lastOddCount += 1\n              \
    \                  }\n                            }\n                        \
    \    else {\n                                evenCount += 1\n                \
    \                lastOddCount += 1\n                            }\n          \
    \              }\n                        else {\n                           \
    \ evenCount += 1\n                            lastOddCount += 1\n            \
    \            }\n                    }\n                    else {\n          \
    \              evenCount += 1\n                        lastOddCount += 1\n   \
    \                 }\n                }\n                else {\n             \
    \       evenCount += 1\n                    lastOddCount += 1\n              \
    \  }\n            }\n            else {\n                evenCount += 1\n    \
    \            lastOddCount += 1\n            }\n        }\n        (evenCount,\
    \ firstOddCount, lastOddCount)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjxc6bjs3.scala:27:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                                                \e[33mif\e\
    [0m (i >= \e[31m10000000000\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                   number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmpjxc6bjs3.scala:28:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                                                    \e\
    [33mif\e[0m (i >= \e[31m100000000000\e[0m) {\n\e[31m\e[31m   |\e[0m          \
    \                                                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmpjxc6bjs3.scala:29:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                                                    \
    \    \e[33mif\e[0m (i >= \e[31m1000000000000\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpjxc6bjs3.scala:30:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                                                    \
    \        \e[33mif\e[0m (i >= \e[31m100000000000000\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                                                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjxc6bjs3.scala:101:8\
    \ --------------------\e[0m\e[0m\n\e[31m101 |\e[0m        (evenCount, firstOddCount,\
    \ lastOddCount)\n\e[31m\e[31m    |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m    |\e[0m        Found:    (Int, Int, Int)\n\e[31m    |\e[0m     \
    \   Required: Long\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.toSet.count(_\
    \ > 10 && _ % 2 != 0 && _ % 2 != 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp93rmxp85.scala:13:23 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      nums.toSet.count(_ > \e[31m10\e[0m && _ % \e[31m2\e\
    [0m != \e[31m0\e[0m && _ % \e[31m2\e[0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toArray\n\
    \        numsCopy.takeWhile( n => n > 10).count( n => n % 2 == 1)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1u4yadt.scala:19)\n\tat Problem.main(tmpc1u4yadt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val set  = new mutable.HashSet[Long]\n\
    \        val map  = mutable.Map[Long, Long]()\n\n        for (n <- nums) {\n \
    \           if (n > 10 && n % 2 == 1 && n % 3 == 1) set.add(n)\n        }\n\n\
    \        set.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46uovw2r.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m  = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46uovw2r.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m  = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(num >\
    \ 10 && num.modulo(2) == 1 && num.modulo(2) == -1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75mwpl07.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(num > \e[31m10\e[0m && num.modulo(\e\
    [31m2\e[0m) == \e[31m1\e[0m && num.modulo(\e[31m2\e[0m) == -\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m              \
    \     Not found: num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (num <- nums)\
    \ {\n            if ((num.toLong > 10) && (num.toLong % 2 == 1) && (num.toLong\
    \ % 2 == 0)) {\n                count += 1\n                if (lastDigit % 2\
    \ == 1) {\n                    lastDigit = 0\n                }\n            }\n\
    \            else {\n                lastDigit += 1\n                if (firstDigit\
    \ % 2 == 1) {\n                    firstDigit = 0\n                }\n       \
    \     }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeh6gxorg.scala:34)\n\tat Problem.main(tmpeh6gxorg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.foldLeft(0l)\
    \ {\n            case (acc, elem) => { \n                if (elem > 10l) acc +\
    \ 1 \n                if (elem > 10l && elem % 2 == 1) acc + 1 \n            \
    \    if (elem > 10l && elem % 2 != 1) acc + 1\n                if (elem > 10l\
    \ && elem % 2 == 0 && elem % 2 != 1) acc + 1 \n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphtfu212m.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m\
    \ (elem > \e[31m10l\e[0m && elem % \e[31m2\e[0m == \e[31m0\e[0m && elem % \e[31m2\e\
    [0m != \e[31m1\e[0m) acc + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Found:    Unit\n\e[31m   |\e[0m                Required: Long\n\
    \e[31m   |\e[0m                Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastOdd = false\n        var lastEven = false\n        var firstOdd\
    \ = false\n        var firstEven = false\n        for (i<- nums){\n          \
    \  if (i>10){\n                count += 1\n            }\n            if(i%2==1){\n\
    \                firstEven = true\n            }\n            if(i%2==0){\n  \
    \              firstOdd = true\n            }\n            if(lastEven==true &&\
    \ i%2==0){\n                lastEven = false\n            }\n            if(lastOdd==true\
    \ && i%2==1){\n                lastOdd = false\n            }\n        }\n   \
    \     return count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjaior96c.scala:39)\n\tat Problem.main(tmpjaior96c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).count(n => n.toString.length == 3 && n.toString.substring(0, 1).toInt ==\
    \ 1 && n.toString.substring(n.toString.length - 1).toInt == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbuw5pj7y.scala:17)\n\tat Problem.main(tmpbuw5pj7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        require(nums.length\
    \ == nums.filter(x => x >= 10).length, \"wrong number of elements\")\n       \
    \ require(nums.map(x => math.abs(math.floor(x)).toInt).sum == nums.filter(x =>\
    \ x >= 10).length, \"first and last digits of odd numbers is not same\")\n   \
    \     nums.filter(x => x > 10).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed: wrong number of\
    \ elements\n\tat scala.Predef$.require(Predef.scala:337)\n\tat Problem$.specialFilter(tmpftt9t_jy.scala:13)\n\
    \tat Problem$.main(tmpftt9t_jy.scala:18)\n\tat Problem.main(tmpftt9t_jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val count = new\
    \ mutable.HashMap[Int, Int]()\n        for(i <- 1 to nums.size) {\n          \
    \  val num = nums(i - 1)\n            if (num > 10) {\n                count.put(num.toInt,\
    \ count.get(num.toInt) + 1)\n            }\n        }\n        count.values.filter(x\
    \ => x > 1 && x % 2 == 0).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6f_b0__3.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for ( num <- nums ) {\n            if (num > 10) {\n                if\
    \ (num % 2 == 1 && num % 2 == 0)\n                    set += num\n           \
    \ }\n        }\n        set.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nk7g5hu.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for(n <- nums) {\n            if (n > 10 && n % 2 != 0 && n % 2 != 1\
    \ && n % 2 != 3)\n                count += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbp3k44ud.scala:22)\n\tat Problem.main(tmpbp3k44ud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var numsLen = nums.size\n\
    \        var sum = 0\n        var oddNum = false\n\n        for (i <- 0 until\
    \ numsLen) {\n            if (nums(i) > 10l) {\n                if (oddNum) {\n\
    \                    numsLen -= 1\n                } else {\n                \
    \    sum += nums(i).toLong\n                }\n            } else {\n        \
    \        if (oddNum) {\n                    oddNum = false\n                }\
    \ else {\n                    oddNum = true\n                }\n            }\n\
    \        }\n\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpigba4pxf.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    sum += nums(i).toLong\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && nums(0) % 2 != nums(1) % 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpprvyj75n.scala:17)\n\tat Problem.main(tmpprvyj75n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val even = nums.filter(_\
    \ % 2 == 0).toList\n        val odd = nums.filter(_ % 2 != 0).toList\n       \
    \ val odd1 = odd.head\n        val odd2 = odd.last\n        val firstOdd = odd.take(1)\n\
    \        val lastOdd = odd.drop(1)\n        val firstEven = even.take(1)\n   \
    \     val lastEven = even.drop(1)\n\n        val count1 = even.count(i => i >\
    \ 10 && i % 2 == 1) // count where evens and first is odd\n        val count2\
    \ = odd.count(i => i > 10 && i % 2 == 1) // count where odds and last is even\n\
    \        val count3 = firstOdd.count(i => i > 10 && i % 2 == 1) // count where\
    \ first and last are odd\n        val count4 = lastOdd.count(i => i > 10 && i\
    \ % 2 == 1) // count where first and last are even\n\n        val sum1 = count1\
    \ + count3 + count4\n        val sum2 = count2 + count4\n        val sum3 = count1\
    \ + count2\n        val sum4 = count3 + count1\n\n        val firstOdd1 = firstOdd.count(i\
    \ => i > 10 && i % 2 == 1)\n        val lastOdd1 = lastOdd.count(i => i > 10 &&\
    \ i % 2 == 1)\n        val firstEven1 = firstEven.count(i => i > 10 && i % 2 ==\
    \ 1)\n        val lastEven1 = lastEven.count(i => i > 10 && i % 2 == 1)\n\n  \
    \      val firstOdd2 = firstOdd.count(i => i > 10 && i % 2 != 1)\n        val\
    \ lastOdd2 = lastOdd.count(i => i > 10 && i % 2 != 1)\n        val firstEven2\
    \ = firstEven.count(i => i > 10 && i % 2 != 1)\n        val lastEven2 = lastEven.count(i\
    \ => i > 10 && i % 2 != 1)\n\n        // sum of all odds\n        val sum5 = sum1\
    \ + sum3 + sum4 + sum5\n        // sum of all evens\n        val sum6 = sum1 +\
    \ sum2 + sum4 + sum5\n        // sum of first and last odds\n        val sum7\
    \ = firstOdd1 + lastOdd1 + sum6\n        // sum of first and last evens\n    \
    \    val sum8 = firstEven1 + lastEven1 + sum6\n        // sum of first and last\
    \ odds and evens\n        val sum9 = firstOdd1 + lastOdd2 + firstEven2 + sum6\n\
    \        // sum of first and last odds and evens\n        val sum10 = firstOdd2\
    \ + lastOdd\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07f7pyr4.scala:43:40 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36msum5\e[0m = sum1 + sum3\
    \ + sum4 + sum5\n\e[31m\e[31m   |\e[0m                                       \
    \ ^\e[0m\n\e[31m   |\e[0m                                        Recursive \e\
    [33mvalue\e[0m \e[35msum5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp07f7pyr4.scala:53:30 -----------------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36msum10\e[0m = firstOdd2 + lastOdd\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\
    \e[31m   |\e[0m match arguments ((lastOdd : List[Long]))\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp07f7pyr4.scala:54:5 ---------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Add your code\
    \ here\n        val count = 1\n        val oddAndFirstOdd = nums.map(x => (x %\
    \ 10, x%10)).filter(x => x._1 == 1 && x._2%2 == 1).length\n        val oddAndLastOdd\
    \ = nums.map(x => (x % 10, x%10)).filter(x => x._1 == 1 && x._2%2 == -1).length\n\
    \        if (oddAndFirstOdd > 0 && oddAndLastOdd > 0) count\n        else 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nb46jc7.scala:22)\n\tat Problem.main(tmp0nb46jc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val set = nums.toSet\n\
    \        if(set.forall(n => n % 2 != 0)) return 0\n        if(set.forall(n =>\
    \ n % 2 == 0 && n < 10)) return 1\n        if(set.forall(n => n % 2 == 1 && n\
    \ < 10)) return 1\n        if(set.forall(n => n % 2 == 1 && n > 10)) return 3\n\
    \        if(set.forall(n => n % 2 == 0 && n > 10)) return 5\n        if(set.forall(n\
    \ => n % 2 != 1 && n < 10)) return 2\n        7\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_6xg1mc.scala:23)\n\tat Problem.main(tmp7_6xg1mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 == 1 && numsCopy.last\
    \ % 2 == 1) numsCopy.remove(x)\n        })\n        numsCopy.length\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzugjy5tp.scala:15:73 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (x > \e[31m10\e[0m && x % \e\
    [31m2\e[0m == \e[31m1\e[0m && numsCopy.last % \e[31m2\e[0m == \e[31m1\e[0m) numsCopy.remove(x)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1660029130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Write your code\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefrnyir_.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mspecialFilter\e\
    [0m(\e[36mnums\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    Unit\n\
    \e[31m   |\e[0m                                                  Required: Long\n\
    \e[31m13 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m14 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Write your code\
    \ here.\n        nums.filter(num => num > 10 && num % 2 == 0 && num / 10 % 2 ==\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvaqze3nt.scala:14:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        nums.filter(\e[36mnum\e\
    [0m => num > \e[31m10\e[0m && num % \e[31m2\e[0m == \e[31m0\e[0m && num / \e[31m10\e\
    [0m % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numList = nums.toList\n\
    \        numList.count(i => i > 10 && nums(0) % 2 == 1 && nums(nums.length - 1)\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeavl7knc.scala:18)\n\tat Problem.main(tmpeavl7knc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i >= 10l) {\n                if (i\
    \ % 2 != 1l && i % 2 != 3l) {\n                    count += 1\n              \
    \  }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rg7otzy.scala:26)\n\tat Problem.main(tmp6rg7otzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\n\
    \            return 0\n        var counter = 0\n        var temp = nums.head\n\
    \        var remainder = nums.tail.filter(x => x > 10).length\n        while (temp.map(x\
    \ => math.gcd(x, temp)).sum != 1) {\n            if (remainder % 2 == 1)\n   \
    \             counter += 1\n            temp /= 10\n            remainder /= 2\n\
    \        }\n        counter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81x76huj.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (temp.map(\e[36mx\e[0m => math.gcd(x,\
    \ temp)).sum != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(x => x\
    \ > 10 &&  x % 2 == 1 && x % 5 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmf50q_4o.scala:17)\n\tat Problem.main(tmpmf50q_4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val digits = nums.map(_.toString.toInt)\n\
    \        digits.filter(_ > 10).filter(_ % 2 != 0).filter(_ % 2 == 1).size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26qbg46t.scala:19)\n\tat Problem.main(tmp26qbg46t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.foldLeft(0)((x,\
    \ y) => if (x > 10 && y % 2 != 0 && y % 3 != 0) x + 1 else y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyqv1iowl.scala:13:86\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        nums.foldLeft(\e[31m0\e\
    [0m)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x > \e[31m10\e[0m && y % \e\
    [31m2\e[0m != \e[31m0\e[0m && y % \e[31m3\e[0m != \e[31m0\e[0m) x + \e[31m1\e\
    [0m \e[33melse\e[0m y)\n\e[31m\e[31m   |\e[0m                                \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (y : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n       nums match {\n  \
    \         case Nil => 0\n           case x :: y => (x % 10 == 0 && (y % 2 == 0)\
    \ && y % 10 == 1) \n                              ? 1 + specialFilter(y)\n   \
    \                           : specialFilter(x)\n       }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpelzv98z5.scala:17:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                              : specialFilter(x)\n\e\
    [31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                 end of statement expected but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelzv98z5.scala:15:45 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m           \e[33mcase\e[0m x :: y => (x % \e[31m10\e\
    [0m == \e[31m0\e[0m && (y % \e[31m2\e[0m == \e[31m0\e[0m) && y % \e[31m10\e[0m\
    \ == \e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m                                   \
    \        ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelzv98z5.scala:15:60\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m           \e[33mcase\e[0m\
    \ x :: y => (x % \e[31m10\e[0m == \e[31m0\e[0m && (y % \e[31m2\e[0m == \e[31m0\e\
    [0m) && y % \e[31m10\e[0m == \e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m           \
    \                                               ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(n =>\
    \ \n            {\n                if (n % 2 == 0 && (n % 2 == 1 || n % 3 == 0))\n\
    \                {\n                    if (n >= 10 && n%10 % 2 == 0)\n      \
    \                  return true\n                }\n                else\n    \
    \                return false\n            }\n        )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphidzow7z.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                        \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (\e[31mtrue\e[0m\
    \ : Boolean)\n\e[31m   |\e[0m                               Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphidzow7z.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mreturn\e\
    [0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (\e[31mfalse\e[0m : Boolean)\n\
    \e[31m   |\e[0m                           Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 1\n\
    \        for (nl <- nums)\n            if (nl > 10 && nl % 2 == 0 && nl % 3 ==\
    \ 0)\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdvemkxp_.scala:20)\n\tat Problem.main(tmpdvemkxp_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => {\n            val first = num / 10;\n            val last = num % 10;\n\
    \            first % 2 == 1 && last % 2 == 1\n        }).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpp19o17.scala:22)\n\tat Problem.main(tmpxpp19o17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val x = nums.filter(_\
    \ > 10).length\n        val y = nums.filter(_ % 2 == 1).length\n        val z\
    \ = nums.filter(_ % 2 == 0).length\n        if (y > x && x > z) x\n        else\
    \ z\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpldueg3x8.scala:20)\n\tat Problem.main(tmpldueg3x8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstOddDigit(num\
    \ : Long) : Boolean = {\n            if (num > 0 && num < Integer.MAX_VALUE) {\n\
    \                if (num % 2 == 0) return true\n            }\n            false\n\
    \        }\n        def lastOddDigit(num : Long) : Boolean = {\n            if\
    \ (num > 0 && num < Integer.MAX_VALUE) {\n                if (num % 2 != 0) return\
    \ true\n            }\n            false\n        }\n        val l = nums.length\n\
    \        var sum = 0\n        for (i <- 0 to (l - 1).toInt) {\n            val\
    \ n = nums(i).toLong\n            if (firstOddDigit(n) && lastOddDigit(n)) {\n\
    \                sum += n\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpipodlj3o.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                sum += n\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (n <- nums) \n            if (n > 10L && n.toString.tail.tail.tail.toString.toInt\
    \ == 1) \n                count += n\n        count \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd944km5e.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                count += n\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsFiltered\
    \ = nums.filter(num => {\n            val firstDigit = num % 10\n            val\
    \ lastDigit = num / 10\n            val firstDigitOdd = (firstDigit % 2) == 0\n\
    \            val lastDigitOdd = (lastDigit % 2) == 0\n            firstDigit >\
    \ 10 && lastDigit > 10 && firstDigitOdd && lastDigitOdd\n        })\n        numsFiltered.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6m6_ood.scala:24)\n\tat Problem.main(tmpz6m6_ood.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = nums.filterNot(_.toInt%2\
    \ == 0).length\n        if(nums.length >= 2) {\n            if(nums(1) % 2 ==\
    \ 0) result += 1\n            result += nums(nums.length-1) % 2 == 1\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgnt7kw7o.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(nums(\e[31m1\e[0m) % \e[31m2\e\
    [0m == \e[31m0\e[0m) result += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpgnt7kw7o.scala:16:19 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result += nums(nums.length-\e[31m1\e[0m) % \e[31m2\e\
    [0m == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value += is not a member of Int - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = nums.filter{_\
    \ > 10} \n        result.count{ _._1 >= 1 &&  _._1 <= 3 } \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpl12xqjut.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result.count{ _._1 >= \e[31m1\e[0m &&  _._1 <=\
    \ \e[31m3\e[0m } \n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def findEven(a :\
    \ List[Long]) : List[Long] = a.filterNot(_ % 2 == 0)\n        def findOdd(a :\
    \ List[Long]) : List[Long] = a.filterNot(_ % 2 != 0)\n\n        val evens = findEven(nums)\n\
    \        val odds = findOdd(nums)\n        \n        if(evens.isEmpty && odds.isEmpty)\
    \ {\n            return 0\n        }\n        if(evens.isEmpty) {\n          \
    \  return odds.length\n        }\n        if(odds.isEmpty) {\n            return\
    \ evens.length\n        }\n        val even = evens.head\n        val odd = odds.head\n\
    \        \n        if((even % 2 != 0 && odd.length == 1) || (even % 2 == 0 &&\
    \ odd.length == 2)) {\n            return 0\n        }\n        return even.length\
    \ + odd.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9_qnwj8.scala:31:33 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m((even % \e[31m2\e[0m != \e[31m0\e\
    [0m && odd.length == \e[31m1\e[0m) || (even % \e[31m2\e[0m == \e[31m0\e[0m &&\
    \ odd.length == \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                      \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value length\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9_qnwj8.scala:31:71\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m((even\
    \ % \e[31m2\e[0m != \e[31m0\e[0m && odd.length == \e[31m1\e[0m) || (even % \e\
    [31m2\e[0m == \e[31m0\e[0m && odd.length == \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e\
    [0m                                                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9_qnwj8.scala:34:20\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mreturn\e[0m\
    \ even.length + odd.length\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value length is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val oddFirst = nums.filter(x\
    \ => x % 2 == 1)\n        val oddLast = nums.filter(x => x % 2 == 0)\n       \
    \ oddFirst.count(x => x > 10 && x % 2 == 1)\n        oddLast.count(x => x > 10\
    \ && x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptck9__ob.scala:21)\n\tat Problem.main(tmptck9__ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\
    \ 0\n        else {\n            val first = nums.head\n            val last =\
    \ nums.last\n            val num1 = (first - last).toInt\n            if (num1\
    \ == 0) nums.head + specialFilter(nums.tail) \n            else if (num1 % 2 ==\
    \ 0) nums.head + specialFilter(nums.tail) \n            else nums.head + specialFilter(nums.tail.filter(_\
    \ % 2 == 1))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_ybu_up.scala:24)\n\tat Problem.main(tmpk_ybu_up.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var sum = 0\n  \
    \      var count = 0\n        var first = 0\n        var last = 0\n        for(i\
    \ <- 0 until nums.size) {\n            sum = nums(i) + sum\n            count++\n\
    \            if (sum > 10) {\n                last = 0\n            }\n      \
    \      if (first % 2 == 0) {\n                first = first + 1\n            }\n\
    \            if (last % 2 == 0) {\n                last = last + 1\n         \
    \   }\n        }\n        if (count > 1) {\n            count\n        } else\
    \ {\n            0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt5lgprfm.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            count++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5lgprfm.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum = nums(i) + sum\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.toList.filter(_\
    \ > 10).count(x => x.first % 2 == 1 && x.last % 2 == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyhc0cjq2.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.toList.filter(_ > \e[31m10\e[0m).count(\e\
    [36mx\e[0m => x.first % \e[31m2\e[0m == \e[31m1\e[0m && x.last % \e[31m2\e[0m\
    \ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ first is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var filteredNums\
    \ = 0\n        var firstOdd: Long = 0\n        var lastOdd: Long = 0\n       \
    \ for(i <- nums){\n            if(i>10){\n                if(firstOdd == 1){\n\
    \                    filteredNums = filteredNums + 1\n                }\n    \
    \            if(lastOdd == 1){\n                    filteredNums = filteredNums\
    \ + 1\n                }\n                if(firstOdd == 1 && lastOdd == 1){\n\
    \                    filteredNums = filteredNums + 1\n                }\n    \
    \            firstOdd = 0\n                lastOdd = 0\n            }else{\n \
    \               firstOdd = firstOdd + 1\n                if(i % 2 == 0){\n   \
    \                 lastOdd = lastOdd + 1\n                }\n            }\n  \
    \      }\n        filteredNums\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf3v4rzgi.scala:41)\n\tat Problem.main(tmpf3v4rzgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 1\n\
    \        nums.foreach{ num =>\n            if(num > 10 && num % 2 == 0 && num\
    \ > num.take(2).sum / 2)\n                result += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprlpv4u1r.scala:15:53 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(num > \e[31m10\e[0m && num\
    \ % \e[31m2\e[0m == \e[31m0\e[0m && num > num.take(\e[31m2\e[0m).sum / \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value take is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val even = nums.filter(x\
    \ => x % 2 == 0l)\n        val odd = nums.filter(x => x % 2 != 0l)\n        val\
    \ evenodd = even.zip(odd)\n        evenodd.size + (even(0l) * even(-1l) * odd(-1l))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpff2zt241.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenodd.size + (even(\e\
    [31m0l\e[0m) * even(-\e[31m1l\e[0m) * odd(-\e[31m1l\e[0m))\n\e[31m\e[31m   |\e\
    [0m                             ^^\e[0m\n\e[31m   |\e[0m                     \
    \        Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                   \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpff2zt241.scala:16:40 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        evenodd.size + (even(\e[31m0l\e[0m) * even(-\e[31m1l\e[0m) * odd(-\e\
    [31m1l\e[0m))\n\e[31m\e[31m   |\e[0m                                        ^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (\e[31m-1L\e\
    [0m : Long)\n\e[31m   |\e[0m                                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpff2zt241.scala:16:51\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenodd.size + (even(\e\
    [31m0l\e[0m) * even(-\e[31m1l\e[0m) * odd(-\e[31m1l\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (\e[31m-1L\e[0m :\
    \ Long)\n\e[31m   |\e[0m                                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(_ > 10).count(_\
    \ > 10 && _ % 2 == 1).count(_ > 10 && _ % 2 != 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmparqoqvzm.scala:13:32 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      nums.filter(_ > \e[31m10\e[0m).count(_ > \e[31m10\e\
    [0m && _ % \e[31m2\e[0m == \e[31m1\e[0m).count(_ > \e[31m10\e[0m && _ % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var digit = 1\n        nums.foreach { n =>\n            if (n.toInt %\
    \ 2 == 1 && n.toInt / 2 % 2 == 1) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcuk38aho.scala:25)\n\tat Problem.main(tmpcuk38aho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && (x % 2).isOdd && x % 10.isOdd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhi1det0.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m\
    \ && (x % \e[31m2\e[0m).isOdd && x % \e[31m10\e[0m.isOdd)\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwhi1det0.scala:13:58 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m\
    \ && (x % \e[31m2\e[0m).isOdd && x % \e[31m10\e[0m.isOdd)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value isOdd is not a member of\
    \ Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val x = nums.filter(n\
    \ => n.toString.length > 0).size\n        val y = nums.filter(n => n.toString.startsWith(\"\
    0\")).size\n        val z = nums.filter(n => n.toString.endsWith(\"0\")).size\n\
    \        if (x > 10l && y > 10l && z > 10l) 1\n        else 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpha4b3cax.scala:21)\n\tat Problem.main(tmpha4b3cax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsLength =\
    \ nums.length\n        val count = new mutable.HashMap[Long, Int]()\n        val\
    \ isOdd = new mutable.HashMap[Long, Boolean]()\n        val firstOdd = new mutable.HashMap[Long,\
    \ Boolean]()\n        val lastOdd = new mutable.HashMap[Long, Boolean]()\n   \
    \     for (i <- 0 until numsLength) {\n            val num = nums(i)\n       \
    \     count(num)+= 1\n            if(num % 10 == 0) isOdd(num) = True\n      \
    \      if(num % 10 == 1 && i > 0) {\n                val firstNum = nums(i-1)\n\
    \                if(firstNum % 2 == 1) firstOdd(firstNum) = True\n           \
    \ }\n            if(num % 10 == 0 && i > 0) {\n                val lastNum = nums(i-1)\n\
    \                if(lastNum % 2 == 1) lastOdd(lastNum) = True\n            }\n\
    \        }\n        \n        val numsOdd = isOdd.filter(_._2)\n        val numsFirstOdd\
    \ = firstOdd.filter(_._2)\n        val numsLastOdd = lastOdd.filter(_._2)\n  \
    \      \n        numsLength match {\n            case 0 => (0l)\n            case\
    \ 1 =>\n                if(numsFirstOdd(0l) && numsLastOdd(0l)) (1l)\n       \
    \         else 0l\n            case 2 =>\n                if(numsFirstOdd(0l)\
    \ && numsLastOdd(1l)) (1l)\n                else 0l\n            case 3 =>\n \
    \               if(numsFirstOdd(0l) && numsLastOdd(1l) && numsLastOdd(2l)) (1l)\n\
    \                else 0l\n            case 4 =>\n                if(numsFirstOdd(0l)\
    \ && numsLastOdd(1l) && numsLastOdd(2l) && numsLastOdd(3l)) (1l)\n           \
    \     else 0l\n            case 5 =>\n                if(numsFirstOdd(0l) && numsLastOdd(1l)\
    \ && numsLastOdd(2l) && numsLastOdd(3l) && numsLastOdd(4l)) (1l)\n           \
    \     else 0l\n            case 6 =>\n                if(numsFirstOdd(0l) && numsLastOdd(1l)\
    \ && numsLastOdd(2l) && numsLastOdd(3l) && numsLastOdd(4l) && numsLastOdd(5l))\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8c0ty0k.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but unindent found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpg8c0ty0k.scala:67:0 ----------------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8c0ty0k.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8c0ty0k.scala:15:24\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36misOdd\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg8c0ty0k.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfirstOdd\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg8c0ty0k.scala:17:26 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mlastOdd\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1660029147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count({n =>\
    \ n > 10 && n % 2 == 1 && (n%10%2)==1L})\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpicb3dyli.scala:18)\n\tat Problem.main(tmpicb3dyli.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count( x =>\
    \ x % 10 > 10 && (x % 10 % 2 == 1) )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov4unkis.scala:17)\n\tat Problem.main(tmpov4unkis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count : Long\
    \ = 0\n        var first : Long = -1\n        var last : Long = -1\n        var\
    \ oddity : Boolean = false\n        var oddity1 : Boolean = false\n        for(i\
    \ <- 0 until nums.length){\n            if(nums(i) > 10){\n                count\
    \ = count + 1\n                if(oddity == true && oddity1 == true){\n      \
    \              oddity = false\n                }\n                if(first ==\
    \ -1 || nums(i) < first){\n                    first = nums(i)\n             \
    \       oddity = true\n                }\n                if(last == -1 || nums(i)\
    \ > last){\n                    last = nums(i)\n                    oddity1 =\
    \ true\n                }\n            }\n        }\n        if(oddity == true\
    \ && oddity1 == true){\n            count = count + 1\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxkrsslnl.scala:41)\n\tat Problem.main(tmpxkrsslnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      val numSet = nums.toSet\n\
    \      numSet.count(_ > 10)\n      numSet.count(_ % 2 == 1 && _ % 2 != 0)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzglj51jn.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      numSet.count(_ % \e[31m2\e[0m == \e[31m1\e[0m &&\
    \ _ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count : Long\
    \ = 0\n        for(i <- 0 until nums.length - 1) \n        {\n            if(nums(i)\
    \ > 10 && nums(i) % 2 == 0 && nums(i-1) % 2 == 1)\n            {\n           \
    \     count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmporx8q97m.scala:25)\n\tat Problem.main(tmporx8q97m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums match{\n  \
    \          case Nil => 0\n            case head :: tail => \n                if(head\
    \ > 10 && head.lastDig % 2 == 1) specialFilter(tail)\n                else specialFilter(head\
    \ :: tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqix0ba7w.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m(head > \e[31m10\e[0m &&\
    \ head.lastDig % \e[31m2\e[0m == \e[31m1\e[0m) specialFilter(tail)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value lastDig is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map(_.toInt)\n\
    \            .filter(x => x > 10).count(x => x.isOdd && x.toInt % 2 != 0)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9cxkq4ub.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            .filter(x => x > \e[31m10\e[0m).count(x =>\
    \ x.isOdd && x.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                 value isOdd is not a member of Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val n = nums.size\n\
    \        val odd = nums.filter( n => n % 2 == 1 )\n        val odd_sum = odd.sum\n\
    \        val odd_first = odd.head\n        val odd_last = odd.last\n        val\
    \ even = nums.filter( n => n % 2 == 0 )\n        val even_sum = even.sum\n   \
    \     val even_first = even.head\n        val even_last = even.last\n        val\
    \ even_first_odd = even.filter { n => n % 2 == 1 }\n        val even_last_odd\
    \ = even.filter { n => n % 2 == 0 }\n        val even_first_odd_sum = even_first_odd.sum\n\
    \        val even_last_odd_sum = even_last_odd.sum\n        var count = odd_sum\
    \ + even_sum + odd_first_odd_sum + even_last_odd_sum\n        count = count -\
    \ (odd_first + even_first + odd_last + even_last + odd_first_odd + even_last_odd\
    \ )\n        count = count - (odd_first_odd + even_first_odd + odd_last_odd +\
    \ even_last_odd )\n        count = count - (even_first_odd + odd_first_odd + even_last_odd\
    \ + odd_last_odd )\n        count = count - (even_first_odd + odd_first_odd +\
    \ even_last_odd + odd_last_odd )\n        count = count - (odd_first_odd + even_first_odd\
    \ + odd_last_odd + even_last_odd )\n        count = count - (odd_first_odd + even_first_odd\
    \ + odd_last_odd + even_last_odd )\n        count = count - (odd_first_odd + even_first_odd\
    \ + odd_last_odd + even_last_odd )\n        count = count - (odd_first + even_first\
    \ + odd_last + even_last + odd_first_odd + even_last_odd )\n        count = count\
    \ - (odd_first + even_first + odd_last + even_last + odd_first_odd + even_last_odd\
    \ )\n        count = count - (odd_first + even_first + odd_last + even_last +\
    \ odd_first_odd + even_last_odd )\n        count = count - (odd_first + even_first\
    \ + odd_last + even_last + odd_first_odd + even_last_odd )\n        count = count\
    \ - (odd_first + even_first + odd_last + even_last + odd_first_odd + even_last_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb838wr3t.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb838wr3t.scala:26:41\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e\
    [36mcount\e[0m = odd_sum + even_sum + odd_first_odd_sum + even_last_odd_sum\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Not found: odd_first_odd_sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb838wr3t.scala:38:14\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        count = count - (odd_first\
    \ + even_first + odd_last + even_last + odd_first_odd + even_last_\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map {\n   \
    \         case n =>\n                if (n > 10 && n.toString.take(2).takeWhile(_%2\
    \ == 1).tail.takeWhile(_%2 == 1).tail.head % 2 == 1L) 1\n                else\
    \ 0\n        }.reduce{\n            _ + _\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty String\n\tat scala.collection.StringOps$.head$extension(StringOps.scala:1129)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpymmfa1jw.scala:15)\n\tat scala.runtime.java8.JFunction1$mcIJ$sp.apply(JFunction1$mcIJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.specialFilter(tmpymmfa1jw.scala:17)\n\
    \tat Problem$.main(tmpymmfa1jw.scala:23)\n\tat Problem.main(tmpymmfa1jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(n <- nums)\n            if(n > 10 && n % 2 == 0 && n % 2 != 1 &&\
    \ n % 3 != 1)\n                set.add(n)\n        set.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6g7x5d8.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter( x =>\
    \ x > 10 && x.toString.slice(1, 2).toInt == 1 ).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn677ix7y.scala:17)\n\tat Problem.main(tmpn677ix7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var i = 0\n    \
    \    val m = nums.head\n        val n = nums.tail\n        var sum = 0\n     \
    \   while (i < n.length) {\n            val n = nums(i)\n            if (n > 10)\
    \ {\n                if (n%2 == 1) {\n                    val n = n+1\n      \
    \              if (n % 2 != 0) {\n                        sum = sum+1\n      \
    \              }\n                }\n            }\n            i = i+1\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzns6bft6.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mn\e[0m = n+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m  \
    \ |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0L\n\
    \        for (ns <- nums) {\n            val d = ns % 10L\n            if (d >\
    \ 1L && d % 2L != 0L)\n                count += 1L\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwu5lf2tz.scala:22)\n\tat Problem.main(tmpwu5lf2tz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Write your code\
    \ here\n        val myList = nums\n        val myIntSet = myList.filter(n => n\
    \ > 10 && n % 2 == 1)\n        val myIntSet2 = myList.filter(n => n > 10 && n\
    \ % 2 == 0)\n        val myLongSet = myList.filter(n => n > 10L)\n        val\
    \ myLongSet2 = myList.filter(n => n > 10L)\n        val mySet = myList.filter(_\
    \ > 10)\n        val mySet2 = myList.filter(_ > 10L)\n        val myList2 = myList.filter(_\
    \ > 10L)\n        val mySet3 = myList.filter(_ > 10L)\n        val mySet4 = myList.filter(_\
    \ > 10L)\n        val mySet5 = myList.filter(_ > 10L)\n        val mySet6 = myList.filter(_\
    \ > 10L)\n        val mySet7 = myList.filter(_ > 10L)\n        val mySet8 = myList.filter(_\
    \ > 10L)\n        val mySet9 = myList.filter(_ > 10L)\n        val mySet10 = myList.filter(_\
    \ > 10L)\n        val mySet11 = myList.filter(_ > 10L)\n        val mySet12 =\
    \ myList.filter(_ > 10L)\n        val mySet13 = myList.filter(_ > 10L)\n     \
    \   val mySet14 = myList.filter(_ > 10L)\n        val mySet15 = myList.filter(_\
    \ > 10L)\n        val mySet16 = myList.filter(_ > 10L)\n        val mySet17 =\
    \ myList.filter(_ > 10L)\n        val mySet18 = myList.filter(_ > 10L)\n     \
    \   val mySet19 = myList.filter(_ > 10L)\n        val mySet20 = myList.filter(_\
    \ > 10L)\n        val mySet21 = myList.filter(_ > 10L)\n        val mySet22 =\
    \ myList.filter(_ > 10L)\n        val mySet23 = myList.filter(_ > 10L)\n     \
    \   val mySet24 = myList.filter(_ > 10L)\n        val mySet25 = myList.filter(_\
    \ > 10L)\n        val mySet26 = myList.filter(_ > 10L)\n        val mySet27 =\
    \ myList.filter(_ > 10L)\n        val mySet28 = myList.filter(_ > 10L)\n     \
    \   val mySet29 = myList.filter(_ > 10L)\n        val mySet30 = myList.filter(_\
    \ > 10L)\n        val mySet31 = myList.filter(_ > 10L)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pk2_nvg.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val m = nums.map((_\
    \ % 2 == 0l)).reduce((a, b) => a && b)\n        if(m == true){\n            val\
    \ n = nums.map((_ % 2 == 1l)).reduce((a, b) => a && b)\n            if(n == true){\n\
    \                nums.filter((_ % 2 == 0l) && _ % 2 == 1l).length\n          \
    \  }else{\n                nums.filter((_ % 2 == 1l) && _ % 2 == 0l).length\n\
    \            }\n        }else{\n            nums.length\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7lu38eyo.scala:17:29 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                nums.filter((_ % \e[31m2\e[0m == \e[31m0l\e\
    [0m) && _ % \e[31m2\e[0m == \e[31m1l\e[0m).length\n\e[31m\e[31m   |\e[0m     \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3\
    \ of expanded function:\n\e[31m   |\e[0m   _$3 => _$3 % 2 == \e[31m0L\e[0m.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmp7lu38eyo.scala:19:29 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                nums.filter((_ % \e[31m2\e[0m == \e[31m1l\e\
    [0m) && _ % \e[31m2\e[0m == \e[31m0l\e[0m).length\n\e[31m\e[31m   |\e[0m     \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$5\
    \ of expanded function:\n\e[31m   |\e[0m   _$5 => _$5 % 2 == \e[31m1L\e[0m.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x\
    \ => x % 10)\n        val oddNumbers = numsMap.filter { case (digit, nums) =>\
    \ nums.filter(x => x > 10 % 10 & x % 2 == 1) != Nil }.map(_._1).sum\n        val\
    \ evenNumbers = numsMap.filter { case (digit, nums) => nums.filter(x => x > 10\
    \ % 10 & x % 2 == 0) == Nil }.map(_._1).sum\n        nums.length - oddNumbers\
    \ - evenNumbers\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnm3j3qix.scala:19)\n\tat Problem.main(tmpnm3j3qix.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val ls = nums.toList\n\
    \        val n = ls.size\n        var total = 0\n        for(i<- 0 until n) {\n\
    \            if(ls(i) > 10) {\n                if(ls(i) % 2 == 0) {\n        \
    \            total += 1\n                }\n            }\n        }\n       \
    \ return total\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4iyg6yfl.scala:28)\n\tat Problem.main(tmp4iyg6yfl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val summedNum =\
    \ nums.reduceLeft(_+_)\n        if (summedNum >= 1000000000000)\n            summedNum\
    \ / 1000000000000\n        else\n            summedNum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5q595qko.scala:14:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (summedNum >= \e[31m1000000000000\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         number too large\n\e[31m\e[31m-- Error: /tmp/tmp5q595qko.scala:15:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     summedNum / \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        number\
    \ too large\n2 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        require(nums.nonEmpty)\n\
    \        // first and last digits are odd \n        if (nums.head % 2 != 0 &&\
    \ nums.last % 2 != 0) {\n            1\n        } else {\n            nums.filter{x\
    \ => x > 10 &&  (x % 10 == 0 || x % 10 == 6)}.size\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprr98kywg.scala:22)\n\tat Problem.main(tmprr98kywg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        //TODO: Write code\
    \ here\n        nums.filter(_.toInt > 10).reduceLeft(_ + _).filter(_.toInt % 2\
    \ == 1).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphl4j698v.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.filter(_.toInt > \e[31m10\e[0m).reduceLeft(_\
    \ + _).filter(_.toInt % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value filter is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var sum = 0\n        for (i <- 0 until nums.length) {\n            val\
    \ d = nums(i) % 10\n            if (d > 1 && d < 5) {\n                count +=\
    \ 1\n                sum = sum + d\n            }\n        }\n        (sum % 2\
    \ != 0) && (count == 2)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp14cmy2al.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                sum = sum + d\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp14cmy2al.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        (sum % \e[31m2\e[0m\
    \ != \e[31m0\e[0m) && (count == \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // return nums.count(_\
    \ > 10) & ((nums.takeWhile(_ > 10).lastOption.get._ % 2 != 0l) & (nums.takeWhile(_\
    \ > 10).firstOption.get._ % 2 != 0l))\n        nums.count(_ > 10) && (nums.takeWhile(_\
    \ > 10).lastOption.get._ % 2 != 0l) && (nums.takeWhile(_ > 10).firstOption.get._\
    \ % 2 != 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxj11hcpn.scala:14:69 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_\
    \ > \e[31m10\e[0m).lastOption.get._ % \e[31m2\e[0m != \e[31m0l\e[0m) && (nums.takeWhile(_\
    \ > \e[31m10\e[0m).firstOption.get._ % \e[31m2\e[0m != \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                   an identifier\
    \ expected, but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxj11hcpn.scala:14:125 --------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_ > \e[31m10\e\
    [0m).lastOption.get._ % \e[31m2\e[0m != \e[31m0l\e[0m) && (nums.takeWhile(_ >\
    \ \e[31m10\e[0m).firstOption.get._ % \e[31m2\e[0m != \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                   an identifier expected, but '_' found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxj11hcpn.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        nums.count(_ > \e\
    [31m10\e[0m) && (nums.takeWhile(_ > \e[31m10\e[0m).lastOption.get._ % \e[31m2\e\
    [0m != \e[31m0l\e[0m) && (nums.takeWhile(_ > \e[31m10\e[0m).firstOption.get._\
    \ % \e[31m2\e[0m != \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value && is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val ns = nums.map(n\
    \ => if (n >= 10) 1 else 0).sum\n        if (ns == 0) 0\n        else if (ns ==\
    \ 1) 1\n        else if (ns % 2 == 0) ns + (2 * ns + 1) / 2\n        else ns\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56p9gw05.scala:21)\n\tat Problem.main(tmp56p9gw05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.count(_\
    \ > 10 && _ % 2 == 1 && _ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpv0f0r4u_.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m nums.count(_ > \e[31m10\e[0m\
    \ && _ % \e[31m2\e[0m == \e[31m1\e[0m && _ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphr_p9xpk.scala:17)\n\tat Problem.main(tmphr_p9xpk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val nums1 = nums.filter(i\
    \ => i > 10).filter(i => i % 2 != 0)\n        val nums2 = nums.filter(i => i >\
    \ 10).map(i => (Math.abs(i % 2) == 1)).count\n        nums1 + nums2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11mad9ci.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        nums1 + nums2\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var firstOdd = 0\n        var lastOdd = 0\n        nums.foreach(num =>\
    \ {\n            if (num > 10 && num % 2 == 0 && num / 2 != num % 2) {\n     \
    \           count += 1\n                lastOdd = num % 2\n                firstOdd\
    \ = num / 2\n            }\n        })\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7yeeer8a.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastOdd = num\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m     \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7yeeer8a.scala:20:27 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                firstOdd = num / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Found:    Long\n\e[31m   |\e[0m                           Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0\n\
    \        for (n <- nums) {\n            result += (n % 2) == 1\n            if\
    \ (n % 10 == 1 && n % 100 != 11) {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5e8mn4r.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result += (n % \e[31m2\e[0m) == \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.toSet.filterNot(_\
    \ % 2 == 0l).size + (nums.last % 2 == 0l && nums.head % 2 == 0l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpop5y7wd9.scala:13:47 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.toSet.filterNot(_ % \e[31m2\e[0m == \e[31m0l\e\
    [0m).size + (nums.last % \e[31m2\e[0m == \e[31m0l\e[0m && nums.head % \e[31m2\e\
    [0m == \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m  (x: String): String\n\e[31m   |\e[0m match arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var first = nums.head\n        var last = nums.last\n        var firstLastOdd\
    \ = false\n        while(nums.nonEmpty) {\n            val cur = nums.head\n \
    \           val next = nums.tail.head\n            val curFirst = cur.toInt\n\
    \            val curLast = cur.toInt\n            val nextFirst = next.toInt\n\
    \            val nextLast = next.toInt\n            val curFirstOdd = curFirst\
    \ % 2 == 0\n            val curLastOdd = curLast % 2 == 0\n            val nextFirstOdd\
    \ = nextFirst % 2 == 0\n            val nextLastOdd = nextLast % 2 == 0\n    \
    \        val curOddDigits = curLast / 2\n            val nextOddDigits = nextLast\
    \ / 2\n            if(curFirst > 10L && curFirstOdd && curLast > 10L && curLastOdd\
    \ && nextFirst > 10L && nextFirstOdd && nextLast > 10L && nextLastOdd) {\n   \
    \             count += 1\n            }\n            first = next\n          \
    \  last = next\n            firstLastOdd = curFirstOdd\n            nums = nums.tail\n\
    \        }\n        if(first > 10L && firstLastOdd) {\n            count += 1\n\
    \        }\n        if(last > 10L && firstLastOdd) {\n            count += 1\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpg3hkkl1p.scala:36:17 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            nums = nums.tail\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val nums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val n = nums.length\n\
    \        var counter = 0\n        for (i <- 0 until n) {\n            val a =\
    \ nums(i)\n            if (a > 10) {\n                if (a % 2 == 1 & nums(i-1)\
    \ % 2 == 1) {\n                    counter += 1\n                }\n         \
    \   }\n        }\n        return counter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpkuqqiz48.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpkuqqiz48.scala:22)\n\
    \tat Problem$.main(tmpkuqqiz48.scala:27)\n\tat Problem.main(tmpkuqqiz48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\
    \ 0\n        else {\n            var cnt = 0\n            var firstEven = nums(0)\n\
    \            var lastEven = nums(0)\n            nums.drop(1).foreach {\n    \
    \            case x =>\n                    cnt += 1\n                    if (x\
    \ % 2 == 0) firstEven = x\n                    if (x % 2 != 0) lastEven = x\n\
    \            }\n            if (cnt > 0 && (firstEven % 2 == 1 && lastEven % 2\
    \ == 1)) cnt + 1\n            else nums.last\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7x3m6cs1.scala:29)\n\tat Problem.main(tmp7x3m6cs1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums match {\n \
    \           case Nil => 0\n            case x :: xs => { \n                val\
    \ odd = xs.filter(_.toString % 2 == 1)\n                val even = xs.filter(_.toString\
    \ % 2 == 0)\n                val first = xs.takeWhile(_.toString < 10).map(_.toString.length).sum\n\
    \                val last = xs.reverse.dropWhile(_.toString < 10).map(_.toString.length).sum\n\
    \                (odd + even + first + last) % 2 != 0\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpigcsow7s.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36modd\e[0m = xs.filter(_.toString\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpigcsow7s.scala:17:48\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e\
    [0m \e[36meven\e[0m = xs.filter(_.toString % \e[31m2\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpigcsow7s.scala:18:54 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mfirst\e[0m = xs.takeWhile(_.toString\
    \ < \e[31m10\e[0m).map(_.toString.length).sum\n\e[31m\e[31m   |\e[0m         \
    \                                             ^^\e[0m\n\e[31m   |\e[0m       \
    \                                             Found:    (\e[31m10\e[0m : Int)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpigcsow7s.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m\
    \ \e[36mlast\e[0m = xs.reverse.dropWhile(_.toString < \e[31m10\e[0m).map(_.toString.length).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^\e[0m\n\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // TODO: Write your\
    \ solution here\n        nums.filter(_ > 10).count(_ % 2 == 1).count(_ % 2 ==\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8piod5hs.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        nums.filter(_ > \e[31m10\e[0m).count(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       value count is not a member of Int - did you mean Int.toInt?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\
    \ return 0\n        val list = nums.toList\n        val res = 1\n        for (x\
    \ <- list) {\n            if (x > 10) {\n                if (list(x) / 10 % 2\
    \ == 1) {\n                    res++\n                }\n            }\n     \
    \   }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5iv_g5p5.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    res++\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5iv_g5p5.scala:18:25 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                \e[33mif\e[0m (list(x) / \e[31m10\e[0m % \e[31m2\e[0m\
    \ == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (x : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var firstOdd = 0\n        var lastOdd = 0\n        for (i<- nums) {\n\
    \            val x = i % 10\n            val y = i / 10\n            if (x ==\
    \ 1 && y % 2 == 1) firstOdd += 1\n            else if (x == 0 && y % 2 == 1) lastOdd\
    \ += 1\n            else if (x > 10 && y % 2 == 1) count += 1\n        }\n   \
    \     count + firstOdd + lastOdd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1bwv3_t.scala:27)\n\tat Problem.main(tmpx1bwv3_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      var count = 1\n  \
    \    val ls = nums.toList\n      for (i <- 0 until ls.size) {\n        if (ls(i)\
    \ > 10) count += 1\n      }\n      val digits = ls.filter(d => d % 2 == 0).size\n\
    \      val odd = digits % 2\n      if (odd && ls.head % 2 == 1) count += 2\n \
    \     else count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88dfktto.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mif\e[0m (odd && ls.head % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m) count += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m          value && is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp88dfktto.scala:20:35 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mif\e[0m (odd && ls.head % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m) count += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    Unit\n\e[31m   |\e[0m                                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // TODO: Fill in\
    \ the skeleton code for this method\n        // return ...\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3elrn_v_.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mspecialFilter\e\
    [0m(\e[36mnums\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    Unit\n\
    \e[31m   |\e[0m                                                  Required: Long\n\
    \e[31m13 |\e[0m        \e[34m// TODO: Fill in the skeleton code for this method\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// return ...\e[0m\n\e[31m15 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (x<-nums) {\n            if (x>10 && x.toString.substring(1,x.toString.length-1)\
    \ match {\n                case \"1\" : \"5\" : \"7\" : \"9\" : ()\n         \
    \       case _ => {}\n            }) count += 1\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmdg6zb35.scala:16:31 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m\"1\"\e[0m : \e\
    [31m\"5\"\e[0m : \e[31m\"7\"\e[0m : \e[31m\"9\"\e[0m : ()\n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           '=>' expected, but ':' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmdg6zb35.scala:15:44 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m (x>\e[31m10\e[0m && x.toString.substring(\e\
    [31m1\e[0m,x.toString.length-\e[31m1\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    String\n\e[31m   |\e[0m\
    \                        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmdg6zb35.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m _ => {}\n\e[31m\e[31m   |\e\
    [0m                          ^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Unit\n\e[31m   |\e[0m                          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => {\n            val digits = num.digits\n            val firstOdd = digits(0)\n\
    \            val lastOdd = digits(digits.length - 1)\n            val firstOddOdd\
    \ = firstOdd % 2\n            val firstOddEven = firstOdd != 0\n            val\
    \ lastOddEven = lastOdd != 0\n            val firstEvenOdd = firstOddEven && !firstOddOdd\n\
    \            val lastEvenOdd = lastOddEven && !lastOddOdd\n            firstEvenOdd\
    \ && lastEvenOdd && firstOddOdd && lastOddOdd\n        }).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrowygsf.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mdigits\e[0m = num.digits\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value digits is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0\n\
    \        for( num <- nums) {\n            if( num > 10 && num.isOdd && num % 2\
    \ == 1) {\n                result = result + 1\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1h1vttrq.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m( num > \e[31m10\e[0m && num.isOdd\
    \ && num % \e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ isOdd is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsM = new\
    \ mutable.HashSet[Long]\n        for (i<-0 until nums.size ) {\n            numsM\
    \ += nums(i)\n        }\n\n        val result = 0\n        var count = 0\n   \
    \     for(i <- 0 until numsM.size) {\n            val num = numsM(i)\n       \
    \     if (num > 10) count = count + 1\n            if (isOdd(num && numsM(i-1)\
    \ % 2 != 0)) result = result + 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo81unk6i.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsM\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo81unk6i.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isOdd(num && numsM(i-\e[31m1\e[0m) % \e[31m2\e[0m != \e[31m0\e[0m)) result\
    \ = result + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpo81unk6i.scala:23:58 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isOdd(num && numsM(i-\e[31m1\e\
    [0m) % \e[31m2\e[0m != \e[31m0\e[0m)) result = result + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(n=> n.toString.length\
    \ > 1 && n.toString.charAt(0) % 2 == 1 && n.toString.charAt(n.toString.length\
    \ - 1).toString.length > 1 && n.toString.charAt(n.toString.length - 1).toString.charAt(0)\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3h8a1la.scala:17)\n\tat Problem.main(tmpa3h8a1la.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var oddSum = 0\n\
    \        var evenSum = 0\n        for (i <- nums) {\n            val x = i % 2\n\
    \            if (x > 0) evenSum += x\n            else if (x == 0) evenSum -=\
    \ 1\n            else oddSum += x\n        }\n        var count = 0\n        for\
    \ (i <- nums) {\n            val x = i % 2\n            if (x == 1) {\n      \
    \          if (evenSum > 0) {\n                    if (evenSum > 10) {\n     \
    \                   if (evenSum % 2 == 1) count += 2\n                       \
    \ else count += 1\n                    }\n                    else count += 2\n\
    \                }\n                else {\n                    if (oddSum > 10)\
    \ {\n                        if (oddSum % 2 == 1) count += 2\n               \
    \         else count += 1\n                    }\n                    else count\
    \ += 2\n                }\n            }\n            else if (x == 0) count +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwczk6fbs.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (x > \e[31m0\e[0m) evenSum\
    \ += x\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwczk6fbs.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m oddSum += x\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsBig = nums.filter\
    \ { x => x >  10 && x % 2 != 0}\n        numsBig.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjz70s77b.scala:19)\n\tat Problem.main(tmpjz70s77b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = nums.filter(n\
    \ => {\n            val a = n.toString.dropWhile(x => !x.isDigit).drop(1).dropWhile(x\
    \ => !x.isDigit).drop(1).map(_.toInt)\n            (a forall { x => x >= 10 &&\
    \ x % 2 != 0 })\n        })\n        result.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeorm0gq7.scala:20)\n\tat Problem.main(tmpeorm0gq7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val count = nums.filter(_\
    \ > 10).map(_ % 10).filterNot(_ % 2 == 1).size\n        if(count == 0) { return\
    \ 1L }\n        val first_odd = nums.filter(_ % 10 == 1).map(_ % 10).filterNot(_\
    \ % 2 == 1).size\n        val last_odd = nums.filter(_ % 10 == 1).map(_ % 10).filter(_\
    \ % 2 == 1).size\n        if(first_odd != 0 && last_odd != 0) { count } else {\
    \ count + 1 }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptn2ys1pg.scala:20)\n\tat Problem.main(tmptn2ys1pg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val count = nums.count(_\
    \ > 10)\n        val first = nums.takeWhile(_ > 10).head\n        val last = nums.last\n\
    \        val first = math.modf(first).toInt\n        val last = math.modf(last).toInt\n\
    \        (if (first % 2 != 0 && last % 2 == 0) count * 2 else count)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54qx0sfl.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfirst\e[0m = math.modf(first).toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfirst is already defined as \e[33mvalue\e[0m \e[35mfirst\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp54qx0sfl.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mlast\e[0m = math.modf(last).toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlast\
    \ is already defined as \e[33mvalue\e[0m \e[35mlast\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // return 0 if an\
    \ empty list\n        if (nums.isEmpty) 0\n        // else return nums.length\
    \ if all list elements are even\n        else if (nums.filter(_ % 2 == 0).length\
    \ == nums.length) nums.length\n        // else return a count of elements with\
    \ odd first and odd last numbers\n        else nums.count(x => { if (x > 10) x\
    \ > 10 && (x % 2 == 0) }) \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbds1zi4.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m nums.count(x\
    \ => { \e[33mif\e[0m (x > \e[31m10\e[0m) x > \e[31m10\e[0m && (x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) }) \n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Unit\n\e[31m   |\e[0m         \
    \        Required: Boolean\n\e[31m   |\e[0m                 Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var even = nums.filter(x => x % 2 == 0)\n        var odd = nums.filter(x\
    \ => x % 2 != 0)\n        for (x <- even; y <- odd) \n            if (x > 10 &&\
    \ x % 2 != 0 && y % 2 != 0) count += 1\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpamtlc7v6.scala:22)\n\tat Problem.main(tmpamtlc7v6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for ( i <- nums ) \n        {\n            if ( i % 2 == 0 && ( i / 10\
    \ ) % 2 == 1) \n            {\n                count = count + 1\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33d9ygfl.scala:26)\n\tat Problem.main(tmp33d9ygfl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.isEmpty)\n\
    \            return 0\n        val result: mutable.ArrayBuffer[Long] = mutable.ArrayBuffer[Long]()\n\
    \        for (num <- nums) {\n            if (num > 10 && num.asInstanceOf[Long]\
    \ % 2 == 0 && num.asInstanceOf[Long] % 2 != 0)\n                result += num\n\
    \        }\n        result.toList.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprez1yhku.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.ArrayBuffer[\e\
    [35mLong\e[0m] = mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprez1yhku.scala:15:48\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.ArrayBuffer[\e[35mLong\e[0m] = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter {\n\
    \            case i => i > 10 && i % 2 == 1 && i % 2 != 0\n        }.size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9b16zjv.scala:20)\n\tat Problem.main(tmpw9b16zjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.count(_\
    \ > 10 && _ % 2 != 0 && _ % 3 != 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxo_045_p.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m nums.count(_ > \e[31m10\e[0m\
    \ && _ % \e[31m2\e[0m != \e[31m0\e[0m && _ % \e[31m3\e[0m != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- 0 until nums.size) {\n            val n = nums(i)\n       \
    \     if (n > 10 && nums(i) < 10 && nums(i%2) == 1) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwq9d2ghi.scala:24)\n\tat Problem.main(tmpwq9d2ghi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val evens = nums.filter(_\
    \ % 2 == 0)\n        val odds = nums.filter(_ % 2 == 1)\n        val counts =\
    \ evens.takeWhile(x => x < 10).count() + odds.takeWhile(x => x < 10).count()\n\
    \        (odds(0) != odds(1)) match {\n            case true => counts\n     \
    \       case false => evens.takeWhile(x => x < 10).count() + evens.takeWhile(x\
    \ => x < 10).count()\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp415c40er.scala:15:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = evens.takeWhile(\e\
    [36mx\e[0m => x < \e[31m10\e[0m).count() + odds.takeWhile(\e[36mx\e[0m => x <\
    \ \e[31m10\e[0m).count()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (p: Long => Boolean): Int\n\
    \e[31m\e[31m-- Error: /tmp/tmp415c40er.scala:18:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31mfalse\e[0m => evens.takeWhile(x\
    \ => x < \e[31m10\e[0m).count() + evens.takeWhile(x => x < \e[31m10\e[0m).count()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (p: Long => Boolean): Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums match {\n \
    \           case Nil => 0\n            case head :: tail =>\n                if\
    \ (head > 10 && tail.last.isOdd && tail.head > 10) {\n                    head.toLong\
    \ + 1\n                } else {\n                    specialFilter(tail)\n   \
    \             }\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0teeobqc.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (head > \e[31m10\e[0m &&\
    \ tail.last.isOdd && tail.head > \e[31m10\e[0m) {\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      value isOdd is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpisx0tqy9.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mspecialFilter\e\
    [0m(\e[36mnums\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    Unit\n\
    \e[31m   |\e[0m                                                  Required: Long\n\
    \e[31m13 |\e[0m        \n\e[31m14 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // your code goes\
    \ here\n        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpza1xkmzf.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mspecialFilter\e\
    [0m(\e[36mnums\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    Unit\n\
    \e[31m   |\e[0m                                                  Required: Long\n\
    \e[31m13 |\e[0m        \e[34m// your code goes here\e[0m\n\e[31m14 |\e[0m    \
    \    \n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029171
