name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n\
  \    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        val a = new Array[Long](x, y)\n        var z = 0l\n       \
    \ for (i<- 0 until a.length)\n        {\n            if (a(i) % 2 == 0)\n    \
    \            z += a(i)\n        }\n        z match {\n            case z if (z\
    \ == 0 || z > x) -1l else z\n        }", "        var x : Long = x.toLong\n  \
    \      var y : Long = y.toLong\n        var z : Long = x + y\n        while (x\
    \ != z) {\n            x += 1\n            y -= 1\n            z += 1\n      \
    \  }\n        x", "        if (x > y) {\n            val tempx = x\n         \
    \   x = y\n            y = tempx\n        }\n        if (x % 2 == 0) {\n     \
    \       if (x % 4 == 0 && y % 2 == 0) {\n                return -1\n         \
    \   }\n            if (y % 2 == 0) {\n                return -1\n            }\n\
    \        }\n        if (y % 2 == 0) {\n            if (y % 4 == 0 && x % 2 ==\
    \ 0) {\n                return -1\n            }\n            if (x % 2 == 0)\
    \ {\n                return -1\n            }\n        }\n        val xmin = x\n\
    \        val ymin = y\n        val xmax = x\n        val ymax = y\n        while\
    \ (xmin < xmax) {\n            val mid = (xmin + xmax) / 2\n            if (mid\
    \ % 2 == 0) {\n                if (mid % 4 == 0 && ymin % 2 == 0) {\n        \
    \            return -1\n                }\n                if (ymin % 2 == 0)\
    \ {\n                    return -1\n                }\n            }\n       \
    \     if (ymin % 2 == 0) {\n                if (ymin % 4 == 0 && mid % 2 == 0)\
    \ {\n                    return -1\n                }\n                if (mid\
    \ % 2 == 0) {\n                    return -1\n                }\n            }\n\
    \            val tempx1 = xmin\n            xmin = xmax\n            xmax = tempx1\n\
    \        }\n        while (ymin < ymax) {\n            val mid = (ymin + ymax)\
    \ / 2\n            if (mid % 2 == 0) {\n                if (mid % 4 == 0 && xmin\
    \ % 2 == 0) {\n                    return -1\n                }\n            \
    \    if (xmin % 2 == 0) {\n                    return -1\n                }\n\
    \            }\n            if (xmin % 2 == 0) {\n                if (xmin % 4\
    \ == 0 && mid % 2 == 0) {\n                    return -1\n                }\n\
    \                if (mid % 2 == 0) {\n                    return -1\n        \
    \        }\n            }\n            val tempx2 = ymin\n            ymin = ymax\n\
    \            ymax = tempx2\n        }\n        return xmin * ymin + xmax * ymax",
  "        // If there's no even number in the range [x, y] inclusive, return -1\n\
    \        if(x > y) -1 else math.max(x + 1, y)", "        def choose(n: Int, m:\
    \ Int): Int = {\n            val ans = math.min(m, n)\n            if (ans ==\
    \ 0 || ans == n)\n                ans\n            else\n                choose(ans\
    \ - 1, m) // Recursive call\n        }\n\n        // If y <= x, then return -1\
    \ \n        if (y > x)\n            return -1\n        \n        // If x == 0,\
    \ then return y\n        if (x == 0)\n            return y\n\n        // If x\
    \ is even, then x - (x%2) == 0, return y\n        if (x % 2 == 0)\n          \
    \  return y\n\n        // Otherwise, find out which side of the [x, y] interval\
    \ the even number is\n        val m = math.max(x,y)\n        val n = math.min(x,y)\n\
    \        val a = math.max(a,m)\n        val b = math.min(b,n)\n\n        // Then\
    \ calculate the biggest even number in the interval\n        choose(a-1,b-1)",
  "        if (x >= y)\n            -1\n        else if (x <= y)\n            1\n\
    \        else if (x == y)\n            x\n        else\n            (x - y) %\
    \ 2 match {\n                case 0 => x - y + 1\n                case 1 => x\
    \ - y + 2\n                case _ => x - y\n            }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val low = math.min(x,y)\n        val high = math.max(x, y)\n        for\
    \ (i <- low until high) {\n            if (i % 2 == 0) evens += i\n          \
    \  else odds += i\n        }\n        var max_even = -1\n        val max_odd =\
    \ -1\n        for (i<- evens ++ odds) {\n            if (max_even < i && max_odd\
    \ < i) max_even = i\n            else if ((max_even < i) && (max_odd < i) && (i\
    \ == max_even)) max_odd = i\n            else if ((max_even < i) && (i == max_even))\
    \ max_even = i\n        }\n        if ((max_even < 0) && (max_odd < 0)) -1\n \
    \       else max_even", "        if ((x >= y) || (x < 0l) || (y < 0l)) return\
    \ -1l\n        val nums = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l,\
    \ 13l, 14l, 15l).sortWith(_ > _)\n        if (nums.contains(x)) x\n        else\
    \ if (nums.contains(y)) y\n        else -1l", "        val array = new mutable.ArrayBuffer[Long]()\n\
    \        if (x > y)\n            array.push(y - 1)\n        else array.push(x-1)\n\
    \        while (x < y) {\n            val newArray = array.slice(0,array.size)\n\
    \            val temp = newArray.head\n            val length = newArray.length\n\
    \            if (temp % 2 == 0)\n                return temp\n            else\
    \ if (temp < y)\n                newArray.shift(2)\n            else if (temp\
    \ > x)\n                newArray.shift(-2)\n            else break\n        }\n\
    \        return -1", "        val evenNums = List(x, y).filter { x % 2 == 0 }\n\
    \        if (evenNums.isEmpty) {\n            return -1\n        } else if (evenNums.head\
    \ >= x && evenNums.head <= y) {\n            return evenNums.head\n        } else\
    \ {\n            val maxEvenNum = evenNums.reduceLeft(_ * 2)\n            if (maxEvenNum\
    \ >= x && maxEvenNum <= y) {\n                return maxEvenNum\n            }\n\
    \        }", "        val evens = mutable.ArrayBuffer(x*2,y*2)\n        val odds\
    \ = mutable.ArrayBuffer(x,y)\n        while (evens.nonEmpty || odds.nonEmpty)\
    \ {\n            if (evens.nonEmpty) evens.remove(0)\n            if (odds.nonEmpty)\
    \ odds.remove(0)\n            if (evens.isEmpty && odds.isEmpty) \n          \
    \      return -1\n            if (evens.nonEmpty && odds.isEmpty) \n         \
    \       return evens.head\n            if (evens.nonEmpty && odds.nonEmpty) \n\
    \                if (evens.head < odds.head)\n                    evens.remove(0)\n\
    \                else\n                    odds.remove(0)\n        }\n       \
    \ if (evens.nonEmpty || odds.nonEmpty)\n            evens.head + odds.head\n \
    \       else\n            -1", "        if (x < y) {\n            var tempX =\
    \ x\n            var tempY = y\n            x = y\n            y = tempX\n   \
    \     }\n        val x = x - 1\n        val y = y - 1\n        // x is even\n\
    \        if ((y & 1) == 0) {\n            while (x+2 < y) {\n                x\
    \ += 1\n                y -= 1\n            }\n            while (x > y) {\n \
    \               x -= 1\n                y += 1\n            }\n            if\
    \ (x > 0) {\n                x = x -1\n            } else {\n                x\
    \ = x + 1\n            }\n        }\n        // y is even\n        else if ((x\
    \ & 1) == 0) {\n            while (y+2 < x) {\n                y += 1\n      \
    \          x -= 1\n            }\n            while (y > x) {\n              \
    \  y -= 1\n                x += 1\n            }\n            if (y > 0) {\n \
    \               y = y -1\n            } else {\n                y = y + 1\n  \
    \          }\n        }\n        x", "        val nums = x to y\n        val evens\
    \ = 0 until nums.size\n        val maxEven = evens.max\n        for (n <- evens\
    \ if n < maxEven) yield nums(n)\n        -1", "        def choose(x: Long, y:\
    \ Long) : Option[Long] = if (x < y) Some(x) else choose(y, x)\n        if (y <=\
    \ x) return -1\n        choose(x, y - 1).fold(x -> -1, y -> -1)", "        val\
    \ evens = for {\n            x <- 0 until x\n            y <- 0 until y\n    \
    \        i <- x to y\n        } yield i\n        val pairs = evens.filter(x =>\
    \ evens.contains((x + y) / 2))\n        if(pairs.isEmpty) -1\n        else pairs.max",
  "        if (x >= y) -1\n        else if (x <= y) y\n        else \n        { \n\
    \            var max = Math.max(x, y)\n            val evens = x filter ( (y)\
    \ => y < max )\n            val odds = x filter ( (y) => y > max )\n         \
    \   evens.maxBy( y => y % 2 )\n        }", "        val evenNumbers = mutable.Set[Long]()\n\
    \        var smallestEven = Long.MinValue\n        var largestEven = Long.MaxValue\n\
    \        var minNum = Long.MaxValue\n        var maxNum = Long.MinValue\n    \
    \    while(x != -1) {\n            x += 2\n            if(x % 2 == 0) evenNumbers\
    \ += x\n            if(x < (minNum + minNum)/2)\n                minNum = x\n\
    \            else\n                maxNum = x\n        }\n        while(y != -1)\
    \ {\n            y += 2\n            if(y % 2 == 0) evenNumbers += y\n       \
    \     if(y < (minNum + minNum)/2)\n                minNum = y\n            else\n\
    \                maxNum = y\n        }\n        var result = -1L\n        for(i\
    \ <- 0 to evenNumbers.size) {\n            if((evenNumbers(i) >= minNum) && (evenNumbers(i)\
    \ < maxNum))\n                result = evenNumbers(i)\n        }\n        return\
    \ result", "        val max = y\n        val min = x\n        var even = false\n\
    \        while (!even) {\n            val i = (min + max) / 2\n            if\
    \ (i % 2 == 0)\n                max = i\n            else\n                min\
    \ = i\n            if (min >= max)\n                even = true\n        }\n \
    \       return even", "      var max_num = x\n      var min_num = y\n      while\
    \ ( max_num >= min_num) {\n        if ( max_num % 2 == 0) {\n            max_num\
    \ = max_num / 2\n        } else {\n            max_num = max_num / 2 + 1\n   \
    \     }\n      }\n      max_num", "        var z = 0\n        var y = y - 1\n\
    \        while (x != y) {\n            if (x % 2 == 0) {\n                z =\
    \ x + 1\n                y -= 1\n                x /= 2\n            } else if\
    \ (x % 2 != 0) {\n                z -= 1\n                x += 1\n           \
    \ }\n        }\n        if (y == 0) {\n            z = x\n        }\n        z",
  "        val xEvens : Set[Long] = Set(1l, x, 2*x, 3*x, 4*x, 5*x, 6*x, 7*x, 8*x,\
    \ 9*x, 10*x, 11*x, 12*x, 13*x, 14*x, 15*x)\n        val yEvens : Set[Long] = Set(1l,\
    \ y, 2*y, 3*y, 4*y, 5*y, 6*y, 7*y, 8*y, 9*y, 10*y, 11*y, 12*y, 13*y, 14*y, 15*y)\n\
    \        if (x.toLong == y.toLong) -1\n        if (yEvens.contains(x)) return\
    \ x\n        if (yEvens.contains(y)) return y\n        xEvens.find((xEvens.last).ceiling(1.0))",
  "        val evens = x to y by 2\n        val evensSum = evens.foldLeft(0)(_ + _)\n\
    \        if (evensSum < 0)\n            -1\n        else\n            evens.max",
  "        val min = (x > y) ? x : y\n        val max = (x > y) ? y : x\n        val\
    \ num = (min + max) / 2\n        val isEven = num % 2 == 0\n        val even =\
    \ if (isEven) num else num - 1\n        if (min > max) -1\n        else if (num\
    \ < min || num > max) return -1\n        else if (num == even) return even\n \
    \       else if (num == min) return min\n        else if (num == max) return max\n\
    \        else num", "        val x = if (x >= y) x else y\n        val y = if\
    \ (x >= y) y else x\n        val x = if(x < 1) 1 else x\n        val y = if(y\
    \ < 1) 1 else y\n        val num = (1l to y).toList.sortWith( (a,b) => a.compareTo(b)\
    \ ).last\n        if (num != 0l) {\n            if (x % num == 0)\n          \
    \      num - 1\n            else num\n        } else {\n            if (x % y\
    \ == 0)\n                y - 1\n            else y\n        }", "        val evens\
    \ = mutable.Set[Long](x + 1L)\n        for (i <- 0 to y-1) {\n            evens\
    \ += (i + x) / 2\n        }\n        if (evens.contains(x%2)) {\n            x\n\
    \        } else {\n            -1L\n        }", "        val xArray = x.toInt\n\
    \        val yArray = y.toInt\n\n        var x = -1\n        var y = -1\n    \
    \    var xArrayNew = x.toInt\n        var yArrayNew = y.toInt\n        xArrayNew\
    \ -= 1\n        yArrayNew -= 1\n\n        for(xIndex <- 0 to xArrayNew - 1; yIndex\
    \ <- 0 to yArrayNew - 1) {\n            if(xArray(xIndex) %2 == 0 && yArray(yIndex)\
    \ %2 == 0) {\n                xArray(xIndex) = xArray(xIndex) * 2\n          \
    \      yArray(yIndex) = yArray(yIndex) * 3\n            }\n            else if(xArray(xIndex)\
    \ %2 != 0 && yArray(yIndex) %2 != 0) {\n                xArray(xIndex) = xArray(xIndex)\
    \ * 2\n                yArray(yIndex) = yArray(yIndex) * 3\n            }\n  \
    \          if(xArray(xIndex) < yArray(yIndex)) {\n                if(xArray(xIndex)\
    \ == y) {\n                    x = xArray(xIndex) + 1\n                    y =\
    \ xArray(yIndex) + 1\n                    xArray(xIndex) = xArray(xIndex) * 2\n\
    \                    yArray(yIndex) = yArray(yIndex) * 3\n                }\n\
    \                else if(xArray(xIndex) == x + 1) {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 2\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 3\n                }\n                else {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 2\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 3\n                }\n            }\n            else {\n                if(xArray(xIndex)\
    \ == y) {\n                    x = xArray(xIndex) + 1\n                    y =\
    \ xArray(yIndex) + 1\n                    xArray(xIndex) = xArray(xIndex) * 3\n\
    \                    yArray(yIndex) = yArray(yIndex) * 2\n                }\n\
    \                else if(xArray(xIndex) == x + 1) {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 3\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 2\n                }\n                else {\n                    x = xArray(xIndex)\
    \ + 1\n                    y = xArray(yIndex) + 1\n                    xArray(xIndex)\
    \ = xArray(xIndex) * 3\n                    yArray(yIndex) = yArray(yIndex) *\
    \ 2\n                }\n            }\n        }\n        x", "        val evens\
    \ = for (i <- x until y) \n             yield { if (i%2 == 0) i else (i+1l) }\
    \ \n\n        val maxEven = evens.max\n        if (maxEven < -1l) -1 else maxEven",
  "        if (x < y && x <= 0)\n            return -1\n        if (x > y && x >=\
    \ 0)\n            return -1\n        if (x <= y)\n            return math.max(x\
    \ + x, y + y - 1)\n        if (y >= x)\n            return math.max(x - y, x +\
    \ y - 1)\n        val even = math.min(x, y)\n        val high = math.max(even\
    \ * 2, x - even)\n        math.ceil(high / even) * 2", "        val evensLessThan_Y\
    \ = (x % 2L) == ((y % 2L) == (0) || (y % 2L) == (1));\n        val evensGreaterThan_X\
    \ = (x % 2L) == ((y % 2L) == (0) || (y % 2L) == (1));\n        if (evensLessThan_Y\
    \ && evensGreaterThan_X) {\n            x + y;\n        } else if (evensLessThan_Y)\
    \ {\n            x;\n        } else {\n            -1L;\n        }", "       \
    \ def even(x: Long, y: Long): Boolean = (x - y)%2==0\n        def odd(x : Long,\
    \ y : Long): Boolean = (x - y)%2!=0\n        def choose(x: Long, y: Long): Long\
    \ = {\n            def twos(x : Long, y : Long) = {\n                def divide(x:\
    \ Long, y: Long, i: Long) : Long = { if(even(x,y) && even(x-1,y))  divide(x-1,y,i)\
    \ else \n                    if(even(x,y) && even(x+1,y))  divide(x+1,y,i)  else\
    \ divide(x,y,i)\n                }\n                divide(x,y,0)\n          \
    \  }\n            twos(x,y)\n        }\n        val n = choose(x,y)\n        if(n\
    \ < x || n < y)\n            -1\n        else\n            n", "        var currentNum\
    \ = if (x > y) x else y\n        var nextNum = x % 2 == 0 && y % 2 != 0 ? x +\
    \ 1 : x + 2\n        while (currentNum < nextNum) {\n            currentNum =\
    \ nextNum\n            nextNum = currentNum % 2 == 0 && y % 2 != 0 ? currentNum\
    \ + 1 : currentNum + 2\n        }\n        if (currentNum >= nextNum) currentNum\n\
    \        else -1", "        if(x < 0 || y < 0) return -1L\n        val evens =\
    \ 0 until y\n        evens.filter(_ % 2 != 0).max(x) // filter out the even numbers",
  "        // Your code here\n        val result: Array[Long] = for (i <- x to y)\
    \ yield {\n            val temp = x % 2 * y\n            val temp1 = temp.toInt\n\
    \            val temp2 = temp1.toLong\n            \n            // Return -1\
    \ if x or y is zero\n            if (temp2 == 0) {\n                -1\n     \
    \       } else if (temp2 == 1) {\n                temp2\n            } else {\n\
    \                temp2\n            }\n        }\n        val maxNum = result.max\n\
    \        if (maxNum == -1) {\n            maxNum\n        } else {\n         \
    \   maxNum + 1\n        }", "        if (x < 0 || y < 0 || x > y || x < y || x\
    \ % 2 == 0 || y % 2 == 0) {\n            return -1\n        }\n        if (x <\
    \ y) {\n            val l = x + (y % x)\n            if (l % 2 == 0) {\n     \
    \           return l\n            } else {\n                return -1\n      \
    \      }\n        } else {\n            val l = x + (y % x)\n            if (l\
    \ % 2 == 0) {\n                return -1\n            } else {\n             \
    \   return l\n            }\n        }", "        val n = x - y\n        val m\
    \ = x + (y * (-1l / 4l / 2l / 2l / 2l / 2l))\n        val evens = 0 until n\n\
    \        val odds = 1 until n\n        val even = evens.find(_ % 2 == 0)\n   \
    \     val odd = odds.find(_ % 2 == 1)\n        val res = if (even != -1L && odd\
    \ != -1L) odd else even\n        res", "        if(x >= y) {\n            return\
    \ -1\n        }\n        var z = Math.max(x, y)\n        while(x % 2 != 0 || y\
    \ % 2 != 0) {\n            z = z * 2\n            if(x >= y) {\n             \
    \   z = z * 2\n            }\n            x = x - z\n            y = y - z\n \
    \       }\n        return z", "        var minValue : Long = Long.MaxValue\n \
    \       var minIndex : Long = 0\n        for (i <- 0 to (y - x + 1)) {\n     \
    \       if (i % (x - y + 1) != 0) {\n                minValue += i\n         \
    \       minIndex += i - 1\n            }\n        }\n        if (minValue == (x\
    \ - y + 1)) {\n            minValue - 1\n        } else {\n            minValue\
    \ - x + 1\n        }", "        // x is the smallest even number that is in the\
    \ range [x, y]\n        // that is, it must be even\n        if(x % 2 == 0) return\
    \ -1l\n        \n        // y is the largest even number that is in the range\
    \ [x, y]\n        // that is, it must be even\n        if(y % 2 == 0) return -1l\n\
    \        \n        // Find the smallest even number that is in [x, y] that is\
    \ even\n        def m(x: Long, y: Long) : Long = {\n            while(x < y) {\n\
    \                x += 1\n                if(x % 2 == 0) return x\n           \
    \ }\n            return -1l\n        }\n        \n        // Find the largest\
    \ even number that is in [x, y] that is even\n        def n(x: Long, y: Long)\
    \ : Long = {\n            while(x > y) {\n                x -= 1\n           \
    \     if(x % 2 == 0) return x\n            }\n            return -1l\n       \
    \ }\n        \n        // Now find the range [x, y] that contains all even numbers\n\
    \        // If there's no such range, then the function should return -1\n   \
    \     def r(x: Long, y: Long) : Long = {\n            var m = m(x, y)\n      \
    \      var n = n(x, y)\n            \n            // If there is no even number\
    \ in the range [x, y], then we\n            // should return -1\n            if(m\
    \ == -1l || n == -1l) return -1l\n            \n            while(n < m) {\n \
    \               m -= 1\n                n += 1\n                \n           \
    \     if(m%2 == 0 && n%2 == 0) return m\n            }\n            \n       \
    \     return -1l\n        }\n        \n        // If we get here, there is no\
    \ such range in the range [x, y]\n        // so return -1\n        if(r(x, y)\
    \ == -1l) return -1l\n        \n        // If there is such a range, then return\
    \ the largest even number in\n        // the range [x, y]\n        (r(x, y) -\
    \ 1)", "        var min = x\n        var max = y\n        var ans = -1\n     \
    \   while (min <= max) {\n            val mid = min + max / 2\n            if\
    \ (mid % 2 == 0) {\n                ans = mid\n                break\n       \
    \     }\n            ans = -1\n            if (mid < min) {\n                max\
    \ = mid\n            } else {\n                min = mid\n            }\n    \
    \    }\n        ans", "        var max_even : Long = -1\n        val biggest_odd\
    \ = x\n        val biggest_even = x\n        for (i <- 0 until y) if (biggest_odd\
    \ > i) biggest_odd = i\n        for (i <- 0 until y) if (biggest_even > i) biggest_even\
    \ = i\n        for (i <- 0 until y) if (i % 2 == 0) if (biggest_even > i) biggest_even\
    \ = i\n        for (i <- 0 until y) if (i % 2 != 0) if (biggest_odd > i) biggest_odd\
    \ = i\n        if (biggest_even > biggest_odd) max_even = biggest_even\n     \
    \   else max_even = -1\n        max_even", "        val evenInts = List(x, y,\
    \ z) filter (_ % 2 == 0)\n        if (evenInts.isEmpty) -1\n        else evenInts.max",
  "        val result = x to y by 2\n        val evenInts = result.filter(_ % 2 ==\
    \ 0)\n        if (evenInts.isEmpty) -1 else evenInts.max", "        def find(x\
    \ : Long, y : Long, max: Long): Long = {\n            if (x == y)\n          \
    \      max\n            else if (x % 2 == 0 && y % 2 == 0)\n                max\
    \ * x + y\n            else if (x % 2 == 0 && y % 2 != 0)\n                max\
    \ * x + y - 1\n            else (x % 2 != 0 && y % 2 != 0)\n                max\
    \ * x - y + 1\n        }\n\n        var max = (x * y) / 2\n\n        var left\
    \ = x\n        var right = y\n        while(left > 0 && right > 0)\n        {\n\
    \            max = find(left, right, max)\n            left = max(left - 2, 0)\n\
    \            right = max(right - 2, 0)\n        }\n\n        if(max > x)\n   \
    \         max = x\n        else if(max < y)\n            max = y\n        else\n\
    \            max = -1\n        return max", "        if ( x > y ) -1\n       \
    \ else if ( y == 0 ) return -1\n        else if ( x == 0 ) return -1\n       \
    \ else {\n            var evenNum = 0\n            var oddNum = 1\n          \
    \  var maxNum = x + y\n            while (evenNum <= maxNum) {\n             \
    \   if (maxNum % evenNum == 0) evenNum = evenNum + evenNum\n                else\
    \ oddNum = oddNum + evenNum\n                maxNum = maxNum - 1\n           \
    \ }\n            if ( evenNum > oddNum ) evenNum\n            else oddNum\n  \
    \      }", "        var small = x\n        var big = y\n        while (small >\
    \ 0 && big > 0) {\n            if (big % 2 == 0) {\n                big = big\
    \ / 2\n            }\n            else {\n                small = small / 2\n\
    \            }\n        }\n        if (big == 0)\n            -1\n        else\n\
    \            big", "        if((x < (y / 2))) -1\n        else (x * 2) + (y /\
    \ 2)", '        if (x > y) -1 else x max y filter (_ % 2 == 0)', "        val\
    \ evens = List[Long]()\n        for (a <- 1 to x by 2) {\n            if (a %\
    \ 2 == 0) {\n                evens.append(a)\n            }\n        }\n     \
    \   for (a <- 1 to y by 2) {\n            if (a % 2 == 0) {\n                evens.append(a)\n\
    \            }\n        }\n        val evenBiggerOne = evens.max\n        val\
    \ evenBiggerTwo = evens.filter(_ >= x).max\n        if (evenBiggerOne == evenBiggerTwo)\
    \ {\n            return evenBiggerOne\n        }\n        if (evenBiggerTwo <\
    \ evenBiggerOne) {\n            return -1\n        }\n        return evenBiggerTwo",
  "        var sum = 0\n        for( i <- x to y) {\n            if ( i % 2 == 0)\
    \ {\n                sum += i\n            }\n        }\n        \n        if(\
    \ sum < x || sum > y ) {\n            return -1\n        } else {\n          \
    \  return sum\n        }", "        val evens = for (i <- x until y if i % 2 ==\
    \ 0) yield i\n        val maxEven = evens.max\n        if (maxEven > -1) {\n \
    \           return maxEven\n        } else {\n            return -1\n        }",
  "        var xDivisor = x/2\n        var yDivisor = y/2\n        while(y > xDivisor)\
    \ {\n            if(yDivisor % 2 == 0) {\n                y -= 1\n           \
    \ } else {\n                x -= 1\n                xDivisor = x/2\n         \
    \       yDivisor = y/2\n            }\n        }\n        if(x == yDivisor) {\n\
    \            x\n        } else {\n            xDivisor\n        }", "        val\
    \ evensBetween = (x to y) filter ((x % 2) != 0)\n        val biggestEvens = evensBetween.max\n\
    \        if(biggestEvens == 0) {\n            -1\n        }\n        else{\n \
    \           biggestEvens\n        }", "        // If the first number is greater\
    \ than the second number,\n        // then the result is -1\n        if (x > y)\
    \ \n            return -1\n\n        // Otherwise, we need to find an even larger\
    \ number\n        // to choose from [x, y]\n        val even = math.floor(x /\
    \ 2)\n\n        // If the even number in the range is even, we're done\n     \
    \   if (even % 2 == 0)\n            return even\n\n        // Otherwise, keep\
    \ searching for the odd number\n        val odd = math.floor(x / 2)\n        if\
    \ (odd % 2 == 1)\n            odd\n        else\n            chooseNum(x + 1,\
    \ y + 1)", "        if (y > x) \n            throw new IllegalArgumentException(\"\
    Input out of range\")\n        val even = y / 2\n        if (even * 2 == y) \n\
    \            even\n        else \n            even * 2 - y", "        val xMin\
    \ = math.min(x, y)\n        val yMin = math.max(x, y)\n        val result = -1l\n\
    \        val evens = collection.mutable.Queue[Long]()\n        // Add all the\
    \ even numbers into the even queue.\n        while(x <= xMin) {\n            evens\
    \ += x\n            x += 1\n        }\n        // Add all the odd numbers into\
    \ the odd queue.\n        while(y <= yMin) {\n            evens += y\n       \
    \     y += 1\n        }\n        while(evens.hasNext) {\n            val v = evens.next()\n\
    \            if((v & 1) == 1) {\n                if(result < v) {\n          \
    \          result = v\n                }\n            }\n        }\n        result",
  "        // Write your code here\n        val m = (x-y) / 2\n        if(x > y) {\n\
    \            m*2\n        } else if (x < y) {\n            m - 2*x\n        }\
    \ else {\n            m - 2\n        }", "        val xEven = x % 2 == 0\n   \
    \     val yEven = y % 2 == 0\n        \n        val xInts = for (i <- 0 to x-1)\
    \ yield i if i % 2 == 0\n        val yInts = for (i <- 0 to y-1) yield i if i\
    \ % 2 == 0\n        \n        val xToEven = if (xEven) xInts else xInts.filter(_\
    \ % 2 != 0)\n        val yToEven = if (yEven) yInts else yInts.filter(_ % 2 !=\
    \ 0)\n        \n        val xToEvenEven = if (xEven) xToEven else xToEven.filter(_\
    \ % 2 == 0)\n        val yToEvenEven = if (yEven) yToEven else yToEven.filter(_\
    \ % 2 == 0)\n        \n        xToEvenEven.foldLeft(Long.MaxValue) { \n      \
    \      val accum = it.asInstanceOf[Long]\n            (accum > x || accum == x)\
    \ ? accum : -1\n        } match {\n            case -1 => -1\n            case\
    \ n => n\n        }\n        \n        yToEvenEven.foldLeft(Long.MaxValue) { \n\
    \            val accum = it.asInstanceOf[Long]\n            (accum > y || accum\
    \ == y) ? accum : -1\n        } match {\n            case -1 => -1\n         \
    \   case n => n\n        }", "        var m = 1\n        var n = y\n        while\
    \ (n > x && n >= m && m > 1) {\n            m = m + 1\n            n = n / 2\n\
    \        }\n        if (n == x) {\n            return m\n        }\n        return\
    \ -1", "        val list = List(x, y)\n        list.zipWithIndex.find { case (z,\
    \ index) =>\n            val zMod = z % 2\n            if (zMod != 0) return false\n\
    \            (index < 1) || (x != y) || (y < z)\n        }._1", "        val nx\
    \ = math.max(x, y)\n        val ny = math.min(x, y)\n        val evens = mutable.Set.empty[Long]\n\
    \        for (ix <- 0 until nx; iy <- 0 until ny) {\n            val even_x =\
    \ math.max(ix, iy)\n            val even_y = math.min(ix, iy)\n            if\
    \ ((even_x % 2) == (even_y % 2)) {\n                evens += even_x\n        \
    \        evens += even_y\n            }\n        }\n        val best = evens.max\n\
    \        if (best == -1) {\n            return -1\n        } else {\n        \
    \    return best\n        }", "        val evens = for {i <- 1 to x toList if\
    \ i % 2 != 0} yield i\n        val odd = x toList filter (_ % 2 == 1)\n      \
    \  val range = x toList filter (_ > y)\n\n        if(evens.forall(range.isEmpty)\
    \ || odd.forall(range.isEmpty))\n            -1L\n        else if(evens.forall(range.nonEmpty)\
    \ && odd.forall(range.isEmpty))\n            evens.max\n        else odd.max",
  "        val range = (x.toLong, y.toLong)\n        var biggest = 0L\n        var\
    \ counter = 1L\n        while (counter < range._1) {\n            biggest = math.max(biggest,\
    \ counter)\n            counter += 1\n        }\n        biggest", "        //\
    \ Create a list of all the even numbers from x to y.\n        var list = List(x\
    \ until y)\n        // Remove the even numbers from list.\n        list = list.filter(i\
    \ => i % 2 == 0)\n        // If list is empty, return -1.\n        if (list.isEmpty)\
    \ {\n            return -1\n        }\n        // Else, return the biggest even\
    \ number in list.\n        else {\n            return list.max\n        }", " \
    \     val evenNumbers = mutable.Set[Long]()\n      for (i <- x until y by 2)\n\
    \        if (i % 2 == 0) evenNumbers += i\n      if (evenNumbers.isEmpty) return\
    \ -1\n      evenNumbers.max // Or \"evenNumbers.head max\" or \"evenNumbers.max\"\
    \ ", "        var max_ev : Long = -1\n        val x_even = x % 2 == 0\n      \
    \  val y_even = y % 2 == 0\n        if (x_even && y_even) {\n            val result\
    \ = x + (y * (x - y) / 2)\n            if (result <= max_ev)\n               \
    \ max_ev = result\n        } else if (x_even && !y_even) {\n            val result\
    \ = x - (y * x + (y - x) / 2)\n            if (result <= max_ev)\n           \
    \     max_ev = result\n        } else if (y_even && !x_even) {\n            val\
    \ result = y - (x * y + (y - x) / 2)\n            if (result <= max_ev)\n    \
    \            max_ev = result\n        } else {\n            max_ev = -1\n    \
    \    }\n        max_ev", "        var max = 0\n        var low = x\n        var\
    \ high = y\n        // We want to find the biggest even number that is in [low,\
    \ high]\n        // inclusive\n        while (low < high) {\n            // Get\
    \ the mid-point\n            var mid = (low + high) >>> 1\n            // Get\
    \ the odd\n            var odd = (mid & 1) == 0 // 1 if odd\n            // If\
    \ odd, then update the biggest even number to be the mid-point\n            //\
    \ of low and high\n            if (odd) {\n                max = mid\n       \
    \         low = mid\n            } else {\n                // Otherwise just update\
    \ the high\n                high = mid\n            }\n        }\n        if (max\
    \ < x) max = -1\n        return max", "        val rangeMin = math.min(x, y)\n\
    \        val rangeMax = math.max(x, y)\n        var evenNum = 0\n        var evenNum2\
    \ = rangeMin\n        var evenNum3 = rangeMax\n\n        for (i <- 0 to rangeMax)\
    \ {\n            evenNum2 = evenNum2 + i\n            if (evenNum2 == rangeMax)\
    \ {\n                evenNum2 = rangeMin\n            }\n            if (evenNum2\
    \ == rangeMin) {\n                break\n            }\n            if (evenNum2\
    \ == evenNum3) {\n                evenNum3 = rangeMax + 1\n                evenNum2\
    \ = rangeMin\n            }\n            if (evenNum2 == evenNum) {\n        \
    \        break\n            }\n        }\n        if (evenNum2 == evenNum3) {\n\
    \            return -1l\n        }\n        evenNum3 = evenNum3 - 1\n        return\
    \ evenNum", "        var maxEven : Long = 0\n        var maxOdd : Long = 0\n \
    \       var x : Long\n        var y : Long\n        var xEven = 0\n        var\
    \ yEven = 0\n        var xOdd = 0\n        var yOdd = 0\n        // For each number\
    \ between the min and max inclusively\n        // Check whether the number evenly\
    \ divided by 2 is in the range\n        // [x, y] inclusive.\n        while (x\
    \ < y) {\n            x = x + 1\n            y = y - 1\n            xEven = (x\
    \ % 2) == 0\n            yEven = (y % 2) == 0\n            xOdd = (x % 2) == 1\n\
    \            yOdd = (y % 2) == 1\n            if (xEven == yEven && xOdd == yOdd\
    \ && (x != y || xEven || yEven)) maxEven = math.max(maxEven, x)\n            if\
    \ (xEven == yEven && xOdd == yOdd && !xEven && !yEven) maxEven = math.max(maxEven,\
    \ y)\n            if (xEven == yEven && !xEven && yOdd == yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && !xEven && !yOdd) maxEven = math.max(maxEven,\
    \ y)\n            if (xEven == yEven && xOdd == yOdd && !xEven && yOdd) maxEven\
    \ = math.max(maxEven, y)\n            if (xEven == yEven && !xEven && !yOdd &&\
    \ yEven) maxEven = math.max(maxEven, x)\n            if (xEven == yEven && !xOdd\
    \ && yEven) maxEven = math.max(maxEven, y)\n            if (xEven == yEven &&\
    \ xOdd == yOdd && !xEven && !yEven) maxEven = math.max(maxEven, y)\n         \
    \   if (xEven == yEven && !xEven && yOdd == yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && !xEven && !yOdd && !xOdd) maxEven = math.max(maxEven,\
    \ y)\n            if (xEven == yEven && !xOdd && !yEven) maxEven = math.max(maxEven,\
    \ x)\n            if (xEven == yEven && xOdd == yOdd && !xEven && !yEven) maxEven\
    \ = math.max(maxEven, y)\n            if (xEven == yEven && !xEven && yOdd ==\
    \ yEven) maxEven = math.max(maxEven, x)\n            if (xEven == yEven && !xEven\
    \ && !yOdd && yEven) maxEven", "        // We know that x and y are positive longs,\
    \ so we can use them\n        // to calculate the range of possible even number\
    \ numbers\n        val maxX = x - 1\n        val maxY = y - 1\n\n        val evenNum\
    \ = maxX % 2 == 0\n\n        // Now, since we know that the range of possible\
    \ numbers is [maxX, maxY],\n        // we can use that to calculate the range\
    \ of possible even number numbers\n        val possibleEvenNumRange = maxX.toLong\
    \ * maxY.toLong\n        // The evenNumRange can be negative if the possible evenNumRange\
    \ is negative\n        // and we need to handle that case below\n\n        if(evenNum)\
    \ {\n            // If evenNum is true, the range of possible even number numbers\
    \ is just [maxX, maxY]\n            // and we can use that to calculate the biggest\
    \ possible even number number\n            val evenNumRange = maxX.toLong * maxY.toLong\n\
    \            if(evenNumRange > possibleEvenNumRange)\n                // In this\
    \ case, we are trying to find the biggest possible number between x and y\n  \
    \              // But in this case, the biggest even number number between x and\
    \ y is just x\n                // So, just return x\n                maxX\n  \
    \          else\n                // In this case, the biggest even number number\
    \ between x and y is just y\n                // So, return y\n               \
    \ maxY\n        } else {\n            // If evenNum is false, then we need to\
    \ calculate the\n            // biggest number between the x and the y numbers\
    \ that is even\n            val biggestEvenNum = maxX + maxY - 1\n           \
    \ // Now, we need to check the range of possible even number numbers again\n \
    \           val possibleEvenNumRange = maxX.toLong * maxY.toLong\n           \
    \ // Finally, if the biggest even number number between x and y is bigger than\
    \ \n            // the range of possible even number numbers, then this biggest\
    \ even number number \n            // is out of range. So, return -1\n       \
    \     if(biggestEvenNum > possibleEvenNumRange)\n                -1\n        \
    \    else\n                biggestEvenNum\n        }", "        val evens = Vector.fill(y\
    \ / 2)((y % 2)) \n        evens.foreach(x => x := x - 1)\n        evens.reverse.foldLeft(-1l)\
    \ { (a, x) =>\n            val y = ((x * (x+1)) / 2)\n            if (y > y) a\
    \ else y\n        }", "        if(x >= y)\n            return x\n        if(x\
    \ <= 0)\n            return -1\n        var max = 0\n        while(x > 0) {\n\
    \            if(x % 2 == 0)\n                max += x\n            x /= 2\n  \
    \      }\n        if(max > y)\n            return max\n        else\n        \
    \    return -1", "        def isBiggerEven(x : Long, y : Long) : Boolean = x %\
    \ 2 == 0 && y % 2 == 0 && x >= y\n        \n        // Add -1 to the right side\
    \ of x and y if they're both odd, \n        // or add the smallest even number\
    \ between them if they are not\n        val even = isBiggerEven(x, y) ? x + 1\
    \ : y\n        \n        // If even == x or even == y, return even, otherwise,\
    \ return even+1.\n        even.toLong", "        require(x <= y)\n        var\
    \ even = 0\n        var odd = 1\n        var high = x\n        while(even < y\
    \ && odd <= y){\n            while(high%2 == 0){\n                even += odd\n\
    \                odd += even\n                high -= 1\n            }\n     \
    \       while(high%2 != 0){\n                even -= odd\n                odd\
    \ -= even\n                high += 1\n            }\n        }\n        if((high%2\
    \ == 0) && (even < y) && (odd < y)){\n            even = even * 2\n        }\n\
    \        if(even == y){\n            return even\n        }\n        return -1",
  "        if(x % 2 == 0 && y % 2 == 0)\n            x match {\n                case\
    \ x if x < y => x + chooseNum(x , y - 2)\n                case x if x == y =>\
    \ x\n                case x if x > y => x - chooseNum(x - 2, y)\n            \
    \    case _ => -1\n            }\n        else\n            -1", "        var\
    \ num : Long = 1\n        val evenNum = num / 2\n        val oddNum = num % 2\n\
    \        while ((x < y) && (num < (y+1l))) {\n            if (num % 2 == 0) {\n\
    \                num = evenNum + num\n            } else {\n                num\
    \ = oddNum + num\n            }\n        }\n        if (num < y) { return -1l}\n\
    \        num", "        val even = x % 2 == 0\n        val high = math.max(x,\
    \ y)\n        val low = math.min(x, y)\n        if(even)\n            high + 1\n\
    \        else\n            math.max(low, high)", "        if (x >= y || (x <=\
    \ y && x % 2 == 0)) {\n            val even = x % 2\n            val low = x\n\
    \            val high = y\n            val nums = List(low, high).sorted.filter(i\
    \ => i % 2 == even).reverse.takeWhile(i => i <= high)\n            val index =\
    \ nums.indexWhere(i => i >= x && i <= y)\n            if (index >= 0) {\n    \
    \            return nums(index)\n            }\n            else {\n         \
    \       return -1\n            }\n        }\n        else {\n            return\
    \ -1\n        }", "        var maxEven = -1l\n        var x = if (x >= 0) x else\
    \ -x\n        var y = if (y >= 0) y else -y\n        if (x < y) x = y\n      \
    \  if (x < 1l) x = 1l\n        if (x > y-1) x = y-1\n        while (x <= y) {\n\
    \            if (x % 2 == 0)\n                maxEven = x\n            x += 2l\n\
    \        }\n        if (maxEven == -1l)\n            maxEven = -1l\n        y\
    \ -= 1l\n        while (y >= 1) {\n            if (y % 2 == 0)\n             \
    \   maxEven = y\n            y -= 2l\n        }\n        if (maxEven == -1l)\n\
    \            maxEven = -1l\n        maxEven", "        def findNum(ix : Long,\
    \ iy : Long) = {\n            if (ix < iy) return findNum(ix + 1, iy)\n      \
    \      val num = if (ix % 2==0) ix else iy\n            if (num == x) return num\n\
    \            findNum(ix, num-1)\n        }\n        findNum(x, y)", "        val\
    \ even = x filter (_ % 2 == 0)\n        val odd = x filter (_ % 2 == 1)\n    \
    \    if (even.isEmpty && odd.isEmpty)\n            -1\n        else {\n      \
    \      if (even.size < odd.size)\n                odd.max\n            else\n\
    \                even.max\n        }", "        if(x <= y && x > 0)\n        \
    \    val nums = mutable.ListBuffer[Long]()\n            while(x != y){\n     \
    \           nums += x\n                x += 1\n            }\n            nums.sorted.lastOption.getOrElse(-1)\n\
    \        else\n            -1", "        def even(x: Long) = {\n            if\
    \ (x % 2 == 0) return x\n            else return even(x-1)\n        }\n      \
    \  val evenY = even(y)\n        if (x % 2 == 0) return x\n        else if ((evenY\
    \ <= y) && (y % 2 == 0)) return evenY\n        else if (evenY > y) return -1",
  "        if (x < y) {\n            val max = x max y\n            if (max % 2 ==\
    \ 0) {\n                return max\n            } else {\n                return\
    \ -1\n            }\n        } else {\n            val max = y max x\n       \
    \     if (max % 2 == 0) {\n                return max\n            } else {\n\
    \                return -1\n            }\n        }", "        val xi = x + 1\n\
    \        val yi = y + 1\n        if (yi > xi)\n            return -1\n       \
    \ val i = 2\n        var m = yi\n        while (m >= xi) { i += 2; m -= xi}\n\
    \        if (m > xi) { i+=1; m = yi-2 }\n        (i*i)%(x*x)", "      if(x > y)\
    \ -1 else (x until y contains _*)\n        .foldLeft(x to y by 1)((x, y) =>\n\
    \          if(x % 2 == 0 && y % 2 == 0)\n            x.toLong * y.toLong else\
    \ -1)", "        if (x < y) -1\n        else (x+y-2) /2 + 2", "        var minNum\
    \ = x\n        var maxNum = y\n        \n        // Get all the even numbers in\
    \ the range\n        while (maxNum > minNum) {\n            if (maxNum % 2 ==\
    \ 0) {\n                if (minNum != maxNum) {\n                    minNum =\
    \ minNum + 1\n                } else {\n                    maxNum = maxNum -\
    \ 1\n                }\n            } else {\n                if (minNum != maxNum)\
    \ {\n                    minNum = minNum + 1\n                } else {\n     \
    \               maxNum = maxNum - 1\n                }\n            }\n      \
    \  }\n        \n        if (minNum == maxNum) {\n            return -1\n     \
    \   } else {\n            return minNum\n        }", "        var ans = -1\n \
    \       var even = true\n        var high = y // This is to keep track of the\
    \ highest number we've seen\n        while (x > 0) {\n            if (even) {\
    \ // We've already found an even number so check to see if we need to change it\n\
    \                if (ans < high) {\n                    ans = high\n         \
    \       }\n                even = false\n                high = high + (y / 2)\n\
    \            } else {\n                if (x > high) {\n                    //\
    \ we've found a number that is larger than what we already know about\n      \
    \              high = x\n                } else if (x < high) {\n            \
    \        // we've found a number that is smaller than what we already know about\n\
    \                    high = high + (x / 2)\n                }\n            }\n\
    \            x = x - 1\n        }\n        ans", "      if (x > y) return -1\n\
    \      if (x < 0) return -1\n      val max = x\n      val min = y\n      var counter\
    \ = 2\n      while(counter < max) {\n        val m = min + (counter << 1)\n  \
    \      if (m % 2 == 0) {\n          val n = m - 2\n          if (n < min) min\
    \ = n\n          max = m\n        } else if (m > max) max = m\n        counter\
    \ += 1\n      }\n      return max", "        var max = x\n        var min = y\n\
    \        while((max - min) > 1) {\n            if(max % 2 == 0) {\n          \
    \      max /= 2\n            } else {\n                max *= 3\n            }\n\
    \        }\n        if(max < min) {\n            max = min\n        }\n      \
    \  return max", "        if (x < 0 || y < 0) {\n            return -1\n      \
    \  }\n        if (x < y) {\n            val lo = x / 2l\n            val hi =\
    \ x % 2l\n            val lo1 = hi / 2l\n            val hi1 = hi % 2l\n     \
    \       val lo2 = lo / 2l\n            val hi2 = lo % 2l\n            val lo3\
    \ = lo1 / 2l\n            val hi3 = lo1 % 2l\n            val lo4 = lo2 / 2l\n\
    \            val hi4 = lo2 % 2l\n            val lo5 = lo3 / 2l\n            val\
    \ hi5 = lo3 % 2l\n            val lo6 = lo4 / 2l\n            val hi6 = lo4 %\
    \ 2l\n            val lo7 = lo5 / 2l\n            val hi7 = lo5 % 2l\n       \
    \     val lo8 = lo6 / 2l\n            val hi8 = lo6 % 2l\n            val lo9\
    \ = lo7 / 2l\n            val hi9 = lo7 % 2l\n            val lo10 = lo8 / 2l\n\
    \            val hi10 = lo8 % 2l\n            val lo11 = lo9 / 2l\n          \
    \  val hi11 = lo9 % 2l\n            val lo12 = lo10 / 2l\n            val hi12\
    \ = lo10 % 2l\n            val lo13 = lo11 / 2l\n            val hi13 = lo11 %\
    \ 2l\n            val lo14 = lo12 / 2l\n            val hi14 = lo12 % 2l\n   \
    \         val lo15 = lo13 / 2l\n            val hi15 = lo13 % 2l\n           \
    \ val lo16 = lo14 / 2l\n            val hi16 = lo14 % 2l\n            val lo17\
    \ = lo15 / 2l\n            val hi17 = lo15 % 2l\n            val lo18 = lo16 /\
    \ 2l\n            val hi18 = lo16 % 2l\n            val lo19 = lo17 / 2l\n   \
    \         val hi19 = lo17 % 2l\n            val lo20 = lo18 / 2l\n           \
    \ val hi20 = lo18 % 2l\n            val lo21 = lo19 / 2l\n            val hi21\
    \ = lo19 % 2l\n            val lo22 = lo20 / 2l\n            val hi22 = lo20 %\
    \ 2l\n            val lo23 = lo21 / 2l\n            val hi23 = lo21 % 2l\n   \
    \         val lo24", "        var ans = -1l\n        for (a <- 0 to y-1) if (x%2\
    \ == 0 && (a%2 != 0 || x <= a)) ans = a\n        ans", "        // The variable\
    \ 'biggest' will store the biggest even number in [x, y]\n        var biggest\
    \ = -1L\n        // The variable 'current' will store the current even number\
    \ in [x, y]\n        var current = x\n        while (current < y) {\n        \
    \    // The variable 'even' will store if the current even number is in range\n\
    \            var even = false\n            if (current % 2 == 0) {\n         \
    \       // This while loop will run until the current even number in range\n \
    \               while (current < y) {\n                    // After each iteration,\
    \ the current number will increase\n                    // by two. If the current\
    \ number divided by 2 is not even,\n                    // then the current number\
    \ will stay the same.\n                    current += 2\n                    even\
    \ = current % 2 == 0\n                }\n                // This statement will\
    \ update the biggest even number in range \n                // if the current\
    \ even number in range is bigger than the current biggest \n                //\
    \ even number in range\n                if (biggest < current - 1) {\n       \
    \             biggest = current - 1\n                }\n            }\n      \
    \      else {\n                // This while loop will run until the current even\
    \ number in range\n                while (current < y) {\n                   \
    \ current += 2\n                    even = current % 2 == 0\n                }\n\
    \                // This statement will update the biggest even number in range\
    \ \n                // if the current even number in range is bigger than the\
    \ current biggest \n                // even number in range\n                if\
    \ (biggest < current - 1) {\n                    biggest = current - 1\n     \
    \           }\n            }\n        }\n        // This function returns the\
    \ biggest even number in [x, y]\n        // if the biggest even number in [x,\
    \ y] is -1, then return -1\n        if (biggest == -1L) {\n            return\
    \ -1L\n        }\n        else {\n            return biggest\n        }", "  \
    \      var x : Long = 0\n        var y : Long = 0\n        var maxEven : Long\
    \ = -1\n        val evenList = mutable.ListBuffer[Long]()\n        while ( x <\
    \ y ) {\n            if ( (x%2) == 0 ) {\n                x += 1\n           \
    \     maxEven = x // Even numbers have even sum\n            }\n            if\
    \ ( maxEven == -1 && x%2 != 0 ) {\n                y -= 1\n                maxEven\
    \ = y // Even numbers have even sum\n            }\n            if ( maxEven ==\
    \ -1 && x%2 == 0 ) {\n                x += 1\n                maxEven = x // Even\
    \ numbers have even sum\n            }\n            evenList.append(x)\n     \
    \   }\n        evenList.lastOption.getOrElse(-1l)", "        if (x < y) {\n  \
    \          val min = math.min(x, y)\n            val max = math.max(x, y)\n  \
    \          val even_numbers = mutable.ListBuffer[Long]()\n            val not_even_numbers\
    \ = mutable.ListBuffer[Long]()\n            while (min <= max) {\n           \
    \     if (min % 2 == 0) {\n                    even_numbers += min\n         \
    \       } else {\n                    not_even_numbers += min\n              \
    \  }\n                min += 1\n            }\n            if (even_numbers.isEmpty)\
    \ -1\n            else even_numbers.max - 1\n        } else {\n            val\
    \ min = math.min(y, x)\n            val max = math.max(y, x)\n            val\
    \ even_numbers = mutable.ListBuffer[Long]()\n            val not_even_numbers\
    \ = mutable.ListBuffer[Long]()\n            while (min <= max) {\n           \
    \     if (min % 2 == 0) {\n                    even_numbers += min\n         \
    \       } else {\n                    not_even_numbers += min\n              \
    \  }\n                min += 1\n            }\n            if (even_numbers.isEmpty)\
    \ -1\n            else even_numbers.max - 1\n        }", "        val evens =\
    \ x toList filter (_ %2 == 0)\n        val odd = x toList filter (_ %2 == 1)\n\
    \        if(evens.nonEmpty && odd.nonEmpty) {\n            if(evens.max < odd.max)\n\
    \                -1\n            else if(odd.max < evens.max)\n              \
    \  evens.max\n            else\n                -1\n        }\n        else -1",
  "        var evenNum = 0\n        val startNum = x\n        val endNum = y\n\n \
    \       for(i <- 0 until endNum) {\n            if(startNum % 2 == 0) {\n    \
    \            evenNum = startNum\n                startNum = startNum + 1\n   \
    \         }\n            else {\n                startNum = startNum + 1\n   \
    \         }\n        }\n\n        if(evenNum == 0) {\n            return -1\n\
    \        }\n        return evenNum", "        def checkIfNumber(num : Long) :\
    \ Boolean = {\n            if (num > 0 && num < 10) {\n                return\
    \ true\n            }\n            else {\n                return false\n    \
    \        }\n        }\n        \n        val checkX : Boolean = checkIfNumber(x)\n\
    \        val checkY : Boolean = checkIfNumber(y)\n        if (checkX != checkY)\
    \ {\n            val numx = Math.abs(x).toInt\n            val numy = Math.abs(y).toInt\n\
    \            if (numx < numy) {\n                val x = numx\n              \
    \  val y = numy\n            }\n            else {\n                val x = numy\n\
    \                val y = numx\n            }\n        }\n        var currentResult\
    \ = -1;\n        var currentNumber = x;\n        var start = false;\n        if\
    \ (checkX == true) {\n            while (currentNumber <= y) {\n             \
    \   if (currentNumber % 2 == 0) {\n                    currentResult = currentNumber;\n\
    \                    start = true;\n                }\n                currentNumber\
    \ += 1;\n            }\n        }\n        if (checkY == true) {\n           \
    \ while (currentNumber >= y) {\n                if (currentNumber % 2 == 0) {\n\
    \                    currentResult = currentNumber;\n                    start\
    \ = true;\n                }\n                currentNumber -= 1;\n          \
    \  }\n        }\n        if (start == false) {\n            currentResult = -1;\n\
    \        }\n        return currentResult;", "        if(x > y) \n            chooseNum(y,\
    \ x)\n        else \n            x % 2 == 0 ? x : -1", "        def loop(x1 :\
    \ Long, y1 : Long) : Long = {\n            if (y1 > y) return y1\n           \
    \ if (x1 >= x) return x1\n            if (y1 % 2 == 0) return loop(x1 +2, y1 +\
    \ 1)\n            loop(x1 + 1, y1 + 2)\n        }\n        loop(x, y)", "    \
    \    val r = x to y\n        var ans = 1\n        for (i<-r; i+=2) {\n       \
    \     if (i*i > ans) ans = i*i\n        }\n        if (ans == 0) -1\n        else\
    \ ans", "        val range = x to y by 2\n        val even = range.filter(x =>\
    \ x % 2 == 0l).last\n        if (even != -1l) even else -1l", "        val numbers\
    \ = Range(x, y).map(i => i.toLong % 2 == 0).toList\n        if(numbers.isEmpty)\
    \ {\n            return -1l\n        } else {\n            val highest = numbers.max\n\
    \            val indexOfHighest = numbers.indexOf(highest)\n            if(indexOfHighest\
    \ > 0) {\n                numbers.drop(indexOfHighest)\n            } else {\n\
    \                -1l\n            }\n        }", "        val rangeList = List(x,\
    \ y, x+10, y+10, x+100, y+100) //create a list \n                            \
    \                                       // of numbers \n                     \
    \                                              // in the range [x, y]\n      \
    \  val evenNumbers = rangeList.filter(x => x % 2 == 0) //filter only \n      \
    \                                                          // even numbers\n \
    \       var maxEven = -1L  //set the initial max even number\n        for (i <-\
    \ evenNumbers) //go through all the even numbers in the range\n        {\n   \
    \         if (maxEven == -1L || x >= i && x <= i+100) //if there's a bigger even\
    \ number\n            {\n                maxEven = i //set the max even number\
    \ to the current even number\n            }\n        }\n        return maxEven",
  "        val z: Long = x / y\n        if(z * y != x) \n            chooseNum(z,\
    \ y)\n        else {\n            val z2: Long = y / x\n            if(z2 * x\
    \ != y) \n                chooseNum(z2, x)\n            else {\n             \
    \   val z3: Long = (z * z) + z2\n                if(z3 % 2 == 0) {\n         \
    \           z3\n                } else \n                    -1\n            }\n\
    \        }", "        val m = x to y by 2\n        val x = m(0)\n        val y\
    \ = m(2)\n        val n = x + y\n        if (n >= 0) n\n        else if (n < 0)\
    \ -1\n        else -1", "        val even = math.ceil(y / 2)\n        val min\
    \ = math.floor(x / 2)\n        if (x < even) min\n        else if (x > even) even\n\
    \        else min", "        var x = x\n        var y = y\n        var z = x -\
    \ y\n        \n        while (z >= 0)\n        {\n            if ((z & 1) == 0)\n\
    \            {\n                return z\n            }\n            z = z / 2\n\
    \        }\n        return -1", "        if (x < y || x <= 0) -1\n        else\
    \ scala.math.ceil(x / 2) * (if (y % 2 == 0) x % 2 else x - 1)", "        if (x\
    \ < y) {\n            val diff = y - x\n            if (diff % 2 == 0) {\n   \
    \             val even = diff / 2\n                if (even >= x && even <= y)\
    \ even\n                else -1L\n            } else {\n                -1L\n\
    \            }\n        } else if (x == y) {\n            x\n        } else if\
    \ (x > y) {\n            val diff = x - y\n            if (diff % 2 == 0) {\n\
    \                val even = diff / 2\n                if (even >= x && even <=\
    \ y) even\n                else -1L\n            } else {\n                -1L\n\
    \            }\n        } else {\n            -1L\n        }", "        val low\
    \ = math.min(x,y)\n        val high = math.max(x, y)\n        var ans = 0L\n \
    \       for (num <- low to high) {\n            if (num % 2 == 0) {\n        \
    \        if (ans < num) ans = num\n            }\n        }\n        if (ans ==\
    \ -1l) -1\n        else ans", "        val xRange = Range(x, y)\n        val maxEvenNum\
    \ = -1\n        xRange.foreach(x => {\n            val isEven = x % 2 == 0\n \
    \           if(isEven) {\n                val curNum = x + (isEven << 1)\n   \
    \             if(maxEvenNum < curNum) {\n                    maxEvenNum = curNum\n\
    \                }\n            }\n        })\n        maxEvenNum", "        val\
    \ evenList = List(1, 2, 4, 5, 7, 10, 12, 14, 16, 20, 24, 28, 32)\n        val\
    \ oddList = List(4, 8, 12)\n        var evenMax : Long = IntStream.range(1, y,\
    \ 2).sum\n        var oddMax : Long = IntStream.range(x, 2, 2).sum\n        \n\
    \        if(evenMax > oddMax) {\n            evenMax = -1\n        }\n       \
    \ \n        if(evenMax == -1) {\n            return -1\n        }\n        \n\
    \        for(i <- 1 to evenList.size) {\n            evenMax = evenMax * evenList(i)\
    \ + evenList(i) * evenMax\n        }\n        \n        for(i <- 1 to oddList.size)\
    \ {\n            oddMax = oddMax * oddList(i) + oddList(i) * oddMax\n        }\n\
    \        \n        if(evenMax == oddMax) {\n            return evenMax\n     \
    \   } else {\n            return -1\n        }", "        var xEven = x % 2 ==\
    \ 0\n        var yEven = y % 2 == 0\n        if (x != x || y != y) return(-1)\n\
    \        var m = (x - y) / 2\n        var xEvenMore = m % 2 == 0\n        var\
    \ yEvenMore = y % 2 == 0\n        var mMore = m % 2 == 0\n        var mEvenMore\
    \ = m%2 == 0\n        if (yEvenMore) {\n            if (xEvenMore) {\n       \
    \         if (mEvenMore) {\n                    if (mMore == 0) {\n          \
    \              xEven = x % 2 == 0\n                    }\n                   \
    \ if (xEven) {\n                        yEven = y % 2 == 0\n                 \
    \       m = (x - y) / 2\n                    }\n                    if (yEven)\
    \ {\n                        mMore = m % 2 == 0\n                    }\n     \
    \           }\n            } else {\n                if (mEvenMore) {\n      \
    \              if (mMore == 0) {\n                        xEven = x % 2 == 0\n\
    \                    }\n                    if (xEven) {\n                   \
    \     yEven = y % 2 == 0\n                        m = (x - y) / 2\n          \
    \          }\n                    if (yEven) {\n                        mMore\
    \ = m % 2 == 0\n                    }\n                }\n            }\n    \
    \    }\n        if (yEven) {\n            if (xEven) {\n                if (mEvenMore)\
    \ {\n                    if (mMore == 0) {\n                        xEven = x\
    \ % 2 == 0\n                    }\n                    if (xEven) {\n        \
    \                yEven = y % 2 == 0\n                        m = (x - y) / 2\n\
    \                    }\n                    if (yEven) {\n                   \
    \     mMore = m % 2 == 0\n                    }\n                }\n         \
    \   } else {\n                if (mEvenMore) {\n                    if (mMore\
    \ == 0) {\n                        xEven = x % 2 == 0\n                    }\n\
    \                    if (xEven) {\n                        yEven = y % 2 == 0\n\
    \                        m = (x - y) / 2\n                    }\n            \
    \        if (yEven) {\n                        mMore = m % 2 == 0\n          \
    \          }\n                }\n            }\n        }\n        if (yEven)\
    \ {\n            if (xEven) {\n                if (mEvenMore) {\n            \
    \        if (mMore == 0) {\n                        xEven = x % 2 == 0\n     \
    \               }\n                    if (xEven) {\n                        yEven\
    \ = y % 2 == 0\n                        m = (x - y) / 2\n                    }\n\
    \                    if (yEven) {\n                        mMore = m % 2 == 0\n\
    \                    }\n                }\n            } else {\n            \
    \    if (mEvenMore) {\n                    if (mMore == 0) {\n               \
    \         xEven = x % 2 == 0\n                    }\n                    if (xEven)\
    \ {\n                        yEven = y % 2 == 0\n                        m = (x\
    \ - y) / 2\n                    }\n                    if (yEven) {\n        \
    \                mMore = m % 2 == 0\n                    }\n                }\n\
    \            }\n        }\n        if (yEven) {", "        var x: Long = x\n \
    \       var y: Long = y\n        var z: Long = z\n        var flag: Boolean =\
    \ flag\n        var bigger: Long = bigger\n        var i: Int = 0\n        var\
    \ j: Int = 0\n        while ((z != 0) && (i != 0)) {\n            if (((i * x)\
    \ % y) != 0) {\n                flag = false\n                bigger = z\n   \
    \             z = z - ((i * x) % y)\n            } else {\n                flag\
    \ = true\n                z = z - ((i * x) % y)\n            }\n            i\
    \ = i + 1\n        }\n        \n        if ((z == 0) && (i == 0)) {\n        \
    \    if (flag == true) {\n                return -1\n            }\n         \
    \   else {\n                return z\n            }\n        }", "        if (x\
    \ < y || x == y){\n            return -1\n        }\n        var even = 1\n  \
    \      var odd = 2\n        var evenMax = 0\n        var oddMax = 0\n        while\
    \ (even <= y){\n            evenMax = even\n            while (evenMax < x){\n\
    \                evenMax += even\n                if (evenMax > y){\n        \
    \            break\n                }\n            }\n            if (evenMax\
    \ < x){\n                break\n            }\n            odd += 1\n        \
    \    while (odd <= y){\n                oddMax = odd\n                while (oddMax\
    \ < x){\n                    oddMax += odd\n                    if (oddMax > y){\n\
    \                        break\n                    }\n                }\n   \
    \             if (oddMax < x){\n                    break\n                }\n\
    \                odd += 1\n            }\n            if (even == evenMax && odd\
    \ == oddMax){\n                return evenMax\n            }\n            if (even\
    \ > evenMax && odd > oddMax){\n                return -1\n            }\n    \
    \    }\n        return -1", "        val nums = mutable.ListBuffer(x, y)\n   \
    \     while(nums.head < nums.last) {\n            nums +=: (nums.head * 2l).toInt\n\
    \        }\n        if(nums.last < nums.head) {\n            return -1l\n    \
    \    } else {\n            nums.last\n        }", "        val max = Math.max(x,\
    \ y)\n        val min = Math.min(x, y)\n        if (max == min) {\n          \
    \  return -1\n        } else if (max % 2 == 0) {\n            max / 2\n      \
    \  } else {\n            max * 3 + 1\n        }", "        val xEven = x % 2 ==\
    \ 0\n        val yEven = y % 2 == 0\n        val bothEven = xEven && yEven\n \
    \       if(xEven && yEven)\n            x\n        else if (!xEven && !yEven)\n\
    \            -1\n        else if (!xEven)\n            chooseNum(y - 1, y)\n \
    \       else if (!yEven)\n            chooseNum(x, y - 1)\n        else if (!bothEven)\n\
    \            -1\n        else\n            chooseNum(x - 1, y) - 1", "       \
    \ var result = -1\n        var max = 0\n        while(y >= x) {\n            if\
    \ (y%2 == 0 && y>max) {\n                result = y\n                max = y\n\
    \            }\n            y -= 1\n        }\n        result", "        var x\
    \ = x\n        var y = y\n        while (true) {\n            if (x >= y) {\n\
    \                return x\n            }\n            if (x < y) {\n         \
    \       x += 1\n            } else {\n                y -= 1\n            }\n\
    \        }", "        val a = (x - y).asInstanceOf[Int]\n        if (a==0) return\
    \ x\n        if (a==1) return y\n        if (a==2) return x+y\n        a%2 match\
    \ {\n            case true => x+y\n            case false => chooseNum(x+y, y)\n\
    \        }", "        var biggerNum = 0\n        var smallerNum = x\n        while(smallerNum\
    \ <= y && biggerNum < y){\n            if(x % smallerNum == 0){\n            \
    \    biggerNum += 1\n            }\n            smallerNum += 1\n        }\n \
    \       if(biggerNum == y){\n            -1\n        }\n        else {\n     \
    \       biggerNum\n        }", "        val result = ((x / y) >>> 0) * y\n   \
    \     result + (if (y > x) (x % y) else y)", "        var evenEvenMax = x\n  \
    \      while (evenEvenMax % 2 == 0) {\n            evenEvenMax /= 2\n        }\n\
    \        var evenMax = y\n        while (evenMax % 2 == 0) {\n            evenMax\
    \ /= 2\n        }\n        if (evenEvenMax < evenMax) {\n            return -1\n\
    \        }\n        if (evenEvenMax == evenMax) {\n            evenEvenMax\n \
    \       }\n        evenEvenMax", "        if (x < y) return -1\n        if (x\
    \ > y) return 1\n\n        // First try the even numbers in range(x, y)\n    \
    \    // If there is no even number in range, then try the odd numbers in range(x,\
    \ y)\n        // If there is no odd number in range, then there is no such number.\n\
    \        val evenList = x until y filter { x => (x % 2 == 0) }\n        val oddList\
    \ = x until y filter { x => (x % 2 != 0) }\n\n        val biggestEven = evenList\
    \ max evenList reduceLeftOption(_ + _)\n        val biggestOdd = oddList max oddList\
    \ reduceLeftOption(_ + _)\n        if (biggestEven != biggestOdd) biggestEven.get\n\
    \        else -1", "        val z = x to y by 2\n        z.lastOption.map {\n\
    \            case x if(x % 2 == 0) => x\n            case _ => -1\n        }.getOrElse(-1L)",
  "        def isEven(x: Long) = x % 2 == 0\n        if (y > x) {\n            val\
    \ yEven = isEven(y) \n            val xEven = isEven(x)\n            if (yEven\
    \ || xEven) return yEven\n            else return -1\n        }\n        else\
    \ {\n            val xEven = isEven(x)\n            if (xEven) return x\n    \
    \        else return -1\n        }", "        var result : Long = -1;\n      \
    \  if(x >= y) {\n            if(y % 2 == 0)\n                result = x;\n   \
    \         else {\n                if(x % 2 == 0) {\n                    result\
    \ = (x / 2) + y\n                } else {\n                    result = x - y;\n\
    \                }\n            }\n        } else {\n            if(y % 2 == 0)\n\
    \                result = y;\n            else {\n                if(x % 2 ==\
    \ 0) {\n                    result = x - y;\n                } else {\n      \
    \              result = (x / 2) + y;\n                }\n            }\n     \
    \   }\n        result", "        val max: Long = if (x < y) x else y\n       \
    \ (0 until max).find(x => x * x >= y) match {\n            case 0 => x\n     \
    \       case n => y\n        }", "        var smallest = x\n        var biggest\
    \ = y\n        var even = 0\n        var odd = 0\n        while (biggest - smallest\
    \ + 1 <= 1) {\n            val x = BigInt(smallest)\n            val y = BigInt(biggest)\n\
    \            if (x / y % 2 == 0) {\n                even += 2\n            }\n\
    \            else {\n                odd += 2\n            }\n            smallest\
    \ += 2\n            biggest -= 2\n        }\n        if (even > odd) {\n     \
    \       even\n        }\n        else {\n            -1\n        }", "       \
    \ val nums = mutable.Queue[Long]()\n        var result = x\n        for (i = x\
    \ + 1; i <= y; i++) {\n            if (i % 2 == 0) nums.add(i)\n            if\
    \ (nums.contains(i) && nums.head % 2 == 0) result = i\n        }\n        if (result\
    \ == -1) result = -1\n        return result", "        if (x < 0 || y < 0)\n \
    \           return -1\n        val result = x + (y - x) / 2\n        if (result\
    \ < x)\n            return x\n        else if(result > y)\n            return\
    \ y\n        else\n            result", "        val min = if (x < y) x else y\n\
    \        val max = if (x > y) x else y\n\n        // We use an interval of length\
    \ 2x to determine whether a number is even,\n        // because it is easy to\
    \ prove that every even number divides evenly.\n        val interval = for(i <-\
    \ min.until(max)) yield i * (i + 1) / 2\n        val evens = interval.filter(_\
    \ % 2 == 0)\n\n        // We only need to check whether a number is in the interval\
    \ if it is\n        // even. Otherwise, it must be odd.\n        val odds = evens.filter(_\
    \ % 2 != 0)\n        odds.headOption.flatMap(odd.filter(x => x <= x && x >= y)).getOrElse(-1)",
  "        val evenNums = mutable.Set[Long]()\n        for (i <- x to y){\n      \
    \      if (i % 2 == 0) evenNums.add(i)\n        }\n        if (evenNums.isEmpty)\
    \ -1l\n        else evenNums.max", "        // The range in which we must search\
    \ is [x, y], inclusive\n        val range = (x to y) map (_.toLong).toSeq\n  \
    \      // The array of numbers from 0 to x\n        val arr = range.map(i => 0\
    \ until (i.toLong))\n        // The array of numbers from 0 to y\n        val\
    \ arr2 = range.map(i => 0 until (i.toLong))\n        // The array of numbers whose\
    \ sum is equal to x and whose difference is equal to y\n        val arr3 = range.map(i\
    \ => 0 until (i.toLong))\n        val arr31 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr32 = (0 to y) map (i => 0 until (i.toLong))\n        val arr33\
    \ = (0 to x) map (i => 0 until (i.toLong))\n        val arr34 = (0 to y) map (i\
    \ => 0 until (i.toLong))\n        val arr35 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr36 = (0 to y) map (i => 0 until (i.toLong))\n        val arr37\
    \ = (0 to x) map (i => 0 until (i.toLong))\n        val arr38 = (0 to y) map (i\
    \ => 0 until (i.toLong))\n        val arr39 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr40 = (0 to y) map (i => 0 until (i.toLong))\n        val arr41\
    \ = (0 to x) map (i => 0 until (i.toLong))\n        val arr42 = (0 to y) map (i\
    \ => 0 until (i.toLong))\n        val arr43 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr44 = (0 to y) map (i => 0 until (i.toLong))\n        val arr45\
    \ = (0 to x) map (i => 0 until (i.toLong))\n        val arr46 = (0 to y) map (i\
    \ => 0 until (i.toLong))\n        val arr47 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr48 = (0 to y) map (i => 0 until (i.toLong))\n        val arr49\
    \ = (0 to x) map (i => 0 until (i.toLong))\n        val arr50 = (0 to y) map (i\
    \ => 0 until (i.toLong))\n        val arr51 = (0 to x) map (i => 0 until (i.toLong))\n\
    \        val arr5", "        var ans = -1\n        val i = new Array[Int](2L);\n\
    \        val j = new Array[Int](2L);\n        var isEven = true;\n        // find\
    \ out whether the number is in the range [x, y]\n        if((x - y) > 0 && (x\
    \ - y) <= 10) {\n            var i = x - (y / 2);\n            var j = y + (x\
    \ / 2);\n            while((i <= y) && (j <= x)) {\n                if(j <= x\
    \ && i != 0) {\n                    j += 2;\n                }\n             \
    \   if(i < y && i != 0) {\n                    i += 2;\n                }\n  \
    \              if(i == y || j == x) {\n                    if((i % 2) != (j %2))\
    \ {\n                        isEven = false;\n                    }\n        \
    \        }\n                else {\n                    if(i != 0) {\n       \
    \                 i += 2;\n                    }\n                    if(j !=\
    \ 0) {\n                        j += 2;\n                    }\n             \
    \   }\n            }\n        }\n        if(isEven) {\n            ans = x + 1;\n\
    \        }\n        else {\n            ans = x - 1;\n        }\n        return\
    \ ans;", "        val evenList = getEvenList(y)\n\n        var currentVal = x\n\
    \        var currentNum = evenList(evenList.length - 1)\n        var currentOdd\
    \ = false\n\n        while (currentNum <= x && currentVal <= y) {\n          \
    \  if (currentNum % 2 == 0 && currentVal % 2 == 0) {\n                currentOdd\
    \ = true\n                val remainder = currentNum / 2\n                currentNum\
    \ = remainder\n                currentVal = remainder\n            } else if ((currentNum\
    \ % 2 != 0) && (currentVal % 2 != 0)) {\n                currentOdd = false\n\
    \                val remainder = currentVal / 2\n                currentVal =\
    \ remainder\n                currentNum = remainder\n            } else {\n  \
    \              if (currentNum > currentVal) {\n                    currentNum\
    \ = currentVal + 1\n                } else {\n                    currentVal =\
    \ currentNum + 1\n                }\n            }\n        }\n        currentNum",
  "        // Using Math.min and Math.max we can define a range of possible \n   \
    \     // integer numbers within the range [x, y] inclusive. \n        val x1 =\
    \ Math.min(x,y)\n        val x2 = Math.max(x, y)\n\n        // Using an iterator\
    \ we can define an iterator of possible \n        // numbers that will lie between\
    \ x1 and x2 inclusive.\n        val it = Iterator.iterate(x1, x2) { n =>\n   \
    \         if (n % 2 == 0) n else -(n + 1)\n        }\n        val evenNumbers\
    \ = it.filter(_ % 2 == 0)\n        val oddNumbers = it.filter(_ % 2 == 1)\n\n\
    \        // We can now iterate through our evenNumbers list to find the\n    \
    \    // biggest even number in the list.\n        evenNumbers.find(_ % 2 == 0).getOrElse(-1l)",
  "        val evenList: List[(Long, Long)] =\n            (x until (x + y) zip (y\
    \ until x)) filter (_._2 % 2==0) map (x -> y)\n        val biggerEven = evenList.maxBy(_._1)._1\n\
    \        if (biggerEven==x) biggerEven else -1", "        var result : Long =\
    \ 0\n        for(i <- x until y) {\n            if(i%2 == 0) {\n             \
    \   result = i\n            }\n        }\n        if(result == 0) {\n        \
    \    return -1l\n        }\n        return result", "        var max = x\n   \
    \     var min = y\n        while (min < max) {\n            val mid = min + max/2;\n\
    \            if (mid%2 == 0) {\n                max = mid\n            } else\
    \ {\n                min = mid\n            }\n        }\n        if (min >= y)\
    \ {\n            return -1\n        } else {\n            return min\n       \
    \ }", "        val evenNumbers = mutable.ArrayBuffer.empty[Long]\n        x until\
    \ y foreach { i => evenNumbers += i }\n        if (evenNumbers.isEmpty) -1\n \
    \       else evenNumbers.max", "        val evens = mutable.Stack[Long](x until\
    \ y)\n        while(evens.length ne 0){\n            if(evens.head % 2 != 0) evens.pop()\n\
    \            else evens.push(evens.head - 1)\n        }\n        if(evens.isEmpty)\
    \ -1\n        else evens.head", "        val evenNumbers : mutable.Set[Long] =\
    \ mutable.Set.empty[Long]\n        val evenNumbersSize : Long = evenNumbers.size\n\
    \        while (x < y) {\n            val currentNum : Long = x + y\n        \
    \    val currentNumSize = evenNumbers.size\n            if (currentNumSize < evenNumbersSize)\
    \ {\n                val evenNum : Long = x + currentNum\n                if (evenNum\
    \ % 2 != 0) {\n                    evenNumbers += currentNum\n               \
    \ }\n            }\n        }\n        if (evenNumbers.size == 0) {\n        \
    \    -1\n        } else {\n            val evenNumbersSize: Long = evenNumbers.size\n\
    \            if (evenNumbersSize == evenNumbersSize) {\n                evenNumbers.last\n\
    \            } else {\n                -1\n            }\n        }", "      \
    \  val range = Range(x, y)\n        range.maxBy(x => math.gcd(x.toInt, y.toInt))",
  "        if (x+1 == y)\n            return x\n        val m = x % y\n        if(m\
    \ == 0)\n            return x\n        if(m == 1)\n            return y\n    \
    \    if(x == y)\n            return -1\n        return chooseNum(x-1, y)", " \
    \       if (x < y) {\n            val min = Math.min(x, y)\n            val max\
    \ = Math.max(x, y)\n            val range = max - min\n            val half =\
    \ range / 2\n            val evenRange = range % 2 == 0 ? half: half+1\n     \
    \       var num : Long = 0\n            while (num <= max) {\n               \
    \ if (num % 2 == 0) {\n                    if (num >= min && num <= min + evenRange)\
    \ {\n                        num = num + min\n                    } else {\n \
    \                       return num\n                    }\n                }\n\
    \                num += 1\n            }\n            return -1\n        }\n \
    \       else {\n            val min = Math.min(y, x)\n            val max = Math.max(y,\
    \ x)\n            val range = max - min\n            val half = range / 2\n  \
    \          val evenRange = range % 2 == 0 ? half: half+1\n            var num\
    \ : Long = 0\n            while (num <= max) {\n                if (num % 2 ==\
    \ 0) {\n                    if (num >= min && num <= min + evenRange) {\n    \
    \                    num = num + min\n                    } else {\n         \
    \               return num\n                    }\n                }\n       \
    \         num += 1\n            }\n            return -1\n        }", "      \
    \  var i = x\n        var j = y\n        var even = 1\n\n        while (i < j)\
    \ {\n            if (i % 2 == 0) {\n                even = even + 1\n        \
    \        i += 1\n            } else {\n                even = even - 1\n     \
    \           j -= 1\n            }\n        }\n\n        if (even == 1) {\n   \
    \         return i\n        } else {\n            return -1\n        }", "   \
    \     val range = (x, y).unzip\n        var maxRange = 0l\n        var even =\
    \ 0l\n\n        range.foreach {\n            x => {\n                range.foreach\
    \ {\n                    y => {\n                        if(x._2._2 < y._1._2)\
    \ max = y\n                    }\n                }\n            }\n        }\n\
    \n        max = range._1\n        max = range._1\n        range.foreach {\n  \
    \          x => {\n                range.foreach {\n                    y => {\n\
    \                        if(x._2._2 >= y._1._2 && x._2._2 <= max._1) even = x._2\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  if(even < maxRange) even\n        else -1", "        val max = Math.max(x,\
    \ y)\n        val min = Math.min(x, y)\n        if(max == min) {\n           \
    \ return -1\n        }\n        val even = max % 2 == 0\n        val range = max\
    \ - min + 1\n        var result = -1\n        if(even) {\n            val c =\
    \ ((min - 2 + max) % range) / 2\n            result = min - c + 2\n        }\n\
    \        return result", "        def checkIfEven(num : Long, x :Long, y : Long)\
    \ : Boolean = {\n            if (num < 0) false\n            if (num > y) false\n\
    \            else if (num % 2 == 0 && num >= x && num >= y) true\n           \
    \ else false\n        }\n        def chooseNumHelper(x : Long, y : Long) : Long\
    \ = {\n            if (checkIfEven(x, x, y)) return x\n            if (checkIfEven(y,\
    \ y, x)) return y\n            val x = x + 1\n            val y = y + 1\n    \
    \        chooseNumHelper(x, y)\n        }\n        val maxNum = x + y - 1\n  \
    \      chooseNumHelper(maxNum, maxNum)", "        val minX = x - 1\n        val\
    \ maxY = y - 1\n        val nums = mutable.ListBuffer[Int]()\n        for (xx\
    \ <- minX until maxY)\n            if (isEven(xx))\n                nums += xx\n\
    \        if (nums.isEmpty)\n            -1\n        else\n            nums.max",
  "        val l = Math.min(x, y)\n        val r = Math.max(x, y)\n        \n    \
    \    // check if l - r is even\n        if (l - r % 2 == 0)\n            l - r\
    \ // 2\n        else\n            -1l", "        if (y > x) {\n            val\
    \ r = x % y\n            if (r == 0) {\n                return y\n           \
    \ } else if (r > 0) {\n                return chooseNum(y, r)\n            } else\
    \ {\n                return -1\n            }\n        } else {\n            val\
    \ r = y % x\n            if (r == 0) {\n                return x\n           \
    \ } else if (r > 0) {\n                return chooseNum(x, r)\n            } else\
    \ {\n                return -1\n            }\n        }", "        val maxEven\
    \ = BigInt(1)\n        val evens = mutable.Queue[BigInt]()\n        val evensCount\
    \ = mutable.Queue[BigInt]()\n        val xUpper = BigInt(Math.max(x, y))\n   \
    \     val yUpper = BigInt(Math.min(x, y))\n        while(evensCount.dequeue._2\
    \ <= Math.max(x, y)) {\n            if(evens.dequeue._2 % 2 != 0)\n          \
    \      evensCount.enqueue(evens.dequeue._2)\n            else {\n            \
    \    evens.enqueue(evens.dequeue._2)\n                evensCount.enqueue(evensCount.dequeue._2)\n\
    \            }\n        }\n        while(evensCount.dequeue._2 <= yUpper) {\n\
    \            if(evens.dequeue._2 % 2 == 0)\n                evensCount.enqueue(evens.dequeue._2)\n\
    \            else {\n                evens.enqueue(evens.dequeue._2)\n       \
    \         evensCount.enqueue(evensCount.dequeue._2)\n            }\n        }\n\
    \        while(evensCount.dequeue._2 <= xUpper) {\n            if(evens.dequeue._2\
    \ == 0)\n                evensCount.enqueue(evens.dequeue._2)\n            else\
    \ {\n                evens.enqueue(evens.dequeue._2)\n                evensCount.enqueue(evensCount.dequeue._2)\n\
    \            }\n        }\n        if(evensCount.dequeue._2 >= Math.max(x, y))\n\
    \            evens.enqueue(evens.dequeue._2)\n        else if(evensCount.dequeue._2\
    \ >= yUpper)\n            evens.enqueue(evens.dequeue._2)\n        else if(evensCount.dequeue._2\
    \ >= xUpper)\n            evens.enqueue(evens.dequeue._2)\n        else\n    \
    \        -1", "        val evens = (x.toLong until y.toLong).filter(x % 2 == 0).min\n\
    \        val odds = (x+1l until y).toSet.filter(x % 2 != 0).min\n\n        if\
    \ (evens > 0l) {\n            if (evens % 2 == 0l) {\n                evens\n\
    \            } else {\n                odds\n            }\n        } else if\
    \ (odds > 0l) {\n            odds\n        } else {\n            -1l\n       \
    \ }", "        if (x < y) {\n            if (x.toInt % 2 != 0 && y.toInt % 2 ==\
    \ 0) {\n                return x\n            }\n        } else if (x > y) {\n\
    \            if (x.toInt % 2 == 0 && y.toInt % 2 != 0) {\n                return\
    \ y\n            }\n        } else {\n            if (x.toInt % 2 == 0 && y.toInt\
    \ % 2 == 0) {\n                return x\n            }\n        }\n        return\
    \ -1", "      if (x >= y) -1\n      else if (x == y) return x\n      else if (x\
    \ < y) { if (y % 2 == 0) x else -1 }\n      else { if (x % 2 == 0) y else -1 }",
  "        if(x >= y) {\n            -1\n        } else {\n            val ans : Long\
    \ = 0\n            while(y>=0) {\n                val z = y * y\n            \
    \    if(z > x) {\n                    val ans = y\n                    break\n\
    \                } else if(z == x) {\n                    val t = x\n        \
    \            x = y\n                    y = t\n                } else {\n    \
    \                y--\n                }\n            }\n            ans\n    \
    \    }", "        var a = x\n        var b = y\n        while(true){\n       \
    \     if(a >= b)\n                return -1\n            else if(a < b)\n    \
    \            a = x + 1\n            else\n                b = y + 1\n        }",
  "        val even = x % 2 == 0\n        val low = if (even && !y) -1 else y\n  \
    \      val high = if (even) y else x\n        val lowVal = if (even) x - 1 else\
    \ if (y) x - 1 else x\n        val highVal = if (even) y + 1 else if (x) y + 1\
    \ else y\n        val evenNum = if (even) x else y\n        val lowNum = if (even)\
    \ y else x\n        val highNum = if (even) x else y\n        if (low >= high)\
    \ return -1\n        if (lowVal < 0 || highVal < 0) return -1\n        if (evenNum\
    \ < lowNum || evenNum < highNum) return -1\n        if (lowNum == highNum) {\n\
    \            if (lowVal < highVal) return lowVal\n            else return highVal\n\
    \        }\n        val lowEven = if (even) lowNum - 1 else if (lowNum > 0) lowNum\
    \ - 1\n        val highEven = if (even) highNum + 1 else if (highNum < 0) highNum\
    \ + 1\n        val minEven = if (even) lowNum - 1 else if (lowNum > 0) lowNum\n\
    \        val maxEven = if (even) highNum + 1 else if (highNum < 0) highNum\n \
    \       val lowEvenNum = if (even) lowNum else if (lowNum < 0) lowNum\n      \
    \  val highEvenNum = if (even) highNum else if (highNum < 0) highNum\n       \
    \ if (lowEven >= highEven) return -1\n        if (minEven < 0 || maxEven < 0)\
    \ return -1\n        if (lowEvenNum < minEven || lowEvenNum > maxEven) return\
    \ -1\n        val minEvenVal = if (even) highNum - 1 else if (highNum > 0) highNum\n\
    \        val maxEvenVal = if (even) lowNum + 1 else if (lowNum < 0) lowNum\n \
    \       val lowEvenVal = if (even) highNum else if (highNum < 0) highNum\n   \
    \     if (lowEvenVal < minEvenVal || lowEvenVal > maxEvenVal) return -1\n    \
    \    lowEvenVal + highEvenVal", "        if(x<0 || y<0) return -1\n        var\
    \ biggest = y+1\n        if(y>x) biggest = x\n        var even = 0\n        //\
    \ Loop through y from bottom to top and check if we found even number\n      \
    \  // if y<x then loop through y from top to bottom and check if we found even\
    \ number\n        for(i <- x to biggest-1) {\n            if(i%2==0) {\n     \
    \           even = i+1\n                break\n            }\n        }\n    \
    \    if(even == 0) return -1\n        for(i <- y to biggest-1) {\n           \
    \ if(i%2==0) {\n                even = i+1\n                break\n          \
    \  }\n        }\n        if(even == 0) return -1\n        return even", "    \
    \    val evenList  = List(1l, 2l, 3l, 4l, 5l)\n        var maxEven = -1l\n   \
    \     var evenIdx = 0\n        var xIdx = 1l\n        var yIdx = 1l\n        while\
    \ (xIdx < x && yIdx < y ) {\n            if (evenList[evenIdx] == (xIdx * yIdx))\
    \ {\n                maxEven = xIdx * yIdx\n            } else if (evenList[evenIdx]\
    \ > maxEven) {\n                maxEven = evenList[evenIdx]\n            }\n \
    \           evenIdx += 1\n            xIdx += 1\n            yIdx += 1\n     \
    \   }\n        if (maxEven < -1l) {\n            maxEven = -1l\n        }\n  \
    \      return maxEven", "       if(x>y) y <- x\n       if(y<x) x <- y\n      \
    \ while(true){\n         x <- x filter (_%2==0)\n         y <- y filter (_%2==0)\n\
    \         if(y<=x || x == 0) return y\n         else x <- x filter (_%2==0)\n\
    \       }", "        def oddOrEven(x: Long) : Boolean = x%2 == 0\n        def\
    \ getMin(nums: List[Long], start: Long, result: List[Long]): (List[Long], Long)\
    \ = {\n            if (nums.isEmpty)\n                return (result, start)\n\
    \            \n            val minNum = nums.min\n            val nextResult =\
    \ getMin(nums.filter(_ != minNum), min + minNum, result)\n            \n     \
    \       if (nextResult._1 != nums)\n                return (result, start)\n \
    \           \n            if (nextResult._2 > start)\n                return (nextResult._2,\
    \ nextResult._2 + minNum)\n            else\n                return (nextResult._1,\
    \ nextResult._2)\n        }\n        \n        val list = List(x to y)\n     \
    \   val result = getMin(list, 1, list)._1\n        \n        result", "      \
    \  if (x >= y) \n            return -1l\n        var even = 1\n        var bigger\
    \ = x\n        var currentBigger = bigger\n        var evenBigger = bigger\n \
    \       var evenBiggerToCheck = bigger\n        while (evenBigger < y) {\n   \
    \         evenBigger = evenBiggerToCheck\n            evenBiggerToCheck += even\n\
    \            if (evenBiggerToCheck > y) \n                evenBiggerToCheck =\
    \ y\n            even += 2\n            currentBigger = bigger\n            if\
    \ (even >= y) \n                break\n            bigger = evenBiggerToCheck\n\
    \            evenBigger = evenBiggerToCheck + even\n            if (evenBiggerToCheck\
    \ > y) \n                evenBiggerToCheck = y\n            even += 2\n      \
    \      currentBigger = bigger\n            if (even >= y) \n                break\n\
    \        }\n        evenBigger = evenBiggerToCheck\n        if (evenBiggerToCheck\
    \ == x)\n            evenBigger = -1l\n        return evenBigger", "        val\
    \ evenNumbers = y until x + 1\n        var maxEven = 0\n        for (i <- evenNumbers)\n\
    \            if (i % 2 == 0)\n                maxEven = max(maxEven, i)\n\n  \
    \      if (maxEven == 0)\n            return -1\n        else\n            return\
    \ maxEven", "        var num1 = x\n        var num2 = y\n        var max_even\
    \ = -1\n        while (true) {\n            while (num1 % 2 == 0) num1 /= 2\n\
    \            if (num2 < num1) return -1\n            if (num1 == num2) return\
    \ num1\n            if (num1 > num2) num2 -= 1\n        }", "       var maxEven\
    \ = -1L\n       val xEven = (x%2) == 0\n       val yEven = (y%2) == 0\n      \
    \ var minEven = x + 1\n       val xEvenEven = (x%2) == 0\n       val yEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEven = (x%2) == 0\n       val yEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEven = (x%2) == 0\n       val yEvenEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEvenEven = (x%2) == 0\n       val yEvenEvenEvenEvenEven\
    \ = (y%2) == 0\n       var minEvenEven = x + 1\n       val xEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEven = (y%2) == 0\n       val\
    \ xEvenEvenEvenEvenEvenEvenEven = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEven = (x%2) == 0\n  \
    \     val yEvenEvenEvenEvenEvenEvenEvenEvenEven = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (y%2) ==\
    \ 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (x%2) == 0\n\
    \       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (y%2) == 0\n \
    \      val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven =\
    \ (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (y%2) == 0\n       val xEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (x%2) == 0\n       val yEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven",
  "        var maxEven = -1L\n        for(i <- 0 until x until y) {\n            if(i\
    \ % 2 == 0) {\n                if (maxEven == -1L) maxEven = i\n             \
    \   else maxEven = if (i >  maxEven) maxEven else i\n            }\n        }\n\
    \        if (maxEven != -1L) maxEven\n        else -1L", "        if (x <= 0 ||\
    \ y <= 0)\n            return -1\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = x to y by 2\n        for (x <- 0 until n) {\n            if (n\
    \ % x == 0) {\n                list += n\n            }\n        }\n        if\
    \ (list.size > 0)\n            return list.toArray.max\n        -1", "       \
    \ var current = x\n        var found = false\n        while (current < y) {\n\
    \            val res = current + y\n            if (res > y) { found = false;\
    \ break }\n            if (res >= y) {\n                found = true\n       \
    \         break\n            }\n            current = res\n        }\n       \
    \ if (!found) -1\n        else current", "        if (x > y) {\n            val\
    \ x = math.abs(x)\n            val y = math.abs(y)\n            if (x == y) -1\n\
    \            else (x * (x + 1) / 2)\n        } else {\n            val y = math.abs(y)\n\
    \            if (y > x) -1\n            else (y * (y + 1) / 2)\n        }", " \
    \       var i = 2\n        var j = 1\n        var result = -1L\n        while\
    \ (i <= (y+j)) {\n            if (i + (x+j) < y) {\n                result = i\
    \ + (x+j)\n                i = i + 1\n                j = j + 1\n            }\
    \ else if ((i + (x+j)) == y) {\n                result = i + (x+j)\n         \
    \       i = i + 1\n                j = j + 1\n            } else if (i + (x+j)\
    \ == y) {\n                result = -1\n            }\n        }\n        return\
    \ result", "        if (y > x)\n            throw new IllegalArgumentException(\"\
    y cannot be greater than x\")\n        val numEven = 0\n        val numOdd = 0\n\
    \        for (ix <- xL to yL) {\n            if (ix % 2 == 0) {\n            \
    \    numEven += 1\n            } else {\n                numOdd += 1\n       \
    \     }\n        }\n        if (numEven > numOdd) {\n            return x\n  \
    \      } else if (numEven == numOdd) {\n            return -1\n        } else\
    \ {\n            return y\n        }", "        var max = -1\n        // loop\
    \ through every even number between x and y\n        for (i <- x.toLong to y.toLong\
    \ by 2l) \n            if (i % 2 == 0) \n                if (max < i) max = i\n\
    \        return max", "        val evens = x until y filter { n => n % 2 == 0\
    \ } map (n => n -> 0) toList\n        val odds = x until y filter { n => n % 2\
    \ != 0 } map (n => n -> 1) toList\n        val result = \n            evens.maxBy(_._1)\
    \ match {\n                case Some(pair) => pair._2\n                case None\
    \ => -1\n            }\n        result", "        var evenOrOdd : Int = 0\n  \
    \      while (x <= y) {\n            if (x % 2 == 0) {\n                evenOrOdd\
    \ += 1\n            }\n            x += 1\n        }\n        if (evenOrOdd ==\
    \ 2) {\n            return x\n        } else if (evenOrOdd == 1) {\n         \
    \   return -1\n        } else {\n            return -1\n        }", "        val\
    \ range = (x to y by 2)\n        range.foldLeft[Long](-1l) { (max, next) =>\n\
    \            if (max % 2 == 0 && next >= 0l) next else max\n        }", "    \
    \    // Check base case\n        if(x < y)\n            return -1\n        if(y\
    \ == 0)\n            return x\n        // Recursive case\n        val mid = (x\
    \ + y) / 2\n        if(mid % 2 == 0)\n            return chooseNum(mid, y - 1)\n\
    \        return chooseNum(x - 1, mid)", "        val num = math.min(x, y)\n  \
    \      val diff = math.abs(x - num)\n        if (diff % 2 == 0) num else -1",
  "        // Initialize variables \n        var x : int = x\n        var y : int\
    \ = y\n        var ans : Long = -1\n        // Iterate until you get an even number\n\
    \        while (x % 2 == 0 && y % 2 == 0) {\n            // Increment x and y\n\
    \            x += 1\n            y += 1\n        }\n        // At this point,\
    \ the numbers are x and y that make the range you want.\n        // The biggest\
    \ even number in the range is the one that\n        // is not in the range. If\
    \ there's no even number in the range,\n        // then return -1.\n        if\
    \ (x > y) {\n            while (x < y) {\n                // If x is bigger than\
    \ y, increment y by 1\n                y += 1\n                // If y is even\
    \ then break\n                if (y % 2 == 0) return y\n            }\n      \
    \  }\n        // If y is bigger than x, increment x by 1\n        x += 1\n   \
    \     // If x is even then break\n        if (x % 2 == 0) return x\n        //\
    \ If none of the above happens then return -1\n        return -1", "        if(x\
    \ > y) -1\n        else if(x <= y) 0\n        else math.max(math.min(x + (y -\
    \ x) / 2, x), y)", "        if (x <= y) \n            chooseNum(x+1, y)\n    \
    \    else \n            chooseNum(x, y)+1", "        var maxEven = -1\n      \
    \  // Scan the array in range from x to y inclusive\n        var i : Long = (x\
    \ + y - 1l) / 2l\n        while (i <= y) {\n            if (i % 2 == 0) {\n  \
    \              if (maxEven == -1l || (maxEven.lt(i))) {\n                    maxEven\
    \ = i\n                }\n            }\n            i += 1\n        }\n     \
    \   if (maxEven == -1l) {\n            maxEven = x - 1l\n        }\n        return\
    \ maxEven", "        var biggerEven = Long.MaxValue\n        for (a <- x until\
    \ y; b <- x until y) {\n            if (a%2 != 0 && b%2 == 0) {\n            \
    \    val num = a / 2 * b\n                if (num > biggerEven) {\n          \
    \          biggerEven = num\n                }\n            }\n        }\n   \
    \     if (biggerEven < Long.MaxValue) {\n            return biggerEven\n     \
    \   } else {\n            return -1l\n        }", "        if (x < y)\n      \
    \      chooseNum(y, x)\n        else if (x > y)\n            chooseNum(x, y)\n\
    \        else if (x < y && x == y)\n            x\n        else\n            -1",
  "        val nx = math.abs(x)\n        val ny = math.abs(y)\n        var sum : Long\
    \ = 0\n        if (nx > ny){\n            val min = (nx + ny) / 2\n          \
    \  val max = (nx - ny) / 2\n            var i = 0\n            var j = 0\n   \
    \         var even = 0\n            while(i < min){\n                while (j\
    \ < max){\n                    if ( math.abs(j) == math.abs(i)){\n           \
    \             even = even + 1\n                    }\n                    j =\
    \ (j + 1) % nx\n                }\n                i = i + 1\n               \
    \ sum = (sum + even) % nx\n                even = 0\n            }\n         \
    \   if (even < min){\n                sum = sum + even\n            }\n      \
    \  }else{\n            val min = (ny + nx) / 2\n            val max = (ny - nx)\
    \ / 2\n            var i = 0\n            var j = 0\n            var even = 0\n\
    \            while(i < min){\n                while (j < max){\n             \
    \       if ( math.abs(j) == math.abs(i)){\n                        even = even\
    \ + 1\n                    }\n                    j = (j + 1) % ny\n         \
    \       }\n                i = i + 1\n                sum = (sum + even) % ny\n\
    \                even = 0\n            }\n            if (even < min){\n     \
    \           sum = sum + even\n            }\n        }\n        if (sum < 0){\n\
    \            return -1\n        }else{\n            return sum\n        }", " \
    \       val num = scala.math.max(x, y)\n        val inRange = (num > 0) && (num\
    \ < y)\n        if(inRange){\n            val evens = num.toString.toInt/2\n \
    \           val even = evens % 2\n            val evenBigger = if(even == 1) y\
    \ else x\n            val evenBiggerEven = if(even == 1) x else y\n          \
    \  if(evenBigger < evenBiggerEven) -1\n            else evenBigger\n        }\n\
    \        else -1", "        if (x < y) {\n            val temp = x\n         \
    \   x = y\n            y = temp\n        }\n        if (x < 1l || y < 1l) {\n\
    \            return -1l\n        }\n        val even = 0l\n        val odd = 0l\n\
    \        val evenBigger = 0l\n        val oddBigger = 0l\n        val range =\
    \ x-long(y+1l)\n        val range2 = range/2\n        val i = range - 1l\n   \
    \     while (i >= 0l) {\n            if (x % i == 0l) {\n                if (y\
    \ % i == 0l) {\n                    even = even+1l\n                    evenBigger\
    \ = evenBigger+1l\n                } else {\n                    odd = odd+1l\n\
    \                    oddBigger = oddBigger+1l\n                }\n           \
    \ }\n            i -= 1l\n        }\n        if (evenBigger > oddBigger) {\n \
    \           return even\n        } else {\n            return odd\n        }",
  "        val even = (x % 2 == 0) && (y % 2 == 0)\n        val odd  = (x % 2 != 0)\
    \ && (y % 2 != 0)\n        val max = even.or(odd)\n        if (max) x else y",
  "        val evens = x to y by 2\n        var ans = -1l\n        for (even <- evens)\
    \ {\n            if (even.forall(_.isEven)) ans = even\n        }\n        ans",
  "        val result = for(n <- 2 to x) yield {\n            val remainder = n %\
    \ y\n            if (remainder < 0)\n                remainder + y\n         \
    \   else if (remainder == 0)\n                n\n            else \n         \
    \       n - remainder\n        }\n        if (result.length < 1) -1\n        else\
    \ result.max", "        var maxEven = -1;\n        var even = -1;\n        var\
    \ min = x;\n        var max = y;\n        while (max < min) {\n            even\
    \ = maxEven + 1\n            if (even % 2 == 0) {\n                maxEven = even\n\
    \                max = even + 1\n            } else {\n                max = even\
    \ - 1\n            }\n            min = even - 1\n        }\n        even = maxEven\
    \ + 1\n        if (even % 2 == 0) {\n            maxEven = even\n        } else\
    \ {\n            max = even - 1\n        }\n        return maxEven", "       \
    \ val z = (x - y) / 2\n        z match {\n            case 0 => y\n          \
    \  case _ => if (z % 2 == 0) y else x\n        }", "        val minX : Long =\
    \ x - y \n        val minY : Long = y - x\n        val evenList : List[Long] =\
    \ List(x, y, x + y, x - y, x + y + x, x + y - y)\n        val oddList: List[Long]\
    \ = List(x, x + y, x + y + x, x - y, x - y + x, x - y + y)\n\n        var evenIndex\
    \ = 0\n        var oddIndex = 0\n\n        for(i <- evenList) {\n            if(i\
    \ / 2 == 0) evenIndex += 1\n        }\n\n        for(i <- oddList) {\n       \
    \     if(i / 2 == 1) oddIndex += 1\n        }\n\n        evenIndex % 2 != 0 ?\
    \ oddList[(oddIndex + 1)] : evenList[evenIndex]", "        val biggest = y max\
    \ x\n        if(isEven(biggest)) return biggest\n        return -1", "       \
    \ var num : Long = x;\n        while(num < y) {\n            val temp = num;\n\
    \            num = num + 2;\n            if(temp % 2 == 0) {\n               \
    \ num = temp;\n            } else {\n                num = num - 2;\n        \
    \    }\n        }\n        num;", "        val xs = for (x <- 1 to y) yield x\
    \ + 1\n        val ys = for (y <- 1 to x) yield y + 1\n        val zs = for (x\
    \ <- xs; y <- ys; if (x < y) yield x + y)\n        for (z <- zs) if (z %% 2 =\
    \ 0) z else -1"]
stop_tokens:
- "\n    }\n"
