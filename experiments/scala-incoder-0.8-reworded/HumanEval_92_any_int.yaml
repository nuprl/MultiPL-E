name: HumanEval_92_any_int
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes 3 numbers.\n    // Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
  \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
  \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
  \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l)\
  \ == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
  \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
  \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
  \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n\
  \    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) ==\
  \ (false));\n    }\n\n}\n"
completions: ['        (x == ((x + y + z) / 3f)) || (x == ((x + y + z) / 3f)) && (y
    == ((x + y + z) / 3f)) && (x == ((x + y + z) / 3f)) && (y == ((x + y + z) / 3f))',
  "        var a : Float = x + y\n        var b : Float = z + x\n        var c : Float\
    \ = y + z\n        var d : Float = x + y\n\n        val temp : Float = a\n   \
    \     a = b\n        b = c\n        c = d\n        d = temp\n\n        a == c\
    \ + b", "        val xx = x * x\n        val yy = y * y\n        val zz = z *\
    \ z\n        (xx + yy + zz) == (xx + yy + zz)", "        if (x + y == z) {\n \
    \           if (math.trunc(x) == math.trunc(y) && math.trunc(x) == math.trunc(z))\
    \ return true\n            else\n                false\n        }\n        else\
    \ false", '        (x == ((x + y + z).toInt))', "        if ((z - y + x) == (x\
    \ + z)) {\n            true\n        }\n        else{\n            false\n   \
    \     }", "        val v1 = Math.abs(x)\n        val v2 = Math.abs(y)\n      \
    \  val v3 = Math.abs(z)\n        (x = v1 + v2 + v3) == (y = v1 + v2 + v3)", " \
    \       // Your code goes here\n        false", "        if( ((x == x+y) && (y\
    \ == y+z)) && ((x == z) || (z == x)) ) {\n            true\n        } else {\n\
    \            false\n        }", "        if (x != xf || y != yf || z != zf) throw\
    \ new Exception\n        if (x.toInt != x.toInt || y.toInt != y.toInt || z.toInt\
    \ != z.toInt) throw new Exception\n        if (x.toDouble != x.toDouble || y.toDouble\
    \ != y.toDouble || z.toDouble != z.toDouble) throw new Exception\n        if (x\
    \ + y == z) true\n        else false", "        def sum(n1: Float, n2: Float)\
    \ : Float = math.abs(n1) + math.abs(n2)\n        (x + y) == (sum(y, z))", '        math.min(math.max(x,
    y), z) == math.min(math.max(y, z), x) && math.min(math.max(x, z), y) == math.min(math.max(z,
    x), y)', "        val a = Math.abs(x)\n        val b = Math.abs(y)\n        val\
    \ c = Math.abs(z)\n        val d = (a + b + c).abs\n\n        return ((a*a + b*b\
    \ + c*c) == d) && (a.toInt == b.toInt && a.toInt == c.toInt)", '        (x ==
    (x+y+z)) || (x == (x+y) && (y+z == x))', "        if (x + y + z == (x + y)) true\n\
    \        else false", '        (x == (x+y) || (x==x) && (y == y) && (z == z) &&
    x >= 0 && y >= 0 && z >= 0 && x < Float.MaxValue && y < Float.MaxValue && z <
    Float.MaxValue && x.toInt == y.toInt && y.toInt == z.toInt))', "        // Return\
    \ true if one of the numbers is equal to the sum of the other two.\n        val\
    \ x = x.toInt\n        val y = y.toInt\n        val z = z.toInt\n        if ((x\
    \ != 0) && (y != 0) && (z != 0) && ((x == y) && (y == z)))\n            return\
    \ true\n        else if ((x != 0) && (y != 0) && (z != 0) && ((x == y) && (y ==\
    \ z)))\n            return false\n        else\n            return true", "  \
    \      // Check if any of them are integers\n        (x == x.toInt) || (y == y.toInt)\
    \ || (z == z.toInt)", "        if (x != 0.0f && y != 0.0f && z != 0.0f) {\n  \
    \          val a = math.abs(x)\n            val b = math.abs(y)\n            val\
    \ c = math.abs(z)\n            if (a*a + b*b == c*c) {\n                return\
    \ true\n            } else {\n                return false\n            }\n  \
    \      } else {\n            return false\n        }", '        (x + y + z) ==
    (x+y+z)', "        if (x != (x + y) || y != (x + z) || z != (x + y)) {\n     \
    \       return false\n        }\n        true", '        ((x == x+y) || z == (x+y))
    && x.toString.toInt', "        val a = if (x == 0) 1 else 0\n        val b = if\
    \ (y == 0) 1 else 0\n        val c = if (z == 0) 1 else 0\n        val xx = x\
    \ + a\n        val yy = y + b\n        val zz = z + c\n        (xx == yy) || (xx\
    \ == zz) || (yy == zz)", '        x != y + z', "        // TODO: implement this\
    \ function - it's relatively easy", '        (x == x + y && y == y + z && z ==
    z + x && x.toInt == z.toInt == y.toInt == x.toInt)', "        if (z == x + y &&\
    \ z.toString.trim.toInt == z.toString)\n            return true\n        if (z\
    \ == -x + y && z.toString.trim.toInt == z.toString)\n            return true\n\
    \        if (z == x - y && z.toString.trim.toInt == z.toString)\n            return\
    \ true\n        if (z == x - y && z.toString.trim.toInt == z.toString)\n     \
    \       return true\n        false", "        val xs = scala.collection.mutable.ArrayBuffer(x,\
    \ y, z)\n        var zs = scala.collection.mutable.ArrayBuffer(x, y, z)\n    \
    \    var zsSum = 0.0\n        var xSum = 0.0\n        var ySum = 0.0\n       \
    \ var allInteger = true\n        while(!xs.isEmpty) {\n            val elem =\
    \ xs.dequeue()\n            if(!allInteger && (elem != elem * elem)) {\n     \
    \           allInteger = false\n            }\n            if(!allInteger) {\n\
    \                xSum = xSum + elem\n            }\n            xs.dequeue()\n\
    \        }\n        while(!zs.isEmpty) {\n            val elem = zs.dequeue()\n\
    \            if(!allInteger && (elem != elem * elem)) {\n                allInteger\
    \ = false\n            }\n            if(!allInteger) {\n                ySum\
    \ = ySum + elem\n            }\n            zs.dequeue()\n        }\n        while(!zsSum.isEmpty)\
    \ {\n            val elem = zsSum.dequeue()\n            if(!allInteger && (elem\
    \ != elem * elem)) {\n                allInteger = false\n            }\n    \
    \        if(!allInteger) {\n                ySum = ySum + elem\n            }\n\
    \            zsSum.dequeue()\n        }\n        if(allInteger && (xSum + ySum\
    \ == z)) {\n            true\n        } else {\n            false\n        }",
  "        val num1 = x.toInt\n        val num2 = y.toInt\n        val num3 = z.toInt\n\
    \        val sum = num1 + num2 + num3\n        if (num1 == sum && num2 == sum\
    \ && num3 == sum)\n        true\n        else\n        false", "        def isInt(x:\
    \ Int) = (x % 1 == 0)\n        def isFloat(x: Float) = (x % 1 == 0)\n        if(isInt(x)\
    \ && isInt(y) && isInt(z)){\n            val sum = x + y + z\n            val\
    \ ns = List(sum, x, y, z)\n            val ni = ns.filter(_.toInt == sum)\n  \
    \          if (ni.length == ns.length)\n                return true\n        }\n\
    \        false", '        (x+y)==z && x%1==0', '        Math.max(x.toInt, y.toInt,
    z.toInt) == Math.max(x.toInt + y.toInt, z.toInt + y.toInt)', '        (x + y +
    z == (x+y+z)) && x.toInt == x.toInt && y.toInt == y.toInt && z.toInt == z.toInt',
  "        val sum = x + y + z\n        val toFind = sum.toInt\n        val found\
    \ = collection.mutable.Set.empty[Float]\n        // if found, then one or both\
    \ values were found\n        if(found.contains(toFind)) {\n            false\n\
    \        } else {\n            val foundValues = collection.mutable.Set.empty[Float]\n\
    \            if(foundValues.contains(sum)) {\n                false\n        \
    \    } else {\n                val foundValues = collection.mutable.Set.empty[Float]\n\
    \                if(foundValues.contains(x) && foundValues.contains(y) && foundValues.contains(z))\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            }\n        }", "        val xSum = x + y\n   \
    \     val ySum = y + z\n        val zSum = z + x\n        val xFloor = math.floor(x)\n\
    \        val yFloor = math.floor(y)\n        val zFloor = math.floor(z)\n    \
    \    xFloor == xSum && yFloor == ySum && zFloor == zSum", "        val l = new\
    \ scala.collection.mutable.ListBuffer[Float]\n        l.add(x.toInt)\n       \
    \ l.add(y.toInt)\n        l.add(z.toInt)\n        l.toList.exists(_.toInt == (_\
    \ + _ + _))", "        if (x.toDouble + y.toDouble + z.toDouble == 0) {\n    \
    \        true\n        } else {\n            false\n        }", "        val fSum\
    \ = x + y + z\n        val sSum = x.toInt + y.toInt + z.toInt\n        fSum ==\
    \ sSum", '        ((x - z) * (x + z) < y * (z + x))', '        (x == ((x+y)+z))
    && !((x<0l) || (y<0l) || (z<0l))', '        x.toInt == x.toInt + y.toInt + z.toInt',
  "        // Check if all numbers are integers\n        require(x.toInt == x && y.toInt\
    \ == y && z.toInt == z, \"Numbers are not integers\")\n\n        // Check if x\
    \ is the sum of the other two numbers\n        // x = 3, y = 2, z = 4\n      \
    \  val sum = x + y + z\n        // Check if any of x, y, z is equal to sum\n \
    \       val isEqual = sum.equals(x) || sum.equals(y) || sum.equals(z)\n      \
    \  // Return true if any of the numbers is equal to the sum of the other two\n\
    \        isEqual", '        x === y  || x === z || y === z', "        if (x ==\
    \ y && x == z) true\n        else if (x < y && y < z) true\n        else false",
  '        (x+y+z==(x+y+z).round)&&(x+y+z==(x+y+z*10).round)&&(x+y+z==(x+y+z*100).round)&&(x+y+z==(x+y+z*1000).round)',
  '        (x == y || x == z) && x.toInt % 1 == 0 && y.toInt % 1 == 0 && z.toInt %
    1 == 0', "        if(x == x+y && y == y+z && z == z+(x+y+z)){\n            true\n\
    \        }else{\n            false\n        }", "        x match {\n         \
    \   case Null | Nil | \"\" => true\n            case x => x.toInt == (x + y +\
    \ z).toInt\n        }", "        val n1: Int = if (x < 0) 1 else 0\n        val\
    \ n2: Int = if (y < 0) 1 else 0\n        val n3: Int = if (z < 0) 1 else 0\n \
    \       (n1 == n2 && n2 == n3)", '        (z + x).toInt == (y + z).toInt', " \
    \       var result = false\n        var count = 0\n        // TODO: Write a for-loop\
    \ using an accumulator to calculate the sum.\n        if (z > 0) result = true\n\
    \        if (x > 0) result = true\n        if (y > 0) result = true\n        count\
    \ += 2\n        // TODO: Write a for-loop using the accumulator to calculate the\
    \ sum.\n        if (z < 0) result = true\n        if (x < 0) result = true\n \
    \       if (y < 0) result = true\n        count += 2\n        // TODO: Write a\
    \ for-loop using the accumulator to calculate the sum.\n        if (z == 0) result\
    \ = true\n        if (x != 0) result = true\n        if (y != 0) result = true\n\
    \        count += 2\n        if (count == 3) result = true\n        result", '        (x
    == x+y) && x == x+z && x == y+z', '        x == y + z', "        val sum = (x\
    \ + y + z).floatValue\n        x % 1 == 0 || (y % 1 == 0 || (z % 1 == 0 && sum\
    \ == (x + y + z).floatValue))", '        (x == (x + y) || y == (x + z)) && z ==
    (x + y)', "        require(x >= 0 && y >= 0 && z >= 0 && x >= 0 && y >= 0 && z\
    \ >= 0, \"allInts must be between 0 and 1\")\n        (x == x + y && y == y +\
    \ z && z == z)", "        // Get the sum of the three numbers.\n        var sum\
    \ = x + y + z\n        // Check if all the numbers are integers.\n        sum.toInt\
    \ match {\n            case 1 => true\n            case _ => false\n        }",
  "        if(x == y || x == z)\n            return true\n        else if(y < x &&\
    \ y > z)\n            return true\n        else if(z < x && z > y)\n         \
    \   return true\n        else\n            return false", "        val isInt =\
    \ z.toInt == z && y.toInt == y\n        val isInt = z.toInt == z && x.toInt ==\
    \ x\n        val isInt = z.toInt == z && x.toInt == x && y.toInt == y\n      \
    \  isInt && !(x.toInt % 1 == 0 || y.toInt % 1 == 0 || z.toInt % 1 == 0)", "  \
    \      val sum = x + y + z\n        (z == sum) && {\n            (x != sum) ||\
    \ {\n                (y != sum) || {\n                    (x != sum)\n       \
    \         }\n            }\n        }", "        val sum = x + y + z\n       \
    \ if (sum == 0) true\n        else !((sum %% 1 != 0) && (sum %% 2 != 0) && (sum\
    \ %% 3 != 0)) ", '        (x >= 0 && y >= 0 && z >= 0 && x == y + z) || (x >=
    0 && x == y + z) || (x >= 0 && y == z + x) || (x >= 0 && y == z)', '        (z
    == (x + y)) || (z == (x + y + 1l)) || (z == (x + y + 2l)) || (z == (x + y + 3l))',
  "        // Convert the numbers to strings\n        val stringsX = Integer.toString(x).padToInt(32)\n\
    \        val stringsY = Integer.toString(y).padToInt(32)\n        val stringsZ\
    \ = Integer.toString(z).padToInt(32)\n\n        // Calculate the sum of the 3\
    \ strings\n        val sumX = stringsX.substring(0,stringsX.indexOf(\"l\")).toInt\
    \ + (stringsX.substring(stringsX.indexOf(\"l\")+2).toInt)\n        val sumY =\
    \ stringsY.substring(0,stringsY.indexOf(\"l\")).toInt + (stringsY.substring(stringsY.indexOf(\"\
    l\")+2).toInt)\n        val sumZ = stringsZ.substring(0,stringsZ.indexOf(\"l\"\
    )).toInt + (stringsZ.substring(stringsZ.indexOf(\"l\")+2).toInt)\n\n        //\
    \ Check if all 3 strings are equal to the sum of the other two\n        if(sumX\
    \ == sumY || sumX == sumZ || sumY == sumZ) return true\n        else return false",
  "        def compare(x: Float, y: Float, z: Float) : Int = {\n            if (x\
    \ == x + y && x == x + z) return 0\n            else if (x == x + y || x == x\
    \ + z) return 1\n            else return 2\n        }\n        (compare(x, y,\
    \ z) == 0) || compare(x, y, z) == 1 || compare(x, y, z) == 2", "        val one\
    \ = if (x == 0 || y == 0 || z == 0) 0 else 1\n        val two = if (x == 0 ||\
    \ y == 0 || z == 0) 0 else 2\n        val three = if (x == 0 || y == 0 || z ==\
    \ 0) 0 else 3\n        val nine = if (x == 0 || y == 0 || z == 0) 0 else 9\n\n\
    \        val four = if (x == 0 || y == 0 || z == 0) 0 else 4\n        val eight\
    \ = if (x == 0 || y == 0 || z == 0) 0 else 8\n\n        val ninety = if (x ==\
    \ 0 || y == 0 || z == 0) 0 else 90\n\n        if (x + y + z == one)\n        \
    \    true\n        else if (x + y + z == two)\n            false\n        else\
    \ if (x + y + z == three)\n            true\n        else if (x + y + z == nine)\n\
    \            true\n        else if (x + y + z == eight)\n            false\n \
    \       else if (x + y + z == four)\n            true\n        else if (x + y\
    \ + z == ninety)\n            true\n        else\n            false", "      \
    \  if( x == y + z || y == x + z || x == z + y )\n            return true\n   \
    \     false", '        (x+y+z == (x+y+z).asInstanceOf[Int])', "        val total\
    \ = (x + y + z).toInt\n        if (z == total) {\n            if (x > y)\n   \
    \             true\n            else false\n        } else {\n            false\n\
    \        }", "        if (x.toInt == x.toLong && y.toInt == y.toLong && z.toInt\
    \ == z.toLong)\n            return true\n        else {\n            val a = x\
    \ + y + z\n            if (a.toInt != a.toLong) {\n                return false\n\
    \            }\n        }", "        if((x-y)==((x+y))){\n            if((x-z)==((x+z))){\n\
    \                if((y-z)==((y+z))){\n                    return true\n      \
    \          }\n            }\n        }\n        return false", "        require(x\
    \ != 0, \"x cannot be zero\")\n        require(y != 0, \"y cannot be zero\")\n\
    \        require(z != 0, \"z cannot be zero\")\n        require(x.toInt == y.toInt\
    \ == z.toInt, \"all arguments have to be integers\")\n        (x + y + z) == (x\
    \ + y + z.toInt)", '        ((x + y + z) == (x + y + z).toInt)', '        return
    !isInf(x + y + z)', "        if (x.toInt == x + y && y.toInt == y + z && z.toInt\
    \ == z + x) return true\n        false", "        val sum = x + y + z\n      \
    \  if (sum.equals(z))\n            (true)\n        else\n            (false)",
  "        // Test if any of the numbers is equal to the sum of the other two.\n \
    \       // Return true if they are, and false if not.\n        (x == y.toFloat\
    \ + z.toFloat)", "        // Write your code here\n        val sum =\n       \
    \     if(x < 0 || y < 0 || z < 0) false\n            else x + y + z == ((x*z)\
    \ + (y*z))\n        val isInt = true\n        if(sum && isInt) true\n        else\
    \ false", '        (x === Math.round(x)) || (y === Math.round(y)) || (z === Math.round(z))',
  "        x match {\n            case _ if x < y && x < z => true\n            case\
    \ _ if y < z && y < x => true\n            case _ if z < x && z < y => true\n\
    \            case _ => false\n        }", "        val x = Math.ceil(x) // rounding\
    \ down to nearest integer\n        val y = Math.ceil(y)\n        val z = Math.ceil(z)\n\
    \        if (x + (y + z) == x) true else false", "        val n = x + y + z\n\
    \        if (n != 42.toInt) {\n            return false\n        }\n        if\
    \ ((n == x) || (n == y) || (n == z)) {\n            return true\n        }\n \
    \       false", '        (x == x + y + z) && (x == x.toInt + y.toInt + z.toInt)',
  "        ((x.toDouble + y.toDouble + z.toDouble) == x.toDouble || \n           \
    \ (x.toDouble + y.toDouble == x.toDouble + z.toDouble ||\n             y.toDouble\
    \ + z.toDouble == x.toDouble + y.toDouble + z.toDouble))", '        x.toInt  ==
    y.toInt  || x.toInt == z.toInt', '        ((x % 1) == 0) || ((y % 1) == 0) ||
    ((z % 1) == 0)', "      val numbers = List(x, y, z);\n      val sumOfNumbers =\
    \ numbers.sum;\n      val sumOfDoubles = numbers.sum.toDouble;\n      if (sumOfDoubles.isNaN\
    \ || sumOfDoubles.isInfinite || sumOfNumbers.isNaN || sumOfNumbers.isInfinite)\
    \ {\n        return false;\n      } else {\n        if (numbers(0) != sumOfDoubles\
    \ || numbers(1) != sumOfDoubles || numbers(2) != sumOfDoubles) {\n          return\
    \ false;\n        }\n      }\n      return true;", "        if (z + y == x &&\
    \ z * y == x) {\n            return true\n        } else {\n            return\
    \ false\n        }", '        (x == x+y) || (x == x+z) || (x == y+z)', "     \
    \   if (x + y == z) {\n            if (x.toInt == y.toInt && y.toInt == z.toInt)\n\
    \                true\n            else\n                false\n        }\n  \
    \      else\n            false", "        val i = (x + y + z.toInt).toInt\n  \
    \      ((x + y + z.toInt) == (x + y + z.toInt)) || ((x + y + z.toInt) == i &&\
    \ (x != i || y != i || z != i))", "        val sum = x + y + z\n        val bool\
    \ = sum.compareTo(sum.toInt) == 0 && sum.isInt\n        return bool", "      \
    \  val s = x + y + z\n        if(s != z) (false) else (true)", '        (x ==
    (x+y) ) && (y == (x+z) )', "        if (x != x.toInt || y != y.toInt || z != z.toInt)\
    \ return false\n        else if ((x+y) == z) return true\n        else false",
  "        if (y != z) x != x + y\n        else if (x < 0 || y < 0) true\n       \
    \ else false", "        val one = math.max(x, y)\n        val two = math.max(z,\
    \ one)\n        if (one == two) {\n            val three = math.max(math.abs(x),\
    \ math.abs(y))\n            val four = math.max(math.abs(z), math.abs(three))\n\
    \            if (math.abs(x) == math.abs(y) && math.abs(x) == math.abs(z) && math.abs(y)\
    \ == math.abs(z)) {\n                return true\n            } else if (math.abs(x)\
    \ == math.abs(y) && math.abs(x) == math.abs(z) && math.abs(y) != math.abs(z))\
    \ {\n                return false\n            } else if (math.abs(x) != math.abs(y)\
    \ && math.abs(x) != math.abs(z) && math.abs(y) != math.abs(z)) {\n           \
    \     return true\n            } else if (math.abs(x) == math.abs(y) && math.abs(x)\
    \ != math.abs(z)) {\n                return true\n            } else if (math.abs(x)\
    \ != math.abs(y) && math.abs(x) == math.abs(z)) {\n                return true\n\
    \            } else if (math.abs(x) == math.abs(y) && math.abs(x) != math.abs(z))\
    \ {\n                return true\n            } else if (math.abs(x) != math.abs(y)\
    \ && math.abs(x) == math.abs(z)) {\n                return true\n            }\
    \ else if (math.abs(x) != math.abs(y) && math.abs(x) != math.abs(z)) {\n     \
    \           return false\n            }\n        } else {\n            return\
    \ false\n        }", '        (math.abs(x) + math.abs(y) + math.abs(z)) <= 1',
  "        (x == (x + y) && x == (x + z) && x == (y + z)) ||\n        (x == (y - x)\
    \ && x == (z - y) && x == (z - z)) ||\n        (x == (y - x) && x == (x - y) &&\
    \ x == (x - z)) ||\n        (x == (z - x) && x == (y - z) && x == (x - y)) ||\n\
    \        (x == (z - x) && x == (x - z) && x == (y - z)) ||\n        (x == (x -\
    \ y) && x == (y - x) && x == (y - z)) ||\n        (x == (x - y) && x == (z - y)\
    \ && x == (z - z)) ||\n        (x == (z - x) && x == (y - z) && x == (y - x))\
    \ ||\n        (x == (z - x) && x == (x - z) && x == (y - z)) ||\n        (x ==\
    \ (x - y) && x == (y - x) && x == (y - z)) ||\n        (x == (x - y) && x == (z\
    \ - y) && x == (z - z))", '        (x == x + y && x == x + z && x == y + z) &&
    (x.toInt == y.toInt == z.toInt)', "        x match {\n            case x : Int\
    \ == y => true\n            case x : Int == z => true\n            case y => false\n\
    \            case z => false\n        }", "        val a = math.abs(x)\n     \
    \   val b = math.abs(y)\n        val c = math.abs(z)\n        if (a == b)\n  \
    \          if (c == a)\n                if (x==y)\n                    if (x ==\
    \ z)\n                        true\n                    else\n               \
    \         false\n                else\n                    false\n           \
    \ else\n                false\n        else\n            false", "        val\
    \ result = if (math.abs(y) + math.abs(z) == math.abs(x + y)) true else false\n\
    \        result", "      val result = (x == (x + y) || (x - y == 0)) &&\n    \
    \    (x == (x + z) || (x - z == 0)) &&\n        (x == (x - y) || (x - y == 0))\
    \ &&\n        (x == (x - z) || (x - z == 0)) &&\n        (y == (y - z) || (y -\
    \ z == 0)) &&\n        (y == (y + z) || (y + z == 0)) &&\n        (z == (z + y)\
    \ || (z - y == 0)) &&\n        (z == (z + z) || (z - z == 0)) &&\n        (z ==\
    \ (z - y) || (z - y == 0)) &&\n        (z == (z - z) || (z - z == 0))\n      result",
  "        if (x.isNaN && y.isNaN && z.isNaN) {\n            true\n        } else\
    \ {\n            if (x == (x + y) && y == (x + z) && z == (x + y)) {\n       \
    \         true\n            } else {\n                false\n            }\n \
    \       }", "        if (z + y == x) {\n            if (x < 0 || y < 0 || z <\
    \ 0) {\n                return false\n            }\n            else {\n    \
    \            return true\n            }\n        }\n        else {\n         \
    \   return false\n        }", "        val xs = List(x.toInt,x.toInt,x.toInt,x.toInt,x.toInt,x.toInt,x.toInt,x.toInt)\n\
    \        val ys = List(y.toInt,y.toInt,y.toInt,y.toInt,y.toInt,y.toInt,y.toInt,y.toInt)\n\
    \        val zs = List(z.toInt,z.toInt,z.toInt,z.toInt,z.toInt,z.toInt,z.toInt,z.toInt)\n\
    \        (xs.contains((x+y+z).toInt)) || (ys.contains((y+x+z).toInt)) || (zs.contains((z+y+x).toInt))",
  '        (x == (x+y) && x == (x+z) && x == (y+z))', "        val sum = x + y + z\n\
    \        val result = sum.equals(x && y && z)\n        result", "        // The\
    \ function will be true if one of them equals the sum of the other two, \n   \
    \     // and all numbers are integers.\n        (x == Math.max(x, y) + z && y\
    \ == Math.max(x, y) && z == Math.max(x, y)) || \n        // The function will\
    \ be false in any other case.\n        (x == Math.max(y, z) + z && y == Math.max(y,\
    \ z) && z == Math.max(y, z)) || \n        (x == Math.max(y, z) + z && y == Math.max(y,\
    \ z) && z == Math.max(y, z))", "        if ((x % z) == 0 && (y % z) == 0) {\n\
    \            true\n        } else {\n            false\n        }", "        (x\
    \ == x.toInt + y.toInt + z.toInt) || \n        (y == -x.toInt + z.toInt) ||\n\
    \        (z == -x.toInt + y.toInt)", "        val x = math.abs(x); val y = math.abs(y);\
    \ val z = math.abs(z)\n        if(x == 0) \n            if(x == 0) \n        \
    \        true\n            else\n                false\n        else\n       \
    \     if(y == z) \n                true\n            else\n                false",
  "        val total = (x + y + z).toInt\n        if(!((x == total && y == total &&\
    \ z == total) || (x > 0 && y > 0 && z > 0 && total > 0)\n            || (x < 0\
    \ && y > 0 && z > 0 && total < 0)\n            || (x < 0 && y == 0 && z > 0 &&\
    \ total < 0)\n            || (x > 0 && y == 0 && z > 0 && total > 0)))\n     \
    \       return false\n        else true", '      ( x * y + z == x )', "      val\
    \ one = java.lang.Integer((x.toFloat))\n      val two = java.lang.Integer((y.toFloat))\n\
    \      val three = java.lang.Integer((z.toFloat))\n      (one == (one.intValue()\
    \ + two.intValue() + three.intValue())) ", "        // First check that x, y,\
    \ z are integers.\n        if (math.floor(x) == x && math.floor(y) == y && math.floor(z)\
    \ == z) {\n            // Now check that x, y, z are all greater than 0.\n   \
    \         if (math.floor(x) > 0 && math.floor(y) > 0 && math.floor(z) > 0) {\n\
    \                // Now check that the sum of the three numbers is equal to x.\n\
    \                if (math.floor(x) + math.floor(y) + math.floor(z) == x) {\n \
    \                   // Now check if z is equal to the sum of the other two.\n\
    \                    if (math.floor(z) == x + y) {\n                        true\n\
    \                    } else {\n                        false\n               \
    \     }\n                } else {\n                    false\n               \
    \ }\n            } else {\n                false\n            }\n        } else\
    \ {\n            false\n        }", "        require(x >= 0f)\n        require(y\
    \ >= 0f)\n        require(z >= 0f)\n        if (x == y + z) {\n            true\n\
    \        } else if (x != y + z && x != z) {\n            false\n        } else\
    \ {\n            true\n        }", "        val nx = x.toInt\n        val ny =\
    \ y.toInt\n        val nz = z.toInt\n        if (nx + ny + nz == x + y + z) {\n\
    \            true\n        } else {\n            false\n        }", "        if((x\
    \ + y == z) && (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0))\n            return\
    \ true\n        else\n            return false", "        val sum = x + y + z\n\
    \        if (sum.asInstanceOf[Double] != sum.asInstanceOf[Float]) return false\n\
    \        if (x != x.asInstanceOf[Float] || y != y.asInstanceOf[Float] || z !=\
    \ z.asInstanceOf[Float]) return false\n        if (x.toInt != x.asInstanceOf[Float].toInt)\
    \ return false\n        if (y.toInt != y.asInstanceOf[Float].toInt) return false\n\
    \        if (z.toInt != z.asInstanceOf[Float].toInt) return false\n        return\
    \ true", "        x match {\n            case 0.0f =>\n                y match\
    \ {\n                    case 0.0f =>\n                        z match {\n   \
    \                         case 0.0f => true\n                            case\
    \ 0.0f => false\n                            case x => x == z\n              \
    \          }\n                    case 0.0f => false\n                    case\
    \ x => x == z\n                }\n            case 0.0f => false\n           \
    \ case x => x == z\n        }", "        val sum = (x + y + z) match {\n     \
    \       case Float.NaN => 0\n            case _ => x + y + z\n        }\n    \
    \    sum.floor == sum", '        math.abs(x - math.ceil(math.abs(x))) <=(math.abs(y
    - math.ceil(math.abs(y))) * math.abs(z - math.ceil(math.abs(z))))', '        (x
    == x + y || x == y + z || x == z + x || y == z + y) && x.toInt % 1 == 0 && y.toInt
    % 1 == 0 && z.toInt % 1 == 0', '        (x == y + z) || (x == z + y) || (x ==
    y + z)', "        if (x.toInt == z.toInt) {\n            if (y.toInt == z.toInt)\n\
    \                return true\n            else\n                return false\n\
    \        } else\n            return false", "        val result = x + y + z ==\
    \ (x + y) + (y + z)\n        val intResult = math.round(result)\n        val result\
    \ = intResult == result\n        val intResult = math.round(result)\n        val\
    \ result = intResult == result\n        val intResult = math.round(result)\n \
    \       result", "        if(x < 0 || y < 0 || z < 0) return false\n        if(x\
    \ != x + y && x != x + z && x != y + z) return false\n        if(x != x + y &&\
    \ x != y + z && x != z + y) return false\n        if(x != x + y && x != y + z\
    \ && x != z + y && x != x + z && x != y + z && x != z + y) return false\n    \
    \    if(x != x + y && x != y + z && x != z + y) return true\n        if(x != x\
    \ + y && x != y + z) return true\n        if(x != x + y && x != z + y) return\
    \ true\n        if(x != x + y) return true\n        if(x != y + z) return true\n\
    \        if(x != z + y) return true\n        return true", "        if(x > 0 &&\
    \ y > 0 && z > 0 && x.toString.toIntOrNull != y.toString.toIntOrNull && x.toString.toIntOrNull\
    \ != z.toString.toIntOrNull)\n            if(x.toString.toIntOrNull == y.toString.toIntOrNull\
    \ + z.toString.toIntOrNull)\n                if(x.toString.toIntOrNull * y.toString.toIntOrNull\
    \ == z.toString.toIntOrNull)\n                    return true\n        return\
    \ false", "        var sum = x + y + z\n        sum = math.max(sum, 0)\n     \
    \   sum = math.min(sum, Float.MaxValue)\n        sum == math.max(x + y + z, 0)",
  '        return (x == y && y == z)', "        // Return false if any of x, y and\
    \ z is not an int\n        if(x.toString.toInt == 0 || y.toString.toInt == 0 ||\
    \ z.toString.toInt == 0) return false\n        (x+y+z).toInt == (x+y+z).toString.toInt",
  "        val a = (x + y + z).asInstanceOf[Int]\n        val b = (x + y + z - x).asInstanceOf[Int]\n\
    \        val c = (a * (a + 1) - b * (b + 1)).asInstanceOf[Int]\n        (a * a\
    \ + b * b + c * c == x * x + y * y + z * z == 0)", "        val a = x + y + z\n\
    \        (a.isInstanceOf[Float] && a == a.toFloat) || (a.isInstanceOf[Int] &&\
    \ a == a.toInt)", "      x.toInt == (x + y + z).toInt &&\n      y.toInt == (x\
    \ + y + z).toInt &&\n      z.toInt == (x + y + z).toInt", '        (x == Math.round(x)
    + Math.round(y) + Math.round(z))', "        if (x.toString.toDouble + y.toString.toDouble\
    \ + z.toString.toDouble == x.toString.toDouble + y.toString.toDouble + z.toString.toDouble)\n\
    \            true\n        else\n            false", "        def inc(x : Float,\
    \ y : Float, z : Float): Float = {\n            if( x == y + z ) x else x + y\n\
    \        }\n        def dec(x : Float, y : Float, z : Float): Float = {\n    \
    \        if( x == y - z ) x else x + y\n        }\n        def isInteger(x : Float,\
    \ y : Float, z : Float) : Boolean = {\n            if( x == x + y && x == x -\
    \ y && x == x * y && x == x / y && x == math.ceil(x) && x == math.floor(x) ) true\n\
    \            else false\n        }\n        ( isInteger(x, y, z) , inc(x, y, z)\
    \ == z && dec(x, y, z) == z )", "        // Use a set and add all the numbers.\
    \ If the set contains all three numbers then return true.\n        if ( (x+y+z).equals(x*y+z)\
    \ )\n        \treturn true\n        else\n        \treturn false", '        (x.toInt
    == x.toFloat) + (y.toInt == y.toFloat) + (z.toInt == z.toFloat) == 0', "     \
    \   if (x.toInt == x.toDouble || y.toInt == y.toDouble || z.toInt == z.toDouble)\
    \ {\n            if (x.toInt == x.toDouble) {\n                if (y.toInt ==\
    \ y.toDouble) {\n                    if (z.toInt == z.toDouble) {\n          \
    \              return true\n                    }\n                }\n       \
    \     } else {\n                if (y.toInt == y.toDouble) {\n               \
    \     if (z.toInt == z.toDouble) {\n                        return true\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false", "        val total = x + y + z\n        val isInteger1 = x % 1 == 0\n\
    \        val isInteger2 = y % 1 == 0\n        val isInteger3 = z % 1 == 0\n  \
    \      if(isInteger1 && isInteger2 && isInteger3)\n        {\n            true\n\
    \        }\n        else\n        {\n            false\n        }", '        (x
    == x.toLong && y == y.toLong && z == z.toLong)', "        val xy = x * y\n   \
    \     val yz = y * z\n        val xz = x * z\n        if ((xy == xz) && (yz ==\
    \ xy)) return true\n        else if ((xy != xz) && (yz != xy)) return false\n\
    \        else if ((xy != xy) && (yz != yz)) return false\n        else if ((xy\
    \ != xy) && (xz != xz))\n            return anyInt(xy, yz, xz)\n        else (true)",
  "        if( x == Float.floatToIntBits(y) && y == Float.floatToIntBits(z) ) { \n\
    \            true\n        } else {\n            false\n        }", "        val\
    \ sum = x+y+z\n        val sumInt = sum.toInt\n        val sumInt2 = sumInt.toInt\n\
    \        val sumInt3 = sumInt2.toInt\n        val sumInt4 = sumInt3.toInt\n  \
    \      val sumInt5 = sumInt4.toInt\n        val sumInt6 = sumInt5.toInt\n    \
    \    val sumInt7 = sumInt6.toInt\n        val sumInt8 = sumInt7.toInt\n      \
    \  val sumInt9 = sumInt8.toInt\n        val sumInt10 = sumInt9.toInt\n       \
    \ val sumInt11 = sumInt10.toInt\n        val sumInt12 = sumInt11.toInt\n     \
    \   val sumInt13 = sumInt12.toInt\n        val sumInt14 = sumInt13.toInt\n   \
    \     val sumInt15 = sumInt14.toInt\n        val sumInt16 = sumInt15.toInt\n \
    \       val sumInt17 = sumInt16.toInt\n        val sumInt18 = sumInt17.toInt\n\
    \        val sumInt19 = sumInt18.toInt\n        val sumInt20 = sumInt19.toInt\n\
    \        val sumInt21 = sumInt20.toInt\n        val sumInt22 = sumInt21.toInt\n\
    \        val sumInt23 = sumInt22.toInt\n        val sumInt24 = sumInt23.toInt\n\
    \        val sumInt25 = sumInt24.toInt\n        val sumInt26 = sumInt25.toInt\n\
    \        val sumInt27 = sumInt26.toInt\n        val sumInt28 = sumInt27.toInt\n\
    \        val sumInt29 = sumInt28.toInt\n        val sumInt30 = sumInt29.toInt\n\
    \        val sumInt31 = sumInt30.toInt\n        val sumInt32 = sumInt31.toInt\n\
    \        val sumInt33 = sumInt32.toInt\n        val sumInt34 = sumInt33.toInt\n\
    \        val sumInt35 = sumInt34.toInt\n        val sumInt36 = sumInt35.toInt\n\
    \        val sumInt37 = sumInt36.toInt\n        val sumInt38 = sumInt37.toInt\n\
    \        val sumInt39 = sumInt38.toInt\n        val sumInt40 = sumInt39.toInt\n\
    \        val sumInt41 = sumInt40.toInt\n        val sumInt42 = sumInt41.toInt\n\
    \        val sumInt43 = sumInt42.toInt\n", "        val sum = (x + y + z).asInstanceOf[Integer]\n\
    \        (x == sum)\n            || (y == sum)\n            || (z == sum)", " \
    \       val sum = x + y + z\n        if (sum.toInt != sum || x.toInt != x || y.toInt\
    \ != y || z.toInt != z) {\n            return false\n        } else {\n      \
    \      return true\n        }", "        val x = math.round(math.pow(math.toDouble(x),\
    \ 3.0)) * 3\n        val y = math.round(math.pow(math.toDouble(y), 3.0)) * 3\n\
    \        val z = math.round(math.pow(math.toDouble(z), 3.0)) * 3\n        if (math.isInfinite(x)\
    \ || math.isInfinite(y) || math.isInfinite(z)) {\n            return false\n \
    \       }\n        if (!(x.isNaN || y.isNaN || z.isNaN)) {\n            return\
    \ math.abs(x + y + z) == math.round(x+y+z)\n        }\n        return false",
  "        val sum = x + y + z\n        val isInteger = (sum % 1) == 0\n        val\
    \ isAnyInteger = isInteger || (x == y)\n        val isAnyAnyInteger = isAnyInteger\
    \ || (x == z)\n        isAnyAnyInteger && isInteger", '        x != y && x !=
    z && y != z && x.toInt == y + z.toInt && x.toInt == z.toInt', "        if (x.toInt\
    \ == x.toDouble && y.toInt == y.toDouble && z.toInt == z.toDouble)\n         \
    \   true\n        else false", "        val sum : Float = x + y + z\n        if\
    \ (sum % 1 == 0)\n            return true\n        return false", "        val\
    \ s = x + y + z\n        if (s == 0) {\n            return true\n        }\n \
    \       if (math.round(s) == s) {\n            return true\n        }\n      \
    \  return false", "        val result = ((x + y) == z || (x - y) == z || (x +\
    \ z) == z || (x - z) == z)\n        result && x.toInt == y.toInt && y.toInt ==\
    \ z.toInt", '        (x == (y + z)) && (x != (y - z)) && (x != (y))', "      \
    \  if (z < 0) return false\n        (x+y+z == (x + y + z.toInt))", '        ((x+y)==(z+x)
    || x+z==z+y) && ((x==(x+y)) || (x==(x+z)) && (x==(x-y)) || (x==(x-z)) || (x==x))',
  "        val a = (math.abs(x) + math.abs(y) + math.abs(z)).toInt\n        val b\
    \ = (math.abs(x) + math.abs(y) + math.abs(z)).toInt\n        if (a == 0)\n   \
    \         true\n        else {\n            if (b == 0)\n                false\n\
    \            else\n                if (a > 0 && b > 0)\n                    (x\
    \ == x + y) && (x == x - y) && (x == x * y) && (x == x / y)\n                else\
    \ if (a < 0 && b < 0)\n                    (x == x - y) && (x == x + y) && (x\
    \ == x * y) && (x == x / y)\n                else\n                    (x == x\
    \ + y) && (x == x - y) && (x == x * y) && (x == x / y)\n        }", "        if\
    \ (x != 0.0f && y != 0.0f && z != 0.0f) {\n            (x + y + z) == (0.0f +\
    \ 0.0f + 0.0f)\n        } else if (x != 0.0f && y != 0.0f) {\n            (x +\
    \ y) == 0.0f\n        } else if (x != 0.0f) {\n            (x) == 0.0f\n     \
    \   } else {\n            y == 0.0f\n        }", "       if (x+y==z) true\n  \
    \     else if (x+y!=z || x!=z) false\n       else false", "        (x.toInt ==\
    \ y.toInt + z.toInt)\n            && ((x % 1) == 0) && (z % 1 == 0)", "      \
    \  val sum : Float = x + y + z\n        val num : Int = x + y + z\n        val\
    \ num2 : Int = num + num\n        val num3 : Int = num + num2\n        sum ==\
    \ num && num == num2 && num == num3", '        (x == x.toInt) && (y == y.toInt)
    && (z == z.toInt)', "        val sum = x + y + z\n        sum.equals(z) && (x.toInt\
    \ == sum.abs && (y.toInt == sum.abs || (x.toInt < 0 && y.toInt < 0)))", '        (x
    == (y+z)) || ((x == (y+z)) && (x == (Math.round(x))))', "        // Use a mutable.HashMap\
    \ to store all of the sums of the three numbers that we have.\n        // For\
    \ each of these numbers, sum the other two numbers and store the sum in the HashMap.\n\
    \        // When the HashMap contains the same sums as the numbers passed in,\
    \ we know that at least one is equal\n        // to the sum of the other two.\n\
    \        // The HashMap will be initialized with all of the sums as 0.\n     \
    \   var hashMap = new mutable.HashMap[(Float,Float,Float), Int]();\n        hashMap\
    \ += (x+y, x+z, x+y) -> (3)\n        hashMap += (x+y, x+z, x+z) -> (2)\n     \
    \   hashMap += (x+y, x, x) -> (1)\n        hashMap += (x+y, x, z) -> (1)\n   \
    \     hashMap += (x+z, x, x) -> (1)\n        hashMap += (x+z, x, z) -> (1)\n \
    \       hashMap += (x, y, x) -> (1)\n        hashMap += (x, y, z) -> (1)\n   \
    \     hashMap += (x, z, x) -> (1)\n        hashMap += (x, z, z) -> (1)\n     \
    \   hashMap += (y, x, x) -> (1)\n        hashMap += (y, x, z) -> (1)\n       \
    \ hashMap += (y, z, x) -> (1)\n        hashMap += (y, z, z) -> (1)\n        hashMap\
    \ += (z, x, x) -> (1)\n        hashMap += (z, x, z) -> (1)\n        hashMap +=\
    \ (z, y, x) -> (1)\n        hashMap += (z, y, z) -> (1)\n        hashMap += (z,\
    \ z, x) -> (1)\n        hashMap += (z, z, y) -> (1)\n        hashMap += (z, z,\
    \ z) -> (1)\n\n        // If the HashMap contains any keys that are equal to the\
    \ sum of the other two numbers, return true.\n        for (key <- hashMap.keys)\
    \ {\n            if (hashMap(key) == hashMap((x+y), (y+z), (z+x))) {\n       \
    \         return true\n            }\n        }\n        return false", "    \
    \    val one = x.toInt\n        val two = y.toInt\n        val three = z.toInt\n\
    \        if (one == two || one == three) {\n            return true\n        }\
    \ else if (two == three) {\n            return false\n        } else if (three\
    \ < 0) {\n            return anyInt(y, x, z)\n        } else {\n            return\
    \ anyInt(x, y, z)\n        }", '        (x == y) || (z == x+y)', "        val\
    \ nx = x.toInt\n        val ny = y.toInt\n        val nz = z.toInt\n\n       \
    \ if(nx == ny + nz) {\n            return true\n        } else {\n           \
    \ return false\n        }", '        x + y + z == math.max(x.toInt, y.toInt, z.toInt)',
  "      if(x != y.toFloat && y != z.toFloat) {\n        if(x == y.toFloat && y ==\
    \ z.toFloat) {\n          if(x.toInt > 0 && y.toInt > 0 && z.toInt > 0) {\n  \
    \          return true\n          }\n        }\n      }\n      false", "     \
    \ if (x.toInt == x.toLong && y.toInt == y.toLong && z.toInt == z.toLong) {\n \
    \       true\n      } else {\n        false\n      }", '        x != 0.0 || y
    != 0.0 || z != 0.0', "        if (x != x.toInt || y != y.toInt || z != z.toInt)\
    \ return false\n        if ((x + y) == z) return true\n        else return false",
  "        x match {\n            case a if a.toInt % 1 == 0 && a.toInt != x => true\n\
    \            case _ => false\n        }\n        y match {\n            case a\
    \ if a.toInt % 1 == 0 && a.toInt != y => true\n            case _ => false\n \
    \       }\n        z match {\n            case a if a.toInt % 1 == 0 && a.toInt\
    \ != z => true\n            case _ => false\n        }", "        (x != 0 || y\
    \ != 0 || z != 0) &&\n        ((x != x) && (y != y) && (z != z) &&\n        ((x\
    \ != x + y) && (y != y + z) && (z != z + x)));", '        (x == (y+z)) || (x ==
    (z+y)) || (x == (y+z))', "        val xint = x.toInt\n        val yint = y.toInt\n\
    \        val zint = z.toInt\n        if(xint == yint + zint) {\n            return\
    \ true\n        }\n        return false", "        // Initialize your answer here\n\
    \        var ans = false\n        // If the sum of all numbers is equal to the\
    \ given number, then return true.\n        if(x + y + z == sum){\n           \
    \ ans = true\n        }\n        ans", "        if(!(y.toString.equals(\"3\")))\n\
    \            return false\n        if(!(x.toString.equals(\"2\")))\n         \
    \   return false\n        if(!(z.toString.equals(\"3\")))\n            return\
    \ false\n        if(x.toString.equals(\"2\") && (y.toString.equals(\"2\")) &&\
    \ (z.toString.equals(\"3\")))\n            return true\n        false", '        math.min(math.max(x,
    math.min(y, z))) == math.max(math.max(x, y), z)', "        if (x.toInt == x.toFloat\
    \ && y.toInt == y.toFloat && z.toInt == z.toFloat) {\n            true\n     \
    \   } else {\n            false\n        }", "        x match {\n            case\
    \ math.round(y) => math.round(z) == math.round(y)\n            case math.round(x)\
    \ => math.round(x) == math.round(y)\n            case x => math.round(x) == math.round(y)\n\
    \        }", "        if (x + y == z) {\n            return true\n        } else\
    \ {\n            return false\n        }", "        if(x.toString.toInt == x.toString.toInt\
    \ * y.toString.toInt + y.toString.toInt * z.toString.toInt + z.toString.toInt)\n\
    \            true\n        else\n            false", "       if(x != Float.NaN\
    \ && y != Float.NaN && z != Float.NaN){\n            if (x+y+z == math.ceil(x+y+z))\n\
    \               true\n            else\n               false\n       }\n     \
    \  else\n           false", '        (x == (x + y) && y == (x + z) && z == (x
    + y))', "        val xs = List(x, y, z)\n        val xx = xs map (_.toInt)\n \
    \       val yy = xx map (_ + _)\n        xs exists { case (x: Int) => (x == yy.sum)\
    \ }", '        (x == x + y) && (x == x + z) && (x == y + z)', "        if (x.toInt\
    \ != x) return false\n        if (y.toInt != y) return false\n        if (z.toInt\
    \ != z) return false\n        if (x.toInt != x.toInt) return false\n        if\
    \ (y.toInt != y.toInt) return false\n        if (z.toInt != z.toInt) return false\n\
    \        true", '        if ( (x.toInt==x) || (y.toInt==y) || (z.toInt==z) ) true
    else false', "        val x1 = x.toInt\n        val y1 = y.toInt\n        val\
    \ z1 = z.toInt\n        if( (x1 == x1 + y1 && y1 == y1 + z1) || (x1 == x1 + z1\
    \ && z1 == z1 + y1) ) {\n            return true\n        } else {\n         \
    \   return false\n        }", "        val r = x + y + z\n        val t = r -\
    \ x.toFloat + y.toFloat + z.toFloat\n        return t == r && t == t.toInt", " \
    \       if (math.abs(x) < 1.0e-6f && math.abs(y) < 1.0e-6f && math.abs(z) < 1.0e-6f)\
    \ {\n            if (x == y)\n                return true;\n            if (x\
    \ == z)\n                return true;\n        }\n        if (math.abs(x) < 1.0e-6f\
    \ && math.abs(y) < 1.0e-6f) {\n            if (x == z)\n                return\
    \ true;\n        }\n        if (math.abs(x) < 1.0e-6f && math.abs(y) < 1.0e-6f)\
    \ {\n            if (y == z)\n                return true;\n        }\n      \
    \  if (math.abs(x) < 1.0e-6f) {\n            if (y == z)\n                return\
    \ true;\n        }\n        if (math.abs(y) < 1.0e-6f) {\n            if (x ==\
    \ z)\n                return true;\n        }\n        if (math.abs(z) < 1.0e-6f)\
    \ {\n            if (x == y)\n                return true;\n        }\n      \
    \  return false;", "        val xy = x + y\n        val yz = y + z\n        val\
    \ zx = z + x\n        (x == xy) && (y == yz) && (z == zx)", "        if (x !=\
    \ 0 || y != 0 || z != 0) {\n            if (x == y + z) return true\n        \
    \    if (x == -y + z) return true\n            if (x == -y + -z) return true\n\
    \            if (x == y + -z) return true\n        }\n        false", "      \
    \  val f = x + y + z\n        if (x != f || y != f || z != f)\n            return\
    \ false\n        if (x != x || y != y || z != z)\n            return true\n  \
    \      val d = Math.abs(x - f) < EPSILON\n        val e = Math.abs(y - f) < EPSILON\n\
    \        val f = Math.abs(z - f) < EPSILON\n        (d && e && f)", "        val\
    \ xSum = x + y\n        val ySum = y + z\n        val xPlusy = x + ySum\n    \
    \    val yMinusz = y - z\n        x == xSum || x == xPlusy || x == xMinusy ||\
    \ y == ySum || y == yPlusy || y == yMinusz"]
stop_tokens:
- "\n    }\n"
