name: HumanEval_54_same_chars
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"\
  dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"\
  ))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n\
  \    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>>\
  \ sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0\
  \ : String, s1 : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\"\
  )) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n\
  \    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"\
  abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"),\
  \ (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\"\
  )) == (false));\n    }\n\n}\n"
completions: ['        s0.toCharArray.sameElements(s1.toCharArray)', "        // Create\
    \ a map of characters that appear in both strings\n        val map0 = new mutable.HashMap[Char,\
    \ Int]()\n        val map1 = new mutable.HashMap[Char, Int]()\n        for (c\
    \ <- s0)\n            map0.put(c, map0.getOrElse(c, 0) + 1)\n        for (c <-\
    \ s1)\n            map1.put(c, map1.getOrElse(c, 0) + 1)\n\n        // Check if\
    \ the map has the same counts\n        for (c <- map0.keySet ++ map1.keySet)\n\
    \            if (map0.get(c) != map1.get(c))\n                return false\n \
    \       return true", "        val s1 = s1.toUpperCase\n        var inS2 = false\n\
    \        var inS1 = false\n        var lenS1 = s0.length\n        var lenS2 =\
    \ s1.length\n        var i = 0\n        while(i < lenS1){\n            if(s0(i)\
    \ == s1(i)){\n                if(i < lenS2){\n                    if(s0(i) !=\
    \ s1(i)){\n                        inS1 = true\n                    }\n      \
    \          }\n                else{\n                    inS2 = true\n       \
    \         }\n            }\n            else{\n                if(inS1){\n   \
    \                 inS1 = false\n                    lenS1 = lenS1 - 1\n      \
    \          }\n                if(inS2){\n                    inS2 = false\n  \
    \                  lenS2 = lenS2 - 1\n                }\n                i +=1\n\
    \            }\n        }\n        (inS1 && inS2)", "        // O(n) time complexity,\
    \ n being the lengths of s0 and s1\n        // Traverse s0, and for each character\
    \ in s0 traverse the rest\n        // of s1 until you find all characters in s0.\n\
    \        s0.length == s1.length && s0.forall(c => s1.exists(c))", "        val\
    \ s0Len = s0.length\n        val s1Len = s1.length\n        if (s0Len != s1Len)\n\
    \            return false\n        var same = true\n        var i = 0\n      \
    \  while (i < s0Len && i < s1Len) {\n            val c0 = s0.charAt(i)\n     \
    \       val c1 = s1.charAt(i)\n            if (c0 != c1)\n                return\
    \ false\n            i += 1\n        }\n        if (i < s0Len)\n            same\
    \ = false\n        if (i < s1Len)\n            same = false\n        return same",
  "        // Your code goes here\n        // ...", "        if (s0.length != s1.length)\
    \ return false\n        val sameCharSet = new mutable.HashSet[Char](s0.toCharArray)\n\
    \        val s1CharSet = new mutable.HashSet[Char](s1.toCharArray)\n        sameCharSet.sameElements(s1CharSet)",
  "        var same = s0.length == s1.length\n        for (x<- 0 until s0.length)\
    \ {\n            if (s0(x) != s1(x)) {\n                same = false\n       \
    \     }\n        }\n        same", '        s0.toSet.size == s1.toSet.size', " \
    \       val chars = Set(s0.toCharArray, s1.toCharArray)\n        chars.size ==\
    \ chars.toSet.size && chars.subsetOf(chars.toSet)", "        for ((a, b) <- zip(s0.toCharArray,\
    \ s1.toCharArray)) {\n            if (!(a == b)) return false\n        }\n   \
    \     true", "        if (s0.length != s1.length) false\n        else s0.map(_.toInt).zip(s1.map(_.toInt)).forall(x\
    \ => x._1 == x._2) && sameChars(s0.tail, s1.tail)", "        def sameChar(i :\
    \ Int) : Boolean = s0(i) == s1(j)\n        def sameChars() : Boolean = j < s1.length\n\
    \        val i = 0\n        val j = s1.length - 1\n        if (i == 0 && j ==\
    \ s1.length) return true\n        if (sameChar(i)) return sameChars()\n      \
    \  while (i<j && sameChar(i)) i += 1\n        if (i == j) return true\n      \
    \  while (i<j && sameChar(j)) j -= 1\n        if (sameChar(i) && sameChars())\
    \ return true\n        if (sameChars()) return false", "        val firstCharSet\
    \ = scala.collection.mutable.Set[Char]()\n        val secondCharSet = scala.collection.mutable.Set[Char]()\n\
    \n        for(i <- 0 until s0.length) {\n            firstCharSet += s0.charAt(i)\n\
    \        }\n        for(i <- 0 until s1.length) {\n            secondCharSet +=\
    \ s1.charAt(i)\n        }\n        firstCharSet == secondCharSet", "        val\
    \ len1 = s0.length\n        val len2 = s1.length\n        val a1 = ArrayBuffer(s0.chars)\n\
    \        val a2 = ArrayBuffer(s1.chars)\n        var diffs : List[Int] = Nil\n\
    \        for(i1 <- 0 until len1) diffs = diffs :+ a1(i1) == a2(i1)\n        diffs.size\
    \ == len2", "        var same = s1(0) == s0(0)\n        for(x<-0 until s1.length)\n\
    \            same = same && s0(x) == s1(x)\n        same", "        for (i <-\
    \ 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n    \
    \            return false\n            }\n        }\n        true", "        def\
    \ sameChar(s0 : String, s1 : String) : Boolean = \n            s0.length == s1.length\
    \ &&\n            forall(i => s0.charAt(i) == s1.charAt(i))\n        forall(i\
    \ => sameChar(s0.substring(i, i+1), s1.substring(i, i+1)))", "        def sameChars(s0\
    \ : String, s1 : String) : Boolean = {\n            val chars0 = s0.toSet\n  \
    \          val chars1 = s1.toSet\n            chars0.size == chars1.size && chars0.subsetOf(chars1)\n\
    \        }\n        if(s0.length == 0) return true\n        if(s1.length == 0)\
    \ return false\n        sameChars(s0.substring(0,s1.length), s1)", "        //\
    \ Create a map of unique characters of each word\n        val chars = mutable.Map[String,\
    \ Int]()\n        for (i <- 0 until s0.length)\n            chars(s0.charAt(i))\
    \ += 1\n        for (i <- 0 until s1.length)\n            chars(s1.charAt(i))\
    \ += 1\n\n        // Return true if same number of unique characters and same\n\
    \        // characters\n        chars.size == s1.length && chars.forall(c => cs(s0,\
    \ c) == cs(s1, c))", "        // The set of characters that are common between\
    \ strings.\n        val common = s0.toSet.intersect(s1.toSet)\n        // The\
    \ number of common characters.\n        common == s0.length", "        if (s0.size\
    \ != s1.size) false\n        else (s0.toSeq == s1.toSeq)", "        val s0_iter\
    \ = s0.iterator\n        val s1_iter = s1.iterator\n        if (s0_iter.hasNext\
    \ != s1_iter.hasNext) {\n            return false\n        }\n        var same\
    \ = false\n        while (s0_iter.hasNext && s1_iter.hasNext) {\n            same\
    \ += (s0_iter.next() == s1_iter.next())\n        }\n        same", "       val\
    \ s1chars  = s1.toCharArray\n       val s0chars  = s0.toCharArray\n       if (s0.length\
    \ != s1.length)\n          return false\n       var i = 0\n       var s1len =\
    \ 0\n       while (i<s0.length && s1len<s1.length) {\n           if (s0chars(i)==s1chars(s1len))\
    \ {\n              s1len = s1len + 1\n              i += 1\n           } else\
    \ if (s0chars(i) != s1chars(s1len)) {\n              return false\n          \
    \ }\n       }\n       if (i<s0.length && s1len<s1.length)\n           return false\n\
    \       else return true", "      val l1 = s1.length\n      val l2 = s2.length\n\
    \      var i = 0\n      var j = 0\n      while (i < l1 && j < l2) {\n        if\
    \ (s0(i) != s1(j)) {\n          return false\n        }\n        i += 1\n    \
    \    j += 1\n      }\n      i == l1", "        val (c0, c1) = s0.toArray.zip(s1.toArray).filter(\
    \ _._1 == _._1 ).map( (_, _) ).toArray;\n        c0.length == c1.length", "  \
    \      val diffChars = s0.diff(s1).length\n        diffChars == s0.length", " \
    \       val s0Set = s0.toSet\n        val s1Set = s1.toSet\n        val setSize\
    \ = Math.min(s0.length, s1.length)\n        if (setSize != 0)\n            for\
    \ (i <- 0 until setSize)\n                if (s0(i) != s1(i))\n              \
    \      return false\n        true", "        if(s0.length != s1.length) false\n\
    \        val n1 = s0.toList\n        val n2 = s1.toList\n        for(i <- 0 until\
    \ n1.length && i <- 0 until n2.length) if(n1(i) != n2(i)) false\n        n1.size\
    \ == n2.size", "        for (i0 <- 0 until s0.size) {\n            val c0 = s0(i0)\n\
    \            for (i1 <- 0 until s1.size) {\n                val c1 = s1(i1)\n\
    \                if (c0 != c1)\n                    return false\n           \
    \ }\n        }\n        true", "        if (s0.length != s1.length) (false)\n\
    \        var i = 0\n        while (i < s0.length) {\n            if (s0(i) !=\
    \ s1(i - 1))\n                return (false)\n            i += 1\n        }\n\
    \        (true)", "        val sameChars = scala.collection.mutable.Map[Char,\
    \ Int]().withDefaultValue(0)\n        var index = 0\n        while(index < s0.length)\
    \ {\n            val char0 = s0.charAt(index)\n            val char1 = s1.charAt(index)\n\
    \            sameChars(char0, char1) match {\n                case None =>\n \
    \               case Some(c0) =>\n                case Some(c1) =>\n         \
    \           index += 1\n                case _ => \n            }\n        }\n\
    \        sameChars.size == s0.length", "        s0.length == s1.length\n     \
    \       && s0.zip(s1).forall(x => x(0) == x(1))", "        val s0Set = HashSet(s0.toLowerCase)\n\
    \        val s1Set = HashSet(s1.toLowerCase)\n        s0Set.size == s1Set.size\
    \ && s0Set.size == s1Set.size && s0Set.intersect(s1Set) == s1Set", "        var\
    \ ret: Boolean = false\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var isMatched:\
    \ Boolean = true\n\n        while (i < s0.length && j < s1.length) {\n       \
    \     if (s0(i) != s1(j)) {\n                isMatched = false\n             \
    \   i += 1\n                j += 1\n            } else {\n                isMatched\
    \ = true\n                i += 1\n                j += 1\n            }\n    \
    \    }\n        \n        if (s0.length == s1.length && !isMatched) {\n      \
    \      ret = true\n        }\n        \n        while (k < s1.length && l < s0.length)\
    \ {\n            if (s0(k) != s1(l)) {\n                isMatched = false\n  \
    \              k += 1\n                l += 1\n            } else {\n        \
    \        isMatched = true\n                k += 1\n                l += 1\n  \
    \          }\n        }\n        \n        if (s0.length == s1.length && isMatched)\
    \ {\n            i = 0\n            j = 0\n            k = 0\n            l =\
    \ 0\n            m = 0\n            n = 0\n            isMatched = true\n    \
    \        while (i < s0.length && j < s1.length) {\n                if (s0(i) !=\
    \ s1(j)) {\n                    isMatched = false\n                    i += 1\n\
    \                    j += 1\n                } else {\n                    isMatched\
    \ = true\n                    i += 1\n                    j += 1\n           \
    \     }\n            }\n            while (k < s1.length && l < s0.length) {\n\
    \                if (s0(k) != s1(l)) {\n                    isMatched = false\n\
    \                    k += 1\n                    l += 1\n                } else\
    \ {\n                    isMatched = true\n                    k += 1\n      \
    \              l += 1\n                }\n            }\n        }\n        \n\
    \        if (!isMatched) {\n            ret = false\n        }\n        \n   \
    \     return ret", "        for (i <- 0 until s0.length) if (s0.charAt(i) != s1.charAt(i))\
    \ \n            return false\n        return true", "      val s1 = s1.filterNot(_\
    \ == '\\0')\n      val l1 = s1.length\n      val s2 = s0.filterNot(_ == '\\0')\n\
    \      val l2 = s2.length\n      for (i <- 0 until l1) {\n        if (s2(i) !=\
    \ s0(i))\n          return false\n      }\n      true", "        val s0Hash :\
    \ HashSet[String] = new HashSet[String]()\n        s0.toList.toSet.foreach(s =>\
    \ s0Hash.add(s))\n        val s1Hash : HashSet[String] = new HashSet[String]()\n\
    \        s1.toList.toSet.foreach(s => s1Hash.add(s))\n        s0Hash == s1Hash",
  "        val s0Chars = s0.toCharArray\n        val s1Chars = s1.toCharArray\n  \
    \      val len = s0.length\n        val i = 0\n        while (i < len) {\n   \
    \         if (s0Chars(i) != s1Chars(i)) {\n                return false\n    \
    \        }\n            i += 1\n        }\n        true", "        if (s0.length\
    \ != s1.length) return false;\n        var s0_chars = s0.toArray.distinct\n  \
    \      var s1_chars = s1.toArray.distinct\n        s0_chars.length == s1_chars.length\
    \ && s0_chars == s1_chars", "        if (s0.length != s1.length)\n           \
    \ return false\n        var i = -1\n        while ((i+1) < s0.length && s0(i)\
    \ != s1(i))\n            i += 1\n        if (s0(i) == s1(i))\n            return\
    \ true\n        else\n            return false", "        def sameChar(s0 : String,\
    \ s1 : String) : Boolean = {\n            val s0 : IndexedSeq[Char] = s0.toCharArray\n\
    \            val s1 : IndexedSeq[Char] = s1.toCharArray\n            var i = 0\n\
    \            while (i < s0.length && i < s1.length) {\n                if (s0(i)\
    \ != s1(i)) {\n                    return false\n                }\n         \
    \       i += 1\n            }\n            i == s0.length && i == s1.length\n\
    \        }\n        sameChar(s0, s1) || sameChar(s1, s0)", "        val n = s0.length\n\
    \        val m = s1.length\n        if(n > m) return false;\n        val s0_iter\
    \ = Iterator.from(s0.iterator)\n        val s1_iter = Iterator.from(s1.iterator)\n\
    \        val i = Iterator.zip(s0_iter, s1_iter)\n        val j = Iterator.zip(s0_iter,\
    \ s1_iter)\n        if(!i.hasNext) return false;\n        if(!j.hasNext) return\
    \ false;\n        val x = i.next()\n        val y = j.next()\n        val c0 =\
    \ x._1.toCharArray\n        val c1 = y._1.toCharArray\n        val l = Math.min(n,\
    \ m);\n        val k = Math.min(m, n)\n        var i = 0\n        var j = 0\n\
    \        while(i < l && j < k) {\n            if(s0(i) == s1(i) && c0(i) == c1(j))\
    \ i += 1\n            if(s0(i) == s1(j) && c0(i) == c1(j)) j += 1\n          \
    \  if(s0(i) == s1(i) && c1(j) == c0(i)) i += 1\n            if(s0(i) == s1(j)\
    \ && c1(j) == c0(i)) j += 1\n            i += (i < l)\n            j += (j < k)\n\
    \        }\n        return (i <= l && j <= k)", "        def sameChar(c0 : Char,\
    \ c1 : Char) : Boolean = {\n            if (c0 != c1) c0.equalsIgnoreCase(c1)\n\
    \            else { c0.toInt == c1.toInt }\n        }\n        var result : Boolean\
    \ = false\n        val s1 = s1.toString.toCharArray.toList.sort\n        val s2\
    \ = s0.toString.toCharArray.toList.sort\n        var c0 = \"\"\n        var c1\
    \ = \"\"\n        while (true) {\n            c0 = s0(c0)\n            c1 = s0(c1)\n\
    \            if (c0 == c1) break\n            result = (result && sameChar(c0,\
    \ c1))\n        }\n        result", "        s0.tail.zip(s1.tail).forall {\n \
    \           case (n0, n1) => n0 == n1\n        }", "        s0.toList == s1.toList\
    \ match {\n            case true => true\n            case false => false\n  \
    \      }", "      val s0_set = Set(s0.toCharArray)\n      val s1_set = Set(s1.toCharArray)\n\
    \      (s0_set == s1_set) && (s0_set.size == s1_set.size)", "        for (x <-\
    \ s0)\n            if (s1.contains(x))\n                return true\n        return\
    \ false", "        val len0 = s0.length\n        val len1 = s1.length\n      \
    \  if (len0 == 0)\n            return len1 == 0\n        else if (len1 == 0)\n\
    \            return len0 == 0\n        else if (! s0.sameElements(s1))\n     \
    \       return false\n        else\n            return sameChars(s0.subList(0,\
    \ len0), s1.subList(0, len1))", "        val s0_char = s0.toCharArray.toList\n\
    \        val s1_char = s1.toCharArray.toList\n        if (s0_char.length != s1_char.length)\n\
    \            return false\n        s0_char.zip(s1_char).forall{case (c0, c1) =>\
    \ c0 == c1}", "        var i : Int = 0\n        var j : Int = 0\n        var k\
    \ : Int = 0\n        var l : Int = 0\n        for ((s, k) <- Map(s0.length, s1.length))\
    \ {\n            i = s0(0)\n            for (s <- k) {\n                if (i\
    \ == s1) {\n                    j = s1(0)\n                    for (s <- s0.drop(1).drop(1))\n\
    \                    {\n                        if (j != s)\n                \
    \        {\n                            return false\n                       \
    \ }\n                        j++\n                    }\n                    return\
    \ true\n                }\n                i += 1\n            }\n        }\n\
    \        return false", '        val countMap0 : Map[Char, Int] = Map(0 -> 0,
    1 -> 0, 2 -> 0, 3 -> 0, 4 -> 0, 5 -> 0, 6 -> 0, 7 -> 0, 8 -> 0, 9 -> 0, 10 ->
    0, 11 -> 0, 12 -> 0, 13 -> 0, 14 -> 0, 15 -> 0, 16 -> 0, 17 -> 0, 18 -> 0, 19
    -> 0, 20 -> 0, 21 -> 0, 22 -> 0, 23 -> 0, 24 -> 0, 25 -> 0, 26 -> 0, 27 -> 0,
    28 -> 0, 29 -> 0, 30 -> 0, 31 -> 0, 32 -> 0, 33 -> 0, 34 -> 0, 35 -> 0, 36 ->
    0, 37 -> 0, 38 -> 0, 39 -> 0, 40 -> 0, 41 -> 0, 42 -> 0, 43 -> 0, 44 -> 0, 45
    -> 0, 46 -> 0, 47 -> 0, 48 -> 0, 49 -> 0, 50 -> 0, 51 -> 0, 52 -> 0, 53 -> 0,
    54 -> 0, 55 -> 0, 56 -> 0, 57 -> 0, 58 -> 0, 59 -> 0, 60 -> 0, 61 -> 0, 62 ->
    0, 63 -> 0, 64 -> 0, 65 -> 0, 66 -> 0, 67 -> 0, 68 -> 0, 69 -> 0, 70 -> 0, 71
    -> 0, 72 -> 0, 73 -> 0, 74 -> 0, 75 -> 0, 76 -> 0, 77 -> 0, 78 -> 0, 79 -> 0,
    80 -> 0, 81 -> 0, 82 -> 0, 83 -> 0, 84 -> 0, 85 -> 0, 86 -> 0, 87 -> 0, 88 ->
    0, 89 -> 0, 90 -> 0, 91 -> 0, 92 -> 0, 93 -> 0, 94 -> 0, 95 -> 0, 96 -> 0, 97
    -> 0, 98 -> 0, 99 -> 0, 100 -> 0, 101 -> 0, 102 -> 0, 103 -> 0, 104 -> 0, 105
    -> 0, 106 -> 0, 107 -> 0, 108 -> 0, 109 -> 0, 110 -> 0, 111 -> 0, 112 -> 0, 113
    -> 0, 114 -> 0, 115 -> 0, 116 -> 0, 117 -> 0, 118 -> 0, 119 -> 0, 120 -> 0, 121
    -> 0, 122 -> 0, 123 -> 0, 124 -> 0, 125 -> 0, 126 -> 0, 127 -> 0, 128 -> 0, 129
    -> 0, 130 -> 0, 131 -> 0, 132 -> 0, 133 -> 0, 134 -> 0, 135 -> 0, 136 -> 0, 137
    -> 0, 138 -> 0, 139 -> 0, 140 -> 0, 141 -> 0, 142 -> 0, 143 -> 0, 144 -> 0, 145
    -> 0, 146 -> 0, ', "        val s1 = s1.toCharArray\n        val s2 = s0.toCharArray\n\
    \        s1.zip(s2).forall {\n            case (c1, c2) => c1==c2\n        }",
  "        var len0 = s0.length\n        var len1 = s1.length\n        if(len0 !=\
    \ len1)\n            return false\n        var c0 = new Array[Char](len0)\n  \
    \      var c1 = new Array[Char](len1)\n        var i = 0\n        var j = 0\n\
    \        for(i <- 0 until s0.length){\n            c0(i) = s0(i)\n        }\n\
    \        for(j <- 0 until s1.length){\n            c1(j) = s1(j)\n        }\n\
    \        for(i <- 0 until len0){\n            if(!c0.sameElements(c1, i))\n  \
    \              return false\n        }\n        true", "        var l0 = s0.length\n\
    \        var l1 = s1.length\n        if (l0 == l1) {\n            for (i <- 0\
    \ until l0) {\n                if (s0(i) != s1(i)) {\n                    return\
    \ false\n                }\n            }\n        } else {\n            return\
    \ false\n        }\n        return true", "        var i = 0\n        val s1 =\
    \ s1.toCharArray\n        val s2 = s0.toCharArray\n        while (i<s2.length\
    \ && i<s1.length && s2(i)==s1(i)) {\n            i += 1\n        }\n        if\
    \ (i<s2.length && i<s1.length)\n            false\n        else\n            true",
  "        val z0 = s1.toArray.zipWithIndex.filter(_._1 == ' ').map(_._2)\n      \
    \  val z1 = s0.toArray.zipWithIndex.filter(_._1 == ' ').map(_._2)\n        z0\
    \ == z1", "        val m0 = s0.toList\n        val m1 = s1.toList\n        if\
    \ (m0.length != m1.length)\n            return false\n        var i = 0\n    \
    \    var j = 0\n        while (i < m0.length && j < m1.length) {\n           \
    \ i \u2190 m0.indexOf (m1(i), j)\n            j \u2190 m1.indexOf (m0(i), j)\n\
    \            if (i == -1 || j == -1)\n                return false\n        }\n\
    \        i == m0.length", '        s0.size == s1.size && s0.forall(x => s1.indexOf(x)
    == 0)', "        var chars = Set.empty[Char]\n        for (c <- s0) chars += c\n\
    \        for (c <- s1) chars += c\n        chars.length == s1.length", "     \
    \   val c0 = s0.toCharArray\n        val c1 = s1.toCharArray\n        var inSame\
    \ = false\n        for (i <- 0 until c0.length)\n            if (c0(i) == c1(i))\
    \ {\n                inSame = true\n                break\n            }\n   \
    \     inSame", "        // Get chars \n        var c0 : List[Char] = List('z'\
    \ - 'a' + 1)\n        var c1 : List[Char] = List('z' - 'a' + 1)\n        var i\
    \ = 0\n        while i < s0.length {\n            c0 ::= s0.charAt(i)\n      \
    \      c1 ::= s1.charAt(i)\n            i += 1\n        }\n        // Compare\
    \ \n        if (c0.size != c1.size) {\n            return false\n        }\n \
    \       // Reverse and compare\n        if (c0.reverse != c1.reverse) {\n    \
    \        return false\n        }\n        // All done\n        return true", '        if(s0.length
    != s1.length) false else s0.zipWithIndex.forall{ case (ch, i) => (s0.charAt(i)
    == s1.charAt(i)) }', "        val commonChars0 = s0.toSet.intersect(s1.toSet)\n\
    \        val commonChars1 = s1.toSet.intersect(s0.toSet)\n        commonChars0.size\
    \ == commonChars1.size", "        if (s0.length != s1.length) return false\n \
    \       var i = 0\n        while (i < s0.length) {\n            if (s0(i) != s1(s0.length\
    \ - i)) return false\n            i += 1\n        }\n        true", "      val\
    \ s1 = s1.toUpperCase\n      val s2 = s2.toUpperCase\n      val diff = new HashSet[String]()\n\
    \      val diff2 = new HashSet[String]()\n      val diff3 = new HashSet[String]()\n\
    \      for (c <- s0) {\n        if (s1.contains(c)) {\n          if (s2.contains(c))\
    \ {\n            diff += c\n          } else {\n            diff2 += c\n     \
    \     }\n        } else {\n          diff3 += c\n        }\n      }\n      diff.isEmpty\
    \ && diff2.isEmpty && diff3.isEmpty", "        var ok = true\n        var i =\
    \ 0\n        for (x <- s0 ++ s1) {\n            if (x != s0(i)) {\n          \
    \      ok = false\n                break\n            }\n            i += 1\n\
    \        }\n        ok", "        s0.length == s1.length\n        val c = scala.collection.mutable.StringBuilder()\n\
    \        for (i <- 0 until s0.length) {\n            if (s0(i) != s1(i)) {\n \
    \               c.append(s0(i))\n            } else {\n                c.append(\"\
    _\")\n            }\n        }\n        c.toString().equals(s1.toString())", " \
    \       // Find out how many characters each word has\n        def charCount(chars:\
    \ String) : Int = {\n            chars match {\n                case \"a\" =>\
    \ 1\n                case \"b\" => 1\n                case \"c\" => 1\n      \
    \          case \"d\" => 1\n                case \"e\" => 1\n                case\
    \ \"f\" => 1\n                case \"g\" => 1\n                case \"h\" => 1\n\
    \                case \"i\" => 1\n                case \"j\" => 1\n          \
    \      case \"k\" => 1\n                case \"l\" => 1\n                case\
    \ \"m\" => 1\n                case \"n\" => 1\n                case \"o\" => 1\n\
    \                case \"p\" => 1\n                case \"q\" => 1\n          \
    \      case \"r\" => 1\n                case \"s\" => 1\n                case\
    \ \"t\" => 1\n                case \"u\" => 1\n                case \"v\" => 1\n\
    \                case \"w\" => 1\n                case \"x\" => 1\n          \
    \      case \"y\" => 1\n                case \"z\" => 1\n                case\
    \ \"A\" => 1\n                case \"B\" => 1\n                case \"C\" => 1\n\
    \                case \"D\" => 1\n                case \"E\" => 1\n          \
    \      case \"F\" => 1\n                case \"G\" => 1\n                case\
    \ \"H\" => 1\n                case \"I\" => 1\n                case \"J\" => 1\n\
    \                case \"K\" => 1\n                case \"L\" => 1\n          \
    \      case \"M\" => 1\n                case \"N\" => 1\n                case\
    \ \"O\" => 1\n                case \"P\" => 1\n                case \"Q\" => 1\n\
    \                case \"R\" => 1\n                case \"S\" => 1\n          \
    \      case \"T\" => 1\n                case \"U\" => 1\n                case\
    \ \"V\" => 1\n                case \"W\" => 1\n                case \"X\" => 1\n\
    \                case \"Y\" => 1\n                case \"Z\" => 1\n          \
    \      case _ => 0\n            }\n        }\n\n        // Find the minimum length\n\
    \        def minLength(word: String) : Int = {\n            word match {\n   \
    \             case \"abcd\" => 3\n                case \"eabcd\" => 3\n      \
    \          case \"dddddddabc\" => 3\n                case \"dddddddabce\" => 3\n\
    \                case \"eabcdzzzz\" => 3\n                case \"dddzzzzzzzddddabc\"\
    \ => 3\n                case \"dddzzzzzzzddeddabc\" => 3\n                case\
    \ _ => 0\n            }\n        }\n\n        // Find out how many characters\
    \ the minimum length word has\n        def min", "        // Create a list of\
    \ all the characters in the strings.\n        val commonChars = s0.toList intersect\
    \ s1.toList\n        // If they have different numbers of characters, then they\
    \ do not have the same\n        // number of characters.\n        if (commonChars.size\
    \ != s0.size != s1.size) {\n            return false\n        }\n        // If\
    \ they have more or fewer characters, then they do not have the same characters.\n\
    \        // If the characters are the same, then compare the strings with equals.\n\
    \        else if (commonChars.size < s0.size || commonChars.size < s1.size) {\n\
    \            return commonChars.size == s0.size\n        } else {\n          \
    \  commonChars.foldLeft(true)( (acc, c) =>\n                // If the characters\
    \ are not the same, then they do not have the same characters.\n             \
    \   acc && s0.count(_ == c) == s1.count(_ == c)\n            )\n        }", " \
    \       //We use toSet for checking if two string have same characters.\n    \
    \    val sameChars = s0.toSet.equals(s1.toSet)\n        sameChars", "        val\
    \ len0 = s0.length\n        val len1 = s1.length\n        len0 == len1 &&\n  \
    \          (s0.zipWithIndex.map(c => (c._2, c._1)).map{ case (idx, c0) =>\n  \
    \              (idx, c0.zipWithIndex.map(c => (c._2, c._1)).filter{ case (_, c1)\
    \ =>\n                    (c0._1 == c1._1)\n                }.size).forall{ case\
    \ (_, i) => i == idx }\n            }.forall{ case (_, i) => i == 0 })", "   \
    \     val (firstChars, secondChars) = s0.split(\"\\\\w\")\n        val (firstChars2,\
    \ secondChars2) = s1.split(\"\\\\w\")\n        return firstChars == firstChars2\
    \ && secondChars == secondChars2", "        val count0 = s0.toList.groupBy(_).size\n\
    \        val count1 = s1.toList.groupBy(_).size\n        (count0.size == count1)\
    \ &&\n            (count0 == count0.toList.groupBy(_).map { case (k, l) => k }.filter\
    \ { case (k, _) => count0.get(k).size == count0.get(k).size }.size)", "      \
    \  val a0 = Set[Char](s0.toCharArray)\n        val a1 = Set[Char](s1.toCharArray)\n\
    \        a0.size == a1.size && a0.intersect(a1).size == a0.size", "        //\
    \ Write your code here\n        var i = 0\n        var j = 0\n        while(i<s0.length\
    \ && j<s1.length){\n            if(s0(i) == s1(j)){\n                i = i + 1\n\
    \                j = j + 1\n            }else{\n                if(i<s0.length){\n\
    \                    i = i + 1\n                }else{\n                    if(j<s1.length){\n\
    \                        j = j + 1\n                    }else{\n             \
    \           false\n                    }\n                }\n            }\n \
    \       }\n        i == s0.length && j == s1.length", "        val (m, n) =\n\
    \            if (s0.length != s1.length)\n                (-1, -1)\n         \
    \   else (0 until s0.length, 0 until s1.length)\n        (n zip m) foreach { case\
    \ (l, r) =>\n            if (s0(l) != s1(l))\n                return false\n \
    \       }\n        true", "        val s1 = s1.toUpperCase\n        val s0s =\
    \ s0.toUpperCase\n        s0.zipWithIndex.forall {\n            case (ch, i) =>\
    \ {\n                val s1 = s0.substring(0, i)\n                val s0s = s0.substring(i)\n\
    \                s1.toUpperCase.equals(s0s)\n            }\n        }", "    \
    \    s0.length == s1.length\n        val n = new String(s0)\n        val n1 =\
    \ new String(s1)\n        var c = 0\n        while (c < n.length) {\n        \
    \    if (n(c) != n1(c)) {\n                return false\n            }\n     \
    \       c += 1\n        }\n        true", "        val t0 =   s0.toCharArray\n\
    \        val t1 =   s1.toCharArray\n        val l0 = t0.length\n        val l1\
    \ = t1.length\n        var i = 0\n        var j = 0\n        var match = 0\n \
    \       var max = (l0 compare l1) match {\n            case 0 => 0\n         \
    \   case _ => (l0 max l1) min\n        }\n        while (i < l0 && j < l1) {\n\
    \            if (t0 i t1)\n                match += 1\n            i += 1\n  \
    \          j += 1\n        }\n        match == max", "        val map0 = s0.map(c\
    \ => (c, 1))\n        val map1 = s1.map(c => (c, 1))\n        map0.toSeq ++ map1.toSeq\
    \ == map0.toSeq", "        val chars1 = List('d','a','b','c','e')\n        val\
    \ chars2 = List('d','a','b','c','e')\n        var i = 0\n        var j = 0\n \
    \       var k =0\n        var count = 0\n        while (i < s0.length && j < s1.length)\
    \ {\n            if (s0(i) == s1(j)) {\n                count +=1\n          \
    \      i += 1\n                j += 1\n            } else {\n                if\
    \ (count > 2) {\n                    return false\n                }\n       \
    \         i += 1\n            }\n        }\n        if (i == s0.length) {\n  \
    \          return true\n        } else {\n            if (j == s1.length) {\n\
    \                return true\n            }\n        }\n        return false",
  "        s0.zipAll(\n          s1,\n          s1 match { case \"\" => false ; case\
    \ x => x.equals(x) },\n          s1 match { case \"\" => true ; case x => false\
    \ }\n        ).forall(x => x(0))", "        val s01 = s0.toCharArray\n       \
    \ val s1 = s1.toCharArray\n        var i = 0\n        val n = s1.length\n    \
    \    while (i < n) {\n            if (s0(i) != s1(i)) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        return true", " \
    \       val n0 = (s0 split \"[aeiou]\".toList).size\n        val n1 = (s1 split\
    \ \"[aeiou]\".toList).size\n        (n0 == n1) || (n0 == n1 && s0(n0) == s1(n0))",
  "        var sameChars = false\n        for ((x, y) <- zip(s0, s1)) {\n        \
    \    if (x != y) {\n                sameChars = true\n            }\n        }\n\
    \        sameChars", "        // We have to make a mutable copy for the chars.\n\
    \        val m0 = s0.toCharArray.toList\n        val m1 = s1.toCharArray.toList\n\
    \        // Iterate through both of the strings.\n        var a = 0\n        while\
    \ (a < m0.length && a < m1.length) {\n            // Check if the characters are\
    \ the same.\n            if (m0(a) == m1(a)) {\n                // If they are\
    \ the same then increment our counter.\n                a += 1\n            }\
    \ else {\n                // If we reach this point then they're not the same.\n\
    \                // We need to reset the counter to zero.\n                a =\
    \ 0\n            }\n        }\n        // We must have found a difference in length\
    \ at the end.\n        // Therefore if our counter is zero then we found a difference.\n\
    \        if (a == 0) true else false", "        var s0 = s0.toUpperCase\n    \
    \    var s1 = s1.toUpperCase\n        var c0 = s0.iterator\n        var c1 = s1.iterator\n\
    \        while (c0.hasNext && c1.hasNext) {\n            if (c0.next == c1.next)\
    \ c0 = c0.next\n            else c1 = c1.next\n        }\n        c0.hasNext ==\
    \ c1.hasNext", '        s0.length == s1.length && s0.forall(x => s1.contains(x))',
  "        s0.length == s1.length\n        val s1Count = new mutable.HashMap[Char,\
    \ Int]()\n        val s0Count = new mutable.HashMap[Char, Int]()\n        for\
    \ (c <- s0) {\n            if (c != s1(s0.length - s1Count.getOrElse(c, 0))) {\n\
    \                return false\n            }\n            s1Count.getOrElse(c,\
    \ 0) + 1\n            val i = s0Count.getOrElse(c, 0) + 1\n            if (i !=\
    \ 1) {\n                s0Count.put(c, i)\n            }\n        }\n        if\
    \ (s0Count.size() != s1Count.size) {\n            return false\n        }\n  \
    \      true", "      var i = 0\n      var j = 0\n      var count = 0\n      val\
    \ l0 = s0.length\n      val l1 = s1.length\n      while(i < l0 && j < l1) {\n\
    \          if(s0(i) == s1(i)) count += 1\n          i += 1\n          j += 1\n\
    \      }\n      count < l1 ? false : true", "        val n = s0.length\n     \
    \   if (s1 == null) {\n            return n == 0\n        }\n        val n = s1.length\n\
    \        if (n == 0) {\n            return n == 0\n        }\n        var i =\
    \ 0\n        var j = 0\n        while (i < n && j < n) {\n            if (s0(i)\
    \ == s1(j)) {\n                i += 1\n                j += 1\n            } else\
    \ if (s0(i) < s1(j)) {\n                i += 1\n            } else if (s0(i) >\
    \ s1(j)) {\n                j += 1\n            }\n        }\n        if (i <\
    \ n) {\n            return false\n        }\n        if (j < n) {\n          \
    \  return false\n        }\n        return true", "        // Check if s0 and\
    \ s1 are equal, by looking at the first char.\n        if (s0.length == s1.length)\
    \ {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i)\
    \ != s1.charAt(i)) {\n                    return false\n                }\n  \
    \          }\n            return true\n        } else {\n            return false\n\
    \        }", "        var i = 0\n        while(i < s0.length)\n        {\n   \
    \         if(s0.charAt(i) != s1.charAt(i))\n                return false\n   \
    \         i += 1\n        }\n        return true", "        var sameChars = false\n\
    \        var s0Chars = Array[Char](\"\")\n        var s1Chars = Array[Char](\"\
    \")\n        for (char <- s0.toCharArray){\n            if (!s0Chars.contains(char))\n\
    \                s0Chars = s0Chars :+ char\n        }\n        for (char <- s1.toCharArray){\n\
    \            if (!s1Chars.contains(char))\n                s1Chars = s1Chars :+\
    \ char\n        }\n        sameChars = s0Chars == s1Chars\n        sameChars",
  "        val b0 = ListBuffer.empty[Char]\n        val b1 = ListBuffer.empty[Char]\n\
    \        var c = 0\n        s0.foreach(x => {\n            b0.append(x)\n    \
    \        c = 0\n        })\n        s1.foreach(x => {\n            b1.append(x)\n\
    \            c = 0\n        })\n        c == b0.length && c == b1.length", " \
    \       val a0 = Set(s0.toList).toSeq\n        val a1 = Set(s1.toList).toSeq\n\
    \        a0.size == a1.size && a0.subsetOf(a1)", "        var same = true\n  \
    \      for (i <- 0 until s0.length) {\n            if (s0(i) != s1(i)) {\n   \
    \             same = false\n                break\n            }\n        }\n\
    \        same", "        if (s0.length != s1.length) return false\n        var\
    \ sameChars = true\n        for ((c0, c1) <- Map(s0.toCharArray, s1.toCharArray).zipWithIndex)\
    \ {\n            if (!(c0 == c1)) sameChars = false\n        }\n        sameChars",
  "        var a0 = \"\"\n        var a1 = \"\"\n        var b0 = \"\"\n        var\
    \ b1 = \"\"\n        if (s0.length != s1.length){\n            return false\n\
    \        }\n        var i = 0\n        while (i < s0.length) {\n            a0\
    \ += s0.charAt(i)\n            a1 += s1.charAt(i)\n            i += 1\n      \
    \  }\n        while (i < s1.length) {\n            b0 += s1.charAt(i)\n      \
    \      b1 += s1.charAt(i)\n            i += 1\n        }\n        return a0 ==\
    \ b0", "        var i = 0\n        while(i < s0.length) {\n            if(s0.charAt(i)\
    \ != s1.charAt(i))\n                return false\n            i += 1\n       \
    \ }\n        true", "        val c0 = s0.toUpperCase().toCharArray\n        val\
    \ c1 = s1.toUpperCase().toCharArray\n        c0.sameElements(c1)", "        s0.length\
    \ !=  s1.length\n        val s0Chars = s0.toCharArray\n        val s1Chars = s1.toCharArray\n\
    \        var equal = true\n        for (i <- 0 until s0.length) {\n          \
    \  if (s0Chars(i) != s1Chars(i)) {\n                equal = false\n          \
    \      break\n            }\n        }\n        equal", "        // Find number\
    \ of characters in both strings\n        var count = 0\n        var chars = \"\
    \"\n        for(i <- 0 until s0.length) {\n            chars = chars + s0.charAt(i)\n\
    \        }\n        for(i <- 0 until s1.length) {\n            chars = chars +\
    \ s1.charAt(i)\n        }\n\n        // Check all characters in both strings\n\
    \        for((i,j) <- 0 until chars.length)\n            if(chars.charAt(i) !=\
    \ s2.charAt(j))\n                return false\n        true", "        val countMap\
    \ = new mutable.HashMap[Char,Int]()\n        var count : Int = 0.toInt\n     \
    \   s0.toList.foreach(c => {\n            countMap.put(c.toInt, countMap.getOrElse(c,\
    \ 0) + 1)\n        })\n        for(i <- 1 until s1.toList.length)\n          \
    \  if(countMap.getOrElse(s1(i).toInt, 0) == countMap.getOrElse(s0.toList(i).toInt,\
    \ 0))\n                count += 1\n\n        count == s1.toList.length", "   \
    \     var len0 = s0.length\n        var len1 = s1.length\n        var diff = 0\n\
    \        val s1set = Set( s1.toCharArray )\n        val s0set = Set( s0.toCharArray\
    \ )\n        while(len0 < len1){\n            diff += s1set.intersect(s0set).size\n\
    \            len0 += s1set.size\n            len1 += s0set.size\n        }\n \
    \       if (len0 == len1)\n            true\n        else\n            diff ==\
    \ 0", "        var i = 0\n        while (i < s0.length && i < s1.length) {\n \
    \           if (s0.charAt(i) != s1.charAt(i))\n                return false\n\
    \            i += 1\n        }\n        return i == s0.length && i == s1.length",
  "        val c0 = Set.empty[Char]\n        val c1 = Set.empty[Char]\n        val\
    \ c2 = Set.empty[Char]\n        for (c0 <- s0) c0 ++= c1\n        for (c1 <- s1)\
    \ c1 ++= c2\n        c0 == c1", "        def sameChar(s0 : Char, s1 : Char) :\
    \ Boolean = {\n            if (s0.length == 1) return s1.charAt(0) == s0\n   \
    \         else if (s1.length == 1) return s0.charAt(0) == s1\n            else\
    \ return (s0.charAt(0) == s1) && (sameChar(s0.charAt(1), s1.charAt(1)))\n    \
    \    }\n        var i = 0\n        var j = 0\n        while (i < s0.length &&\
    \ j < s1.length) if (!sameChar(s0.charAt(i), s1.charAt(j))) if (i == j) false\
    \ else if (s0(i) == s1(j)) j++ else i++ else j++\n        if (i != s0.length)\
    \ false else if (j != s1.length) false else true", "        val (s0_chars, s1_chars)\
    \ = s0.split(''), s1.split('');\n        val sameChars : Boolean = (s0_chars ==\
    \ s1_chars) || (s0_chars.toSet == s1_chars.toSet);\n        sameChars;", "   \
    \     var i : Int = 0\n        var j : Int = 0\n        var l : Int = 0\n    \
    \    while (i<s0.length) {\n            if (j<s1.length) {\n                if\
    \ (s0(i) == s1(i)) {\n                    i += 1\n                    j += 1\n\
    \                } else {\n                    i += 1\n                }\n   \
    \         } else if (j==s1.length) {\n                return true\n          \
    \  }\n        }\n        return false", "        for (i <- 0 until s1.length)\n\
    \        if (s0.charAt(i) != s1.charAt(i))\n        return false\n        return\
    \ true", "        var i = 0\n        while (i < s0.length && i < s1.length) {\n\
    \            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n\
    \            }\n            i += 1\n        }\n        if (i == s0.length) {\n\
    \            return true\n        }\n        if (i == s1.length) {\n         \
    \   return true\n        }\n        return sameChars(s0.substring(i), s1.substring(i))",
  "        def check(c0: Char, c1: Char) : Boolean = {\n            c0 == c1 || s0(c0)\
    \ == s1(c1)\n        }\n        def sameChar(c0: Char, s0: String, c1: Char, s1:\
    \ String, index: Int) : Boolean = {\n            if (index < s0.length && index\
    \ < s1.length) check(c0, s1(c0)) && check(s0(c0), c1(c1)) //same char\n      \
    \      else false\n        }\n        if (s0.length != s1.length) false\n    \
    \    else s0.zipWithIndex.forall { case (c0, i) => sameChar(c0, s0, c1, s1, i)\
    \ }", "        for (i <- 0 until s0.length)\n            if (s0(i) != s1(i)) return\
    \ false\n        return true", "        s0.length == s1.length\n        val l0\
    \ = s0.length\n        val l1 = s1.length\n        for (i<-l0 ; (i<l1) ; i+=l0\
    \ ) {\n            if (i==0 && s0(i)!=s1(i)) return false\n            else if\
    \ (s0(i)!=s1(i)) return false\n        }\n        true", "        if (s0.length\
    \ == s1.length && s0.zip(s1).forall(x => x._1 == x._2)) true\n        else false",
  "      if(s0.length != s1.length) {\n        return false\n      }\n      var i\
    \ = 0\n      var j = 0\n      while(i < s0.length && j < s1.length) {\n      \
    \  if(s0.charAt(i) != s1.charAt(j)) {\n          return false\n        }\n   \
    \     i += 1\n        j += 1\n      }\n      i == s0.length && j == s1.length",
  "        var i = 0\n        var j = 0\n        while (i < s0.length) {\n       \
    \     while (j < s1.length) {\n                if (s0(i) != s1(i)) {\n       \
    \             return false\n                }\n                i += 1\n      \
    \          j += 1\n            }\n            i += 1\n        }\n        return\
    \ true", "      if(s0.length != s1.length) return false;\n      var sameChars\
    \ : Boolean = true\n      for(i <- 0 until s0.length)\n        if(s0(i) != s1(i))\
    \ sameChars = false\n      sameChars", "        for (i <- 0 until s0.length) {\n\
    \            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n\
    \            }\n        }\n        true", "        var i = 0\n        var len0\
    \ = s0.length\n        var len1 = s1.length\n        var s0 = s0.toCharArray\n\
    \        var s1 = s1.toCharArray\n        while (i < len0 || i < len1) {\n   \
    \         if (s0(i) == s1(i)) {\n                i += 1\n            } else if\
    \ (s0(i) < s1(i)) {\n                return false\n            } else {\n    \
    \            return true\n            }\n        }\n        return len0 == len1",
  '        s0.toLowerCase().zip(s1.toLowerCase()).forall { case (x, y) => x == y }',
  "        if (s0.length != s1.length) {\n            return false\n        }\n  \
    \      val m0 = s0.toArray\n        val m1 = s1.toArray\n        var i = 0\n \
    \       while (i < m0.length) {\n            if (m0(i) != m1(i)) {\n         \
    \       return false\n            }\n            i += 1\n        }\n        return\
    \ true", "      val zeros = Array(s0.length * s0.chars.length) \n      val ones\
    \ = Array(s1.length * s1.chars.length)\n      val (i,j) = (0,0)\n      while (i\
    \ < s0.length && j < s1.length) {\n        if (s0.charAt(i) != s1.charAt(j)) {\n\
    \          val pos = (i + j) * s1.length\n          zeros(pos) = false\n     \
    \     ones(pos) = false\n          i += 1\n          j += 1\n          continue\n\
    \        }\n        if (i == s0.length && j == s1.length) true\n        i += 1\n\
    \        j += 1\n      }\n      for ((i,j) <- Iterator(s0.length); j <- Iterator\
    \ (s1.length); i <- Iterator (s0.length)) {\n        if (zeros(i) != s0.charAt(i)\
    \ || ones(j) != s1.charAt(j)) false\n      }", "        s0.length == s1.length\n\
    \        s0.drop(s0.length - 1).sameCharsWith(s1.drop(s1.length - 1))", "    \
    \    var chars1 : List[Char] = Nil\n        var chars2 : List[Char] = Nil\n  \
    \      var diffs : List[Char] = Nil\n        var j : Int = 0\n        while (s0.length\
    \ != s1.length) {\n            chars1 = s0(j)\n            chars2 = s1(j)\n  \
    \          if (chars1 ne chars2) {\n                diffs += chars1 diff chars2\n\
    \            }\n            j += 1\n        }\n        chars1 = s0(j)\n      \
    \  chars2 = s1(j)\n        diffs += chars1 diff chars2\n        diffs.isEmpty",
  "        val chars0 = s0.toCharArray\n        val chars1 = s1.toCharArray\n    \
    \    var i = 0\n        var j = 0\n        while(i < chars0.length && j < chars1.length){\n\
    \            if (chars0(i) != chars1(j))\n                return false\n     \
    \       i += 1\n            j += 1\n        }\n        i == chars0.length && j\
    \ == chars1.length", "        val c = s0.chars.toList\n        val d = s1.chars.toList\n\
    \        for ((b1, b2) <- zip(c, d) ; x <- b1 ++ b2 ; if x != x.head) yield false\n\
    \        true", "        // Find the length of s0 and s1\n        var len0 = s0.length\n\
    \        var len1 = s1.length\n        // If the lengths are the same, we can\
    \ stop here\n        if(len0 == len1)\n            return true\n        // Now\
    \ we want to make sure we have the right number of characters in s0 and s1\n \
    \       // Let's see if we can find them in s0\n        var foundChars0 = false\n\
    \        for(i1 <- 0 until len1){\n            // If they match, that's a good\
    \ one\n            if(s0.charAt(i1) == s1.charAt(i1))\n                foundChars0\
    \ = true\n            else\n                break\n        }\n        // If we\
    \ didn't find a character in s0, we should return false\n        if(!foundChars0)\n\
    \            return false\n        // Now we want to make sure we have the right\
    \ number of characters in s1 and s1\n        // Let's see if we can find them\
    \ in s1\n        var foundChars1 = false\n        for(i1 <- 0 until len1){\n \
    \           // If they match, that's a good one\n            if(s0.charAt(i1)\
    \ == s1.charAt(i1))\n                foundChars1 = true\n            else\n  \
    \              break\n        }\n        // If we didn't find a character in s1,\
    \ we should return false\n        if(!foundChars1)\n            return false\n\
    \        // If we got this far, we should return true (two words are the same\
    \ length)\n        // This should probably be the very last thing we do\n    \
    \    return true", "        val b0 =  new Array[Char](s0.length)\n        val\
    \ b1 =  new Array[Char](s1.length)\n\n        for(i <- 0 until s0.length)\n  \
    \          b0(i) = s0(i)\n        for(i <- 0 until s1.length)\n            b1(i)\
    \ = s1(i)\n\n        // check for equal characters\n        for(c1 <- 0 until\
    \ b0.length)\n            for(c2 <- 0 until b1.length)\n                if(b0(c1)\
    \ == b1(c2))\n                    return true\n        return false", "      \
    \  val chars0 = s0.toCharArray\n        val chars1 = s1.toCharArray\n        (chars0.length\
    \ == chars1.length) && (chars0.zip(chars1).forall(x => x._1 == x._2))", "    \
    \    val map0 = s0\n        val map1 = s1\n        var i = 0\n        while ((i\
    \ < map0.length) && (i < map1.length)) {\n            if ((map0(i) != map1(i)))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \ }\n        i = map0.length\n        while ((i < map1.length)) {\n          \
    \  if (map0(i) != map1(i)) {\n                return false\n            }\n  \
    \          i += 1\n        }\n        true", "        val sb0 = new StringBuffer(s0)\n\
    \        val sb1 = new StringBuffer(s1)\n        var char0 = null\n        var\
    \ char1 = null\n        var sameChar = true\n\n        while (char0 = sb0.lastChar())\n\
    \            while ((char1 = sb1.lastChar()) && sb0.length >= sb1.length) {\n\
    \                if (char0 != char1) sameChar = false\n                sb0.dropRight(1)\n\
    \                sb1.dropRight(1)\n            }\n\n        if (sameChar)\n  \
    \          true\n        else\n            false", "        var result = true\n\
    \        for (i<-0 to s1.length-1){\n            if (s0(i) != s1(i)){\n      \
    \          result = false\n            }\n        }\n        result", "      \
    \  // Create two sets of chars\n        val chars0 = Set[Char](s0.toCharArray)\n\
    \        val chars1 = Set[Char](s1.toCharArray)\n        // Compare each char\
    \ in the first string with each char in the second string\n        for (char0\
    \ <- chars0) yield {\n            if (!chars1.contains(char0))\n             \
    \   return false\n        }\n        true", "        if (s0.length != s1.length)\n\
    \            return false\n        val sChars = mutable.Set[Char](s0.toCharArray)\n\
    \        for (i <- 0 until s0.length) \n            if (!sChars.contains(s1(i)))\n\
    \                return false\n        return true", "        var ok = true\n\
    \        var chars1 = Set.empty[Char]\n        var chars2 = Set.empty[Char]\n\
    \        for (char <- s0)\n            chars1 += char\n        for (char <- s1)\n\
    \            chars2 += char\n        chars1.size == chars2.size", "        var\
    \ sameChar = 0\n        val charSet = mutable.Set[Char]()\n        for(char <-\
    \ s0.toCharArray){\n            charSet += char\n        }\n        for(char <-\
    \ s1.toCharArray){\n            if (charSet.contains(char))\n                sameChar\
    \ += 1\n            else\n                charSet += char\n        }\n       \
    \ sameChar == s1.length", "        var i = 0\n        var j = 0\n        var count\
    \ = 0\n        while (i<s0.length && j<s1.length) {\n            if (s0.charAt(i)\
    \ != s1.charAt(j)) {\n                count = 1\n            }\n            i\
    \ += 1\n            j += 1\n        }\n        count == s0.length", "        var\
    \ chars0 = Set.empty[Char]\n        var chars1 = Set.empty[Char]\n        s0.foreach(char\
    \ => chars0 += char.asInstanceOf[Char])\n        s1.foreach(char => chars1 +=\
    \ char.asInstanceOf[Char])\n        if (chars0.sameElements(chars1) || chars0.size\
    \ == s0.size && chars1.size == s1.size)\n            true\n        else\n    \
    \        false", "        val a = s0.toCharArray\n        val b = s1.toCharArray\n\
    \        // Check characters one by one.\n        val sameChar = false\n     \
    \   for (i <- 0 until a.length) {\n            if (a(i) != b(i)) {\n         \
    \       sameChar = false\n                break\n            }\n            sameChar\
    \ = true\n        }\n        sameChar", "        // TODO\n        var i = 0\n\
    \        var j = 0\n        var n = s0.length\n        var m = s1.length\n   \
    \     while (i < n && j < m) {\n            if (s0.charAt(i) != s1.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j += 1\n        }\n        return (i == n && j == m)", "        val s0_arr\
    \ = s0.toLowerCase().toCharArray\n        val s1_arr = s1.toLowerCase().toCharArray\n\
    \        var n = 0\n        while(n < s0_arr.length && n < s1_arr.length) {\n\
    \            if(s0_arr(n) == s1_arr(n)) {\n                n += 1\n          \
    \  } else {\n                return false\n            }\n        }\n        if(n\
    \ == s0_arr.length) {\n            return true\n        }\n        return false",
  "        var same = s0.length == s1.length\n        for (x1 <- 0 until s0.length)\
    \ {\n            if ((same = same && (s0(x1) == s1(x1))) == false) break\n   \
    \     }\n        same", "        def sameChar(s0 : String, s1 : String, l0 : Int,\
    \ l1 : Int) : Boolean = {\n            val chars0 = (s0.toCharArray drop (l0)).mkString\n\
    \            val chars1 = (s1.toCharArray drop (l1)).mkString\n            if\
    \ (chars0.length != chars1.length) return false;\n            if (chars0 contains\
    \ chars1) return true;\n            if (chars0 contains chars1 && !chars0.drop(l1).contains(chars1\
    \ drop l0)) return false\n            return true\n        }\n        (s0.length\
    \ == s1.length) &&\n        (0 until s0.length == s1 foreach sameChar(s0, s1,\
    \ _, _))", "        var chars0 = new ArrayBuffer[Char]()\n        var chars1 =\
    \ new ArrayBuffer[Char]()\n        var j = 0\n        var k = 0\n        while\
    \ ((j < s0.length) && (k < s1.length)) {\n            if (s0(j) == s1(k)) {\n\
    \                chars0.append(s0(j))\n                chars1.append(s1(k))\n\
    \                j += 1\n                k += 1\n            }\n            else\
    \ if (s0(j) != s1(k)) {\n                return false\n            }\n       \
    \     j += 1\n            k += 1\n        }\n        if (j == s0.length) {\n \
    \           if (k == s1.length) {\n                return chars0.size == chars1.size\n\
    \            }\n            else {\n                return false\n           \
    \ }\n        }\n        else {\n            return false\n        }", "      \
    \  var result : Boolean = false\n        for (a <- s0) for (x <- s1) if (x ==\
    \ a) {\n            result = true\n        }\n        result", "        if(s1.length\
    \ >= s0.length) return true;\n        val chars1 = s1.map(c => c.toInt)\n    \
    \    val chars0 = s0.map(c => c.toInt)\n        var i = s1.length\n        var\
    \ j = s0.length\n        var n = s1.length\n        while (i < n){\n         \
    \   if (!chars0.contains(chars1(i))) return false;\n            i += 1;\n    \
    \    }\n        j = 0\n        while (j < n){\n            if (!chars1.contains(chars0(j)))\
    \ return false;\n            j += 1;\n        }\n        return true;", "    \
    \   for(a<-s0.iterator;a<s1.iterator;a++){\n          if(a!=s0.indexOf(a)){\n\
    \             return false;\n          }\n       }\n       true", "        var\
    \ flag = false\n        for (c0 <- s0.toCharArray) {\n            for (c1 <- s1.toCharArray)\
    \ {\n                if (c0 == c1) {\n                    flag = true\n      \
    \              break\n                }\n            }\n        }\n        flag",
  "        val s1 = s1.toUpperCase()\n        s0.length.sameChars(s1)", '        (s0.toSet.size
    == s1.toSet.size && s0.toSet == s1.toSet) || (s0.toSet.size == s1.toSet.size &&
    s0.toSet == s1.toSet.toSet)', "        if (s0.length != s1.length) return false;\n\
    \        for (s0 <- s0.toCharArray()) {\n            val s1 = s1.toCharArray();\n\
    \            assert(s1.length == s1.max);\n            for (s1 <- s1) {\n    \
    \            if (s1 != s0) return false;\n            }\n        }\n        return\
    \ true;", "        if(s0.length != s1.length) {\n            return false\n  \
    \      }\n        var i0 : Int = 0\n        var i1 : Int = 0\n        while(true)\
    \ { \n            if(s0.charAt(i0) == s1.charAt(i1)) {\n                i0 +=\
    \ 1\n                i1 += 1\n            } else {\n                break\n  \
    \          }\n        }\n        return true", "        var index0 : Int = 0\n\
    \        var index1 : Int = 0\n        var char0 : Char = ' '\n        var char1\
    \ : Char = ' '\n        val zero = chr(0)\n        val one = chr(1)\n        while(\
    \ index0 &lt; s0.length && index1 &lt; s1.length) {\n            char0 = s0.charAt(index0)\n\
    \            char1 = s1.charAt(index1)\n            if( char0 == char1 ) {\n \
    \               index0 += 1\n                index1 += 1\n            }\n    \
    \        else if( char0 != zero ) {\n                return false\n          \
    \  }\n            else if( char1 != zero ) {\n                return false\n \
    \           }\n            else {\n                index0 += 1\n             \
    \   index1 += 1\n            }\n        }\n        if( index0 &lt; s0.length &&\
    \ index1 &lt; s1.length ) {\n            return false\n        }\n        else\n\
    \            return true", "        var charArray0 : Array[Char] = new Array[Char](s0.length)\
    \ ;\n        var charArray1 : Array[Char] = new Array[Char](s1.length) ;\n   \
    \     var i : Int = 0 ;\n        while (i < s0.length && i < s1.length) {\n  \
    \          charArray0(i) = s0(i).toChar ;\n            charArray1(i) = s1(i).toChar\
    \ ;\n            i += 1 ;\n        }\n        var sameChars : Boolean = (charArray0.sameElements(charArray1)\
    \ && charArray1.sameElements(charArray0))\n        if (sameChars) {\n        \
    \    return true ;\n        } else {\n            return false ;\n        }",
  "        val sameChars = (s0.toCharArray.zip(s1.toCharArray).map(s => (s._1, s._2)))\n\
    \        sameChars.toList.size == s1.length", "        val s1 = s0.toList\n  \
    \      val s2 = s1.toList\n        val length = s1.size\n        var i0 = 0\n\
    \        var i1 = 0\n        var i2 = length - 1\n        while (true)\n     \
    \   {\n            if (i0 < length)\n            {\n                if (i2<length)\
    \ \n                    i2 = i1 + 1\n                if (s1(i0).equals(s2(i2)))\n\
    \                    i0 = i1 + 1\n                else\n                    return\
    \ false\n            }\n            else\n            {\n                return\
    \ true\n            }\n        }", "        val z0 = s0.toCharArray\n        val\
    \ z1 = s1.toCharArray\n        if (z0.length != z1.length) {\n            return\
    \ false\n        }\n        val nChars = z0.length\n        var count = 0\n  \
    \      var i = 0\n        while (i < nChars) {\n            if (z0(i) != z1(i))\
    \ {\n                return false\n            }\n            count += 1\n   \
    \         i += 1\n        }\n        return count == nChars", "        s0.length\
    \ == s1.length && {\n            for (i <- 0 until s0.length) if (s0(i) != s1(i))\
    \ return false\n            true\n        }", "        val map = mutable.Map[Char,\
    \ Int]()\n        var i = 0\n        var j = 0\n        while (i < s0.length &&\
    \ j < s1.length) {\n            val ch0 = s0.charAt(i)\n            val ch1 =\
    \ s1.charAt(j)\n            if (map.contains(ch0)) {\n                val count\
    \ = map.get(ch0) + 1\n                if (count > 1) {\n                    map.remove(ch0)\n\
    \                    map.put(ch1, count)\n                }\n            } else\
    \ {\n                map.put(ch0, 1)\n            }\n            i += 1\n    \
    \        j += 1\n        }\n        if (i < s0.length && j < s1.length)\n    \
    \        map.contains(ch0) && (map.get(ch0) == 1)\n        else\n            map.contains(ch0)",
  "        // Your code goes here\n        val len = min(s0.length, s1.length)\n \
    \       var i0 = 0\n        var i1 = 0\n        var sameChars = true\n       \
    \ while (i0 < len) {\n            if ((s0(i0) == s1(i0)))\n                i0\
    \ += 1\n            else\n                sameChars = false\n            if (i0\
    \ < len) {\n                if ((s0(i0) != s1(i0)))\n                    i0 +=\
    \ 1\n                else\n                    i1 += 1\n            }\n      \
    \  }\n        if (sameChars)\n            (len == i1)\n        else\n        \
    \    false", "        var c0 = s0.toCharArray\n        var c1 = s1.toCharArray\n\
    \        c0.zip(c1).forall { case (a:Character, b:Character) => a == b }", " \
    \       var i = 0\n        var s1Pos = -1\n        var s2Pos = -1\n        while\
    \ ((i < s0.length) && (i < s1.length)) {\n            if (s0.charAt(i) != s1.charAt(i))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \ }\n        if (i == s0.length) {\n            return true\n        }\n     \
    \   while ((i < s0.length) && (i < s1.length)) {\n            s1Pos = s0.indexOf(s1.charAt(i),\
    \ 0)\n            s2Pos = s1.indexOf(s0.charAt(i), 0)\n            if (s1Pos <\
    \ 0 || s2Pos < 0 || s1Pos == s2Pos) {\n                return false\n        \
    \    }\n            i += 1\n        }\n        if (i == s0.length) {\n       \
    \     return true\n        }\n        if (i < s1.length) { \n            return\
    \ false\n        }\n        true", "        s0.length == s1.length && \n     \
    \   s0.take(s0.length) == s1.take(s0.length) &&\n        s0.drop(s0.length) ==\
    \ s1.drop(s0.length)", "        if(s0.length != s1.length) false\n        else\
    \ {\n            var c0 : (Char, Char) = null\n            var c1 : (Char, Char)\
    \ = null\n            var i = 0\n            var j = 0\n            while(i<s0.length\
    \ && j<s1.length) {\n                c0 = s0.charAt(i)\n                c1 = s1.charAt(j)\n\
    \                if(c0!=c1) return false\n                if(c0==c1) i++; j++\n\
    \                else {\n                    if(c0 == 'e' && !sameChars(s0.substring(i+1),\
    \ s1.substring(j+1)) ) false\n                    else true\n                }\n\
    \            }\n            if(i<s0.length) false\n            else if (j<s1.length)\
    \ false\n            else true\n        }", "        val xs = s1.toCharArray\n\
    \        val ys = s0.toCharArray\n        var equal = 0\n        for (i <- 0 to\
    \ xs.length - 1) {\n            if (xs(i) == ys(i)) {\n                equal =\
    \ equal + 1\n            }\n        }\n        xs.length == equal", "        val\
    \ hash0 = hash(s0)\n        val hash1 = hash(s1)\n        hash0 == hash1", " \
    \       val firstCharsMap : Map[Char, Int] = s1.chars.groupBy(c => (c)).mapValues(_.size).toMap\n\
    \        val secondCharsMap : Map[Char, Int] = s0.chars.groupBy(c => (c)).mapValues(_.size).toMap\n\
    \        secondCharsMap.forall { case (k, v) => firstCharsMap.get(k) == v }",
  "        for (s2 <- s1 until s0.last)\n            if (s0 contains s2) return true\n\
    \        return false", "        // Check if s0 and s1 have the same length\n\
    \        // >>> sameChars(\"\", \"\")\n        // (true)\n        // >>> sameChars(\"\
    \", \" \")\n        // (false)\n        if (s0.length != s1.length) return false;\n\
    \n        // Create two vectors of characters that will be used throughout the\
    \ program\n        // to check if two words have the same characters.\n      \
    \  // >>> val c = Vector(\"a\", \"b\", \"c\")\n        // >>> sameChars(\"\",\
    \ c)\n        // (true)\n        // >>> sameChars(\" \", c)\n        // (false)\n\
    \        var chars : Vector[Char] = Vector.empty\n        for (i <- 0 until s0.length)\n\
    \            chars += s0.charAt(i)\n        for (j <- 0 until s1.length)\n   \
    \         chars += s1.charAt(j)\n\n        // If both vectors contain exactly\
    \ the same characters, then the words\n        // are the same and we can return\
    \ true.\n        // >>> val c = Vector(\"a\", \"b\", \"c\")\n        // >>> val\
    \ d = Vector(\"a\", \"b\", \"c\", \"d\")\n        // >>> sameChars(c, d)\n   \
    \     // (true)\n        // >>> sameChars(d, c)\n        // (true)\n        chars.size\
    \ == chars.length && chars.sameElements(chars)", "        val chars = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s0.length){\n            if (s0.charAt(i) == s1.charAt(i)){\n\
    \                chars.append(s0.charAt(i))\n            }\n        }\n      \
    \  if (chars.size == s1.length) {\n            true\n        }\n        else {\n\
    \            false\n        }", "      val chars0 = s0.toList.toSet\n      val\
    \ chars1 = s1.toList.toSet\n      chars0.size == chars1.size &&\n      chars0.subsetOf(chars1)\
    \ || chars1.subsetOf(chars0)", "        var i = 0\n        while (i < s0.length\
    \ && i < s1.length) {\n            if (s0(i) != s1(i)) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        if (i == s0.length\
    \ && i == s1.length) {\n            return true\n        }\n        return false",
  "        def sameChar(s0 : String, s1 : String) : Boolean = {\n            var same\
    \ = true\n            for (i <- 0 until s0.length && same && i < s1.length) {\n\
    \                if (s0.charAt(i) != s1.charAt(i)) {\n                    same\
    \ = false\n                }\n            }\n            return same\n       \
    \ }\n        if (s0.length != s1.length) false\n        else\n            for\
    \ (i <- 0 until s0.length && i < s1.length)\n                if (sameChar(s0.substring(i,\
    \ i + 1), s1.substring(i, i + 1)))\n                    false\n              \
    \  else true", "      var i = 0\n      val j = 0\n      while (i < s0.length &&\
    \ j < s1.length) {\n        if (s0(i) != s1(j)) {\n          return false\n  \
    \      }\n        i += 1\n        j += 1\n      }\n      if (i == s0.length) {\n\
    \        return true\n      }\n      if (j == s1.length) {\n        return true\n\
    \      }\n      return false", "        val s0_chars = s0.toCharArray\n      \
    \  val s1_chars = s1.toCharArray\n        val s0_charLen = s0_chars.length\n \
    \       val s1_charLen = s1_chars.length\n        var i = 0\n        while (i\
    \ < s0_charLen) {\n            if (s1_chars(i) != s0_chars(i)) {\n           \
    \     return false\n            }\n            i += 1\n        }\n        if (i\
    \ == s0_charLen) {\n            return true\n        }\n        var j = i\n  \
    \      while (j < s1_charLen) {\n            if (s1_chars(j) != s0_chars(j)) {\n\
    \                return false\n            }\n            j += 1\n        }\n\
    \        if (j == s1_charLen) {\n            return true\n        }\n        val\
    \ s0_tail = s0.substring(i)\n        val s1_tail = s1.substring(j)\n        return\
    \ sameChars(s0_tail, s1_tail)", "        // Get a mutable set and convert the\
    \ string to lowercase characters.\n        val l0  = s0.toLowerCase toSet\n  \
    \      val l1  = s1.toLowerCase toSet\n        // Compare the two sets.\n    \
    \    l0 == l1", "        var sameChar = false\n        var i = 0\n        var\
    \ j = 0\n        val size = s0.length\n        while (i < size) {\n          \
    \  while (j < size) {\n                if (s0.charAt(i) == s1.charAt(j)) {\n \
    \                   sameChar = true\n                }\n                else {\n\
    \                    if (sameChar) {\n                        break\n        \
    \            }\n                    else {\n                        sameChar =\
    \ false\n                    }\n                }\n                j++\n     \
    \       }\n            i += 1\n            j = 0\n        }\n        sameChar",
  "        s0.toList.zip(s1.toList).forall {\n        case (a0, b0) if a0.length ==\
    \ b0.length =>\n            (0 until a0.length).forall { i =>\n              \
    \  if (a0.charAt(i) != b0.charAt(i)) {\n                    return false\n   \
    \             }\n            }\n        case (a0, b0) => false\n        }\n  \
    \      true", "      val sc0 = scala.collection.mutable.StringBuffer.newBuilder\n\
    \      val sc1 = scala.collection.mutable.StringBuffer.newBuilder\n      val c0\
    \ = s0.toCharArray\n      val c1 = s1.toCharArray\n      val k0 = c0.length -\
    \ 1\n      val k1 = c1.length - 1\n      for(i <- 0 until k0) {\n        sc0.append(c0(i))\n\
    \        sc1.append(c1(i))\n      }\n      val sc0S = sc0.toString\n      val\
    \ sc1S = sc1.toString\n      sc0S.size == sc1S.size && sc0S == sc1S", "      \
    \  val s1Chars = s1.toCharArray\n        val s0Chars = s0.toCharArray\n      \
    \  // O(nm) solution\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while ( i < s0Chars.length && j < s1Chars.length ) {\n            if\
    \ ( s0Chars(i) != s1Chars(j) ) {\n                return false\n            }\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   return i == s0Chars.length && j == s1Chars.length", '       s0.toList.toSet
    == s1.toList.toSet', "        var c0 = scala.collection.mutable.Map[Char, Int]()\n\
    \        var c1 = scala.collection.mutable.Map[Char, Int]()\n        var i = 0\n\
    \        while(i < s0.length && i < s1.length) {\n            val c0 = c0.updated(s0(i).toChar,\
    \ (c0.getOrElse(s0(i).toChar, 0) + 1))\n            val c1 = c1.updated(s1(i).toChar,\
    \ (c1.getOrElse(s1(i).toChar, 0) + 1))\n            i = i + 1\n        }\n   \
    \     if(i != s0.length) {\n            return false\n        }\n        if(i\
    \ != s1.length) {\n            return false\n        }\n        for((k,v) <- c0\
    \ if((v + 1) != c1.getOrElse(k, 0))) {\n            return false\n        }\n\
    \        for((k,v) <- c1 if((v + 1) != c0.getOrElse(k, 0))) {\n            return\
    \ false\n        }\n        return true", "        var a0 = s0.toCharArray\n \
    \       var a1 = s1.toCharArray\n        var i = 0\n        while (i < a0.length\
    \ && i < a1.length) {\n            if ((a0(i) !=a0(i+1)) || (a1(i) !=a1(i+1)))\
    \ \n                return false\n            i += 1\n        }\n        if (i\
    \ >= a0.length && i >= a1.length) \n            return true\n        return false",
  "        val a0 = Array.tabulate(s1.length){i => (s1.charAt(i) == s0.charAt(i))}.toArray\n\
    \        val a1 = Array.tabulate(s0.length){i => (s1.charAt(i) == s0.charAt(i))}.toArray\n\
    \        a0.sameElements(a1)", "        if (s0.length == s1.length) s0.zip(s1).forall\
    \ { case (e0, e1) => e0 == e1 }\n        else false", "        var i = 0\n   \
    \     var found = false\n        val l0 = s0.length\n        val l1 = s1.length\n\
    \        while(i < l0 && i < l1) {\n            if(s0.charAt(i) == s1.charAt(i))\
    \ {\n                found = true\n            }\n            i += 1\n       \
    \ }\n        found", "        val a0 = s0.toCharArray\n        val a1 = s1.toCharArray\n\
    \        val sameChars = a0 == a1\n        if (sameChars) return true\n      \
    \  else {\n            var i = 0\n            while (i < a0.length && i < a1.length)\
    \ {\n                if (a0(i) != a1(i)) sameChars = false\n                i\
    \ += 1\n            }\n            return sameChars\n        }", "        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        while (i < s0.length &&\
    \ j < s1.length) {\n            if (s0.charAt(i) == s1.charAt(j)) {\n        \
    \        i += 1\n                j += 1\n                k += 1\n            }\
    \ else {\n                if (k != 0) return false\n                k = 0\n  \
    \              i += 1\n                j += 1\n            }\n        }\n    \
    \    if (k != 0) return false\n        return true", "        s0.length == s1.length\
    \ && \n        s0.zip(s1.toCharArray).forall(x => x._1 == x._2)", "        var\
    \ result = true\n        for(i <- 0 until s0.length) {\n            val c = scala.util.matching.Regex.findFirstIn(s0,\
    \ i).matchedChar\n            val c1 = scala.util.matching.Regex.findFirstIn(s1,\
    \ i).matchedChar\n            if (c != c1) { result = false; break }\n       \
    \ }\n        result", "        val commonChars = Set(s0.toCharArray, s1.toCharArray)\n\
    \        s0.toCharArray intersect s1.toCharArray forAll commonChars.contains.((_,\
    \ _))", "        if (s0.length != s1.length)\n            return false\n     \
    \   var i = 0\n        while (i < s0.length && i < s1.length) {\n            if\
    \ (s0.charAt(i) != s1.charAt(i))\n                return false\n            i\
    \ += 1\n        }\n        if (i == s0.length)\n            return true\n    \
    \    else\n            return false", "        // Iterate through all the characters\
    \ in s0.\n        var sameChars = true\n        for (ch <- s0.toCharArray) {\n\
    \            // Iterate through all the characters in s1.\n            for (ch\
    \ <- s1.toCharArray) {\n                // If the characters do not match, sameChars\
    \ remains true.\n                if (ch != s0.charAt(ch) || ch != s1.charAt(ch))\n\
    \                    sameChars = false\n            }\n        }\n        \n \
    \       sameChars", "        val a0 = ArrayBuffer(0, s1.length)\n        val a1\
    \ = ArrayBuffer(0, s1.length)\n        val a2 = ArrayBuffer(0, s2.length)\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n\n        while (i < a0.length\
    \ && j < a1.length) {\n            a0(i) = s0.charAt(i)\n            a1(i) = s1.charAt(j)\n\
    \            i += 1\n            j += 1\n        }\n        while (i < a0.length)\
    \ {\n            a0(i) = s0.charAt(i)\n            i += 1\n        }\n       \
    \ while (j < a1.length) {\n            a1(i) = s1.charAt(j)\n            j +=\
    \ 1\n        }\n\n        while (k < a2.length) {\n            a2(i) = s2.charAt(k)\n\
    \            k += 1\n        }\n\n        for (i = 0; i <= a0.length - 1; ++i)\
    \ {\n            if (a0(i) != a0(a1.length)) \n                return false\n\
    \            i += 1\n        }\n        for (i = 0; i <= a1.length - 1; ++i) {\n\
    \            if (a1(i) != a1(a2.length)) \n                return false\n    \
    \        i += 1\n        }\n        for (i = 0; i <= a2.length - 1; ++i) {\n \
    \           if (a2(i) != a2(a0.length)) \n                return false\n     \
    \       i += 1\n        }\n\n        return true", "      def sameChars_(s0 :\
    \ String, s1 : String, i : Int, s0 : String, s1 : String) : Boolean = {\n    \
    \    if (i < 0) false\n        else s0(i) == s1(i)\n      }\n\n      val chars\
    \ = mutable.ListBuffer[Int]()\n      for (i <- 0 until s0.length) {\n        chars\
    \ += (s0(i).toInt - 48).asInstanceOf[Int]\n      }\n      for (i <- 0 until s1.length)\
    \ {\n        chars += (s1(i).toInt - 48).asInstanceOf[Int]\n      }\n      chars.size\
    \ == s0.length && chars.size == s1.length && sameChars_(s0, s1, -1, s0, s1)",
  "        val s1 = s1.toLowerCase\n        s0.toLowerCase.sameElements(s1)", "  \
    \      val commonCharacters = Set(s0.toCharArray).intersect(s1.toCharArray).toList\n\
    \        commonCharacters.size == 0"]
stop_tokens:
- "\n    }\n"
