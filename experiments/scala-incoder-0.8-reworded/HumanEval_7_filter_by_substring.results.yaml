language: scala
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList =>\
    \ {\n            stringList.filterNot(s => s.contains(substring))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpc68y1h_c.scala:10:8 ------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[36mstringList\e[0m => {\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m        I could not infer the type of the parameter\
    \ stringList.\n1 error found\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length\
    \ match {\n            case 0 => strings\n            case 1 => if(strings(0)\
    \ == substring) strings else List()\n            case _ => strings.filter(s =>\
    \ s.contains(substring))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val indexed\
    \ = strings.zipWithIndex\n        val filtered = indexed.filter(x => x._2.contains(substring))\n\
    \        return filtered map (_.head)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnf0mq9nd.scala:11:48 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfiltered\e[0m = indexed.filter(\e\
    [36mx\e[0m => x._2.contains(substring))\n\e[31m\e[31m   |\e[0m               \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      value contains is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(substring\
    \ => strings.contains(substring))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbmu7uit5.scala:14)\n\tat Problem.main(tmpbmu7uit5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.foldLeft(List[String]())(\
    \ (acc: MutableList[String], word) => acc match {\n            case Nil => word\n\
    \            case xs if (word.contains(substring)) => xs :: word\n           \
    \ case xs => xs :: acc\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2135gvd.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.foldLeft(List[\e[35mString\e[0m]())(\
    \ (\e[36macc\e[0m: \e[35mMutableList\e[0m[\e[35mString\e[0m], \e[36mword\e[0m)\
    \ => acc \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu2135gvd.scala:10:51 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        stringList.foldLeft(List[\e[35mString\e[0m]())( (\e\
    [36macc\e[0m: \e[35mMutableList\e[0m[\e[35mString\e[0m], \e[36mword\e[0m) => acc\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                   Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_\
    \ => substring.length > 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3pocu6g2.scala:14)\n\tat Problem.main(tmp3pocu6g2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def findSubstring(string\
    \ : String, substring : String) : Boolean = {\n            if (string.contains(substring))\n\
    \                true\n            else\n                false\n        }\n  \
    \      var result: List[String] = List()\n        strings.foreach(sub => {\n \
    \           if (findSubstring(sub, substring))\n                result = result\
    \ :+ sub\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings filter\
    \ (s => s contains substring)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter{s\
    \ => s.contains(substring)}\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Use a mutable\
    \ data structure to store the filtered elements\n        var filteredStrings =\
    \ List.empty[String]\n        // Use a mutable data structure to store the indexes\
    \ of the strings to remove\n        var toRemove = List.empty[Int]\n        //\
    \ Iterate over the input list, to remove all elements with substring\n       \
    \ strings.foreach { string =>\n            // Check if the string contains the\
    \ substring\n            if(string.contains(substring))\n                // If\
    \ it does, append the string to the filtered list\n                filteredStrings\
    \ = filteredStrings :+ string\n            // If the string does not contain the\
    \ substring, append its index to the indexes list\n            else\n        \
    \        toRemove = toRemove :+ strings.indexOf(string)\n        }\n        //\
    \ Remove all the elements that contain the substring\n        strings.filterNot(_\
    \ == filteredStrings).foreach { string =>\n            toRemove = toRemove :+\
    \ strings.indexOf(string)\n        }\n        // Remove the elements that contain\
    \ the substring\n        strings = strings.filterNot(_ == filteredStrings)\n \
    \       // Return the filtered list\n        strings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5k0hiybv.scala:25:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        strings.filterNot(_ == filteredStrings).foreach\
    \ { \e[36mstring\e[0m =>\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types String and List[String] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5k0hiybv.scala:29:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        strings = strings.filterNot(_ == filteredStrings)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types String and List[String] cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660028618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var matchedStrings\
    \ = List[String]()\n        strings.foreach(matchedStrings ++= substring match\
    \ {\n            case 'a' => \"abc\".toList\n            case 'b' => \"bacd\"\
    .toList\n            case 'c' => \"cde\".toList\n            case _ => throw new\
    \ Exception(s\"Unexpected substring $substring\")\n        })\n        return\
    \ matchedStrings\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbtji597.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings.foreach(matchedStrings ++= substring\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ++= is not a member of List[String] - did you mean List[String].++?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdbtji597.scala:12:30 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m \e[31m'a'\e[0m => \e[31m\"\
    abc\"\e[0m.toList\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    List[Char]\n\e[31m   |\e\
    [0m                        Required: String => Any\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdbtji597.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m \e[31m'b'\e[0m => \e[31m\"\
    bacd\"\e[0m.toList\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    List[Char]\n\e[31m   |\e\
    [0m                        Required: String => Any\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdbtji597.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m \e[31m'c'\e[0m => \e[31m\"\
    cde\"\e[0m.toList\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    List[Char]\n\e[31m   |\e\
    [0m                        Required: String => Any\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings = strings.filter\
    \ { x =>\n            x contains substring\n        }\n        return strings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6kgom03o.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter { \e[36mx\e[0m =>\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Reassignment to val\
    \ strings\n\e[31m11 |\e[0m            x contains substring\n\e[31m12 |\e[0m  \
    \      }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2px21isd.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.contains(substring))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ { s => s.contains(substring) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length\
    \ match {\n            case 0 => strings\n            case _ => {\n          \
    \      def contain(strs: List[String], str : String) = strs contains str\n   \
    \             strings.filter(contain(substring))\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc5lo4lxv.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                strings.filter(contain(substring))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (substring : String)\n\
    \e[31m   |\e[0m                                       Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ { s => s.contains(substring) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = Nil\n        strings.foreach(elem => {\n            if (elem.contains(substring))\n\
    \                result ::= elem\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx37f7x_8.scala:20)\n\tat Problem.main(tmpx37f7x_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filteredList\
    \ = List[String]()\n        for (i <- 0 until strings.length) {\n            if\
    \ (strings(i).contains(substring)) {\n                filteredList ::= strings(i)\n\
    \            }\n        }\n        filteredList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9fl16yuq.scala:21)\n\tat Problem.main(tmp9fl16yuq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(s\
    \ => s.indexOf(substring) != -1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc34m7ygv.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.indexOf(substring)\
    \ != -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filtered\
    \ = strings.filter{ s => s.contains(substring) }\n        println(filtered)\n\
    \        filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: 'List()

    List(xxx, xxxAAA, xxx)

    List(xxx, aaaxxy, xxxAAA, xxx)

    List(grunt, prune)

    '
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val stringSet\
    \ = stringSetFromListOf(strings)\n        val containSubstringSet = stringSet.filter(s\
    \ => s.contains(substring))\n        val stringListOfSubstringSets = containSubstringSet.map(stringSetFromListOf)\n\
    \        stringListOfSubstringSets.foldLeft(List[String]()) { (list, ss) =>\n\
    \            list + ss.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tb_0kg3.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstringSet\e[0m = stringSetFromListOf(strings)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: stringSetFromListOf\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val result =\
    \ mutable.ListBuffer[String]()\n        strings.foreach(s => { if (s.contains(substring))\
    \ result += s})\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kagvo_m.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings == null\
    \ || strings.isEmpty\n            ? strings\n            : strings.filter(s =>\
    \ s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0fu732u0.scala:12:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            : strings.filter(s => s.contains(substring))\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       end of statement expected but '(' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0fu732u0.scala:11:12 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings == \e[31mnull\e[0m || strings.isEmpty\n\
    \e[31m11 |\e[0m            ? strings\n\e[31m\e[31m   |\e[0m                  \
    \         ^\e[0m\n\e[31m   |\e[0m            value ? is not a member of Boolean.\n\
    \e[31m   |\e[0m            Note that `?` is treated as an infix operator in Scala\
    \ 3.\n\e[31m   |\e[0m            If you do not want that, insert a `;` or empty\
    \ line in front\n\e[31m   |\e[0m            or drop any spaces behind the operator.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings\
    \ == Nil) {\n            Nil\n        }\n        else if (strings.isEmpty) {\n\
    \            Nil\n        }\n        else if (strings(0) == substring) {\n   \
    \         strings.tail\n        }\n        else {\n            strings.head ::\
    \ filterBySubstring(strings.tail, substring)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe46n7fsh.scala:25)\n\tat Problem.main(tmpe46n7fsh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.length\
    \ == 0) {\n            strings\n        } else {\n            if (strings.exists(s\
    \ => s.contains(substring))) {\n                strings\n            } else {\n\
    \                filterBySubstring(strings.tail, substring)\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gmvw6fz.scala:22)\n\tat Problem.main(tmp7gmvw6fz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var stringsList\
    \ = strings\n        stringsList.filter(s => s.contains(substring))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var stringFilter\
    \ = new scala.collection.mutable.StringBuffer\n        var filteredStrings = List[String]()\n\
    \        for ( i <- strings ) {\n            if ( i.contains(substring)) {\n \
    \               stringFilter.append(i)\n                filteredStrings = filteredStrings\
    \ :+ stringFilter.toString\n                stringFilter = new scala.collection.mutable.StringBuffer\n\
    \            }\n        }\n        return filteredStrings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtzroh0m.scala:10:56 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mstringFilter\e[0m = \e[33mnew\e\
    [0m scala.collection.mutable.StringBuffer\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtype\
    \ StringBuffer is not a member of scala.collection.mutable - did you mean mutable.StringBuilder.type?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtzroh0m.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                stringFilter = \e[33mnew\e[0m scala.collection.mutable.StringBuffer\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtype StringBuffer is not a member of scala.collection.mutable\
    \ - did you mean mutable.StringBuilder.type?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var list = new\
    \ ListBuffer[String]()\n        var index = -1\n        var currentIndex = 0\n\
    \        for (s <- strings) {\n            index += 1\n            if (s.contains(substring))\
    \ {\n                list.append(s)\n                currentIndex = index\n  \
    \          }\n        }\n        list.take(currentIndex).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // The inner\
    \ filter is applied to the strings list\n        strings.filter {\n          \
    \  // Only add string if it contains substring\n            string => {\n    \
    \            string.contains(substring)\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length\
    \ > 0 ? strings.filter(s => s.contains(substring)) : List[String]()\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpckxm3uki.scala:10:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length > \e[31m0\e[0m ? strings.filter(\e\
    [36ms\e[0m => s.contains(substring)) : \e[35mList\e[0m[\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \        end of statement expected but '(' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpckxm3uki.scala:10:27 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        strings.length > \e[31m0\e[0m ? strings.filter(\e[36ms\e[0m =>\
    \ s.contains(substring)) : \e[35mList\e[0m[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m                 \
    \        value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings = strings.filter(_\
    \ contains substring)\n        if (strings.length <= 0) {\n            strings\n\
    \        } else {\n            strings\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv9v6_k2n.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter(_ contains substring)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val foundString\
    \ = scala.collection.mutable.ListBuffer[String]()\n        for (string <- strings)\
    \ {\n            if (string.contains(substring)) {\n                foundString\
    \ += string\n            }\n        }\n        if (foundString.length == 0) {\n\
    \            List[String]()\n        } else {\n            foundString.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filteredList\
    \ = strings\n        for (s <- strings) {\n            if (s.indexOf(substring)\
    \ != -1)\n                filteredList = filteredList :+ s\n        }\n      \
    \  filteredList\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptf3cdl8d.scala:19)\n\tat Problem.main(tmptf3cdl8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filteredStrings\
    \ = ListBuffer[String]()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings = filteredStrings :+ string\n           \
    \ }\n        }\n        filteredStrings.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings: List[String]\
    \ match {\n            case Nil => Nil\n            case _ =>\n              \
    \  var filtered: List[String] = Nil\n                strings.foreach { str =>\n\
    \                    if (substring in str) {\n                        filtered\
    \ = filtered :+ str\n                    }\n                }\n              \
    \  filtered\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu4u4jqzy.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             end of statement expected but 'match'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660028630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_\
    \ => substring.toSet.subsetOf(_))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy059bddm.scala:10:28\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings.filter(_ => substring.toSet.subsetOf(_))\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.Set[Char]\
    \ => Boolean\n\e[31m   |\e[0m                         Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings match\
    \ {\n            case Nil => Nil\n            case head :: tail => {\n       \
    \         if(head.contains(substring)) {\n                    head :: tail\n \
    \               } else {\n                    filterBySubstring(tail, substring)\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjm0faloq.scala:23)\n\tat Problem.main(tmpjm0faloq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ { string => string.contains(substring) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val stringSet\
    \ = strings.toSet\n        if (stringSet.contains(substring))\n            strings.filter(s\
    \ => stringSet.contains(s.toLowerCase(Locale.ROOT)))\n        else\n         \
    \   strings\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5nq6sggr.scala:12:65 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            strings.filter(\e[36ms\e[0m => stringSet.contains(s.toLowerCase(Locale.ROOT)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \                Not found: Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result:\
    \ List[String] = Nil\n        for(s <- strings) {\n            if(s.contains(substring))\
    \ {\n                result = result :+ s\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var strs: List[String]\
    \ = Nil\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                strs ::= str\n            }\n        }\n        return strs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpngmth9t6.scala:21)\n\tat Problem.main(tmpngmth9t6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2px21isd.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.contains(substring))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Create an\
    \ empty output list\n        var output = List[String]()\n        // Traverse\
    \ the input list\n        strings.foreach { x =>\n            // If the current\
    \ string contains substring\n            if (x.contains(substring)) {\n      \
    \          // Add the current string to the output list\n                output\
    \ += x\n            }\n        }\n        // Return the output list\n        output\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzhi7zc8.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                output += x\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      val index = (strings\
    \ indexOf substring) match {\n        case -1 => strings.reverse.indexOf substring.reverse\n\
    \        case index => index\n      }\n      if (index == -1) strings else strings.take(index)\
    \ + strings.drop(index+1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptxl5stvu.scala:11:52 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mcase\e[0m -\e[31m1\e[0m => strings.reverse.indexOf\
    \ substring.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmptxl5stvu.scala:11:35 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mcase\e[0m -\e[31m1\e[0m => strings.reverse.indexOf\
    \ substring.reverse\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e\
    [0m [B >: String](elem: B): Int\n\e[31m   |\e[0m [B >: String](elem: B, from:\
    \ Int): Int\n\e[31m   |\e[0mmatch expected type ?{ substring: ? }\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptxl5stvu.scala:14:56 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mif\e[0m (index == -\e[31m1\e[0m) strings\
    \ \e[33melse\e[0m strings.take(index) + strings.drop(index+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[String], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Filter the\
    \ given list of strings only if it contains substring \"a\"\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filterNot(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkd042wxh.scala:14)\n\tat Problem.main(tmpkd042wxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ = strings\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                filtered ::= string\n            }\n        }\n        filtered\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9pb2y9z2.scala:20)\n\tat Problem.main(tmp9pb2y9z2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Write your\
    \ code here\n        return strings.filter((s) => s.contains(substring))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ _ contains substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings.length\
    \ == 0 || substring == \"\") return strings\n        strings.toList.reverse.takeWhile(s\
    \ => s.indexOf(substring) != -1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpncp8lr6r.scala:15)\n\tat Problem.main(tmpncp8lr6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringToSet(strings).filter(s\
    \ => s.contains(substring)).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgxfbs3b.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringToSet(strings).filter(\e[36ms\e[0m => s.contains(substring)).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringToSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val result:\
    \ List[String] = stringListFromIterator(strings.toIterator).filter(_(substring)).toList\n\
    \        \n        if(strings.length == 0) result \n        else filterBySubstring(result,\
    \ substring) \n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywwipvq5.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = stringListFromIterator(strings.toIterator).filter(_(substring)).toList\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: stringListFromIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var newStrings\
    \ = strings\n        for (string <- strings) {\n            if (string.indexOf(substring)\
    \ != -1) {\n                newStrings = newStrings + string\n            }\n\
    \        }\n        newStrings\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp09l2iiiq.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                newStrings = newStrings + string\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of List[String], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result =\
    \ strings\n        var start = 0\n        var end = 0\n        while (start <\
    \ strings.length) {\n            end = start + substring.length\n            if\
    \ (string.contains(substring, start, end)) {\n                start = end + 1\n\
    \            }\n            else {\n                start = end\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvnraoe0.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (string.contains(substring,\
    \ start, end)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def findSubstringMatch(str\
    \ : String) : List[String] = {\n            if (str.toLowerCase().contains(substring.toLowerCase()))\n\
    \                Some(str) :: Nil\n            else\n                None\n  \
    \      }\n        strings.filterNot(findSubstringMatch)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1iqjenp0.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                Some(str) ::\
    \ Nil\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e\
    [0m\n\e[31m   |\e[0m                Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1iqjenp0.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                None\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                Found:    None.type\n\e[31m\
    \   |\e[0m                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1iqjenp0.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        strings.filterNot(findSubstringMatch)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    List[String]\n\e[31m   |\e[0m           \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ x => x.indexOf(substring) > -1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.map(_.contains(substring)).filter(_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplqyklqh3.scala:10:53 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.map(_.contains(substring)).filter(_)\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => stringList.map(_$1 => _$1.contains(substring)).filter(_$2).\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqyklqh3.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.map(_.contains(substring)).filter(_)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2px21isd.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.contains(substring))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter{s\
    \ => substring.count(_ == s) > 0} \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpph58tqdq.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter{\e[36ms\e[0m => substring.count(_\
    \ == s) > \e[31m0\e[0m} \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings .filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filterNot(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkd042wxh.scala:14)\n\tat Problem.main(tmpkd042wxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.indexOf(substring) > -1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.collect\
    \ {\n          case string if string.contains(substring) => string\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x contains substring)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings\
    \ == null || strings.length == 0 || substring.length == 0) {\n            return\
    \ strings\n        }\n        var result = new scala.collection.mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < strings.length) {\n            if (strings.slice(i,\
    \ i+substring.length).forall(substring.contains)) {\n                result.append(strings(i))\n\
    \            }\n            i += 1\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvpkhgl_.scala:25)\n\tat Problem.main(tmpnvpkhgl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ _.getCount(substring, 0) > 0 )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw0hn76h4.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.filter( _.getCount(substring, \e[31m0\e\
    [0m) > \e[31m0\e[0m )\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getCount is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1660028655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Use indexOf\
    \ to determine if substring is a substring of each string\n        // If true,\
    \ then filter the list with those strings\n        // If false, then filter the\
    \ list with strings that do not have substring\n\n        // If the number of\
    \ strings is 1 and the substring is \"\", return empty list\n        if(strings.size\
    \ == 1 && !substring.equals(\"\")) {\n            return []\n        }\n     \
    \   // If the number of strings is 0 and the substring is \"\", return empty list\n\
    \        if(strings.isEmpty() && !substring.equals(\"\")) {\n            return\
    \ []\n        }\n        // If the number of strings is 0 or 1, then we must filter\
    \ the list with strings that DO have substring\n        if(strings.size > 0) {\n\
    \            val index = strings.indexWhere(s => substring.contains(s))\n    \
    \        if(index != -1) {\n                strings.filter(s => substring.contains(s))\n\
    \            } else {\n                strings\n            }\n        } else\
    \ {\n            strings\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuwl0y_k.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuwl0y_k.scala:17:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuwl0y_k.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuwl0y_k.scala:21:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpiuwl0y_k.scala:19:19 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(strings.isEmpty() && !substring.equals(\e\
    [31m\"\"\e[0m)) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mclass\e[0m\
    \ \e[35mList\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(a\
    \ => a.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7cayvdh.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ma\e[0m => a.contains(substring))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ = List.empty[String]\n        for (string <- strings) if (string.indexOf(substring)\
    \ >= 0) filtered ::= string\n        filtered\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kde02sh.scala:17)\n\tat Problem.main(tmp_kde02sh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filterNot(\
    \ s => s.contains(substring) ) :: Nil\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_umrdxrb.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings.filterNot( \e\
    [36ms\e[0m => s.contains(substring) ) :: Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings: List[String].filter(\
    \ string => string.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe0dc6wgp.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(\
    \ string => string.contains(substring))\n\e[31m\e[31m   |\e[0m               \
    \              ^\e[0m\n\e[31m   |\e[0m                             end of statement\
    \ expected but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_\
    \ contains substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        string\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52wrsl5x.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.indexOf(substring) >= 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var res: List[String]\
    \ = List()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n            res = res + string\n            }\n        }\n        return\
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplbgwznjd.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            res = res + string\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList =>\
    \ {\n            val result = strings.filter( s => s.contains(substring))\n  \
    \          result\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp86c146th.scala:10:8 ------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[36mstringList\e[0m => {\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m        I could not infer the type of the parameter\
    \ stringList.\n1 error found\n"
  stdout: ''
  timestamp: 1660028655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filteredList\
    \ = stringFilter(\"substring\", substring, strings)\n        filteredList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlygkee2.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e[0m = stringFilter(\e\
    [31m\"substring\"\e[0m, substring, strings)\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \ Not found: stringFilter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings.length\
    \ <= 0) \n            return []\n        else \n            if (strings.contains(substring))\n\
    \                return strings\n            else \n                strings.filter(str\
    \ => !str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_61bk5o.scala:11:20 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_61bk5o.scala:12:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e\
    [0m \n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        '=>' expected,\
    \ but unindent found\n2 errors found\n"
  stdout: ''
  timestamp: 1660028657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x contains substring)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings match\
    \ {\n            case Nil => Nil\n            case list => if (list.contains(substring))\
    \ list else Nil\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbyijx0u.scala:17)\n\tat Problem.main(tmpzbyijx0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringFilter((strings)\
    \ => strings.filter(x => x contains substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ym8bwks.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringFilter((\e[36mstrings\e[0m) => strings.filter(\e\
    [36mx\e[0m => x contains substring))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: stringFilter\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.toList.filterNot(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m8n6s44.scala:14)\n\tat Problem.main(tmp4m8n6s44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Find substring\
    \ in each string and return only those that have substring\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.toList.filter(\
    \ s => s.contains(substring) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Find first\
    \ occurrence\n        var i = 0\n        for (i <- 0 until strings.size)\n   \
    \         if (strings(i).contains(substring))\n                break\n       \
    \ // Remove all occurrence\n        strings.take(i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6t8i_h6t.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings filter\
    \ (x => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(xs\
    \ => xs.contains(substring))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings.length\
    \ > 0){\n            if(strings.exists(_.contains(substring))){\n            \
    \    return strings\n            }\n            else {\n                var stringList\
    \ : List[String] = Nil\n                for (s <- strings) {\n               \
    \     if (s.contains(substring)) {\n                        stringList ::= s\n\
    \                    }\n                }\n                stringList\n      \
    \      }\n        }\n        else {\n            Nil\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwvie_k1.scala:30)\n\tat Problem.main(tmprwvie_k1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var stringsInList\
    \ = new scala.collection.mutable.ListBuffer[String]()\n        stringList.foreach(s\
    \ => { \n            stringsInList.addIfPresent(s.contains(substring))\n     \
    \   }\n        return strings.filterNot(stringsInList.toList)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55e0o6bg.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m strings.filterNot(stringsInList.toList)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        ')' expected,\
    \ but 'return' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55e0o6bg.scala:11:8\
    \ -------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        stringList.foreach(\e\
    [36ms\e[0m => { \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length\
    \ match {\n            case 0 => strings\n            case _ => strings.map(s\
    \ => s contains substring).flatten filterNot (_ == false).toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqflwocft.scala:12:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _ => strings.map(s => s contains\
    \ substring).flatten filterNot (_ == \e[31mfalse\e[0m).toList\n\e[31m\e[31m  \
    \ |\e[0m                                                                    ^\e\
    [0m\n\e[31m   |\e[0mno given instance of type Boolean => IterableOnce[B] was found\
    \ for parameter toIterableOnce of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e\
    [0m \e[35mStrictOptimizedIterableOps\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:\
    \    B is a type variable\n1 error found\n"
  stdout: ''
  timestamp: 1660028672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered:\
    \ List[String] = Nil\n        for (i <- 0 until strings.size) {\n            if\
    \ (strings(i).contains(substring)) {\n                filtered ::= strings(i)\n\
    \            }\n        }\n        return filtered\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa808kl71.scala:21)\n\tat Problem.main(tmpa808kl71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var newStrings\
    \ = mutable.LinkedListBuffer[String]()\n        for (string <- strings) {\n  \
    \          if (string.contains(substring)) {\n                newStrings += string\n\
    \            }\n        }\n        newStrings.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpboo0jkt1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mnewStrings\e[0m = mutable.LinkedListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.map(s\
    \ => s contains substring).reduceLeft((xs, ys) => xs ++ ys)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmu1ufjbl.scala:10:73 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.map(\e[36ms\e[0m => s contains substring).reduceLeft((\e\
    [36mxs\e[0m, \e[36mys\e[0m) => xs ++ ys)\n\e[31m\e[31m   |\e[0m              \
    \                                                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                     value ++ is not a member of Boolean\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        string\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52wrsl5x.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.toList.flatMap(_\
    \ => strings.toList.filter(_ contains substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyqhdqyjk.scala:14)\n\tat Problem.main(tmpyqhdqyjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // use foldLeft\
    \ to filter each string in strings according to substring\n        strings.foldLeft(strings)\
    \ { (strings, str) =>\n            if (str.indexOf(substring) >= 0) {\n      \
    \          strings ::: str\n            } else {\n                strings\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hxjzic7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                strings ::: str\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ value ::: is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660028674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(stringListItem\
    \ => stringListItem.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2m3cj_1.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36mstringListItem\e[0m =>\
    \ stringListItem.contains(substring))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Return empty\
    \ list if empty string is supplied\n        if (strings.isEmpty) List(\"\")\n\
    \        // Otherwise, append substring to all strings in input\n        else\
    \ strings append substring\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpva4bkxfk.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings append substring\n\e\
    [31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append\
    \ is not a member of List[String] - did you mean strings.appended?\n1 error found\n"
  stdout: ''
  timestamp: 1660028675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings.length\
    \ == 0) return strings\n        if(strings.head.length < substring.length) return\
    \ strings\n\n        strings.filter(_.substring(0,substring.length) == substring)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujpwgard.scala:18)\n\tat Problem.main(tmpujpwgard.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def filterBySubStringHelper(strings\
    \ : List[String], substring : String) : List[String] = {\n            if (strings\
    \ == Nil) return Nil\n            val filteredSubstrings = strings.filter { string\
    \ =>\n                if (string.contains(substring)) return true\n          \
    \      else {\n                    val subStringIndex = string.lastIndexOf(substring)\n\
    \                    val substringLength = substring.length\n                \
    \    if (subStringIndex > 0) {\n                        if (subStringIndex < substring.length)\
    \ true\n                        else false\n                    } else false\n\
    \                }\n            }\n            val newList = new mutable.ListBuffer[String]\n\
    \            filteredSubstrings.foreach(newList.+=)\n            newList.toList\n\
    \        }\n        filterBySubStringHelper(strings, substring)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqs4d4nf7.scala:13:55\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m\
    \ (string.contains(substring)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (\e[31mtrue\e\
    [0m : Boolean)\n\e[31m   |\e[0m                                              Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqs4d4nf7.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // This version\
    \ uses mutable Lists\n        var result: List[String] = List()\n        strings.foreach(str\
    \ => {\n            if(str.contains(substring)) {\n                result = str\
    \ :: result\n            }\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpskc2e38j.scala:22)\n\tat Problem.main(tmpskc2e38j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringFilter(strings)\
    \ _\n        strings.toSet filter (_ == substring)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E099] Syntax Error: /tmp/tmp2ju121t4.scala:10:30 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringFilter(strings) _\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mOnly function types can\
    \ be followed by _ but the current expression has type <error Not found: stringFilter>\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ju121t4.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        strings.toSet filter\
    \ (_ == substring)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mSet\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings: List[String]\
    \ filter (_ contains substring)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzsy4ja2i.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [35mfilter\e[0m (_ \e[35mcontains\e[0m \e[35msubstring\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              Not found: type filter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringFilter(substring,\
    \ strings)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hr9xxlx.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringFilter(substring, strings)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringFilter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // TODO: Remove\
    \ mutable structure and use immutable structure instead\n        // - Remove duplicates\n\
    \        // - Remove strings that doesn't contain substring\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        for (str <- strings) {\n       \
    \     if (str.contains(substring)) {\n                result += str\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0rdjfj5.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.indexOf(substring) >= 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x=>\
    \ x.indexOf(substring) != -1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def hasSubstring(str\
    \ : String) : Boolean = {\n            strings.contains(str)\n        }\n    \
    \    strings.filter(hasSubstring(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppl9kurgn.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.filter(hasSubstring(substring))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    Boolean\n\e[31m   |\e[0m          \
    \             Required: \e[1m\e[32mString\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e\
    [0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n       strings.filter(\
    \ s => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings match\
    \ {\n            case Nil => Nil\n            case head :: tail => {\n       \
    \         head match {\n                    case substring :: tail1 => {\n   \
    \                     filterBySubstring(tail, substring)\n                   \
    \ }\n                    case _ => filterBySubstring(tail1, substring)\n     \
    \           }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql7if26.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                        filterBySubstring(tail,\
    \ substring)\n\e[31m\e[31m   |\e[0m                                          \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \      Found:    (substring : Any)\n\e[31m   |\e[0m                          \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5ql7if26.scala:17:48 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                    \e[33mcase\e[0m _ => filterBySubstring(tail1,\
    \ substring)\n\e[31m\e[31m   |\e[0m                                          \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \     Not found: tail1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(substring\
    \ => strings.contains(substring))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbmu7uit5.scala:14)\n\tat Problem.main(tmpbmu7uit5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_\
    \ contains substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings filter\
    \ (s => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings = strings.filter(\
    \ x => x.contains(substring) )\n        if(strings.length == 0){\n           \
    \ return []\n        }\n        return strings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhk7xjbs.scala:12:20 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhk7xjbs.scala:13:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpuhk7xjbs.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter( \e[36mx\e[0m => x.contains(substring)\
    \ )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filtered\
    \ = strings.filter(_.contains(substring))\n        if (filtered.isEmpty) {\n \
    \           strings.asInstanceOf[List[String]]\n        } else {\n           \
    \ filtered\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2px21isd.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.contains(substring))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings filter\
    \ (_.contains(substring))\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028691
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Your code\
    \ goes here\n        strings.length match {\n            case 0 => strings\n \
    \           case n if substring.length == n => strings.filter( _.contains(substring)\
    \ )\n            case n if substring.length < n => filterBySubstring(strings.filter(\
    \ _.length < n), substring)\n            case n if substring.length > n => filterBySubstring(strings.filter(\
    \ _.length > n), substring)\n            case n => filterBySubstring(strings.filter(\
    \ _ contains substring), substring)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result =\
    \ List[String]()\n        var stringCount = 1\n        for (string <- strings)\
    \ {\n            if(string.contains(substring)) {\n                result = result\
    \ :+ string\n                stringCount = stringCount + 1\n            }\n  \
    \      }\n        if(stringCount == 1) {\n            result = result :+ strings\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvfefrg2.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            result = result :+\
    \ strings\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Found:    (strings : List[String])\n\
    \e[31m   |\e[0m                               Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ strings else strings filterNot (s => s.toList.exists(c => c != substring.toChar))\
    \ :: filterBySubstring(strings.tail, substring)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3224de1m.scala:10:61 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (strings.isEmpty) strings \e[33melse\e\
    [0m strings filterNot (\e[36ms\e[0m => s.toList.exists(\e[36mc\e[0m => c != substring.toChar))\
    \ :: filterBySubstring(strings.tail, substring)\n\e[31m\e[31m   |\e[0m       \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                          Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter s.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ s => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result:\
    \ List[String] = Nil\n        for (str <- strings) {\n            if (str.contains(substring))\n\
    \                result = str :: result\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpalsd3afs.scala:20)\n\tat Problem.main(tmpalsd3afs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings::(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpb3z93___.scala:10:18 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings::(_.contains(substring))\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1.contains(substring).\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x=>x.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var list = new\
    \ ArrayList[String]()\n        for(i <- 0 to strings.length){\n            if(strings(i).contains(substring)){\n\
    \                list.add(strings(i))\n            }\n        }\n        return\
    \ (new ArrayList[String](list.toArray))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpape5s_m3.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpape5s_m3.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m\
    \ (\e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m](list.toArray))\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \       Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings ==\
    \ null || strings.length == 0) \n            return strings\n        val newList\
    \ = new mutable.ListBuffer[String]()\n        for(string <- strings) {\n     \
    \       if(string.contains(substring))\n                newList.append(string)\n\
    \        }\n        newList.filterNot(_.isEmpty).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_jgj49r.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.toList.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ strings\n        else strings.filter(_.contains(substring))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.flatMap\
    \ { s => s.contains(substring) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwde7uiqk.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.flatMap { \e[36ms\e[0m => s.contains(substring)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ { (x => x.contains(substring)) }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (substring.length\
    \ == 0 || substring.length == 0) strings; else strings.filter(_ contains substring);\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.flatMap(string\
    \ => if (string.contains(substring)) strings else Nil)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppovxzj9v.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.flatMap(\e[36mstring\e[0m => \e[33mif\e\
    [0m (string.contains(substring)) strings \e[33melse\e[0m Nil)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var stringSet\
    \ = Set[String]()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                stringSet += string\n            }\n        }\n        strings.filterNot(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpifsca9ve.scala:20)\n\tat Problem.main(tmpifsca9ve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6tbloeg0.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(_.contains(substring))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList =>\
    \ {\n            strings.filter(_.contains(substring))\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpn12s6j3d.scala:10:8 ------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[36mstringList\e[0m => {\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m        I could not infer the type of the parameter\
    \ stringList.\n1 error found\n"
  stdout: ''
  timestamp: 1660028694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length.times.filter(_\
    \ > 0).map((1 to strings.length).find(_ == _ * -1).map(_.toInt)).map(strings(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvv72q51e.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length.times.filter(_ > \e[31m0\e[0m).map((\e\
    [31m1\e[0m to strings.length).find(_ == _ * -\e[31m1\e[0m).map(_.toInt)).map(strings(_))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  value times is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // If the list\
    \ has no substring, just return it\n        if (substring.length == 0) {\n   \
    \         return strings\n        }\n        // If the substring is empty or doesn't\
    \ occur in the list, return empty\n        // and stop here.\n        if (substring.length\
    \ == 0) {\n            Nil\n        }\n        if (strings.isEmpty) {\n      \
    \      Nil\n        }\n        if (strings.exists(s => s.contains(substring)))\
    \ {\n            strings\n        } else {\n            // If the substring doesn't\
    \ occur at all in the list, return empty\n            // and stop here.\n    \
    \        Nil\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3drp7op.scala:32)\n\tat Problem.main(tmpw3drp7op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filterNot(_\
    \ == substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqd4iruq.scala:14)\n\tat Problem.main(tmpqqd4iruq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ s => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if(strings ==\
    \ null || substring.isEmpty) strings\n        else if(strings.forall(_.contains(substring)))\
    \ strings\n        else strings.filterNot(_ contains substring)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz55ujf7n.scala:16)\n\tat Problem.main(tmpz55ujf7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Your solution\
    \ goes here\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphnrjs1a9.scala:9:87\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterBySubstring\e\
    [0m(\e[36mstrings\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36msubstring\e\
    [0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m10 |\e[0m        \e[34m//\
    \ Your solution goes here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings\
    \ == null || strings.length == 0) {\n            return strings\n        }\n \
    \       val substringMatch = strings(0).startsWith(substring)\n        if (substringMatch)\
    \ {\n            strings\n        } else {\n            strings.filter(_.startsWith(substring))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplvcinpst.scala:22)\n\tat Problem.main(tmplvcinpst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.length\
    \ == 0 || strings.length == 1 ?\n            strings :\n            (strings.filter(s\
    \ => s.contains(substring)))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo1lhuf7r.scala:12:27 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            (strings.filter(\e[36ms\e[0m => s.contains(substring)))\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     ')' expected, but '(' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpo1lhuf7r.scala:10:51 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        strings.length == \e[31m0\e[0m || strings.length == \e[31m1\e\
    [0m ?\n\e[31m\e[31m   |\e[0m                                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                          value ? is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.toList.filter\
    \ {\n            s => s.contains(substring)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings(0).findAllIn(substring)\
    \ match {\n        case Nil => strings\n        case head :: tail => filterBySubstring(tail,\
    \ substring)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaslxd6ui.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings(\e[31m0\e[0m).findAllIn(substring) \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value findAllIn is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaslxd6ui.scala:12:47 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mcase\e[0m head :: tail => filterBySubstring(tail,\
    \ substring)\n\e[31m\e[31m   |\e[0m                                          \
    \     ^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \  Not found: tail\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings\
    \ == null || substring.length == 0) strings\n        else strings.filter(s =>\
    \ s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Write your\
    \ solution\n        strings: List[String].filter(str => str.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_mipbbr9.scala:11:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(str\
    \ => str.contains(substring))\n\e[31m\e[31m   |\e[0m                         \
    \    ^\e[0m\n\e[31m   |\e[0m                             end of statement expected\
    \ but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.indexOf(substring) != -1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        string\n   \
    \             .sliding(substring.length)\n                .forall(string.indexOf(_,\
    \ substring.indexOf(_)) > -1)\n                .filter(_ != \"0\")\n         \
    \       .map(_.replaceAll(substring, \"\"))\n                .toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv0g1j3qn.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        stringList.filter\
    \ { x =>\n            x.toString.contains(substring)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yam_ibo.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter { \e[36mx\e[0m =>\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Solution\
    \ #1\n        strings.filter { s => s.contains(substring) }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        string\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52wrsl5x.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.length\
    \ == 0) \n            return []\n        if (strings(0).contains(substring))\n\
    \            strings\n        else\n            strings.tail.flatMap(s => filterBySubstring(s.tail,\
    \ substring))\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9uqp5267.scala:11:20 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9uqp5267.scala:12:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m\
    \ (strings(\e[31m0\e[0m).contains(substring))\n\e[31m\e[31m   |\e[0m        ^^\e\
    [0m\n\e[31m   |\e[0m        '=>' expected, but unindent found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9uqp5267.scala:15:58 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            strings.tail.flatMap(\e[36ms\e[0m => filterBySubstring(s.tail,\
    \ substring))\n\e[31m\e[31m   |\e[0m                                         \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    String\n\e[31m   |\e[0m                          \
    \                        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ { s => s.contains(substring) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter\
    \ {\n            s => s.toLowerCase.indexOf(substring.toLowerCase) >= 0\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Solution\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf3ywlzz8.scala:9:87\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterBySubstring\e\
    [0m(\e[36mstrings\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36msubstring\e\
    [0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m10 |\e[0m        \e[34m//\
    \ Solution here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def recurse(string\
    \ : List[String], result : List[String]) : List[String] = {\n            if (string.isEmpty)\
    \ {\n                result\n            } else {\n                recurse(string\
    \ = string.tail, result = if (string.head == substring) result :+ string.head\
    \ else result)\n            }\n        }\n        recurse(strings = strings, result\
    \ = List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp81rnqm8s.scala:17:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        recurse(strings = strings, result = List[\e[35mString\e\
    [0m]())\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m\e[33mmethod\e[0m \e[35mrecurse\e[0m: (string: List[String], result:\
    \ List[String]): List[String] does not have a parameter strings\n1 error found\n"
  stdout: ''
  timestamp: 1660028705
