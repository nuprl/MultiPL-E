language: scala
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bList = brackets.toList\n        val bListLen = bList.size\n\
    \        val nList = mutable.ListBuffer[Int]()\n        val nListLen = nList.size\n\
    \        var lastChar = -1\n        var count = 0\n\n        for( i <- 0 until\
    \ bListLen ) {\n            var c = bList(i)\n            if( c >= '!' && c <=\
    \ '~' ) {\n                // special handling for \"!...~\" chars.\n        \
    \        lastChar = c - '!'\n            } else if( c >= '<' && c <= '>' && lastChar\
    \ >= c ) {\n                lastChar = lastChar - 1\n                count = count\
    \ + 1\n            } else if( c >= '<' && c <= '>' ) {\n                lastChar\
    \ = lastChar + 1\n                count = count + 1\n            } else if( c\
    \ >= '!' && c <= '~' ) {\n                // special handling for \"!...~\" chars.\n\
    \                lastChar = c - '!'\n                count = count + 1\n     \
    \       } else {\n                lastChar = lastChar + 1\n            }\n   \
    \         if( count > 0 ) {\n                // count is 0 after each \"!\"\n\
    \                if( lastChar < 0 ) {\n                    // if \"!\" was the\
    \ last char\n                    if( nListLen < bListLen ) {\n               \
    \         // if the next char is not a closing bracket\n                     \
    \   if( bList(i) == '>' ) {\n                            // then the next char\
    \ must be a closing bracket\n                            nList += bList(i) - '<'\n\
    \                            nListLen += 1\n                        }\n      \
    \              }\n                } else {\n                    // if \"!\" was\
    \ not the last char\n                    if( nListLen < bListLen ) {\n       \
    \                 // if the previous char is not a closing bracket\n         \
    \               if( bList(i) == '<' ) {\n                            // then the\
    \ previous char must be a closing bracket\n                            nList +=\
    \ bList(i) - '!'\n                            nListLen += 1\n                \
    \        }\n                    }\n                }\n                count =\
    \ 0\n                lastChar = -1\n                nList.clear()\n          \
    \      nListLen = 0\n            }\n        }\n\n        if( bListLen > 0 ) {\n\
    \            // if bListLen is larger than 0\n            if( lastChar < 0 ) {\n\
    \                // if \"!\" was the last char\n                if( nListLen <\
    \ bListLen ) {\n                    // if the next char is not a closing bracket\n\
    \                    if( bList(bListLen) == '>' ) {\n                        //\
    \ then the next char must be a closing bracket\n                        nList\
    \ += bList(bListLen) - '<'\n                        nListLen += 1\n          \
    \          }\n                }\n            } else {\n                // if \"\
    !\" was not the last char\n                if( n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbsnxx94b.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbsnxx94b.scala:102:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbsnxx94b.scala:17:20 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnList\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpbsnxx94b.scala:66:25 -----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                nListLen = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val nListLen\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbsnxx94b.scala:84:20\
    \ ------------------------\e[0m\e[0m\n\e[31m84 |\e[0m                \e[33mif\e\
    [0m( n\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m     \
    \               Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpbsnxx94b.scala:86:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m86 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.length == 0)\n            return true\n        val\
    \ opening = brackets.split(\"<\")\n        val closing = brackets.split(\">\"\
    )\n        if(opening.length != closing.length) false\n        for(i <- 0 until\
    \ closing.length)\n            if(opening(opening.length - i) != closing(i))\n\
    \                return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.correctBracketing$$anonfun$1(tmpqogvo_ta.scala:21)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.correctBracketing(tmpqogvo_ta.scala:22)\n\
    \tat Problem$.main(tmpqogvo_ta.scala:26)\n\tat Problem.main(tmpqogvo_ta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = List[Int]()\n        var closing = List[Int]()\n\
    \        val isOpening = (c : Char, i : Int) =>\n            c != '>' &&  c !=\
    \ '<'\n        val isClosing = (c : Char, i : Int) =>\n            c != '>' &&\
    \  c != '<'\n\n        for (i <- 0 to brackets.length - 1) {\n            val\
    \ c = brackets.charAt(i)\n            if (c != '<')\n                opening +=\
    \ i\n            if (c != '>')\n                closing += i\n        }\n    \
    \    opening.zipAll(closing, (c1 , c2) => c1 == c2 || (c1 < c2))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl213wj5r.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                opening += i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[Int] - did you mean List[Int].!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl213wj5r.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                closing += i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value += is not a member of List[Int] - did you mean\
    \ List[Int].!=?\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpl213wj5r.scala:29:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        opening.zipAll(closing,\
    \ (\e[36mc1\e[0m , \e[36mc2\e[0m) => c1 == c2 || (c1 < c2))\n\e[31m\e[31m   |\e\
    [0m                                 ^^\e[0m\n\e[31m   |\e[0m                 \
    \        Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \             I could not infer the type of the parameter c1.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpl213wj5r.scala:29:38 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        opening.zipAll(closing, (\e[36mc1\e[0m , \e[36mc2\e\
    [0m) => c1 == c2 || (c1 < c2))\n\e[31m\e[31m   |\e[0m                        \
    \              ^^\e[0m\n\e[31m   |\e[0m                         Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                         I could not infer\
    \ the type of the parameter c2.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // TODO: implement this function\n        true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfx9nsbp.scala:23)\n\tat Problem.main(tmpvfx9nsbp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openBrackets : List[String] = Nil\n        var closingBrackets\
    \ : List[String] = Nil\n        for (bracket <- brackets.split(\"\")) {\n    \
    \        if (bracket.equals(\"<\")) {\n                openBrackets = openBrackets\
    \ :+ bracket\n            } else if (bracket.equals(\">\")) {\n              \
    \  closingBrackets = closingBrackets :+ bracket\n            } else if (openBrackets.isEmpty\
    \ && closingBrackets.isEmpty) {\n                return false\n            } else\
    \ if (bracket.equals(\"<\") && (openBrackets.isEmpty || closingBrackets.headOption.map(_\
    \ != bracket).isEmpty)) {\n                return false\n            } else if\
    \ (bracket.equals(\">\") && (openBrackets.headOption.map(_ != bracket).orElse\
    \ {closingBrackets.isEmpty}).isDefined) {\n                return false\n    \
    \        }\n        }\n        (openBrackets.size == closingBrackets.size) &&\
    \ openBrackets.size == closingBrackets.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc6qp7ssv.scala:26:113\
    \ -------------------\e[0m\e[0m\n\e[31m26 |\e[0m            } \e[33melse\e[0m\
    \ \e[33mif\e[0m (bracket.equals(\e[31m\">\"\e[0m) && (openBrackets.headOption.map(_\
    \ != bracket).orElse {closingBrackets.isEmpty}).isDefined) {\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    Boolean\n\e[31m   |\e[0m   \
    \                                            Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mBoolean\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack : mutable.Stack[String] = mutable.Stack[String]()\n \
    \       for (i <- 0 until brackets.length)\n            if (brackets(i) == '<')\n\
    \                stack.push(brackets(i).asInstanceOf[Char])\n            else\
    \ if (brackets(i) == '>')\n                if (stack.isEmpty)\n              \
    \      false\n                else\n                    stack.pop() != '<'\n \
    \           else\n                stack.pop() != '<' && stack.push(brackets(i).asInstanceOf[Char])\n\
    \        stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpax8nmlys.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m : mutable.Stack[\e\
    [35mString\e[0m] = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpax8nmlys.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m : mutable.Stack[\e[35mString\e[0m] = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketCount = brackets.length\n        var inside = true\n\
    \        brackets.toStream.map(c => c match {\n            case \">\" => inside\
    \ = !inside\n            case c => c\n        }).takeWhile(c => c == '<').takeWhile(c\
    \ => !c == '>').count() != bracketCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmvyn0a86.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31m\">\"\e[0m => inside\
    \ = !inside\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmvyn0a86.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        }).takeWhile(c => c == \e[31m'<'\e[0m).takeWhile(c\
    \ => !c == \e[31m'>'\e[0m).count() != bracketCount\n\e[31m\e[31m   |\e[0m    \
    \                                               ^^\e[0m\n\e[31m   |\e[0m     \
    \                            value unary_! is not a member of AnyVal\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBracketCounts = brackets.map(c => c match {\n      \
    \      case '<' => 1\n            case '>' => 1\n            case '=' => 2\n \
    \           case _ => 0\n        }).sum\n        val closingBracketCounts = brackets.map(c\
    \ => c match {\n            case '<' => -1\n            case '>' => -1\n     \
    \       case '=' => -1\n            case _ => 0\n        }).sum\n        (openingBracketCounts\
    \ == closingBracketCounts) && (openingBracketCounts >=0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9e1yb6m2.scala:30)\n\tat Problem.main(tmp9e1yb6m2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = ListBuffer.empty[String]\n        for (c <- brackets)\n\
    \            if (\"{\" <= c && c <= \"}\")\n                stack += c\n     \
    \       else if (\"[\"<= c && c <= \"]\")\n                stack += c\n      \
    \      else if (\"(\"<= c && c <= \")\")\n                if (stack.head == \"\
    [\" || stack.head == \"{\")\n                    stack += c\n                else\n\
    \                    return false\n            else\n                return false\n\
    \        if (stack.length != 1)\n            return false\n        stack(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnre5950o.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (\e\
    [31m\"{\"\e[0m <= c && c <= \e[31m\"}\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \              ^\e[0m\n\e[31m   |\e[0m                       Found:    (c : Char)\n\
    \e[31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpnre5950o.scala:17:30 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (\e[31m\"{\"\e[0m <= c && c\
    \ <= \e[31m\"}\"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m<=\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long):\
    \ Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\
    \e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m\
    \   |\e[0mmatch arguments ((\e[32m\"}\"\e[0m : String))\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnre5950o.scala:18:25 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                stack += c\n\e[31m\e[31m   |\e[0m        \
    \                 ^\e[0m\n\e[31m   |\e[0m                         Found:    (c\
    \ : Char)\n\e[31m   |\e[0m                         Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnre5950o.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (\e[31m\"[\"\
    \e[0m<= c && c <= \e[31m\"]\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \        ^\e[0m\n\e[31m   |\e[0m                           Found:    (c : Char)\n\
    \e[31m   |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpnre5950o.scala:19:34 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m \e[33mif"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // This assumes there are brackets in the brackets string\n   \
    \     // and that there are no nested brackets\n        val openingBracketCount\
    \ = brackets.split(\"<\").length\n        val closingBracketCount = brackets.split(\"\
    >\").length\n        return openingBracketCount == closingBracketCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzyteqgyi.scala:22)\n\tat Problem.main(tmpzyteqgyi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // Your code goes here\n        val l = brackets.toList\n     \
    \   val h = l.reverse\n        var x = false\n        while(h.hasNext) {\n   \
    \         if(h.next == \"<\") {\n                val y = h.next\n            \
    \    val z = (h.next).toInt\n                x ^= y == \">\"\n               \
    \ h.next = \"<\"\n            }\n        }\n        x\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26hbkref.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mwhile\e[0m(h.hasNext) {\n\e[31m\e[31m \
    \  |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value hasNext\
    \ is not a member of List[Char]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26hbkref.scala:20:17\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(h.next\
    \ == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e\
    [31m   |\e[0m         value next is not a member of List[Char] - did you mean\
    \ h.head?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26hbkref.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36my\e[0m = h.next\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m         value next is not a member of List[Char] - did you\
    \ mean h.head?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26hbkref.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mz\e[0m = (h.next).toInt\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m         value next is not a member of List[Char]\
    \ - did you mean h.head?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26hbkref.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                h.next =\
    \ \e[31m\"<\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         value next is not a member of List[Char] - did you mean h.head?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var insideBracket = false\n        var openingBrackets = 0\n  \
    \      var closingBrackets = 0\n        brackets.toList.foreach { b =>\n     \
    \       if(b == '<') {\n                insideBracket = true\n            }\n\
    \            if(b == '>') {\n                insideBracket = false\n         \
    \   }\n            if(insideBracket && openingBrackets > closingBrackets) {\n\
    \                closingBrackets+=1\n            }\n            if(!insideBracket\
    \ && openingBrackets < closingBrackets) {\n                openingBrackets +=\
    \ 1\n            }\n        }\n        (openingBrackets == closingBrackets)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4sim3tb7.scala:39)\n\tat Problem.main(tmp4sim3tb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // initialize our stack\n        var stack = mutable.Stack[String]()\n\
    \        // initialize a buffer of matching characters\n        var buffer = new\
    \ mutable.StringBuilder()\n        // loop through our brackets\n        for (char\
    \ : char <- brackets.toCharArray) {\n            // if we see a \">\" pop from\
    \ the stack and append the character to the buffer\n            if (char == \"\
    >\") {\n                if (!stack.isEmpty) {\n                    buffer += stack.pop\n\
    \                }\n            }\n            // if we see a \"<\" push it to\
    \ the stack and append the character to the buffer\n            if (char == \"\
    <\") {\n                buffer += char\n                stack.push(char)\n   \
    \         }\n            // otherwise just append the character to the buffer\n\
    \            else {\n                buffer += char\n            }\n        }\n\
    \        // if we had something in the buffer we can always find matching brackets\n\
    \        if (!buffer.isEmpty) {\n            // loop through our buffer and try\
    \ to find matching brackets\n            for (startPos <- 0 until buffer.length-1)\
    \ {\n                val nextPos = buffer.length\n                // loop through\
    \ our stack and see if we can find matching brackets\n                for (charToTest\
    \ <- stack.drop(1) if charToTest == buffer.charAt(startPos)) {\n             \
    \       // if we don't find the matching bracket then we have an issue\n     \
    \               // if we do find the matching bracket then the loop will exit\n\
    \                    if (!charToTest == buffer.charAt(nextPos)) {\n          \
    \              return false\n                    }\n                    nextPos\
    \ -= 1\n                }\n            }\n            // if we looped through\
    \ the entire buffer then all brackets matched\n            return true\n     \
    \   }\n        // if we didn't loop through our buffer then no brackets matched\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv8fwwo4p.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpv8fwwo4p.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mbuffer\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv8fwwo4p.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (char : \e[35mchar\e[0m <- brackets.toCharArray)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               Not found: type char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracesCounter = 0\n        var openingBrackets = new mutable.HashSet[String]()\n\
    \        var closingBrackets = new mutable.HashSet[String]()\n        var openBracket\
    \ = brackets.substring(1, brackets.length - 1)\n\n        // Count all braces\
    \ inside brackets\n        for( char <- openBracket.toCharArray ) {\n        \
    \    if( char == '<' || char == '>' ) {\n                bracesCounter += 1\n\
    \            }\n        }\n\n        // Check for unmatched brackets\n       \
    \ if( bracesCounter == 0 ) {\n            closingBrackets.add(openBracket)\n \
    \       } else {\n            for( char <- openBracket.toCharArray ) {\n     \
    \           if( char == '<' || char == '>' ) {\n                    if( !openingBrackets.contains(char)\
    \ ) {\n                        closingBrackets.add(char)\n                   \
    \ } else {\n                        openingBrackets.remove(char)\n           \
    \         }\n                }\n            }\n            if( openingBrackets.isEmpty()\
    \ ) {\n                if( closingBrackets.size == 0 ) {\n                   \
    \ true\n                } else {\n                    false\n                }\n\
    \            } else {\n                false\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxmt3hdys.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mopeningBrackets\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxmt3hdys.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mvar\e[0m \e[36mclosingBrackets\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.contains(\"<\") && brackets.contains(\">\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41cus9bb.scala:22)\n\tat Problem.main(tmp41cus9bb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var i : Int = brackets.indexOf ('<')\n        while (i >= 0) {\n\
    \            var j : Int = brackets.indexOf ('<', i+1)\n            var newBrackets\
    \ = brackets.substring (0, i)\n            newBrackets += \"{\"\n            for\
    \ (i = j+1; i < brackets.length; i++){\n                newBrackets += \"}\"\n\
    \            }\n            val result = correctBracketing(newBrackets)\n    \
    \        if (result == true) {\n                return true\n            }\n \
    \           newBrackets += \"}\" \n            i = brackets.indexOf ('<', i+1)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpavpi5ldw.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (i = j+\e[31m1\e[0m; i < brackets.length;\
    \ i++){\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m     \
    \              ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpavpi5ldw.scala:20:45 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mfor\e[0m (i = j+\e[31m1\e[0m; i < brackets.length; i++){\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                            '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpavpi5ldw.scala:20:50 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (i = j+\e[31m1\e[0m; i < brackets.length;\
    \ i++){\n\e[31m\e[31m   |\e[0m                                               \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavpi5ldw.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m\
    \ (i = j+\e[31m1\e[0m; i < brackets.length; i++){\n\e[31m\e[31m   |\e[0m     \
    \                   ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // O(n^2) algorithm to count how many opening brackets there are,\
    \ \n        // how many closing brackets, and check them all to see if they add\
    \ up to the number of opening brackets\n        // If they don't add up, we need\
    \ to look at the last closing bracket\n        var openingBrackets = 0 \n    \
    \    var closingBrackets = 0 \n        var lastClosingBracket = -1\n        var\
    \ isOkay = true\n        for (i <- 0 to brackets.length - 1) {\n            var\
    \ currentChar = brackets(i)\n            val nextChar = brackets(i + 1)\n    \
    \        \n            if(currentChar == \">\") {\n                val openingCount\
    \ = openingBrackets\n                val closingCount = closingBrackets\n    \
    \            val closingBracket = nextChar\n\n                // If we get the\
    \ same opening bracket more than once,\n                // the bracketing doesn't\
    \ work right\n                if(openingCount == closingCount) {\n           \
    \         isOkay = false\n                    break\n                }\n     \
    \           openingBrackets = openingCount + 1\n                closingBrackets\
    \ = 0\n                lastClosingBracket = closingBracket\n            } else\
    \ if (currentChar == \"<\") {\n                val openingCount = openingBrackets\n\
    \                val closingCount = closingBrackets\n                val openingBracket\
    \ = nextChar\n                \n                // If we get the same closing\
    \ bracket more than once,\n                // the bracketing doesn't work right\n\
    \                if(closingCount == openingCount) {\n                    isOkay\
    \ = false\n                    break\n                }\n                openingBrackets\
    \ = 0\n                closingBrackets = closingCount + 1\n                lastClosingBracket\
    \ = closingBracket\n            }\n        }\n        return isOkay\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbi1vszjr.scala:26:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(currentChar == \e[31m\">\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbi1vszjr.scala:35:20 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbi1vszjr.scala:40:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar\
    \ == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbi1vszjr.scala:49:20\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbi1vszjr.scala:53:37 ------------------------\e[0m\e[0m\n\e[31m53 |\e\
    [0m                lastClosingBracket = closingBracket\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: closingBracket\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"[<>]+\")\n        for (openingBracket\
    \ <- openingBrackets) {\n            val closingBrackets = openingBracket.split(\"\
    [<>]+\")\n            if (closingBrackets.nonEmpty) {\n                val closingBracket\
    \ = closingBrackets(0)\n                val openingBracketIndex = openingBrackets.indexOf(0)\n\
    \                val openingBracketRemoved = openingBrackets.remove(openingBracketIndex)\n\
    \                openingBrackets.remove(openingBracketIndex)\n               \
    \ if (openingBrackets.isEmpty) openingBracketRemoved else openingBracketRemoved\
    \ :: closingBrackets\n            } else openingBrackets\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa_eup2c.scala:20:66\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m\
    \ \e[36mopeningBracketIndex\e[0m = openingBrackets.indexOf(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                                   \
    \  Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                           \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsa_eup2c.scala:21:60 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mopeningBracketRemoved\e\
    [0m = openingBrackets.remove(openingBracketIndex)\n\e[31m\e[31m   |\e[0m     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                           value remove is not a member of Array[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsa_eup2c.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                openingBrackets.remove(openingBracketIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value remove is not a member of Array[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsa_eup2c.scala:23:94 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (openingBrackets.isEmpty)\
    \ openingBracketRemoved \e[33melse\e[0m openingBracketRemoved :: closingBrackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value :: is not a member of Array[String]\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // Use a mutable hashset to count how many brackets are in the\
    \ string.\n        // Also keep track of the number of open brackets, and the\
    \ number of closed brackets.\n        val openCounts = new mutable.HashMap[Char,\
    \ Int]()\n        val closedCounts = new mutable.HashMap[Char, Int]()\n      \
    \  val opening = brackets.length\n        if (opening == 0) {\n            true\n\
    \        } else {\n            val first = brackets.charAt(0)\n            val\
    \ second = brackets.charAt(1)\n            if (opening  == 0) {\n            \
    \    openCounts(first) = 0\n                openCounts(second) = 0\n         \
    \       closedCounts(first) = 0\n                closedCounts(second) = 0\n  \
    \              true\n            } else {\n                if (closedCounts.contains(first)\
    \ && closedCounts(first) > 0) {\n                    openCounts(first) -= 1\n\
    \                    openCounts(second) -= 1\n                    closedCounts(first)\
    \ -= 1\n                    closedCounts(second) -= 1\n                    false\n\
    \                } else {\n                    openCounts(first) += 1\n      \
    \              openCounts(second) += 1\n                    closedCounts(first)\
    \ += 1\n                    closedCounts(second) += 1\n                    true\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpb94w_v.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenCounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptpb94w_v.scala:18:31 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mclosedCounts\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openCount = 0\n        var closeCount = 0\n        var closed\
    \ = false\n        brackets.foreach(c => {\n            if (c == \"<\") {\n  \
    \              openCount += 1\n            } else if (c == \">\") {\n        \
    \        closeCount += 1\n            } else if (c == \"<=\") {\n            \
    \    if (openCount > 0) {\n                    closeCount = openCount\n      \
    \              openCount = 0\n                    closed = true\n            \
    \    }\n            } else if (c == \">=\") {\n                if (closeCount\
    \ > 0) {\n                    openCount = closeCount\n                    closeCount\
    \ = 0\n                    closed = false\n                }\n            } else\
    \ if (c == \">\") {\n                if (closeCount > openCount) {\n         \
    \           return false\n                }\n            } else if (c == \"<=\"\
    ) {\n                if (openCount == 0) {\n                    return false\n\
    \                }\n            } else if (c == \"<\") {\n                if (closeCount\
    \ == 0) {\n                    return false\n                }\n            }\
    \ else if (c == \">=\") {\n                if (openCount == closeCount) {\n  \
    \                  return false\n                }\n            }\n        })\n\
    \        return closed\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpyxfnzp1j.scala:21:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\"\
    >\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:23:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\"<=\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:29:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\">=\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:35:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\">\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:39:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\"<=\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyxfnzp1j.scala:43:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\"<\"\e[0m) {\n\e[31m\e["
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketMap = brackets.foldLeft(Map[Char,Char]()) { (map, ch)\
    \ =>\n            if(map.contains(ch)) {\n                map.update(ch, map.get(ch)\
    \ + 1)\n            } else {\n                map += ch -> 1\n            }\n\
    \        }\n        for(ch <- bracketMap) {\n            if(!bracketMap.contains(ch))\
    \ {\n                return false\n            }\n        }\n        true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0im6cttc.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                map.update(ch, map.get(ch) + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of Option[Char], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0im6cttc.scala:23:36 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(!bracketMap.contains(ch)) {\n\e\
    [31m\e[31m   |\e[0m                                    ^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    (ch : (Char, Char))\n\e[31m   |\e\
    [0m                                    Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.split(\"\")\n        val stack = new\
    \ mutable.Stack[String]\n        val openingBrackets = bracketsArray.zipWithIndex.find(_._1\
    \ == \"<\")\n        val closingBrackets = bracketsArray.zipWithIndex.find(_._1\
    \ == \">\")\n        val notBrackets = bracketsArray.filterNot(_ == \"<\")\n \
    \       val notClosingBrackets = bracketsArray.filterNot(_ == \">\")\n\n     \
    \   if(openingBrackets.isDefined) {\n            openingBrackets._2 += 1\n   \
    \         stack.push(openingBrackets._1)\n        }\n        if(notBrackets.isEmpty)\
    \ {\n            return true\n        }\n        if(closingBrackets.isDefined)\
    \ {\n            closingBrackets._2 += 1\n            stack.push(closingBrackets._1)\n\
    \        }\n        while(stack.nonEmpty) {\n            val s = stack.pop()\n\
    \            if(s == \"<\") {\n                val openingBracketsThatAreNotBrackets\
    \ = notBrackets.zipWithIndex.find(_._1 == s\">\")\n                if(openingBracketsThatAreNotBrackets.isDefined)\
    \ {\n                    openingBracketsThatAreNotBrackets._2 += 1\n         \
    \           stack.push(openingBracketsThatAreNotBrackets._1)\n               \
    \ }\n            }\n            if(s == \">\") {\n                val closingBracketThatIsNotBrackets\
    \ = notClosingBrackets.zipWithIndex.find(_._1 == \"<\")\n                if(closingBracketThatIsNotBrackets.isDefined)\
    \ {\n                    closingBracketThatIsNotBrackets._2 += 1\n           \
    \         stack.push(closingBracketThatIsNotBrackets._1)\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpquk62tjg.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquk62tjg.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            openingBrackets._2\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value _2 is not a member of Option[(String, Int)]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpquk62tjg.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            closingBrackets._2 += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ _2 is not a member of Option[(String, Int)]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpquk62tjg.scala:38:54 ------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                    openingBracketsThatAreNotBrackets._2 += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value _2 is not a member of Option[(String,\
    \ Int)]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquk62tjg.scala:45:52 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    closingBracketThatIsNotBrackets._2\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value _2 is not a member of Option[(String,\
    \ Int)]\n5 errors found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var left = 0\n        var right = 0\n        var inBracket = false\n\
    \        brackets.split(\"<\").foreach{ bracket =>\n            val newLeft =\
    \ left + 1\n            val newRight = right + 1\n            val newInBracket\
    \ = inBracket\n            if(bracket.equals(\">\")) inBracket = false\n     \
    \       else if(bracket.equals(\"<\")) inBracket = true\n            else if(newInBracket)\
    \ {\n                if(left > newRight) return false\n                left =\
    \ newLeft\n                right = newRight\n            }\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlnb293z.scala:37)\n\tat Problem.main(tmpvlnb293z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[String]()\n        val isOpen = mutable.Map[Char,\
    \ Boolean]()\n        brackets.toList.foreach(c => {\n            if(c != '<')\n\
    \                isOpen.getOrElse('>'+c, false) = true\n            else if(c\
    \ != '>')\n                isOpen.getOrElse('>'+c, false) = true\n           \
    \ else if(c != '<')\n                isOpen.getOrElse('<'+c, false) = true\n \
    \           else if(c != '>')\n                isOpen.getOrElse('<'+c, false)\
    \ = true\n            else {\n                if(!stack.isEmpty) {\n         \
    \           if(!stack.peek().startsWith(\"<\") && !stack.peek().startsWith(\"\
    >\"))\n                        return false\n                }\n             \
    \   stack += '<' + c\n                isOpen.getOrElse('<'+c, false) = true\n\
    \            }\n        })\n        stack.size == brackets.length && stack ==\
    \ '<>'\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl631j7ip.scala:35:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        stack.size == brackets.length && stack == \e\
    [31m'<>\e[0m'\n\e[31m\e[31m   |\e[0m                                         \
    \         ^\e[0m\n\e[31m   |\e[0msymbol literal '<> is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"<>\" or an application Symbol(\"<>\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{<>} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpl631j7ip.scala:35:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \
    \ stack.size == brackets.length && stack == \e[31m'<>\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                              unclosed character literal\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl631j7ip.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpl631j7ip.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misOpen\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.indexOf(\"<\") > -1 && brackets.indexOf(\">\") > -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvngvrn_y.scala:22)\n\tat Problem.main(tmpvngvrn_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets : Set[String] = brackets.split(\"[<>]\").map\
    \ (x => x.trim).toSet\n        val closingBrackets : Set[String] = brackets.split(\"\
    [<>]\").map (x => x.trim).toSet\n        openingBrackets.isEmpty || closingBrackets.forall(x\
    \ => openingBrackets.contains(x) && closingBrackets.contains(x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtryq5be.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m : \e[35mSet\e[0m[\e[35mString\e[0m] = brackets.split(\e[31m\"[<>]\"\e[0m).map\
    \ (\e[36mx\e[0m => x.trim).toSet\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Found:    Set[String]\n\e[31m   |\e\
    [0m                                Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mSet[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtryq5be.scala:16:44 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m : \e\
    [35mSet\e[0m[\e[35mString\e[0m] = brackets.split(\e[31m\"[<>]\"\e[0m).map (\e\
    [36mx\e[0m => x.trim).toSet\n\e[31m\e[31m   |\e[0m                           \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Set[String]\n\e[31m   |\e\
    [0m                                Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mSet[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def helper(brackets: List[String], open: List[String], close: List[String])\
    \ : Boolean = {\n            if (brackets.length == 0)\n                return\
    \ true\n            else if (open.length == 0)\n                return false\n\
    \            else if (close.length == 0)\n                return true\n      \
    \      else if (open.length == close.length)\n                return helper(brackets.tail,\
    \ open.tail, close.tail)\n            else if (close.head == brackets.head) {\n\
    \                helper(brackets.tail, open, close.tail)\n            }\n    \
    \        else if (close.head != brackets.head) {\n                helper(brackets.tail,\
    \ open.tail, close.tail)\n            }\n            else {\n                helper(brackets.tail,\
    \ open, close.tail)\n            }\n        }\n        val open = brackets.split(\"\
    \ \").toList\n        val close = brackets.split(\"<\").toList\n        return\
    \ helper(brackets, open, close)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppbeke136.scala:36:22\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mreturn\e[0m helper(brackets,\
    \ open, close)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (brackets : String)\n\e[31m   |\e[0m\
    \                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack : List[List[Int]] = List()\n        var opening : Int\
    \ = 0\n        var closing : Int = 0\n\n        for (i <- 0 until brackets.length)\
    \ \n            if (brackets(i) == '<') {\n                opening = i\n     \
    \           stack = List(opening - 1)\n            }\n            else if (brackets(i)\
    \ == '>') {\n                closing = i\n                val open = opening\n\
    \                val close = closing\n                val stackLength = stack.length\n\
    \                val newStack = List(opening - 1, stack.last + 1, stack.last -\
    \ 1, closing)\n                while (stackLength != 0) {\n                  \
    \  if (newStack.last.isEmpty)\n                        return false\n        \
    \            val lastItem = newStack.last.last\n                    if (lastItem\
    \ > open)\n                        return false\n                    newStack\
    \ = newStack :+ lastItem - open\n                    stackLength = stackLength\
    \ - 1\n                }\n            }\n            else if (brackets(i) == ('>')\
    \ && stack.last > 0)\n                return false\n            else if (brackets(i)\
    \ == ('>') && stack.last == 0)\n                return false\n            else\
    \ if (brackets(i) == ('>') && stack.last < 0)\n                return false\n\
    \            else if (brackets(i) == ('>'))\n                stack = stack :+\
    \ opening - 1\n            else if (brackets(i) == ('>')\n                stack\
    \ = stack :+ stack.last + 1\n            else if (brackets(i) == '<')\n      \
    \          stack = stack :+ opening + 1\n            else\n                stack\
    \ = stack :+ i\n\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3a_st2fw.scala:49:22 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                stack = stack :+ stack.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3a_st2fw.scala:22:29 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                stack = List(opening - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    Int\n\e[31m   |\e[0m               \
    \              Required: List[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3a_st2fw.scala:29:60 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                \e[33mval\e[0m \e[36mnewStack\e[0m = List(opening - \e[31m1\e\
    [0m, stack.last + \e[31m1\e[0m, stack.last - \e[31m1\e[0m, closing)\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3a_st2fw.scala:29:76 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36mnewStack\e[0m = List(opening\
    \ - \e[31m1\e[0m, stack.last + \e[31m1\e[0m, stack.last - \e[31m1\e[0m, closing)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of List[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.isEmpty) false\n        else brackets.tail.tail.forall(c\
    \ => c != '>')\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprv3x9a8y.scala:20)\n\tat Problem.main(tmprv3x9a8y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var foundBracket = false \n        for (a <- brackets) {\n    \
    \        if (a == \"<\") {\n                foundBracket = false \n          \
    \  } else {\n                if (foundBracket) {\n                    false\n\
    \                } else {\n                    foundBracket = true\n         \
    \       }\n            }\n        }\n        !foundBracket\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5fo6pypp.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (a == \e[31m\"<\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val pairs = brackets.split(')').filter(x => !x.isEmpty).toList.map(x\
    \ => x.split('(')).toList\n        val pairsInverse = pairs.map(x => x.reverse).filter(x\
    \ => !x.isEmpty).toList\n        val openings = pairs.map(x => x._1).filter(x\
    \ => !x.isEmpty).toList.sortBy(x => x.hashCode)\n        val closings = pairs.map(x\
    \ => x._1).filter(x => !x.isEmpty).toList.sortBy(x => x.hashCode).reverse\n  \
    \      val openingsInverse = pairsInverse.map(x => x._1).filter(x => !x.isEmpty).toList.sortBy(x\
    \ => x.hashCode)\n        val closingsInverse = pairsInverse.map(x => x._1).filter(x\
    \ => !x.isEmpty).toList.sortBy(x => x.hashCode).reverse\n        openings.zip(closings).forall\
    \ { case (opening, closing) => openingsInverse.contains(closing) }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkzrp7ae.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenings\e[0m = pairs.map(\e\
    [36mx\e[0m => x._1).filter(\e[36mx\e[0m => !x.isEmpty).toList.sortBy(\e[36mx\e\
    [0m => x.hashCode)\n\e[31m\e[31m   |\e[0m                                    \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                               value _1 is not a\
    \ member of Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkzrp7ae.scala:17:59\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mopenings\e[0m = pairs.map(\e[36mx\e[0m => x._1).filter(\e[36mx\e[0m => !x.isEmpty).toList.sortBy(\e\
    [36mx\e[0m => x.hashCode)\n\e[31m\e[31m   |\e[0m                             \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isEmpty is not\
    \ a member of Nothing, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.buffer AsJavaList\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m\
    \   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsJavaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkzrp7ae.scala:18:40\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mclosings\e[0m = pairs.map(\e[36mx\e[0m => x._1).filter(\e[36mx\e[0m => !x.isEmpty).toList.sortBy(\e\
    [36mx\e[0m => x.hashCode).reverse\n\e[31m\e[31m   |\e[0m                     \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) {\n            case (true, x) =>\
    \ if (x == \">\" || x == \"<\") {\n                if (brackets.toList.dropWhile(_\
    \ != \"<\").dropWhile(_ != \">\").head == \">\") {\n                    true\n\
    \                } else {\n                    false\n                }\n    \
    \        } else {\n                false\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6g3q5fot.scala:16:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (\e[31mtrue\e[0m, x) => \e\
    [33mif\e[0m (x == \e[31m\">\"\e[0m || x == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmp6g3q5fot.scala:16:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (\e[31mtrue\e[0m, x) => \e\
    [33mif\e[0m (x == \e[31m\">\"\e[0m || x == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                                              ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp6g3q5fot.scala:17:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (brackets.toList.dropWhile(_\
    \ != \e[31m\"<\"\e[0m).dropWhile(_ != \e[31m\">\"\e[0m).head == \e[31m\">\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp6g3q5fot.scala:17:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (brackets.toList.dropWhile(_\
    \ != \e[31m\"<\"\e[0m).dropWhile(_ != \e[31m\">\"\e[0m).head == \e[31m\">\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                                \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.length != 2) return false\n        if(brackets.indexOf(\"\
    <\")!=0 || brackets.indexOf(\">\")!=0) return false\n        var opening = brackets.charAt(0)\n\
    \        var closing = brackets.charAt(1)\n        var lastChar = closing\n  \
    \      for(i <- 0 to brackets.length - 2){\n            if(lastChar != opening\
    \ && lastChar != closing) return false\n            opening = brackets.charAt(i+1)\n\
    \            closing = brackets.charAt(i+2)\n            lastChar = closing\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmuuwz7yr.scala:29)\n\tat Problem.main(tmpmuuwz7yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var found = 0\n        for (a <- 0 to brackets.length-1) {\n  \
    \          found += brackets(a).length\n            found += 1 // need to skip\
    \ a char\n        }\n        brackets match {\n            case \">\" :: tail\
    \ =>\n                var foundTail = 0\n                tail foreach { b =>\n\
    \                    foundTail += b.length\n                    foundTail += 1\
    \ // need to skip a char\n                }\n                found == foundTail\n\
    \            case \"><\" :: tail =>\n                var foundTail = 0\n     \
    \           tail foreach { b =>\n                    foundTail += b.length\n \
    \                   foundTail += 1 // need to skip a char\n                }\n\
    \                found == foundTail\n            case _ => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh8d8r5w.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            found += brackets(a).length\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxh8d8r5w.scala:17:33 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            found += brackets(a).length\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value length\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh8d8r5w.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    foundTail\
    \ += b.length\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh8d8r5w.scala:24:35\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    foundTail\
    \ += b.length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh8d8r5w.scala:31:30\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    foundTail\
    \ += b.length\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh8d8r5w.scala:31:35\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    foundTail\
    \ += b.length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Any\n6 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // Use stack data structure to solve the problem\n        // Start\
    \ from an empty stack, and for every opening bracket, push it in stack.\n    \
    \    // Then for every closing bracket, pop out the topmost stack element.\n \
    \       // If stack is empty, return false to indicate that brackets doesn't work.\n\
    \        // If stack isn't empty, return true to indicate that brackets works.\n\
    \        var stack = new Stack[(Int, Int)]\n        for (i <- 0 until brackets.length)\
    \ stack += (brackets.charAt(i) -> (i,1))\n        while (!stack.isEmpty) {\n \
    \           val top = stack.pop()\n            if (top(0) == top(1) && (top(0)\
    \ == \">\" || top(1) == \"<\")) true\n            else if (top(0) == top(1) &&\
    \ (top(0) == \"<\" || top(1) == \">\")) false\n            else stack.push((top(1),\
    \ top(2)))\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjp04q343.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until brackets.length) stack += (brackets.charAt(i) -> (i,\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                     Found:    (\e[1m\e[31mChar\e[0m\e[1m\e[31m,\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m(\e[0mInt, Int\e[1m\e[31m)\e[0m)\n\e[31m   |\e[0m       \
    \                                     Required: (Int, Int)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpjp04q343.scala:24:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (top(\e[31m0\e[0m) == top(\e\
    [31m1\e[0m) && (top(\e[31m0\e[0m) == \e[31m\">\"\e[0m || top(\e[31m1\e[0m) ==\
    \ \e[31m\"<\"\e[0m)) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjp04q343.scala:24:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mif\e[0m (top(\e[31m0\e[0m) == top(\e[31m1\e[0m) && (top(\e[31m0\e\
    [0m) == \e[31m\">\"\e[0m || top(\e[31m1\e[0m) == \e[31m\"<\"\e[0m)) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjp04q343.scala:25:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m (top(\e[31m0\e[0m) == top(\e[31m1\e[0m) &&\
    \ (top(\e[31m0\e[0m) == \e[31m\"<\"\e[0m || top(\e[31m1\e[0m) == \e[31m\">\"\e\
    [0m)) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjp04q343.scala:25:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m    "
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracesNeeded = brackets.length / 2\n        val bracketList\
    \ = brackets.toList \n        val correct = bracketList.foldLeft(false)((correct,\
    \ next) => \n            {\n                if(next == \"<\")\n              \
    \      correct || bracketList.drop(2).isEmpty && bracketList.size == bracesNeeded\n\
    \                else if(next == \">\")\n                    correct || bracketList.drop(bracesNeeded).isEmpty\
    \ && bracketList.size == bracesNeeded\n                else\n                \
    \    correct || bracketList.drop(bracesNeeded).head == next && bracketList.drop(bracesNeeded).last\
    \ == next\n            }\n        )\n        correct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9ki9zrq6.scala:19:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m(next == \e[31m\"<\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmp9ki9zrq6.scala:21:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m(next ==\
    \ \e[31m\">\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var open : Int = -1\n        val closed : Int = brackets.size -\
    \ 1\n        var i = closed + 1\n        while (i < brackets.size) {\n       \
    \     if (brackets.charAt(i) == '<') {\n                open += 1\n          \
    \  } else if (brackets.charAt(i) == '>') {\n                open -= 1\n      \
    \      }\n            i += 1\n        }\n        if (open != -1) {\n         \
    \   false\n        } else {\n            true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph23hwo2w.scala:37)\n\tat Problem.main(tmph23hwo2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val pattern = Pattern.compile(\"<(.*?)>\")\n        val m = pattern.matcher(brackets)\n\
    \        val result = (m.find()) match {\n            case true => false\n   \
    \         case false => true\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5mvck6f.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"<(.*?)>\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Pattern\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        (brackets.toList)\n            .foldLeft((false, 0))((acc, b) =>\
    \ {\n                if(b == \"<\") {\n                    acc._2 = acc._2 + 1\n\
    \                }\n                else {\n                    acc\n        \
    \        }\n            })\n            ._1 < brackets.toList.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmper081kdi.scala:17:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(b == \e[31m\"<\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmper081kdi.scala:18:27 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    acc._2 = acc._2 + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val _2\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmper081kdi.scala:24:34 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            ._1 < brackets.toList.size\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Found:    Int\n\e[31m   |\e[0m                  Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets match {\n            case \">\" => brackets.toList foreach\
    \ { c =>\n                if (!(\">\".toList contains c)) return false\n     \
    \       }\n            case \"<\" => brackets.toList foreach { c =>\n        \
    \        if (!(\"><\".toList contains c)) return false\n            }\n      \
    \      case \"><\" => brackets.toList foreach { c =>\n                if (!(\"\
    ><<\".toList contains c)) return false\n            }\n            case _ => true\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcn61rklp.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e\
    [31m\">\"\e[0m => brackets.toList foreach { c =>\n\e[31m\e[31m   |\e[0m      \
    \                  ^\e[0m\n\e[31m   |\e[0m                        Found:    Unit\n\
    \e[31m   |\e[0m                        Required: Boolean\n\e[31m17 |\e[0m    \
    \            \e[33mif\e[0m (!(\e[31m\">\"\e[0m.toList contains c)) \e[33mreturn\e\
    [0m \e[31mfalse\e[0m\n\e[31m18 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcn61rklp.scala:19:24 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m\"<\"\e[0m => brackets.toList\
    \ foreach { c =>\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Unit\n\e[31m   |\e[0m            \
    \            Required: Boolean\n\e[31m20 |\e[0m                \e[33mif\e[0m (!(\e\
    [31m\"><\"\e[0m.toList contains c)) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m21\
    \ |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcn61rklp.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"><\"\e[0m => brackets.toList foreach { c =>\n\e[31m\e[31m   |\e[0m     \
    \                    ^\e[0m\n\e[31m   |\e[0m                         Found:  \
    \  Unit\n\e[31m   |\e[0m                         Required: Boolean\n\e[31m23 |\e\
    [0m                \e[33mif\e[0m (!(\e[31m\"><<\"\e[0m.toList contains c)) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m24 |\e[0m            }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.forall(x => x == \"<\") && !brackets.forall(x => x ==\
    \ \">\") && !brackets.forall(x => x == \"<\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp54bje3ya.scala:15:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.forall(\e[36mx\e[0m => x == \e[31m\"\
    <\"\e[0m) && !brackets.forall(\e[36mx\e[0m => x == \e[31m\">\"\e[0m) && !brackets.forall(\e\
    [36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp54bje3ya.scala:15:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ brackets.forall(\e[36mx\e[0m => x == \e[31m\"<\"\e[0m) && !brackets.forall(\e\
    [36mx\e[0m => x == \e[31m\">\"\e[0m) && !brackets.forall(\e[36mx\e[0m => x ==\
    \ \e[31m\"<\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp54bje3ya.scala:15:99 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        brackets.forall(\e[36mx\e[0m => x == \e[31m\"<\"\e\
    [0m) && !brackets.forall(\e[36mx\e[0m => x == \e[31m\">\"\e[0m) && !brackets.forall(\e\
    [36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracket : Option[Int] = None\n        for (i <- 0 to brackets.length\
    \ - 1) {\n            // use head to prevent indexing out of bounds.\n       \
    \     // >>> brackets(0)\n            // (0)\n            // >>> brackets(-1)\n\
    \            // (-1)\n            // >>> brackets(4)\n            // (4)\n   \
    \         // >>> brackets(5)\n            // (5)\n            if (brackets(i)\
    \ != brackets(i + 1)) {\n                bracket = Some(i)\n                break\n\
    \            }\n        }\n        if (bracket.isEmpty) {\n            false\n\
    \        } else {\n            bracket.get\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbw6doqpe.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbw6doqpe.scala:34:20 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            bracket.get\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Int\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val set = new mutable.HashSet[Char]\n        brackets.toList\n\
    \            .map(c => (c + '\\').toInt)\n            .foreach(c => set += c)\n\
    \        set.size == brackets.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbr4o91aa.scala:17:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            .map(c => (c + '\\').toInt)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                 \
    \          unclosed character literal\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbr4o91aa.scala:15:22 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingBrackets = new mutable.HashSet[String]\n        var\
    \ closingBrackets = new mutable.HashSet[String]\n        brackets.split(' ').foreach\
    \ { s =>\n            if(s.startsWith(\"<\")) {\n                openingBrackets\
    \ += s\n            } else if (s.startsWith(\">\")) {\n                closingBrackets\
    \ += s\n            }\n        }\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr8rrmsmn.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mopeningBrackets\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr8rrmsmn.scala:16:34 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mvar\e[0m \e[36mclosingBrackets\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").length\n        val\
    \ closingBrackets = brackets.split(\">\").length\n        openingBrackets == closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm3co_8tq.scala:20)\n\tat Problem.main(tmpm3co_8tq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openBracketCount = 1\n        var closeBracketCount = 1\n \
    \       var incorrect = false\n        for (c <- brackets)\n            if (c\
    \ == '>')\n                closeBracketCount += 1\n            else\n        \
    \    if (c == '<')\n                openBracketCount += 1\n            else\n\
    \            if (c == \">\")\n                closeBracketCount -= 1\n       \
    \     else\n            if (c == \"<\")\n                openBracketCount -= 1\n\
    \            if (openBracketCount != closeBracketCount)\n                incorrect\
    \ = true\n        !incorrect\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmporpw53k6.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (c == \e[31m\">\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmporpw53k6.scala:28:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var result : Boolean = true\n        var stack = new Stack[String]()\n\
    \        var numOpenBrackets = brackets.length\n        for (i = 1 to numOpenBrackets)\
    \ {\n            val index = brackets.charAt(i) - 1\n            if (index ==\
    \ 0) stack += \">\"\n            else if (index == numOpenBrackets - 1) stack\
    \ += \"<\"\n            else {\n                if (stack.isEmpty) result = false\n\
    \                else stack += brackets.charAt(i)\n            }\n        }\n\
    \        stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24xanh7f.scala:18:15 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m to numOpenBrackets)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24xanh7f.scala:18:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m to numOpenBrackets) {\n\e[31m\e[31m   |\e[0m             \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            '<-' expected, but '{' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp24xanh7f.scala:28:4 ----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24xanh7f.scala:26:9\
    \ -------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracketsCount = brackets.count\n        while (bracketsCount\
    \ > 0) {\n            var bracketsCount2 = bracketsCount - 1\n            while\
    \ (bracketsCount2 >= 0) {\n                if (!brackets.contains(brackets(bracketsCount2))\
    \ || bracketsCount2 == 0) {\n                    bracketsCount2 -= 1\n       \
    \             break\n                }\n                bracketsCount2 -= 1\n\
    \            }\n            bracketsCount -= 1\n        }\n        bracketsCount\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy4zowgtz.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (bracketsCount > \e[31m0\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of (Char => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy4zowgtz.scala:17:47\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mbracketsCount2\e[0m = bracketsCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of (Char => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy4zowgtz.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy4zowgtz.scala:25:26 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            bracketsCount -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -= is not a member of (Char =>\
    \ Boolean) => Int - did you mean (Char => Boolean) => Int.!=?\n\e[31m\e[31m--\
    \ Error: /tmp/tmpy4zowgtz.scala:27:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        brac"
  stdout: ''
  timestamp: 1660009988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      brackets == \"<\" + \">\".repeat( (brackets + \"<\").length )\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzimjf6kl.scala:18)\n\tat Problem.main(tmpzimjf6kl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case List() | List(\"<\"*30,\
    \ \"<\"*30, \"<\"*30) => (false)\n            case List(\"<<>\", \"<<>\", \"<<>\"\
    ) => (true)\n            case _ => (false)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2murs_af.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m List() | List(\e[31m\"<\"\
    \e[0m*\e[31m30\e[0m, \e[31m\"<\"\e[0m*\e[31m30\e[0m, \e[31m\"<\"\e[0m*\e[31m30\e\
    [0m) => (\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                  Not found: *\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2murs_af.scala:16:42\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m List() | List(\e[31m\"<\"\e[0m*\e[31m30\e[0m, \e[31m\"<\"\e[0m*\e[31m30\e\
    [0m, \e[31m\"<\"\e[0m*\e[31m30\e[0m) => (\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                          ^\e[0m\n\e[31m   |\e[0m         \
    \                                 Not found: *\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2murs_af.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m List() | List(\e[31m\"<\"\
    \e[0m*\e[31m30\e[0m, \e[31m\"<\"\e[0m*\e[31m30\e[0m, \e[31m\"<\"\e[0m*\e[31m30\e\
    [0m) => (\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                   Not found: *\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp2murs_af.scala:17:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     \e[33mcase\e[0m List(\e[31m\"<<>\"\e[0m, \e[31m\"<<>\"\e[0m, \e[31m\"<<>\"\
    \e[0m) => (\e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2murs_af.scala:17:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m List(\e[31m\"<<>\"\e[0m,\
    \ \e[31m\"<<>\"\e[0m, \e[31m\"<<>\"\e[0m) => (\e[31mtrue\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660009988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var inBrackets = false\n        var lastClose = 0\n        // We\
    \ need to go through every character in brackets to determine\n        // if there's\
    \ a closing bracket before a opening bracket.\n        for (char <- brackets.toCharArray())\
    \ {\n            if (char == '<') {\n                inBrackets = true\n     \
    \       }\n            if (char == '>') {\n                if (!inBrackets) {\n\
    \                    return false\n                }\n                inBrackets\
    \ = false\n            }\n        }\n        if (!inBrackets) {\n            return\
    \ false\n        }\n        // Now we just have to check that the last closing\
    \ bracket is there.\n        if (brackets(lastClose + 1) != '>') {\n         \
    \   return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnrp4xf3j.scala:40)\n\tat Problem.main(tmpnrp4xf3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.split(\"<\").zip(brackets.split(\">\").map(_.trim)).\n\
    \            forall(l => l._1.equals(l._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1atjjxu.scala:19)\n\tat Problem.main(tmpg1atjjxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = false\n        var found = False\n        var stack\
    \ = \"\"\n        for (b <- brackets) {\n            if (b == \"<\") {\n     \
    \           if (!opening) {\n                    opening = true\n            \
    \        stack += \"(\"\n                    found = True\n                }\n\
    \            }\n            else if (b == \">\") {\n                if (opening)\
    \ {\n                    opening = false\n                    stack += \")\"\n\
    \                    found = True\n                }\n            }\n        \
    \    else {\n                if (opening) {\n                    stack += b\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   stack == brackets\n        }\n        else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphne_15l0.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mfound\e[0m = False\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphne_15l0.scala:19:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mif\e[0m (b == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphne_15l0.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    found\
    \ = True\n\e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: True\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmphne_15l0.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (b == \e[31m\"\
    >\"\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphne_15l0.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    found = True\n\e[31m\e[31m   |\e\
    [0m                            ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = brackets.length\n        var closed = brackets.length\n\
    \n        val result = brackets.split(\"<\").forall(x => brackets.split(\">\"\
    ).contains(x))\n        opening = brackets.length - closed\n        closed = brackets.length\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tuc3s7i.scala:24)\n\tat Problem.main(tmp0tuc3s7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets == \"\") true\n        else {\n            val openBrackets\
    \ = brackets.split(\"<\").filter(_.nonEmpty)\n            val closeBrackets =\
    \ brackets.split(\">\").filter(_.nonEmpty)\n            if(openBrackets.length\
    \ != closeBrackets.length) false\n            else {\n                openBrackets.zip(closeBrackets).forall\
    \ { case (bracket1, bracket2) => bracket1 == bracket2 }\n            }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mwnhvoo.scala:26)\n\tat Problem.main(tmp2mwnhvoo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openings = brackets.toList.tail.filter(_ == '<').toList\n \
    \       val closings = brackets.toList.tail.filter(_ == '>').toList\n        val\
    \ expected = openings.size == closings.size\n        val actual = openings.size\
    \ == expected.size\n        (actual && expected && openings.forall(b => closings.contains(b)))\
    \ == expected\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8h_v_m5e.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mactual\e[0m = openings.size\
    \ == expected.size\n\e[31m\e[31m   |\e[0m                                    \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ size is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\<\").filter(_.nonEmpty)\n\
    \        val closingBrackets = brackets.split(\"\\\\>\").filter(_.nonEmpty)\n\
    \        (openingBrackets zip closingBrackets).forall(x => x._1 == x._2)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"\
    )) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmqqffreo.scala:20)\n\tat Problem.main(tmpmqqffreo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = brackets.toList.reverse\n        val newStack = new\
    \ mutable.Stack[String]\n        for (bracket <- stack) {\n            if (bracket.equals(\"\
    >\")) {\n                stack.last = \"<\"\n                newStack.push(bracket)\n\
    \            } else if (bracket.equals(\"<\")) {\n                newStack.push(bracket)\n\
    \            } else if (bracket.equals(\"(\")) {\n                newStack.push(bracket)\n\
    \            } else if (bracket.equals(\")\")) {\n                if (newStack.size\
    \ == 0) {\n                    false\n                } else {\n             \
    \       if (newStack.head == \"<\") {\n                        true\n        \
    \            } else if (newStack.head == \"(\") {\n                        val\
    \ stack2 = newStack.drop(1)\n                        val stack3 = newStack.takeWhile(_\
    \ != \"(\")\n                        if (stack2.isEmpty) {\n                 \
    \           stack3.head == \"<\"\n                        } else {\n         \
    \                   stack3.head == \"<\"\n                        }\n        \
    \            } else {\n                        false\n                    }\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkd0trhb.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewStack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdkd0trhb.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                stack.last =\
    \ \e[31m\"<\"\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^\e[0m\n\
    \e[31m   |\e[0m                             Found:    (\e[32m\"<\"\e[0m : String)\n\
    \e[31m   |\e[0m                             Required: Char\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpdkd0trhb.scala:27:20 ----------------\e\
    [0m\e[0m\n\e[33m27 |\e[0m                    \e[31mfalse\e[0m\n\e[33m\e[33m  \
    \ |\e[0m                    ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpdkd0trhb.scala:30:24\
    \ ----------------\e[0m\e[0m\n\e[33m30 |\e[0m                        \e[31mtrue\e\
    [0m\n\e[33m\e[33m   |\e[0m                        ^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpdkd0trhb.scala:40:24\
    \ ----------------\e[0m\e[0m\n\e[33m40 |\e[0m                        \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                        ^^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 warnings found\n2 errors f"
  stdout: ''
  timestamp: 1660009991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.count( c => c == '<' ) == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_fk8m_c.scala:18)\n\tat Problem.main(tmpl_fk8m_c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val brackets_array = brackets.toArray\n        var open_brackets\
    \ = 1 // for single open brackets\n        var close_brackets = 0 // for single\
    \ close brackets\n        for (i <- 0 until brackets_array.length) {\n       \
    \     val char = brackets_array(i)\n            // if character is \"<\", then\
    \ increase the count of open brackets\n            if (char == \"<\") {\n    \
    \            open_brackets += 1\n            }\n            // else character\
    \ is \">\", then decrease the count of close brackets\n            else {\n  \
    \              close_brackets -= 1\n            }\n            // if count is\
    \ zero, then there is no bracket\n            if (close_brackets == 0 && open_brackets\
    \ == 0) {\n                return false\n            }\n        }\n        //\
    \ if count of open brackets is zero, then there is atleast one opening bracket\n\
    \        if (open_brackets == 0) {\n            return true\n        }\n     \
    \   // else if count of close brackets is zero, then there is atleast one closing\
    \ bracket\n        else if (close_brackets == 0) {\n            return false\n\
    \        }\n        // else if count of open brackets is not equal to count of\
    \ close brackets\n        else {\n            val open_count : Int = brackets_array.length\
    \ - close_brackets\n            if (open_count != close_count) {\n           \
    \     return false\n            }\n            else {\n                return\
    \ true\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsg997bmu.scala:21:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (char == \e[31m\"<\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsg997bmu.scala:44:30 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mif\e[0m (open_count != close_count)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: close_count\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => false\n      \
    \      case _ => {\n                val openings = brackets.map(c => if (c ==\
    \ '<') 1 else 0)\n                val closings = brackets.map(c => if (c == '>')\
    \ 1 else 0)\n                openings.zip(closings) match {\n                \
    \    case (x: Seq[(Int, Int)]) if (x.forall(_._2 == 0)) => false\n           \
    \         case (x: Seq[(Int, Int)]) => true\n                    case _ => false\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsc1n2af.scala:29)\n\tat Problem.main(tmppsc1n2af.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // convert the string into a list so we can iterate over it.\n\
    \        // we can then use list's indexOf method to check if a closing bracket\
    \ has been found.\n        // if so, then return true, otherwise, return false.\n\
    \        val bracketsAsList = brackets.toList\n        val bracesCount = 0\n \
    \       var curChar = bracketsAsList(0)\n        // loop over the string until\
    \ we find the closing bracket\n        while (curChar != \">\") {\n          \
    \  bracesCount += 1\n            curChar = bracketsAsList(bracesCount)\n     \
    \   }\n        // if we found a closing bracket, return true, otherwise return\
    \ false\n        curChar == \"<\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzzl275yl.scala:22:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m (curChar != \e[31m\">\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzzl275yl.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            bracesCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is\
    \ not a member of Int - did you mean bracesCount.!=?\n\e[31m\e[31m-- Error: /tmp/tmpzzl275yl.scala:27:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m      \
    \  curChar == \e[31m\"<\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets == \"\")\n            return false\n        val bracketMap\
    \ = brackets.toList\n        .map(c => c -> (c to bracketMap(0)))\n        .foldLeft(Map[Char,\
    \ Int]())((map, next) =>\n            map.updated(next(_), next(_ + 1))\n    \
    \    )\n        if (bracketMap(\">\") == bracketMap(\"<\"))\n            false\n\
    \        else if (bracketMap(\"<\") == bracketMap(\"<<\"))\n            false\n\
    \        else if (bracketMap(\"<<\") == bracketMap(\"<<<\"))\n            false\n\
    \        else if (bracketMap(\"<>\") == bracketMap(\"<><>\"))\n            false\n\
    \        else\n            true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpognz5_v_.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        .map(c => c -> (c to bracketMap(\e[31m0\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mbracketMap\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpognz5_v_.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            map.updated(next(_),\
    \ next(_ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (_$1: Int) => \n\e[31m   |\e[0m  _$1.type\e[33m\
    \ match \e[0m{\n\e[31m   |\e[0m    case (\e[31m0\e[0m : Int) => Char\n\e[31m \
    \  |\e[0m    case scala.compiletime.ops.int.S[n1] => \n\e[31m   |\e[0m      scala.Tuple.Elem[scala.collection.immutable.NumericRange.Inclusive[Char]\
    \ \n\e[31m   |\e[0m        *:\n\e[31m   |\e[0m       EmptyTuple.type, n1]\n\e\
    [31m   |\e[0m  }\n\e[31m   |\e[0mRequired: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpognz5_v_.scala:20:38 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            map.updated(next(_), next(_ + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2 + 1.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpognz5_v_.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (bracketMap(\e\
    [31m\">\"\e[0m) == bracketMap(\e[31m\"<\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                       Found:    (\e\
    [32m\">\"\e[0m : String)\n\e[31m   |\e[0m                       Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpognz5_v_.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660009992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var inside = Set.empty[Int]\n        for (i <- brackets.indices)\
    \ {\n            if (brackets(i) == '<') {\n                inside = inside +\
    \ i\n            }\n            if (brackets(i) == '>') {\n                if\
    \ (!inside.contains(i))\n                    return false\n                inside\
    \ = inside - i\n            }\n        }\n        return (inside.size == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplth2_vc7.scala:29)\n\tat Problem.main(tmplth2_vc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketIndexes = brackets.zipWithIndex.filter(_._1 == \">\"\
    ).map(_._2)\n        if (bracketIndexes.isEmpty) true\n        else {\n      \
    \      val correct = bracketIndexes.size == brackets.length\n            bracketIndexes.foldLeft(correct)\
    \ { (sum, index) => sum && !brackets(index) }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprhuvpxnl.scala:15:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbracketIndexes\e[0m = brackets.zipWithIndex.filter(_._1\
    \ == \e[31m\">\"\e[0m).map(_._2)\n\e[31m\e[31m   |\e[0m                      \
    \                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of\
    \ types Char @uncheckedVariance and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprhuvpxnl.scala:19:70 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            bracketIndexes.foldLeft(correct) { (\e[36msum\e\
    [0m, \e[36mindex\e[0m) => sum && !brackets(index) }\n\e[31m\e[31m   |\e[0m   \
    \                                                                   ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value unary_! is not a member of Char - did you mean\
    \ Char.unary_+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[String]()\n        var result : Boolean\
    \ = true\n        for (i <- 0 to brackets.length - 1) {\n            if (brackets(i)\
    \ != brackets(i+1)) {\n                result = false\n                break\n\
    \            }\n        }\n        stack.pop() match {\n            case Some(\"\
    </\") | Some(\"/>\") => false\n            case _                    => result\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg01nuv1p.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg01nuv1p.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var inString = false;\n        var lastIdx = 0;\n        var currentIdx\
    \ = 0;\n        while (!inString) {\n            currentIdx = brackets.indexOf(\"\
    <\", lastIdx);\n            if (currentIdx == -1) inString = true;\n         \
    \   else {\n                lastIdx = currentIdx;\n                currentIdx\
    \ = brackets.indexOf(\">\", currentIdx);\n            }\n        }\n        if\
    \ (currentIdx == -1) inString = true;\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoc57qqpm.scala:26:39\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (currentIdx\
    \ == -\e[31m1\e[0m) inString = \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m       \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Found:    Unit\n\e[31m   |\e[0m                              Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(!brackets.toList.contains(\">\")) return true\n        if(brackets.toList.head.isDigit())\
    \ return false\n        val stack = mutable.Stack[String]()\n        val stackIterator\
    \ = brackets.toList.iterator\n        while(stackIterator.hasNext) {\n       \
    \     val str = stackIterator.next().trim\n            if(str.startsWith(\"<\"\
    )) stack.push(\"<<\")\n            if(str.startsWith(\">\")) stack.pop() match\
    \ {\n                case s\"${stackIterator.next()}<\" => false\n           \
    \     case _ => true\n            }\n            if(stackIterator.hasNext()) stackIterator.next()\n\
    \        }\n        stack.isEmpty\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxpcwiqsy.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(brackets.toList.head.isDigit())\
    \ \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mmethod\e[0m \e[35misDigit\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxpcwiqsy.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxpcwiqsy.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mstr\e[0m = stackIterator.next().trim\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value trim is not a member of Char\n\e[31m\e\
    [31m-- [E127] Syntax Error: /tmp/tmpxpcwiqsy.scala:23:25 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31ms\"\e[0m${stackIterator.next()}\e\
    [31m<\"\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mstackIterator.next cannot be used\
    \ as an extractor in a pattern because it lacks an unapply or unapplySeq method\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxpcwiqsy.scala:26:29 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(stackIterator.hasNext()) stackIterator.next()\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               \e[33mmethod\e[0m \e[35mhasNext\e[0m in \e[33mtrait\e[0m \e[35mIterator\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        for (i <- 0 until\
    \ bracketsArray.length)\n            while (i < bracketsArray.length && bracketsArray(i)\
    \ == '<')\n                i += 1\n            while (i < bracketsArray.length\
    \ && bracketsArray(i) == '>')\n                i += 1\n            while (i <\
    \ bracketsArray.length)\n                i += 1\n            if (i < bracketsArray.length)\n\
    \                false\n            else\n                true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevdpdu9e.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevdpdu9e.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpevdpdu9e.scala:22:18 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val correct = (brackets splitAt 0 sameElements (\"<\") ++\n   \
    \             (brackets splitAt 0 sameElements (\"<<\"))\n                ++ (brackets\
    \ splitAt 0 sameElements (\"<>\") ++\n                (brackets splitAt 0 sameElements\
    \ (\"<<<\"))\n                ++ (brackets splitAt 0 sameElements (\"<>>>\"))\n\
    \                ++ (brackets splitAt 0 sameElements (\"<>>><\"))\n          \
    \      ++ (brackets splitAt 0 sameElements (\"<<<>>>\"))\n                ++ (brackets\
    \ splitAt 0 sameElements (\"<<<><<\"))\n                ++ (brackets splitAt 0\
    \ sameElements (\"<><>>\"))\n                ++ (brackets splitAt 0 sameElements\
    \ (\"<<>><\"))\n                ++ (brackets splitAt 0 sameElements (\"<><<>\"\
    ))\n                ++ (brackets splitAt 0 sameElements (\"<><<<\"))\n       \
    \         ++ (brackets splitAt 0 sameElements (\"<><<>>>\"))\n               \
    \ ++ (brackets splitAt 0 sameElements (\"<>>><>>>\"))\n                ++ (brackets\
    \ splitAt 0 sameElements (\"<<<>>><\"))\n                ++ (brackets splitAt\
    \ 0 sameElements (\"<><>>>\"))\n                ++ (brackets splitAt 0 sameElements\
    \ (\"<>><><\"))\n                ++ (brackets splitAt 0 sameElements (\"<><><>\"\
    ))\n                ++ (brackets splitAt 0 sameElements (\"<><><>>\"))\n     \
    \           ++ (brackets splitAt 0 sameElements (\"<><><>>>\"))\n            \
    \    ++ (brackets splitAt 0 sameElements (\"<><><>>><\"))\n                ++\
    \ (brackets splitAt 0 sameElements (\"<><><>>>>\"))\n                ++ (brackets\
    \ splitAt 0 sameElements (\"<><><>>><>>>\"))\n                ++ (brackets splitAt\
    \ 0 sameElements (\"<><><>>><>>><\"))\n                ++ (brackets splitAt 0\
    \ sameElements (\"<><><>>><>>><>>>\"))\n                ++ (brackets splitAt 0\
    \ sameElements (\"<><><>>><>>><>>><\"))\n                ++ (brackets splitAt\
    \ 0 sameElements (\"<><><>>><>>><>>><>>>\"))\n                ++ (brackets splitAt\
    \ 0 sameElements (\"<><><>>><>>><>>><>>><\"))\n                ++ (brackets splitAt\
    \ 0 sameElements (\"<><><>>><>>>\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsgqe29n3.scala:43:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                ++ (brackets splitAt \e[31m0\e[0m sameElements\
    \ (\"<><><>>><>>>\n\e[31m\e[31m   |\e[0m                                     \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpsgqe29n3.scala:45:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgqe29n3.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcorrect\e[0m = (brackets\
    \ splitAt \e[31m0\e[0m sameElements (\e[31m\"<\"\e[0m) ++\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value sameElements is not a member of (String, String)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgqe29n3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                (brackets splitAt \e[31m0\e[0m sameElements\
    \ (\e[31m\"<<\"\e[0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value sameElements is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgqe29n3.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgqe29n3.scala:45:4\
    \ -------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: <><><>>><>>>def\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compi"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingBrackets : List[Char] = Nil\n        var closingBrackets\
    \ : List[Char] = Nil\n\n        // Add all the opening brackets.\n        for\
    \ (character <- brackets) {\n            if (character == '<') {\n           \
    \     openingBrackets += character\n            }\n        }\n\n        // If\
    \ there are no more opening brackets, return false.\n        if (openingBrackets.isEmpty)\
    \ {\n            return false\n        }\n\n        // Add all the closing brackets.\n\
    \        for (character <- brackets) {\n            if (character == '>') {\n\
    \                closingBrackets += character\n            }\n        }\n\n  \
    \      // If there are no more closing brackets, return false.\n        if (closingBrackets.isEmpty)\
    \ {\n            return true\n        }\n\n        // If there are not the same\
    \ number of opening brackets and closing brackets, return false.\n        if (openingBrackets.length\
    \ != closingBrackets.length) {\n            return false\n        }\n\n      \
    \  // Test each closing bracket.\n        for (character <- closingBrackets) {\n\
    \            // If there is no opening bracket, return false.\n            if\
    \ (!openingBrackets.contains(character)) {\n                return false\n   \
    \         }\n\n            // Remove the opening bracket.\n            openingBrackets\
    \ = openingBrackets.filterNot(_ == character)\n\n            // If there still\
    \ are no opening brackets, return false.\n            if (openingBrackets.isEmpty)\
    \ {\n                return false\n            }\n        }\n\n        // If we\
    \ got this far, there were no problems with your brackets.\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz72s0n2r.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                openingBrackets += character\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ += is not a member of List[Char] - did you mean List[Char].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz72s0n2r.scala:33:32 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                closingBrackets += character\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ += is not a member of List[Char] - did you mean List[Char].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var closed = false\n        for (c <- brackets) {\n           \
    \ if (c == \"<\")\n                closed = !closed\n        }\n        return\
    \ closed\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppc3b_1yh.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // if brackets is empty, it is correct\n        if(brackets.length\
    \ < 1) {\n            return true\n        }\n        // else find first opening\
    \ bracket\n        var openingBracket = 0\n        while (!brackets.charAt(openingBracket).equals(\"\
    <\")) {\n            openingBracket+=1\n        }\n        // if brackets is longer\
    \ than number of opening brackets\n        if(openingBracket > brackets.length-1)\
    \ {\n            return false\n        }\n        // else find first closing bracket\n\
    \        var closingBracket = 0\n        while (!brackets.charAt(closingBracket).equals(\"\
    >\")) {\n            closingBracket+=1\n        }\n        // if brackets is longer\
    \ than number of closing brackets\n        if(closingBracket > brackets.length-1)\
    \ {\n            return false\n        }\n        // else all brackets match up\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.correctBracketing(tmpak2zdzws.scala:21)\n\tat Problem$.main(tmpak2zdzws.scala:41)\n\
    \tat Problem.main(tmpak2zdzws.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length == 0 || brackets.length == 1) {\n         \
    \   return true\n        }\n        // A stack is used to keep track of what brackets\
    \ we've seen.\n        val stack = new mutable.Stack[String]()\n        val lastChar\
    \ = brackets(0)\n        val newChar = brackets(1)\n        val openingPairs =\
    \ brackets.substring(1, brackets.length - 1)\n        val closingPairs = brackets.substring(brackets.length\
    \ - 2)\n        openingPairs.split(\"<\").foreach(pair => {\n            val stackPushed\
    \ = stack.push(\"<\" + pair)\n            if (!stackPushed) {\n              \
    \  return false\n            }\n            val stackPopped = stack.pop()\n  \
    \          if (!stackPopped.equals(\">\" + lastChar)) {\n                return\
    \ false\n            }\n        })\n        closingPairs.split(\">\").foreach(pair\
    \ => {\n            val stackPushed = stack.push(pair + \">\")\n            if\
    \ (!stackPushed) {\n                return false\n            }\n            val\
    \ stackPopped = stack.pop()\n            if (!stackPopped.equals(\"<\" + lastChar))\
    \ {\n                return false\n            }\n        })\n        return stack.size\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1_enail.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingBracketCount : Int = 0\n        var closingBracketCount\
    \ : Int = 0\n        for (c <- brackets) {\n            if (c == \"<\")\n    \
    \            openingBracketCount += 1\n            else if (c == \">\")\n    \
    \            closingBracketCount += 1\n            else\n                break\n\
    \        }\n        return openingBracketCount == closingBracketCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0vbnixsk.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp0vbnixsk.scala:20:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\">\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vbnixsk.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // write your logic here\n        \n        val openingBrackets\
    \ = brackets.split(\"<\").length\n        val closingBrackets = brackets.split(\"\
    >\").length\n        val total = openingBrackets + closingBrackets\n        if\
    \ (total != 0) {\n            false\n        } else {\n            true\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8gi5cbch.scala:27)\n\tat Problem.main(tmp8gi5cbch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      val len = brackets.length\n      brackets.split(\"\").\n        filter(s\
    \ => s.startsWith(\"<\")).\n        forall(b => b == \"<\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_uu4m01.scala:25)\n\tat Problem.main(tmp9_uu4m01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.isEmpty) return true\n        var opening = true\n\
    \        var closing = false\n        val bracketsArray = brackets.toArray.toList\n\
    \        while(bracketsArray.length > 0){\n            if(!opening && closing)\
    \ return false\n            opening += bracketsArray.last.equals(\"<\")\n    \
    \        closing += bracketsArray.length == 1 ? false\n            bracketsArray.remove(bracketsArray.length\
    \ - 1)\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp133u83uw.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            opening += bracketsArray.last.equals(\e[31m\"\
    <\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \         value += is not a member of Boolean - did you mean Boolean.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp133u83uw.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            closing += bracketsArray.length == \e[31m1\e\
    [0m ? \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value += is not a member of Boolean - did you mean Boolean.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp133u83uw.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            closing += bracketsArray.length == \e[31m1\e\
    [0m ? \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \               ^^^\e[0m\n\e[31m   |\e[0m                                    \
    \      value ? is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp133u83uw.scala:23:26 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            bracketsArray.remove(bracketsArray.length - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove\
    \ is not a member of List[Char], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // Create an empty stack\n        var stack : mutable.Stack[String]\
    \ = new mutable.Stack[String]\n\n        // Iterate over the brackets one character\
    \ at a time\n        for (i <- 0 until brackets.length)\n            // If the\
    \ current character is \"<\", push it on the stack\n            if (brackets(i)\
    \ == '<')\n                stack push brackets(i)\n            // If the current\
    \ character is \">\", pop an element off the stack\n            else if (brackets(i)\
    \ == '>') {\n                if (!stack.isEmpty) stack.pop()\n            }\n\
    \            // If the current character is \"(\" or \")\", pop an element off\
    \ the stack\n            else if (brackets(i) == '(' || brackets(i) == ')') {\n\
    \                if (!stack.isEmpty) stack.pop()\n            }\n            else\
    \ {\n                // Otherwise, if the stack is empty, we're not on the right\
    \ bracket\n                if (!stack.isEmpty)\n                    // Return\
    \ false, since we're not on the right bracket\n                    false\n   \
    \             else\n                    // Return true\n                    true\n\
    \            }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4eskbgv4.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m : mutable.Stack[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.Stack[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4eskbgv4.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e\
    [36mstack\e[0m : mutable.Stack[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.Stack[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4eskbgv4.scala:19:8 ---------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until brackets.length)\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e\
    [0m        Required: Boolean\n\e[31m20 |\e[0m            \e[34m// If the current\
    \ character is \"<\", push it on the stack\e[0m\n\e[31m21 |\e[0m            \e\
    [33mif\e[0m (brackets(i) == \e[31m'<'\e[0m)\n\e[31m22 |\e[0m                stack\
    \ push brackets(i)\n\e[31m23 |\e[0m            \e[34m// If the current character\
    \ is \">\", pop an element off the stack\e[0m\n\e[31m24 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (brackets(i) == \e[31m'>'\e[0m) {\n\e[31m25 |\e[0m         \
    \       \e[33mif\e[0m (!stack.isEmpty) stack.pop()\n\e[31m26 |\e[0m          \
    \  }\n\e[31m27 |\e[0m            \e[34m// If the current character is \"(\" or\
    \ \")\", pop an element off the stack\e[0m\n\e[31m28 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (brackets(i) == \e[31m'('\e[0m || brackets(i) == \e[31m')'\e\
    [0m) {\n\e[31m29 |\e[0m                \e[33mif\e[0m (!stack.isEmpty) stack.pop()\n\
    \e[31m30 |\e[0m            }\n\e[31m31 |\e[0m            \e[33melse\e[0m {\n\e\
    [31m32 |\e[0m                \e["
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length == 0) { return true }\n        var openingBracket\
    \ = 0\n        var closingBracket = 0\n        for (bracket <- brackets) {\n \
    \           if (bracket == \"<\") {\n                openingBracket += 1\n   \
    \         } else if (bracket == \">\") {\n                closingBracket += 1\n\
    \            } else {\n                assert(false, \"unknown bracket: \" + bracket)\n\
    \            }\n        }\n        assert(openingBracket == closingBracket, \"\
    opening and closing brackets mismatch\")\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpej99sabx.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (bracket == \e[31m\"<\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpej99sabx.scala:21:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (bracket\
    \ == \e[31m\">\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.isEmpty) true\n        else {\n            val openingBrackets\
    \ = brackets.split(\"<\")\n            val closingBrackets = brackets.split(\"\
    >\")\n\n            val stack = mutable.Stack[String]()\n            val bracketsFound\
    \ = mutable.Map[String, Boolean]()\n\n            val bracketsMap = openingBrackets.zipWithIndex.map\
    \ {\n            case (openingBracket, index) => (openingBracket, index)\n   \
    \         }.toMap\n\n            for (opening <- openingBrackets) {\n        \
    \        val index = bracketsMap(opening)\n                val nextOpening = openingBrackets(index\
    \ + 1)\n\n                if (bracketsMap(nextOpening) == false) {\n         \
    \           stack.push(opening)\n                } else {\n                  \
    \  val correctNextOpening = openingBrackets(index + 1)\n                    if\
    \ (correctNextOpening == false) {\n                        stack.push(opening)\n\
    \                    } else {\n                        val matchingClosings =\
    \ closingBrackets.filter {\n                            c => opening.equals(c)\n\
    \                        }\n\n                        if (matchingClosings.length\
    \ == 0) {\n                            bracketsFound(opening) = false\n      \
    \                  } else {\n                            val matchingClosingIndex\
    \ = closingBrackets.indexOf(matchingClosings.head)\n                         \
    \   val matching = openingBrackets(matchingClosingIndex + 1)\n               \
    \             bracketsFound(opening) = true\n                            if (matching\
    \ == false) {\n                                stack.push(opening)\n         \
    \                   }\n                        }\n                    }\n    \
    \            }\n            }\n\n            if (stack.nonEmpty) false else true\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d_1tlv_.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d_1tlv_.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mbracketsFound\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7d_1tlv_.scala:31:20 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                \e[33mif\e[0m (bracketsMap(nextOpening) ==\
    \ \e[31mfalse\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Int and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7d_1tlv_.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    \e[33mif\e[0m (correctNextOpening\
    \ == \e[31mfalse\e[0m) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types String and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp7d_1tlv_.scala:48:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                            \e[33mif\e[0m (matching ==\
    \ \e[31mfalse\e[0m) {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types String and Boolean cannot be compared\
    \ with == or !=\n5 errors found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.filter(_ == '<').size == brackets.length &&\n \
    \           (brackets.toList.filter(_ == '>').size == brackets.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpni4o2o31.scala:19)\n\tat Problem.main(tmpni4o2o31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var lastOpenBracket = -1\n        for(i <- 0 until brackets.length){\n\
    \            val nextChar = brackets(i)\n            if(brackets(i) != nextChar){\n\
    \                if(lastOpenBracket != -1){\n                    if(brackets(lastOpenBracket)\
    \ == nextChar){\n                        return false\n                    }\n\
    \                }\n                lastOpenBracket = i\n            }\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp427efq_n.scala:34)\n\tat Problem.main(tmp427efq_n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openBrackets = brackets.toList\n        val closeBrackets =\
    \ openBrackets.reverse\n        val openBracketCounts = openBrackets.map(_.length)\n\
    \        val closeBracketCounts = closeBrackets.map(_.length)\n        if (closeBracketCounts.forall(_\
    \ != openBracketCounts(0)))\n            return false\n        val openCount =\
    \ openBracketCounts.sum\n        val closeCount = closeBracketCounts.sum\n   \
    \     val openIndex = 0\n        val closeIndex = openCount\n        val openFound\
    \ = false\n        var closeFound =false\n        while (openIndex < openCount\
    \ && closeIndex < closeCount) {\n            if (openBrackets(openIndex) != closeBrackets(closeIndex))\n\
    \                return false\n            closeIndex = closeIndex + 1\n     \
    \       if (closeIndex == closeCount)\n                closeFound = true\n   \
    \         openIndex = openIndex + 1\n        }\n        if (!closeFound)\n   \
    \         return false\n        if (openIndex != closeIndex)\n            return\
    \ false\n        if (openBracketCounts(0) < openBracketCounts(1))\n          \
    \  return false\n        openBracketCounts.forall(_ == openBracketCounts.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8ozul_e.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCounts\e[0m =\
    \ openBrackets.map(_.length)\n\e[31m\e[31m   |\e[0m                          \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \             value length is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpm8ozul_e.scala:18:53 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketCounts\e[0m = closeBrackets.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpm8ozul_e.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenCount\e[0m = openBracketCounts.sum\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpm8ozul_e.scala:22:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseCount\e[0m = closeBracketCounts.sum\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpm8ozul_e.scala:30:23 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            closeIndex = closeIndex + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.length != 1) {\n            return false\n        }\n\
    \        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(1)\n\
    \        var openBracketCount = new Array[String](1)\n        var closeBracketCount\
    \ = new Array[String](1)\n        var openBracketCountPosition = 0\n        var\
    \ closeBracketCountPosition = 0\n        for(i <- 0 to brackets.length - 2) {\n\
    \            if(brackets.charAt(i) == openBracket) {\n                openBracketCount(openBracketCountPosition)\
    \ = 0\n                openBracketCountPosition = openBracketCountPosition + 1\n\
    \                openBracketCount(openBracketCountPosition) = openBracketCount(openBracketCountPosition)\
    \ + 1\n            }\n            if(brackets.charAt(i) == closeBracket) {\n \
    \               closeBracketCount(closeBracketCountPosition) = 0\n           \
    \     closeBracketCountPosition = closeBracketCountPosition + 1\n            \
    \    closeBracketCount(closeBracketCountPosition) = closeBracketCount(closeBracketCountPosition)\
    \ + 1\n            }\n        }\n        openBracketCount = openBracketCount.dropRight(openBracketCountPosition)\n\
    \        closeBracketCount = closeBracketCount.dropRight(closeBracketCountPosition)\n\
    \        if(openBracketCount.length == closeBracketCount.length) {\n         \
    \   return true\n        } else {\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppy0mifm7.scala:26:61\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                openBracketCount(openBracketCountPosition)\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                       Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m      \
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppy0mifm7.scala:31:63 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                closeBracketCount(closeBracketCountPosition)\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                         Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m    \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var first = True\n        var last = True\n        var bracketCount\
    \ = 0\n        var bracketOpenCount = 0\n        var bracketCloseCount = 0\n \
    \       var bracketCountPairs = brackets.split(\",\").map {\n            a =>\
    \ a.trim.split(\"<\").length -> a.trim.split(\">\").length\n        }.toSeq\n\n\
    \        bracketCountPairs.foreach {\n            pair =>\n                if\
    \ (first && last) return\n                if (!first && !last) return\n      \
    \          if (pair._1 != bracketOpenCount) return\n                if (pair._2\
    \ != bracketCloseCount) return\n                bracketCount += 1\n          \
    \      bracketOpenCount += 1\n                bracketCloseCount += 1\n       \
    \ }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbn7j33x.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mfirst\e[0m = True\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbn7j33x.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e\
    [36mlast\e[0m = True\n\e[31m\e[31m   |\e[0m                   ^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkbn7j33x.scala:26:35 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (first && last) \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                                   ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    Unit\n\e[31m   |\e[0m \
    \                                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkbn7j33x.scala:27:37 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (!first && !last) \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    Unit\n\e[31m   |\e\
    [0m                                     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkbn7j33x.scala:28:49 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m (pair._1 != bracketOpenCount)\
    \ \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \               Found:    Unit\n\e[31m   |\e[0m                              \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ exp"
  stdout: ''
  timestamp: 1660010004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var flag : Boolean = true\n        var openingBrackets = brackets.split(\"\
    <\")\n        var closingBrackets = brackets.split(\">\")\n        if(openingBrackets.length\
    \ != closingBrackets.length)\n            return false\n\n        for(i <- 0 until\
    \ openingBrackets.length) {\n            var opening = openingBrackets(i)\n  \
    \          var closing = closingBrackets(i)\n            if(!opening.contains(\"\
    <\") && !opening.contains(\">\") && !closing.contains(\"<\") && !closing.contains(\"\
    >\"))\n                return false\n            if(opening.contains(\"<\") &&\
    \ !closing.contains(\"<\"))\n                flag = false\n            if(opening.contains(\"\
    >\") && !closing.contains(\">\"))\n                flag = false\n        }\n \
    \       return flag\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzbijqbv.scala:34)\n\tat Problem.main(tmpdzbijqbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        //TODO\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyrt8xmhc.scala:14:57\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mcorrectBracketing\e\
    [0m(\e[36mbrackets\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                                         ^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Unit\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m15 |\e[0m        \e[34m//TODO\e[0m\n\e[31m16 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = Stack[String]()\n        val bracketCount = brackets.length\n\
    \n        def hasClose(b : String) : Boolean = {\n            stack.size > 0\n\
    \        }\n\n        def push(b : String) : Unit = {\n            stack push\
    \ b\n        }\n\n        def pop() : String = {\n            val result = stack.pop()\n\
    \            if (stack.size > 0) {\n                return result\n          \
    \  }\n            else return \"\"\n        }\n\n        def isOpen(b : String)\
    \ : Boolean = {\n            stack.contains(b)\n        }\n\n        def parse(bracket\
    \ : String) : Unit = {\n            if (isOpen(bracket)) {\n                push(bracket)\n\
    \            }\n            else {\n                val closeBracket = pop\n \
    \               if (hasClose(closeBracket)) {\n                    parse(bracket)\n\
    \                }\n                else {\n                    push(bracket)\n\
    \                }\n            }\n        }\n\n        for (i <- 0 until bracketCount)\
    \ {\n            val bracket = brackets(i)\n            if (isOpen(bracket)) {\n\
    \                parse(bracket)\n            }\n        }\n\n        if (stack.size\
    \ != bracketCount) {\n            return false\n        }\n        else {\n  \
    \          return true\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E100] Syntax Error: /tmp/tmpxm9sz1bj.scala:43:35 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                \e[33mval\e[0m \e[36mcloseBracket\e[0m\
    \ = pop\n\e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e\
    [31m   |\e[0m                              \e[33mmethod\e[0m \e[35mpop\e[0m must\
    \ be called with () argument\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxm9sz1bj.scala:55:23 --------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m            \e[33mif\e[0m (isOpen(bracket)) {\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (bracket : Char)\n\e[31m   |\e[0m                       Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxm9sz1bj.scala:56:22\
    \ --------------------\e[0m\e[0m\n\e[31m56 |\e[0m                parse(bracket)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (bracket : Char)\n\e[31m   |\e[0m                \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").filter(_.nonEmpty)\n\
    \        val closingBrackets = brackets.split(\">\").filter(_.nonEmpty)\n    \
    \    val nonOpeningBrackets = brackets.filterNot(_.nonEmpty)\n        openingBrackets.length\
    \ == closingBrackets.length && openingBrackets.toSet == closingBrackets.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4fn6iq1e.scala:17:54 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnonOpeningBrackets\e[0m\
    \ = brackets.filterNot(_.nonEmpty)\n\e[31m\e[31m   |\e[0m                    \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      value nonEmpty is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // For each opening bracket, count the number of closing brackets\n\
    \        // that precede it. Return true if exactly one closing bracket appears\n\
    \        // before any opening bracket. If exactly two brackets appear, the\n\
    \        // first opening bracket must be preceded by a closing bracket.\n   \
    \     var bracketCounts = Map[Char, Int]()\n        var foundOpeningBracket =\
    \ false\n        for(i <- 0 to brackets.length-1){\n            val currentChar\
    \ = brackets(i)\n            if(currentChar == '<') {\n                val nextChar\
    \ = brackets(i+1)\n                if(nextChar == '>') {\n                   \
    \ foundOpeningBracket = true\n                    bracketCounts += ('>' -> 1)\n\
    \                } else if (nextChar == '<') {\n                    bracketCounts\
    \ += ('>' -> 1)\n                } else {\n                    bracketCounts +=\
    \ ('>' -> 1)\n                }\n            } else if (currentChar == '>') {\n\
    \                foundOpeningBracket = true\n                bracketCounts +=\
    \ ('>' -> 1)\n            } else if (currentChar == '<') {\n                foundOpeningBracket\
    \ = true\n                bracketCounts += ('>' -> 1)\n            } else if(currentChar\
    \ == '>') {\n                foundOpeningBracket = true\n                bracketCounts\
    \ += ('>' -> 1)\n            }\n        }\n        if(!foundOpeningBracket){\n\
    \            return false\n        }\n        var foundClosingBracket = false\n\
    \        for(i <- 0 to brackets.length-1){\n            val currentChar = brackets(i)\n\
    \            if(currentChar == '>') {\n                val nextChar = brackets(i+1)\n\
    \                if(nextChar == '<') {\n                    foundClosingBracket\
    \ = true\n                }\n            } else if (currentChar == '>') {\n  \
    \              foundClosingBracket = true\n            }\n        }\n        return\
    \ !foundClosingBracket\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.correctBracketing$$anonfun$2(tmpekyg0w52.scala:51)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.correctBracketing(tmpekyg0w52.scala:58)\n\
    \tat Problem$.main(tmpekyg0w52.scala:62)\n\tat Problem.main(tmpekyg0w52.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBracket = brackets.substring(1)\n        val closingBracket\
    \ = brackets.substring(0,1)\n        val newBrackets = brackets.substring(1,brackets.length)\n\
    \        val newBracketList = (newBrackets split \">>>\" map (x => x + \"<\" +\
    \ x + \">\")).toList\n        val openBracketList = (openingBracket split \">>>\"\
    \ map (x => x + \"<\" + x + \">\")).toList\n        val openBracketSet = openBracketList.map(x\
    \ => x.replace(\"<\",\"\").replace(\"<\",\"\")).toSet\n        val openBracketListSet\
    \ = openBracketList.map(x => x.replace(\"<\",\"\").replace(\"<\",\"\")).toSet\n\
    \        val openBracketListSet2 = openBracketListSet.intersect(openBracketListSet)\n\
    \        val openBracketListSet3 = openBracketListSet.intersect(openBracketListSet2)\n\
    \        if(newBracketList.length == openBracketListSet.length){\n           \
    \ true\n        }else{\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvo3iekjr.scala:24:55 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m(newBracketList.length == openBracketListSet.length){\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value length is not a member\
    \ of Set[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var isBracketCorrect = false\n        for (bracket <- brackets.toList)\n\
    \        {\n            isBracketCorrect = brackets.indexOf(bracket) != brackets.lastIndexOf(bracket)\
    \ + 1 && isBracketCorrect\n        }\n        isBracketCorrect\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9fynz1tr.scala:23)\n\tat Problem.main(tmp9fynz1tr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val charSet = brackets.toSet\n        var foundOpeningBracket =\
    \ false\n        brackets.foreach(charSet.contains(_)) {\n            if ((charSet\
    \ - Set(\">\", \"<\", \"(\")).contains(_)) {\n                foundOpeningBracket\
    \ = true\n            }\n        }\n        return foundOpeningBracket\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmplbemtcbf.scala:17:24 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        brackets.foreach(charSet.contains(_)) {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        \e[33mmethod\e[0m \e[35mforeach\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmplbemtcbf.scala:18:56 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mif\e[0m ((charSet - Set(\e[31m\">\"\e[0m, \e[31m\"<\"\
    \e[0m, \e[31m\"(\"\e[0m)).contains(_)) {\n\e[31m\e[31m   |\e[0m              \
    \                                          ^\e[0m\n\e[31m   |\e[0m Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m _$2 => (charSet - collection.mutable.Set(\e\
    [32m\">\"\e[0m, \e[32m\"<\"\e[0m, \e[32m\"(\"\e[0m)).contains(_$2).\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplbemtcbf.scala:18:30 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m ((charSet - Set(\e[31m\">\"\
    \e[0m, \e[31m\"<\"\e[0m, \e[31m\"(\"\e[0m)).contains(_)) {\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    scala.collection.mutable.Set[String]\n\e[31m   |\e\
    [0m                          Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.contains(\"<\") && (brackets.contains(\"<\")) ? true\n\
    \        :\n        brackets.contains(\">\") && (brackets.contains(\">\")) ? true\n\
    \        :\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyxa7fvvx.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        brackets.contains(\e[31m\">\"\e[0m) && (brackets.contains(\e\
    [31m\">\"\e[0m)) ? \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \     ^\e[0m\n\e[31m   |\e[0m                         end of statement expected\
    \ but '(' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyxa7fvvx.scala:15:59\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.contains(\e\
    [31m\"<\"\e[0m) && (brackets.contains(\e[31m\"<\"\e[0m)) ? \e[31mtrue\e[0m\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value ? is not a member\
    \ of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // find how many brackets we have, i.e. count the opening and closing\
    \ brackets.\n        var count = 0\n        var opening = 0\n        var closing\
    \ = 0\n        // iterate through the brackets.\n        for (c <- brackets) {\n\
    \            if (c == '<') {\n                count += 1\n            } else if\
    \ (c == '>') {\n                count -= 1\n            }\n            // if we\
    \ have zero brackets we return false.\n            if (count == 0) {\n       \
    \         return false\n            }\n            // if we have non-zero brackets\
    \ we move on to the next bracket.\n            else {\n                opening\
    \ += count\n                closing += count\n            }\n        }\n     \
    \   // return true if we have 0 opening brackets\n        // and 0 closing brackets.\n\
    \        return opening == 0 && closing == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15q3f__3.scala:41)\n\tat Problem.main(tmp15q3f__3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsSet = brackets.toSet\n        val opening = brackets.split(\"\
    [<>]\").map(x => x.toInt)\n        val closing = brackets.split(\"[<>]\").map(x\
    \ => x.toInt).map(x => Math.min(x, bracketsSet.size))\n        opening.zip(closing).forall\
    \ { case (left, right) => left <= right }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68ilf54_.scala:25)\n\tat Problem.main(tmp68ilf54_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var closed = false\n        brackets.toList foreach {\n       \
    \     case \">\" =>\n                if (!closed)\n                    closed\
    \ = true\n                else\n                    closed = false\n         \
    \   case \"<\" =>\n                if (closed)\n                    closed = false\n\
    \                else\n                    closed = true\n            case _ \
    \ => {}\n        }\n        closed\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnvdq52_d.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e[31m\">\"\e[0m =>\n\e[31m\e\
    [31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnvdq52_d.scala:22:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m\"<\"\e[0m =>\n\e[31m\e[31m   |\e[0m             \
    \    ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be\
    \ compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracketStack = new Stack[Char]()\n        var bracketCount\
    \ = 0\n        for (i <- brackets) {\n            if (i == '<') {\n          \
    \      if (bracketCount > 0) {\n                    return false\n           \
    \     }\n                bracketStack.push(i)\n                bracketCount++\n\
    \            } else if (i == '>') {\n                if (bracketCount == 0) {\n\
    \                    return false\n                }\n                bracketStack.pop()\n\
    \                bracketCount--\n            } else {\n                bracketStack.push(i)\n\
    \                bracketCount++\n            }\n        }\n        if (bracketStack.isEmpty)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqwtwrbe6.scala:23:30 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                bracketCount++\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpqwtwrbe6.scala:29:30 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                bracketCount--\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpqwtwrbe6.scala:32:30 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                bracketCount++\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def unbalanced(str: String) : Boolean = { \n            // \"<<<\"\
    \n            if (str.charAt(0) != \"<\") false else { \n                // \"\
    <><>\"\n                if (str.charAt(1) != \"<\") false else { \n          \
    \          // \"<<>>\"\n                    if (str.charAt(2) != \"<\") false\
    \ else { \n                        // \"><<<\"\n                        if (str.charAt(3)\
    \ != \">\") false else { \n                            // \">>>>\"\n         \
    \                   if (str.charAt(4) != \">\") false else { \n              \
    \                  // \"<<<<\"\n                                if (str.charAt(5)\
    \ != \"!\") false else true\n                            }\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        def balanced(str: String) : Boolean = { \n            // \"<<<\"\n  \
    \          if (str.charAt(0) != \"<\") false else { \n                // \"<><>\"\
    \n                if (str.charAt(1) != \"<\") false else { \n                \
    \    // \"<<>>\"\n                    if (str.charAt(2) != \"<\") false else {\
    \ \n                        // \"><<<\"\n                        if (str.charAt(3)\
    \ != \">\") false else { \n                            // \">>>>\"\n         \
    \                   if (str.charAt(4) != \">\") false else { \n              \
    \                  // \"<<<<\"\n                                if (str.charAt(5)\
    \ != \"!\") false else true\n                            }\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        val newList = brackets.split(\"\")\n        val newList2 = newList.dropRight(1)\n\
    \        val newList3 = newList2.dropRight(1)\n        val newList4 = newList3.dropRight(1)\n\
    \        val newList5 = newList4.dropRight(1)\n        val newList6 = newList5.dropRight(1)\n\
    \        val newList7 = newList6.dropRight(1)\n        val newList8 = newList7.dropRight(1)\n\
    \        val newList9 = newList8.dropRight(1)\n        val newList10 = newList9.dropRight(1)\n\
    \        val newList11 = newList10.dropRight(1)\n        val newList12 = newList11.dropRight(1)\n\
    \        val newList13 = newList12.dropRight(1)\n        val newList14 = newList13.dropRight(1)\n\
    \        val newList15 = newList14.dropRight(1)\n        val newList16 = newList15.dropRight(1)\n\
    \        val newList17 = newList16.dropRight(1)\n        val newList18 = newList17.dropRight(1)\n\
    \        val newList19 = newList18.dropRight(1)\n        val newList20 = newList19.dropRight(1)\n\
    \        val newList21 = newList20.dropRight(1)\n        val newList22 = newList21.dropRight(1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjo2kikll.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (str.charAt(\e[31m0\e[0m) !=\
    \ \e[31m\"<\"\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m { \n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjo2kikll.scala:19:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \         \e[33mif\e[0m (str.charAt(\e[31m1\e[0m) != \e[31m\"<\"\e[0m) \e[31mfalse\e\
    [0m \e[33melse\e[0m { \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjo2kikll.scala:21:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mif\e[0m (str.charAt(\e[31m2\e\
    [0m) != \e[31m\"<\"\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m { \n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpjo2kikll.scala:23:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        \e[33mif\e[0m (str.charAt(\e\
    [31m3\e[0m) != \e[31m\">\"\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m { \n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpjo2kikll.scala:25:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                            \e[33mif\e[0m (str.charAt(\e\
    [31m4\e[0m) != \e[31m\">\"\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m { \n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjo2kikll.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                                \e[33mif\e[0m (str.charAt(\e\
    [31m5\e[0m) != \e[31m\"!\"\e[0m) \e"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var leftCount : Int = 0\n        var rightCount : Int = 0\n   \
    \     var currentBracket : String = \"\"\n        var isRight : Boolean = false\n\
    \        for (crust <- brackets) {\n            if (cru == \"<\")\n          \
    \      leftCount += 1\n            else {\n                currentBracket = cru\n\
    \                isRight = cru == \">\"\n                rightCount += 1\n   \
    \         }\n        }\n        isRight == (leftCount > rightCount)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fjoycqa.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (cru == \e[31m\"<\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: cru\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fjoycqa.scala:23:33\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                currentBracket\
    \ = cru\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Not found: cru\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fjoycqa.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isRight = cru == \e[31m\">\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m       \
    \                   Not found: cru\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[String]()\n        val result = new StringBuilder\n\
    \n        val lastChar = brackets.last\n\n        for(c <- brackets){\n      \
    \      c match {\n                case \">\" => stack.push(c)\n              \
    \  case lastChar =>\n                    val popped = stack.pop()\n          \
    \          if(popped == lastChar)\n                        return false\n    \
    \                else\n                        result.append((popped))\n     \
    \       }\n        }\n\n        result != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8l8rm5e.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpg8l8rm5e.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m\">\"\e[0m => stack.push(c)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length < 2) return false\n        val count = brackets.split('\
    \ ').length\n        var openCount : Int = 0\n        var closeCount : Int = 0\n\
    \        for (b <- brackets.split(' ')) {\n            if (b == '<') {\n     \
    \           if (openCount == 0) return false\n                openCount--\n  \
    \          } else if (b == '>') {\n                if (closeCount == 0) return\
    \ false\n                closeCount++\n            } else if (b == \">\") {\n\
    \                if (closeCount == 0) return false\n                closeCount--\n\
    \            } else if (b == \"<\") {\n                if (openCount == 0) return\
    \ false\n                openCount++\n            }\n        }\n        return\
    \ closeCount == 0 && openCount == count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk4q2u2wj.scala:22:27 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                openCount--\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpk4q2u2wj.scala:25:28 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                closeCount++\n\e[31m\e[31m   |\e[0m                  \
    \          ^\e[0m\n\e[31m   |\e[0m                            expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpk4q2u2wj.scala:28:28 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                closeCount--\n\e[31m\e[31m   |\e[0m                  \
    \          ^\e[0m\n\e[31m   |\e[0m                            expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpk4q2u2wj.scala:31:27 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                openCount++\n\e[31m\e[31m   |\e[0m                   \
    \        ^\e[0m\n\e[31m   |\e[0m                           expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpk4q2u2wj.scala:20:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     \e[33mif\e[0m (b == \e[31m'<'\e[0m) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpk4q2u2wj.scala:23:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (b == \e[31m'>'\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared wit"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.isEmpty) true\n        else {\n            def matchBracket(bracket:\
    \ String): Boolean = brackets.indexOf(bracket) != -1\n\n            def findFirstOpening(index:\
    \ Int, brackets: Array[String]): Int = {\n                index until brackets.indexOf('>',\
    \ index) match {\n                    case 0 => -1\n                    case i\
    \ if matchBracket(brackets(i)) => i\n                    case i =>\n         \
    \               val j = findFirstOpening(i, brackets)\n                      \
    \  if (j != -1) j else i\n                }\n            }\n            val openingIndex\
    \ = findFirstOpening(0, brackets.split('>').toArray)\n            brackets.indexOf('<',\
    \ openingIndex) match {\n                case -1 => true\n                case\
    \ index =>\n                    brackets.indexOf('<', index) match {\n       \
    \                 case -1 => false\n                        case i if matchBracket(brackets(i))\
    \ => true\n                        case i =>\n                            val\
    \ j = findFirstOpening(i, brackets)\n                            if (j != -1)\
    \ true else false\n                    }\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp01unm04r.scala:20:45\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                index until brackets.indexOf(\e\
    [31m'>'\e[0m, index) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m               \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \                        Found:    (\e[31m'>'\e[0m : Char)\n\e[31m   |\e[0m  \
    \                                           Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp01unm04r.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m \e[31m0\e[0m => -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m          Values of types Int and Range cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp01unm04r.scala:22:52 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m i \e[33mif\e[0m matchBracket(brackets(i))\
    \ => i\n\e[31m\e[31m   |\e[0m                                                \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \  Found:    (i : Range)\n\e[31m   |\e[0m                                    \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp01unm04r.scala:22:59 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                    \e[33mcase\e[0m i \e[33mif\e[0m matchBracket(brackets(i))\
    \ => i\n\e[31m\e[31m   |\e[0m                                                \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \         Found:    (i : Range)\n\e[31m   |\e[0m                             \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp01unm04r.scala:24:49 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                        \e[33mval\e[0m \e[36mj\e[0m = findFirstOpenin"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets flatMap (c => if (c == '<') Some('>') else Some('<'))\
    \ forall { c =>\n            brackets.indexOf(c) == brackets.lastIndexOf(c)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpln7re117.scala:21)\n\tat Problem.main(tmpln7re117.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[String]\n        val inParenthesisCount =\
    \ 0\n        for (char <- brackets.toCharArray) {\n            if (char == '<')\
    \ {\n                stack.push(\"<\")\n            } else if (char == '>') {\n\
    \                if (inParenthesisCount > 0) {\n                    inParenthesisCount\
    \ -= 1\n                } else {\n                    stack.pop()\n          \
    \      }\n            } else if (char == '(') {\n                inParenthesisCount\
    \ += 1\n            } else if (char == ')') {\n                if (inParenthesisCount\
    \ > 0) {\n                    inParenthesisCount -= 1\n                } else\
    \ {\n                    stack.pop()\n                }\n            }\n     \
    \   }\n        stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphpz3pk0b.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    inParenthesisCount -= \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m   value -= is not a member of Int - did you mean inParenthesisCount.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphpz3pk0b.scala:27:35 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                inParenthesisCount += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \   value += is not a member of Int - did you mean inParenthesisCount.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphpz3pk0b.scala:30:39 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    inParenthesisCount -= \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m   value -= is not a member of Int - did you mean inParenthesisCount.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // for each character in the brackets string,\n        // check\
    \ if the character is \"<\"\n        for(c <- brackets){\n            if(!(c ==\
    \ \"<\"))\n                return false\n        }\n        // for each character\
    \ in the brackets string,\n        // check if the character is \">\"\n      \
    \  for(c <- brackets){\n            if(c == \">\")\n                return true\n\
    \        }\n        // if no brackets are closed, then the brackets are open for\
    \ all characters\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppvyyikei.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(!(c == \e[31m\"<\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmppvyyikei.scala:24:15 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(c == \e[31m\">\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // if brackets is empty, return true.\n        if (!brackets.length)\
    \ return true\n        val opening = brackets.substring(0,brackets.indexOf('>'))\n\
    \        val closing = brackets.substring(brackets.indexOf('>')+1)\n        //\
    \ remove duplicate opening brackets, if any.\n        var openingList = new mutable.LinkedList[Int]()\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=opening.indexOf('>')\n        openingList+=opening.indexOf('>')\n\
    \        openingList+=\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpudpah27a.scala:65:21 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        openingList+=\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpudpah27a.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mif\e[0m (!brackets.length) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  value unary_! is not a member of Int - did you mean Int.unary_+?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpudpah27a.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mopeningList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets match {\n            case \"<>\" => true\n           \
    \ case \">>\" => false\n            case \"<<\" => false\n            case \"\
    >>>\" => true\n            case x => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyzajrss.scala:25)\n\tat Problem.main(tmpbyzajrss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.isEmpty) return false\n        val opening = brackets.split(\"\
    <\")\n        val closing = brackets.split(\">\")\n        val matchedBrackets\
    \ = opening ++ closing\n        val openingBracketSet = Set(brackets)\n      \
    \  val closingBracketSet = Set(brackets)\n        val matchedBracketsCount = matchedBrackets.length\n\
    \        if (openingBracketSet.size == 0 || closingBracketSet.size == 0 || matchedBracketsCount\
    \ == openingBracketSet.size && matchedBracketsCount == closingBracketSet.size)\
    \ return false\n        for (bracket <- opening ++ closing) {\n            val\
    \ pair = bracket.split(\"<->\")\n            if (pair.length == 1) return false\n\
    \            if (pair(0) != pair(1)) return false\n            if (openingBracketSet.add(bracket))\
    \ {\n                val newBrackets = openingBracketSet.toSet\n             \
    \   if (newBrackets.remove(pair(0))) {\n                    closingBracketSet.remove(pair(0))\n\
    \                    newBrackets.add(pair(0))\n                    correctBracketing(newBrackets.toString\
    \ + \"<->\" + closingBracketSet.toSet)\n                }\n            }\n   \
    \     }\n        return true\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyb1_s1mm.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m (newBrackets.remove(pair(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of Set[String] - did you mean\
    \ newBrackets.reduce?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyb1_s1mm.scala:31:32\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    newBrackets.add(pair(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue add is not a member of Set[String], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val opening = brackets.split(\"<\").map(_.remove(0)).toSet\n  \
    \      val closing = brackets.split(\">\").map(_.remove(0)).toSet\n        val\
    \ missingClosing = closing - opening\n        val missingOpening = opening - closing\n\
    \        missingClosing.isEmpty  && missingOpening.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan8ooqqb.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopening\e[0m = brackets.split(\e\
    [31m\"<\"\e[0m).map(_.remove(\e[31m0\e[0m)).toSet\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             value remove is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpan8ooqqb.scala:15:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopening\e[0m = brackets.split(\e\
    [31m\"<\"\e[0m).map(_.remove(\e[31m0\e[0m)).toSet\n\e[31m\e[31m   |\e[0m     \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan8ooqqb.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mclosing\e[0m = brackets.split(\e[31m\">\"\e[0m).map(_.remove(\e[31m0\e[0m)).toSet\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value remove is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpan8ooqqb.scala:16:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosing\e[0m = brackets.split(\e\
    [31m\">\"\e[0m).map(_.remove(\e[31m0\e[0m)).toSet\n\e[31m\e[31m   |\e[0m     \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.foldLeft[Boolean](true)( (acc, next) =>\n        acc &&\
    \ next.equals(brackets(acc.length-1)) )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4fg7o_oa.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        acc && next.equals(brackets(acc.length-\e[31m1\e\
    [0m)) )\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsLength = brackets.length\n        val pairMap = new\
    \ mutable.HashMap[Char, Char]()\n        for (i <- 0 to bracketsLength-1) {\n\
    \            val c = brackets(i)\n            val p = if (i==0) \"(\" else \"\
    )\"\n            if (c == '<') {\n                if (!pairMap.contains(c)) {\n\
    \                    pairMap(c) = p\n                } else {\n              \
    \      return false\n                }\n            }\n            if (c == '>')\
    \ {\n                if (pairMap.contains(c)) {\n                    return false\n\
    \                } else {\n                    pairMap(c) = p\n              \
    \  }\n            }\n        }\n        return pairMap.size == bracketsLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxbm44eo.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mpairMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.length % 2 != 0) return false\n        brackets.sliding(2).forall(_.length\
    \ == 1) && brackets.drop(brackets.length / 2).forall(_.length == 2)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5759bfc.scala:16:97 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        brackets.sliding(\e[31m2\e[0m).forall(_.length\
    \ == \e[31m1\e[0m) && brackets.drop(brackets.length / \e[31m2\e[0m).forall(_.length\
    \ == \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      var found = false\n      brackets.split(\"\").foreach { c =>\n  \
    \      if(c >= \"<\" && c <= \">\") {\n          found = true\n        }\n   \
    \   }\n      found\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dbti6kw.scala:28)\n\tat Problem.main(tmp_dbti6kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val pairs = brackets.toList\n        val openings = pairs.map(_.toLowerCase)\n\
    \        val closings = pairs.map(_.toUpperCase)\n        if (openings.isEmpty)\
    \ false\n        else if (closings.isEmpty) true\n        else openings.head ==\
    \ closings.head && openings.tail == closings.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdc2rac05.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenings\e[0m = pairs.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdc2rac05.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosings\e[0m = pairs.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_ => \"<\")\n \
    \       val closingBrackets = brackets.split(\">\").map(_ => \">\")\n        val\
    \ result = openingBrackets.zip(closingBrackets).forall {\n            case ((open,\
    \ close), true) => close.equals(open)\n            case _ => false\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6q9so8w.scala:18:33\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m ((open,\
    \ close), \e[31mtrue\e[0m) => close.equals(open)\n\e[31m\e[31m   |\e[0m      \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Found:    (\e[31mtrue\e[0m : Boolean)\n\e[31m   |\e[0m                    \
    \     Required: String\n\e[31m   |\e[0m                         pattern type is\
    \ incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val brackets = brackets.toList\n        val openingBrackets : List[String]\
    \ = brackets.filter(x => x == '<').toList\n        val closingBrackets : List[String]\
    \ = brackets.filter(x => x == '>').toList\n        val matchingBrackets : List[String]\
    \ = openingBrackets.filter(x => closingBrackets.contains(x)).filter(x => !openingBrackets.contains(x)).distinct\n\
    \        matchingBrackets.isEmpty\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgatjogw_.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = brackets.toList\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35mbrackets\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val count = new mutable.HashMap[String, Int]()\n        brackets.toList.reverse.foreach\
    \ { b =>\n            val c = counts.get(b); counts.put(b, c+1); c\n        }\n\
    \        count.values.toList.forall(_ == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzs4qv2_.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzs4qv2_.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mc\e[0m = counts.get(b); counts.put(b, c+\e[31m1\e[0m); c\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: counts\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzs4qv2_.scala:17:35\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mc\e[0m = counts.get(b); counts.put(b, c+\e[31m1\e[0m); c\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Not found: counts\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def isOpeningBracket(brackets : String) : Boolean = {\n       \
    \     brackets.charAt(0) match {\n                case '<' => true\n         \
    \       case _ => false\n            }\n        }\n        def isClosingBracket(brackets\
    \ : String) : Boolean = {\n            brackets.charAt(brackets.length - 1) match\
    \ {\n                case '>' => true\n                case _ => false\n     \
    \       }\n        }\n        def isAllOpeningBracketsClosedOrNotCorrect(brackets\
    \ : String) : Boolean = {\n            (isOpeningBracket(brackets) && isClosingBracket(brackets))\
    \ || isAllOpeningBracketsClosed(brackets)\n        }\n        def isAllOpeningBracketsClosed(brackets\
    \ : String) : Boolean = {\n            if (isOpeningBracket(brackets)) {\n   \
    \             isClosingBracket(brackets) && isAllOpeningBracketsClosedOrNotCorrect(brackets.substring(0,\
    \ brackets.length - 1))\n            } else {\n                isAllOpeningBracketsClosedOrNotCorrect(brackets.substring(0,\
    \ brackets.length - 1))\n            }\n        }\n        val allOpeningBracketsClosed\
    \ = isAllOpeningBracketsClosed(brackets)\n        allOpeningBracketsClosed\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwpet3o2j.scala:41)\n\tat Problem.main(tmpwpet3o2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val closed = brackets.substring(0,brackets.length-1)\n        var\
    \ closed = closed.toUpperCase\n        var opened = brackets.substring(1,brackets.length)\n\
    \        var opened = (opened).toUpperCase\n        return !(opened.contains(closed))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xz5vy7p.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mclosed\e[0m = closed.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mclosed is already defined as \e[33mvalue\e[0m \e[35mclosed\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xz5vy7p.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopened\e[0m = (opened).toUpperCase\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopened is already defined as \e[33mvariable\e[0m \e[35mopened\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def isBracket(x : String) : Boolean = {\n            x match {\n\
    \                case \"<\" => true\n                case \">\" => true\n    \
    \            case \">>\" => true\n                case \"><<\" => true\n     \
    \           case \"<<\" => true\n                case _ => false\n           \
    \ }\n        }\n        val bracketArray = brackets.toArray\n        var isOpen\
    \ = false\n        var isClose = false\n        var open = 0\n        var close\
    \ = 0\n        var match = 0\n        var i = 0\n        for(x <- bracketArray)\
    \ {\n            i += 1\n            if(isBracket(x)) {\n                if(isOpen)\
    \ {\n                    open += 1\n                    if(open > close) {\n \
    \                       isOpen = false\n                        isClose = true\n\
    \                    }\n                } else {\n                    close +=\
    \ 1\n                    if(open > close) {\n                        isOpen =\
    \ true\n                        isClose = false\n                    }\n     \
    \           }\n                match += 1\n            } else {\n            \
    \    match += 1\n            }\n        }\n        if(open > close) {\n      \
    \      true\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpc1biwj4k.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[33mmatch\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1biwj4k.scala:48:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m                \e[33mmatch\e\
    [0m += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      ^^\e[0m\n\e[31m\
    \   |\e[0m                      '{' expected, but identifier found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpc1biwj4k.scala:49:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m\
    \              ^^^^\e[0m\n\e[31m   |\e[0m              end of statement expected\
    \ but 'else' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1biwj4k.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpc1biwj4k.scala:34:25 --------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m            \e[33mif\e[0m(isBracket(x)) {\n\e[31m\e[31m   |\e[0m\
    \                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (x : Char)\n\e[31m   |\e[0m                         Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpc1biwj4k.scala:48:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                \e[33mmatch\e[0m += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \ Values of types Null and Unit cannot be compared with == or !=\n\e[31m49 |\e\
    [0m            } \e[33melse\e[0m {\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc1biwj4k.scala:74:1 ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m}\n\
    \e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m\
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling w"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val leftCounts\
    \ = mutable.Map.empty[Char, Int]\n        val rightCounts = mutable.Map.empty[Char,\
    \ Int]\n        bracketsArray.foreach { c =>\n            // if left count for\
    \ this char is zero, increment and set new left count\n            if (leftCounts.contains(c))\
    \ {\n                leftCounts(c) += 1\n            } else {\n              \
    \  // if left count is not zero, decrement it by 1 and set new left count\n  \
    \              leftCounts += (c -> leftCounts(c) - 1)\n            }\n       \
    \     // if right count for this char is zero, increment and set new right count\n\
    \            if (rightCounts.contains(c)) {\n                rightCounts(c) +=\
    \ 1\n            } else {\n                // if right count is not zero, decrement\
    \ it by 1 and set new right count\n                rightCounts += (c -> rightCounts(c)\
    \ - 1)\n            }\n        }\n\n        // the brackets must match\n     \
    \   (leftCounts.size == bracketsArray.length) && (rightCounts.size == bracketsArray.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprf7gcrm1.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mleftCounts\e[0m = mutable.Map.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprf7gcrm1.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mrightCounts\e[0m = mutable.Map.empty[\e[35mChar\e[0m, \e[35mInt\e[0m]\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val len = brackets.length\n        if(len == 0)\n            return\
    \ true\n        val stack = mutable.Stack[Int]()\n        // for every opening\
    \ bracket, append its position to the stack\n        // until we reach the closing\
    \ bracket.\n        for(i <- 0 until len) {\n            val c = brackets(i)\n\
    \            if(c == '<')\n                stack += i\n            else if(c ==\
    \ '>')\n                while(stack.nonEmpty && stack.head != i) {\n         \
    \           val toppos = stack.head\n                    stack.remove()\n    \
    \                if(stack.toString.equals(s\"${toppos}>\"))\n                \
    \        return false\n                }\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"\
    )) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_vyefjl.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsChars = brackets.toCharArray\n        val bracketsLen\
    \ = brackets.length\n\n        // a map from opening bracket to closing bracket\
    \ position\n        val openingBracketPositions = mutable.Map(brackets.head.asInstanceOf[Int])\n\
    \        for(i <- 1 to bracketsLen-1) {\n            val bracket = brackets(i).asInstanceOf[Char]\n\
    \            if(!openingBracketPositions.contains(bracket)) {\n              \
    \  openingBracketPositions += (bracket.asInstanceOf[Int])\n            }\n   \
    \     }\n\n        // a map from closing bracket to opening bracket position\n\
    \        val closingBracketPositions = mutable.Map(0 -> -1)\n        for(i <-\
    \ 1 to bracketsLen-1) {\n            val bracket = brackets(i).asInstanceOf[Char]\n\
    \            if(!closingBracketPositions.contains(bracket)) {\n              \
    \  closingBracketPositions += (bracket.asInstanceOf[Int])\n            }\n   \
    \     }\n\n        // return true if every opening bracket has a corresponding\
    \ closing bracket\n        for(i <- 0 to bracketsLen-1) {\n            val bracket\
    \ = brackets(i).asInstanceOf[Char]\n            if(!openingBracketPositions.contains(bracket))\
    \ {\n                return false\n            }\n            if(!closingBracketPositions.contains(bracket))\
    \ {\n                return false\n            }\n        }\n\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9fps7g1.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketPositions\e\
    [0m = mutable.Map(brackets.head.asInstanceOf[\e[35mInt\e[0m])\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn9fps7g1.scala:28:38 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketPositions\e\
    [0m = mutable.Map(\e[31m0\e[0m -> -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // This could use some optimization, but it's not worth it.\n \
    \       var brackets = brackets\n        while (brackets.length() > 1) {\n   \
    \         val openingBracket = brackets.charAt(0)\n            if (closingBracket(openingBracket))\
    \ {\n                brackets = brackets.substring(1)\n            } else {\n\
    \                return false\n            }\n        }\n        brackets.length()\
    \ == 1\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl9ysdqek.scala:16:23 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mbrackets\e[0m = brackets\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvariable\e[0m \e[35mbrackets\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9ysdqek.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m\
    \ (closingBracket(openingBracket)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: closingBracket\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketList = new mutable.ListBuffer[String]()\n        for\
    \ (i <- brackets.length) bracketList += brackets.charAt(i)\n\n        val unmatchedBrackets\
    \ = bracketList.filterNot(bracket => bracket.equals(\"<\"))\n        val matchedBrackets\
    \ = bracketList.filter(bracket => bracket.equals(\"<\"))\n        unmatchedBrackets.forall(unmatchedBracket\
    \ => {\n            matchedBrackets.contains(unmatchedBracket)\n        })\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8afplctn.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbracketList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8afplctn.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i\
    \ <- brackets.length) bracketList += brackets.charAt(i)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var i = 0\n        while (i < brackets.length) {\n            if\
    \ (brackets(i) === \"<\") {\n                if (brackets(i+1) === \"<\") {\n\
    \                    if (brackets(i+2) === \"<\") {\n                        if\
    \ (brackets(i+3) === \"<\") {\n                            if (brackets(i+4) ===\
    \ \"<\") {\n                                return false\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n            i += 1\n        }\n        true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93yz3gn.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (brackets(i) === \e[31m\"<\"\
    \e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               value === is not a member of Char - did you mean Char.==?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93yz3gn.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (brackets(i+\e[31m1\e[0m)\
    \ === \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value === is not a member of Char - did you\
    \ mean Char.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93yz3gn.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mif\e\
    [0m (brackets(i+\e[31m2\e[0m) === \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value === is not a member of Char - did you mean Char.==?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx93yz3gn.scala:20:42 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                        \e[33mif\e[0m (brackets(i+\e[31m3\e\
    [0m) === \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                          \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value === is not a member\
    \ of Char - did you mean Char.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93yz3gn.scala:21:46\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        \
    \    \e[33mif\e[0m (brackets(i+\e[31m4\e[0m) === \e[31m\"<\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               value === is not a member of Char - did you mean Char.==?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // split the string into separate <> pairs\n        val pairs =\
    \ brackets.split(\"<\").map(_.trim)\n        val opens = pairs.map(_.indexOf(\"\
    <\"))\n        val closes = pairs.map(_.indexOf(\">\"))\n        val allOpens\
    \ = opens.sum\n        val allCloses = closes.sum\n\n        if (allOpens == allCloses)\n\
    \            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbe9cgni5.scala:28)\n\tat Problem.main(tmpbe9cgni5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val brackets = brackets.split(\"\")\n        val stack = new mutable.Stack[String]()\n\
    \        for ((bracket, index) <- brackets.zipWithIndex) {\n            stack\
    \ += bracket\n            if (stack.last.equals(bracket)) {\n                stack\
    \ -= bracket\n            }\n            if (stack.size == 0 && !stack.isEmpty)\
    \ {\n                return false\n            }\n        }\n        stack.size\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq32qz2o8.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = brackets.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Recursive \e[33mvalue\e[0m \e[35mbrackets\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq32qz2o8.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def hasBracket(brackets : String) : Boolean = brackets.indexOf(brackets.head)\
    \ < brackets.lastIndexOf(brackets.last)\n        val openingBrackets = brackets.substring(1,brackets.length-1)\n\
    \        val closingBrackets = brackets.substring(0,1)\n        openingBrackets.contains(\"\
    <\") && hasBracket(openingBrackets) && hasBracket(closingBrackets)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3oe7g73.scala:21)\n\tat Problem.main(tmpe3oe7g73.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val isBracket = brackets.toSet.toList.foldLeft(true) {\n      \
    \      case (true, bracket) =>\n                bracket.charAt(0) == \">\" &&\n\
    \                bracket.charAt(bracket.length-1) == \"<\"\n            case (false,\
    \ bracket) =>\n                bracket.length == 1 && bracket.charAt(0) == \"\
    >\"\n        }\n        isBracket\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3nl2t1vv.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                bracket.charAt(\e[31m0\e[0m) == \e[31m\"\
    >\"\e[0m &&\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3nl2t1vv.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                bracket.length == \e[31m1\e[0m && bracket.charAt(\e\
    [31m0\e[0m) == \e[31m\">\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets match {\n            case \">\" :: \">\" => false\n  \
    \          case \">>\" :: \">>\" => true\n            case \">\" :: \">>\" ::\
    \ \">\" :: \">\" :: \">>\" :: \">>\" :: \">>\" :: \">\" :: \">\" :: \">>\" ::\
    \ \">\" :: \">>\" :: \">\" :: \">>\" :: \">\" :: \">>\" :: \">\" :: \">>\" =>\
    \ false\n            case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaf6dj3o.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e\
    [31m\">\"\e[0m :: \e[31m\">\"\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                        ^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (\e[32m\">\"\e[0m : String)\n\e[31m   |\e[0m                        Required:\
    \ List[Any]\n\e[31m   |\e[0m                        pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaf6dj3o.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e\
    [31m\">>\"\e[0m :: \e[31m\">>\"\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (\e[32m\">>\"\e[0m : String)\n\e[31m   |\e[0m                         Required:\
    \ List[Any]\n\e[31m   |\e[0m                         pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaf6dj3o.scala:18:144\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e\
    [31m\">\"\e[0m :: \e[31m\">>\"\e[0m :: \e[31m\">\"\e[0m :: \e[31m\">\"\e[0m ::\
    \ \e[31m\">>\"\e[0m :: \e[31m\">>\"\e[0m :: \e[31m\">>\"\e[0m :: \e[31m\">\"\e\
    [0m :: \e[31m\">\"\e[0m :: \e[31m\">>\"\e[0m :: \e[31m\">\"\e[0m :: \e[31m\">>\"\
    \e[0m :: \e[31m\">\"\e[0m :: \e[31m\">>\"\e[0m :: \e[31m\">\"\e[0m :: \e[31m\"\
    >>\"\e[0m :: \e[31m\">\"\e[0m :: \e[31m\">>\"\e[0m => \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                         Found:    (\e[32m\">>\"\
    \e[0m : String)\n\e[31m   |\e[0m                         Required: List[Any]\n\
    \e[31m   |\e[0m                         pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketings = mutable.ListBuffer[Boolean]()\n        for (x\
    \ <- brackets) {\n            if (bracketings.contains(x)) {\n               \
    \ false\n            } else {\n                bracketings += false\n        \
    \    }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjewolpjj.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbracketings\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = 0\n        var closing = 0\n        var charCount\
    \ = 0\n        brackets.toList match {\n            case _ if brackets.length\
    \ == 1 => true\n            case x :: _ => {\n                charCount = x.length\
    \ // charCount doesn't reset for subsequent chars because charCount is reused\
    \ for each char in the string.\n                opening = x.indexOf('(')\n   \
    \             closing = x.lastIndexOf(')')\n                x match {\n      \
    \              case x if opening>closing => true\n                    case _ =>\
    \ false\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcd7sk6u.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                charCount = x.length \e[34m// charCount\
    \ doesn't reset for subsequent chars because charCount is reused for each char\
    \ in the string.\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcd7sk6u.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                opening = x.indexOf(\e[31m'('\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value indexOf is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqcd7sk6u.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                closing = x.lastIndexOf(\e[31m')'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value lastIndexOf is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val closed = brackets.grouped(2).toList\n        val open = brackets.grouped(1).toList\n\
    \        open match {\n            case Nil => true\n            case x :: Nil\
    \ => false\n            case x :: y => x == y.head\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39b0yp1h.scala:24)\n\tat Problem.main(tmp39b0yp1h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingBracketsCount : Int = brackets.length\n        var openingBrackets\
    \ : List[String] = Nil\n        while (openingBracketsCount > 0) {\n         \
    \   openingBrackets = brackets.substring(0,openingBracketsCount).split(\"<\")\n\
    \            if (openingBrackets.nonEmpty) {\n                var closingBracketsCount\
    \ : Int = openingBrackets.length\n                var closingBrackets : List[String]\
    \ = Nil\n                while (closingBracketsCount > 0) {\n                \
    \    closingBrackets = brackets.substring(closingBracketsCount,brackets.length).split(\"\
    >\")\n                    if (closingBrackets.nonEmpty) {\n                  \
    \      closingBracketsCount -= 1\n                    }\n                }\n \
    \               openingBracketsCount -= 1\n            }\n        }\n        if\
    \ (openingBrackets.isEmpty) {\n            true\n        } else {\n          \
    \  false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdodm3a0b.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            openingBrackets =\
    \ brackets.substring(\e[31m0\e[0m,openingBracketsCount).split(\e[31m\"<\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                              Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdodm3a0b.scala:23:100\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    closingBrackets\
    \ = brackets.substring(closingBracketsCount,brackets.length).split(\e[31m\">\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                      Required: \e\
    [1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsCount = brackets.length\n        val stack = mutable.Stack[String]()\n\
    \        val queue = new mutable.Queue[String]()\n        val chars = brackets.toCharArray()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i) == '<')\n \
    \               stack += chars(i)\n            if (chars(i) == '>')\n        \
    \        if (stack.isEmpty) false else stack.pop\n                else {\n   \
    \                 val next = queue.dequeue\n                    if (next == \"\
    >\")\n                        stack.pop()\n                    else {\n      \
    \                  stack += next\n                        queue.append(next)\n\
    \                    }\n                }\n        !stack.isEmpty\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rj8irw8.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1rj8irw8.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mqueue\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // create mutable list of bracket pairs (as tuples)\n        var\
    \ bracketPairs = mutable.ListBuffer[(String,String)]()\n        // iterate through\
    \ brackets\n        for (char <- brackets) {\n            // if char is '<', add\
    \ tuple (\">\",char) to list\n            if (char == '<') {\n               \
    \ bracketPairs += (\">\",char)\n            // else if char is '>', add tuple\
    \ (\"<\",char) to list\n            } else if (char == '>') {\n              \
    \  bracketPairs += (\"<\",char)\n            // else if char is '<', add tuple\
    \ (\">\",char) to list\n            } else if (char == '<') {\n              \
    \  bracketPairs += (\">\",char)\n            // else if char is '>', add tuple\
    \ (\"<\",char) to list\n            } else if (char == '>') {\n              \
    \  bracketPairs += (\"<\",char)\n            // else add char to list\n      \
    \      } else {\n                bracketPairs += (char)\n            }\n     \
    \   }\n        // iterate through each tuple in list\n        for (pair <- bracketPairs)\
    \ {\n            // for each tuple in list, add 1 to length of tuple\n       \
    \     var tupleLength = pair._2.length\n            var newLength = tupleLength\
    \ + 1 \n            // remove '<' from end of string with length of tuple\n  \
    \          var newString = pair._1.substring(0,newLength)\n            // if new\
    \ string is not equal to old string, return false\n            if (newString !=\
    \ pair._1) {\n                return false\n            }\n        }\n       \
    \ // return true if list has at least one tuple\n        bracketPairs.length >\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppttpe1y2.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mbracketPairs\e[0m = mutable.ListBuffer[(\e\
    [35mString\e[0m,\e[35mString\e[0m)]()\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val s = brackets.toList\n        val m = s.length\n        for(\
    \ i <- 0 until m ) {\n            if( s(i) != s(i).reverse ) {\n             \
    \   return false\n            }\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0n75vfvn.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m( s(i) != s(i).reverse ) {\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value reverse is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        for (a <- brackets) yield {\n            for (b <- brackets) yield\
    \ {\n                if (a == b) false\n                else {\n             \
    \       val c = (a + b).toChar\n                    val d = (b + a).toChar\n \
    \                   if (c.isLetter) c.toUpper == d.toUpper\n                 \
    \   else c.toLower == d.toLower\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0il6kyc1.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (a <-\
    \ brackets) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    IndexedSeq[IndexedSeq[Boolean]]\n\e[31m   |\e[0m   \
    \     Required: Boolean\n\e[31m16 |\e[0m            \e[33mfor\e[0m (b <- brackets)\
    \ \e[33myield\e[0m {\n\e[31m17 |\e[0m                \e[33mif\e[0m (a == b) \e\
    [31mfalse\e[0m\n\e[31m18 |\e[0m                \e[33melse\e[0m {\n\e[31m19 |\e\
    [0m                    \e[33mval\e[0m \e[36mc\e[0m = (a + b).toChar\n\e[31m20\
    \ |\e[0m                    \e[33mval\e[0m \e[36md\e[0m = (b + a).toChar\n\e[31m21\
    \ |\e[0m                    \e[33mif\e[0m (c.isLetter) c.toUpper == d.toUpper\n\
    \e[31m22 |\e[0m                    \e[33melse\e[0m c.toLower == d.toLower\n\e\
    [31m23 |\e[0m                }\n\e[31m24 |\e[0m            }\n\e[31m25 |\e[0m\
    \        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var closed = false\n        var opened = false\n        var openCount\
    \ = 1\n        var closeCount = 0\n        for (x <- brackets) {\n           \
    \ if (x == \"<\") {\n                if (!opened)\n                    opened\
    \ = true\n                else\n                    openCount += 1\n         \
    \   } else if (x == \">\") {\n                if (!closed)\n                 \
    \   closed = true\n                else\n                    closeCount += 1\n\
    \            } else if (openCount != closeCount) {\n                return false\n\
    \            }\n        }\n        if (opened == false && closed == false)\n \
    \           return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg9igo0uo.scala:20:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (x == \e[31m\"<\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpg9igo0uo.scala:25:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x == \e[31m\"\
    >\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new mutable.Stack[String]\n        brackets.toList.foreach\
    \ { c =>\n            if(c == '<') {\n                stack.push(c)\n        \
    \    }\n            else if (c == '>') {\n                if(stack.isEmpty) {\n\
    \                    stack.length = 0\n                    false\n           \
    \     } else {\n                    if(!stack.pop.equals(\"<\")) {\n         \
    \               false\n                    } else {\n                        true\n\
    \                    }\n                }\n            }\n        }\n        stack.length\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf1gfy1w3.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpf1gfy1w3.scala:23:20\
    \ ----------------\e[0m\e[0m\n\e[33m23 |\e[0m                    \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                    ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpf1gfy1w3.scala:26:24\
    \ ----------------\e[0m\e[0m\n\e[33m26 |\e[0m                        \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                        ^^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpf1gfy1w3.scala:28:24\
    \ ----------------\e[0m\e[0m\n\e[33m28 |\e[0m                        \e[31mtrue\e\
    [0m\n\e[33m\e[33m   |\e[0m                        ^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 warnings found\n1 error found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def countBrackets(s: String) : Int = s.count(_ == '<') + s.count(_\
    \ == '>')\n        (s.length != brackets.length) || countBrackets(brackets) ==\
    \ brackets.length\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc7ot14x.scala:16:9 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        (s.length != brackets.length) || countBrackets(brackets)\
    \ == brackets.length\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m  \
    \       Not found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // We will count the number of opening brackets we encounter.\n\
    \        var openingCount = 0\n        // We will count the number of closing\
    \ brackets we encounter.\n        var closingCount = 0\n        // We will increment\
    \ by one each time we see a new opening bracket.\n        var count = 1\n    \
    \    // We will keep track of whether we encounter an opening bracket or not.\n\
    \        var bracketsEncountered = false\n        // We will keep track of whether\
    \ we encounter a closing bracket or not.\n        var bracketsEncounteredClosing\
    \ = false\n\n        // Iterate through the brackets.\n        for (c <- brackets)\
    \ {\n            // If the character c is a closing bracket, check if we have\
    \ encountered another closing bracket before\n            // incrementing the\
    \ count by 1. If we have, we have encountered a matching pair of brackets. \n\
    \            if (c == \">\") {\n                bracketsEncountered = true\n \
    \               bracketsEncounteredClosing = true\n            } else if (c ==\
    \ \"<\") {\n                bracketsEncounteredClosing = true\n            }\n\
    \            // If we encountered the closing bracket, we are no longer looking\
    \ at an opening bracket.\n            if (bracketsEncounteredClosing && count\
    \ != 1) {\n                bracketsEncountered = false\n                closingCount\
    \ += 1\n            }\n            // If we encountered the opening bracket, check\
    \ if we have encountered another opening bracket before\n            // incrementing\
    \ the count by one. If we have, we have encountered a matching pair of brackets.\n\
    \            if (c == \"<\") {\n                bracketsEncountered = true\n \
    \               openingCount += 1\n            } else if (c == \">\") {\n    \
    \            openingCount += 1\n            }\n            // If we encountered\
    \ another opening bracket, we are no longer looking at an closing bracket.\n \
    \           if (bracketsEncountered && count != 1) {\n                bracketsEncountered\
    \ = false\n                closingCount += 1\n            }\n            count\
    \ += 1\n        }\n        // We have encountered all closing brackets we need.\n\
    \        if (openingCount == closingCount) {\n            // We have enclosed\
    \ the entire string with brackets.\n            return true\n        } else {\n\
    \            // We did not enclose the entire string with brackets.\n        \
    \    return false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpid3ge_zg.scala:30:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (c == \e[31m\">\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpid3ge_zg.scala:33:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\"\
    <\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpid3ge_zg.scala:43:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpid3ge_zg.scala:46:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\"\
    >\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack : List[(Char,Int)] = Nil\n        for (i <- 0 until brackets.length)\n\
    \            if (brackets(i) == \">\") {\n                stack:::+= ('<', brackets(i).length)\n\
    \            } else if (brackets(i) == \"<\") {\n                if (stack.isEmpty)\n\
    \                    stack:::+= ('<', brackets(i).length)\n                else\
    \ {\n                    stack:::+= (stack.pop(), brackets(i).length)\n      \
    \          }\n            } else stack:::+= (brackets(i), 1)\n        (stack.isEmpty)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9r0tyueo.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (brackets(i) == \e[31m\">\"\
    \e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r0tyueo.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                stack:::+= (\e[31m'<'\e[0m, brackets(i).length)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :::+=\
    \ is not a member of List[(Char, Int)] - did you mean List[(Char, Int)].:::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r0tyueo.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                stack:::+= (\e[31m'<'\e[0m, brackets(i).length)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value length is not a member of\
    \ Char\n\e[31m\e[31m-- Error: /tmp/tmp9r0tyueo.scala:19:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (brackets(i)\
    \ == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r0tyueo.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    stack:::+=\
    \ (\e[31m'<'\e[0m, brackets(i).length)\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :::+= is not a member of List[(Char,\
    \ Int)] - did you mean List[(Char, Int)].:::?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9r0tyueo.scala:21:49 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                    stack:::+= (\e[31m'<'\e[0m, brackets(i).length)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r0tyueo.scala:23:25\
    \ ----------"
  stdout: ''
  timestamp: 1660010035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openings = brackets.split(\"<\").map(_.trim)\n        val closings\
    \ = brackets.split(\">\").map(_.trim)\n        val openingSet = Set(openings.mkString)\n\
    \        val closingSet = Set(closings.mkString)\n        openingSet.subsetOf(closingSet)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8w5vx22.scala:22)\n\tat Problem.main(tmpv8w5vx22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketMap = {\n            val map = scala.collection.mutable.HashMap[Int,\
    \ String]()\n            for ((i,s) <- brackets.split(\"\").zipWithIndex) map\
    \ += i -> s\n            map\n        }\n        val open = bracketMap.filter(_._2\
    \ != \">\").toSeq\n        val close = bracketMap.filter(_._2 == \">\").toSeq\n\
    \        // check whether opening and closing brackets are the same\n        val\
    \ same = open == close\n        if (same.nonEmpty) same.head else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf96qi_mw.scala:17:66\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m ((i,s)\
    \ <- brackets.split(\e[31m\"\"\e[0m).zipWithIndex) map += i -> s\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (String, Int)\n\e[31m   |\e[0m                                            \
    \     Required: (Int, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf96qi_mw.scala:24:17 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mif\e[0m (same.nonEmpty) same.head \e[33melse\e[0m \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value nonEmpty is not a member of Boolean\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpf96qi_mw.scala:24:32 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mif\e[0m (same.nonEmpty) same.head \e[33melse\e[0m\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value head is not a member of Boolean\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length != 2)\n            return false\n        val\
    \ openingBrackets = brackets.split(\"<\").map(_.toDouble).toSet\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toDouble).toSet\n        openingBrackets.subsetOf(closingBrackets)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: empty String\n\tat java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1842)\n\
    \tat java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\n\
    \tat java.base/java.lang.Double.parseDouble(Double.java:651)\n\tat scala.collection.StringOps$.toDouble$extension(StringOps.scala:956)\n\
    \tat Problem$.$anonfun$1(tmphyo2rv8p.scala:17)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.correctBracketing(tmphyo2rv8p.scala:17)\n\tat Problem$.main(tmphyo2rv8p.scala:22)\n\
    \tat Problem.main(tmphyo2rv8p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.takeWhile(c => c != \">\").forall(c => brackets.takeWhile(c\
    \ => c != \"<\").forall(c => c == \">\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcuup0fps.scala:15:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.takeWhile(\e[36mc\e[0m => c != \e[31m\"\
    >\"\e[0m).forall(\e[36mc\e[0m => brackets.takeWhile(\e[36mc\e[0m => c != \e[31m\"\
    <\"\e[0m).forall(\e[36mc\e[0m => c == \e[31m\">\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcuup0fps.scala:15:78 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        brackets.takeWhile(\e[36mc\e[0m => c != \e[31m\">\"\
    \e[0m).forall(\e[36mc\e[0m => brackets.takeWhile(\e[36mc\e[0m => c != \e[31m\"\
    <\"\e[0m).forall(\e[36mc\e[0m => c == \e[31m\">\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpcuup0fps.scala:15:100\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.takeWhile(\e\
    [36mc\e[0m => c != \e[31m\">\"\e[0m).forall(\e[36mc\e[0m => brackets.takeWhile(\e\
    [36mc\e[0m => c != \e[31m\"<\"\e[0m).forall(\e[36mc\e[0m => c == \e[31m\">\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                   ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.split(\"<\").toSet == brackets.split(\"<\").filterNot(x\
    \ => x == \">\").toSet\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqm2s_xt.scala:18)\n\tat Problem.main(tmpxqm2s_xt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      var openingBrackets : Int = 0\n      var closingBrackets : Int =\
    \ 0\n      brackets.foreach{ c =>\n          if (c == \"<\") {\n             \
    \ openingBrackets += 1\n          }\n          if (c == \">\") {\n           \
    \   closingBrackets += 1\n          }\n      }\n      return openingBrackets ==\
    \ closingBrackets\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp837_73iq.scala:18:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mif\e[0m (c == \e[31m\"<\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp837_73iq.scala:21:14 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m          \e[33mif\e[0m (c == \e[31m\">\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = brackets.toLowerCase().reverse\n        val openingSet\
    \ = Set(opening)\n        val closing = opening.reverse\n        val closingSet\
    \ = Set(closing)\n        var inCorrect = true\n        for (x <- opening) {\n\
    \            if (!openingSet.contains(x)) inCorrect = false\n        }\n     \
    \   if (!inCorrect) false\n        else {\n            var inCorrect = true\n\
    \            for (x <- closing) {\n                if (!closingSet.contains(x))\
    \ inCorrect = false\n            }\n            if (!inCorrect) false\n      \
    \      else {\n                val openingArray = opening.toArray\n          \
    \      var inCorrect = true\n                for (x <- closing) {\n          \
    \          if (!openingArray.contains(x)) inCorrect = false\n                }\n\
    \                if (!inCorrect) false\n                else {\n             \
    \       val closingArray = closing.toArray\n                    var inCorrect\
    \ = true\n                    for (x <- opening) {\n                        if\
    \ (!closingArray.contains(x)) inCorrect = false\n                    }\n     \
    \               if (!inCorrect) false\n                    else {\n          \
    \              val openingArray = opening.toArray\n                        var\
    \ inCorrect = true\n                        for (x <- closing) {\n           \
    \                 if (!openingArray.contains(x)) inCorrect = false\n         \
    \               }\n                        if (!inCorrect) false\n           \
    \             else {\n                            val closingArray = closing.toArray\n\
    \                            var inCorrect = true\n                          \
    \  for (x <- opening) {\n                                if (!closingArray.contains(x))\
    \ inCorrect = false\n                            }\n                         \
    \   if (!inCorrect) false\n                            else true\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvbtnuicg.scala:21:37\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (!openingSet.contains(x))\
    \ inCorrect = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (x : Char)\n\e[31m   |\e[0m                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvbtnuicg.scala:27:41\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m\
    \ (!closingSet.contains(x)) inCorrect = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                             Found:    (x : Char)\n\e[31m   |\e[0m          \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\").toList\n      \
    \  val closingBrackets = brackets.split(\"\\\\)\").toList\n        openingBrackets.isEmpty\n\
    \            || closingBrackets.isEmpty\n            || openingBrackets.size ==\
    \ closingBrackets.size\n            || openingBrackets.lastOption.isEmpty\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzlwzfhq.scala:27)\n\tat Problem.main(tmptzlwzfhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBracketCountMap = brackets.toSet.toMap[Char,Int]()\n\
    \        val openingBracketCount : Int = openingBracketCountMap(\"(\")\n     \
    \   if (openingBracketCount == 0) true else openingBracketCountMap(\")\") > openingBracketCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpse8nryqi.scala:15:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketCountMap\e\
    [0m = brackets.toSet.toMap[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter ev of \e[33mmethod\e[0m \e[35mtoMap\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mev: B\
    \ <:< (Char, Int)): Map[Char, Int]\n1 error found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openings = brackets.split('<').map(_.toInt)\n        val closings\
    \ = brackets.split('>').map(_.toInt)\n        val numOpenings = openings.length\n\
    \        val numClosings = closings.length\n        openings.zipWithIndex foreach\
    \ {\n            case (open, openIndex) =>\n                if (numClosings -\
    \ openIndex != 0) false\n            case _ =>\n                false\n      \
    \  }\n        closings.zipWithIndex foreach {\n            case (close, closeIndex)\
    \ =>\n                if (numOpenings - closeIndex != 0) false\n            case\
    \ _ =>\n                false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpo2vxclvi.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpo2vxclvi.scala:15)\n\
    \tat Problem$.main(tmpo2vxclvi.scala:34)\n\tat Problem.main(tmpo2vxclvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // Initialize a Stack of size 1.\n        val stack = Stack(List())\n\
    \        // Iterate over all brackets one at a time.\n        for (i <- 0 until\
    \ brackets.length -1) {\n            // Check if the current bracket is the closing\
    \ bracket of the previous bracket.\n            if (brackets(i) == brackets(i+1))\
    \ {\n                // If the current bracket is the closing bracket of the previous\
    \ bracket, then push the current bracket\n                // onto the stack and\
    \ remove it. This will yield a new stack that will contain the current bracket\n\
    \                // when the loop is finished.\n                stack.push(brackets(i))\n\
    \                stack.pop()\n            } else {\n                // If the\
    \ current bracket is not the closing bracket of the previous bracket, then return\
    \ false.\n                // This can occur when, for example, only one opening\
    \ bracket is provided.\n                return false\n            }\n        }\n\
    \        // If the stack is empty, return true.\n        if (stack.size == 0)\
    \ return true\n        // Otherwise, the stack is not empty, and there are no\
    \ correct brackets, so return false.\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppd6v35j1.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                stack.push(brackets(i))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Char\n\e[31m   |\e[0m                \
    \           Required: List[Nothing]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[Int]()\n        var opening = true\n\
    \        var open = 0\n        var closing = 0\n        var last: Char = ' ' //\
    \ last char\n        var lastOpening = true // last opening bracket\n        var\
    \ lastClosing = true // last closing bracket\n        var lastOpen = 0\n     \
    \   var lastClosing = 0\n        var found = false\n        for (i <- 0 until\
    \ brackets.length) lastOpening = (brackets(i) equals \">\")\n        for (i <-\
    \ 0 until brackets.length) lastClosing = (brackets(i) equals \"<\")\n        for\
    \ (i <- 0 until brackets.length)\n        {\n            last = brackets(i)\n\
    \            if (lastOpening)\n            {\n                if (lastClosing\
    \ && stack.size() > 0)\n                {\n                    // current closing\
    \ bracket has a previous opening bracket.\n                    val top = stack.pop()\n\
    \                    val next = stack.pop()\n                    // if the stack\
    \ is empty this means the two closing brackets are the opening.\n            \
    \        if (top == 0)\n                    {\n                        opening\
    \ = false\n                    }\n                    else\n                 \
    \   {\n                        // the closing bracket has a previous opening bracket.\n\
    \                        if (top != next)\n                        {\n       \
    \                     opening = false\n                        }\n           \
    \         }\n                }\n                else\n                {\n    \
    \                // current opening bracket has a previous closing bracket.\n\
    \                    if (stack.size() > 0)\n                    {\n          \
    \              val top = stack.pop()\n                        if (top == 0)\n\
    \                        {\n                            opening = false\n    \
    \                    }\n                    }\n                    else\n    \
    \                {\n                        // the opening bracket has a previous\
    \ closing bracket.\n                        // if there are no more opening brackets\
    \ then this is correct.\n                        opening = false\n           \
    \         }\n                }\n            }\n            else\n            {\n\
    \                // current closing bracket has a previous opening bracket.\n\
    \                // if there are more closing brackets then this is incorrect.\n\
    \                opening = false\n            }\n            open += 1\n     \
    \       if (!lastOpening && opening)\n            {\n                open -= 1\n\
    \            }\n            stack.push(open)\n        }\n        return opening\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyxet3kzl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mlastClosing\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastClosing\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastClosing\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxet3kzl.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openBracket = 0\n        var closeBracket = 0\n        brackets\
    \ match {\n            case \">\" => closeBracket = 1\n            case \"<\"\
    \ => openBracket = 1\n            case _ => return true\n        }\n        brackets.chars.toList.count(_\
    \ == '>') != brackets.chars.toList.count(_ == '<')\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv31u3ihe.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        brackets.chars.toList.count(_ == \e[31m'>'\e\
    [0m) != brackets.chars.toList.count(_ == \e[31m'<'\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toList is not\
    \ a member of java.util.stream.IntStream\n1 error found\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracketsCount = brackets.length\n        for (i <- 0 to bracketsCount\
    \ - 1 by -1) {\n            val openingBracket = brackets(i)\n            val\
    \ closingBracket = brackets(i + 1)\n            if (openingBracket == \">\" &&\
    \ closingBracket == \"<\") {\n                bracketsCount -= 1\n           \
    \ } else if (openingBracket == \"<\" && closingBracket == \"<\") {\n         \
    \       bracketsCount -= 1\n            } else if (openingBracket == \"<\" &&\
    \ closingBracket == \">\") {\n                bracketsCount -= 1\n           \
    \ } else {\n                return false\n            }\n        }\n        return\
    \ bracketsCount == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb2gsyrta.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (openingBracket == \e[31m\"\
    >\"\e[0m && closingBracket == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpb2gsyrta.scala:19:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mif\e[0m (openingBracket == \e[31m\">\"\e[0m && closingBracket == \e\
    [31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                                     \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpb2gsyrta.scala:21:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (openingBracket == \e[31m\"<\"\e[0m && closingBracket\
    \ == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpb2gsyrta.scala:21:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (openingBracket\
    \ == \e[31m\"<\"\e[0m && closingBracket == \e[31m\"<\"\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpb2gsyrta.scala:23:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (openingBracket\
    \ == \e[31m\"<\"\e[0m && closingBracket == \e[31m\">\"\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpb2gsyrta.scala:23:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (openingBracket\
    \ == \e[3"
  stdout: ''
  timestamp: 1660010040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      var closed = false\n      brackets.split(\"<\").foreach(x => {\n\
    \        if(x.matches(\"^[0-9a-zA-Z]+$\")) closed = true\n        else closed\
    \ = false\n      })\n      closed\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyqqhk7q5.scala:23)\n\tat Problem.main(tmpyqqhk7q5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingBrackets = \"\"\n        var closingBrackets = \"\"\n\
    \        for {\n            opening <- brackets.indexOf(\"<\") + 1\n         \
    \   closing <- brackets.indexOf(\">\", opening)\n        } yield {\n         \
    \   openingBrackets = openingBrackets + brackets.substring(opening, closing)\n\
    \            if (brackets.substring(opening, closing).equals(\"<\")) {\n     \
    \           openingBrackets = openingBrackets + \"<\"\n            }\n       \
    \     if (brackets.substring(opening, closing).equals(\">\")) {\n            \
    \    openingBrackets = openingBrackets + \">\"\n            }\n        }\n   \
    \     openingBrackets.equals(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpel5rjf8h.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            opening <- brackets.indexOf(\e[31m\"<\"\e\
    [0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value flatMap is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def scan(brackets : String, state : Set[String], count : Int, i\
    \ : Int) : Boolean = {\n            if (i < brackets.length)\n               \
    \ if (\"(\"==brackets(i))\n                    state.toSet.add(brackets(i))\n\
    \                else if (\")\"==brackets(i))\n                    if (!state.contains(brackets(i)))\n\
    \                        return false\n                    else \n           \
    \             state.toSet.remove(brackets(i))\n                else\n        \
    \            scan(brackets, state, count+1, i)\n            else\n           \
    \     count > 0\n        }\n        scan(brackets, Set(), 0, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmqqed1mp.scala:17:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (\e[31m\"(\"\e[0m==brackets(i))\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqqed1mp.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    state.toSet.add(brackets(i))\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ add is not a member of Set[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpmqqed1mp.scala:19:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (\e[31m\")\"\e[0m==brackets(i))\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmqqed1mp.scala:20:48 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mif\e[0m (!state.contains(brackets(i)))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        Found:    Char\n\e[31m\
    \   |\e[0m                                        Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqqed1mp.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        state.toSet.remove(brackets(i))\n\
    \e[31m\e["
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.zip(brackets.dropRight(1)).forall {\n            case(a,\
    \ b) => a != b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9fdul24.scala:20)\n\tat Problem.main(tmph9fdul24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var open : Boolean = true\n        var closed : Boolean = false\n\
    \        var stack : List[Char] = List(brackets.charAt(0))\n        while(open\
    \ && closed && stack.length > 0) {\n            open =\n                stack.head\
    \ == '<'\n            closed =\n                stack.head == '>'\n          \
    \  stack = stack.tail\n        }\n        open == closed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cfniamx.scala:28)\n\tat Problem.main(tmp0cfniamx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openBrackets = brackets.split(\"<\").length\n        val closeBrackets\
    \ = brackets.split(\">\").length\n        openBrackets == closeBrackets\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppc5axb8z.scala:20)\n\tat Problem.main(tmppc5axb8z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val opening = brackets.split(\"<\").map(_.toInt)\n        val closing\
    \ = brackets.split(\">\").map(_.toInt)\n        val pairs = mutable.ListBuffer[String]()\n\
    \        for (i <- opening.length; i <- opening.length - 1) {\n            pairs\
    \ += (i.toString + \" \" + opening(i) + \" \" + closing(i))\n        }\n     \
    \   pairs.toList.distinct.size == opening.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww5odfi5.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpww5odfi5.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- opening.length; i <- opening.length\
    \ - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value foreach is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.split(\"<\").length == brackets.split(\">\").length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2boge1vk.scala:18)\n\tat Problem.main(tmp2boge1vk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val opening = brackets.split( \">\" ).length - 1\n        val closing\
    \ = brackets.split( \"<\" ).length - 1\n        return opening == closing\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg03_64i_.scala:20)\n\tat Problem.main(tmpg03_64i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openings = \"\"\n        var closings = \"\"\n        for (c\
    \ <- brackets)\n        {\n            if(c == '<')\n                openings\
    \ += c\n            if(c == '>')\n                closings += c\n        }\n \
    \       return (openings.length() == closings.length())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yya0dy1.scala:32)\n\tat Problem.main(tmp3yya0dy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = -1\n        var closingBrackets = -1\n        for (c <- bracketsArray) {\n\
    \            if (c == '<') {\n                openingBrackets += 1\n         \
    \   } else if (c == '>') {\n                closingBrackets += 1\n           \
    \ }\n        }\n        openingBrackets <= closingBrackets\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0whsdvjh.scala:32)\n\tat Problem.main(tmp0whsdvjh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracket\
    \ = 0\n        var closingBracket = 0\n        var currentChar = 0\n        for(\
    \ i <- 0 to bracketsArray.length - 1 ) {\n            if( bracketsArray(i) ==\
    \ '<' ) {\n                if( bracketsArray(openingBracket) == '<' ) {\n    \
    \                openingBracket = openingBracket + 1\n                } else if(\
    \ bracketsArray(openingBracket) == '>' ) {\n                    openingBracket\
    \ = openingBracket + 1\n                } else {\n                    openingBracket\
    \ = openingBracket + 1\n                }\n            } else if( bracketsArray(i)\
    \ == '>' ) {\n                if( bracketsArray(closingBracket) == '<' ) {\n \
    \                   closingBracket = closingBracket + 1\n                } else\
    \ if( bracketsArray(closingBracket) == '>' ) {\n                    closingBracket\
    \ = closingBracket + 1\n                } else {\n                    closingBracket\
    \ = closingBracket + 1\n                }\n            } else if( bracketsArray(i)\
    \ == '<' ) {\n                openingBracket = openingBracket + 1\n          \
    \  }else if( bracketsArray(i) == '>' ) {\n                closingBracket = closingBracket\
    \ + 1\n            }\n        }\n        currentChar = bracketsArray(0)\n    \
    \    openingBracket <= closingBracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5wcvam0_.scala:50)\n\tat Problem.main(tmp5wcvam0_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketList = new mutable.ListBuffer[String]()\n        for\
    \ (i <- 1 to brackets.length)\n            if (brackets(i) eq \">\") bracketList\
    \ += brackets(i)\n            if (brackets(i) eq \"<\") bracketList += brackets(i)\n\
    \        bracketList.toSet.size == brackets.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpscsfg_vt.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbracketList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      brackets.toList match {\n        case List() => false\n        case\
    \ head :: tail =>\n          val bracketMap = mutable.HashMap[Char, Int]()\n \
    \         (head to tail.last).foreach{ c =>\n            c match {\n         \
    \     case '<' => bracketMap.put('>', 0); _\n              case '>' => bracketMap.put('>',\
    \ 1); _\n              case _   => ()\n            }\n          }\n          bracketMap\
    \ == bracketMap\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E017] Syntax Error: /tmp/tmp1hfwgknj.scala:21:50 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m              \e[33mcase\e[0m \e[31m'<'\e[0m => bracketMap.put(\e\
    [31m'>'\e[0m, \e[31m0\e[0m); _\n\e[31m\e[31m   |\e[0m                        \
    \                          ^\e[0m\n\e[31m   |\e[0m                       Unbound\
    \ placeholder parameter; incorrect use of _\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E017] Syntax Error: /tmp/tmp1hfwgknj.scala:22:50 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m              \e[33mcase\e[0m \e[31m'>'\e[0m => bracketMap.put(\e\
    [31m'>'\e[0m, \e[31m1\e[0m); _\n\e[31m\e[31m   |\e[0m                        \
    \                          ^\e[0m\n\e[31m   |\e[0m                       Unbound\
    \ placeholder parameter; incorrect use of _\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1hfwgknj.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mval\e[0m \e[36mbracketMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val sets = brackets.split(\"\\\\(|\\\\)\")\n        sets.size !=\
    \ 0 && !sets.head.contains(\"<\") && !sets.last.contains(\">\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkgb38ea.scala:19)\n\tat Problem.main(tmpdkgb38ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketSet = brackets.toSet\n        val bracketPairs = brackets.split(\"\
    \\\\<\").map( _.split(\"\\\\>\") ).toList\n        var inSet = false\n       \
    \ for ( pair <- bracketPairs ) {\n            if ( pair.size == 2 ) {\n      \
    \          val left = pair(0).trim\n                val right = pair(1).trim\n\
    \                if ( bracketSet.contains(left) && bracketSet.contains(right)\
    \ ) {\n                    inSet = true\n                }\n            }\n  \
    \      }\n        inSet\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbp5_eurh.scala:22:41\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m\
    \ ( bracketSet.contains(left) && bracketSet.contains(right) ) {\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (left : String)\n\e[31m  \
    \ |\e[0m                                         Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbp5_eurh.scala:22:70 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m ( bracketSet.contains(left)\
    \ && bracketSet.contains(right) ) {\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                              Found:    (right : String)\n\e\
    [31m   |\e[0m                                              Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.length == 0) true\n        else {\n            var\
    \ openingBracket = 0\n            var closingBracket = 1\n            while(openingBracket\
    \ < brackets.length) yield {\n                val c = brackets(openingBracket)\n\
    \                openingBracket += 1\n                while(closingBracket < brackets.length\
    \ && c == brackets(closingBracket)) closingBracket += 1\n                if(c\
    \ == '>') closingBracket -= 1\n                else\n                    if(c\
    \ != '<') (openingBracket, closingBracket)\n                    else (openingBracket,\
    \ closingBracket)\n            }\n        }.forall(_._2 == _._1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpievciqu3.scala:19:52 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mwhile\e[0m(openingBracket < brackets.length)\
    \ \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \         'do' expected, but 'yield' found\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpievciqu3.scala:28:8 -----------------\e[0m\e[0m\n\e[33m27 |\e\
    [0m            }\n\e[33m28 |\e[0m        }.forall(_._2 == _._1)\n\e[33m\e[33m\
    \   |\e[0m             ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in\
    \ statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketPairs = brackets.toList\n        val openBracketCount\
    \ = bracketPairs.length\n        if (openBracketCount == 0) true\n        else\
    \ {\n            val openings = bracketPairs.slice(0, openBracketCount-1)\n  \
    \          val closings = bracketPairs.slice(openBracketCount, bracketPairs.length)\n\
    \            val matching = openings.zip(closings)\n            .collect {\n \
    \               case (open, close) if open.equals(close) => (open, close)\n  \
    \          }\n            if (matching.length == 0) true else {\n            \
    \    println(\"Incorrectly formatted opening brackets, expected: \" + openings.mkString(\"\
    , \") + \" got: \" + matching.map(_.toString).mkString(\", \"))\n            \
    \    false\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7kqbq6tc.scala:36)\n\tat Problem.main(tmp7kqbq6tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split('<').toList\n        val closingBrackets\
    \ = brackets.split('>').toList\n        for ( (opening, closing) <- openingBrackets\
    \ ::: closingBrackets ) {\n            if ( opening.length != closing.length )\
    \ return false;\n            for ( i <- 1 to opening.length ) {\n            \
    \    if ( opening(i) != closing(i) ) return false;\n            }\n        }\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph4u207lg.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m ( opening.length != closing.length\
    \ ) \e[33mreturn\e[0m \e[31mfalse\e[0m;\n\e[31m\e[31m   |\e[0m               \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value length is not a\
    \ member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph4u207lg.scala:19:36\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m\
    \ ( i <- \e[31m1\e[0m to opening.length ) {\n\e[31m\e[31m   |\e[0m           \
    \                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     value length is not a member of Any\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmph4u207lg.scala:20:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e\
    [0m ( opening(i) != closing(i) ) \e[33mreturn\e[0m \e[31mfalse\e[0m;\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       \e[33mvalue\e[0m \e[35mopening\e[0m does not take parameters\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\"\"\"\"\"\"\").map(_.toInt)\n\
    \        val closingBrackets = openingBrackets.map(_.next)\n        val result\
    \ = (openingBrackets.length == closingBrackets.length)\n        openingBrackets.zipWithIndex.forall\
    \ { case (open, index) =>\n            (open <= closingBrackets(index))\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa8nbt1tt.scala:16:52 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = openingBrackets.map(_.next)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value next is not a\
    \ member of Int\n\e[31m\e[31m-- Error: /tmp/tmpa8nbt1tt.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = openingBrackets.map(_.next)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // return true if every opening bracket has a corresponding closing\
    \ bracket.\n        var openingBrackets = mutable.HashMap[Char, Int]()\n     \
    \   var closingBrackets = mutable.HashMap[Char, Int]()\n        for (i <- brackets.indices)\
    \ {\n            val c = brackets(i)\n            if (c < '>') {\n           \
    \     openingBrackets += (c -> 0)\n            }\n            else {\n       \
    \         if (openingBrackets.contains(c) == false) {\n                    return\
    \ false\n                }\n                openingBrackets(c) += 1\n        \
    \    }\n        }\n        for (i <- brackets.indices) {\n            val c =\
    \ brackets(i)\n            if (c == '<') {\n                if (closingBrackets.contains(c)\
    \ == false) {\n                    return false\n                }\n         \
    \       closingBrackets(c) += 1\n            }\n            else {\n         \
    \       if (closingBrackets.contains(c) == false) {\n                    return\
    \ false\n                }\n                closingBrackets(c) += 1\n        \
    \    }\n        }\n        // if all opening brackets have corresponding closing\
    \ brackets\n        if (openingBrackets.size == brackets.length && openingBrackets.size.toDouble\
    \ == closingBrackets.size.toDouble) {\n            return true\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7oizp_n8.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mopeningBrackets\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7oizp_n8.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mclosingBrackets\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracket_count = 0\n        var found = false\n        brackets.toList.foreach{b\
    \ =>\n            if (b==\"<\") {\n                bracket_count += 1\n      \
    \      } else {\n                bracket_count -= 1\n            }\n         \
    \   if (bracket_count == 0) {\n                found = true\n            }\n \
    \       }\n        return found\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmj_ueedx.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (b==\e[31m\"<\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length != 0) (0 until brackets.length) foreach { i\
    \ => if (brackets(i) != brackets(i+1)) false\n            else\n            correctBracketing(brackets.substring(0,i+1))\
    \ + correctBracketing(brackets.substring(i+1,brackets.length))\n        }\n  \
    \      else true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbvvnxv_.scala:17:57 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            correctBracketing(brackets.substring(\e[31m0\e\
    [0m,i+\e[31m1\e[0m)) + correctBracketing(brackets.substring(i+\e[31m1\e[0m,brackets.length))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Boolean, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var bracketsMatchCount = 0\n        var bracketsNoMatchCount =\
    \ 0\n        for(c <- brackets) {\n            // \"<\" and \">\" are treated\
    \ as a single \"bracket\",\n            // so no need to check individual characters\n\
    \            if (c == \"<\") {\n                bracketsMatchCount += 1\n    \
    \        } else if (c == \">\") {\n                bracketsMatchCount -= 1\n \
    \           } else if (c == \"<\") {\n                bracketsNoMatchCount +=\
    \ 1\n            } else if (c == \">\") {\n                bracketsNoMatchCount\
    \ -= 1\n            }\n        }\n        return bracketsMatchCount == 0 and bracketsNoMatchCount\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk51abz98.scala:20:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (c == \e[31m\"<\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpk51abz98.scala:22:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\"\
    >\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpk51abz98.scala:24:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\"<\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpk51abz98.scala:26:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m\">\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk51abz98.scala:30:39\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mreturn\e[0m\
    \ bracketsMatchCount == \e[31m0\e[0m and bracketsNoMatchCount == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value and is not a member of Boolean\n5 errors found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        assert(brackets.length == 1)\n        brackets.split(\"\"\"\"\"\
    \").map(c => c.toInt).exists(_ > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.correctBracketing(tmpkeo43ti9.scala:15)\n\tat Problem$.main(tmpkeo43ti9.scala:19)\n\
    \tat Problem.main(tmpkeo43ti9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\").filter(x => x != \"\
    <\").filter(x => x != \">\").toSet\n        val closingBrackets = brackets.split(\"\
    \").filter(x => x != \"<\").filter(x => x == \">\").toSet\n        val totalBrackets\
    \ = openingBrackets ++ closingBrackets\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq89ehmqc.scala:21)\n\tat Problem.main(tmpq89ehmqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBracketMap = mutable.HashMap[String, String]()\n   \
    \     brackets.split(\"<\").foreach(s => {\n            val parts = s.split(\"\
    >\")\n            openingBracketMap += (parts(0) -> parts(1))\n        })\n  \
    \      val matchingKeys = openingBracketMap.filterKeys(_.length == 1)\n      \
    \  val matchingValue = openingBracketMap.filterValues(_.length == 1)\n       \
    \ if (matchingKeys.size == 0 && matchingValue.isEmpty) false\n        else if\
    \ (matchingKeys.size != 0 && matchingValue.isEmpty) false\n        else if (matchingKeys.size\
    \ == 0 && matchingValue.isEmpty) true\n        else if (matchingKeys.size == 1\
    \ && matchingValue.isEmpty) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcdun_0d.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketMap\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        assert(brackets.length == 3)\n        var stack = mutable.Stack[String]()\n\
    \        val openingBrackets = brackets.split(\"<\")\n        for(opening <- openingBrackets)\n\
    \            stack push opening.trim\n        val closingBrackets = brackets.split(\"\
    >\")\n        for(closing <- closingBrackets)\n            if(!stack.isEmpty &&\
    \ stack.last.equals(closing.trim))\n                stack.pop()\n        stack.isEmpty\
    \ == false\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqoqp1djo.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length == 0) return true\n        var i = 0\n    \
    \    var open = brackets(i)\n        while (i < brackets.length-1) {\n       \
    \     val next = brackets(i+1)\n            val match = open + next\n        \
    \    val matchCount = brackets.count(c => c == match) // returns 0 if there is\
    \ no such character\n            if (matchCount < 2) return false\n          \
    \  open = next\n            i += 2\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp06swxejy.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[33mmatch\e[0m = open +\
    \ next\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp06swxejy.scala:21:54 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36mmatchCount\e[0m = brackets.count(\e[36mc\e\
    [0m => c == \e[33mmatch\e[0m) \e[34m// returns 0 if there is no such character\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                     expression\
    \ expected but \e[31mmatch\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var lastChar = brackets.charAt(brackets.length - 1)\n        var\
    \ currentChar = brackets.charAt(0)\n        if (lastChar != currentChar) {\n \
    \           return false\n        }\n        brackets.drop(1).forall { lastChar\
    \ =>\n            val nextChar = brackets.charAt(1)\n            if (nextChar\
    \ != lastChar) {\n                return false\n            }\n            brackets.drop(2).forall\
    \ { nextChar =>\n                val nextNextChar = brackets.charAt(2)\n     \
    \           if (nextNextChar != nextChar) {\n                    return false\n\
    \                }\n                brackets.drop(3).forall { nextNextChar =>\n\
    \                    val nextNextNextChar = brackets.charAt(3)\n             \
    \       if (nextNextNextChar != nextNextChar) {\n                        return\
    \ false\n                    }\n                    nextNextNextChar != nextChar\n\
    \                }\n            }\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zu_bkhu.scala:42)\n\tat Problem.main(tmp3zu_bkhu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // The first argument is an empty string if brackets is an empty\
    \ string.\n        if (brackets.isEmpty) true\n        else {\n            //\
    \ The first character in brackets is a \"<\".\n            // The next character\
    \ is the opening bracket after a \"<\".\n            // If that closing bracket\
    \ isn't a \">\", then the next character isn't a \"<\".\n            // So the\
    \ first character in the next iteration is another \"<\".\n            val firstChar\
    \ = brackets.head\n            val nextChar = brackets.tail.head\n           \
    \ if (nextChar != \"<\") false\n            else {\n                // The closing\
    \ bracket in brackets is a \">\".\n                // This character must have\
    \ a preceding \"<\".\n                // So the next character is the next \"\
    >\".\n                val nextCharNext = brackets.tail.tail.head\n           \
    \     if (nextCharNext != \">\") false\n                else {\n             \
    \       // Now that everything in the brackets string is correct for the first\
    \ character, the next\n                    // character must be the first \">\"\
    .\n                    val nextCharNextNext = brackets.tail.tail.tail.head\n \
    \                   if (nextCharNextNext != \"<\") false\n                   \
    \ else correctBracketing(brackets.tail.tail.tail)\n                }\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgh4yh3pl.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (nextChar != \e[31m\"<\"\e\
    [0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgh4yh3pl.scala:30:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m (nextCharNext != \e[31m\"\
    >\"\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgh4yh3pl.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    \e[33mif\e[0m (nextCharNextNext !=\
    \ \e[31m\"<\"\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.length == brackets.count{ case \">\" => true case _ =>\
    \ false }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuy_cmh6l.scala:15:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.length == brackets.count{ \e[33mcase\e\
    [0m \e[31m\">\"\e[0m => \e[31mtrue\e[0m \e[33mcase\e[0m _ => \e[31mfalse\e[0m\
    \ }\n\e[31m\e[31m   |\e[0m                                                ^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var opening = 0\n        var closing = 0\n        for (bracket\
    \ <- brackets) {\n            if (bracket.equals(\"<\")) {\n                opening\
    \ += 1\n            } else if (bracket.equals(\">\")) {\n                closing\
    \ += 1\n            }\n        }\n        (opening == closing)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8f5xyoj5.scala:31)\n\tat Problem.main(tmp8f5xyoj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val lBrackets = brackets.split(\",\")\n        val result = lBrackets.map(lBrackets.indexOf(_)\
    \ >= 0).reduce(_ || _)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqr2kofb.scala:24)\n\tat Problem.main(tmpxqr2kofb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openingCount = 0\n        var closingCount = 0\n        for\
    \ (i <- brackets.indices( \"<\" )) {\n            if (i < brackets.length() -\
    \ 1) {\n                openingCount += 1\n                closingCount += (brackets(i\
    \ + 1) - brackets(i) + 1)\n            }\n        }\n        closingCount += (brackets.length()\
    \ - openingCount)\n        if (closingCount != 0) {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphadx4_cj.scala:17:36\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ brackets.indices( \e[31m\"<\"\e[0m )) {\n\e[31m\e[31m   |\e[0m             \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \        Found:    (\e[32m\"<\"\e[0m : String)\n\e[31m   |\e[0m              \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.split(\"<\").toList.\n        map(x => x.toInt).\n   \
    \     forall(x => brackets.split(\">\").toList.\n        contains(x))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.correctBracketing$$anonfun$1(tmp0fuy56h1.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.correctBracketing(tmp0fuy56h1.scala:16)\n\
    \tat Problem$.main(tmp0fuy56h1.scala:21)\n\tat Problem.main(tmp0fuy56h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n       var openingBrackets = \"\"\n       var closingBrackets = \"\"\n\
    \       var openingBracketCount = 0\n       var closingBracketCount = 0\n    \
    \   for(i <- brackets.toCharArray){\n           if(i == '<'){\n              openingBracketCount\
    \ += 1\n              openingBrackets += i\n           }\n           if(i == '>'){\n\
    \              closingBracketCount += 1\n              closingBrackets += i\n\
    \           }\n       }\n       openingBracketCount = openingBracketCount\n  \
    \     closingBracketCount = closingBracketCount\n       openingBrackets = openingBrackets\n\
    \       closingBrackets = closingBrackets\n       closingBrackets.indexOf(\"<\"\
    ) > -1 && openingBrackets.indexOf(\">\") > -1 && openingBrackets.indexOf(\"<\"\
    ) > closingBrackets.indexOf(\">\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80sfyvko.scala:36)\n\tat Problem.main(tmp80sfyvko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets == null) {\n            return false\n        }\n\
    \        val brackets = brackets.toList\n        for (i <- 0 until brackets.length)\
    \ {\n            if (i < 0 || bracket(i) < 0 || bracket(i) > brackets.size - 1)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc5dvjmcn.scala:18:23 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = brackets.toList\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35mbrackets\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc5dvjmcn.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (i < \e[31m0\e[0m || bracket(i)\
    \ < \e[31m0\e[0m || bracket(i) > brackets.size - \e[31m1\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: bracket\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc5dvjmcn.scala:20:43 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mif\e[0m (i < \e[31m0\e[0m || bracket(i) < \e[31m0\e[0m ||\
    \ bracket(i) > brackets.size - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                               Not found: bracket\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val list = brackets.toList\n        val stack = mutable.Stack[String]()\n\
    \        val list2 = list.map(x => if(x equals \"<\") \"(\" else \"[\")\n    \
    \    val list3 = list2.filter(x => x equals \")\")\n        val list4 = list3.filter(x\
    \ => x equals \"[\")\n        while(!list4.isEmpty) {\n            stack push\
    \ \"[\" + list4.head\n            list4 = list4.tail\n        }\n        while(!list3.isEmpty)\
    \ {\n            stack push \"(\" + list3.head\n            list3 = list3.tail\n\
    \        }\n        while(!list2.isEmpty) {\n            stack push \"(\" + list2.head\n\
    \            list2 = list2.tail\n        }\n        while(!stack.isEmpty) {\n\
    \            val l = stack.pop\n            val r = stack.pop\n            val\
    \ b = if(l equals \"(\") \">\" else \"<\"\n            val a = if(r equals \"\
    )\") \"<\" \">\"\n            val str = a + b + l\n            list map { x =>\
    \ if(x equals str) x else x+\"?\"}\n        }\n        list.isEmpty\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnqjl9g51.scala:36:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = \e[33mif\e\
    [0m(r equals \e[31m\")\"\e[0m) \e[31m\"<\"\e[0m \e[31m\">\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m   \
    \                   end of statement expected but string literal found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnqjl9g51.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpnqjl9g51.scala:22:18 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            list4 = list4.tail\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val list4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnqjl9g51.scala:26:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            list3 =\
    \ list3.tail\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val list3\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpnqjl9g51.scala:30:18 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            list2 = list2.tail\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val list2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnqjl9g51.scala:37:24\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstr\e[0m = a + b + l\n\e[31m\e[31m   |\e[0m                      ^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Unit, but could be made available\
    \ as an extension method.\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if(brackets.isEmpty) true\n        else if(brackets.head == \"\
    <\" && brackets.last == \">\") true\n        else if(brackets.head == \"<\" &&\
    \ brackets.last == \"<\" && brackets.tail.head == \"<\" && brackets.tail.last\
    \ == \">\") true\n        else if(brackets.head == \"<\" && brackets.last == \"\
    <\" && brackets.tail.head == \"<\" && brackets.tail.last == \"<\" && brackets.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.last == \">\") true\n        else if(brackets.head\
    \ == \"<\" && brackets.last == \"<\" && brackets.tail.head == \"<\" && brackets.tail.last\
    \ == \"<\" && brackets.tail.tail.head == \"<\" && brackets.tail.tail.last == \"\
    <\" && brackets.tail.tail.tail.head == \"<\" && brackets.tail.tail.tail.last ==\
    \ \">\") true\n        else if(brackets.head == \"<\" && brackets.last == \"<\"\
    \ && brackets.tail.head == \"<\" && brackets.tail.last == \"<\" && brackets.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.last == \"<\" && brackets.tail.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.tail.last == \"<\" && brackets.tail.tail.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.tail.tail.last == \">\") true\n        else if(brackets.head\
    \ == \"<\" && brackets.last == \"<\" && brackets.tail.head == \"<\" && brackets.tail.last\
    \ == \"<\" && brackets.tail.tail.head == \"<\" && brackets.tail.tail.last == \"\
    <\" && brackets.tail.tail.tail.head == \"<\" && brackets.tail.tail.tail.last ==\
    \ \"<\" && brackets.tail.tail.tail.tail.head == \"<\" && brackets.tail.tail.tail.tail.last\
    \ == \">\") true\n        else if(brackets.head == \"<\" && brackets.last == \"\
    <\" && brackets.tail.head == \"<\" && brackets.tail.last == \"<\" && brackets.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.last == \"<\" && brackets.tail.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.tail.last == \"<\" && brackets.tail.tail.tail.tail.head\
    \ == \"<\" && brackets.tail.tail.tail.tail.last == \"<\" && brackets.tail\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpea56n72q.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpea56n72q.scala:16:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33melse\e[0m \e[33mif\e[0m(brackets.head == \e[31m\"<\"\e[0m && brackets.last\
    \ == \e[31m\">\"\e[0m) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpea56n72q.scala:16:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(brackets.head ==\
    \ \e[31m\"<\"\e[0m && brackets.last == \e[31m\">\"\e[0m) \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpea56n72q.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(brackets.head ==\
    \ \e[31m\"<\"\e[0m && brackets.last == \e[31m\"<\"\e[0m && brackets.tail.head\
    \ == \e[31m\"<\"\e[0m && brackets.tail.last == \e[31m\">\"\e[0m) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpea56n72q.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(brackets.head ==\
    \ \e[31m\"<\"\e[0m && brackets.last == \e[31m\"<\"\e[0m && brackets.tail.head\
    \ == \e[31m\"<\"\e[0m && brackets.tail.last == \e[31m\">\"\e[0m) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpea56n72q.scala:17:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(brackets.head ==\
    \ \e[31m\"<\"\e[0m && br"
  stdout: ''
  timestamp: 1660010055
