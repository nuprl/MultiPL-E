language: scala
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // your code goes here\n        val l = n / 2\n        if (n % 2 == 0) {\n\
    \            l + 1\n        }\n        else {\n            l + 1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_1fdsyfc.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            l + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_1fdsyfc.scala:21:12 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            l + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ var result : MutableList[Long] = mutable.ArrayBuffer.empty\n      if (n.isEven)\
    \ {\n        var i : Long = 0\n        while ((i + 1) < n) {\n          result\
    \ = result :+ (i + 1.toLong)\n          i = i + 1\n        }\n      }\n      else\
    \ {\n        var i : Long = n.toLong\n        while ((i + 1) < n) {\n        \
    \  result = result :+ ((i + 1).toLong)\n          i = i + 2\n        }\n     \
    \ }\n      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyixor9et.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mvar\e[0m \e[36mresult\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = mutable.ArrayBuffer.empty\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: type\
    \ MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyixor9et.scala:15:39\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mvar\e[0m \e[36mresult\e\
    [0m : \e[35mMutableList\e[0m[\e[35mLong\e[0m] = mutable.ArrayBuffer.empty\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyixor9et.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mif\e[0m (n.isEven) {\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^^\e[0m\n\e[31m   |\e[0m          value isEven is not a member\
    \ of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val n = math.abs(n)\n        val even = (n+1)/2\n        val odd = n+1\n \
    \       val next = if (n % 2) odd else even\n        List(next to next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpaspik9f7.scala:19:2400 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        List(next to next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next next next next next next next next next\
    \ next next next next next next next next "
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpaspik9f7.scala

    '
  timestamp: 1660010239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n.toInt % 2 == 0, \"makeAPile should make an even pile of stones.\"\
    )\n        val r = n.toInt / 2\n        val result = r + 1 to r + 2\n        if\
    \ (n != 1) { result.append (n to (n + r.toInt)) }\n        result.toList.sortBy\
    \ { it.toInt }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwgqxdsk.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n != \e[31m1\e[0m) { result.append\
    \ (n to (n + r.toInt)) }\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of scala.collection.immutable.Range.Inclusive\
    \ - did you mean result.appended?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwgqxdsk.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.toList.sortBy\
    \ { it.toInt }\n\e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e\
    [31m   |\e[0m                               Not found: it\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpnwgqxdsk.scala:19:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result.toList.sortBy { it.toInt }\n\e[31m\e[31m\
    \   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var levels = List[Long]()\n        var odd = 1l\n        var even = 1l\n \
    \       for (i<-ln(n); i<=n; i+=2) {\n            if (n%2 == 0) {\n          \
    \      even += 1l\n            } else {\n                odd += 1l\n         \
    \   }\n            levels = levels :+ even\n        }\n        levels = levels\
    \ :+ odd\n        levels\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5qaqsl_1.scala:18:27 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-ln(n); i<=n; i+=\e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m\
    \                           '<-' expected, but ';' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp5qaqsl_1.scala:18:33 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-ln(n); i<=n; i+=\e[31m2\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5qaqsl_1.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-ln(n); i<=n; i+=\e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: ln\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Initialize an empty list to hold our return value\n        val returnValue\
    \ = mutable.MutableList[Long]()\n        // Get the next level of stones according\
    \ to the problem definition\n        val nextLevel = nextLevelOfStones(n)\n  \
    \      // Loop through each level\n        for (level <- nextLevel) {\n      \
    \      // Add the number of stones to the return list\n            returnValue\
    \ += level + 1\n        }\n        // Return the list\n        returnValue.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra4fvz97.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mreturnValue\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpra4fvz97.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnextLevel\e[0m = nextLevelOfStones(n)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        Not found: nextLevelOfStones\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ var counter = n\n      val result = new mutable.ArrayList[Long]()\n      while\
    \ (counter > 0) {\n        if (counter % 2 != 0) {\n          result.add(counter)\n\
    \        }\n        counter = counter / 2\n      }\n      result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzer_xp9d.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n.toString.charAt(0).toInt == 1) {\n            List(n.toString.toLong)\n\
    \        } else {\n            val evens = if(n.toString.charAt(0).toInt == 0)\
    \ n.toString.toLong else n.toString.toLong / (2l.toLong * 2l.toLong)\n       \
    \     val odds = n.toString.toLong / 2l.toLong\n            evens.filter(_ % 2\
    \ == 0).reverse ++ odds.filter(_ % 2 == 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbm6mlzuf.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            evens.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).reverse ++ odds.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value filter\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ var pile = List(1l)\n      val x = n / 2l\n      val isEven = n % 2l == 0l\n\
    \      if (x % 2l == 0l) {\n        for (i <- 1l to x by 2l) {\n          pile\
    \ = if (isEven) pile.head + i.toLong else pile.head - i.toLong\n        }\n  \
    \    } else for (i <- 1l to x by 2l) {\n        pile = if (isEven) pile.head -\
    \ i.toLong else pile.head + i.toLong\n      }\n      pile\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphj2tfodh.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m          pile = \e[33mif\e[0m\
    \ (isEven) pile.head + i.toLong \e[33melse\e[0m pile.head - i.toLong\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    Long\n\e[31m   |\e[0m         \
    \                    Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphj2tfodh.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m          pile = \e[33mif\e[0m\
    \ (isEven) pile.head + i.toLong \e[33melse\e[0m pile.head - i.toLong\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \ Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphj2tfodh.scala:23:27 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        pile = \e[33mif\e[0m (isEven) pile.head - i.toLong\
    \ \e[33melse\e[0m pile.head + i.toLong\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \    Found:    Long\n\e[31m   |\e[0m                           Required: \e[1m\e\
    [32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphj2tfodh.scala:23:53 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        pile = \e[33mif\e[0m (isEven) pile.head - i.toLong\
    \ \e[33melse\e[0m pile.head + i.toLong\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    Long\n\e[31m\
    \   |\e[0m                "
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n   \
    \     for ( i <- 0 to n )\n            pile += (i+2)\n        if (n % 2 == 0)\n\
    \            pile += (n / 2+1)\n        else\n            pile += (n / 2)\n  \
    \      return pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzu6d5ch.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m : mutable.ListBuffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzu6d5ch.scala:15:50\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m : mutable.ListBuffer[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfzu6d5ch.scala:16:24 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m ( i <- \e[31m0\e[0m to n )\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (n : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ones = n.toList.map(_.toLong)\n        val odd = ones.drop(2).filter(_\
    \ % 2 != 0).toList\n        val even = ones.drop(2).filter(_ % 2 == 0).toList\n\
    \        odd + even\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdwwo26t.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = n.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value toList is not a member of Long - did you mean n.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ns = ListBuffer(n); var n = 0\n        while (n < ns.size) {\n       \
    \     var n2 = n(n); n2 = if (n2.isEven) n2.nextEven else n2.nextOdd\n       \
    \     n2 = (n2-1) rem 2 match {\n                case 0 => n(n2)\n           \
    \     case 1 => n(n2)+1\n                case _ => n(n2)+1\n            }\n  \
    \          ns = ns :+ n2\n            n += 1\n        }\n        ns.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmphg62u6ub.scala:17:21 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m \e[36mn2\e[0m = n(n); n2 =\
    \ \e[33mif\e[0m (n2.isEven) n2.nextEven \e[33melse\e[0m n2.nextOdd\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     \e\
    [33mvariable\e[0m \e[35mn\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmphg62u6ub.scala:19:26 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m0\e[0m => n(n2)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   \e[33mvariable\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmphg62u6ub.scala:20:26 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => n(n2)+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e\
    [0m                          \e[33mvariable\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmphg62u6ub.scala:21:26 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m _ => n(n2)+\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvariable\e[0m \e[35mn\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphg62u6ub.scala:23:15 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            ns = ns :+ n2\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val ns\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphg62u6ub.scala:26:11\
    \ --------------------"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var i = n.toLong\n        var list = (0 until n).toList\n        var total\
    \ = 0L\n        while (n > 0) {\n            total += i\n            i += (i%2\
    \ == 0) ? 2L : 1L\n            n -= 1\n            list = list :+ total\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanotbwyi.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mlist\e\
    [0m = (\e[31m0\e[0m until n).toList\n\e[31m\e[31m   |\e[0m                   \
    \         ^\e[0m\n\e[31m   |\e[0m                            Found:    (n : Long)\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpanotbwyi.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i += (i%\e[31m2\e[0m == \e[31m0\e[0m) ? \e\
    [31m2L\e[0m : \e[31m1L\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpanotbwyi.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i += (i%\e[31m2\e[0m == \e[31m0\e[0m) ? \e\
    [31m2L\e[0m : \e[31m1L\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value ? is not a member of Boolean\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpanotbwyi.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanotbwyi.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            list = list :+ total\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Found:    (total : Long)\n\e[31m   |\e[0m          \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpanotbwyi.scala:24:8 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        list\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (list : List[Int])\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def isEven(n: Int) : Boolean = {\n            (n: Int) % 2 == 0\n        }\n\
    \        def isOdd(n: Int) : Boolean = {\n            (n: Int) % 2 != 0\n    \
    \    }\n        def getNextLevel(n: Long): Long = {\n            val isOddNextLevel\
    \ = isOdd(n)\n            val isEvenNextLevel = isEven(n)\n            if (isOddNextLevel)\
    \ {\n                (n: Long) + 1\n            } else {\n                (n:\
    \ Long)\n            }\n        }\n        val level = n.toInt\n        val stones\
    \ = mutable.ListBuffer[Long](level.toLong)\n        stones += level.toLong\n \
    \       for (i <- 1 to level.toInt) {\n            stones += getNextLevel(i)\n\
    \        }\n        stones\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoil61iyb.scala:22:39\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36misOddNextLevel\e[0m = isOdd(n)\n\e[31m\e[31m   |\e[0m                    \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoil61iyb.scala:23:41\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36misEvenNextLevel\e[0m = isEven(n)\n\e[31m\e[31m   |\e[0m                  \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                            \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoil61iyb.scala:31:21 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m](level.toLong)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def makeAPile_aux(n: Long, prev : List[Long], pile : List[Long]) : List[Long]\
    \ = {\n            if (n <= 0) pile\n            else {\n                if (n\
    \ % 2 == 0) makeAPile_aux(n/2, prev + n.toLong, pile :+ n.toLong)\n          \
    \      else makeAPile_aux(n.toLong, prev + n.toLong, pile :+ n.toLong)\n     \
    \       }\n        }\n\n        val prev: List[Long] = List.empty[Long]\n    \
    \    makeAPile_aux(n, prev, pile :+ n.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyc0jsymu.scala:18:56 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (n % \e[31m2\e[0m == \e\
    [31m0\e[0m) makeAPile_aux(n/\e[31m2\e[0m, prev + n.toLong, pile :+ n.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpyc0jsymu.scala:19:50 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33melse\e[0m makeAPile_aux(n.toLong, prev\
    \ + n.toLong, pile :+ n.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyc0jsymu.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        makeAPile_aux(n, prev, pile :+ n.toLong)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m \
    \                              Not found: pile\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n) {\n \
    \           pile.append(i + 1)\n        }\n        pile.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_fbdr4b.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd_fbdr4b.scala:16:23 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = n.toInt\n        val odd = stones % 2\n        val even = stones.toInt\n\
    \        val nextLevel: List[Long] = if (odd) List(odd, even) else List(even,\
    \ odd)\n        List(stones - nextLevel.size, nextLevel)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpicninu7_.scala:18:40\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnextLevel\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mif\e[0m (odd) List(odd, even) \e\
    [33melse\e[0m List(even, odd)\n\e[31m\e[31m   |\e[0m                         \
    \               ^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    (odd : Int)\n\e[31m   |\e[0m                                  \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpicninu7_.scala:19:38 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        List(stones - nextLevel.size, nextLevel)\n\e[31m\e[31m   |\e[0m\
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                               Found:    (nextLevel : List[Long])\n\e[31m   |\e\
    [0m                                      Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.MutableList[Long]\n        if (n.toLong % 2 == 1)\
    \ result.add(n.toLong)\n        else result.add(n.toLong + 2l.toLong)\n      \
    \  result.map(_.toLong / 2l.toLong).zip(result).map( _.sum )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzd4ifs8.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0L) Nil\n        else {\n            val oddNum = n / 2l.toLong\n\
    \            val evenNum = n - oddNum\n            oddNum :: makeAPile(oddNum)\n\
    \            evenNum :: makeAPile(evenNum)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:19)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\
    \tat Problem$.makeAPile(tmpmmyag6n3.scala:20)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var i = 0\n        val stones: List[Long] = List(n)\n        val oddNumbers\
    \ = 0 until stones.size by 2\n        val evenNumbers = stones.size until (stones.size\
    \ by 2) by 2\n        oddNumbers.foreach { x => stones.insert(x, stones(x+1))\
    \ }\n        evenNumbers.foreach { x => stones.insert(x, stones(x+1)) }\n    \
    \    stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mxoe86f.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = stones.size\
    \ until (stones.size by \e[31m2\e[0m) by \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         value by is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mxoe86f.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        oddNumbers.foreach { \e[36mx\e[0m => stones.insert(x,\
    \ stones(x+\e[31m1\e[0m)) }\n\e[31m\e[31m   |\e[0m                           \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value insert is not a member of List[Long]\
    \ - did you mean stones.init?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mxoe86f.scala:20:42\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        evenNumbers.foreach\
    \ { \e[36mx\e[0m => stones.insert(x, stones(x+\e[31m1\e[0m)) }\n\e[31m\e[31m \
    \  |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \  value insert is not a member of List[Long] - did you mean stones.init?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ArrayBuffer.empty[Long]\n        var count = 0\n      \
    \  while (n > 0) {\n            count += n % 2 == 0 ? (n % 2 != 0 ? 2 : 1) : (n\
    \ % 2 == 0 ? 2 : 0)\n            n /= 2\n        }\n        list += count\n  \
    \      list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2kkzhxif.scala:18:73 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            count += n % \e[31m2\e[0m == \e[31m0\e[0m\
    \ ? (n % \e[31m2\e[0m != \e[31m0\e[0m ? \e[31m2\e[0m : \e[31m1\e[0m) : (\e[35mn\e\
    [0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m0\e[0m \e[35m?\e[0m \e[31m2\e\
    [0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                              ')' expected, but ':' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2kkzhxif.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2kkzhxif.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            count += n % \e[31m2\e[0m == \e[31m0\e[0m\
    \ ? (n % \e[31m2\e[0m != \e[31m0\e[0m ? \e[31m2\e[0m : \e[31m1\e[0m) : (\e[35mn\e\
    [0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m0\e[0m \e[35m?\e[0m \e[31m2\e\
    [0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                             ^^\e[0m\n\e[31m   |\e[0m                       \
    \                               Not found: type ==\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2kkzhxif.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            count += n % \e[31m2\e[0m == \e[31m0\e[0m\
    \ ? (n % \e[31m2\e[0m != \e[31m0\e[0m ? \e[31m2\e[0m : \e[31m1\e[0m) : (\e[35mn\e\
    [0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m0\e[0m \e[35m?\e[0m \e[31m2\e\
    [0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kkzhxif.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            count += n % \e[31m2\e[0m == \e["
  stdout: ''
  timestamp: 1660010244
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def makeAPileHelper(n:Long, currentStones:List[Long]) :List[Long] = {\n  \
    \          if (n == 0)\n                return currentStones\n            else\
    \ if (n % 2 == 0)\n                makeAPileHelper(n / 2, currentStones :+ n.toLong)\n\
    \            else\n                makeAPileHelper(n / 2, currentStones :+ n.toLong\
    \ * 2)\n        }\n        makeAPileHelper(n, Nil)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7n1rpsd.scala:26)\n\tat Problem.main(tmpu7n1rpsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ val pile : mutable.MutableList[Long] = mutable.MutableList(n.toLong);\n    \
    \  if(n.toLong % 2 == 0) pile.add(1l); else pile.add(2l);\n      pile.takeWhile(_\
    \ <= n).toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo6iwssxb.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mpile\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(n.toLong);\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo6iwssxb.scala:15:45\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mpile\e\
    [0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(n.toLong);\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = List.fill(n.toLong)((1 to n).toList).map(_ + 1).distinct\n  \
    \      (0 to (levels.length - 1).toList).map{ _ => levels.last.sum }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebmmzlut.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e\
    [0m = List.fill(n.toLong)((\e[31m1\e[0m to n).toList).map(_ + \e[31m1\e[0m).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    Long\n\e[31m   |\e[0m            \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpebmmzlut.scala:15:47 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = List.fill(n.toLong)((\e[31m1\e\
    [0m to n).toList).map(_ + \e[31m1\e[0m).distinct\n\e[31m\e[31m   |\e[0m      \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmmzlut.scala:15:64 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = List.fill(n.toLong)((\e\
    [31m1\e[0m to n).toList).map(_ + \e[31m1\e[0m).distinct\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Int], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmmzlut.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (\e[31m0\e[0m to\
    \ (levels.length - \e[31m1\e[0m).toList).map{ _ => levels.last.sum }\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var i = 2\n        var stones = 0\n        while(i <= n){\n            if(n\
    \ % i == 0){\n                stones += i\n            }\n            i += 2\n\
    \        }\n        stones += n\n        return stones.toList.map { _ => stones\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z9dv1a0.scala:23:15 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        stones += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_z9dv1a0.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mreturn\e[0m stones.toList.map { _ => stones\
    \ }\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          value toList is not a member of Int - did you mean Int.toInt?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val p = n.toInt\n        val evenP = (p + p.toInt) / 2\n        val oddP =\
    \ p / 2\n        val evenPList = (1l, 3l, 5l, 7l, 9l, 11l, 13l, 15l).map(_ * p)\n\
    \        val oddPList = (1l, 3l, 5l, 7l, 9l, 11l, 13l, 15l).map(_ / 2 * p)\n \
    \       (evenPList :+ oddPList).flatten.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplbw5aqma.scala:18:64 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenPList\e[0m = (\e[31m1l\e\
    [0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m9l\e[0m, \e[31m11l\e[0m,\
    \ \e[31m13l\e[0m, \e[31m15l\e[0m).map(_ * p)\n\e[31m\e[31m   |\e[0m          \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ _$1 * p.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmplbw5aqma.scala:19:63 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36moddPList\e[0m = (\e[31m1l\e\
    [0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m9l\e[0m, \e[31m11l\e[0m,\
    \ \e[31m13l\e[0m, \e[31m15l\e[0m).map(_ / \e[31m2\e[0m * p)\n\e[31m\e[31m   |\e\
    [0m                                                               ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => _$2 / 2 * p.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplbw5aqma.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        (evenPList :+ oddPList).flatten.toList\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+ is not\
    \ a member of (Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing,\
    \ Nothing) - did you mean (Nothing, Nothing, Nothing, Nothing, Nothing, Nothing,\
    \ Nothing, Nothing).++?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.ListBuffer[Long]()\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            if (n % 2 == 0) {\n                pile.append(n)\n\
    \            } else {\n                pile.append(n + 1)\n            }\n   \
    \         i += 1\n        }\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzke88yk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = mutable.ListBuffer(n.toLong);\n        var currLevel = levels(0)\n\
    \        while (n>0) {\n            val nextLevel = if (n%2==0) 2*currLevel+1\
    \ else 2*currLevel-1\n            levels += nextLevel\n            currLevel =\
    \ nextLevel\n            n -= 1\n        }\n        levels.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk51rtxkb.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer(n.toLong);\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpk51rtxkb.scala:21:14 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   (\n            n match {\n                case 0 | 1 => List()\n         \
    \       case _ => List(1L, n-1L, 2L)\n            }\n        ).reverse.foldLeft(List[Long]())\
    \ { case (acc, i) =>\n            (\n                (i + 1L) match {\n      \
    \              case 0 | 1 => acc\n                    case _ => acc + n\n    \
    \            }\n            )\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ohvfkbe.scala:24:34 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m _ => acc + n\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Odd n\n        if (n % (2l).toLong > 0l) {\n            List.fill(2l)(n\
    \ % (2l).toLong).toList\n        } else {\n            // Even\n            List.fill(n)(2l).toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnh2vg4_.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            List.fill(\e[31m2l\e\
    [0m)(n % (\e[31m2l\e[0m).toLong).toList\n\e[31m\e[31m   |\e[0m               \
    \       ^^\e[0m\n\e[31m   |\e[0m                      Found:    (\e[31m2L\e[0m\
    \ : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnh2vg4_.scala:20:22 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            List.fill(n)(\e[31m2l\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case _ if n==1 => List(1l)\n            case _ if n==0\
    \ => List()\n            case n if n%2 == 0 => (makeAPile(n/2) ++ List(1l)).toList\n\
    \            case n if n%2 == 1 => (makeAPile(n/2) ++ List(1l, 0l)).toList\n \
    \           case _   => (makeAPile(n-1)++ makeAPile(n/2)).toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5aea5vx.scala:24)\n\tat Problem.main(tmp_5aea5vx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var nextLevel = n.toInt\n        if (nextLevel % 2 == 0) nextLevel = nextLevel\
    \ + 1 // next odd number\n        else nextLevel = nextLevel + 2 // next even\
    \ number\n        if (n < 0) nextLevel = nextLevel - 1 // next odd number\n  \
    \      nextLevel :: makeAPile(nextLevel) // next level, each element is list for\
    \ next level\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\
    \tat Problem$.makeAPile(tmpsr_pw_qc.scala:19)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n >= 1, \"n must be >= 1\")\n        val nextOdd = (n + 1) / 2\n \
    \       val nextEven = (2 * n) / 2\n        (1 until n).map { i =>\n         \
    \   if (i % 2 == 0) nextEven.toLong\n            else nextOdd.toLong\n       \
    \ }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3prmalgn.scala:18:17\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        (\e[31m1\e[0m until n).map\
    \ { \e[36mi\e[0m =>\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Found:    (n : Long)\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ val ans = mutable.MutableList[Long]()\n      if (n % 2 == 0)\n        ans +=\
    \ n.toLong\n      else if (n % 2 == 1)\n        ans += (n - 2).toLong\n      else\n\
    \        ans += (n - 3).toLong\n      ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fajs4wu.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mans\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Add code here\n        def oddOrEven(n: Long): Long = if (n & 1 == 0) (n\
    \ + 1) else ((n + 1) + (n % 2 == 0 ? 1 : 0))\n        val stones = 1 to n\n  \
    \          .map(_ => List(oddOrEven(n)))\n            .reduceLeft(_ ++ _)\n  \
    \          .reverse\n            .flatten\n\n        // Add code here\n      \
    \  return stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxiy305c1.scala:16:45 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e[36moddOrEven\e[0m(\e[36mn\e\
    [0m: \e[35mLong\e[0m): \e[35mLong\e[0m = \e[33mif\e[0m (n & \e[31m1\e[0m == \e\
    [31m0\e[0m) (n + \e[31m1\e[0m) \e[33melse\e[0m ((n + \e[31m1\e[0m) + (n % \e[31m2\e\
    [0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                                        ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((\e[31mfalse\e\
    [0m : Boolean))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxiy305c1.scala:16:91\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e\
    [36moddOrEven\e[0m(\e[36mn\e[0m: \e[35mLong\e[0m): \e[35mLong\e[0m = \e[33mif\e\
    [0m (n & \e[31m1\e[0m == \e[31m0\e[0m) (n + \e[31m1\e[0m) \e[33melse\e[0m ((n\
    \ + \e[31m1\e[0m) + (n % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                               value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxiy305c1.scala:18:13 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = \e[31m1\e\
    [0m to n\n\e[31m18 |\e[0m            .map(_ => List(oddOrEven(n)))\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        value map is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxiy305c1.scala:24:15 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mreturn\e[0m stones\n\e[31m\e[31m   |\e[0m              \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (stones : scala.collection.immutable.Range.Inclusive)\n\
    \e[31m   |\e[0m         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 e"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \  val odd = n % 2 == 0\n       val even = n % 2 != 0\n\n       if (n == 1) 1l\
    \ else odd.toLong :: makeAPile(n / 2l.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpufo6bhsk.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \e[33mif\e[0m (n == \e\
    [31m1\e[0m) \e[31m1l\e[0m \e[33melse\e[0m odd.toLong :: makeAPile(n / \e[31m2l\e\
    [0m.toLong)\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m        \
    \           Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpufo6bhsk.scala:18:31 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m       \e[33mif\e[0m (n == \e[31m1\e[0m) \e[31m1l\e[0m \e[33melse\e[0m odd.toLong\
    \ :: makeAPile(n / \e[31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of\
    \ Boolean, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0L)\n            (1l.toLong)\n        else\n            makeAPile(n/2)\
    \ ++ makeAPile(n-(n%2).toLong)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvh966q9b.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (\e[31m1l\e[0m.toLong)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \ Found:    Long\n\e[31m   |\e[0m             Required: \e[1m\e[32mList\e[0m\e\
    [1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val r = ListBuffer.empty[Long]\n        if (n<2) r.append(n)\n        else\
    \ {\n            val (nextEven, nextOdd) = n / 2\n            r.add(nextEven.toLong)\n\
    \            val n = n - nextEven - nextOdd\n            val nextEven2 = nextEven.next\n\
    \            val nextOdd2 = nextOdd.next\n            val nextEven3 = nextEven2.next\n\
    \            val nextOdd3 = nextOdd2.next\n            r.add(nextEven3.toLong)\n\
    \            r.add(nextOdd3.toLong)\n            val n = n - nextEven3 - nextOdd3\n\
    \            val nextEven4 = nextEven3.next\n            val nextOdd4 = nextOdd3.next\n\
    \            val nextEven5 = nextEven4.next\n            val nextOdd5 = nextOdd4.next\n\
    \            r.add(nextEven5.toLong)\n            r.add(nextOdd5.toLong)\n   \
    \         val n = n - nextEven5 - nextOdd5\n            val nextEven6 = nextEven5.next\n\
    \            val nextOdd6 = nextOdd5.next\n            val nextEven7 = nextEven6.next\n\
    \            val nextOdd7 = nextOdd6.next\n            r.add(nextEven7.toLong)\n\
    \            r.add(nextOdd7.toLong)\n            val n = n - nextEven7 - nextOdd7\n\
    \        }\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmponpcv15e.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n - nextEven3\
    \ - nextOdd3\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmponpcv15e.scala:34:16 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n - nextEven5 - nextOdd5\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmponpcv15e.scala:41:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = n - nextEven7 - nextOdd7\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmponpcv15e.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n - nextEven\
    \ - nextOdd\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmponpcv15e.scala:18:17 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m (nextEven, nextOdd) = n /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m\
    \                 Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1660010257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ls = ListBuffer.empty[Long]\n        val count = n.toInt\n        // if\
    \ the count is even, add 1 to the odd count\n        if(count%2==0)\n        \
    \    ls += count\n        else\n            // if the count is odd, add 1 to the\
    \ even count\n            count += count/2\n        // add the even count to the\
    \ level\n        ls ++= (count-1).toLong\n        // return the level\n      \
    \  ls.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9oh3393.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            count += count/\e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean count.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk9oh3393.scala:24:25 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        ls ++= (count-\e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m    \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    Long\n\
    \e[31m   |\e[0m               Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = ListBuffer(n)\n        val nextLevel = if (n % 2 == 0) stones\
    \ else stones.tail\n\n        (nextLevel ::: (0 until stones.size)-1) foreach\
    \ {\n            case 0 => stones ++= nextLevel\n            case _ => nextLevel\
    \ ++ stones.tail\n        }\n\n        nextLevel.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdiq6zblm.scala:18:44 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        (nextLevel ::: (\e[31m0\e[0m until stones.size)-\e\
    [31m1\e[0m) foreach {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Range, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < 2l) List(2l.toLong)\n        else if (n % 2l == 0l) List(3l.toLong)\n\
    \        else List(1l.toLong, 5l.toLong, 7l.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphckxxwjv.scala:20)\n\tat Problem.main(tmphckxxwjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = n / 2\n        n match {\n            case n if n % 2 == 0 =>\
    \ (levels, levels, levels)\n            case n if n % 2 == 1 => (levels + 1, levels,\
    \ levels)\n            case n => (levels + 2, levels, levels)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgml1y0kq.scala:17:36\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m n\
    \ \e[33mif\e[0m n % \e[31m2\e[0m == \e[31m0\e[0m => (levels, levels, levels)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (Long, Long,\
    \ Long)\n\e[31m   |\e[0m                                    Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgml1y0kq.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m n\
    \ \e[33mif\e[0m n % \e[31m2\e[0m == \e[31m1\e[0m => (levels + \e[31m1\e[0m, levels,\
    \ levels)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (Long, Long,\
    \ Long)\n\e[31m   |\e[0m                                    Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgml1y0kq.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m n\
    \ => (levels + \e[31m2\e[0m, levels, levels)\n\e[31m\e[31m   |\e[0m          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Found:    (Long, Long, Long)\n\e[31m   |\e[0m                      Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ if (n==0l) return Nil\n      if (n%2==1l) return (n :: makeAPile(n/2l) :: makeAPile(n%2l))\n\
    \      else return (n :: makeAPile(n/3l) :: makeAPile(n/3l-1) :: makeAPile(n%2l))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw7ctvqh.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mif\e[0m (n%\e[31m2\e\
    [0m==\e[31m1l\e[0m) \e[33mreturn\e[0m (n :: makeAPile(n/\e[31m2l\e[0m) :: makeAPile(n%\e\
    [31m2l\e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                           Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw7ctvqh.scala:17:19 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33melse\e[0m \e[33mreturn\e[0m (n :: makeAPile(n/\e\
    [31m3l\e[0m) :: makeAPile(n/\e[31m3l\e[0m-\e[31m1\e[0m) :: makeAPile(n%\e[31m2l\e\
    [0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    List[Matchable]\n\e[31m   |\e\
    [0m                   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var stones = n.toInt\n        var level = List[Long]()\n        while (n>0){\n\
    \            var n = stones\n            var i = n.toInt\n            if (n mod\
    \ 2 == 1){\n                level = level:+ n.toLong\n                n -= 2\n\
    \            } else {\n                level = level:+ n.toLong\n            \
    \    n -= i\n            }\n            stones = n\n        }\n        return\
    \ level\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjnk86jbd.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (n mod \e[31m2\e[0m == \e[31m1\e\
    [0m){\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod\
    \ is not a member of Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < 2) 1l :: Nil\n        else makeAPile(n - 2l) ::\n            (if (n\
    \ % 2l == 0l) 2l.toLong else 1l.toLong :: makeAPile(n - 1l))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq2v_tte9.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m makeAPile(n - \e[31m2l\e[0m)\
    \ ::\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                           value :: is not a member of Long | List[Long]\n\e\
    [31m17 |\e[0m            (\e[33mif\e[0m (n % \e[31m2l\e[0m == \e[31m0l\e[0m) \e\
    [31m2l\e[0m.toLong \e[33melse\e[0m \e[31m1l\e[0m.toLong :: makeAPile(n - \e[31m1l\e\
    [0m))\n1 error found\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val num: Long = n / 2\n        if (n % 2 == 0)\n            return List(num.toLong\
    \ + num.toLong)\n        else\n            return List(num.toLong + num.toLong,\
    \ num.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp72x3xb1g.scala:22)\n\tat Problem.main(tmp72x3xb1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val arr = new Array[Long](n)\n        if (n%2==1)\n            arr.apply(arr.length-1)\
    \ = (n-1).toLong\n        else\n            arr.apply(arr.length-1) = ((n+n+1).toLong/2).toLong\n\
    \        arr.apply(arr.length-1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphib1zlpm.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphib1zlpm.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            arr.apply(arr.length-\e[31m1\e[0m) = (n-\e[31m1\e[0m).toLong\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ update is not a member of Int => Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphib1zlpm.scala:19:12 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            arr.apply(arr.length-\e[31m1\e[0m) = ((n+n+\e[31m1\e[0m).toLong/\e\
    [31m2\e[0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            value update is not a member of Int => Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphib1zlpm.scala:20:17 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        arr.apply(arr.length-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Long\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n<0) throw new IllegalArgumentException(\"Negative numbers are not allowed\"\
    )\n        val list = new ArrayList[Long]\n        val counter = math.ceil(math.log10(n)).toInt\n\
    \        val listOfNumbers = n.toInt/math.pow(10, counter).toInt\n        val\
    \ oddEven = if (counter%2==0) \"even\" else \"odd\"\n        for (i<-listOfNumbers.toInt;i<listOfNumbers.toInt;i+=2)\
    \ {\n            if (i==listOfNumbers.toInt)\n                list.add(n.toLong)\n\
    \            else {\n                list.add(n.toLong + math.pow(10, counter).toLong*i)\n\
    \            }\n        }\n        list.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1suahiw.scala:20:57 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-listOfNumbers.toInt;i<listOfNumbers.toInt;i+=\e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                         \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \       '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1suahiw.scala:20:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m\
    \ (i<-listOfNumbers.toInt;i<listOfNumbers.toInt;i+=\e[31m2\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                                                              ^\e[0m\n\
    \e[31m   |\e[0m                                            '<-' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1suahiw.scala:16:23\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc1suahiw.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-listOfNumbers.toInt;i<listOfNumbers.toInt;i+=\e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value foreach is not a member of Int\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : mutable.Stack[Long] = mutable.Stack()\n        val nextPile = if\
    \ ( n & 0x000001 ) pile.push(n.toLong+2) else pile.push(n.toLong)\n        pile.foreach\
    \ { x =>\n                pile.foreach(y => nextPile.foreach(z => if ( x == y\
    \ ) pile.push(z.toLong) else nextPile.foreach(x => pile.push(x))))\n        }\n\
    \        return pile.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpowg6333l.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m : mutable.Stack[\e\
    [35mLong\e[0m] = mutable.Stack()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpowg6333l.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m : mutable.Stack[\e\
    [35mLong\e[0m] = mutable.Stack()\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpowg6333l.scala:16:28 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mnextPile\e[0m = \e[33mif\e[0m ( n & \e[31m0x000001\e\
    [0m ) pile.push(n.toLong+\e[31m2\e[0m) \e[33melse\e[0m pile.push(n.toLong)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    Long\n\e[31m   |\e[0m               \
    \             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) Nil\n        else {\n            // Find the next even number.\n\
    \            var nextEven = n / 2\n            if (n % 2 == 0) nextEven = nextEven\
    \ * 2\n\n            // Find the next odd number.\n            var nextOdd = n\
    \ - nextEven\n            if (nextEven > nextOdd) nextEven = nextEven + 1\n  \
    \          nextOdd = nextOdd * 2\n\n            List(nextEven.toLong, nextOdd.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf7xobyx2.scala:30)\n\tat Problem.main(tmpf7xobyx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n<1l) Nil\n        else if(n.toInt==n) List(n.toLong)\n        else {\n\
    \            var stoneList = makeAPile(n.toInt+1)\n            var odd = 0l\n\
    \            var even = 0l\n            var oddVal = 0\n            var evenVal\
    \ = 0\n            stoneList.foreach(x => \n            {\n                val\
    \ isEven = x.toInt == evenVal\n                val isOdd = x.toInt == oddVal\n\
    \                if(isOdd && isEven) {\n                    odd += 1\n       \
    \             evenVal += 1\n                } else if(isOdd) {\n             \
    \       odd += 1\n                    oddVal += 1\n                } else if(isEven)\
    \ {\n                    even += 1\n                    evenVal += 1\n       \
    \         } else {\n                    odd += 1\n                }\n        \
    \    })\n            stoneList.insert(0, odd)\n            stoneList.insert(0,\
    \ even)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvca4vg9r.scala:40:22 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            stoneList.insert(\e[31m0\e[0m, odd)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue insert is\
    \ not a member of List[Long] - did you mean List[Long].init?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvca4vg9r.scala:41:22 ------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m            stoneList.insert(\e[31m0\e[0m, even)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue insert is\
    \ not a member of List[Long] - did you mean List[Long].init?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = new mutable.LinkedList[Long]\n        val newPile = new mutable.LinkedList[Long]\n\
    \        for (i <- 0 until n){\n            if (i%2 == 0){\n                newPile.push(n\
    \ - (i+1))\n            } else {\n                newPile.push((i + 1))\n    \
    \        }\n        }\n        pile.pushAll(newPile)\n        return pile\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yu04fg5.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yu04fg5.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewPile\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_yu04fg5.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n){\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def makeLevels(n : Long) : List[Long] = {\n            val n2 = math.ceil(n/2.0).toInt\n\
    \            if(n % 2 == 0) n2.toLong else (5l*n2).toLong + (7l*(n2-1).toLong).toLong\n\
    \        }\n        val result = mutable.ListBuffer[Long]()\n        for(i <-\
    \ 0 to n-1) result += makeLevels(i)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpviktk0ep.scala:17:30\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(n %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) n2.toLong \e[33melse\e[0m (\e[31m5l\e[0m*n2).toLong\
    \ + (\e[31m7l\e[0m*(n2-\e[31m1\e[0m).toLong).toLong\n\e[31m\e[31m   |\e[0m   \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Found:    Long\n\e[31m   |\e[0m                           Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpviktk0ep.scala:17:42 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(n % \e[31m2\e[0m == \e[31m0\e\
    [0m) n2.toLong \e[33melse\e[0m (\e[31m5l\e[0m*n2).toLong + (\e[31m7l\e[0m*(n2-\e\
    [31m1\e[0m).toLong).toLong\n\e[31m\e[31m   |\e[0m                            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Found:    Long\n\e[31m   |\e[0m   \
    \                                       Required: \e[1m\e[32mList\e[0m\e[1m\e\
    [32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpviktk0ep.scala:19:21 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpviktk0ep.scala:20:22 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to n-\e[31m1\e[0m)\
    \ result += makeLevels(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nLevels = n.toInt\n        var ret: List[Long] = List()\n        var nextLevel\
    \ = 0\n        var nextLevelSum = 0\n        // Keep adding levels of stones\n\
    \        for (i <- 0 until nLevels) {\n            if (nextLevel == 0) {\n   \
    \             nextLevelSum = n\n            } else {\n                nextLevel\
    \ = nextLevel % 2 == 0\n                nextLevelSum = nextLevelSum + (nextLevel\
    \ ? n.toLong : (n.toLong + 1).toLong)\n            }\n            ret = ret :+\
    \ nextLevelSum\n        }\n        ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg7xnzipx.scala:25:84 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                nextLevelSum = nextLevelSum + (nextLevel\
    \ ? n.toLong : (n.toLong \e[35m+\e[0m \e[31m1\e[0m).toLong)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \  ')' expected, but '.' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7xnzipx.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                nextLevelSum\
    \ = n\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg7xnzipx.scala:24:28 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                nextLevel = nextLevel % \e[31m2\e[0m == \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Boolean\n\e[31m   |\e\
    [0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg7xnzipx.scala:25:80 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                nextLevelSum = nextLevelSum + (nextLevel\
    \ ? n.toLong : (n.toLong \e[35m+\e[0m \e[31m1\e[0m).toLong)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \        Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg7xnzipx.scala:25:57 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                nextLevelSum = nextLevelSum + (nextLevel ? n.toLong : (n.toLong\
    \ \e[35m+\e[0m \e[31m1\e[0m).toLong)\n\e[31m\e[31m   |\e[0m                  \
    \            "
  stdout: ''
  timestamp: 1660010266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val li = 1 to n\n        .map(i => i.toLong)\n        .filter(_ % 2 == 1)\n\
    \        .map(_ + 2 * _)\n        .toList\n        .reverse\n\n        (0 to (n-1))\n\
    \        .map(i => li.take(i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp43xrg0e6.scala:16:9 -------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mli\e[0m = \e[31m1\e[0m to\
    \ n\n\e[31m16 |\e[0m        .map(\e[36mi\e[0m => i.toLong)\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      value map\
    \ is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43xrg0e6.scala:22:15\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        (\e[31m0\e[0m to (n-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m  \
    \             Found:    Long\n\e[31m   |\e[0m               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var stones = n.toLong\n        var levels = List[Long]()\n        val evens\
    \ = stones.toInt\n        val odds = evens >>> 1\n        levels :+= stones.toLong\n\
    \        while ( stones > 0 ) {\n            stones -= evens\n            levels\
    \ :+= evens.toLong\n            stones -= odds\n            levels :+= odds.toLong\n\
    \        }\n        levels\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkh9iqogl.scala:29)\n\tat Problem.main(tmpkh9iqogl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case 0 => Nil\n            case 1 => List(1)\n    \
    \        case _ =>\n                var l = n.toLong - 2\n                val\
    \ evens = n.toLong / 2\n                val odds = l / 2\n                l match\
    \ {\n                    case 1 => List(1)\n                    case _ => List(odds\
    \ + evens)\n                }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0hhp3ea.scala:29)\n\tat Problem.main(tmpe0hhp3ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var result : List[Long] = List()\n        if(n.toInt % 2 == 0) result = result\
    \ :+ ((n.toInt/2).toLong)\n        else if(n.toInt % 2 == 1) result = result :+\
    \ ((n.toInt/2).toLong + 1)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ec1vzgk.scala:21)\n\tat Problem.main(tmp_ec1vzgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var result = ListBuffer[Long]()\n        var currentLevel = ListBuffer[Long](n+1);\n\
    \        var maxLevel = n.toLong\n        var isEven = false\n        while (currentLevel.nonEmpty\
    \ || maxLevel > 0) {\n            if (maxLevel > 0) {\n                var maxLevelToMake\
    \ = Math.min(currentLevel.head.toLong + 2, maxLevel.toLong)\n                currentLevel\
    \ += (maxLevelToMake-1)\n                maxLevel -= maxLevelToMake\n        \
    \        if (currentLevel.nonEmpty && maxLevel > 0) {\n                    if\
    \ (isEven) {\n                        currentLevel.clear()\n                 \
    \       maxLevel = 0\n                    } else {\n                        currentLevel.clear()\n\
    \                        isEven = !isEven\n                    }\n           \
    \     }\n            }\n            result += currentLevel\n        }\n      \
    \  result .toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydxyv7pj.scala:34:22\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            result += currentLevel\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    Found:    (currentLevel : scala.collection.mutable.ListBuffer[Long])\n\e\
    [31m   |\e[0m    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val odds = n.toInt % 2\n        val evens = n.toInt / 2\n        odds match\
    \ {\n            case 0 => List(n.toLong)\n            case 1 => List(odds, evens)\n\
    \            case _ =>\n                List(odds).init ++ makeAPile(evens)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa7wxchph.scala:21:16\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                List(odds).init\
    \ ++ makeAPile(evens)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    List[\e[1m\e[31mAnyVal\e[0m]\n\e\
    [31m   |\e[0m                Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var ans = List[Long]()\n        var level = n\n        while (level > 1) {\n\
    \            var nLevel = (level % 2 == 0) ? level : (level + 1)\n           \
    \ ans ::= nLevel.toLong\n            level = nLevel\n        }\n        ans ::=\
    \ level.toLong\n        ans\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_iy0xldg.scala:18:59 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36mnLevel\e[0m = (level\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) ? level : (\e[35mlevel\e[0m \e[35m+\e[0m \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_iy0xldg.scala:18:42 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36mnLevel\e[0m = (level % \e\
    [31m2\e[0m == \e[31m0\e[0m) ? level : (\e[35mlevel\e[0m \e[35m+\e[0m \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         value ? is not a member of Boolean\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ val (evenOdd, nextOdd) = n match {\n        case x if x % 2 == 0 => (x to x,\
    \ x to x + 1)\n        case x if x % 2 == 1 => (x to x, x to x + 1)\n        case\
    \ x => throw new IllegalArgumentException(\"n must be an odd number\")\n     \
    \ }\n      (0 until n).map(_.toLong).map(n => nextOdd(n) + evenOdd(n)).flatten.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplknb6c_m.scala:20:15\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      (\e[31m0\e[0m until n).map(_.toLong).map(\e\
    [36mn\e[0m => nextOdd(n) + evenOdd(n)).flatten.toList\n\e[31m\e[31m   |\e[0m \
    \              ^\e[0m\n\e[31m   |\e[0m               Found:    (n : Long)\n\e\
    [31m   |\e[0m               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplknb6c_m.scala:20:49 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m      (\e[31m0\e[0m until n).map(_.toLong).map(\e[36mn\e[0m\
    \ => nextOdd(n) + evenOdd(n)).flatten.toList\n\e[31m\e[31m   |\e[0m          \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplknb6c_m.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      (\e[31m0\e[0m until n).map(_.toLong).map(\e[36mn\e\
    [0m => nextOdd(n) + evenOdd(n)).flatten.toList\n\e[31m\e[31m   |\e[0m        \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmplknb6c_m.scala:20:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      (\e[31m0\e[0m until n).map(_.toLong).map(\e[36mn\e\
    [0m => nextOdd(n) + evenOdd(n)).flatten.toList\n\e[31m\e[31m   |\e[0m        \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mno given instance of type Long => IterableOnce[B] was found for parameter\
    \ asIterable of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Make new list of length n + 1 \n        val newList = mutable.ArrayBuffer.empty[Long]()\n\
    \        // Add first n+1 elements in list\n        newList += n \n        //\
    \ Add last even number if n is odd\n        newList += if (n & 0x1) == 1 \n  \
    \          0x10000l\n        else\n            (n-1)\n        // Add last odd\
    \ number if n is even\n        newList += if (n & 0x1) == 0 \n            0x100000l\n\
    \        else\n            (n-1)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgdt28l8n.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        newList += \e[33mif\e[0m (n & \e[31m0x1\e[0m)\
    \ == \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m  \
    \ |\e[0m                   expression expected but \e[31mif\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpgdt28l8n.scala:22:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdt28l8n.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgdt28l8n.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[31m0x10000l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[31m65536L\e\
    [0m : Long)\n\e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numLevelsN = (n / 2).toInt\n        val evenLevel = (n / 2).toInt\n  \
    \      val oddLevel = n / 2\n        val level = List(oddLevel.toLong)\n     \
    \   for (i <- 1 to numLevelsN) {\n            level :+= (i + 2)\n        }\n \
    \       if (n % 2 == 0) {\n            level :+= evenLevel.toLong\n        }\n\
    \        return level\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyayy583.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            level :+= (i + \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value :+= is not\
    \ a member of List[Long] - did you mean level.:+?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkyayy583.scala:23:18 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            level :+= evenLevel.toLong\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value :+= is not a member of List[Long]\
    \ - did you mean level.:+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var counts = List.fill(n.toLong+1) {0l}\n        for (i <- 0 until n by 2)\
    \ {\n            if (n.toInt % 2 == 0) {\n                counts(i) = counts(i)\
    \ + 2\n            } else {\n                counts(i) = counts(i) + 1\n     \
    \       }\n        }\n        counts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpllny9b1i.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e\
    [0m = List.fill(n.toLong+\e[31m1\e[0m) {\e[31m0l\e[0m}\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  Found:    Long\n\e[31m   |\e[0m                           \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpllny9b1i.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m             \
    \             ^\e[0m\n\e[31m   |\e[0m                          Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpllny9b1i.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                counts(i) = counts(i) + \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Long] - did you mean List[Long].updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpllny9b1i.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                counts(i) = counts(i) + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Long] - did you mean List[Long].updated?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 1l) List(n+1l)\n        else {\n            def isEven(x: Long) =\
    \ x % 2 == 0\n            def isOdd(x: Long) = !isEven(x)\n            def makeAPile_aux(n:\
    \ Long, odd: Long, even: Long) : List[Long] = {\n                if (n <= 0) List(0)\n\
    \                else if (isEven(n)) List(even)\n                else if (isOdd(n))\
    \ List(odd)\n                else makeAPile_aux(n-1, odd, even+even)\n       \
    \     }\n            makeAPile_aux(n,0l,1l)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqzl30fm.scala:29)\n\tat Problem.main(tmpkqzl30fm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n       \
    \     if(n % 2 == 0)\n                nums += (i + (if (n % 2 == 0) 1 else 1))\n\
    \            else\n                nums += (i + (if (n % 2 == 1) 0 else 1))\n\
    \        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjjnkay1.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmjjnkay1.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val next = (n + 1) % 2\n        val level1 = if (next) (n + 2) else n\n  \
    \      val level2 = next + n / 2\n        val level3 = next + (next + n) / 2\n\
    \        List(level1.toLong, level2.toLong, level3.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1o8fpzh.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlevel1\e\
    [0m = \e[33mif\e[0m (next) (n + \e[31m2\e[0m) \e[33melse\e[0m n\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (next : Long)\n\e[31m   |\e[0m                         Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val n = n.toLong\n        if(n <= 1) Nil\n        else (math.floor(n/2)*2l).map(x\
    \ => if(n % 2 == 0) x+1l else x+1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6yrmqsge.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6yrmqsge.scala:17:34 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33melse\e[0m (math.floor(n/\e[31m2\e[0m)*\e[31m2l\e\
    [0m).map(x => \e[33mif\e[0m(n % \e[31m2\e[0m == \e[31m0\e[0m) x+\e[31m1l\e[0m\
    \ \e[33melse\e[0m x+\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value map is not a member of Double\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numList = List(n)\n        var index = 1\n        var nextNum: Long =\
    \ 1\n        while(index <= numList.length)\n        {\n            if(index %\
    \ 2 == 1)\n            {\n                nextNum = numList((index + 1).toLong)\n\
    \                numList.updated(index.toLong, nextNum.toLong)\n            }\n\
    \            else\n            {\n                nextNum = numList((index - 1).toLong)\n\
    \                numList.updated(index.toLong, nextNum.toLong)\n            }\n\
    \            index += 1\n        }\n        numList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbtet05l6.scala:22:46\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                nextNum = numList((index\
    \ + \e[31m1\e[0m).toLong)\n\e[31m\e[31m   |\e[0m                             \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \   Found:    Long\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbtet05l6.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                numList.updated(index.toLong,\
    \ nextNum.toLong)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Long\n\e[31m   |\e\
    [0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbtet05l6.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                nextNum = numList((index - \e[31m1\e\
    [0m).toLong)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Long\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbtet05l6.scala:28:38 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                numList.updated(index.toLong, nextNum.toLong)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Long\n\e[31m   |\e[0m    \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = (1 to (n/2) map (n => (n+1L) mod 2 match {\n            case 0\
    \ => n+1L\n            case 1 => n+1L\n            case 2 => n+1L\n          \
    \  case _ => n+1L\n        })).toList\n        (1 to (n/2) map (n => list.lastOption).getOrElse(n+1L).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxbcqnqj.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m = (\e[31m1\e[0m to (n/\e[31m2\e[0m) map (\e[36mn\e[0m => (n+\e[31m1L\e[0m)\
    \ mod \e[31m2\e[0m \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                 \
    \         ^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkxbcqnqj.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = (\e[31m1\e[0m\
    \ to (n/\e[31m2\e[0m) map (\e[36mn\e[0m => (n+\e[31m1L\e[0m) mod \e[31m2\e[0m\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpkxbcqnqj.scala:21:15 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        (\e[31m1\e[0m to (n/\e[31m2\e[0m) map (\e[36mn\e[0m =>\
    \ list.lastOption).getOrElse(n+\e[31m1L\e[0m).toLong)\n\e[31m\e[31m   |\e[0m \
    \              ^^^\e[0m\n\e[31m   |\e[0m               Found:    Long\n\e[31m\
    \   |\e[0m               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpkxbcqnqj.scala:21:25 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        (\e[31m1\e[0m to (n/\e[31m2\e[0m) map (\e[36mn\e[0m\
    \ => list.lastOption).getOrElse(n+\e[31m1L\e[0m).toLong)\n\e[31m\e[31m   |\e[0m\
    \                         ^\e[0m\n\e[31m   |\e[0m                         Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                         I could\
    \ not infer the type of the parameter n.\n4 errors found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) {\n            List.empty\n        } else if (n % 2 == 0) {\n\
    \            (List.fill(n / 2)(n / 2l.toLong) + makeAPile(n / 2)).toList\n   \
    \     } else {\n            (List.fill(n)(n / 2l.toLong) + makeAPile(n)).toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0xoqa48.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            (List.fill(n / \e\
    [31m2\e[0m)(n / \e[31m2l\e[0m.toLong) + makeAPile(n / \e[31m2\e[0m)).toList\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0xoqa48.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            (List.fill(n)(n /\
    \ \e[31m2l\e[0m.toLong) + makeAPile(n)).toList\n\e[31m\e[31m   |\e[0m        \
    \               ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case 0    => (0l :: Nil)\n            case _    =>\
    \ makeAPile(n / 2)\n            case _ if n mod 2 == 0 => (n / 2 :: makeAPile(n\
    \ / 2))\n            case _    => makeAPile(n / 2) ++ makeAPile(n / 2)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdzel972p.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m n mod \e\
    [31m2\e[0m == \e[31m0\e[0m => (n / \e[31m2\e[0m :: makeAPile(n / \e[31m2\e[0m))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod\
    \ is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) List(1l.toLong)\n        else {\n            val nextLevel = if\
    \ (n%2==0) n.toInt+1 else n.toInt\n            nextLevel.toLong :: makeAPile(nextLevel)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\
    \tat Problem$.makeAPile(tmpuxxjcgc2.scala:18)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n % 2 != 0) {\n            List(n.toLong)\n        } else {\n        \
    \    val p = n - 1\n            val q = p / 2\n            val r = p % 2\n   \
    \         val ans = List(p.toLong, q.toLong, r.toLong)\n            (ans ++ makeAPile(q).map(x\
    \ => x+ans.last))\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvw8ntqa.scala:26)\n\tat Problem.main(tmpnvw8ntqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case np if np % 2 == 0 => List(n.toLong)\n        \
    \    case np if np % 2 != 0 => makeAPile(np.toInt)\n            case _ => makeAPile(n.toInt\
    \ + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var result : List[Long] = null\n        val arr: mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        arr :+= n\n        result :+= arr.take(2).toList\n\
    \        result :+= arr.takeWhile(i => i % 2 == 0).sum\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiibs0ug8.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m: mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiibs0ug8.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m: mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var currentList: List[Long] = List()\n        val n2 = n.toLong\n        for(_\
    \ <- 0 until n2)\n        {\n            var num = (math.min(n.toLong, (n2.toLong).toLong)\
    \ / 2.0).toInt\n            if((num.toLong % 2) == 0)\n            {\n       \
    \         currentList += num.toLong\n            }\n            else\n       \
    \     {\n                currentList += num.toLong + num.toLong\n            }\n\
    \        }\n        return currentList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpotijob0u.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(_ <- \e\
    [31m0\e[0m until n2)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n2 : Long)\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpotijob0u.scala:22:28 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                currentList += num.toLong\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpotijob0u.scala:26:28 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                currentList += num.toLong + num.toLong\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ += is not a member of List[Long] - did you mean List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val l = List.range(1l,n)\n        if(n.toInt % 2 == 0){\n            val odd\
    \ = l.filter(_ % 2 == 1).size\n            val even = l.filter(_ % 2 == 0).size\n\
    \            List(odd,even)\n        }else{\n            val odd = l.filter(_\
    \ % 2 == 0).size\n            val even = l.filter(_ % 2 == 1).size\n         \
    \   List(odd,even)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnsw_tjtc.scala:27)\n\tat Problem.main(tmpnsw_tjtc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0l)\n            Nil\n        else {\n            var ans = n\n \
    \           var nextOdd = if (n % 2 == 1l) 2l else 1l\n            val nextEven\
    \ = if (n % 2 == 0l) 2l else 1l\n            ans = List(n, nextOdd, nextEven)\n\
    \            ans ++ makeAPile(nextOdd) ++ (nextEven : : List[Long]) ++ (makeAPile(nextEven)\
    \ : List[Long])\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjf05ryb6.scala:22:53 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            ans ++ makeAPile(nextOdd) ++ (nextEven :\
    \ : List[Long]) ++ (makeAPile(nextEven) : \e[35mList\e[0m[\e[35mLong\e[0m])\n\e\
    [31m\e[31m   |\e[0m                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                   an identifier expected, but\
    \ ':' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjf05ryb6.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            ans = List(n, nextOdd,\
    \ nextEven)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                  Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf05ryb6.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            ans ++ makeAPile(nextOdd)\
    \ ++ (nextEven : : List[Long]) ++ (makeAPile(nextEven) : \e[35mList\e[0m[\e[35mLong\e\
    [0m])\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value ++ is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n % 2 == 1) {\n            List(n.toLong, n.toLong + 2)\n        }\n  \
    \      else {\n            List(n.toLong, n.toLong - 1, n.toLong - 2)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzw6pnu9.scala:23)\n\tat Problem.main(tmpuzw6pnu9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var levels : List[Long] = Nil\n        if (n == 0)\n            levels = Nil\n\
    \        else {\n            if (n%2 == 0)\n                levels = levels :+\
    \ n\n            else {\n                val odd = n/2\n                val even\
    \ = n%2\n                levels = levels :+ (odd+even)\n            }\n      \
    \  }\n        levels\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph68gbaz7.scala:30)\n\tat Problem.main(tmph68gbaz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0) List.empty\n        else{\n            val first = n / 2\n   \
    \         val nextOdd = (n/2) +1\n            val nextEven = (n/2) +2\n      \
    \      makeAPile(first) ++ makeAPile(nextOdd) ++ makeAPile(nextEven)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\
    \tat Problem$.makeAPile(tmp9tolg6e0.scala:20)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0) List.empty\n        else if (n % 2 == 0) makeAPile(n / 2) :::\
    \ makeAPile(n / 2) ::: makeAPile(n / 2) ::: List.empty\n        else makeAPile(n\
    \ / 2) ::: makeAPile(n / 2) ::: makeAPile(n / 2) ::: List.empty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3753xbdu.scala:20)\n\tat Problem.main(tmp3753xbdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def oddEvenToList(n: Long) : List[Long] = {\n            n match {\n     \
    \           case n if n % 2 != 0 => n.toLong::oddEvenToList(n.toInt).reverse\n\
    \                case n if n % 2 == 0 => n.toInt::oddEvenToList(n.toLong).reverse\n\
    \                case _ => throw new IllegalArgumentException(s\"${n} is not a\
    \ positive integer\")\n            }\n        }\n        oddEvenToList(n)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\tat Problem$.oddEvenToList$1(tmpcyxxn17y.scala:17)\n\
    \tat"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ans = ListBuffer.empty[Long]\n        var even = 0\n        var odd =\
    \ 0\n        var n1 = n\n\n        while(n > 0) {\n            n1 -= 1\n     \
    \       even = even + 1\n            odd = odd + n1 % 2 match {\n            \
    \    case 1 => odd\n                case 0 => even\n            }\n          \
    \  ans :+= n1.toLong\n            n -= 1\n        }\n\n        ans\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogg53t17.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            ans :+= n1.toLong\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not a member of scala.collection.mutable.ListBuffer[Long]\
    \ - did you mean ans.++=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogg53t17.scala:28:14\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpogg53t17.scala:31:8 ---------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        ans\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (ans : scala.collection.mutable.ListBuffer[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n >= 0l)\n        require(n % 2 == 0)\n        require(n > 0)\n\n\
    \        // Get odd number or even number\n        val odd = if (n % 2 == 0) n\
    \ / 2l else n * 3l\n\n        // make pile\n        val count = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            if (i == 0 || i % 2 == 0) {\n   \
    \             count += odd.toLong\n            } else {\n                count\
    \ += even.toLong\n            }\n        }\n        count.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3444qa4.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl3444qa4.scala:24:26 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Write your code here\n        if (n <= 0) Nil\n        else if ((n & 1)\
    \ == 0) (n to 1l) map (makeAPile _) else (2 to n toList) map (makeAPile _)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpssybyau8.scala:17:78 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m ((n & \e[31m1\e\
    [0m) == \e[31m0\e[0m) (n to \e[31m1l\e[0m) map (makeAPile _) \e[33melse\e[0m (\e\
    [31m2\e[0m to n toList) map (makeAPile _)\n\e[31m\e[31m   |\e[0m             \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpssybyau8.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m ((n & \e[31m1\e[0m) == \e[31m0\e[0m) (n to \e[31m1l\e[0m) map (makeAPile _)\
    \ \e[33melse\e[0m (\e[31m2\e[0m to n toList) map (makeAPile _)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    \e[1m\e[31mIndexedSeq\e[0m\e\
    [1m\e[31m[\e[0mList[Long\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m                  \
    \             Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpssybyau8.scala:17:70 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m ((n & \e[31m1\e[0m) == \e[31m0\e\
    [0m) (n to \e[31m1l\e[0m) map (makeAPile _) \e[33melse\e[0m (\e[31m2\e[0m to n\
    \ toList) map (makeAPile _)\n\e[31m\e[31m   |\e[0m                           \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                                                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < (1l) ) List(n.toLong)\n        if (n < (2l) ) List(1l, n.toLong)\n\
    \        if (n < (3l) ) List(3l, n.toLong)\n        if (n < (4l) ) List(4l, n.toLong)\n\
    \        if (n < (5l) ) List(6l, 7l, n.toLong)\n        if (n < (6l) ) List(5l,\
    \ 7l, n.toLong)\n        if (n < (7l) ) List(4l, 5l, n.toLong)\n        if (n\
    \ < (8l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (9l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (10l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (11l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (12l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (13l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (14l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (15l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (16l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (17l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (18l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (19l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (20l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (21l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (22l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (23l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (24l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (25l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (26l) ) List(3l, 6l, 7l, n.toLong)\n        if (n < (27l) ) List(3l, 6l, 7l,\
    \ n.toLong)\n        if (n < (28l) ) List(3l, 6l, 7l, n.toLong)\n        if (n\
    \ < (29\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpynrtiv05.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var lst = new List[Long]()\n        if(n % 2 == 0){\n            lst += n.toLong\n\
    \        } else {\n            val next = math.ceil(math.pow(n, 0.5)).toLong\n\
    \            var lst1 = makeAPile(next)\n            lst1 = lst1.dropRight(1).append(lst1.drop(1))\n\
    \            lst = lst1.reverse\n        }\n        lst.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_1pnn1r.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            lst += n.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_1pnn1r.scala:21:37\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            lst1 = lst1.dropRight(\e\
    [31m1\e[0m).append(lst1.drop(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[Long] - did you mean List[Long].appended?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levelList = List.range(n + 1).toList\n        val isEven = (n+1)%2 ==\
    \ 0\n        val nextOdd = isEven ? 2l  : 1l\n        val nextEven = isEven ?\
    \ 1l  : 1l\n        levelList :+ nextOdd.toLong :+ nextEven.toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbjy3xs1f.scala:15:29 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevelList\e[0m = List.range(n\
    \ + \e[31m1\e[0m).toList\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mrange\e[0m in \e[33mtrait\e[0m \e[35mIterableFactory\e[0m with types\n\e[31m\
    \   |\e[0m [A](start: A, end: A, step: A)(\e[33mimplicit \e[0mevidence$4: Integral[A]):\
    \ List[A]\n\e[31m   |\e[0m [A](start: A, end: A)(\e[33mimplicit \e[0mevidence$3:\
    \ Integral[A]): List[A]\n\e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbjy3xs1f.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnextOdd\e[0m = isEven ?\
    \ \e[31m2l\e[0m  : \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value ? is not a member of Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbjy3xs1f.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnextEven\e[0m = isEven ?\
    \ \e[31m1l\e[0m  : \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value ? is not a member\
    \ of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def makeAPile(n : Long, levels : List[Long]) : List[Long] = {\n          \
    \  if(n < 0) levels\n            else if(n % 2 == 0) makeAPile(n/2, levels :+\
    \ n+1)\n            else makeAPile(n/2, levels :+ n/2)\n        }\n        makeAPile(n,\
    \ Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val res : List[Long] = new ListBuffer[Long]\n        var level = 0\n     \
    \   while(n>0) {\n            res += level.toLong\n            level += 1\n  \
    \          n -= (n % 2 == 0) ? 2 : 1 // n remainder is odd\n        }\n      \
    \  res.reverse.drop(1)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz210vrvy.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpz210vrvy.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            res += level.toLong\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member of\
    \ List[Long] - did you mean res.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz210vrvy.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n -= (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) ? \e[31m2\e[0m : \e[31m1\e[0m \e[34m// n remainder\
    \ is odd\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz210vrvy.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            n -= (n % \e[31m2\e[0m == \e[31m0\e[0m) ?\
    \ \e[31m2\e[0m : \e[31m1\e[0m \e[34m// n remainder is odd\e[0m\n\e[31m\e[31m \
    \  |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \  value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n >= 0)\n        require(n % 2 == 0)\n        require(n < Long.MaxValue)\
    \ // avoid overflow\n        require(n >= 1)\n        val p = new mutable.LinkedHashMap[Long,\
    \ List[Long]]()\n        var currentLevel = n.toLong\n        while (currentLevel\
    \ > 1) {\n            val nextLevel = math.max(math.floor(currentLevel / 2), 2l).toLong\n\
    \            currentLevel = nextLevel\n            p.put(currentLevel, p.getOrElse(currentLevel,\
    \ Nil).head :: p.getOrElse(currentLevel, Nil).tail)\n        }\n        p.get(currentLevel).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjt4nplsw.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedHashMap[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ if(n%2 == 0) oddLevels(n) else evenLevels(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ho35963.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mif\e[0m(n%\e[31m2\e[0m == \e[31m0\e[0m) oddLevels(n)\
    \ \e[33melse\e[0m evenLevels(n)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: oddLevels\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ho35963.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mif\e[0m(n%\e[31m2\e[0m == \e[31m0\e[0m) oddLevels(n)\
    \ \e[33melse\e[0m evenLevels(n)\n\e[31m\e[31m   |\e[0m                       \
    \              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       Not found: evenLevels\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) List(1l)\n        else {\n            var currentLevel : List[Long]\
    \ = List(n)\n            var i : Long = 1\n\n            var oddEvenCount : Long\
    \ = if (n % 2 == 0) 1 else 0\n\n            while (i < n) {\n                val\
    \ nextLevel = if (oddEvenCount == 0) {\n                    i + (if (n % 2 ==\
    \ 0) 1 else 0)\n                } else {\n                    i + (if (n % 2 ==\
    \ 0) 1 else 0)\n                    + oddEvenCount\n                }\n\n    \
    \            currentLevel = List(nextLevel.toLong)\n                oddEvenCount\
    \ = if (nextLevel % 2 == 0) 1 else 0\n                i = nextLevel + 1\n    \
    \        }\n\n            currentLevel\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvnz9zsl.scala:39)\n\tat Problem.main(tmpmvnz9zsl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // base case\n        if (n <= 1L) {\n            List(1L)\n        } else\
    \ {\n            // odd case\n            if (n % 2L == 0L) {\n              \
    \  makeAPile(n / 2L).toList :+ n / 2L.toLong :: makeAPile(n / 2L)\n          \
    \  } else {\n                // even case\n                makeAPile((n - 1L)\
    \ / 2L).toList :+ (n - 1L) / 2L.toLong :: makeAPile((n - 1L) / 2L)\n         \
    \   }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvjma5nh.scala:21:44\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                makeAPile(n /\
    \ \e[31m2L\e[0m).toList :+ n / \e[31m2L\e[0m.toLong :: makeAPile(n / \e[31m2L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    \e[1m\e\
    [31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m         \
    \                                   Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvvjma5nh.scala:24:51 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                makeAPile((n - \e[31m1L\e[0m) / \e[31m2L\e\
    [0m).toList :+ (n - \e[31m1L\e[0m) / \e[31m2L\e[0m.toLong :: makeAPile((n - \e\
    [31m1L\e[0m) / \e[31m2L\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m                                                   Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var counterList = List[Long]()\n        for(i <- 0 to n by 2) {\n        \
    \    counterList += i+1\n        }\n        return counterList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc4_b2fk7.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \  ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\e[31m \
    \  |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc4_b2fk7.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            counterList += i+\e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val rec = List.range(1,n+1).map(_ * 2l).toList ::: List.range(1,n)\n     \
    \   if (n % 2 == 0)\n            rec.dropRight(1).reverse.drop(1).map(_ + 1l).toList\n\
    \        else\n            rec.drop(1).reverse.drop(1).map(_ + 1l).toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9bt_82pl.scala:15:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = List.range(\e\
    [31m1\e[0m,n+\e[31m1\e[0m).map(_ * \e[31m2l\e[0m).toList ::: List.range(\e[31m1\e\
    [0m,n)\n\e[31m\e[31m   |\e[0m                                                \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \     No implicit Ordering defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val odd = n % 2 == 0\n        var result = (1 until n).toList\n        if\
    \ (!odd) result = result :+ result.last * 2 + 1\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo6a7hz0d.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mresult\e\
    [0m = (\e[31m1\e[0m until n).toList\n\e[31m\e[31m   |\e[0m                   \
    \           ^\e[0m\n\e[31m   |\e[0m                              Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo6a7hz0d.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : List[Int])\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = mutable.MutableList[Long]()\n        val level = (n + 1L) / 2\n\
    \        pile.add((n + 1L).toLong)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsa3svtdr.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = List[Long]()\n        var count = 1\n        while ( count < n\
    \ ) {\n            if ( (n % 2) == 0 ) nums += count + 1\n            else   \
    \              nums += count\n            count += 1\n        }\n        nums\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgzu89u_e.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m ( (n % \e[31m2\e[0m) == \e\
    [31m0\e[0m ) nums += count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member\
    \ of List[Long] - did you mean nums.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgzu89u_e.scala:19:38 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33melse\e[0m                 nums += count\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ += is not a member of List[Long] - did you mean nums.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val res = ListBuffer[Long]()\n        n match {\n            case 0 =>\n \
    \               res.add(\"0\")\n            case _ =>\n                if (n %\
    \ 2 == 0)\n                    res.add((n.toLong + 2).toLong)\n              \
    \  else\n                    res.add((n.toLong + 4).toLong)\n        }\n     \
    \   res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuiijdj0m.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                res.add(\e[31m\"0\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m  value add is not a member\
    \ of scala.collection.mutable.ListBuffer[Long]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpuiijdj0m.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                    res.add((n.toLong + \e[31m2\e[0m).toLong)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not\
    \ a member of scala.collection.mutable.ListBuffer[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuiijdj0m.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    res.add((n.toLong\
    \ + \e[31m4\e[0m).toLong)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31m   |\e[0m  import coll"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = (1 to n).filter { n =>\n          n match {\n            case\
    \ x if x % 2 == 0 => true\n            case x => false\n          }\n        }.toList.map(x\
    \ => (x + 1).toLong)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsouyyk97.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = (\e[31m1\e[0m to n).filter { \e[36mn\e[0m =>\n\e[31m\e[31m   |\e[0m    \
    \                       ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (n : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ones = List.fill(n.toInt)(1l)\n        val odd = ones\n            .dropRight(1)\n\
    \            .dropRight(1)\n            .dropRight(1)\n            .dropRight(1)\n\
    \            .dropRight(1)\n            .takeRight(n)\n            .map(_ + n.toLong)\n\
    \        val even = ones.dropRight(n).takeRight(n).toList\n        odd + even\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83lhxktn.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            .takeRight(n)\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83lhxktn.scala:24:34\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = ones.dropRight(n).takeRight(n).toList\n\e[31m\e[31m   |\e[0m           \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83lhxktn.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = ones.dropRight(n).takeRight(n).toList\n\e[31m\e[31m   |\e[0m           \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                              Found:    (n : Long)\n\e[31m   |\e[0m         \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp83lhxktn.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        odd + even\n\e[31m\e[31m   |\e[0m        ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n.toInt%2==0)\n            List(n.toInt)\n        else\n            n.toInt.toLong\
    \ + makeAPile(n/2)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfxmfzzvz.scala:18:27 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n.toInt.toLong + makeAPile(n/\e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m \
    \  |\e[0mmatch arguments (List[Long])\n1 error found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0) {\n            List(0)\n        } else if (n % 2 == 0) {\n   \
    \         List(n * (n +1) / 2)\n        } else {\n            List(n * (n + 1)\
    \ / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdnmmfnl.scala:24)\n\tat Problem.main(tmphdnmmfnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n % 2 != 0, s\"n is not odd\")\n        n match {\n            case\
    \ n if (n >= 2l) => (2l to n).toList\n            case n if (n >= 3l) => (3l to\
    \ n).toList\n            case n => (n+1l to n).toList\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd71_d9hc.scala:23)\n\tat Problem.main(tmpd71_d9hc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if((n%2) == 0) List(n.toLong+2l.toLong, n.toLong+3l.toLong, n.toLong+1l.toLong,\
    \ n.toLong+4l.toLong)\n        else List(n.toLong+2l.toLong, n.toLong+4l.toLong,\
    \ n.toLong+3l.toLong, n.toLong+1l.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzb79uqb_.scala:19)\n\tat Problem.main(tmpzb79uqb_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var list: List[Long] = List();\n        if (n<=1) { list = n :: list; return\
    \ list}\n        if (n%2 == 0) list = n :: (makeAPile((n - 1l))) :: list;\n  \
    \      else list = n :: (makeAPile(n - 2l)) :: (makeAPile((n - 1l))) :: list;\n\
    \        return list\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_sqhfcr.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (n%\e[31m2\e\
    [0m == \e[31m0\e[0m) list = n :: (makeAPile((n - \e[31m1l\e[0m))) :: list;\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    List[Matchable]\n\e\
    [31m   |\e[0m                             Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_sqhfcr.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m list = n :: (makeAPile(n - \e\
    [31m2l\e[0m)) :: (makeAPile((n - \e[31m1l\e[0m))) :: list;\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    List[Matchable]\n\e[31m   |\e\
    [0m                    Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case 0 => List(1l.toLong)\n            case 1 => List(1l.toLong)\n\
    \            case x if x < 2 => List(1l.toLong)\n            case x if x <= n\
    \ => makeAPile(x + 1l) ::: makeAPile(n - x+1l)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\
    \tat Problem$.makeAPile(tmpx2c6mvjc.scala:19)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val n = n.toLong\n        var list = List[Long](n.toLong)\n        val odd\
    \ = if(n % 2 == 0) n / 2 else n / 2\n        val even = n / 2\n        list =\
    \ list ++ List(List(odd, even / 2), List(even / 2, even / 4))\n        list.map(l\
    \ => l.tail.map(x => x + l.head))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzdjmha34.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzdjmha34.scala:19:32 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        list = list ++ List(List(odd, even / \e[31m2\e[0m),\
    \ List(even / \e[31m2\e[0m, even / \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                Found:    List[Nothing]\n\e[31m   |\e[0m                    \
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdjmha34.scala:19:53\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        list = list ++ List(List(odd,\
    \ even / \e[31m2\e[0m), List(even / \e[31m2\e[0m, even / \e[31m4\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  List[Nothing]\n\e[31m   |\e[0m                                            \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzdjmha34.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        list.map(\e[36ml\e\
    [0m => l.tail.map(\e[36mx\e[0m => x + l.head))\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                      value tail is\
    \ not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0l) throw new IllegalArgumentException(\"Invalid value for n: \"\
    \ + n)\n        val stones = List(n)\n        val levels = stones.zipWithIndex.map\
    \ { case (stone, i) => makeAPile1(i, stone) }\n        levels.reduce(_.zipWithIndex.map\
    \ { case (_, index) => stones(index) })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6bivepl.scala:17:66 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = stones.zipWithIndex.map\
    \ { \e[33mcase\e[0m (stone, i) => makeAPile1(i, stone) }\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ makeAPile1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw6bivepl.scala:18:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        levels.reduce(_.zipWithIndex.map\
    \ { \e[33mcase\e[0m (_, index) => stones(index) })\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Wrong number of parameters, expected: 2\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer[Long]()\n        if(n % 2 == 0) list += n.toLong\n\
    \        else {\n            n -= 1\n            list += n.toLong\n          \
    \  n -= 1\n            list += n.toLong\n            n -= 1\n        }\n     \
    \   list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4zi1j_l.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpe4zi1j_l.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4zi1j_l.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe4zi1j_l.scala:22:14 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val levels = if (n % 2==1) List.fill(n.toDouble/2) else List.fill(n.toDouble/2+1)\
    \ \n        levels.map(n => (n,n+1)) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmlak6j2w.scala:15:45\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e\
    [0m = \e[33mif\e[0m (n % \e[31m2\e[0m==\e[31m1\e[0m) List.fill(n.toDouble/\e[31m2\e\
    [0m) \e[33melse\e[0m List.fill(n.toDouble/\e[31m2\e[0m+\e[31m1\e[0m) \n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                             Found:    Double\n\e\
    [31m   |\e[0m                                             Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmlak6j2w.scala:15:74 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = \e[33mif\e\
    [0m (n % \e[31m2\e[0m==\e[31m1\e[0m) List.fill(n.toDouble/\e[31m2\e[0m) \e[33melse\e\
    [0m List.fill(n.toDouble/\e[31m2\e[0m+\e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m  \
    \                                                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlak6j2w.scala:16:15\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        levels.map(\e[36mn\e\
    [0m => (n,n+\e[31m1\e[0m)) \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value map is not a member of (=> Any) => List[Any]\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = new mutable.MutableList[Long]()\n        if(n.toInt%2==0) {\n \
    \           list += n.toInt/2;\n        }\n        n match {\n            case\
    \ n if n.toInt % 2 != 0 => list += (n.toInt/2).toInt;\n            case n => list\
    \ += n.toInt;\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbsw9f4wb.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case 0 => List()\n            case 1 => List(n.toLong)\n\
    \            case _ => {\n                val r = scala.util.Random\n        \
    \        val oddN = r.getInt(2) == 0\n                List(\n                \
    \    if (oddN) r.getInt(n).toLong + r.getInt(n + n).toLong\n                 \
    \   else r.getInt(n).toLong + r.getInt(n - 1).toLong,\n                    if\
    \ (oddN) r.getInt(n).toLong + r.getInt(n - 1).toLong\n                    else\
    \ r.getInt(n).toLong + r.getInt(n - 2).toLong\n                )\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx52lxtgd.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36moddN\e[0m = r.getInt(\e\
    [31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue getInt is not a member of object scala.util.Random -\
    \ did you mean r.nextInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx52lxtgd.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e\
    [0m (oddN) r.getInt(n).toLong + r.getInt(n + n).toLong\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue getInt is not\
    \ a member of object scala.util.Random - did you mean r.nextInt?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx52lxtgd.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33melse\e[0m r.getInt(n).toLong\
    \ + r.getInt(n - \e[31m1\e[0m).toLong,\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue getInt is not a member of object\
    \ scala.util.Random - did you mean r.nextInt?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpx52lxtgd.scala:24:32 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                    \e[33mif\e[0m (oddN) r.getInt(n).toLong + r.getInt(n\
    \ - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue getInt is not a member of object scala.util.Random -\
    \ did you mean r.nextInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx52lxtgd.scala:25:27\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e[33melse\e\
    [0m r.getInt(n).toLong + r.getInt(n - \e[31m2\e[0m).toLong\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue getInt is not\
    \ a member of object scala.util.Random - did you mean r.nextInt?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val res : List[Long] = List();\n        if (n.toInt==0) {\n            res\n\
    \        } else {\n            val odd_count = n.toInt;\n            val even_count\
    \ = n.toInt;\n            val temp = (odd_count + even_count).toLong;\n      \
    \      if (temp % 2==1)\n                temp.toLong + 1\n            else\n \
    \               temp.toLong\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9iknogx.scala:23:16\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                temp.toLong +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Found:    Long\n\e[31m   |\e[0m                Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9iknogx.scala:25:21 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                temp.toLong\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\
    \e[31m   |\e[0m                Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var nextEven = 1l\n        var nextOdd = 1l\n        for(i <- 0 to n) {\n\
    \            if(i % 2 == 0) {\n                nextEven = nextEven * i\n     \
    \       } else {\n                nextOdd = nextOdd * i\n            }\n     \
    \   }\n        List(nextEven.toLong, nextOdd.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkzvaotz0.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = (0 until n).toList\n        result.zipWithIndex.filter(_._1 %\
    \ 2 == 1).map(_._2.toLong).reverse.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphk67gslt.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = (\e[31m0\e[0m until n).toList\n\e[31m\e[31m   |\e[0m                   \
    \           ^\e[0m\n\e[31m   |\e[0m                              Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Complete this method\n        val num : List[Long] = List(0l)\n       \
    \ var numOfLevel = 0\n        for(i <- 0 until n){\n            if(n % 2 == 0){\n\
    \                numOfLevel += 1\n            }else{\n                numOfLevel\
    \ += 2\n            }\n            num :+= numOfLevel\n        }\n        return\
    \ num\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjdbp9r93.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjdbp9r93.scala:24:16 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            num :+= numOfLevel\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m          value :+= is not a member of List[Long]\
    \ - did you mean num.:+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 1l) {\n            List(1l)\n        } else {\n            val odd\
    \ = n.toLong.nextDouble.toInt\n            val even = n.toLong.nextDouble.toInt\n\
    \            val list = List(odd, even)\n            list :+ list.last\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeuj9e02c.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = n.toLong.nextDouble.toInt\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      value nextDouble is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeuj9e02c.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = n.toLong.nextDouble.toInt\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       value nextDouble is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var l: List[Long] = List()\n        for (x <- 0 until n toList) {\n      \
    \      var i = x\n            if (x % 2 == 0) i += 2\n            l += List(i,\
    \ i + 1, i + 2)\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc1dr7bbg.scala:16:34 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m until n toList)\
    \ {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1dr7bbg.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m0\e[0m until n toList) {\n\e[31m\e[31m   |\e[0m                      \
    \    ^\e[0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var level : List[Long] = List(n);\n        while (level.length < n) {\n  \
    \          level += level.length\n        }\n        var count : Long = 1;\n \
    \       while (level.length > 0) {\n            count += level(level.length-1)\n\
    \            level.removeAt(level.length-1)\n        }\n        List(n, count)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmemr4lv6.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            level += level.length\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmemr4lv6.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            level.removeAt(level.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value removeAt is not a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val p = n %2\n        if(p > 0) makeAPile(n /2) + p else makeAPile(n /2) +\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8p9n32_4.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(p > \e[31m0\e[0m) makeAPile(n /\e\
    [31m2\e[0m) + p \e[33melse\e[0m makeAPile(n /\e[31m2\e[0m) + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8p9n32_4.scala:16:59\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(p >\
    \ \e[31m0\e[0m) makeAPile(n /\e[31m2\e[0m) + p \e[33melse\e[0m makeAPile(n /\e\
    [31m2\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = mutable.ListBuffer(n.toLong)\n        val oddEven = (n % 2 ==\
    \ 0).toLong\n        val lastEven = stones.last\n        stones += oddEven\n \
    \       if (n == lastEven) {\n            stones\n        } else {\n         \
    \   stones.init :+ stones.last\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0siplkc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpj0siplkc.scala:16:35 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36moddEven\e[0m = (n % \e[31m2\e[0m == \e[31m0\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Boolean, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \ if (n <= 0l) List(0l)\n      else {\n        val odd = n % 2\n        val even\
    \ = n - odd\n        (if (odd) List(0l) else List(1l)) ::: makeAPile(even)\n \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1dtc4a8i.scala:19:13\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        (\e[33mif\e[0m (odd)\
    \ List(\e[31m0l\e[0m) \e[33melse\e[0m List(\e[31m1l\e[0m)) ::: makeAPile(even)\n\
    \e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (odd : Long)\n\e[31m   |\e[0m             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // 1st, 2nd, 3rd... level \n        var l : List[Long] = Nil\n        if(n%2\
    \ != 0) l = nl.init(n)\n        else l = nl.init(n+1)\n        // 2nd, 4th, 6th...\
    \ level \n        if(n%2 != 0) l = nl.init(n).toList.zip(l).toList\n        else\
    \ l = nl.init(n+2).toList.zip(l).toList\n        // 3rd, 5th, 7th... level \n\
    \        if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n      \
    \  else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n        // 4th\n  \
    \      if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n        else\
    \ l = nl.init(n+1).toList.zip(l).map(_._1+_).toList\n        // 5th\n        if(n%2\
    \ != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n        else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n\
    \        // 6th\n        if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n\
    \        else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n        // 7th\n\
    \        if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n      \
    \  else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n        // 8th\n  \
    \      if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n        else\
    \ l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n        // 9th\n        if(n%2\
    \ != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n        else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n\
    \        // 10th\n        if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n\
    \        else l = nl.init(n+2).toList.zip(l).map(_._1+_).toList\n        // 11th\n\
    \        if(n%2 != 0) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n      \
    \  else l = nl.init(n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfvt1g2_1.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvt1g2_1.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m(n%\e\
    [31m2\e[0m != \e[31m0\e[0m) l = nl.init(n)\n\e[31m\e[31m   |\e[0m            \
    \             ^^\e[0m\n\e[31m   |\e[0m                         Not found: nl\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvt1g2_1.scala:18:17\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m l\
    \ = nl.init(n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: nl\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfvt1g2_1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n%\e[31m2\e[0m != \e[31m0\e[0m)\
    \ l = nl.init(n).toList.zip(l).toList\n\e[31m\e[31m   |\e[0m                 \
    \        ^^\e[0m\n\e[31m   |\e[0m                         Not found: nl\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvt1g2_1.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m l = nl.init(n+\e[31m2\e[0m).toList.zip(l).toList\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Not found: nl\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvt1g2_1.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(n%\e\
    [31m2\e[0m != \e[31m0\e[0m) l = nl.init(n).toList.zip(l).map(_._1+_).toList\n\e\
    [31m\e[31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m         \
    \                Not found: nl\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006]"
  stdout: ''
  timestamp: 1660010301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < 0) Nil\n        else {\n            if (n % 2 == 0) List(n.toLong\
    \ * 2L).reverse\n            else List(n.toLong * 2L)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpegr043or.scala:22)\n\tat Problem.main(tmpegr043or.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // write your code here\n        val nums = mutable.ListBuffer.empty[Long]\n\
    \        if(n % 2 == 0) {\n            while(n > 0) {\n                if(n %\
    \ 2 != 0) {\n                    nums += n\n                }\n              \
    \  n /= 2\n            }\n        } else {\n            while(n > 0) {\n     \
    \           if(n % 2 == 0) {\n                    nums += n\n                }\n\
    \                n /= 2\n            }\n        }\n        nums\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2mx6d2e.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz2mx6d2e.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpz2mx6d2e.scala:29:18 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value /= is not a member of Long - did you\
    \ mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numOfLevels = n.toInt\n        val listOfLevels = Array[Long](numOfLevels)\n\
    \        var nOfNextLevel = if ( n % 2 == 0 ) {\n            val nextOdd = n /\
    \ 2\n            List( nextOdd.toLong )\n        }\n        else {\n         \
    \   val nextEven = n / 2\n            List( nextEven.toLong )\n        }\n   \
    \     listOfLevels ++= nOfNextLevel\n        listOfLevels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfn8ir2aq.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        listOfLevels ++= nOfNextLevel\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value ++= is not\
    \ a member of Array[Long]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn8ir2aq.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        listOfLevels\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (listOfLevels\
    \ : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val counts = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until n-1)\n\
    \            counts += n\n        (n%2 == 0l) ? counts ++ List(2l*counts.size)\
    \ : counts\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl88873f.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdl88873f.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl88873f.scala:18:55\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        (n%\e[31m2\e[0m ==\
    \ \e[31m0l\e[0m) ? counts ++ List(\e[31m2l\e[0m*counts.size) : \e[35mcounts\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \      Not found: type counts\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdl88873f.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        (n%\e[31m2\e[0m == \e[31m0l\e[0m) ? counts ++ List(\e[31m2l\e[0m*counts.size)\
    \ : \e[35mcounts\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile : mutable.Set[Long] = mutable.Set()\n        var result : List[Long]\
    \ = List[Long]()\n        if (n.toDouble % 2l.toDouble == 0l) {\n            pile.add(n.toLong)\n\
    \        }\n        else {\n            if (n.toDouble % 2l.toDouble == 1l) {\n\
    \                pile.add(n.toLong)\n                pile.add(2l.toLong)\n   \
    \         }\n            else {\n                pile.add(n.toLong)\n        \
    \        pile.add(3l.toLong)\n                pile.add(5l.toLong)\n          \
    \      pile.add(7l.toLong)\n            }\n        }\n        result ++= pile\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp357g3x44.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp357g3x44.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < 0) throw new IllegalArgumentException(\"n can not be negative.\")\n\
    \        def makeAPileHelper(n: Long, levels: List[Long]) : List[Long] = {\n \
    \           if (n == 0) levels\n            else {\n                if (n % 2\
    \ == 0) {\n                    makeAPileHelper(n - 1, levels + n.toLong)\n   \
    \             } else {\n                    makeAPileHelper(n - 2, levels + n.toLong)\n\
    \                }\n            }\n        }\n        makeAPileHelper(n, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9blhlot7.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    makeAPileHelper(n - \e[31m1\e[0m,\
    \ levels + n.toLong)\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9blhlot7.scala:22:50 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    makeAPileHelper(n - \e[31m2\e[0m,\
    \ levels + n.toLong)\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var result : List[Long] = List();\n        if (n.toDouble % 2 == 0) result\
    \ = makeAPile(n.toDouble / 2.toDouble) ::\n            makeAPile(n.toDouble /\
    \ 2.toDouble)\n        else result = makeAPile(n.toDouble / 2.toDouble) ::\n \
    \           makeAPile(n.toDouble / 2.toDouble).reverse\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9sjaq452.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            makeAPile(n.toDouble\
    \ / \e[31m2\e[0m.toDouble)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Double\n\e[31m   |\e[0m  \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9sjaq452.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mif\e[0m (n.toDouble % \e[31m2\e[0m == \e[31m0\e[0m) result\
    \ = makeAPile(n.toDouble / \e[31m2\e[0m.toDouble) ::\n\e[31m\e[31m   |\e[0m  \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    Double\n\
    \e[31m   |\e[0m                                                    Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9sjaq452.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            makeAPile(n.toDouble\
    \ / \e[31m2\e[0m.toDouble).reverse\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   Double\n\e[31m   |\e[0m                      Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9sjaq452.scala:18:32 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m result = makeAPile(n.toDouble\
    \ / \e[31m2\e[0m.toDouble) ::\n\e[31m\e[31m   |\e[0m                         \
    \       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Found:    Double\n\e[31m   |\e[0m                                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nextOdd : Long = (n+1) % 2 != 0l\n        val nextEven : Long = (n+1)\
    \ % 2 == 0l\n        val nextLevel : List[Long] = List((n).toLong)\n        (nextOdd\
    \ until nextEven).foldLeft(nextLevel) {\n            case (acc, i) => acc :+ acc.last\
    \ + i.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp75t0nbcp.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnextOdd\e\
    [0m : \e[35mLong\e[0m = (n+\e[31m1\e[0m) % \e[31m2\e[0m != \e[31m0l\e[0m\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Boolean\n\e[31m   |\e[0m             \
    \                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp75t0nbcp.scala:16:30 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mnextEven\e[0m : \e[35mLong\e[0m = (n+\e[31m1\e\
    [0m) % \e[31m2\e[0m == \e[31m0l\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   Found:    Boolean\n\e[31m   |\e[0m                              Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val odd = math.ceiling(n)\n        val even = math.floor(n)\n        List(odd.toLong,\
    \ even.toLong).tail\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaq7mxhlp.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = math.ceiling(n)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value ceiling is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n % 2 == 0) n :: makeAPile(n / 2l)\n        else (n / 2l, n / 2l, n /\
    \ 2l)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq17symt3.scala:16:13\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (n /\
    \ \e[31m2l\e[0m, n / \e[31m2l\e[0m, n / \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (Long, Long, Long)\n\e[31m   |\e[0m             Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val evens = n.toInt\n        val odds = evens.toInt\n        val evensPlusOne\
    \ = if (n % 2 == 0) odds + 1 else odds\n        val oddsPlusOne = if (n % 2 ==\
    \ 0) evens + 1 else evens\n        List(n.toLong, evensPlusOne.toLong, oddsPlusOne.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuz2wtjbt.scala:22)\n\tat Problem.main(tmpuz2wtjbt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val p = if (n % 2 == 0) (n / 2l) else ((n + 3) / 4l)\n        val stones =\
    \ mutable.ListBuffer(p).toList\n        val newStones = if (stones.tail.isEmpty)\
    \ stones else {\n            (stones.head + 1l).+(stones.tail.head)\n        }\n\
    \        newStones.map(s => s.toLong).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkuowik_.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(p).toList\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n == 0) List()\n        else List(n >> 1 | (n & 1) == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmph02llkh0.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m List(n >> \e[31m1\e[0m | (n &\
    \ \e[31m1\e[0m) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m|\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0mmatch arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   (if (n % 2 == 0) n.toLong else ((n + 1).toLong + n.toLong))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3068wpp8.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (\e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) n.toLong \e[33melse\e[0m ((n + \e[31m1\e[0m).toLong\
    \ + n.toLong))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m        \
    \                 Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3068wpp8.scala:15:40\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (\e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) n.toLong \e[33melse\e[0m ((n + \e[31m1\e[0m).toLong\
    \ + n.toLong))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Long\n\e\
    [31m   |\e[0m                                        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n % 2 == 0) List(n.toLong, n.toLong*2l).reduceLeft{ (accum, num) => (accum\
    \ :+ num.toLong) } else List(n.toLong, n.toLong*3l).reduceLeft{ (accum, num) =>\
    \ (accum :+ num.toLong) }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxusvhuk4.scala:15:87 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) List(n.toLong, n.toLong*\e[31m2l\e[0m).reduceLeft{ (\e[36maccum\e[0m, \e\
    [36mnum\e[0m) => (accum :+ num.toLong) } \e[33melse\e[0m List(n.toLong, n.toLong*\e\
    [31m3l\e[0m).reduceLeft{ (\e[36maccum\e[0m, \e[36mnum\e[0m) => (accum :+ num.toLong)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                        value :+ is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxusvhuk4.scala:15:172 -----------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) List(n.toLong,\
    \ n.toLong*\e[31m2l\e[0m).reduceLeft{ (\e[36maccum\e[0m, \e[36mnum\e[0m) => (accum\
    \ :+ num.toLong) } \e[33melse\e[0m List(n.toLong, n.toLong*\e[31m3l\e[0m).reduceLeft{\
    \ (\e[36maccum\e[0m, \e[36mnum\e[0m) => (accum :+ num.toLong) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                 value :+ is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = mutable.ArrayBuffer(n)\n        (1 to n).flatMap { i =>\n     \
    \       val newNum = if (i % 2 == 0) nums.last + 1 else nums.last * 3\n      \
    \      nums.last = newNum\n            newNum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2krz0xk.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq2krz0xk.scala:16:14 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        (\e[31m1\e[0m to n).flatMap { \e[36mi\e[0m =>\n\e[31m\e[31m  \
    \ |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Found:    (n : Long)\n\
    \e[31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var count = 0\n        var nextOdd = n.toInt;\n        if (n % 2 == 0) nextOdd\
    \ = nextOdd + 1\n        var nextEven = nextOdd + 1\n        while (nextEven <\
    \ n) {\n            count = count + 1\n            nextEven = nextEven + 1\n \
    \       }\n        count = count + 1\n        var result = new ArrayList[Long](count)\n\
    \        for (var i = 2; i <= count; i++) {\n            val c = nextOdd;\n  \
    \          nextOdd = nextEven - 1\n            nextEven = c\n            result(i)\
    \ = c\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9iwi33ke.scala:25:13 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m2\e\
    [0m; i <= count; i++) {\n\e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m  \
    \ |\e[0m             pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp9iwi33ke.scala:25:34 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m2\e[0m; i\
    \ <= count; i++) {\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9iwi33ke.scala:25:39 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m2\e\
    [0m; i <= count; i++) {\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9iwi33ke.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m](count)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9iwi33ke.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m2\e\
    [0m; i <= count; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e\
    [31m   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collecti"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numOfLevels = n.toInt\n        val numOfStones = n.toLong\n\n        val\
    \ max = (math.pow(2,numOfLevels)-1).toInt\n\n        if(numOfStones < max){\n\
    \            List.fill(numOfStones+1)(max).toList\n        }else{\n          \
    \  val oddNum = numOfStones.toLong%2\n            val evenNum = numOfStones.toLong/2\n\
    \n            List(oddNum, evenNum).toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpalm0gj5c.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            List.fill(numOfStones+\e\
    [31m1\e[0m)(max).toList\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val p = new Array[Long](n + 1)\n        var i = 0\n        while (i < n) {\n\
    \            p.update(i + 1, i + 1)\n            i = i + 2\n        }\n      \
    \  p.update(i + 1, n + 1)\n        p :+ n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmndc2rlv.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mp\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmndc2rlv.scala:22:8 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        p :+ n\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ones = n.toInt\n        val pile = mutable.ListBuffer.empty[Long]\n  \
    \      var sum = 0\n        for (i<-0 until ones) {\n            if (i % 2 ==\
    \ 0) {\n                pile.append(sum)\n                sum = 0\n          \
    \  } else {\n                sum = sum + 2\n            }\n        }\n       \
    \ pile.append(sum)\n        pile\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm0619e.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val st: Long = n.toLong\n        val lst = new mutable.MutableList[Long]\n\
    \        if (n % 2 != 0) {\n            lst.add(st)\n        }\n        for (i\
    \ <- 0 until n - 1) {\n            if (i % 2 == 0) {\n                lst.add(st\
    \ + i)\n            } else {\n                lst.add(st - i)\n            }\n\
    \        }\n        return lst.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmjggk13.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlst\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmjggk13.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0L) return Nil\n        val num = (n + 1L) / 2L\n        if (n %\
    \ 2 == 0L) List(num.toLong, n)\n        else List(n, num.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9jj95iy.scala:21)\n\tat Problem.main(tmps9jj95iy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n%2 == 0) {\n            List(n.toLong, n)\n        } else {\n       \
    \     List(n, n)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82w3c46x.scala:22)\n\tat Problem.main(tmp82w3c46x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n == 0)\n            List()\n        else {\n            val oddNumbersPile\
    \ = makeAPile(((n+1).toInt/2))\n            val evenNumbersPile = makeAPile((n.toInt/2))\n\
    \            (oddNumbersPile ++ evenNumbersPile)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\
    \tat Problem$.makeAPile(tmp19pzq5to.scala:18)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \  require(n > 0, \"n must be positive\")\n       val result: List[Long] = new\
    \ ArrayList[Long](n)\n       for (i <- 0 until n) {\n         result(i) = i+1\n\
    \         if (!(i+1 in 0 until n)) {\n           result(i) = i+2\n         }\n\
    \         if (!(i+2 in 0 until n)) {\n           result(i) = i+3\n         }\n\
    \       }\n       result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn052wiyo.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m       \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m](n)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Not found: type ArrayList\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn052wiyo.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m       \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn052wiyo.scala:18:9\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m         result(i) = i+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m         ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Long] - did you mean result.updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpn052wiyo.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m         \e[33mif\e[0m (!(i+\e[31m1\e[0m in \e[31m0\e\
    [0m until n)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value in is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpn052wiyo.scala:20:11 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m           result(i) = i+\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m         \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long] - did\
    \ you mean result.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn052wiyo.scala:22:19\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m         \e[33mif\e[0m (!(i+\e\
    [31m2\e[0m in \e[31m0\e[0m until n)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value in is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpn052wiyo.scala:23:11 ---------"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var level : List[Long] = Nil\n        var index = 0\n        while (index\
    \ < n) {\n            if (n%2 == 0) {\n                if (level.isEmpty) level\
    \ = List(n.toLong)\n                else level :+= n.toLong\n            } else\
    \ {\n                if (level.isEmpty) level = List(n.toLong)\n             \
    \   else {\n                    level.lastOption .foreach { x => if (x < x%2==0)\
    \ x else x + 1 } match {\n                        case None => level = List(n.toLong)\n\
    \                        case Some(x) => level :+= x\n                    }\n\
    \                }\n            }\n            index += 1\n        }\n       \
    \ level\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74e20c5k.scala:24:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    level.lastOption .foreach { \e[36mx\e\
    [0m => \e[33mif\e[0m (x < x%\e[31m2\e[0m==\e[31m0\e[0m) x \e[33melse\e[0m x +\
    \ \e[31m1\e[0m } \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Values of types Boolean and Int cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp74e20c5k.scala:25:29 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        \e[33mcase\e[0m None => level\
    \ = List(n.toLong)\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    None.type\n\e[31m   |\e[0m \
    \                        Required: Unit\n\e[31m   |\e[0m                     \
    \    pattern type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp74e20c5k.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        \e[33mcase\e[0m Some(x) => level\
    \ :+= x\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value :+= is not a member of List[Long] - did you mean\
    \ List[Long].:+?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var list : List[Long] = Nil\n        var nextodd : Long = (n+1) / 2\n    \
    \    var nexteven : Long = nextodd * 2\n        if (n%2 == 0) {\n            list\
    \ :+= nexteven.toLong\n            list :+= nextodd.toLong\n        }\n      \
    \  else {\n            list :+= nextodd.toLong\n            list :+= nexteven.toLong\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm1q3la1f.scala:29)\n\tat Problem.main(tmpm1q3la1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ns = Array.ofDim[Long](1 + n/2, 1)\n        for (ix <- 1 to ns.length-1){\n\
    \            if (n(ix) == n(ix+1)%2)\n                ns(ix+1) = ns.apply(ix+1)\
    \ + 2\n            else\n                ns(ix+1) = ns(ix+1) + 1\n        }\n\
    \        ns\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gsqq33j.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mns\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](\e[31m1\e[0m + n/\e[31m2\e[0m, \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Found:    Long\n\e[31m   |\e[0m  \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp0gsqq33j.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (n(ix) == n(ix+\e[31m1\e[0m)%\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m    \
    \            \e[33mparameter\e[0m \e[35mn\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gsqq33j.scala:18:42 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                ns(ix+\e[31m1\e[0m) = ns.apply(ix+\e\
    [31m1\e[0m) + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Array[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0gsqq33j.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                ns(ix+\e[31m1\e[0m) = ns(ix+\e[31m1\e\
    [0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Array[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fr"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val newList = new ListBuffer[Long]()\n        val evenNumber = if (n.toDouble\
    \ % 2 == 0.0) n.toDouble else n.toDouble + 1\n        newList.append(n.toLong)\n\
    \        for (ni <- 1 to n.toDouble by 2) newList.append(ni.toLong)\n        newList.append(evenNumber.toLong)\n\
    \        return newList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqr7eh5bf.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (ni <-\
    \ \e[31m1\e[0m to n.toDouble by \e[31m2\e[0m) newList.append(ni.toLong)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Found:    Double\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val even = math.pow(n, 2).toInt\n        val odd = n + 1\n        val levels\
    \ = mutable.ListBuffer[Long]()\n        levels += n\n        while(n > 0) {\n\
    \            levels += if (n % 2 == 0) even else odd\n            n = n / 2\n\
    \        }\n        levels.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphxhdw6k5.scala:20:22 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            levels += \e[33mif\e[0m (n % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m   |\e[0m           \
    \           ^^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphxhdw6k5.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmphxhdw6k5.scala:21:14 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            n = n / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var result : List[Long] = Nil\n        if(n % 2 == 0) {\n            result\
    \ ::= n / 2l.toLong\n            result += makeAPile(n.toInt)\n        }\n   \
    \     else result = makeAPile(n.toInt)\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9efd86_y.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result += makeAPile(n.toInt)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def evenOrOdd(i : Long): Long = {\n            if ((i >> 1) & 1 == 0)\n  \
    \              i.toLong\n            else\n                i.toLong + 1\n    \
    \    }\n        def makeAPile_helper(i : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if ((n >> i) & 1 == 0)\n                acc :+ n.toLong\n \
    \           else\n                acc :+ (evenOrOdd(i).toLong)\n        }\n  \
    \      makeAPile_helper(0, List())\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwt28naj_.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m ((i >> \e[31m1\e[0m) & \e[31m1\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((\e[31mfalse\e[0m : Boolean))\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpwt28naj_.scala:22:25 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m ((n >> i) & \e[31m1\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((\e[31mfalse\e\
    [0m : Boolean))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = new mutable.ArrayBuffer(n + (if(n % 2 == 0) 2 else 1))\n      \
    \  if(n % 2 == 0) {\n            list += ((List(3l, 5l, 7l) toList) zip list.take(2)\
    \ map {case (l, r) => l ++ r})\n        } else {\n            list += ((List(3l,\
    \ 5l, 7l) toList) zip list.take(3) map {case (l, r) => l ++ r})\n        }\n \
    \       list += ((List(3l, 5l, 7l) toList) zip list.take(4) map {case (l, r) =>\
    \ l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip list.take(5) map {case\
    \ (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip list.take(6)\
    \ map {case (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip\
    \ list.take(7) map {case (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l)\
    \ toList) zip list.take(8) map {case (l, r) => l ++ r})\n        list += ((List(3l,\
    \ 5l, 7l) toList) zip list.take(9) map {case (l, r) => l ++ r})\n        list\
    \ += ((List(3l, 5l, 7l) toList) zip list.take(10) map {case (l, r) => l ++ r})\n\
    \        list += ((List(3l, 5l, 7l) toList) zip list.take(11) map {case (l, r)\
    \ => l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip list.take(12) map\
    \ {case (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip list.take(13)\
    \ map {case (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l) toList) zip\
    \ list.take(14) map {case (l, r) => l ++ r})\n        list += ((List(3l, 5l, 7l)\
    \ toList) zip list.take(15) map {case (l, r) => l ++ r})\n        list += ((List(3l,\
    \ 5l, 7l) toList) zip list.take(16) map {case (l, r) => l ++ r})\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkdcax6bf.scala:17:45 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            list += ((List(\e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m) toList) zip list.take(\e[31m2\e[0m) map {\e[33mcase\e[0m (l,\
    \ r) => l ++ r})\n\e[31m\e[31m   |\e[0m                                      \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpkdcax6bf.scala:19:45 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            list += ((List(\e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m)\
    \ toList) zip list.take(\e[31m3\e[0m) map {\e[33mcase\e[0m (l, r) => l ++ r})\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkdcax6bf.scala:21:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        list += ((List(\e\
    [31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m) toList) zip list.take(\e[31m4\e[0m)\
    \ map {\e[33mcase\e[0m (l, r) => l ++ r})\n\e[31m\e[31m   |\e[0m             \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \              expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpkdcax6bf.scala:22:41 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        list += ((List(\e[31m3l\e[0m, \e[31m5l\e[0m,\
    \ \e[31m7l\e[0m) toList) zip list.take(\e[31m5\e[0m) map {\e[33mcase\e[0m (l,\
    \ r) => l ++ r})\n\e[31m\e[31m   |\e[0m                                      \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpkdcax6bf.scala"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val res = []\n        for(i <- 1 until n) res :+= math.ceil(i.toLong / 2)\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_u7qglhp.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_u7qglhp.scala:16:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m1\e[0m until n) res :+= math.ceil(i.toLong / \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_u7qglhp.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m until n) res\
    \ :+= math.ceil(i.toLong / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \           ^\e[0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_u7qglhp.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m until n) res\
    \ :+= math.ceil(i.toLong / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ :+= is not a member of Null\n4 errors found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val r : List[Long] = List(n.toLong);\n        val odd = if(n % 2==0) n.toLong\
    \ else n.toLong + 1\n        val even = if(n % 2==1) n.toLong else n.toLong +\
    \ 2\n        r += odd :: makeAPile(even);\n        r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrlod8yd.scala:18:10 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        r += odd :: makeAPile(even);\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of\
    \ List[Long] - did you mean r.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val s = List(n, n - 1, n - 2)\n        val odd = s.filter(_ % 2 == 1).toList\n\
    \        val even = s.filter(_ % 2 == 0).toList\n        odd.map((_ * 2).toLong\
    \ :: even)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8rlie73b.scala:18:17 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        odd.map((_ * \e[31m2\e[0m).toLong :: even)\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3 * 2.\n1 error found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val result = new mutable.ArrayBuffer[Long](n+1)\n        for(i <- 0 until\
    \ n)\n            result(i+1) =  {\n                if(i % 2 == 0) i.toLong \n\
    \                else ((i-1).toLong + (i+1).toLong)/2\n            }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0wf1pml.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0wf1pml.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0)\n            throw new IllegalArgumentException(\"n is required\
    \ to be positive.\")\n        val levels = mutable.MutableList[Long]()\n     \
    \   levels.+=(n.toLong)\n        n -= 1\n        while (n > 0) {\n           \
    \ n -= 1\n            levels.+=(n - (n % 2 == 0 ? 1 : 0))\n        }\n       \
    \ levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwquq7_ty.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwquq7_ty.scala:19:10 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwquq7_ty.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val pile = ListBuffer(n)\n        val next = (2 to n) filter (x => (x % 2)\
    \ != 0) map (x => x.toLong).toList\n        pile.append(n)\n        pile.append(next)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuhaw9ch8.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnext\e\
    [0m = (\e[31m2\e[0m to n) filter (\e[36mx\e[0m => (x % \e[31m2\e[0m) != \e[31m0\e\
    [0m) map (\e[36mx\e[0m => x.toLong).toList\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpuhaw9ch8.scala:16:60 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnext\e[0m = (\e[31m2\e[0m\
    \ to n) filter (\e[36mx\e[0m => (x % \e[31m2\e[0m) != \e[31m0\e[0m) map (\e[36mx\e\
    [0m => x.toLong).toList\n\e[31m\e[31m   |\e[0m                               \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  \
    \        I could not infer the type of the parameter x.\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpuhaw9ch8.scala:18:13 -----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        pile.append(next)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e\
    [0m (elems: Long*): (pile : scala.collection.mutable.ListBuffer[Long])\n\e[31m\
    \   |\e[0m (elem: Long): (pile : scala.collection.mutable.ListBuffer[Long])\n\e\
    [31m   |\e[0mmatch arguments ((next : IndexedSeq[Nothing]))\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuhaw9ch8.scala:19:8 ---------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        pile\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (pile : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n ==0l) return Nil\n        if (n ==1l) return 1l.toLong\n        val\
    \ even = (if (n % 2==0l) 3l.toLong else 5l.toLong)\n        val odd =  (if (n\
    \ % 2==0l) 3l.toLong else 7l.toLong)\n        val result = n.toLong / 2l\n   \
    \     result :: makeAPile(result)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5komwv2w.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (n ==\e\
    [31m1l\e[0m) \e[33mreturn\e[0m \e[31m1l\e[0m.toLong\n\e[31m\e[31m   |\e[0m   \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Found:    Long\n\e[31m   |\e[0m                           Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case 1 => List(n.toLong)\n            case 2 => List(n.toLong,\
    \ n.toLong)\n            case _ => makeAPile(n+2).toList ::: makeAPile(n+2).toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\
    \tat Problem$.makeAPile(tmpfwoqhkke.scala:18)\n\tat Problem$"
  stdout: ''
  timestamp: 1660010325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   n match {\n            case n if (n % 2 == 0) => List(n.toLong, n.toLong+1)\n\
    \            case n if (n % 2 != 0) => List(n.toLong, n.toLong)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp52r3ydz8.scala:21)\n\tat Problem.main(tmp52r3ydz8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var i = 0\n        var listOfLevels = ListBuffer[Long]()\n        while(i\
    \ < n) {\n            if (n%2 == 0) {\n                listOfLevels += n\n   \
    \         }\n            else {\n                listOfLevels += (n + 2 * i.toLong)\n\
    \            }\n            i += 1\n        }\n        listOfLevels.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsd857z37.scala:30)\n\tat Problem.main(tmpsd857z37.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   require(n.toInt % 2 == 0, \"n should be an odd number\")\n        val nextOdd\
    \ = n.toInt / 2\n        val nextEven = (nextOdd * 2).toInt\n        val nArray\
    \ = n.toInt.toArray.map(x => if (x == 0) 1 else x + 1)\n        val nList = nArray.toList\n\
    \        val nTuple = Tuple2(1, 0)\n        val nTup = nList.zip(nTuple).map(x\
    \ => x._1 + x._2)\n        nTup\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb_rh_4t7.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnArray\e[0m = n.toInt.toArray.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m x\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toArray is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val even = 0\n        val odd  = n\n        if (n % 2 == 0) even = n\n   \
    \     else odd\n        odd::even::Nil\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc4llfhv_.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) even = n\n\e[31m\e[31m   |\e[0m                  \
    \             ^\e[0m\n\e[31m   |\e[0m                               Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc4llfhv_.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        odd::even::Nil\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAnyVal\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n.toInt % 2 == 0) {\n            makeAPileOddNum(n)\n        } else {\n\
    \            makeAPileEvenNum(n)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8b8tj5l.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            makeAPileOddNum(n)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: makeAPileOddNum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8b8tj5l.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            makeAPileEvenNum(n)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: makeAPileEvenNum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   def countEven(n:Long) : Long = math.min(math.min(math.min(n%2L,n),n),n)\n\
    \        def countOdd(n:Long) : Long = math.max(math.max(math.max(n%2L,n),n),n)\n\
    \        val evens = countEven(n)\n        val odds = countOdd(n)\n        if\
    \ (evens%2L==0L && odds%2L==0L) List(1L,n) else List(1L,odds,evens)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnyphh7wn.scala:22)\n\tat Problem.main(tmpnyphh7wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nLevels = n/2\n        val nLevels2 = n - nLevels\n        val nLevels3\
    \ = nLevels2 * 2\n        val nLevels4 = nLevels2 * 3\n        val nLevels5 =\
    \ nLevels3 * 4\n        val nLevels6 = nLevels3 * 5\n        val nLevels7 = nLevels4\
    \ * 6\n        val nLevels8 = nLevels4 * 7\n        val nLevels9 = nLevels5 *\
    \ 8\n        val nLevels10 = nLevels5 * 9\n        val nLevels11 = nLevels6 *\
    \ 10\n        val nLevels12 = nLevels6 * 11\n        val nLevels13 = nLevels7\
    \ * 12\n        val nLevels14 = nLevels7 * 13\n        val nLevels15 = nLevels8\
    \ * 14\n        val nLevels16 = nLevels8 * 15\n        val nLevels17 = nLevels9\
    \ * 16\n        val nLevels18 = nLevels9 * 17\n        val nLevels19 = nLevels10\
    \ * 18\n        val nLevels20 = nLevels10 * 19\n        val nLevels21 = nLevels11\
    \ * 20\n        val nLevels22 = nLevels11 * 21\n        val nLevels23 = nLevels12\
    \ * 22\n        val nLevels24 = nLevels12 * 23\n        val nLevels25 = nLevels13\
    \ * 24\n        val nLevels26 = nLevels13 * 25\n        val nLevels27 = nLevels14\
    \ * 26\n        val nLevels28 = nLevels14 * 27\n        val nLevels29 = nLevels15\
    \ * 28\n        val nLevels30 = nLevels15 * 29\n        val nLevels31 = nLevels16\
    \ * 30\n        val nLevels32 = nLevels16 * 31\n        val nLevels33 = nLevels17\
    \ * 32\n        val nLevels34 = nLevels17 * 33\n        val nLevels35 = nLevels18\
    \ * 34\n        val nLevels36 = nLevels18 * 35\n        val nLevels37 = nLevels19\
    \ * 36\n        val nLevels38 = nLevels19 * 37\n        val nLevels39 = nLevels20\
    \ * 38\n        val nLevels40 = nLevels20 * 39\n        val nLevels41 = nLevels21\
    \ * 40\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpca2i3lvc.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Write your code here.\n        var result : List[Long] = Nil\n        var\
    \ i : Long = 0\n        for(x <- 1 to n){\n            if((n % 2) == 0) {\n  \
    \              result += x\n            }\n            else {\n              \
    \  result += 2 * x\n            }\n            i = i + 1 \n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx0mgis4.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(x <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnx0mgis4.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                result += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnx0mgis4.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                result +=\
    \ \e[31m2\e[0m * x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if(n <= 0l) List.empty[Long]\n        else {\n            val evenNum = if(n.toString.toInt%2\
    \ == 0) n.toString.toInt + 1 else n.toString.toInt - 1;\n            val oddNum\
    \ = if(n.toString.toInt%2 == 1) n.toString.toInt - 2 else n.toString.toInt - 1;\n\
    \            if(oddNum < n) List(oddNum.toLong)\n            else if (evenNum\
    \ < n) List(evenNum.toLong)\n            else makeAPile(n - 1l) ::: makeAPile(n\
    \ - 2l) ::: makeAPile(n - 3l) ::: List(1l.toLong)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpja7cubqp.scala:25)\n\tat Problem.main(tmpja7cubqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0)\n            List(1l)\n        else {\n            if (n%2 ==\
    \ 0)\n                List(n.toLong * 1l, n.toLong * 3l, n.toLong * 5l)\n    \
    \        else\n                List(n.toLong * 3l, n.toLong * 5l, n.toLong * 7l)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7zvbisks.scala:25)\n\tat Problem.main(tmp7zvbisks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n < 1) {\n            throw new IllegalArgumentException(\"n must be positive\"\
    )\n        }\n        if (n % 2 == 0) {\n            val nextEven = if (n % 2\
    \ == 0) (n+1) else (n+3)\n            List[Long](n.toLong, nextEven.toLong, n.toLong)\n\
    \        } else {\n            val nextOdd = if (n % 2 == 0) (n+2) else (n+4)\n\
    \            List[Long](n.toLong, n.toLong, nextOdd.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3dlywdx.scala:27)\n\tat Problem.main(tmpc3dlywdx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n % 2 == 0) {\n            List(n.toLong + 1, n.toLong)\n        } else\
    \ {\n            List(n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qv27mr7.scala:22)\n\tat Problem.main(tmp9qv27mr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val ans = ListBuffer[Long]()\n        var i = 0\n        var currentLevel\
    \ = 0\n        while(i < n) {\n            ans += currentLevel\n            currentLevel\
    \ = (i + 2) % n\n            i += 1\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bxr8xdr.scala:20:27\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            currentLevel = (i\
    \ + \e[31m2\e[0m) % n\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8bxr8xdr.scala:23:8 ---------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        ans\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (ans : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // Write your code here.\n        var stonesArray = Array[Long]()\n      \
    \  stonesArray = stonesArray.init(n)\n        stonesArray = stonesArray.takeWhile(n\
    \ => n % 2 == 0)\n        stonesArray = stonesArray.takeWhile(n => n % 2 != 0)\n\
    \        stonesArray = stonesArray.dropWhile(n => n == 0)\n        stonesArray\
    \ = stonesArray.toList\n        return stonesArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeozo66dl.scala:17:39\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        stonesArray = stonesArray.init(n)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpeozo66dl.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        stonesArray = stonesArray.toList\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m   |\e[0m      \
    \                Required: \e[1m\e[32mArray\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpeozo66dl.scala:22:15 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mreturn\e[0m stonesArray\n\e[31m\e[31m \
    \  |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (stonesArray : Array[Long])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val m = if (n.toDouble%2 == 0) 2 else 1\n        val l = List(n.toLong, n.toLong*2,\
    \ n.toLong*3)\n        l.map(n => if (n%2 == 0) m*(n+1) else n*(n+1)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmtvx4l_.scala:20)\n\tat Problem.main(tmpsmtvx4l_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n <= 0l) return Nil\n        val odd = if (n % 2l) 3l else 5l\n      \
    \  val even = if (n % 2l) 5l else 7l\n        Nil.::(odd.toLong).::(even.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptzjs1g2r.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd\e\
    [0m = \e[33mif\e[0m (n % \e[31m2l\e[0m) \e[31m3l\e[0m \e[33melse\e[0m \e[31m5l\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptzjs1g2r.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = \e[33mif\e[0m (n % \e[31m2l\e[0m) \e[31m5l\e[0m \e[33melse\e[0m \e[31m7l\e\
    [0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val nums = (if(n.isOdd) 1L else 2L) * n\n        val list = List.fill(nums)\
    \ {0L}\n        val result = (if(n.isOdd) List.reverse(list.filter(_ % 2 == 1L))\
    \ list.reverse\n        else if(n.isEven) List.reverse(list.filter(_ % 2 == 0L))\
    \ list.reverse\n        else list)\n        (result.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjou7bce4.scala:17:77 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (\e[33mif\e\
    [0m(n.isOdd) List.reverse(list.filter(_ % \e[31m2\e[0m == \e[31m1L\e[0m)) list.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjou7bce4.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = (\e[33mif\e\
    [0m(n.isOdd) \e[31m1L\e[0m \e[33melse\e[0m \e[31m2L\e[0m) * n\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      value isOdd is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjou7bce4.scala:16:29 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = List.fill(nums) {\e[31m0L\e[0m}\n\
    \e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m \
    \                            Found:    (nums : Long)\n\e[31m   |\e[0m        \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjou7bce4.scala:17:27 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = (\e[33mif\e[0m(n.isOdd) List.reverse(list.filter(_\
    \ % \e[31m2\e[0m == \e[31m1L\e[0m)) list.reverse\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ isOdd is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjou7bce4.scala:17:39\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = (\e[33mif\e[0m(n.isOdd) List.reverse(list.filter(_ % \e[31m2\e\
    [0m == \e[31m1L\e[0m)) list.reverse\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value reverse is not a member\
    \ of object"
  stdout: ''
  timestamp: 1660010331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var ans = (n % 2 == 0) ? n.toLong : n.toLong + n.toLong\n        if (n % 2\
    \ != 0) {\n            ans = (ans * 2) + n.toLong\n        }\n        List(ans)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiew5ngeh.scala:15:53 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mans\e[0m = (n % \e[31m2\e\
    [0m == \e[31m0\e[0m) ? n.toLong : n.toLong \e[35m+\e[0m n.toLong\n\e[31m\e[31m\
    \   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Not found: type\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiew5ngeh.scala:15:31\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36mans\e[0m = (n % \e[31m2\e[0m == \e[31m0\e[0m) ? n.toLong : n.toLong \e[35m+\e\
    [0m n.toLong\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stonesOnEachLevel = mutable.ListBuffer.empty[Long]\n        val currentLevel\
    \ = n.toInt\n        val nextLevel = if (n % 2 == 0) (2 * currentLevel + 1) else\
    \ currentLevel + 1 \n        stonesOnEachLevel += nextLevel\n        for (i <-\
    \ 1 to nextLevel) {\n            stonesOnEachLevel += nextLevel\n        }\n \
    \       stonesOnEachLevel.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc5w3r69r.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstonesOnEachLevel\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val newList = List(n) // create new list\n        if (n%2==0) // even\n  \
    \          newList += math.ceil(n/2) // add next even number\n        else\n \
    \           newList += math.ceil(n/2) // add next odd number\n        newList\
    \ // return the list\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplh20_a2h.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            newList += math.ceil(n/\e[31m2\e[0m) \e[34m//\
    \ add next even number\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m       value += is not a member of List[Long] - did you mean newList.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplh20_a2h.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            newList += math.ceil(n/\e[31m2\e[0m) \e[34m//\
    \ add next odd number\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m       value += is not a member of List[Long] - did you mean newList.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val li = List(n)\n        def go(n: Long) : List[Long] = n match {\n     \
    \       case 0 => li\n            case _ => {\n                val next = math.abs(n\
    \ / 2)\n                go(next).toList ++ li.reverse.filter(_ % 2 == 0).map(_.toLong)\n\
    \            }\n        }\n        go(n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_utbmgf.scala:26)\n\tat Problem.main(tmpw_utbmgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   var n1 = n\n        val n2 = if (n1.toInt % 2 == 0) (n1.toInt / 2) else (n1.toInt\
    \ / 2) + 1\n        val n3 = if (n2.toInt % 2 == 0) (n2.toInt / 2) else (n2.toInt\
    \ / 2) + 1\n        val n4 = if (n3.toInt % 2 == 0) (n3.toInt / 2) else (n3.toInt\
    \ / 2) + 1\n        val n5 = if (n4.toInt % 2 == 0) (n4.toInt / 2) else (n4.toInt\
    \ / 2) + 1\n        val n6 = if (n5.toInt % 2 == 0) (n5.toInt / 2) else (n5.toInt\
    \ / 2) + 1\n        val n7 = if (n6.toInt % 2 == 0) (n6.toInt / 2) else (n6.toInt\
    \ / 2) + 1\n        val n8 = if (n7.toInt % 2 == 0) (n7.toInt / 2) else (n7.toInt\
    \ / 2) + 1\n        val n9 = if (n8.toInt % 2 == 0) (n8.toInt / 2) else (n8.toInt\
    \ / 2) + 1\n        val n10 = if (n9.toInt % 2 == 0) (n9.toInt / 2) else (n9.toInt\
    \ / 2) + 1\n        val n11 = if (n10.toInt % 2 == 0) (n10.toInt / 2) else (n10.toInt\
    \ / 2) + 1\n        val n12 = if (n11.toInt % 2 == 0) (n11.toInt / 2) else (n11.toInt\
    \ / 2) + 1\n        val n13 = if (n12.toInt % 2 == 0) (n12.toInt / 2) else (n12.toInt\
    \ / 2) + 1\n        val n14 = if (n13.toInt % 2 == 0) (n13.toInt / 2) else (n13.toInt\
    \ / 2) + 1\n        val n15 = if (n14.toInt % 2 == 0) (n14.toInt / 2) else (n14.toInt\
    \ / 2) + 1\n        val n16 = if (n15.toInt % 2 == 0) (n15.toInt / 2) else (n15.toInt\
    \ / 2) + 1\n        val n17 = if (n16.toInt % 2 == 0) (n16.toInt / 2) else (n16.toInt\
    \ / 2) + 1\n        val n18 = if (n17.toInt % 2 == 0) (n17.toInt / 2) else (n17.toInt\
    \ / 2) + 1\n        val n19 = if (n18.toInt % 2 == 0) (n18.toInt / 2) else (n18.toInt\
    \ / 2) + 1\n        val n20 = if (n19.toInt % 2 == 0) (n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmr_i3jxd.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmr_i3jxd.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpmr_i3jxd.scala:34:43 ----------------\e[0m\e\
    [0m\n\e[33m34 |\e[0m        \e[33mval\e[0m \e[36mn20\e[0m = \e[33mif\e[0m (n19.toInt\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) (n\n\e[33m\e[33m   |\e[0m                  \
    \                         ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val stones = List(n)\n        if( n % 2 != 0) stones.updated(2, stones.last.get/2)\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93fafzb9.scala:16:54 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m( n % \e[31m2\e[0m != \e[31m0\e\
    [0m) stones.updated(\e[31m2\e[0m, stones.last.get/\e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       value get is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val list = mutable.ListBuffer.empty[Long]\n        list ++= List(1l, 1l, 1l)\n\
    \        if (n % 2 == 0) list ++= List(1l)\n        if (n % 2 == 1) list ++= List(2l)\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwkq6a44.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val n1 = n + 1l\n        val n2 = n1 + 1l\n        val n3 = n2 + 1l\n    \
    \    val n4 = n3 + 1l\n\n        val pile : List[Long] = List(n1.toLong, n2.toLong,\
    \ n3.toLong, n4.toLong)\n        if(n%2==0) pile.dropRight(1) else pile.takeRight(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8ezyscp.scala:24)\n\tat Problem.main(tmpj8ezyscp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) List()\n        else {\n            val (l1, l2) = (n.toInt/2).ceil.round.toInt,\
    \ n.toInt%2.toInt\n            makeAPile(l1) + makeAPile(l2)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeub1l2gd.scala:17:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (l1, l2) = (n.toInt/\e[31m2\e\
    [0m).ceil.round.toInt, n.toInt%\e[31m2\e[0m.toInt\n\e[31m\e[31m   |\e[0m     \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                              end of statement expected but ',' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeub1l2gd.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (l1, l2) = (n.toInt/\e[31m2\e\
    [0m).ceil.round.toInt, n.toInt%\e[31m2\e[0m.toInt\n\e[31m\e[31m   |\e[0m     \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value ceil\
    \ is not a member of Int.\n\e[31m   |\e[0m      An extension method was tried,\
    \ but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \    floatWrapper(n.toInt./(\e[31m2\e[0m))\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpeub1l2gd.scala:17:17 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mval\e[0m (l1, l2) = (n.toInt/\e[31m2\e[0m).ceil.round.toInt,\
    \ n.toInt%\e[31m2\e[0m.toInt\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e\
    [31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeub1l2gd.scala:17:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m (l1, l2) = (n.toInt/\e[31m2\e[0m).ceil.round.toInt, n.toInt%\e[31m2\e[0m.toInt\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpeub1l2gd.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            makeAPile(l1) + makeAPile(l2)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \  if (n <= 0) Nil\n       else if (n % 2 == 0) (n/2 :: makeAPile(n.toInt))\n\
    \       else if (n % 2 == 1) (n.toInt :: makeAPile(n.toInt))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmparpl9ptz.scala:17:12\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \e[33melse\e[0m \e[33mif\e\
    [0m (n % \e[31m2\e[0m == \e[31m1\e[0m) (n.toInt :: makeAPile(n.toInt))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ List[Long]\n\e[31m   |\e[0m            Maybe you are missing an else part for\
    \ the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val x = n.toInt\n        val result = new ListBuffer[Long]()\n        if (n.toInt\
    \ == 1) {\n            result.+=(n.toLong)\n        } else {\n            if (x\
    \ % 2 == 0) {\n                result.+=(n.toLong)\n                result.+=(n.toLong)\n\
    \            } else {\n                result.+=(n.toLong)\n                result.+=(n.toLong)\n\
    \                result.+=(n.toLong)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6aeqnr_5.scala:32)\n\tat Problem.main(tmp6aeqnr_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   // If n is odd, return the next odd number and add 1 to it\n        // If\
    \ n is even, return the next even number and add 1 to it\n        (if (n >>> 0\
    \ == 0) (n >>> 1).toLong + 1 : (n >>> 1).toLong).\n            toList.\n     \
    \       reverse.\n            toList.\n            reverse.\n            toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5yxyz2ul.scala:17:59 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (\e[33mif\e[0m (n >>> \e[31m0\e[0m == \e[31m0\e\
    [0m) (n >>> \e[31m1\e[0m).toLong + \e[31m1\e[0m : (\e[35mn\e[0m \e[35m>>>\e[0m\
    \ \e[31m1\e[0m).toLong).\n\e[31m\e[31m   |\e[0m                              \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                     ')' expected, but '.' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp5yxyz2ul.scala:17:53 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        (\e[33mif\e[0m (n >>> \e[31m0\e[0m == \e[31m0\e[0m) (n >>> \e\
    [31m1\e[0m).toLong + \e[31m1\e[0m : (\e[35mn\e[0m \e[35m>>>\e[0m \e[31m1\e[0m).toLong).\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ type >>>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   if (n == 0) List[Long]() else makeAPile(n-1) ++ makeAPile(n mod 2 match {\n\
    \            case 0 => 1\n            case 1 => n\n            case _ => n >>\
    \ 1\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7_rt33l.scala:15:68 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (n == \e[31m0\e[0m) List[\e[35mLong\e\
    [0m]() \e[33melse\e[0m makeAPile(n-\e[31m1\e[0m) ++ makeAPile(n mod \e[31m2\e\
    [0m \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n     \
    \   val numLevels = n.toInt\n        var level = numLevels\n        var totalStones\
    \ = n\n        var stones = List(numLevels.toLong)\n        var nextEven = 0\n\
    \        var nextOdd = 0\n        while (level <= numLevels) {\n            nextEven\
    \ = n.toInt\n            nextOdd = n.toInt\n            stones = stones.tail :+\
    \ nextEven.toLong ++ nextOdd.toLong\n            level = level + 1\n        }\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnp3wq6ut.scala:24:52 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            stones = stones.tail :+ nextEven.toLong ++\
    \ nextOdd.toLong\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value ++ is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010335
