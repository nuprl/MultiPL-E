language: scala
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val odd = n.toInt\n\
    \        var sum = 0L\n        while (odd > 0) {\n            val temp = (odd.toString.toInt)\n\
    \            sum += temp * temp\n            odd -= 1\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2ms2cgl.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            odd -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Int - did you mean odd.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        (1l).until(n / 2l).filter(_\
    \ % 2l).reduce(1l)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kl3sskg.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (\e[31m1l\e[0m).until(n\
    \ / \e[31m2l\e[0m).filter(_ % \e[31m2l\e[0m).reduce(\e[31m1l\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4kl3sskg.scala:14:49 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        (\e[31m1l\e[0m).until(n / \e[31m2l\e[0m).filter(_\
    \ % \e[31m2l\e[0m).reduce(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^\e[0m\n\e[31m   |\e[0m                 \
    \                         Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m  \
    \                                        Required: (Long, Long) => Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = n.toString.toDouble.floor.toInt\n\
    \        if (digits % 2 == 0) digits else 0l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpooduo7dc.scala:18)\n\tat Problem.main(tmpooduo7dc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var odd = 1l\n   \
    \     for (i <- 0 until n.toInt) {\n            odd *= n.toLong / 10\n       \
    \     odd %= 10\n        }\n        if (odd % 2 == 0) 0\n        else odd * (10l\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdj9l9rsd.scala:23)\n\tat Problem.main(tmpdj9l9rsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var digit = 0\n  \
    \      var product = 1\n        while (n > 0) {\n            digit = n % 10\n\
    \            product *= digit\n            n /= 10\n        }\n        if (digit\
    \ == 0) product\n        else product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t5i7nga.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            digit = n % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1t5i7nga.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n < 10l) 1l\n\
    \        else n % 10 flatMap (x => n / 10 map (y => x * y)) getOrElse 0l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8xyj045.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m n % \e[31m10\e[0m flatMap (x\
    \ => n / \e[31m10\e[0m map (y => x * y)) getOrElse \e[31m0l\e[0m\n\e[31m\e[31m\
    \   |\e[0m             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ flatMap is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.BitSet(n.toString.length\
    \ + 1)\n        digits.set(0)\n        for (i <- n.toString.reverse)\n       \
    \     if (!digits.set(digits.size - i - 1))\n                return n.toString.reverse.foldLeft(0l)(_\
    \ * _)\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn1znej9.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.BitSet(n.toString.length\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n.isEven) 0\n\
    \        else n.toString.filter(_.isDigit).foldLeft(1L) { (x, y) => x * 10 + y\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpak9esla3.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n.isEven) \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value isEven\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      val digits = List()\
    \ //mutable\n      var product = 0\n\n      for( i <- 0 until n){\n        val\
    \ p = n % 10\n        n /= 10\n        product = (product * 10) + p\n      }\n\
    \n      if (n == 0)\n        product\n      else\n        0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6x42pgl.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m      \e[33mfor\e[0m( i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpw6x42pgl.scala:19:10 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m\
    \   |\e[0m        value /= is not a member of Long - did you mean n.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw6x42pgl.scala:20:18 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        product = (product * \e[31m10\e[0m) + p\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n       var i = -1\n      \
    \ var product = 0\n       while(i <= n.toString.length-1){\n           var digit\
    \ = n.toString.charAt(i)\n           if(digit == digit.charAt(1))\n          \
    \     product = product * 10\n           i += 1\n       }\n       if (product\
    \ == 0)\n           0\n       else\n           product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpft_b9lsy.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m           \e[33mif\e[0m(digit == digit.charAt(\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // 1l : Long to avoid\
    \ Long arithmetic overflow.\n        // n is in the range of 0 to 9,999,999,999,999,999,999\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9l : 9 digit long numbers\n\
    \        // 9l : 9 digit long numbers\n        // 9\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj78j454c.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mdigits\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m14 |\e[0m        \e[34m// 1l : Long to avoid Long\
    \ arithmetic overflow.\e[0m\n\e[31m15 |\e[0m        \e[34m// n is in the range\
    \ of 0 to 9,999,999,999,999,999,999\e[0m\n\e[31m16 |\e[0m        \e[34m// 9l :\
    \ 9 digit long numbers\e[0m\n\e[31m17 |\e[0m        \e[34m// 9l : 9 digit long\
    \ numbers\e[0m\n\e[31m18 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\
    \e[31m19 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ 9l : 9 digit long numbers\e[0m\n\e[31m22 |\e[0m        \e[34m// 9l : 9 digit\
    \ long numbers\e[0m\n\e[31m23 |\e[0m        \e[34m// 9l : 9 digit long numbers\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m26 |\e[0m     \
    \   \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m27 |\e[0m        \e[34m// 9l\
    \ : 9 digit long numbers\e[0m\n\e[31m28 |\e[0m        \e[34m// 9l : 9 digit long\
    \ numbers\e[0m\n\e[31m29 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\
    \e[31m30 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m32 |\e[0m        \e[34m//\
    \ 9l : 9 digit long numbers\e[0m\n\e[31m33 |\e[0m        \e[34m// 9l : 9 digit\
    \ long numbers\e[0m\n\e[31m34 |\e[0m        \e[34m// 9l : 9 digit long numbers\e\
    [0m\n\e[31m35 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m37 |\e[0m     \
    \   \e[34m// 9l : 9 digit long numbers\e[0m\n\e[31m38 |\e[0m        \e[34m// 9l\
    \ : 9 digit long numbers\e[0m\n\e[31m39 |\e[0m        \e[34m// 9l : 9 digit long\
    \ numbers\e[0m\n\e[31m40 |\e[0m        \e[34m// 9l : 9 digit long numbers\e[0m\n\
    \e[31m41 |\e[0m        \e[34m// 9l : 9"
  stdout: ''
  timestamp: 1660009663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n\
    \            0\n        } else {\n            val l = n.toInt\n            l *\
    \ digits(n / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr6c2km_u.scala:22)\n\tat Problem.main(tmpr6c2km_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 0\n    \
    \    for {\n            n <- n toLong\n            _ <- n % 10\n        } yield\
    \ sum += n\n        if (sum == 0) 0\n        else (n - sum) rem 10\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2f3dq5q9.scala:17:14 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            _ <- n % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m              ^^\e[0m\n\e[31m   |\e[0m              '}' expected, but '<-'\
    \ found\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2f3dq5q9.scala:17:12 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            _ <- n % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => n toLong _$1.\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp2f3dq5q9.scala:16:19 -----------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            n <- n toLong\n\e[31m\e[31m   |\e[0m              \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mmethod\e[0m \e[35mtoLong\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f3dq5q9.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (n - sum) rem \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \     value rem is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString.toInt\n\
    \        val evens = n % 2 == 0\n        val product = d\n        if (evens) product\
    \ * 2\n        else product\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj762lc_i.scala:22)\n\tat Problem.main(tmpj762lc_i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret = 0\n    \
    \    var m = n\n        while (m > 0) {\n            ret = ret * 10 + m % 10\n\
    \            m = m / 10\n        }\n        if (ret % 2 == 0) 0 else ret\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx8ydfag.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            ret = ret * \e[31m10\e\
    [0m + m % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n < 0) {\n   \
    \         return 0L\n        }\n        val str : String = (n.toString.dropRight(1)).toCharArray\n\
    \        var product : Long = 0\n        var digit : Long = 0\n        for (c\
    \ <- str) {\n            product = product * 10 + c.toInt\n            digit =\
    \ c.toInt\n        }\n        if (digit == 0 && product != 0) {\n            return\
    \ 0\n        } else {\n            return product\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp204yuvxh.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mstr\e\
    [0m : \e[35mString\e[0m = (n.toString.dropRight(\e[31m1\e[0m)).toCharArray\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Array[Char]\n\e[31m \
    \  |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = (1L to\
    \ n).filter { x => x % 2 == 1 }.map(x => x % 2)\n        (digits.head * digits.last).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp22qgbk7w.scala:18)\n\tat Problem.main(tmp22qgbk7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret = 0L\n   \
    \     for (i <- 0 until n.toInt) {\n            ret *= n.toInt / i\n         \
    \   if (n / i != 0) ret += 1\n        }\n        val d = n.toInt - ret.toInt\n\
    \        if (d % 2 == 0) ret else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.digits$$anonfun$1(tmpjuqws2us.scala:16)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.digits(tmpjuqws2us.scala:18)\n\
    \tat Problem$.main(tmpjuqws2us.scala:23)\n\tat Problem.main(tmpjuqws2us.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if((n%2l) == 0)\n\
    \            return 0\n        \n        var ret : Long = 0\n        var i = 2l\n\
    \        var x = n.toInt\n        while(i != 0) {\n            while(x % i > 0)\
    \ {\n                ret += i \n                x = x / i\n            }\n   \
    \         i += 2l\n        }\n        return ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfydbn57.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                x = x / i\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       var factor = 2\n        var remainder = n\n        while (remainder >\
    \ 0) {\n            if (remainder % factor == 0) {\n                result *=\
    \ factor\n                remainder /= factor\n            }\n            else\
    \ {\n                remainder %= factor\n                result *= factor\n \
    \               factor *= 10\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.digits(tmpjnh6xp9e.scala:18)\n\
    \tat Problem$.main(tmpjnh6xp9e.scala:31)\n\tat Problem.main(tmpjnh6xp9e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.Stack.empty[Long]\n\
    \        val remainder = n\n        while (n /= 10) {\n            digits += n\n\
    \            n %= 10\n        }\n        if (remainder == 0)\n            0l\n\
    \        else\n            digits.reverse.foldLeft(1l) { (a, b) => a * b % 10\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjxpdn0q.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.Stack.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxjxpdn0q.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (n /= \e[31m10\e[0m) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               value /=\
    \ is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxjxpdn0q.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            n %= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value %= is not a member of Long - did you mean\
    \ n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val div = n.toInt\n        while (div > 0) {\n            digits.append(div\
    \ % 10)\n            div = div / 10\n        }\n        digits.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n   \
    \ assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp53b9525m.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            div = div / \e[31m10\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val div\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val str : String =\
    \ n.toString.trim\n        val strChars: Array[Char] = str.toCharArray\n     \
    \   if (strChars.length == 0)\n            return 0\n        val digits = strChars.filter(i\
    \ => i % 2 == 1).toArray\n        var result : Long = 0\n        for (d <- digits)\
    \ {\n            result *= 10\n            result += d\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp06cy2ocy.scala:27)\n\tat Problem.main(tmp06cy2ocy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val l = n.toString.length\n\
    \        if (l < 2)\n            return 0\n        val odd = new mutable.ArrayBuffer[Long]()\n\
    \        val even = new mutable.ArrayBuffer[Long]()\n        for (x <- n.toString.dropRight(l\
    \ - 1)) {\n            val digit = x.toLong % 10\n            if (digit % 2 ==\
    \ 0)\n                even.push(digit)\n            else\n                odd.push(digit)\n\
    \        }\n        if (odd.isEmpty)\n            return even.product\n      \
    \  else\n            return even.product*odd.product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpme981thf.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpme981thf.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // Sum all the digits\
    \ of n (using Long's toString method)\n        val sumOfDigits = n.toString.map(_.digit).sum\n\
    \        // If sumOfDigits is even, return 0\n        if(sumOfDigits % 2 == 0)\
    \ {\n            return 0L\n        }\n        // Return n's product when sumOfDigits\
    \ is odd\n        return n.toString.map(_.digit).product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gix7lmq.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = n.toString.map(_.digit).sum\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value digit is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gix7lmq.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mreturn\e[0m\
    \ n.toString.map(_.digit).product\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              value digit\
    \ is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var s = n\n      \
    \  var p = 0L\n        var i = s.toInt\n        while(i >= 0) {\n            p\
    \ += (i % 2 == 1 ? s : 0L)\n            i /= 2\n        }\n        p\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj4vz5806.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            p += (i % \e[31m2\e[0m == \e[31m1\e[0m ?\
    \ s : \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpj4vz5806.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            p += (i % \e[31m2\e[0m == \e[31m1\e[0m ?\
    \ s : \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\
    \e[31m   |\e[0m                           value ? is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var remainder = n\n        while (remainder > 0) {\n            nums.append(remainder\
    \ % 10)\n            remainder = remainder / 10\n        }\n        if (nums.isEmpty)\n\
    \            return 0\n        else\n            nums.head * digits(nums.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdr6bpsx0.scala:23:36\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            nums.head * digits(nums.tail)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  Found:    scala.collection.mutable.ListBuffer[Long @uncheckedVariance]\n\e\
    [31m   |\e[0m  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // First we must find\
    \ out if all digits are even (i.e. only odd numbers)\n        val isEven = (n\
    \ % 2) == 0\n        // Then we must use recursion to get the products\n     \
    \   val digit = n % 10\n        if (digit == 0)\n            isEven ? 0l : 1l\n\
    \        else digits(n / 10)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqh0aiwg9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            isEven ? \e[31m0l\e[0m : \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ ? is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var p = n.toInt\n\
    \        p %= 10\n        var m = 0L\n        while ((p > 0) || (p % 2 == 0))\
    \ {\n            p = (n / 10).toInt\n            m += p % 2 == 1\n        }\n\
    \        if (m == 0) 0\n        else m * Math.pow(2, n.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ux_yemk.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            m += p % \e[31m2\e[0m == \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7ux_yemk.scala:22:13 --------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33melse\e[0m m * Math.pow(\e[31m2\e[0m, n.toInt)\n\e\
    [31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    Double\n\e[31m   |\e[0m             Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val ns = n.toString.dropRight(1)\n\
    \        val nd = n.toString.dropLeft(1).toDouble\n        val n = ns match {\n\
    \            case s + \"d\" => nd(0).toInt\n            case s + \"d\" + s =>\
    \ nd(0).toLong\n            case s + \"d\" + s + \"d\" => nd(0).toInt\n      \
    \      case _ => nd(0).toLong\n        }\n        val r = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until n) {\n            r ++= ns take i.toInt + 1 map { s\
    \ => s(0).toLong }\n        }\n        r.foldLeft(1L) { (a, b) => a * b + a }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqxurzupg.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = ns \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m          \
    \      Recursive \e[33mvalue\e[0m \e[35mns\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxurzupg.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m s + \e[31m\"d\"\e[0m => nd(\e\
    [31m0\e[0m).toInt\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0m                   Not found: +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqxurzupg.scala:15:17 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnd\e[0m = n.toString.dropLeft(\e[31m1\e[0m).toDouble\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqxurzupg.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m s + \e[31m\"d\"\e[0m + s\
    \ => nd(\e[31m0\e[0m).toLong\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Not found: +\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxurzupg.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m s + \e[31m\"d\"\e[0m + s\
    \ => nd(\e[31m0\e[0m).toLong\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\
    \e[31m   |\e[0m                   Not found: +\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E005] Naming Error: /tmp/tmpqxurzupg.scala:18:27 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m s + \e[31m\"d\"\e[0m + s\
    \ => nd(\e[31m0\e[0m).toLong\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1660009671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0l) return\
    \ 0l\n        val digit = n % 10\n        if (digit % 2 == 0) return digit\n \
    \       else return digits(n / 10l) * 2l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82sc55h9.scala:20)\n\tat Problem.main(tmp82sc55h9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val product = n.toString.tails.filter(_.isOdd).foldLeft(1L)(_\
    \ * _)\n        if (product == 0L) 0 else product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0yl0vpu.scala:14:48 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = n.toString.tails.filter(_.isOdd).foldLeft(\e\
    [31m1L\e[0m)(_ * _)\n\e[31m\e[31m   |\e[0m                                   \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ isOdd is not a member of String\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpj0yl0vpu.scala:14:70\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e\
    [0m \e[36mproduct\e[0m = n.toString.tails.filter(_.isOdd).foldLeft(\e[31m1L\e\
    [0m)(_ * _)\n\e[31m\e[31m   |\e[0m                                           \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((_$3 : String))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val dd = n.toString.drop(n.toString.length-1)\n\
    \        if (dd.length == n.toString.length)\n            0\n        else\n  \
    \          n.toString.takeWhile(_ == '1').sum * dd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_00xkti_.scala:18:47 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n.toString.takeWhile(_ == \e[31m'1'\e[0m).sum\
    \ * dd\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m*\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m\
    \   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((dd : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val p = scala.math.BigDecimal(n.toString).multiply(scala.math.BigDecimal(\"\
    2\").pow(n.toString.length()))\n        val str = p.toString\n        val ints\
    \ = str map {\n            x => x.toInt\n        }\n        ints.reduce((x, y)\
    \ => x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr2rf5eti.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = scala.math.BigDecimal(n.toString).multiply(scala.math.BigDecimal(\e\
    [31m\"2\"\e[0m).pow(n.toString.length()))\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value multiply is not a member of BigDecimal\n1 error found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = n.toString.reverse\n\
    \        val result = digits.takeWhile(_.isDigit).reverse\n        result.foldLeft(1l)\
    \ {\n            case (x, y) => x * y\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3xg2q4lc.scala:21)\n\tat Problem.main(tmp3xg2q4lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 1\n    \
    \    for{a <- n.toString.toInt; b <- n.toString.toInt}\n            res = a*10\
    \ + b*2\n        return res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbw2whl2j.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m{a <- n.toString.toInt; b <- n.toString.toInt}\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n <= 0l) {\n \
    \           return 0l\n        }\n        var product : Long = n.toInt;\n    \
    \    var oddDigits : Long = 1l\n        while ((product % 2l) == 0l) {\n     \
    \       product /= 2l\n            oddDigits += 1l\n        }\n        if (oddDigits\
    \ == n) {\n            return product\n        }\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n   \
    \ assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplb9qby0y.scala:29)\n\tat Problem.main(tmplb9qby0y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def sumDigits(m :\
    \ Long) : Long = {\n            val rem = n % m\n            if(rem > 9) { m +\
    \ sumDigits(rem) }\n            else { m }\n        }\n        if(n <= 0) 0\n\
    \        else sumDigits(n)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgm8shtds.scala:24)\n\tat Problem.main(tmpgm8shtds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ListBuffer(0)\n\
    \        var temp = 0L\n        for (i <- 0 until n) {\n            if (i % 2\
    \ != 0) {\n                temp = temp * 10 + i.toLong\n            } else {\n\
    \                digits += i\n            }\n        }\n        if (digits.isEmpty)\n\
    \            return 0L\n        else\n            return digits.head.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoq39vpaz.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoq39vpaz.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val str = n.toString\n\
    \        var digits = str.grouped(2)\n        if (str.length%2 == 0) digits =\
    \ digits ++ List(List(2))\n        digits.foldLeft(0l){ (sum, digit) => sum*digit._1\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqnmtpvk.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (str.length%\e\
    [31m2\e[0m == \e[31m0\e[0m) digits = digits ++ List(List(\e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Found:\
    \    List[Int]\n\e[31m   |\e[0m                                              \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpeqnmtpvk.scala:17:55 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        digits.foldLeft(\e[31m0l\e[0m){ (\e[36msum\e[0m, \e[36mdigit\e[0m)\
    \ => sum*digit._1 }\n\e[31m\e[31m   |\e[0m                                   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      value _1 is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = n.toInt\n\
    \        val digits = n.toString.dropRight(n.toString.length).reverse\n      \
    \  var temp = 0\n        for ( d <- digits ) {\n            temp = temp * 10 +\
    \ d.toInt\n            if ( temp > 9 ) {\n                result = temp\n    \
    \            temp = temp / 10\n            }\n        }\n        if ( temp > 9\
    \ ) result = temp\n        if ( result % 2 == 1 ) result = 0\n        return result.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksjok88w.scala:29)\n\tat Problem.main(tmpksjok88w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val odd = n % 2L\n\
    \        if (odd > 0) 0L else n.toLong * 1L\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdyre7zai.scala:18)\n\tat Problem.main(tmpdyre7zai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 1\n        while ((n != 0) && (n % 2 == 0)) {\n            result *= n % 10\n\
    \            n /= 10\n        }\n        if ((n != 0) && (n % 2 == 1)) {\n   \
    \         result *= n % 10\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpicrhgjoe.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // TODO: implement\
    \ me\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqzaevdwg.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mdigits\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m14 |\e[0m        \e[34m// TODO: implement me\e[0m\n\
    \e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       var digit = n % 10\n        for (i <- 1L until 10) {\n            if ((n\
    \ / i) % 2 == 0 && i != digit) {\n                result *= i\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrlka8kg.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result *= i\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val odd = n % 10\n\
    \        if(odd > 0)\n            odd * digits(n / 10)\n        else\n       \
    \     0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy5v2ckpd.scala:21)\n\tat Problem.main(tmpy5v2ckpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val l = (if (n % 2\
    \ == 0) (n / 2)) else (n / 2 ^ 1)).toLong\n        val odd = l.toString.dropRight(1)\n\
    \        if (odd.isEmpty) 0\n        else odd.toLong * digits(l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvroesaic.scala:14:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = (\e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) (n / \e[31m2\e[0m)) \e[33melse\e[0m (n /\
    \ \e[31m2\e[0m ^ \e[31m1\e[0m)).toLong\n\e[31m\e[31m   |\e[0m                \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      end of statement expected but 'else' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpvroesaic.scala:17:33 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33melse\e[0m odd.toLong * digits(l)\n\e[31m\e[31m  \
    \ |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m             \
    \                    Found:    (l : Unit)\n\e[31m   |\e[0m                   \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 0\n    \
    \    for(d <- n.toString().toInt)\n        {\n            if(d % 2 == 1)\n   \
    \             res *= 10\n            res *= d\n        }\n        if(res % 2 ==\
    \ 0)\n            res /= 2\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1s_f29o.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(d <- n.toString().toInt)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \          value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = n.toDouble\n\
    \        var product = 1\n        while (result > 1) {\n            result -=\
    \ result/2\n            product *= result\n        }\n        return product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjeww4lo4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            product *= result\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val evenDigits = n.toString.toInt\n\
    \        if (evenDigits % 2 == 1)\n            return 0\n        else\n      \
    \      n.toString.toInt * Math.pow(10, n.toString.length - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphr2vqh54.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n.toString.toInt\
    \ * Math.pow(\e[31m10\e[0m, n.toString.length - \e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    Double\n\e[31m   |\e[0m            Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val res = n.toString.dropRight(2).foldLeft(1l)\
    \ { (r, t) =>\n            val digit = t.toInt\n            digit * r\n      \
    \  }\n        res % 10l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcpvmxzu.scala:21)\n\tat Problem.main(tmpvcpvmxzu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n1 = n / 100\n\
    \        val n2 = n % 100\n        n1.map(x => (x * 3) % 10).reduceLeft(_ * _)\
    \ + n2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplovtlryu.scala:16:11 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        n1.map(\e[36mx\e[0m => (x * \e[31m3\e[0m) % \e\
    [31m10\e[0m).reduceLeft(_ * _) + n2\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toInt\n\
    \        var product = d\n        for(i <- 1 to d) product *= i\n        if((n\
    \ % 2) == 0) product * 0\n        else product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptv0hw94p.scala:21)\n\tat Problem.main(tmptv0hw94p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n = n.toString.toInt\n\
    \        if (n < 0) 0\n        else if (n % 2 == 0) 0\n        else n/2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0mgisx4v.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toString.toInt\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var product = n.toInt\n\
    \        var rem = n\n        while(rem.isEven) {\n            product *= 10\n\
    \            rem /= 10\n        }\n        product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprnwun764.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m(rem.isEven) {\n\e[31m\e[31m\
    \   |\e[0m              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value isEven\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // Digits of the odd\
    \ number\n        val oddsDigits : mutable.Set[Long] = Set()\n        var product\
    \ : Long = 0\n\n        // Add digits of n to oddsDigits\n        val digits =\
    \ (n.toString.toList).filter(_.isDigit)\n        digits.foreach(x => oddsDigits.add(x))\n\
    \n        // If any number in oddsDigits is even, add 0 to the product\n     \
    \   if (oddsDigits.exists(x => x.toString.toLong % 2 == 0)) {\n            product\
    \ = product * 2\n        }\n\n        // Add 0 to the product for all even digits\
    \ of n\n        digits.foreach(x => product = product * x.toString.toLong)\n\n\
    \        // Return product\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3x8ob1j.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddsDigits\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = Set()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var odd = n\n      var\
    \ result = n.toInt // or n.toString if you want to treat n as string\n      while\
    \ (result % 2 != 0) {\n        odd *= 10\n        result /= 10\n      }\n    \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkcunw_0.scala:23)\n\tat Problem.main(tmppkcunw_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val odd = n % 2\n\
    \        var total = 0L\n        var i = 0L\n        while(n != 0L && n != 1L)\
    \ {\n            total += n / 2\n            n /= 2\n            i += 1\n    \
    \    }\n        if (n == 0L) {\n            total\n        } else if (odd != 0L)\
    \ {\n            0\n        } else {\n            total * i\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi0qitj0j.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def sum = 0\n    \
    \    while (n > 0) {\n            val digit = n % 10\n            n = n / 10\n\
    \            sum += digit\n        }\n        if (sum == 0)\n            return\
    \ 0\n        else\n            return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_jt2vd6r.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_jt2vd6r.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += digit\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val a = n.toString.reverse\n\
    \        a(2).toLong * a(1).toLong * a(1).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.digits(tmp1yer1x98.scala:15)\n\
    \tat Problem$.main(tmp1yer1x98.scala:18)\n\tat Problem.main(tmp1yer1x98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 0\n        var oddDigit = 0\n        var evenDigit = 0\n\n        for (i <-\
    \ 1 to n.toInt) {\n            oddDigit = n.toLong % 10\n            evenDigit\
    \ = n.toLong / 10\n\n            if (evenDigit % 2 == 1) {\n                result\
    \ *= oddDigit\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74nfkmf6.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            oddDigit = n.toLong\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m   \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp74nfkmf6.scala:20:24 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            evenDigit = n.toLong / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \       Found:    Long\n\e[31m   |\e[0m                        Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       // Find the first digit\n        var digit = n.toString.charAt(0).toInt\n\
    \        // Find the next digit\n        while(n/10 != 0) {\n            digit\
    \ += 1\n            n /= 10\n        }\n        // Find the product of this digit\
    \ and the next one\n        var product = n.toString.charAt(digit).toInt * digit\n\
    \        // Find the next one\n        while(n/10 != 0) {\n            product\
    \ *= digit\n            n /= 10\n        }\n        // Return the product\n  \
    \      result*product\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhc2dmbv.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhc2dmbv.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n\
    \            return n\n        } else {\n            return n * digits(n / 2)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp71gvgp53.scala:21)\n\tat Problem.main(tmp71gvgp53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val str = n.toString\n\
    \        val evenDigits = str.filter(_.isDigit)\n        if (evenDigits.length\
    \ == str.length)\n            return 0\n        else\n            return evenDigits.product(evenDigits.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqf0tfixk.scala:19:38\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m\
    \ evenDigits.product(evenDigits.length)\n\e[31m\e[31m   |\e[0m               \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \                Required: Numeric[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res: Long = n;\n\
    \        while(true){\n            res = res/10;\n            if (res == 0) return\
    \ res;\n            res = res%10;\n            if (res==2) return res\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0zd57tao.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m(\e\
    [31mtrue\e[0m){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m16 |\e[0m            res\
    \ = res/\e[31m10\e[0m;\n\e[31m17 |\e[0m            \e[33mif\e[0m (res == \e[31m0\e\
    [0m) \e[33mreturn\e[0m res;\n\e[31m18 |\e[0m            res = res%\e[31m10\e[0m;\n\
    \e[31m19 |\e[0m            \e[33mif\e[0m (res==\e[31m2\e[0m) \e[33mreturn\e[0m\
    \ res\n\e[31m20 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // First digit of\
    \ n is always an even number\n        def isEven(n: Long) = n % 2 == 0\n     \
    \   // Odd digits are multiplied by 2\n        def multOdd(n: Long) = if (isEven(n))\
    \ 2 * n else n\n        // Find first odd digit\n        def findOdd(n: Long)\
    \ = math.ceil(n/2).asInstanceOf[Long]\n        val product = mutable.ArrayBuffer.empty[Long]\n\
    \        while (n > 0) {\n            val n = multOdd(n)\n            if (n %\
    \ 2 == 0) product += n\n            n -= 1\n        }\n        product.reverse.foldLeft(1L)\
    \ {\n            case (acc, elem) => acc * elem\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2umdzh6t.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp2umdzh6t.scala:22:28 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = multOdd(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2umdzh6t.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        require(n.toInt >\
    \ 0, s\"n should be positive, but it is $n\")\n        val digits = n.toString.reverse.map(_.toInt)\n\
    \        digits.reduce(_ * _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf7xgls2g.scala:19)\n\tat Problem.main(tmpf7xgls2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = n\n    \
    \    val digits = (BigInt(res).toString.reverse) splitAt 1 toList\n        for(i\
    \ <- 1 until digits.length)\n            res = res * BigInt(digits(i))\n     \
    \   res\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpekj9pby2.scala:15:68 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = (BigInt(res).toString.reverse)\
    \ splitAt \e[31m1\e[0m toList\n\e[31m\e[31m   |\e[0m                         \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                             expression expected but \e[31mfor\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpekj9pby2.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            res = res * BigInt(digits(i))\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: i\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val m = n.toString.toInt\n\
    \        val p = m * 2\n        if(m % 2 != 0)\n            p\n        else\n\
    \            digits(p * 10)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk8mbbau.scala:22)\n\tat Problem.main(tmpzk8mbbau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var i = n / 10\n \
    \       var d = n % 10\n        while(d % 2 == 0){\n            d /= 2\n     \
    \   }\n        var p = d * i\n        while(i * d < n){\n            p = d * i\
    \ + p\n            i += 2\n            d = n % 10\n        }\n        if(i ==\
    \ 0){\n            p = 0\n        }\n        return p\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcog5xxk5.scala:31)\n\tat Problem.main(tmpcog5xxk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val a = n.toString.map(x\
    \ => x.toInt)\n        val n = a.count(_ % 2 != 0)\n        if (n == 0) 0\n  \
    \      else a.map(x => x % 2).sum * 10\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpog_wipxg.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.count(_ % \e\
    [31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      if (n == 0l) 0l\n  \
    \    else n % 10 match {\n        case 0 => 1l\n        case 1 => n * digits(n\
    \ / 10)\n        case _ => n * digits(n / 10) * digits(n / 10)\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7383ighg.scala:22)\n\tat Problem.main(tmp7383ighg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var d : Int = 0\n\
    \        var product = 0\n        while(n != 0) {\n            product *= n %\
    \ 10\n            n /= 10\n            d += 1\n        }\n        if(d == 0 ||\
    \ product != 0) {\n            return 0\n        }\n        if(d == 1) {\n   \
    \         return product\n        }\n        return product * digits(n-1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi8y2wuwm.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            product *= n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpi8y2wuwm.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.MutableList[Long]()\n\
    \        var product = 1\n        while(n > 0){\n            digits += n % 10\n\
    \            n /= 10\n        }\n        var odd = 1 \n        for (d <- digits){\n\
    \            if(d % 2 == 1){\n                odd *= d\n            }\n      \
    \  }\n        if(digits.isEmpty){\n            return 0\n        } else {\n  \
    \          return odd\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfs803spp.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfs803spp.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n = n.toInt\n\
    \        // Keep track of previous digit to check if all digits were even\n  \
    \      var previousOddDigit : Int = 0\n        // The product of a single digit\n\
    \        var productOddDigit : Long = 1\n        // Count the number of odd digits\
    \ to multiply the product by\n        var countOddDigits : Int = 0\n        //\
    \ The final product\n        var product : Long = 0\n\n        // While loop to\
    \ check odd and odd digits\n        while(n>0) {\n            // Check if last\
    \ digit was odd\n            if(n%2l==1l) countOddDigits+=1\n            // If\
    \ odd digits, multiply product by previous odd digit\n            else if(n%2l==0l\
    \ && previousOddDigit > 0) {\n                productOddDigit = productOddDigit\
    \ * previousOddDigit + n%2l\n            }\n            // Remember current digit\n\
    \            else productOddDigit = n%2l\n            // Increment previous odd\
    \ digit\n            previousOddDigit = productOddDigit\n            // Multiply\
    \ product of current digit by product of previous odd digit\n            product\
    \ = product * productOddDigit\n            // Next digit\n            n = n/2l\n\
    \        }\n        // Return product or 0 if all digits were even\n        if(countOddDigits\
    \ == 0) 0\n        else product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9sa0450k.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9sa0450k.scala:35:31 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            previousOddDigit = productOddDigit\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (productOddDigit : Long)\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp9sa0450k.scala:39:14 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            n = n/\e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val a = n.toString.toInt\n\
    \        val b = a / 10000l\n        val c = a % 10000l\n        val d = c / 100l\n\
    \        val e = c % 100l\n        val f = d / 10l\n        val g = d % 10l\n\
    \        val h = e / 1l\n        val i = e % 1l\n        val a = b * f\n     \
    \   val b = b * g\n        val c = c * h\n        val d = d * i\n        val e\
    \ = e * i\n        a + b + c + d + e\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz953mfno.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = b * f\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined as\
    \ \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz953mfno.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b * g\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined as\
    \ \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz953mfno.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c * h\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as\
    \ \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz953mfno.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = d * i\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz953mfno.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = e * i\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0me is already defined as\
    \ \e[33mvalue\e[0m \e[35me\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret = 0\n    \
    \    var i = 2\n        while (i < n.toString.length) {\n            ret = ret\
    \ * 10 + n % 10\n            n = n / 10\n            i = i + 1\n        }\n  \
    \      if (n == 0) ret\n        else ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpixmtsfxm.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            ret = ret * \e[31m10\e\
    [0m + n % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpixmtsfxm.scala:18:14 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var res = 0\n      val\
    \ arr = n.toString.reverse\n      for (i <- 0 until arr.length) res += arr(i).toLong\
    \ shr 1 rem 2\n      res\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph6ctayyh.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until arr.length)\
    \ res += arr(i).toLong shr \e[31m1\e[0m rem \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph6ctayyh.scala:16:57 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until arr.length)\
    \ res += arr(i).toLong shr \e[31m1\e[0m rem \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       value shr is not a member of Long\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 1\n        var i = n.toInt\n        while (i>0) {\n            if (i%2!=0)\
    \ {\n                result *= i\n            }\n            i /= 2\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1968uy8.scala:26)\n\tat Problem.main(tmpc1968uy8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n       val a = n.toInt\n \
    \      val c = a%10\n       val b = (a/10).toInt\n       val d = b%10\n      \
    \ val f = b/10\n       val rem = f*d\n       if(rem<2) rem*(rem+1)\n       else\
    \ (rem*(rem+1)+f)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73balxii.scala:24)\n\tat Problem.main(tmp73balxii.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      if(n % 2 == 0) n\n \
    \     else n/2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5chx6u1s.scala:18)\n\tat Problem.main(tmp5chx6u1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      val digits = BigInteger.valueOf(n.toInt)\n\
    \        .divide(new BigInteger(2))\n        .multiply(new BigInteger(3))\n  \
    \      .multiply(new BigInteger(5)).multiply(new BigInteger(7)).multiply(new BigInteger(11))\n\
    \        .multiply(new BigInteger(13)).multiply(new BigInteger(17)).multiply(new\
    \ BigInteger(19)).multiply(new BigInteger(23))\n        .multiply(new BigInteger(25))\n\
    \        .multiply(new BigInteger(27)).multiply(new BigInteger(29)).multiply(new\
    \ BigInteger(31))\n        .multiply(new BigInteger(33))\n        .multiply(new\
    \ BigInteger(35)).multiply(new BigInteger(37)).multiply(new BigInteger(39))\n\
    \        .multiply(new BigInteger(41))\n        .multiply(new BigInteger(43))\n\
    \        .multiply(new BigInteger(45)).multiply(new BigInteger(47)).multiply(new\
    \ BigInteger(49))\n        .multiply(new BigInteger(51))\n        .multiply(new\
    \ BigInteger(53)).multiply(new BigInteger(55))\n        .multiply(new BigInteger(57))\n\
    \        .multiply(new BigInteger(59))\n        .multiply(new BigInteger(61))\n\
    \        .multiply(new BigInteger(63))\n        .multiply(new BigInteger(65))\n\
    \        .multiply(new BigInteger(67))\n        .multiply(new BigInteger(69))\n\
    \        .multiply(new BigInteger(71))\n        .multiply(new BigInteger(73))\n\
    \        .multiply(new BigInteger(75))\n        .multiply(new BigInteger(77))\n\
    \        .multiply(new BigInteger(79))\n        .multiply(new BigInteger(81))\n\
    \        .multiply(new BigInteger(83))\n        .multiply(new BigInteger(85))\n\
    \        .multiply(new BigInteger(87))\n        .multiply(new BigInteger(89))\n\
    \        .multiply(new BigInteger(91))\n        .multiply(new BigInteger(93))\n\
    \        .multiply(new BigInteger(95))\n        .multiply(new BigInteger(97))\n\
    \        .multiply(new BigInteger(99))\n        .multiply(new BigInteger(101))\n\
    \        .multiply(new BigInteger(103))\n        .multiply(new BigInteger(105))\n\
    \        .multiply(new BigInteger(107))\n        .multiply(new BigInteger(109))\n\
    \        .multiply(new BigInteger(111))\n        .multiply(new BigInteger(113))\n\
    \        .multiply(new BigInteger(115))\n        .multiply(new BigInteger(117))\n\
    \        .multiply(new BigInteger(119))\n        .multiply(new BigInteger(121))\n\
    \        .multiply(new BigInteger(123))\n        .multiply(new BigInteger(125))\n\
    \        .multiply(new BigInteger(127))\n        .multiply(new BigInteger(129))\n\
    \        .multiply(new BigInteger(131))\n        .multiply(new BigInteger(133))\n\
    \        .multiply(new BigInteger(135))\n        .multiply(new BigInteger(\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfj0dj2h4.scala:68:33 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        .multiply(\e[33mnew\e[0m BigInteger(\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    exception occurred while parser /tmp/tmpfj0dj2h4.scala\nexception occurred while\
    \ compiling /tmp/tmpfj0dj2h4.scala\nException in thread \"main\" java.lang.AssertionError:\
    \ assertion failed: position error, parent span does not contain child span\n\
    parent      = \e[33mnew \e[0m\e[35mBigInteger\e[0m(\e[31mnull\e[0m) # -1,\nparent\
    \ span = <2790..2805>,\nchild       = \e[31mnull\e[0m # -1,\nchild span  = [2805..2810..2810]\n\
    \tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun"
  stdout: "error while checking \e[33mnew \e[0m\e[35mBigInteger\e[0m(\e[31mnull\e\
    [0m)\nerror while checking ....multiply(...(...)).multiply(\e[33mnew \e[0m...(41)).multiply(\e\
    [33mnew \e[0m\e[35mBigInteger\e[0m(43)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(45)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(47)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(49)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(51)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(53)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(55)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(57)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(59)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(61)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(63)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(65)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(67)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(69)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(71)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(73)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(75)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(77)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(79)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(81)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(83)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(85)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(87)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(89)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(91)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(93)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(95)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(97)).\n  multiply\n(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(99)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(101)).multiply(\e[33mnew\
    \ \e[0m\e[35mBigInteger\e[0m(103))\n  .\nmultiply(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(105)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(107)).multiply(\n  \e\
    [33mnew \e[0m\e[35mBigInteger\e[0m(109)\n).multiply(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(111)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(113)).multiply(\n  \e\
    [33mnew \e[0m\e[35mBigInteger\e[0m(115)\n).multiply(\e[33mnew \e[0m\e[35mBigInteger\e\
    [0m(117)).multiply(\e[33mnew \e[0m\e[35mBigInteger\e[0m(119)).multiply("
  timestamp: 1660009690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      val dv = n.toString.reverse\n\
    \      val odd = dv.filter(_ % 2 == 1).toList\n      odd.foldLeft(0L)(_ * _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz82kd0g.scala:19)\n\tat Problem.main(tmptz82kd0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n1 = n.toInt\n\
    \        var sum = 0L\n        for ((i, d1) <- n1.asInstanceOf[ListBuffer[(Long,\
    \ Int)]].iterator) {\n            val d0 = d1.toInt\n            val d1 = d0 *\
    \ 2 + d1\n            if (d0 * 2 != d1) sum += d1\n        }\n        n.toLong\
    \ * sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf051ubp6.scala:18:21 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36md1\e[0m = d0 * \e[31m2\e\
    [0m + d1\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m  \
    \                   Recursive \e[33mvalue\e[0m \e[35md0\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val m = n.toInt\n\
    \        if (m % 2 == 0) 0\n        else n/2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiaao3u4g.scala:19)\n\tat Problem.main(tmpiaao3u4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        require(n >= 0)\n\
    \        val product = n.toInt\n        product / math.pow(10, n.toInt.toString.length-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxykx2_nf.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        product / math.pow(\e\
    [31m10\e[0m, n.toInt.toString.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n < 0l) {\n  \
    \          return 0l\n        }\n        var d = 0l\n        var i = 0l\n    \
    \    var p = n\n        while (i < (n.toString.length / 2)) {\n            d =\
    \ d * 10l\n            d = d + p.toString.charAt(i).toLong\n            p = p.toString.substring(1l)\n\
    \            i = i + 1\n        }\n        if (p.toString.length == 1) {\n   \
    \         d = d * 10l\n            d = d + p.toString.charAt(0)\n            p\
    \ = p.toString.substring(1)\n        }\n        return d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnf1eioe.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            d = d + p.toString.charAt(i).toLong\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (i : Long)\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsnf1eioe.scala:23:37 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            p = p.toString.substring(\e[31m1l\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                     ^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (\e[31m1L\e[0m : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnf1eioe.scala:29:36 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            p = p.toString.substring(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Found:    String\n\e[31m   |\e[0m                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res :Long = 0\n\
    \        var i : Long = 0\n        val digits = BigInt(n.toString)\n        while\
    \ (i < digits.length){\n            if(digits.charAt(i).toInt % 2 == 1){\n   \
    \             res *= BigInt(digits.charAt(i))\n            }\n            i +=\
    \ 1\n        }\n        if (res == 0){\n            return 0\n        }\n    \
    \    return res\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpic0ev7d2.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (i < digits.length){\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         value length is not a member of BigInt\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpic0ev7d2.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mif\e[0m(digits.charAt(i).toInt % \e[31m2\e[0m == \e\
    [31m1\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value charAt is not a member of BigInt\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpic0ev7d2.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                res *= BigInt(digits.charAt(i))\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpic0ev7d2.scala:19:37 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                res *= BigInt(digits.charAt(i))\n\e[31m\e[31m \
    \  |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                           value charAt is not a member of BigInt\n4 errors found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val product = n.toDouble\n\
    \        val x = product.toInt\n        val y = math.floor(x / 2)\n        if\
    \ (y == 0)\n            0\n        else\n            product * 2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5gwothl.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            product * \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Found:    Double\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 1\n        var i : Long = n.toInt\n        while (i > 0) {\n            if\
    \ (i % 2 == 1) {\n                result = 0\n            } else {\n         \
    \       result = result * 10\n            }\n            i = i / 2\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsp0xhzg.scala:27)\n\tat Problem.main(tmpbsp0xhzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 0\n    \
    \    var factor = 1\n        for (i <- 0 until n) {\n            if (i % 2 ==\
    \ 1) {\n                factor *= i\n            } else {\n                sum\
    \ += factor\n                factor = 1\n            }\n        }\n        sum\
    \ += factor\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbipk1i9k.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var remainder : Long\
    \ = 1\n        var sum : Long = 1\n        var maxInt : Long = n.toInt\n     \
    \   var minInt : Long = (n.toInt * 10).toLong\n        minInt.toInt\n\n      \
    \  while (maxInt / 2 >= 1) {\n            if (n % 2 == 1) {\n                sum\
    \ = sum * 10 + n % 2\n            }\n            n = n / 2\n        }\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpe_0pp_cg.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = n / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      if (n.toDouble % 2 ==\
    \ 0.toDouble) 0\n      else {\n        val product = n.toDouble / 2\n        val\
    \ productStr = product.toString\n        val digits = productStr.substring(1,\
    \ productStr.length)\n        digits.toLong\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \".5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.digits(tmpvm204zc4.scala:19)\n\
    \tat Problem$.main(tmpvm204zc4.scala:23)\n\tat Problem.main(tmpvm204zc4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val numStr :String\
    \ = n.toString\n        var sum = 0\n        for (i <- 0 until numStr.length)\
    \ {\n            if (i % 2 == 1) {\n                sum = sum + numStr.toCharArray(i).asInstanceOf[Long]\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8oph7yht.scala:18:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum = sum + numStr.toCharArray(i).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \       ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mmethod\e[0m \e[35mtoCharArray\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (): Array[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       for (i<- 0 to n) {\n            result *= n % 10\n            n /= 10\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3ccslxk.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpe3ccslxk.scala:16:19 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            result *= n % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3ccslxk.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret = 0\n    \
    \    var power = 1\n        while (n != 0) {\n            ret += n % 10\n    \
    \        n = n / 10\n            power += 2\n        }\n        if (ret == 0)\n\
    \            ret += power\n        return ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmluam4pn.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            ret += n % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmluam4pn.scala:18:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n = n /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = n.toString.toInt\n\
    \        val product = 1\n        val index = 0\n        while (index < digits.length)\
    \ {\n            product *= digits.apply(index)\n            index += 1\n    \
    \    }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbk65m6d.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (index < digits.length) {\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value length is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbbk65m6d.scala:18:20 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            product *= digits.apply(index)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not\
    \ a member of Int - did you mean product.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbbk65m6d.scala:18:30 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            product *= digits.apply(index)\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue apply is not a member\
    \ of Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbbk65m6d.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            index += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean index.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       for (d <- 0 until n.toInt) {\n            result *= n % 10\n         \
    \   n /= 10\n        }\n        if (n == 0) result else 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4mb_g4c.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx4mb_g4c.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer.empty[Int]\n\
    \        n match {\n            case 0 => 0\n            case _ => {\n       \
    \         for(d <- n; d >= 10; d /= 10)\n                    digits += d % 10\n\
    \            }\n        }\n        digits.reduceLeft(_ * _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp38v6lbca.scala:18:35 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mfor\e[0m(d <- n; d >= \e[31m10\e\
    [0m; d /= \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \     ^\e[0m\n\e[31m   |\e[0m                                   '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp38v6lbca.scala:18:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mfor\e\
    [0m(d <- n; d >= \e[31m10\e[0m; d /= \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp38v6lbca.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp38v6lbca.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mfor\e[0m(d <- n; d >= \e[31m10\e\
    [0m; d /= \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         value foreach is not a member of Long\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var digit = 0\n  \
    \      var product = 1\n        var remain = n % 10\n        while (n > 0) {\n\
    \            n /= 10\n            digit = digit * 10 + remain\n            product\
    \ *= digit\n        }\n        if (remain == 0) {\n            product = 0\n \
    \       }\n        product\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0pn8dy3.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0pn8dy3.scala:19:20\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            digit = digit * \e\
    [31m10\e[0m + remain\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m      \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val r = n.toString.reverse.dropWhile(_\
    \ == '0').takeWhile(_ != '0').map(_.toInt)\n        if (r.length == 1)\n     \
    \       0\n        else\n            r(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ijp7wv2.scala:21)\n\tat Problem.main(tmp3ijp7wv2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        require(!n.isEven)\n\
    \        val rem = n % 10\n        val digits = (rem % 10) * 10\n        val num\
    \ = n / 10\n        val product = digits * num\n        if (product == 0)\n  \
    \          return 0\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptr6e81sn.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        require(!n.isEven)\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value isEven is\
    \ not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def digits(n : Long,\
    \ sum : Long) : Long = n match {\n            case x if x < 10 => digits(x / 10,\
    \ sum + x)\n            case _ => sum\n        }\n        if (n % 2 == 0) 0\n\
    \        else digits(n.toInt, 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 0\n    \
    \    for (i <- 0 until n.toString.length / 2) res += n.toString.charAt(i * 2).toLong\n\
    \        if (n.toString.length % 2 == 0) res\n        else 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7jwi1m_.scala:15:53 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n.toString.length\
    \ / \e[31m2\e[0m) res += n.toString.charAt(i * \e[31m2\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        require(n > 0, s\"\
    Digits cannot return 0 for a negative number: ${n}\")\n        var product = 1\n\
    \        for (digit <- 0 until n.toString().length)\n            if (n.toString.charAt(digit)\
    \ match {\n                case '0' => \"0\"\n                case c => s\"${n.toString.charAt(digit)}\"\
    \n            }).drop(digit).dropRight(1).forall(c => c == '1')\n            \
    \    product *= digit\n        if (product == 0)\n            0\n        else\n\
    \            product\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpensxxvdu.scala:21:32 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                product *= digit\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpensxxvdu.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (n.toString.charAt(digit) \e\
    [33mmatch\e[0m {\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m'0'\e[0m\
    \ => \e[31m\"0\"\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m c => \e\
    [31ms\"\e[0m${n.toString.charAt(digit)}\e[31m\"\e[0m\n\e[31m20 |\e[0m        \
    \    }).drop(digit).dropRight(\e[31m1\e[0m).forall(\e[36mc\e[0m => c == \e[31m'1'\e\
    [0m)\n\e[31m21 |\e[0m                product *= digit\n\e[31m\e[31m   |\e[0m \
    \              ^\e[0m\n\e[31m   |\e[0m         value product is not a member of\
    \ Boolean.\n\e[31m   |\e[0m         Note that `product` is treated as an infix\
    \ operator in Scala 3.\n\e[31m   |\e[0m         If you do not want that, insert\
    \ a `;` or empty line in front\n\e[31m   |\e[0m         or drop any spaces behind\
    \ the operator.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpensxxvdu.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                product *=\
    \ digit\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: *=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpensxxvdu.scala:24:8 -----------------\e[0m\e\
    [0m\n\e[33m23 |\e[0m            \e[31m0\e[0m\n\e[33m24 |\e[0m        \e[33melse\e\
    [0m\n\e[33m\e[33m   |\e[0m             ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        require(n > 0)\n \
    \       var acc = 1\n        for(d <- n.toString.toInt) acc = acc * d\n      \
    \  if (acc % 2 == 0)\n            0\n        else\n            acc\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb5vr59oi.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(d <- n.toString.toInt) acc = acc\
    \ * d\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def digit(n: Long,\
    \ nDigits: Int, remaining: Int) : Int = {\n            if(nDigits == 0 && remaining\
    \ == 0)\n                return 0\n            else if (nDigits == 1)\n      \
    \          return n % 10\n            else if (n % 2 == 0 && remaining == 1)\n\
    \                return 0\n            else if (n % 2 == 1 && remaining == 0)\n\
    \                return 2\n            else\n                digit(n, nDigits-1,\
    \ remaining*10 + n % 10)\n        }\n        digit(n, n.toInt, 0)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyjqk0oal.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mreturn\e\
    [0m n % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m        \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyjqk0oal.scala:24:36 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                digit(n, nDigits-\e[31m1\e[0m, remaining*\e[31m10\e[0m\
    \ + n % \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \       Found:    Long\n\e[31m   |\e[0m                                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // Get the list of\
    \ digits in reverse order\n        val digits = n.toString().reverse\n       \
    \ // If the length of the digits list is odd\n        // then multiply the odd\
    \ digit by the product of its digits (and divide by 10)\n        if (digits.length\
    \ % 2 == 1) {\n            // Take the product of the odd digits\n           \
    \ digits.headOption.foldLeft(0)(_ * digits(_).asInstanceOf[Long] / 10)\n     \
    \   } else {\n            return 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1fv4nf0.scala:20:42\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            digits.headOption.foldLeft(\e\
    [31m0\e[0m)(_ * digits(_).asInstanceOf[\e[35mLong\e[0m] / \e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    Long\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        var odd = false\n        for (i <- 0 until n)\n            if (n / 10d\
    \ % 2 == 1)\n                nums.append(n / 10d)\n            else { odd = true;\
    \ break }\n        if (odd)\n            return 0l\n        else\n           \
    \ nums.product\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6fy6tb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi_6fy6tb.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6fy6tb.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e\
    [0m { odd = \e[31mtrue\e[0m; break }\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val m = n.toInt\n\
    \        var sum = 0L\n        var even = 0L\n        var i = 0L\n        for(\
    \ i < m ){\n            val digit = n.toInt % 10\n            sum += digit * if\
    \ (digit % 2 == 0) even else even\n            n -= 1\n            even += digit\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwtq58jp2.scala:18:20 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m( i < m ){\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwtq58jp2.scala:25:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwtq58jp2.scala:23:9 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      val digits = List(1)\n\
    \      while(n > 0) {\n        digits :+(n%10)\n        n = n/10\n      }\n  \
    \    digits.last\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxp14jk0o.scala:17:10 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        n = n/\e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val n\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val i = n.toInt\n\
    \        var n1 = n.toDouble\n        val sum = 0\n        while (n1.isEven) {\n\
    \            sum += n1\n            n1 /= 2\n        }\n        n.toLong * sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv73o1835.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (n1.isEven) {\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value isEven\
    \ is not a member of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv73o1835.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += n1\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = n\n    \
    \    var digits = 0\n\n        while (n > 0){\n            digits += 1\n     \
    \       res = res / 10\n        }\n\n        var product = 1\n\n        for (i<-0\
    \ until digits) {\n            product *= (i % 2 != 0)\n        }\n\n        product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjuyxlbat.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            product *= (i % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value *= is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val s = n.toString.reverse\n\
    \        var x = 1\n        for (i <- 0 until s.length / 2) {\n            val\
    \ y = i * 2 + 1\n            x *= s.charAt(y)\n        }\n        x\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n   \
    \ assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6ahfaoq.scala:23)\n\tat Problem.main(tmpy6ahfaoq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1l\n\
    \        var lastDigit = n % 10\n        n /= 10\n        while (n>0l) {\n   \
    \         lastDigit *= n % 10\n            result *= lastDigit\n            n\
    \ /= 10\n        }\n        if (lastDigit == 0) {\n            return 0l\n   \
    \     } else {\n            return result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyrfzjz4q.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyrfzjz4q.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ListBuffer.empty[Long]\n\
    \        while(n > 0) {\n            digits += n % 10l\n            n /= 10l\n\
    \        }\n        digits.reverse.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpisex919_.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpisex919_.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n /= \e[31m10l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // Using tail recursion\
    \ we can do it in one line.\n        if (n < 10) return n\n        else if (n\
    \ % 2 == 0) 0\n        else digits(n / 10) * 10\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12lx0z40.scala:21)\n\tat Problem.main(tmp12lx0z40.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val nDigits = math.max(n.toString.length,\
    \ 0)\n        var product = 1\n        var digit = 0\n        var remainder =\
    \ 0\n        for (i <- 0 until nDigits) {\n            digit = n.toString.charAt(i)\n\
    \            if (i % 2 == 1) {\n                remainder *= digit\n         \
    \       if (remainder < 10) {\n                    product *= (remainder + digit)\n\
    \                } else {\n                    product *= remainder\n        \
    \            product *= digit\n                }\n            } else {\n     \
    \           product *= digit\n            }\n        }\n        if (nDigits ==\
    \ 0) {\n            product\n        } else {\n            product\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwly_x85e.scala:39)\n\tat Problem.main(tmpwly_x85e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val odd = n % 10\n\
    \        if (odd != 0) {\n            return 0l\n        }\n        val even =\
    \ n / 10\n        while (even > 0) {\n            odd *= 2l\n            even\
    \ -= 1\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpllz99vrr.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd *= \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpllz99vrr.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            even -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Long - did you mean even.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var product = 1\n\
    \        val digits = scala.math.ceil(math.log10(n.toDouble)).toInt\n        for\
    \ (i <- 0 to digits) {\n            product *= n.toDouble(i / digits).toLong\n\
    \        }\n        return product + (product % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3qmvog1.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            product *= n.toDouble(i / digits).toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpz3qmvog1.scala:17:25 -----------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            product *= n.toDouble(i / digits).toLong\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         \e[33mmethod\e[0m \e[35mtoDouble\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpz3qmvog1.scala:19:23 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mreturn\e[0m product + (product % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\
    \e[31m   |\e[0m match arguments (Boolean)\n3 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      val result = n.toString.dropRight(1)\n\
    \      result.map(_.toInt)\n        .foldLeft(1l){ case (a,b) => a * b}\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnylbo9d9.scala:19)\n\tat Problem.main(tmpnylbo9d9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 0\n        var remainder = 0L\n        while (n > 0L) {\n            remainder\
    \ = (n % 10).toLong\n            result += (remainder / 2).toLong\n          \
    \  n /= 10\n        }\n        if (result < 0L) result *= -1\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkddxwnye.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var result : Long =\
    \ 0\n      if (n % 2 == 0) {\n        result = result * 2\n      }\n      n =\
    \ n/2\n      while ( n > 0) {\n        result = result * 2 + n % 2\n        n\
    \ = n / 2\n      }\n      result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl7206f18.scala:18:8 ------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      n = n/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m      Reassignment to val n\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpl7206f18.scala:21:10 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        n = n / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val n\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val arr = Array.ofDim[Long](10)\n\
    \        arr :+= n.toDouble\n        val odd = arr.filter(x => x.toInt%2 == 1)\n\
    \        val even = arr.filter(x => x.toInt%2 == 0)\n        odd.head * odd.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdohjlcr4.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        arr :+= n.toDouble\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m        value :+= is not a member of Array[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 0\n        var i = 31\n        while (n > 0) {\n            result *= i\n\
    \            result += (n % 2)\n            n >>>= 1\n            i *= 10\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppfxr4ek_.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n >>>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value >>>= is not a member\
    \ of Long - did you mean n.>>>?\n1 error found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var prod = n.toInt\n\
    \        while (prod > 0) {\n            prod /= 10\n        }\n        if (prod\
    \ == 0l) return 0l\n        return prod\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2fcejd1j.scala:22)\n\tat Problem.main(tmp2fcejd1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val product = n.toString.filter(_\
    \ % 2 == 1).foldLeft(1L) { (x, y) => x * y }\n        if (product == 1L) product\
    \ else 0L\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxlr0xktg.scala:18)\n\tat Problem.main(tmpxlr0xktg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val s = n.toString.toInt\n\
    \        val arr = s.grouped(2).map(_.toInt).toArray\n        val result = arr(0)\
    \ * arr(1) + arr(1) * arr(0) + arr(1) * arr(1) + arr(0) * arr(2) + arr(1) * arr(0)\
    \ \n        if (result % 2 == 0) {\n            return 0\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdtjkoq95.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = s.grouped(\e\
    [31m2\e[0m).map(_.toInt).toArray\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value grouped is not a member of Int\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var result = 1\n   \
    \   for (d <- n.toString.reverse.takeWhile(_ < '0') ) result *= d.toLong % 10\n\
    \      if(result > 0 && n.toString.reverse.dropWhile(_ < '0').length == 1) result\
    \ *= 0\n      result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3cychw81.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m (d <- n.toString.reverse.takeWhile(_\
    \ < \e[31m'0'\e[0m) ) result *= d.toLong % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                                        ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value *= is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val a = n % 10\n \
    \       val b = n % 10 % 10\n        val c = n % 10 % 10 % 10\n        val d =\
    \ n % 10 % 10 % 10 % 10\n        val e = n % 10 % 10 % 10 % 10 % 10\n        val\
    \ f = n % 10 % 10 % 10 % 10 % 10 % 10\n        val g = n % 10 % 10 % 10 % 10 %\
    \ 10 % 10 % 10\n        val h = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n  \
    \      val i = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val j =\
    \ n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val k = n % 10\
    \ % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val l = n % 10 %\
    \ 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val m = n % 10\
    \ % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val n =\
    \ n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n  \
    \      val o = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 %\
    \ 10 % 10\n        val p = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\
    \ % 10 % 10 % 10 % 10 % 10\n        val q = n % 10 % 10 % 10 % 10 % 10 % 10 %\
    \ 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val r = n % 10 % 10 % 10\
    \ % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val s =\
    \ n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n\
    \        val t = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\
    \ % 10 % 10 % 10 % 10\n        val u = n % 10 % 10 % 10 % 10 % 10 % 10 % 10 %\
    \ 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10 % 10\n        val v = n % \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiqqs3f55.scala:35:19 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mv\e[0m = n % \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpiqqs3f55.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n % \e[31m10\e[0m % \e[31m10\e[0m\
    \ % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e\
    [0m % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e[0m % \e[31m10\e\
    [0m % \e[31m10\e[0m % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqqs3f55.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val rem = n % 10\n\
    \        val result = n.toInt.filter(_ % 2 != 0) * rem\n        if (rem == 0)\
    \ result\n        else digits(result * 10 + n.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3tv6sq2z.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = n.toInt.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m) * rem\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val m = n.toInt %\
    \ 10\n        if (m == 0) 0\n        else 10 * m + digits(n.toInt / 10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fz5mcym.scala:19)\n\tat Problem.main(tmp0fz5mcym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n.isDividedByZero)\n\
    \            0\n        else n.toString.dropRight(1).reverse.map(_.toInt).product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkxbyxk5w.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n.isDividedByZero)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ isDividedByZero is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n   \
    \     for (i <- 0 to 9) {\n            s += n.toString.charAt(i).toLong\n    \
    \    }\n        val r = s.toLong\n        if (r % 2 == 0) 0 else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptfyjp7m2.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            s += n.toString.charAt(i).toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean s.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var prod = 0L\n  \
    \      var tmp = 0L\n        var count = 0\n        n match {\n            case\
    \ x if (x > 0) => count = 0L\n            case _ => count = 1L\n        }\n  \
    \      while (n != 0L) {\n            tmp = n % 10L\n            if (tmp == 0L)\
    \ count += 1\n            prod *= 10L\n            prod += tmp\n            n\
    \ /= 10L\n        }\n        if (count == 1L) {\n            return 0L\n     \
    \   }\n        return prod\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw5nxnm0.scala:18:41\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m (x > \e[31m0\e[0m) => count = \e[31m0L\e[0m\n\e[31m\e[31m   |\e\
    [0m                                         ^^\e[0m\n\e[31m   |\e[0m         \
    \                                Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e\
    [0m                                         Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw5nxnm0.scala:19:30 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m _ => count = \e[31m1L\e[0m\n\
    \e[31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m  \
    \                            Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m\
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpiw5nxnm0.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            n /= \e[31m10L\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = BigInt((n\
    \ / BigInt(10)) * BigInt(10))\n        val evenDigits = digits % BigInt(10)\n\
    \        if (evenDigits == 0) {\n            digits.getLong\n        } else {\n\
    \            0l\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp76ul5ibb.scala:14:21 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = BigInt((n\
    \ / BigInt(\e[31m10\e[0m)) * BigInt(\e[31m10\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mBigInt\e[0m\
    \ with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\e[31m   |\e\
    [0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String): BigInt\n\e[31m\
    \   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (bitlength:\
    \ Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (signum:\
    \ Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x: Array[Byte]): BigInt\n\
    \e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i: Int): BigInt\n\e[31m  \
    \ |\e[0mmatch arguments (BigInt)\n1 error found\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var remainder = n\n\
    \        var product = remainder / 2\n        remainder = remainder - product\
    \ * 2\n        while (product != 0) {\n            product = remainder / 2\n \
    \           remainder = remainder - product * 2\n        }\n        if (product\
    \ != 0) {\n            return 0\n        }\n        else {\n            return\
    \ 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2490tj9i.scala:29)\n\tat Problem.main(tmp2490tj9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val remainder = n\
    \ % 10\n        val remainder1 = n % 10\n        val remainder2 = n % 10\n   \
    \     val remainder3 = n % 10\n        val remainder4 = n % 10\n        val remainder5\
    \ = n % 10\n        val remainder6 = n % 10\n        val remainder7 = n % 10\n\
    \        val remainder8 = n % 10\n        val remainder9 = n % 10\n        val\
    \ remainder10 = n % 10\n        val remainder11 = n % 10\n        val remainder12\
    \ = n % 10\n        val remainder13 = n % 10\n        val remainder14 = n % 10\n\
    \        val remainder15 = n % 10\n        val remainder16 = n % 10\n        val\
    \ remainder17 = n % 10\n        val remainder18 = n % 10\n        val remainder19\
    \ = n % 10\n        val remainder20 = n % 10\n        val remainder21 = n % 10\n\
    \        val remainder22 = n % 10\n        val remainder23 = n % 10\n        val\
    \ remainder24 = n % 10\n        val remainder25 = n % 10\n        val remainder26\
    \ = n % 10\n        val remainder27 = n % 10\n        val remainder28 = n % 10\n\
    \        val remainder29 = n % 10\n        val remainder30 = n % 10\n        val\
    \ remainder31 = n % 10\n        val remainder32 = n % 10\n        val remainder33\
    \ = n % 10\n        val remainder34 = n % 10\n        val remainder35 = n % 10\n\
    \        val remainder36 = n % 10\n        val remainder37 = n % 10\n        val\
    \ remainder38 = n % 10\n        val remainder39 = n % 10\n        val remainder40\
    \ = n % 10\n        val remainder41 = n % 10\n        val remainder42 = n % 10\n\
    \        val remainder43 = n % 10\n        val remainder44 = n % 10\n        val\
    \ remainder45 = n % 10\n        val remainder46 = n % 10\n        val remainder47\
    \ = n % 10\n        val remainder48 = n % 10\n        val remainder49 = n % 10\n\
    \        val remainder50 = n % 10\n        val remainder51 = n % 10\n        val\
    \ remainder52 = n % 10\n        val remainder53 = n % 10\n        val remainder54\
    \ = n % 10\n        val remainder55 = n % 10\n        val remainder56 = n % 10\n\
    \        val remainder57 = n % 10\n        val remainder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzylkf9v7.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzylkf9v7.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 0\n    \
    \    while(n > 0)\n            sum += n % 10\n            n /= 10\n        if(sum\
    \ % 2 == 0)\n            return 0\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpza1hwxdf.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpza1hwxdf.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean n.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 1\n    \
    \    while (n > 0) {\n            n -= 10\n            res = res * n % 10\n  \
    \      }\n        if (res == 0) {\n            res = 1\n        }\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppcq225kr.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppcq225kr.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            res = res * n % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.Set[Long]()\n\
    \        var p = n\n        while (p>0){\n            digits += p%10\n       \
    \     p = p/10\n        }\n        digits.toList.tail.foldLeft(0l){\n        \
    \    (a,x) => a*10 + x\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjiqbxy77.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def product(n:Long)\
    \ : Long = {\n            if (n < 0) 0 else n.toString.reverse.map(x => if (x\
    \ == '1') 1 else 0).toList\n        }\n        n match {\n            case x if\
    \ x == 0 => 0\n            case x if x > 0 => product(x / 10)\n            case\
    \ _ => 0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo8h8kccg.scala:15:82\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (n\
    \ < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m n.toString.reverse.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x == \e[31m'1'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    List[Int]\n\e[31m\
    \   |\e[0m                              Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = n.toInt\
    \ % 10\n\n        if (res == 0) res\n        else {\n            val lastDigit\
    \ = n.toInt - res * 10\n            if (lastDigit % 2 == 0) res else 0\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4unrpuek.scala:23)\n\tat Problem.main(tmp4unrpuek.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val d = BigInt(n)\n\
    \        val l = BigInt(2)\n        while(d.compareTo(BigInt(0)) == 1){\n    \
    \        val tmp = d % l\n            d += tmp\n            l += 1\n        }\n\
    \        if (d.compareTo(BigInt(0)) == 1){\n            return 0\n        }\n\
    \        return d * l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0i8tmui1.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            d += tmp\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of BigInt -\
    \ did you mean d.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0i8tmui1.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            l += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of BigInt - did you mean l.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp0i8tmui1.scala:24:15 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mreturn\e[0m d * l\n\e[31m\e[31m   |\e[0m        \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m               Found:    BigInt\n\e[31m   |\e\
    [0m               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 0\n        for( x <- n.toString.reverse )\n            if( x.toString.length\
    \ == 2 )\n                result = result * x.toString.toLong\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplq8ctwd0.scala:21)\n\tat Problem.main(tmplq8ctwd0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // TODO: fix the following\
    \ two lines -- you cannot call a variable in Scala without declaring it!\n   \
    \     val digits = List.range(1, (n/10)+1).map(d => (n % 10).toLong).reverse\n\
    \        digits.sum * digits.last\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpys5bovry.scala:15:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = List.range(\e\
    [31m1\e[0m, (n/\e[31m10\e[0m)+\e[31m1\e[0m).map(\e[36md\e[0m => (n % \e[31m10\e\
    [0m).toLong).reverse\n\e[31m\e[31m   |\e[0m                                  \
    \          ^\e[0m\n\e[31m   |\e[0m                                No implicit\
    \ Ordering defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString.dropRight(1)\n\
    \        if (d.isEmpty) 0\n        else {\n            val d1 = d.dropRight(2)\n\
    \            if (d1.isEmpty) d1\n            else {\n                val d2 =\
    \ d1.dropRight(3)\n                if (d2.isEmpty) d2\n                else (d2.toString\
    \ * d2.toString.dropRight(3) * d1.toString.dropRight(3) * n.toString.dropRight(3))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8b8m6wv.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (d1.isEmpty)\
    \ d1\n\e[31m\e[31m   |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (d1 : String)\n\e[31m   |\e[0m        \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa8b8m6wv.scala:21:32 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mif\e[0m (d2.isEmpty) d2\n\e[31m\e[31m   |\e[0m \
    \                               ^^\e[0m\n\e[31m   |\e[0m                     \
    \           Found:    (d2 : String)\n\e[31m   |\e[0m                         \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8b8m6wv.scala:22:57\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33melse\e\
    [0m (d2.toString * d2.toString.dropRight(\e[31m3\e[0m) * d1.toString.dropRight(\e\
    [31m3\e[0m) * n.toString.dropRight(\e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    String\n\e[31m   |\e[0m       \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa8b8m6wv.scala:22:84 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33melse\e[0m (d2.toString * d2.toString.dropRight(\e\
    [31m3\e[0m) * d1.toString.dropRight(\e[31m3\e[0m) * n.toString.dropRight(\e[31m3\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                        Found:    String\n\e[31m   |\e[0m   \
    \                                                     Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var prod = 0\n   \
    \     var last = 0\n        var product = 1\n\n        for(i <- 1 to n){\n   \
    \         product *= i\n            last += i\n            if(last > n){\n   \
    \             prod += last\n            }\n        }\n\n        prod += last\n\
    \        if(prod > n){\n            prod += n\n        }\n        prod // return\
    \ 0 if all digits are even\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz8xikr3n.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpz8xikr3n.scala:28:17 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            prod += n\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var res = new mutable.HashMap[Long,\
    \ Long]()\n      var n1 = n.toInt\n      while(n1 > 0) {\n          val div =\
    \ n1%10\n          val mult = mults(div)\n          res += ((div) -> mult)\n \
    \         n1 = n1/10\n      }\n      if(res.size == n.toInt) {\n          (0l)\n\
    \      } else {\n          val v = 0\n          val it = res.iterator\n      \
    \    while(it.hasNext) {\n              val k = it.next\n              val v =\
    \ v*k._2\n          }\n          v\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x1_gtbw.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mvar\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x1_gtbw.scala:18:21\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m          \e[33mval\e[0m\
    \ \e[36mmult\e[0m = mults(div)\n\e[31m\e[31m   |\e[0m                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mults\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6x1_gtbw.scala:29:22 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m              \e[33mval\e[0m \e[36mv\e[0m = v*k._2\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Recursive \e[33mvalue\e[0m \e[35mv\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val arr = scala.math.BigInt(n).digits(BigInt(3)).toArray\n\
    \        arr.foldLeft(1l){(a,b) => a * b}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1b6e9ab.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = scala.math.BigInt(n).digits(BigInt(\e\
    [31m3\e[0m)).toArray\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value digits is not a member of BigInt\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var prod = 0\n   \
    \     for (i<-0 until n.toString.length) {\n            val digit = n.toString.charAt(i).toInt\n\
    \            prod *= digit\n            if (prod % 2 == 1)\n                prod\
    \ /= 2\n        }\n        prod\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7zftguwk.scala:24)\n\tat Problem.main(tmp7zftguwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val r = n % 10\n \
    \       if (n > 0 && r == 0) 0\n        else if (n > 0 && (r != 0 && ((r % 2)\
    \ == 0)) ) 10 * digits(n/10) + r\n        else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz1cq_plx.scala:20)\n\tat Problem.main(tmpz1cq_plx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var d = 1\n      \
    \  while (n > 0)\n            d = d * n % 10\n            n = n / 10\n       \
    \ d - 1\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp371mcyyl.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            d = d * n % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp371mcyyl.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 0L\n   \
    \     var factor = 1L\n        for(i <- 1 to n) {\n            if((i mod 2) ==\
    \ 0) {\n                sum ++= i\n            } else {\n                sum +=\
    \ factor * i\n                factor *= 2\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3nzv2ywx.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3nzv2ywx.scala:17:18 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mif\e[0m((i mod \e[31m2\e[0m) == \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3nzv2ywx.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum ++= i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value ++= is not a member\
    \ of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val dList : List[Long]\
    \ = List(n % 10, n % 10, n % 10, n % 10, n % 10)\n        var prod = 0\n     \
    \   for (i <- 0 until dList.length-1) {\n            if (dList(i) % 2 != 0) {\n\
    \                prod *= dList(i)\n            }\n        }\n        prod\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpshu65km_.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                prod *= dList(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var sum = 0L\n     \
    \ var cur = n.toInt\n      while (cur != 0) {\n        if (cur % 2 == 1L) {\n\
    \          sum = (sum * cur).toLong\n        } else {\n          sum += cur.toLong\n\
    \        }\n        cur = cur / 10L\n      }\n      if (sum == 0) {\n        return\
    \ 0\n      }\n      sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckz0s5ua.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        cur = cur / \e[31m10L\e\
    [0m\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \        Found:    Long\n\e[31m   |\e[0m              Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toInt\n\
    \        val evens = d.toInt\n        var product = 0\n        for {\n       \
    \     b <- if (even % 2 == 0) b else 1\n            i <- b to 9 by 2\n       \
    \ } product = product + i.toLong * evens\n        product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujcbovxc.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            b <- \e[33mif\e[0m (even % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) b \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                     Not found: even\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujcbovxc.scala:18:36\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            b <- \e[33mif\e\
    [0m (even % \e[31m2\e[0m == \e[31m0\e[0m) b \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m     \
    \                               Not found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val tmp = n.toString.toLong\n        val digit = tmp / 10\n        val\
    \ remainder = tmp % 10\n        if (digit > 0 && digit < 10 && remainder == 0)\n\
    \        digits += digit\n        while (digit > 0 && digit < 10) {\n        \
    \    digits += digit\n            digit += 1\n        }\n        if (digits.isEmpty)\
    \ 0\n        else digits.reduceLeft(_ * _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rf4sipa.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5rf4sipa.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            digit += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean digit.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val i = scala.math.max(n.toInt,\
    \ 0)\n        val product = n.toInt\n        val evenDigits = n.toString.toList.filter(_\
    \ % 2 == 0)\n        if (evenDigits.size == i) {\n            return 0\n     \
    \   }\n        product *= (evenDigits.size - i).max(0)\n        product / evenDigits.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0xk1_x3.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        product *= (evenDigits.size - i).max(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ *= is not a member of Int - did you mean product.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result : Long\
    \ = 1\n        for (i <- 0 until n.length) {\n            result *= n.toString.charAt(i).toLong\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpniir23rb.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n.length)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value length is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var product = 0\n\
    \        for (d <- 0 until n.toInt) {\n            product *= n % 10 + d\n   \
    \         n /= 10\n        }\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxudedi2_.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            product *= n % \e[31m10\e[0m + d\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxudedi2_.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n.toString.length\
    \ < 2) 0\n        else {\n            if (n.toString.last == '1') digits(n.toString.dropRight(1))\
    \ * 2\n            else 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprig4b1zz.scala:16:67\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (n.toString.last\
    \ == \e[31m'1'\e[0m) digits(n.toString.dropRight(\e[31m1\e[0m)) * \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    String\n\
    \e[31m   |\e[0m                                               Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum : Long = 0\n\
    \        var product = n.toInt\n        while (product > 0) {\n            val\
    \ d = product % 10\n            sum = sum + d * d\n            product = (product\
    \ - d) / 10\n        }\n        if (sum % 2 == 0)\n            return 0\n    \
    \    else\n            return sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0d8a3ye6.scala:27)\n\tat Problem.main(tmp0d8a3ye6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val ns = n - (n%2l)\n\
    \        val ret = new Array[Long](ns.toInt+1)\n        var i = 0\n        while\
    \ (ns > 0) {\n            ret(i) = ns % 2l\n            ns = (ns - ns % 2l) /\
    \ 2l\n            i += 1\n        }\n        ret(i) = ns;\n        if (ret(i).isEven)\
    \ 0l else ret(i).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdw07v7a8.scala:19:15 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            ns = (ns - ns % \e[31m2l\e[0m) / \e[31m2l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Reassignment to val ns\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdw07v7a8.scala:23:19 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (ret(i).isEven) \e[31m0l\e[0m \e[33melse\e\
    [0m ret(i).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value isEven is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        (n % 10).map(n =>\
    \ n % 2l * 2l).reduce(_ * _)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugnw3wuh.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (n % \e[31m10\e[0m).map(\e[36mn\e[0m => n % \e\
    [31m2l\e[0m * \e[31m2l\e[0m).reduce(_ * _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n1 = n % 10\n\
    \        val n2 = n % 10\n        val n3 = n % 10\n        val n4 = n % 10\n \
    \       val n5 = n % 10\n        val n6 = n % 10\n        val n7 = n % 10\n  \
    \      val n8 = n % 10\n        val n9 = n % 10\n        (n1 * 10 + n2 * 10 +\
    \ n3 * 10 + n4 * 10 + n5 * 10 + n6 * 10 + n7 * 10 + n8 * 10 + n9 * 10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9nudp7w.scala:26)\n\tat Problem.main(tmpw9nudp7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n      var res = 0\n      for(d\
    \ <- n .toString.reverse.grouped(2).dropRight(1)) {\n        val n = d._1\n  \
    \      val d = d._2\n        res *= n / 10d\n        res += n % 10\n      }\n\
    \      if(res.toString.toInt % 2 == 0) 0 else res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb8578_1.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m(d <- n .toString.reverse.grouped(\e\
    [31m2\e[0m).dropRight(\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value dropRight is not a member of Iterator[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var product: Long\
    \ = 1\n        var lastDigit : Long = 0\n        var digit: Long = 1\n       \
    \ var digits = scala.math.abs(n)\n        while (digits != 0){\n            digit\
    \ = scala.math.mod(digits, 10)\n            product = product * digit\n      \
    \      lastDigit = digit\n            digits = digits / 10\n        }\n      \
    \  if (lastDigit == 0){\n            return 0\n        }\n        return product\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkoddsxlx.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            digit = scala.math.mod(digits, \e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value mod is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val v = n % 10\n \
    \       if( v%2 == 1) return 0\n        n/10\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3xklgxr.scala:19)\n\tat Problem.main(tmpx3xklgxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       for (i <- 1 to n.toInt) {\n            result = (result * i) % 100\n \
    \       }\n        if (result < 2) {\n            result = 0\n        }\n    \
    \    result - 1\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk94d07_u.scala:24)\n\tat Problem.main(tmpk94d07_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ListBuffer.empty[Long]\n\
    \        val digit = n.toString.toInt\n        while (digit > 0) {\n         \
    \   digits.append(digit)\n            digit -= (digit / 10)\n        }\n     \
    \   if (digits.exists(digit => digit % 2 != 0)) {\n            return 0\n    \
    \    }\n        digits.reduceLeft((a, b) => a * b)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9nj0o_n.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr9nj0o_n.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            digit -= (digit / \e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is\
    \ not a member of Int - did you mean digit.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val m = n.toInt\n\
    \        if (m % 2 == 0) 0\n        else m * digits.productIter(m, 2).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpweycgafi.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m m * digits.productIter(m, \e\
    [31m2\e[0m).toLong\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value productIter is not a member of Long\
    \ => Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val nums = n.toString.split(\"\
    \\\\D+\").toArray\n        var sum = 0\n        for (i <- 0 until nums.length)\
    \ {\n            val value = nums(i)\n            if(value.toLong % 2 != 0) {\n\
    \                sum = sum + value.toLong.toInt\n            }\n        }\n  \
    \      if(sum == 0) {\n            return 0\n        }\n        return sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphifg3mlf.scala:29)\n\tat Problem.main(tmphifg3mlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) 0\n  \
    \      else {\n            val s = n.toString.dropRight(1)\n            val r\
    \ = s.reverse.filter(i => i % 2 != 0).toList\n            val t = r.foldLeft(1)\
    \ { case (x, y) => x * y}\n            if (r.length == 0) 0\n            else\
    \ t\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd1tkmv3t.scala:24)\n\tat Problem.main(tmpd1tkmv3t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n <= 0)\n    \
    \        return 0\n        val res = n.toInt\n        if (n % 2 == 0) {\n    \
    \        res\n        } else {\n            val num = n.toString.dropRight(1)\n\
    \            res.toLong * digits(num.toLong)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.digits(tmp_d4_5em6.scala:21)\n\
    \tat Problem$.main(tmp_d4_5em6.scala:25)\n\tat Problem.main(tmp_d4_5em6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) 0\n  \
    \      else n % 2 match {\n            case 0 => (n / 2) * (n / 2)\n         \
    \   case 1 => (n / 2)\n            case _ => (n / 2) * digits(n / 2)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvp21qe2.scala:22)\n\tat Problem.main(tmpuvp21qe2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val product = n.toString.toDouble.div(BigDecimal(n.toString).toDouble).floor\n\
    \        if (product % 2 == 1)\n            return 0\n        product\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ef7m7xs.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = n.toString.toDouble.div(BigDecimal(n.toString).toDouble).floor\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value div is not a member of Double\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val n = n.toInt\n\
    \        val product = if (n % 2 == 0) 0 else 1\n        val remainder = (n-1)\
    \ rem 2\n        remainder.toLong*product + product*digits((remainder-1).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7nc7i1r0.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 1\n    \
    \    while(n > 0){\n            sum = sum * n % 10\n            n = n / 10\n \
    \       }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwym18hy.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = sum * n % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmprwym18hy.scala:17:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n = n /\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // 1. Find the integer\
    \ factors of n.\n        // 2. Divide each factor by 2, then multiply by the product\
    \ of all the factors\n        //    in Step 1.\n        // 3. Multiply the product\
    \ by 2n to get the product of odd digits.\n        // 4. Subtract 1 from n (this\
    \ step assumes that all digits are odd).\n        // 5. Return n if n is odd,\
    \ 0l otherwise.\n        \n        val product = scala.math.BigInt(1l).pow(n.toInt)\n\
    \        val odd = (product * product).divide(product).multiply(product).toInt\n\
    \        if (odd > 0) odd else 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzcl4ntq.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = (product * product).divide(product).multiply(product).toInt\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value divide is not a member of BigInt\n1 error found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0l) 0\n \
    \       else n % 10l * (n-l) / 10 + (n / 10) % 10l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0kswes5g.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m n % \e[31m10l\e[0m * (n-l) /\
    \ \e[31m10\e[0m + (n / \e[31m10\e[0m) % \e[31m10l\e[0m\n\e[31m\e[31m   |\e[0m\
    \                          ^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        // Return 0 if all\
    \ digits are even.\n        if (n.toString.size % 2 == 0)\n            return\
    \ 0\n        // For each digit, multiply by 2 to the power of (index + 1)\n  \
    \      val res = for (i <- 0 until n.toString.size; d <- n.toString.substring(i,\
    \ i + 1)) yield {\n            if (d == \"0\") 1L\n            else 2L * 2L *\
    \ 2L * 2L * 2L * 2L * 2L\n        }\n        res.reduceLeft((a, b) => a * b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk7x3l1o7.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (d == \e[31m\"0\"\e[0m) \e\
    [31m1L\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.ListBuffer[Long]()\n\
    \        var temp = n\n\n        while ( temp > 0 ) {\n            digits += temp\
    \ % 10l\n            temp /= 10l\n        }\n\n        if ( digits.isEmpty) {\n\
    \            return 0\n        } else {\n            return digits.last\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplc8kw8fw.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = n.toString.dropRight(n.toString.length).map(_.toInt)\n\
    \        val odd = (digits.filter(x => x % 2 != 0).toSet / 2).toSeq\n        if\
    \ (odd.isEmpty) 0\n        else digits.foldLeft(1)(x => x * odd(x).toLong)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtnl9fk6.scala:15:56 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = (digits.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m).toSet / \e[31m2\e[0m).toSeq\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of Set[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpmtnl9fk6.scala:17:34 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m digits.foldLeft(\e[31m1\e[0m)(x\
    \ => x * odd(x).toLong)\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Wrong number of parameters, expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val nstr = n.toString\n\
    \        val nstr = nstr.substring(0, nstr.length - 1)\n        var total = 0\n\
    \        for (i <- nstr.indices) total += nstr.charAt(i).asDigit()\n        if\
    \ (total % 2 == 0) total\n        else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpki7z8j3u.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnstr\e[0m = nstr.substring(\e\
    [31m0\e[0m, nstr.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnstr is already defined as \e[33mvalue\e[0m \e[35mnstr\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpki7z8j3u.scala:17:38 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mfor\e[0m (i <- nstr.indices) total += nstr.charAt(i).asDigit()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpki7z8j3u.scala:17:56 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- nstr.indices) total += nstr.charAt(i).asDigit()\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35masDigit\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret = 0\n    \
    \    var div = math.ceil(math.log10(n))\n        var mult = math.pow(10, div)\n\
    \        var m = n / mult\n        while (m != 0) {\n            m % mult\n  \
    \          ret += 1\n            mult = math.pow(10, div)\n            div -=\
    \ 1\n        }\n        if (n < 2)\n            0\n        else\n            ret\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        def digit(n: Long)\
    \ = if(n % 10 == 0) 0 \n                           else if(n % 10 == 1) 1\n  \
    \                         else n / 10 + (n % 10) * digit(n / 10)\n        digit(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpqphbfduh.scala:16:52 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                           \e[33melse\e[0m n / \e[31m10\e\
    [0m + (n % \e[31m10\e[0m) * digit(n / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \               Overloaded or recursive \e[33mmethod\e[0m \e[35mdigit\e[0m needs\
    \ return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 1L\n   \
    \     var d = 2L\n        while (n != 0) {\n            if (n % 2 == 0) res +=\
    \ d\n            d *= 2\n            n /= 2\n        }\n        if (res == 1L)\
    \ res\n        else 0L\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwoyl6w3.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        (n >>> 1) match {\n\
    \            case 0 => 0l\n            case 1 => 1l\n            case _ => n.toInt\
    \ / 10l // Use toInt to avoid overflow\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprr5pkj2g.scala:21)\n\tat Problem.main(tmprr5pkj2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = 1\n    \
    \    for (i <- 0 until n.toString.length-1){\n            if (n % 2 == 0){\n \
    \               res *= n.toString.charAt(i)\n            }\n        }\n      \
    \  if (res % 2 == 1){\n            return 0\n        }\n        return res\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0599lqtq.scala:26)\n\tat Problem.main(tmp0599lqtq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1L\n\
    \        var i = 2L\n        while (i < n) {\n            result = result * i\
    \ + (n % i < (i-1))\n            i = i+2\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n   \
    \ assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpuldddg1k.scala:17:32 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result = result * i + (n % i < (i-\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\
    \e[31m   |\e[0mmatch arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 0l\n\
    \        val arr = n.toString().toCharArray.drop(1).dropRight(1)\n        for\
    \ (i <- arr) {\n            result *= i.toLong\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgan_rus.scala:22)\n\tat Problem.main(tmpcgan_rus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val s = n.toString\n\
    \        var i = 0\n        for (d <- s.toInt - '0')\n            if (i % 2 ==\
    \ 1) d * 2\n            else d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb74pn7oc.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (d <- s.toInt - \e[31m'0'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var digits = BigInt(0)\n\
    \        var x = BigInt(n)\n        while (x.signum > 0 && x > 0) {\n        \
    \    if (x % 2 != 0) digits += 1\n            x /= 2\n        }\n        if (digits\
    \ == 0) 0\n        else digits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoh53joa8.scala:21:13\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m digits\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (digits : BigInt)\n\e[31m   |\e[0m             Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        if (n < 10) return\
    \ n\n        if (n.toString.length < 2) return 0\n        val digits = (0 to n.toString.length-2).map(x\
    \ => n.toString.charAt(x))\n        digits.foldLeft(0l){ (a,i) =>\n          \
    \  a + (if (digits.take(i).forall(_.isDigit)) 1L else 0L)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n  \
    \  assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03ld1pr3.scala:23)\n\tat Problem.main(tmp03ld1pr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var ret : Long = 0\n\
    \        var i = 1l\n        while(i <= n) {\n            ret = ret * i\n    \
    \        i = i * 2l\n        }\n        if(n % 2l == 0) ret else 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n   \
    \ assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
    \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvd_gu_u6.scala:23)\n\tat Problem.main(tmpvd_gu_u6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = n\n \
    \       result *= result\n        result /= 10\n        if(result % 2 == 0)\n\
    \            return result\n        else\n            return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mawgyef.scala:23)\n\tat Problem.main(tmp0mawgyef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var res = n\n    \
    \    var mult = 1\n        var product = 0\n        var even = true\n        for\
    \ (i <- 1 to n.length) {\n            val x = if (res % 2 == 0) even else !even\n\
    \            even = x\n            val y = if (x > 0) res / 10f else res / 10f\n\
    \            res = y\n            mult = x * mult\n            product += mult\n\
    \        }\n        product\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu24wifv6.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.length)\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value length is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpu24wifv6.scala:21:28 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = \e[33mif\e[0m (x\
    \ > \e[31m0\e[0m) res / \e[31m10f\e[0m \e[33melse\e[0m res / \e[31m10f\e[0m\n\e\
    [31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m        \
    \                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpu24wifv6.scala:22:18 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            res = y\n\e[31m\e[31m   |\e[0m               \
    \   ^\e[0m\n\e[31m   |\e[0m                  Found:    (y : Float)\n\e[31m   |\e\
    [0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu24wifv6.scala:23:21 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            mult = x * mult\n\e[31m\e[31m   |\e[0m                   ^^^\e\
    [0m\n\e[31m   |\e[0mvalue * is not a member of Boolean, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        val product = 1\n\
    \        while (n > 0) {\n            product *= n % 10\n            n /= 10\n\
    \        }\n        if (n % 2 == 1)\n            0\n        else\n           \
    \ product\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptgb_h6ph.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            product *= n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is\
    \ not a member of Int - did you mean product.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmptgb_h6ph.scala:17:14 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the product of the odd digits.\n\
    \    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
    \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
    \    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 1\n \
    \       var remainder = 0L\n        while(n > 0L) {\n            val digit = n\
    \ % 10\n            result *= digit\n            remainder = (n - digit) * (n\
    \ % 10)\n            n = remainder\n        }\n        if (n % 2 == 0) result\
    \ else 0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6iogo5j.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result *= digit\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpp6iogo5j.scala:20:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n = remainder\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009746
