name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extension_name : Set[Char] = extensions.map(x => x.charAt(0)).distinct\n\
    \        val strength : Map[Char, Int] = extension_name.map(x => (x, extension_name.count(_\
    \ == x))).reduceLeft(_ ++ _)\n        val strength_sum = strength.values.sum\n\
    \        val strength_max_key : Char = strength.keys.max\n        val strength_max_value\
    \ = strength.values.max\n        val strength_max_key_value : Map[Char, Int] =\
    \ strength.filter(_._2 == strength_max_value).sortBy(_._1).head._1\n        val\
    \ strength_max_key_value_name = strength_max_key_value.keys.mkString(\"\")\n \
    \       val strength_max_key_value_strength = strength_max_key_value.values.sum\n\
    \        val strength_max_key_value_strength_name : Char = strength_max_key_value_strength.keys.max\n\
    \        val strength_max_key_value_strength_max_value : Int = strength_max_key_value_strength.values.max\n\
    \        val strength_max_key_value_strength_max_value_name : Char = strength_max_key_value_strength.keys.max\n\
    \        val strength_max_key_value_strength_max_value_name : String = \".\"\n\
    \        if(strength_sum > strength_max_key_value_strength_max_value)\n      \
    \      class_name + strength_max_key_value_strength_max_value_name + strength_max_key_value_strength_max_value_name\
    \ +\n                extensions.map(x => x.substring(strength_max_key_value_strength_max_value_name.length,\
    \ x.length).mkString(\"\")).mkString(\"\") \n        else\n            class_name ",
  "        var result: String = \"\"\n        val extension_collection = new mutable.HashMap[String,\
    \ Int]()\n        extensions.foreach(extension => \n            extension match\
    \ {\n                case x if x.matches(\"[A-Z]\") => \n                    extension_collection.put(x.toUpperCase,\
    \ 1)\n                case x if x.matches(\"[a-z]\") => \n                   \
    \ extension_collection.put(x.toLowerCase, 1)\n                case x => \n   \
    \                 extension_collection.put(x.toUpperCase(), 0)\n            }\n\
    \        )\n        extension_collection.foreach {\n            case (k, v) =>\n\
    \                if ((v / extension_collection.size)*100 >= 100) result = k\n\
    \        }\n        result", "       // Write your code here\n        val strength\
    \ = extensions map {\n            e => if (e.matches(\"[A-Z]+\")) e.length.toDouble\
    \ - e.toUpperCase.length.toDouble else e.length.toDouble - e.toLowerCase.length.toDouble\n\
    \        } max\n        if (strength < 0) \"%s.%s\" format (class_name, extensions.sortWith(_\
    \ < _).headOption.getOrElse(extensions.head))\n        else \"%s.%s\" format (class_name,\
    \ extensions.sortWith(_ < _).lastOption.getOrElse(extensions.last))", "      \
    \  //Get the number of capital letters in the extension's name\n        val CAP\
    \ = extensions.length\n        //Get the number of lowercase letters in the extension's\
    \ name\n        val SM = extensions.length\n        //The strength of the extension\
    \ is as follows: \n        //Let CAP be the number of the uppercase letters in\
    \ the extension's name, \n        //and let SM be the number of lowercase letters\
    \ in the extension's name, \n        //the strength is given by the fraction CAP\
    \ - SM. \n        //You should find the strongest extension and return a string\
    \ in this \n        //format: ClassName.StrongestExtensionName.\n        //If\
    \ there are two or more extensions with the same strength, you should\n      \
    \  //choose the one that comes first in the list.\n        //For example, if you\
    \ are given \"Slices\" as the class and a list of the\n        //extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n        //return 'Slices.SErviNGSliCes'\
    \ since 'SErviNGSliCes' is the strongest extension \n        //(its strength is\
    \ -1).\n        val strength = (CAP - SM)\n        val extensionName = extensions.sortBy(x\
    \ => x.toUpperCase).head\n        s\"$class_name.$extensionName\"", "        val\
    \ allExtensions = extensions.toSet\n        var maxStrongest = 0\n        var\
    \ maxExtension = List[String]()\n\n        for (e <- extensions) {\n         \
    \   if (allExtensions.contains(e)) {\n                if (allExtensions.count(_\
    \ == e) > maxStrongest) {\n                    maxStrongest = allExtensions.count(_\
    \ == e)\n                    maxExtension = e\n                }\n           \
    \ }\n        }\n\n        className + maxExtension", "        val exts = extensions.map(e\
    \ => {\n            val cap = e.toUpperCase length\n            val sm  = e.toLowerCase\
    \ length\n            (cap - sm) / cap\n        }).sortWith(_ > _).last\n    \
    \    val sClass = s\"$class_name.$exts\"\n        val sClassWithoutExtension =\
    \ s\"$class_name$exts\"\n        val sClassWithExtension = s\"$class_name.$exts\"\
    \n        val allClasses = List[String](sClass, sClassWithoutExtension, sClassWithExtension)\n\
    \        allClasses.map(c => println(c))", "        def strongest(extensions :\
    \ List[String]) : String = {\n            val strengths : mutable.Map[String,\
    \ Int] = mutable.Map.empty\n            extensions.foreach(ext => \n         \
    \   {\n                if(strengths.contains(ext))\n                {\n      \
    \              val strength = strengths(ext)\n                    if(strength\
    \ < ext.length.toCharArray (1).sum.toInt)\n                    {\n           \
    \             strengths(ext) = ext.length.toCharArray (1).sum.toInt\n        \
    \                ext\n                    }\n                    else\n      \
    \              {\n                        strengths(ext) = strength\n        \
    \                ext\n                    }\n                }\n             \
    \   else\n                {\n                    strengths(ext) = ext.length.toCharArray\
    \ (1).sum.toInt\n                    ext\n                }\n            }\n \
    \           )\n            strengths.maxBy(x => x._2)._2\n        }\n        val\
    \ extension = extensions.find(ext => ext.toLowerCase == extension.name.toLowerCase\
    \ )\n        if(extension == None) \n        {\n            val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n            if(extension\
    \ == None) \n            {\n                val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toLowerCase )\n                if(extension\
    \ == None) \n                {\n                    val extension = extensions.find(ext\
    \ => ext.toLowerCase == extension.name.toLowerCase )\n                    if(extension\
    \ == None) \n                    {\n                        val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n                       \
    \ if(extension == None) \n                        {\n                        \
    \    val extension = extensions.find(ext => ext.toUpperCase == extension.name.toLowerCase\
    \ )\n                            if(extension == None) \n                    \
    \        {\n                                val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n                       \
    \         if(extension == None) \n                                {\n        \
    \                            val extension = extensions.find(ext => ext.toUpperCase\
    \ == extension.name.toUpperCase )\n                                    if(extension\
    \ == None) \n                                    {\n                         \
    \               val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                        if(extension == None) \n        \
    \                                {\n                                         \
    \   val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                            if(extension == None) \n    \
    \                                        {\n                                 \
    \               val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                                if(extension == None) \n\
    \                                                {\n                         \
    \                           val extension = extensions.find(ext => ext.toUpperCase\
    \ == extension.name.toUpperCase )\n                                          \
    \          if(extension == None) \n                                          \
    \          {\n                                                        ", "   \
    \     val extensions_hash = extensions.hashCode()\n        val hashCode = extensions_hash\
    \ * extensions.size + 1\n        val extension_strongest = extensions.sorted().find(x=>\
    \ hashCode % x == 0)\n        class_name+\".\"+extension_strongest", "      def\
    \ extension_score(extension : String, class_name : String) : Int = {\n       \
    \ val class_name_length = class_name.length\n        val extension_length = extension.length\n\
    \        val class_name_with_extension = class_name + extension\n        val extension_without_extension\
    \ = extension.substring(class_name_length-1, extension_length)\n        val class_name_without_extension\
    \ = class_name.substring(0, class_name_length)\n        val extension_without_class\
    \ = extension.substring(class_name_length-1, extension_length)\n        val class_name_without_class\
    \ = class_name.substring(0, class_name_length)\n        val extension_with_class\
    \ = extension.substring(class_name_length-1, extension_length)\n        val class_name_with_class\
    \ = class_name + extension_with_class\n        val strength = (class_name_with_extension.length\
    \ -1)*(class_name_with_extension.indexOf(extension_without_extension) - class_name_with_extension.indexOf(extension_without_class))\n\
    \        val strength_without_extension = class_name_with_class.indexOf(extension_without_class)\n\
    \        val strength_without_class = class_name_with_class.indexOf(extension_without_extension)\n\
    \        val strength_with_extension = class_name_with_class.indexOf(extension_with_class)\n\
    \        val strength_with_class = class_name_with_extension.indexOf(extension_with_extension)\n\
    \        (strength - strength_without_extension)*(strength_with_extension - strength_with_class)\
    \ + strength_with_class\n      }\n      extension_score(class_name, extensions.sortWith(_.length\
    \ < _.length).head) match {\n        case 0 => class_name\n        case _ => extensions.sortWith(extension_score(_.toString,\
    \ class_name)).head\n      }", "        if (extensions.size <= 1) {\n        \
    \    className\n        }\n        else {\n            val strongest_extension\
    \ = extensions.sortWith((a, b) => b.length - a.length)\n            class_name\
    \ + strongest_extension.head\n        }", "        val strength = extensions.map(_.length).max\n\
    \n        val extension = extensions.filter(_.length == strength)\n        val\
    \ strengthInString = extension.length.map(str => str.toUpperCase - str.toLowerCase).sum\n\
    \        val extensionName = extension.head\n\n        val className = class_name\
    \ + \".\" + extensionName\n        className", "        var strength = 0\n   \
    \     var extension = \"\"\n        for (extension <- extensions) {\n        \
    \    if (class_name.indexOf(extension.charAt(0)) >= 0) {\n                val\
    \ capitals = class_name.split(\"\").map(_.toUpperCase).length\n              \
    \  val lowercases = class_name.split(\"\").map(_.toLowerCase).length\n       \
    \         val fraction = capitals - lowercases\n                val strength =\
    \ fraction\n                if (strength > 0)\n                    return extension.substring(0,extension.lastIndexOf(\"\
    .\"))\n            }\n        }\n        return \"\"", "        val extensions_map\
    \ = Map(extensions.map(ext => ext to className) -> \"StrongestExtension\")\n \
    \       val strength_map = extensions_map.toSeq.sortBy(_._2)(Ordering.Int.reverse).filter(_._2\
    \ != extensions_map(extensions_map.keySet)._2)\n        val max_length = strength_map.maxBy(_._2.length)._1.substring(strength_map.maxBy(_._2.length)._1.lastIndexOf('.'))\n\
    \        val class_name_no_extension = class_name.replaceFirst(\".\", \"\")\n\
    \        val strongest_extension = extensions_map(extensions_map.keySet)._1 \n\
    \        val no_extensions = extensions_map.keySet\n        if (no_extensions.contains(strongest_extension))\
    \ strongest_extension else (class_name_no_extension + max_length + strongest_extension)",
  "        val strengths = extensions groupBy {e => e.toLowerCase.substring(0, 1).count(_\
    \ == 'Z') - e.toLowerCase.substring(1, 2).count(_ == 'z') - 1}\n        val strength\
    \ = strengths(class_name.toLowerCase)\n        val extension = strengths.keySet\
    \ iterator find {e => e == strength}\n        if(extension.isEmpty) \"\" else\
    \ {\n            class_name + \".\" + extension\n        }", "        if(extensions.length\
    \ < 1) throw new Exception(\"Extensions is empty\")\n        var strongest = -1\
    \ //default value\n        var max = extensions.length // max number of extensions\n\
    \        var maxStrength = 0 // strength of max extension\n        var index =\
    \ 0\n        while(index < max) {\n            // Check if the current extension\
    \ has higher strength than maxStrength\n            if(extensions(index).toUpperCase\
    \ - extensions(index).toLowerCase < maxStrength) {\n                strongest\
    \ = extensions(index).toUpperCase //set current as strongest\n               \
    \ maxStrength = extensions(index).toLowerCase // set current as max strength\n\
    \                index = max // start comparing from the end\n            }\n\
    \            else {\n                // Check if current extension is same as\
    \ maxStrength\n                if(extensions(index) == maxStrength) {\n      \
    \              index = max // end comparing from the end\n                }\n\
    \                else {\n                    // Check if current extension is\
    \ same as strongest\n                    if(extensions(index) == strongest) {\n\
    \                        index = max // end comparing from the end\n         \
    \           }\n                    else {\n                        index += 1\
    \ // keep comparing\n                    }\n                }\n            }\n\
    \        }\n        if(strongest != -1 && maxStrength != strongest) class_name\
    \ + \".\" + strongest\n        else class_name", "        val count = extensions.map(ext\
    \ => ext.count(_.toUpperCase.toChar)).sum\n        if (count < 0) {\n        \
    \    val index = extensions.indexWhere(ext => ext.count(_.toUpperCase.toChar)\
    \ == count)\n            extensions(index)\n        } else {\n            val\
    \ index = extensions.indexWhere(ext => ext.count(_.toLowerCase.toChar) == count)\n\
    \            extensions(index)\n        }", "        var strength = -1;\n    \
    \    val strongest_extension = List[String]();\n        extensions.foreach(ext\
    \ => {\n            val cap = ext.length.toDouble.floor.toInt;\n            val\
    \ sm = ext.length.toDouble.ceil.toInt;\n            val fraction = cap - sm;\n\
    \            if(fraction > strength) {\n                strength = fraction;\n\
    \                strongest_extension = ext;\n            }\n        });\n    \
    \    class_name + \".\" + strongest_extension(0)", "        val cap = class_name.map(_.toUpper).count(_\
    \ == _)\n        val sm = class_name.map(_.toLowerCase).count(_ == _)\n      \
    \  val strength = cap - sm\n        val strongest_extension = extensions.find(_.getClass.getName.startsWith(class_name.getClass.getName))\
    \ match {\n            case None => \"\"\n            case Some(extension) =>\
    \ extension.getName.drop(class_name.getClass.getName.length + extension.getName.indexOf(\"\
    .\"))\n        }\n        val parts = strongest_extension.split(\"\\\\.\").toList\n\
    \        parts(0).drop(class_name.indexOf(\".\")) + parts(1) + \".\" + StrongestExtension(parts(0).drop(class_name.indexOf(\"\
    .\")) + parts(1) + \".\" + parts(2), extensions.drop(parts.size))", "        //\
    \ Solution\n        var max_strength = 0\n        var result = \"Unknown\"\n \
    \       // The list extensions is being sorted in descending order of strength,\
    \ so we use the \n        // reverse function.\n        extensions.reverse.foreach(ext\
    \ => {\n            val ext_name = ext.substring(0, ext.length - 1)\n        \
    \    val ext_strength = ext.substring(ext.length - 1, 1)\n            if (ext_strength.length\
    \ > 1) {\n                if (ext_strength.equals(ext_strength.substring(0, 1)))\n\
    \                    ext_strength = ext_strength.substring(1)\n              \
    \  val cap = ext_strength.length\n                val sm = cap - ext_strength.length\n\
    \                // Check if the extension strength is less than the current maximum\
    \ strength.\n                if (ext_strength.length < max_strength) {\n     \
    \               // If it is, set the result to the extension name and strength.\n\
    \                    max_strength = ext_strength.length\n                    result\
    \ = ext_name + ext_strength\n                } else if (ext_strength.length ==\
    \ max_strength) {\n                    // If the extension is of the same strength\
    \ we compare the alphabetic \n                    // part of the names and choose\
    \ the one that comes first alphabetically.\n                    if (ext_name.substring(0,\
    \ 1).compareTo(ext_name.substring(0, sm)) > 0)\n                        result\
    \ = ext_name + ext_strength\n                }\n            }\n        })\n  \
    \      // If there are no extensions then it returns \"Unknown\".\n        if\
    \ (max_strength == 0)\n            result = \"Unknown\"\n        // If the result\
    \ is not \"Unknown\", it returns the result string.\n        if (result != \"\
    Unknown\")\n            result\n        else\n            \"Unknown\"", "    \
    \    val c = List(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3)\n        val l = List(\"\
    a\" -> 1, \"b\" -> 2, \"c\" -> 3, \"A\" -> 1, \"B\" -> 2, \"C\" -> 3)\n      \
    \  val max = -1\n        val maxExtension = \"\"\n        extensions.foreach{e\
    \ =>\n            val name = e.substring(0, e.length() - 1)\n            val strength\
    \ = c(\"a\" + name) - c(\"b\" + name)\n            val lowerName = e.substring(0,\
    \ e.length() - 1)\n            val lowerStrength = l(\"a\" + lowerName) - l(\"\
    b\" + lowerName)\n            val x = strength * lowerStrength\n            if\
    \ (x > max) {\n                max = x\n                maxExtension = e\n   \
    \         }\n        }\n        class_name +\".\" + maxExtension", "        val\
    \ strengths = extensions.map(_.length.toInt)\n        val max_strength = strengths.max\n\
    \        val strength_sums = extensions.map(s => s.toInt + max_strength).toList\n\
    \        val max_strength_sums = strength_sums.max\n        val min_sum = max_strength_sums.min\n\
    \        val index = strengths.indexWhere(s => s == min_sum)\n        val strength\
    \ = strengths(index)\n        val extension = extensions(index)\n        s\"${class_name.split(\"\
    .\").head}.$extension\"", "        var max_strength : Option[Int] = None\n   \
    \     var max_extension = extensions\n        for (extension <- extensions) {\n\
    \            val extension_strength = extension.dropWhile(_ == '_').count(_ >=\
    \ 'A' && _ <='Z').toDouble / extension.length.toDouble\n            if (max_strength.isEmpty\
    \ || (max_strength exists extension_strength)) {\n                max_strength\
    \ = Some(extension_strength)\n                max_extension = extension\n    \
    \        }\n        }\n        class_name + max_extension.mkString", "       \
    \ // Complete the implementation\n        var strongest = \"\"\n        var extensionStr\
    \ = \"\"\n        extension.map(x => extensionStr += x)\n        var extensionStrLen\
    \ = extensionStr.length()\n        extensionStr.map(x => strongest += x)\n   \
    \     var strongestLen = strongest.length()\n        \n        if(extensionStrLen\
    \ > strongestLen){\n            strongest = extensionStr\n        }else if(extensionStrLen\
    \ == strongestLen){\n            extensionStr.map(x=>strongest += x)\n       \
    \ }else{\n            extensionStr.map(x=>extensionStr += x)\n        }", "  \
    \      // Write your code here\n        var strongest = \"\"\n        for(ext\
    \ <- extensions)\n            if(ext.toLowerCase.toCharArray.filter{case c =>\
    \ c <= 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case c => c >= 'A'}.count()\
    \ > 0){\n                if(ext.toLowerCase.toCharArray.filter{case c => c <=\
    \ 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case c => c >= 'A'}.count()\
    \ == 0)\n                    strongest += (class_name+\".\"+ext).mkString(\".\"\
    ).trim\n            }\n        for(ext <- extensions)\n            if(ext.toLowerCase.toCharArray.filter{case\
    \ c => c <= 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case c => c >= 'A'}.count()\
    \ == 0)\n                strongest += (class_name+\".\"+ext).mkString(\".\").trim\n\
    \        strongest.trim", "        var extensions_count = extensions.size\n  \
    \      var max_extension = 0\n        var max_extension_class = \"\"\n       \
    \ var strongest_extension = \"\"\n\n        // loop through the extensions list\
    \ \n        for (i <- 0 until extensions_count) {\n            val extension =\
    \ extensions(i)\n\n            // find out how strong the extension is\n     \
    \       val letter_count = extension.filter(letter => letter.isUpper).size\n \
    \           val letter_count_lower = extension.filter(letter => letter.isLower).size\n\
    \            val strength = letter_count / letter_count_lower\n\n            if\
    \ (strength > max_extension) {\n                max_extension = strength\n   \
    \             max_extension_class = extension\n            }\n        }\n\n  \
    \      // return the strongest extension \n        if (max_extension == extensions_count\
    \ - 1) {\n            strongest_extension = max_extension_class\n        } else\
    \ {\n            strongest_extension = class_name + \".\" + max_extension_class\n\
    \        }", "        var new_extensions = extensions\n        var strength =\
    \ -1\n        for(e<-extensions) {\n            val numOfCap = e.toCharArray().filter(c\
    \ => c.toUpper == c.toUpper).length\n            val numOfSm  = e.toCharArray().filter(c\
    \ => c.toUpper == c.toLower).length\n            var diff = numOfCap - numOfSm\n\
    \            if (diff != 0)\n                diff += diff\n            val ratio\
    \ = (numOfCap - numOfSm) / diff\n            if (ratio > strength)\n         \
    \       strength = ratio\n        }\n        new_extensions -= extension(class_name,\
    \ extensions)\n        new_extensions +=  extension(class_name, extensions)\n\
    \        new_extensions.sortWith(_ > _).head", "        // Initialize a collection\
    \ to store all extensions' strength information\n        val extensions_strength\
    \ = mutable.HashMap[String, Int]()\n        for (extension <- extensions) {\n\
    \            val extension_arr = extension.split(\"_\")\n            val extension_str\
    \ = extension_arr.last\n            val extension_cap = extension_str.last.toUpperCase.length\n\
    \            val extension_sm  = extension_str.last.toLowerCase .length\n    \
    \        val extension_score = extension_cap - extension_sm\n            // Check\
    \ if extension name already in the map or not and \n            // If not then\
    \ insert with strength score as 0 \n            if (!extensions_strength.contains(extension_str))\
    \ {\n                extensions_strength += (extension_str -> 0)\n           \
    \ }\n            // If already present then update the strength score \n     \
    \       if (extensions_strength.contains(extension_str)) {\n                extensions_strength(extension_str)\
    \ += extension_score\n            }\n        }\n        // Filter extensions strength\
    \ info for strongest extension \n        val strongest_extension = extensions_strength.filter{case\
    \ (_, score) =>\n            score == extensions_strength.max\n        }.keys.head\n\
    \        // Return the class's name + the strongest extension name \n        class_name\
    \ + \".\" + strongest_extension", "        \n        // Your code here.\n    \
    \    // For each extension in the list, get the length of its string representation\n\
    \        // and compare it to the extension's strength. If they are equal, return\
    \ the\n        // name of the extension. If not, return the name of the extension\
    \ with the lowest\n        // strength.\n\n        // For each extension in the\
    \ list, get the length of its string representation\n        // and compare it\
    \ to the extension's strength. If they are equal, return the\n        // name\
    \ of the extension. If not, return the name of the extension with the lowest\n\
    \        // strength.\n        \n        // For each extension in the list, get\
    \ the length of its string representation\n        // and compare it to the extension's\
    \ strength. If they are equal, return the\n        // name of the extension. If\
    \ not, return the name of the extension with the lowest\n        // strength.\n\
    \n        // For each extension in the list, get the length of its string representation\n\
    \        // and compare it to the extension's strength. If they are equal, return\
    \ the\n        // name of the extension. If not, return the name of the extension\
    \ with the lowest\n        // strength.\n        \n        // For each extension\
    \ in the list, get the length of its string representation\n        // and compare\
    \ it to the extension's strength. If they are equal, return the\n        // name\
    \ of the extension. If not, return the name of the extension with the lowest\n\
    \        // strength.", "        val map = Map(\n            \"ABC\" -> 1,\n \
    \           \"DEF\" -> 2,\n            \"GHI\" -> 3,\n            \"JKL\" -> 4,\n\
    \            \"MNO\" -> 5\n        )\n        val sortedExt = extensions.sorted\n\
    \        val extensions = extensions map (ext => ext -> (map.get(ext) match {\n\
    \            case Some(c) => c\n            case None => -1\n        }))\n   \
    \     val max = (extensions reduce (_ max _))._1\n        val strongest = (extensions\
    \ find (_._1 == max))._1\n        val className = class_name + \".\" + strongest\n\
    \        strongest", "        var strongest_extension = \"\"\n        var lowest_strength\
    \ = -1\n        var lowest_extension = \"\"\n        var lowest_extension_strength\
    \ = -1\n        var count = 0\n        for (extension_name <- extensions) {\n\
    \            val extension_strength = extension_name.count(c => c.isUpper)\n \
    \           if (lowest_strength == -1 || lowest_strength > extension_strength)\
    \ {\n                lowest_strength = extension_strength\n                lowest_extension\
    \ = extension_name\n                lowest_extension_strength = extension_strength\n\
    \            }\n            count += 1\n        }\n        \n        for (extension_name\
    \ <- extensions) {\n            val extension_strength = extension_name.count(c\
    \ => c.isUpper)\n            if (lowest_strength == -1 || extension_strength <\
    \ lowest_strength) {\n                lowest_strength = extension_strength\n \
    \               lowest_extension = extension_name\n                lowest_extension_strength\
    \ = extension_strength\n            }\n            count += 1\n        }\n   \
    \     \n        if (count == 0) {\n            strongest_extension = class_name\n\
    \        }\n        else {\n            var strongest_extension = \"\"\n     \
    \       var lowest_strength = -1\n            var lowest_extension = \"\"\n  \
    \          var lowest_extension_strength = -1\n            var count = 0\n   \
    \         for (extension_name <- extensions) {\n                val extension_strength\
    \ = extension_name.count(c => c.isUpper)\n                if (lowest_strength\
    \ == -1 || extension_strength < lowest_strength) {\n                    lowest_strength\
    \ = extension_strength\n                    lowest_extension = extension_name\n\
    \                    lowest_extension_strength = extension_strength\n        \
    \        }\n                count += 1\n            }\n            \n        \
    \    for (extension_name <- extensions) {\n                val extension_strength\
    \ = extension_name.count(c => c.isUpper)\n                if (extension_strength\
    \ > lowest_strength) {\n                    lowest_strength = extension_strength\n\
    \                    lowest_extension = extension_name\n                    lowest_extension_strength\
    \ = extension_strength\n                }\n                count += 1\n      \
    \      }\n            \n            strongest_extension = class_name + lowest_extension\n\
    \        }\n        \n        return strongest_extension", "        val extensions_map\
    \ = extensions.map(_.toUpperCase)\n        val extensions_count = extensions_map.map(extension_count\
    \ => \n            (extension_count.length -1)/extension_count.length).sum\n \
    \       val extensions_strength = extensions_map.groupBy(_.length).mapValues(_.size)\n\
    \        val best_extension_strength = extensions_strength.maxBy(_._1)._1\n  \
    \      val extensions_strings = extensions_strength.map{ case (key, value) =>\
    \ key + \n            \".\" + extensions_map.filter(_.length == key).map(_.toUpperCase).mkString(\"\
    _\") }\n        val strongest_extension = class_name + extensions_strings.minBy(_._1)._1\
    \ \n        if (extensions_count > 1) strongest_extension\n        else strongest_extension.substring(0,class_name.length)",
  "        // Find the extension and its strength.\n        val extensions_map = extensions.map(ext\
    \ => (ext.toUpperCase, ext.toLowerCase.count(_.isUppercase)/ext.toLowerCase.count(_.isLowercase)))\n\
    \        val max_strength = extensions_map.map(_._2).max\n        \n        //\
    \ Return a string in the format: class_name.extension_name.\n        // The strength\
    \ must be -1 if the extension does not appear in the list.\n        if (extensions_map.contains(max_strength\
    \ => -1 ))\n            s\"${class_name.capitalize}${extensions_map.getOrElse(max_strength,\
    \ 0)._1}\"\n        else\n            s\"${class_name.capitalize}.UNKNOWN\"",
  "        var max_strength = -1\n        var max_class = class_name\n        var\
    \ max_ext = \"\"\n        var max_ext_name = \"\"\n        for (eName <- extensions)\
    \ {\n            var ext = eName.charAt(1).toLowerCase\n            var ex_name\
    \ = eName\n            var ex_strength = ext.length\n            var ex_class\
    \ = eName\n            if (ex_strength > max_strength) {\n                max_strength\
    \ = ex_strength\n                max_ext = ext\n                max_ext_name =\
    \ eName\n                max_class = ex_class\n            }\n        }\n    \
    \    return max_class + \".\" + max_ext", "        var strongest = \"\"\n    \
    \    var strength = 0\n        extensions.foreach {\n            ext => {\n  \
    \              val count = getCount(ext.toUpperCase)\n                val count2\
    \ = getCount(ext.toLowerCase)\n                if (count > strength) strongest\
    \ = ext\n                else if (count2 > strength) strongest = ext\n       \
    \         else strength = count\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        val extension_strengths = extensions.map(x =>\
    \ (x.substring(x.length()-1).toUpperCase, x.substring(x.length()-1).toLowerCase)).toMap\n\
    \        val class_name_strengths = class_name.substring(class_name.length()-1).toUpperCase\n\
    \        val strength = Math.abs(extension_strengths(class_name_strengths) - extension_strengths(extension_strengths.keys.head))\n\
    \        if (extension_strengths.size > 1) {\n            val key = extension_strengths.keys.tail.sorted\n\
    \            val index = key.indexOf(0)\n            extension_strengths(key.head)\n\
    \        } else {\n            extension_strengths(key.head)\n        }", "  \
    \      val strongest_extension = extensions.reduceLeftOption((c, ext) => Some(ext))\n\
    \        val strength = strongest_extension.fold(0)(_ - _.toUpperCase.length)\n\
    \        class_name + \".\" + strongest_extension.fold(\"???\")((c,ext) => c +\
    \ ext.substring(0,strength))", '       //Solution goes here', "        var strength\
    \ = -1;\n        val m = Map(extensions.zipWithIndex.sortWith((a, b) => a._2 >\
    \ b._2))\n        val key = class_name + extensions.mkString(\".\");\n       \
    \ m.get(key)", "        val myList = extensions match {\n            case head\
    \ :: Nil => extensions(0)\n            case head :: tail => tail\n        }\n\
    \        val myMap = extensions match {\n            case head :: tail => extensions\
    \ zip tail\n        }\n        var max = 0\n        var maxExt : String = \"\"\
    \n        for ((ex_name, ext) <- myMap) {\n            if(ext.length == myList.contains(ex_name))\
    \ {\n                if(ext.toString.toUpperCase.matches(myList mkString (\".*\"\
    )) && ext.toString.toUpperCase.matches(class_name mkString (\".*\"))) {\n    \
    \                if(ext.toString.toUpperCase.matches(ex_name)) {\n           \
    \             val str = ext match {\n                            case str : String\
    \ if str.matches(class_name mkString (\".*\")) => str\n                      \
    \      case str : String if str.matches(ex_name mkString (\".*\")) => str\n  \
    \                          case _ => \"\"\n                        }\n       \
    \                 val str = str match {\n                            case str\
    \ : String if str.matches(ex_name mkString (\".*\")) => str\n                \
    \            case _ => \"\"\n                        }\n                     \
    \   if(str.length > max)\n                            max = str.length\n     \
    \               }\n                }\n            }\n        }\n        val res\
    \ = class_name match {\n            case str : String if str.matches(maxExt mkString\
    \ (\".*\")) => maxExt\n            case _ => \"\"\n        }\n        res", '        //
    Your code here!', "        val class_name = new String(class_name)\n        val\
    \ extensions = extensions.toList\n        val strength = extensions.size\n   \
    \     val counts = extensions.map(e => e.count(_ == 'z')).toList\n        val\
    \ total = extensions.map(e => e.count(_ == 'z')).sum\n        val strengths =\
    \ extension => extension.count(_ == 'z').toFloat/total\n        val strongest\
    \ = extensions.map(e => if (strengths(e) >= strength) e else \"\").get\n     \
    \   if (strongest.length < extensions.size) {\n            val pos = strongest.lastIndexOf('.')\n\
    \            strongest + class_name.substring(pos + 1)\n        } else {\n   \
    \         \"\"\n        }", "        val result = mutable.ArrayBuffer.empty[String]\n\
    \        val strengths = mutable.HashMap[String, Int]()\n        extensions.foreach(x\
    \ => strengths += (x -> 0))\n        val class_names = mutable.HashMap[String,\
    \ String]()\n        extensions.foreach(x => class_names += (x -> \"\"))\n   \
    \     val max_strengths = strengths.maxBy { case (_, v) => v }._1\n        val\
    \ max_class_name = max_strengths.keySet.toList.sortBy(s => strengths(s)).head.head\n\
    \        result.append(class_name)\n        class_names.foreach(x => result.append(x._1))\n\
    \        result.append(max_class_name)\n        class_names(max_class_name)",
  '        // Your code here', "        val map = new mutable.HashMap[String, Int]()\n\
    \        val map2 = new mutable.HashMap[String, Int]()\n        val arr2 = new\
    \ mutable.ArrayList[String]()\n        val arr1 = new mutable.ArrayList[String]()\n\
    \        val arr3 = new mutable.ArrayList[String]()\n        val arr4 = new mutable.ArrayList[String]()\n\
    \        val arr5 = new mutable.ArrayList[String]()\n        val arr6 = new mutable.ArrayList[String]()\n\
    \        val arr7 = new mutable.ArrayList[String]()\n        val arr8 = new mutable.ArrayList[String]()\n\
    \        val arr9 = new mutable.ArrayList[String]()\n        val arr10 = new mutable.ArrayList[String]()\n\
    \        val arr11 = new mutable.ArrayList[String]()\n        val arr12 = new\
    \ mutable.ArrayList[String]()\n        val arr13 = new mutable.ArrayList[String]()\n\
    \        val arr14 = new mutable.ArrayList[String]()\n        val arr15 = new\
    \ mutable.ArrayList[String]()\n        val arr16 = new mutable.ArrayList[String]()\n\
    \        val arr17 = new mutable.ArrayList[String]()\n        val arr18 = new\
    \ mutable.ArrayList[String]()\n        val arr19 = new mutable.ArrayList[String]()\n\
    \        val arr20 = new mutable.ArrayList[String]()\n        val arr21 = new\
    \ mutable.ArrayList[String]()\n        val arr22 = new mutable.ArrayList[String]()\n\
    \        val arr23 = new mutable.ArrayList[String]()\n        val arr24 = new\
    \ mutable.ArrayList[String]()\n        val arr25 = new mutable.ArrayList[String]()\n\
    \        val arr26 = new mutable.ArrayList[String]()\n        val arr27 = new\
    \ mutable.ArrayList[String]()\n        val arr28 = new mutable.ArrayList[String]()\n\
    \        val arr29 = new mutable.ArrayList[String]()\n        val arr30 = new\
    \ mutable.ArrayList[String]()\n        val arr31 = new mutable.ArrayList[String]()\n\
    \        val arr32 = new mutable.ArrayList[String]()\n        val arr33 = new\
    \ mutable.ArrayList[String]()\n        val arr34 = new mutable.ArrayList[String]()\n\
    \        val arr35 = new mutable.ArrayList[String]()\n        val arr36 = new\
    \ mutable.ArrayList[String]()\n        val arr37 = new mutable.ArrayList[String]()\n\
    \        val ", "        var strongest_extension = \"\"\n        var strongest_extension_strength\
    \ = -1\n        var counter = 0\n        extensions.foreach { ext =>\n       \
    \     counter += 1\n            ext.toUpper match {\n                case c if\
    \ c.isLetter && counter == CAP => \n                    strongest_extension =\
    \ ext \n                    strongest_extension_strength = CAP - counter\n   \
    \             case _ => \n            }\n        }\n        if (strongest_extension_strength\
    \ > 0) {\n            class_name + \"_\" + strongest_extension\n        } else\
    \ {\n            class_name\n        }", "        // TODO\n        ", "      \
    \  // Your code goes here.\n        val extensionSet = extensions.map(s => s.toUpperCase).distinct.toSet\n\
    \        val extensionMap = new collection.mutable.HashMap[String, Int]()\n  \
    \      for (e <- extensions) extensionMap += (e.toUpperCase -> extensions.indexOf(e))\n\
    \        val extensionTuples = extensionMap.keySet.toList.sortBy(a => -extensionMap(a))\n\
    \        val maxIndex = extensionTuples.last\n        val bestExtension = extensionTuples(maxIndex\
    \ - 1).mkString.substring(class_name.lastIndexOf('.') + 1, maxIndex)\n       \
    \ bestExtension", "        val extension_strength = extensions.map(_.toUpperCase.size\
    \ - _.toLowerCase.size).max\n        val class_extension = extensions.map(_.toUpperCase.size)\n\
    \            .map(x => if (x == 0) \"\" else x.toString)\n            .max\n \
    \       val base_extension = extension_strength - class_extension\n        if\
    \ (extension_strength == 0) \"\"\n        else class_name + \".\" + base_extension.map(_.toString)",
  "        var strongest = \"\"\n        var max = 0\n        for(extension <- extensions){\n\
    \            val cap = extension.split(\"\").map(_.toUpperCase).count(_ == 'A')\n\
    \            val sm = extension.split(\"\").map(_.toLowerCase).count(_ == 'a')\n\
    \            val diff = cap - sm\n            if(diff > max){\n              \
    \  strongest = extension\n                max = diff\n            }\n        }\n\
    \        class_name + \".\" + strongest", "        var extension_list : List =\
    \ List.empty\n        for (x <- extensions) {\n            if (x.toUpperCase ==\
    \ x.toUpperCase.charAt(0)) {\n                extension_list :+= x\n         \
    \   }\n        }\n        var strongest = extension_list.maxBy( s => s.length\
    \ );\n        if (extension_list.indexOf(strongest) == -1) {\n            return\
    \ class_name\n        }\n        var strength = 0\n        for (x <- extensions)\
    \ {\n            if (x.toUpperCase == x.toUpperCase.charAt(0) && (x.length - x.toLowerCase\
    \ < strength)) {\n                strength = x.length - x.toLowerCase\n      \
    \      }\n        }\n        return class_name + \".\" + strongest + extension_list(extension_list.indexOf(strongest))",
  "        var StrongestExtension = class_name\n        var extension_strength = 0\n\
    \        var i = 0\n        var extension = extensions(i)\n        while (extension_strength\
    \ != extension) {\n            extension_strength = extension_strength - 1\n \
    \           i = i + 1\n            extension = extensions(i)\n        }\n    \
    \    StrongestExtension = extensions(i)\n        return StrongestExtension", " \
    \       val len = extensions.length\n        val max_strength = extensions(0).length.toInt\n\
    \        val max_extension = extensions(0)\n\n        for (i <- 0 until len) {\n\
    \            if (extensions(i).length.toInt > max_strength) {\n              \
    \  max_strength = extensions(i).length.toInt\n                max_extension =\
    \ extensions(i)\n            }\n        }\n\n        return class_name + max_extension",
  "        var strength = -1\n        var current_strength = -1\n        for( ext\
    \ <- extensions) {\n            if(ext.toUpperCase == ext.toUpperCase) {\n   \
    \             current_strength += 1\n                if(current_strength > strength)\
    \ {\n                    strength = current_strength\n                }\n    \
    \        } else {\n                current_strength = 0\n            }\n     \
    \   }\n        val new_extension = class_name + extensions.toList.map(x => x.substring(class_name.lastIndexOf('.')+1)).last\n\
    \        val new_class = new_extension.substring(0,new_extension.lastIndexOf('.'))\n\
    \        val new_extension_strength = new_extension.substring(new_extension.lastIndexOf('.'))\n\
    \        if(new_extension_strength > 0) {\n            return new_class + \".\"\
    \ + new_extension_strength\n        } else {\n            return new_extension\n\
    \        }", "        val class_parts = class_name.split(\"\\\\.\")\n        var\
    \ extension_parts: List[String] = Nil\n        for(part <- class_parts) {\n  \
    \          if(part == \"\") {\n                val part = part\n            }\
    \ else {\n                val part = part.toUpperCase\n            }\n       \
    \     if(extension_parts.contains(part)) {\n                val strength = extension_parts(extension_parts.indexOf(part)).toString.toUpperCase.lastIndexOf(part).toInt\
    \ - 1\n                if(strength > extension_parts.indexOf(\"Strongest\")) {\n\
    \                    extension_parts.updated(extension_parts.indexOf(\"Strongest\"\
    ), strength)\n                }\n            } else {\n                extension_parts\
    \ :+= part\n            }\n        }\n        if(extension_parts.contains(\"Strongest\"\
    )) {\n            val strength = extension_parts(extension_parts.indexOf(\"Strongest\"\
    )).toString.toUpperCase.lastIndexOf(\"Strongest\").toInt\n            val strength_str\
    \ = extension_parts(extension_parts.indexOf(\"Strongest\")).toString.toUpperCase\n\
    \            if(strength > extension_parts.indexOf(\"Fed\")) {\n             \
    \   extension_parts.updated(extension_parts.indexOf(\"Fed\"), strength)\n    \
    \        } else if(strength > extension_parts.indexOf(\"Cheese\")) {\n       \
    \         extension_parts.updated(extension_parts.indexOf(\"Cheese\"), strength)\n\
    \            } else if(strength > extension_parts.indexOf(\"AA\")) {\n       \
    \         extension_parts.updated(extension_parts.indexOf(\"AA\"), strength)\n\
    \            }\n        }\n        extension_parts.reverse.mkString(\".\")", " \
    \       // Write your code here\n        val strongest = extensions.getOrElse(extensions.size-1,\
    \ 0)\n        var strongest_names : List[String] = Nil\n        for(i <- 0 until\
    \ extensions.size-1){\n            val name = (extensions(i)).toLowerCase \n \
    \           val strength = name.charAt(0) - name.charAt(1)\n            val temp\
    \ = StrongestExtension(class_name +\".\"+extensions(i), extensions.drop(i+1))\n\
    \            if(temp._1.compareTo(strongest) > 0){\n                strongest\
    \ = temp._1\n                strongest_names = extensions.take(i)\n          \
    \  }\n        }\n        if(strongest_names.length > 1){\n            strongest_names(0)\n\
    \        }else{\n            strongest_names(0)\n        }", "        val strongest\
    \ = extensions.foldLeft(math.max(extensions.length)) { (max, name) =>\n      \
    \      val cap = name.toUpperCase - name.toLowerCase\n            val sm = name.toLowerCase\
    \ - name\n            cap / sm\n        }\n        \"$class_name.$strongest\"",
  "        // Your code here\n        val map = mutable.Map.empty[String, Int]\n \
    \       extensions.foreach { extension =>\n            val len = extension.length\n\
    \            val cap = extension.toCharArray.filter(_ >= 'A' && _ <= 'Z').length\n\
    \            val sm = extension.toCharArray.filter(_ >= 'a' && _ <= 'z').length\n\
    \            val value = cap - sm\n            map += extension -> (value)\n \
    \       }\n        val maxKey = map.toSeq.maxBy(_._1)._1\n        val maxValue\
    \ = map.get(maxKey)._1\n        val className = class_name.split(\".\").last\n\
    \        className + \".\" + maxKey", "        // Create a list of all extensions\
    \ of class name\n        val all_extensions = extensions.filter {\n          \
    \  x => x != class_name\n        }\n        // Find the maximum of the list with\
    \ filter\n        val max_extension = all_extensions.maxBy(x => x.length)\n  \
    \      // Create a list of all extensions of the maximum extension\n        val\
    \ max_extension_extensions = max_extension.filter(x => x != class_name)\n    \
    \    // Find the maximum of the list with filter\n        val max_extension_strength\
    \ = max_extension_extensions.maxBy(x => x.length)\n        // Create a list of\
    \ all extensions of the maximum extension\n        val max_extension_strength_extensions\
    \ = max_extension_strength.filter(x => x != class_name)\n        \n        //\
    \ Return the class name\n        class_name + \".\" + max_extension_strength_extensions.head",
  "        var num = 0\n        var extension = \"\"\n        extensions.foreach{x\
    \ => \n            if(x.equals(class_name.substring(0,x.length))){\n         \
    \       extension = x\n                num += 1\n            }\n        }\n  \
    \      if(num != 0){\n            extension +=  class_name.substring(extension.length\
    \ + 1)\n        }else{\n            extension = class_name.substring(0,extension.length)\n\
    \        }\n        return extension", "        val extensions_length = extensions.length\n\
    \        var max_strength = -1\n        var result: String = null\n        for(x<-0\
    \ to extensions_length-1){\n            if(max_strength < extensions(x).length\
    \ - 1){\n                max_strength = extensions(x).length - 1\n           \
    \     result = class_name + \".\" + extensions(x)\n            }\n        }\n\
    \        result", "        val extensions_map = extensions.map(e => (e, class_name)).toMap\n\
    \        extensions_map.values.sorted.headOption.getOrElse(\"\")", "        var\
    \ strength : List[String] = Nil\n        var current_extension : String = Nil\n\
    \        for(extension <- extensions){\n            val length = extension.length\n\
    \            val num_uppercase = length filter (c => c.isUpper)\n            val\
    \ num_lowercase = length filter (c => c.isLower)\n            val difference =\
    \ num_uppercase - num_lowercase\n            val strength_value = difference /\
    \ CAP\n            if(strength_value >= 0){\n                strength += extension\
    \ :: Nil\n                current_extension = extension\n            }\n     \
    \   }\n        if(strength.length > 1){\n            val length = current_extension.length\n\
    \            val num_uppercase = length filter (c => c.isUpper)\n            val\
    \ num_lowercase = length filter (c => c.isLower)\n            val difference =\
    \ num_uppercase - num_lowercase\n            val strength_value = difference /\
    \ CAP\n            if(strength_value < 0){\n                strength.sortBy(x\
    \ => x.length)\n                for(i <- 0 until strength.length){\n         \
    \           if(strength(i) == strength_value){\n                        strength(i)\n\
    \                    }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until strength.length){\n            if(strength(i) == strength_value(1)){\n\
    \                current_extension\n            }\n        }", "        var strongest_extension\
    \ : String = extensions(0) \n        var strength : Int = 0 \n        var i :\
    \ Int = 0 \n        var j : Int = 0 \n        var strength_count : Int = 0 \n\
    \        while (i < extensions.size && j < extensions.size) {\n            val\
    \ extension = extensions(i).toLowerCase \n            val strength_char = extension.count(x\
    \ => x.isUpper) \n            if (strength_char == 0)\n                i ++ j\
    \ ++ 1\n            else\n                strength_count += (strength_char * extension.count(x\
    \ => x.isLower)) \n            if (strength_count > strength) {\n            \
    \    strongest_extension = extensions(j) \n                strength = strength_count\
    \ \n            }\n            j ++ 1\n        }\n        return class_name +\
    \ \".\" + strongest_extension", "        val map = extensions groupBy { _ map\
    \ { _.toUpperCase } }.map { case (uppers, elems) =>\n            (uppers.head,\
    \ uppers.last, elems.size)\n        }.toMap\n        if (map.size == 0) {\n  \
    \          \"\"\n        }\n        else {\n            class_name + map.values.sortWith(_._3\
    \ < _._3).head._3\n        }", "        // The most common extension should be\
    \ the first.\n        var most_common = \"\"\n        val counter = scala.collection.mutable.Map[String,\
    \ Int]()\n        for (extension <- extensions) {\n            val counter_size\
    \ = counter.get(extension)\n            if (counter_size == null) {\n        \
    \        counter.put(extension, 1)\n            } else {\n                counter.put(extension,\
    \ counter_size + 1)\n            }\n        }\n        counter.foreach {\n   \
    \         case (extension, count) => if (count > counter(most_common)) most_common\
    \ = extension\n        }\n        class_name + \".\" + most_common", '        //
    TODO: Fill in the code here', "        \n        val class_name = class_name.trim\n\
    \        val extensions = extensions.toSet\n        val length = extensions.length\n\
    \        val extensions_length = extensions.length\n        val max_length = extensions_length\
    \ - 1\n        val max_score = max_length.toDouble\n\n        var strongest =\
    \ \"\"\n        var strength = max_score\n        var index = 0\n        while(strength\
    \ > 0.0 && index < max_length) {\n            val extension = extensions.apply(index)\n\
    \            val extension_length = extension.length\n            val extension_score\
    \ = extension_length - strength\n            val extension_strength = extension_length\
    \ - strength\n            if(extension_score > strength) {\n                strongest\
    \ = extension\n                strength = extension_score\n            }\n   \
    \         index += 1\n        }\n        strongest", "        val result = extensions\
    \ match {\n            case Nil => throw new IllegalArgumentException\n      \
    \      case h :: t => if (h.matches(\"[A-Z]*\"))\n                val cap = h.length\n\
    \                t.filter(_.matches(\"[a-z]*\")).map(_.length).sum - cap match\
    \ {\n                    case 0 => h\n                    case s => h.substring(0,\
    \ h.length - s) + s\"$cap$s\"\n                }\n            case _ => throw\
    \ new IllegalArgumentException\n        }\n        class_name + result", "   \
    \     \n        val s = \"\"\n        val map = new mutable.HashMap[Int, String]()\n\
    \        extensions.foreach{e => {\n            val i = e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a')\n            val l = e.toLowerCase.count(_\
    \ == 'a')\n            val value = if (i == 0) \"\" else (i / l).toString\n  \
    \          val k = if (value < map.get(value)) value else map.get(value)\n   \
    \         map.put(k, e)\n        }}\n        val max = map.values.toList.max\n\
    \        val maxValue = map.get(max)\n        val k = if (maxValue == \"\") \"\
    \" else maxValue\n        s = s + k\n        val res = \"%s.%s\".format(class_name,\
    \ s)\n        res", "        var current_extension = extensions.reduceLeft(\"\"\
    )((prev, extension) => prev + extension.substring(0, 1))\n        var strongest\
    \ = -1\n        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            if (current_extension.contains(extension) && current_extension.substring(current_extension.length\
    \ - extension.length).equalsIgnoreCase(extension)) {\n                strongest\
    \ = current_extension.substring(current_extension.length - extension.length).toInt\
    \ - extension.toInt\n            }\n            if (strongest > strongest_extension.length)\
    \ {\n                strongest_extension = current_extension.substring(current_extension.length\
    \ - extension.length)\n            }\n        }\n        return class_name + \"\
    .\" + strongest_extension", "        // your code goes here\n        var index\
    \ = 0\n        var best = 0\n        var max = 0\n        for (e <- extensions)\
    \ {\n            val c = e.toUpperCase().count(_ == 'A') - e.toUpperCase().count(_\
    \ == 'B')\n            val l = e.toUpperCase().count(_ == 'a') - e.toUpperCase().count(_\
    \ == 'b')\n            val n = e.toUpperCase().count(_ == 'C') - e.toUpperCase().count(_\
    \ == 'D')\n            val m = e.toUpperCase().count(_ == 'C') - e.toUpperCase().count(_\
    \ == 'D')\n            if (c < best) {\n                index = e\n          \
    \      best = c\n            }\n            if (l < best) {\n                index\
    \ = e\n                best = l\n            }\n            if (n < best) {\n\
    \                index = e\n                best = n\n            }\n        \
    \    if (m < best) {\n                index = e\n                best = m\n  \
    \          }\n        }\n        if (best == 0) {\n            \"\"\n        }\
    \ else {\n            class_name + \"_\" + index\n        }", "        var strength\
    \ = 0\n        var strongest_extension = \"\"\n\n        extensions.foreach(extension\
    \ => {\n            if(extension.contains(\"_\")){\n                strength =\
    \ extension.split(\"_\").filter(_ => _.toUpperCase == _).length\n            \
    \    if(strength > strongest_extension.length){\n                    strongest_extension\
    \ = extension\n                }\n            }\n        })\n        val class_with_strongest_extension\
    \ = class_name + \"_\" + strongest_extension\n        if(extensions.filter(x =>\
    \ x.split(\"_\").length == 1).length == 0){\n            return class_with_strongest_extension\n\
    \        }\n        var secondStrongest_extension = \"\"\n        extensions.foreach(extension\
    \ => {\n            if(extension.contains(\"_\")){\n                strength =\
    \ extension.split(\"_\").filter(_ => _.toUpperCase == _).length\n            \
    \    if(strength > strongest_extension.length){\n                    secondStrongest_extension\
    \ = extension\n                }\n            }\n        })\n        if(secondStrongest_extension.length\
    \ > 0){\n            class_with_strongest_extension += \".\" + secondStrongest_extension\n\
    \        }\n        return class_with_strongest_extension", "        val list\
    \ = extensions.map(_.replaceAll(\"[^a-z]\", \"\").toLowerCase).sorted\n      \
    \  val first = extensions.find(e => list.indexOf(e.toLowerCase) > list.indexOf(_.replaceAll(\"\
    [^a-z]\", \"\").toLowerCase))\n        val index = list.indexOf(first.toLowerCase)\n\
    \        val strength = list.length - index - 1\n        class_name.take(class_name.lastIndexOf('.')).dropRight(1).mkString.concat(\"\
    .\").concat(extensions(index))", '        //TODO: fill this in', "        val\
    \ map = new mutable.HashMap[String, Int]()\n        extensions.foreach{x => map.put(x.toUpperCase(),\
    \ (map.getOrElse(x.toUpperCase(), 0) + 1)) }\n\n        if (map.size == extensions.size)\
    \ {\n            val strongest = map.filter(x => x._2 > map.getOrElse(x._2, 0)).sortBy(x\
    \ => -x._1).head._1\n            (class_name + \".\" + strongest)\n        } else\
    \ {\n            val strongest = extensions.filter(x => x.toUpperCase.head >=\
    \ map.getOrElse(x.toUpperCase(), 0)).sortBy(x => -x.toUpperCase.head).head\n \
    \           (class_name + \".\" + strongest)\n        }", "        \n        val\
    \ map = new mutable.HashMap[Int, String]()\n        val strongest = extensions(0)\n\
    \        extensions.foreach{\n            ext => \n                val length\
    \ = ext.toList.size\n                if(length == 1) map.put(1, ext)\n       \
    \         else if(map.contains(length)) {\n                    map.put(length\
    \ - 1, ext)\n                } else {\n                    map.put(length, ext)\n\
    \                }\n        }\n        map.maxBy(_._1)", "        val myExtensions\
    \ = extensions.map(ext => ext.substring(0, ext.length/2))\n        val upperLetters\
    \ = myExtensions.map(ext => ext.toUpperCase.size)\n        val lowerLetters =\
    \ myExtensions.map(ext => ext.toUpperCase.length)\n        val strength = upperLetters.zip(lowerLetters).map(_._1-_._2)\n\
    \        val highestStrength = strength.max\n        val extension = extensions.find(ext\
    \ => ext.toUpperCase.size == highestStrength)\n        if (extension != None)\
    \ s\"$class_name.$extension\" else \"No extension\"", "        val map = Map(\
    \ extensions zip extensions.map(x => x.filter(i => i.length >=2).length).toMap\
    \ )\n        val maxStrength = extensions match {\n            case Nil => -1\n\
    \            case h :: t => h match {\n                case n if n.length >=2\
    \ => map(n) match {\n                    case n if n.size > maxStrength => maxStrength\n\
    \                    case n => map(n)\n                }\n                case\
    \ _ => -1\n            }\n        }\n        class_name + extensions.foldLeft(\"\
    \")( (s, ext) => {\n            val c = ext.filter(i => i.length >=2).length\n\
    \            if(maxStrength < 0) \"\" else s + \".\" + ext\n        }) + extensions.last",
  '        ', "        // Your code goes here!\n        val extensions_map = extensions.groupBy(_).mapValues(_.map(_).toList).toMap\n\
    \n        val class_names = extensions_map.get(class_name).map(_._2).toList\n\n\
    \        if (class_names.length == 0){\n            \"No extensions found for\
    \ \" + class_name\n        }else if (class_names.length == 1) {\n            class_name(class_names(0))\n\
    \        }else if (class_names.length >= 2) {\n            val max_extensions\
    \ = max_extension(class_names, extensions_map)\n            class_name(max_extensions)\n\
    \        }", "        // Create a HashMap to store class/extension pairs\n   \
    \     // and iterate through extensions list\n        val class_extensions = mutable.HashMap[String,\
    \ String]()\n        for (e <- extensions)\n            class_extensions.put(e,\
    \ class_name + \".\" + e);\n        // Get the max element from hashmap\n    \
    \    // Iterate through the hashmap and see which element has the highest value\n\
    \        // and return it\n        val max_element = class_extensions.maxBy(_._2)._1\n\
    \        val max_element_class_name = class_extensions(max_element)\n        //\
    \ Remove the max element from hashmap\n        class_extensions.remove(max_element)\n\
    \        return max_element_class_name", "        val extensions_count = extensions.toList.length\n\
    \        if (extensions_count == 0) {\n            return class_name\n       \
    \ } else if (extensions_count == 1) {\n            val extension = extensions.toList(0)\n\
    \            if (extension.contains(\"SM\")) {\n                val upper = extension.substring(0,\
    \ extension.indexOf('SM')).toCharArray\n                val lower = extension.substring(extension.indexOf('SM')\
    \ + 2)\n                var upper_count = 0\n                var lower_count =\
    \ 0\n                for (c <- upper) {\n                    if (c >= 'A' && c\
    \ <= 'Z') {\n                        upper_count += 1\n                    }\n\
    \                }\n                for (c <- lower) {\n                    if\
    \ (c >= 'a' && c <= 'z') {\n                        lower_count += 1\n       \
    \             }\n                }\n                val strength = (upper_count)\
    \ - (lower_count)\n                if (strength >= 0) {\n                    return\
    \ class_name + \".\" + extension + extension.substring(upper.size, extension.size)\n\
    \                } else {\n                    return class_name + \".\" + extension\
    \ + extension.substring(upper.size, extension.size) + \"SM\"\n               \
    \ }\n            }\n        }\n        var max_strength = 0\n        val extensions_counter\
    \ = mutable.Map[String, (Int, Int)]()\n        for (extension <- extensions) {\n\
    \            val extension_parts = extension.split(\"SM\")\n            if (extensions_counter.contains(extension))\
    \ {\n                val old_count = extensions_counter(extension)._1\n      \
    \          val new_count = extension_parts.head.toInt - old_count.toInt\n    \
    \            if (new_count < 0) {\n                    max_strength = max_strength\
    \ - old_count.toInt\n                } else {\n                    max_strength\
    \ = max_strength + new_count.toInt\n                }\n            } else {\n\
    \                val new_count = extension_parts.head.toInt\n                extensions_counter(extension)\
    \ = ((new_count, extensions_count.toInt))\n                max_strength = max_strength\
    \ + new_count.toInt\n            }\n        }\n        val strength_of_extension\
    \ = max_strength / extensions_count.toInt\n        val best_extensions = extensions_counter.values.minBy\
    \ { case (strength, _) => strength }\n        if (strength_of_extension < 0.0)\
    \ {\n            return StrongestExtension(class_name, best_extensions._2)\n \
    \       } else {\n            best_extensions._1\n        }", "       var strongest_extension\
    \ = \"\"\n       var strongest_extension_strength = -1\n       extensions.foreach\
    \ {\n          ext =>\n          if(ext.matches(s\"${class_name.capitalize}.${ext.substring(0,\
    \ 1).toUpperCase}.*\")){\n             strongest_extension = ext\n           \
    \  strongest_extension_strength = ext.substring(0, 1).length\n          }\n  \
    \     }\n       if(strongest_extension_strength > 0) return strongest_extension\n\
    \       extensions.sortWith(_ < _)\n        .find(_.matches(s\"${class_name.capitalize}.*\"\
    ))", "        extensions match {\n            case Nil => \"Slices\"\n       \
    \     case head::tail => {\n                val cap = head.filter(c => c.isUpper).length\n\
    \                val sm = head.filter(c => c.isLower).length\n               \
    \ cap - sm match {\n                    case x if x > 0 => class_name + head.mkUpperCase\n\
    \                    case x if x > 0 => head.mkUpperCase\n                   \
    \ case x if x > 0 => class_name + tail.mkUpperCase\n                    case x\
    \ if x < 0 => head.mkUpperCase\n                    case x if x < 0 => class_name\
    \ + tail.mkUpperCase\n                    case x if x < 0 => class_name + head.mkUpperCase\
    \ + tail.mkUpperCase\n                    case x if x < 0 => class_name + head.mkUpperCase\n\
    \                    case x if x < 0 => class_name + tail.mkUpperCase\n      \
    \              case x => class_name + head.mkUpperCase + tail.mkUpperCase\n  \
    \              }\n            }\n        }", "        var strength = 0\n     \
    \   var highest_strength = List[String]()\n        var strongest_name = List[String]()\n\
    \n        extensions.foreach { ext =>\n            val count = ext.map(x => x.toUpperCase.count(_\
    \ == x.toUpperCase.head)).sum\n            val strength = count / (ext.length\
    \ - 1)\n            if (strength > highest_strength.lastOption.getOrElse(-1))\n\
    \            {\n                highest_strength = List(strongest_name)\n    \
    \            strongest_name = List(ext)\n            }\n            else if (strength\
    \ == highest_strength.lastOption.getOrElse(-1)) {\n                strongest_name\
    \ ::: List(ext)\n            }\n        }\n        val strongest_extension = List(strongest_name.last)\n\
    \        class_name +: strongest_extension", "        extensions match {\n   \
    \         case Nil => class_name \n            case extension::rest => extension.init.toLowerCase\
    \ - extension.last.toLowerCase match {\n                case i if i > 0 => class_name\
    \ + \".\" + extensions.lift(i).head\n                case _ => class_name\n  \
    \          }\n        }", "        \n        def cmp(x: Int, y: Int) : Int = {\n\
    \            val diff = if (x<y) -1 else if (x>y) 1 else 0\n            diff\n\
    \        }\n        \n        var strongest: String = \"NOT_SET\"\n        var\
    \ strongest_str: String = \"NOT_SET\"\n        var extension_length = extensions.length\n\
    \        var i = 0\n        \n        while (i < extension_length && extensions(i)\
    \ != \"\") {\n            val class_name_length = class_name.length\n        \
    \    val extension = extensions(i)\n            val extension_length = extension.length\n\
    \            val extension_lowercase_letters = extension.substring(0, extension.length-2)\n\
    \            val extension_uppercase_letters = extension.substring(extension.length-2)\n\
    \            var extension_uppercase_letters_length = extension_uppercase_letters.length\n\
    \            \n            val extension_lowercase_letters_length = extension_lowercase_letters.length\n\
    \            \n            val extension_strength = if (extension_uppercase_letters_length\
    \ == 0) -1 else if (extension_uppercase_letters_length < extension_lowercase_letters_length)\
    \ -1 else 0\n            val extension_lowercase_letter_strength = if (extension_uppercase_letters_length\
    \ == 0) -1 else if (extension_uppercase_letters_length < extension_lowercase_letters_length)\
    \ -1 else 0\n            \n            val extension_strength_multiplier = if\
    \ (extension_strength == 0) 1 else extension_strength\n            val extension_lowercase_letter_strength_multiplier\
    \ = if (extension_lowercase_letter_strength == 0) 1 else extension_lowercase_letter_strength\n\
    \            \n            val strength = extension_strength_multiplier * extension_strength\
    \ + extension_lowercase_letter_strength_multiplier * extension_lowercase_letter_strength\n\
    \            val strength_str = strength.toString\n            \n            if\
    \ (strength > strongest) {\n                strongest = strength\n           \
    \     strongest_str = strength_str\n            }\n            \n            i\
    \ += 1\n        }\n        \n        if (strongest_str != \"NOT_SET\") {\n   \
    \         class_name + \".\" + strongest_str\n        }\n        else {\n    \
    \        class_name\n        }", "        val map = extensions.toMap\n       \
    \ val length = map.size\n        var count = 0\n        var strongest = 0\n  \
    \      for (c <- map.keys) {\n            val cc = c.toUpperCase\n           \
    \ val ccc = c.toLowerCase\n            val sc = map.get(c)\n            val ccs\
    \ = map.get(ccc)\n            if (cc != ccc) {\n                var strongest\
    \ = 0\n                if (cc == ccc) {\n                    strongest = -1\n\
    \                }\n            }\n            if (cc != ccc && sc != sc) {\n\
    \                count += 1\n                val c = math.abs(sc - sc)\n     \
    \           if (c > strongest) {\n                    strongest = c\n        \
    \        }\n            }\n        }\n        if (strongest == 0) {\n        \
    \    class_name\n        }\n        else {\n            class_name + \".\" + map.keys.toList.sortWith((x,y)\
    \ => math.abs(x - y)).head\n        }", "        if(extensions.isEmpty) return\
    \ class_name\n        val extension_counter = extension_counter(extensions)\n\
    \        var strength = -1\n        var strongest_extension = class_name + \"\
    _\" + extension_counter.getOrElse(\"\")\n        val sorted = extensions.toList.sortWith(_.length\
    \ >= extension_counter.getOrElse(0))\n        sorted.foreach(extension => {\n\
    \            if(strength >= 0)\n                if(strength > extension_counter.getOrElse(0)\
    \ && extension_counter.getOrElse(0) == extension.length)\n                   \
    \ strength = extension_counter.getOrElse(0) // found a better extension\n    \
    \        else\n                if(extension.length == extension_counter.getOrElse(0))\n\
    \                    strength = extension_counter.getOrElse(0) // found a better\
    \ extension\n        })\n        if(strength == -1) strongest_extension = class_name\
    \ + extensions.last\n        return strongest_extension", "        \n        var\
    \ extensions = extensions \n        val classes : List[String] = extensions \n\
    \        val strength : List[Int] = extensions.map(_.length)\n        val max_strength\
    \ = strength.max\n        val strength_of_max_strength = max_strength\n      \
    \  val index_of_max_strength = strength_of_max_strength.indexWhere( _ => max_strength\
    \ == _)\n        val class_name = class_name\n        var final_name = class_name\n\
    \        // if the index of the max strength value is 0, that means no extensions\
    \ are present, \n        // so just return the class name\n        if(index_of_max_strength\
    \ == 0){\n            return final_name\n        }\n        val index = strength_of_max_strength\
    \ - index_of_max_strength + 1\n        var extension = extensions(index)\n   \
    \     var class_index = extensions.indexOf(extension)\n        for(i <- 0 until\
    \ extension.length)\n        {\n            var letter = extension(i)\n      \
    \      var new_letter = extension(i)\n            var temp_letter = letter\n \
    \           while(new_letter == temp_letter)\n            {\n                new_letter\
    \ = extension(class_index)\n                temp_letter = new_letter\n       \
    \     }\n            final_name += letter\n            class_index += 1\n    \
    \    }\n        \n        return final_name", "        // Initialize a list to\
    \ hold all the classes that we have\n        // found so far and a counter for\
    \ the number of times we\n        // have seen each class\n        var classes:\
    \ List[String] = Nil\n        var classes_count: Map[String, Int] = Nil\n    \
    \    \n        // Loop over the extensions and add the ones that we haven't\n\
    \        // seen yet\n        for (ex <- extensions){\n            classes_count\
    \ += (ex -> 0)\n        }\n        \n        // Loop over the extensions again\
    \ and increment the count\n        // for each class that we have seen so far\
    \ so we can\n        // determine which extension is the strongest\n        for\
    \ (ex <- extensions){\n            if (classes_count.contains(ex)){\n        \
    \        classes_count(ex) += 1\n            }\n        }\n        \n        //\
    \ Check if there are any classes with only 1 entry\n        // and that entry\
    \ is greater than the other entries\n        val only_one_entry = classes_count.filter\
    \ { case (k,v) => v == 1 } \n        if (only_one_entry.length > 0 && only_one_entry.exists(x\
    \ => x._2 > 1)){\n            // There were more than one extension and \n   \
    \         // the extensions with the lowest strength \n            // were the\
    \ strongest, so return the first one\n            val strongest_extension = only_one_entry.minBy(x\
    \ => x._2)\n            \n            // Return the first extension that we found\n\
    \            // in the list of extensions\n            class_name + \".\" + strongest_extension._1\n\
    \        }\n        else {\n            // There are no extensions with 1 entry\
    \ in the map\n            // so no extensions had the lowest strength so \n  \
    \          // return the class name\n            class_name\n        }", "   \
    \     // Write your code here\n        var strongest_extension = extensions(0)\n\
    \        for (i<-1 to extensions.length-1) {\n            if(extensions(i)==strongest_extension)\
    \ {\n                strongest_extension = extensions(i+1)\n            } else\
    \ {\n                break\n            }\n        }\n        return class_name+\"\
    .\"+strongest_extension", "        var strongest_extension = extensions(0)\n \
    \       var strength = extensions(0).length\n        var i = extensions.indexOf(strongest_extension)\
    \ + 1\n        while (i != extensions.size) {\n            val cap = extensions(i).length\n\
    \            val sm = strongest_extension.length\n            val strength = cap\
    \ - sm\n            if (strength > strength) {\n                strongest_extension\
    \ = extensions(i)\n                strength = strongest_extension.length\n   \
    \             i = extensions.indexOf(strongest_extension) + 1\n            } else\
    \ if (strength == strength) {\n                i = i + 1\n            }\n    \
    \    }\n        s\"$class_name.$strongest_extension\"", "        var maxStrongest\
    \ = 0\n        var maxStrongExtension = \"\"\n        var strongExtensionCounter\
    \ = 0\n        var nameOfStrongest = \"\"\n\n        extensions.foreach {\n  \
    \          extension => {\n                var strongest = extension.last.toUpperCase\
    \ - extension.last.toLowerCase\n                if (strongest > maxStrongest)\
    \ {\n                    maxStrongest = strongest\n                    strongExtensionCounter\
    \ = extension.last.length\n                    nameOfStrongest = extension\n \
    \               }\n            }\n        }\n\n        if (strongExtensionCounter\
    \ > maxStrongest) {\n            return class_name + nameOfStrongest + extensions.filter(_\
    \ => _.length == strongExtensionCounter).last\n        } else {\n            return\
    \ class_name\n        }", "        var strongest_extension = \"\"\n        var\
    \ max_strength = 0\n        extensions.foreach{ext => ext.toUpperCase.count(uppercase\
    \ => uppercase >= max_strength) match {\n            case false => max_strength\
    \ = ext.toUpperCase.count(uppercase => uppercase >= max_strength)\n          \
    \  case true => max_strength = ext.toUpperCase.count(uppercase => uppercase >=\
    \ max_strength)\n        }}\n        extensions.foreach{ext => ext.toLowerCase.count(lowercase\
    \ => lowercase >= max_strength) match {\n            case false => max_strength\
    \ = ext.toLowerCase.count(lowercase => lowercase >= max_strength)\n          \
    \  case true => max_strength = ext.toLowerCase.count(lowercase => lowercase >=\
    \ max_strength)\n        }}\n        class_name match {\n            case x if\
    \ max_strength == 0 =>  strongest_extension = x\n            case x if max_strength\
    \ == 1 =>  strongest_extension = x\n            case x if max_strength == 2 =>\
    \  strongest_extension = x\n            case x if max_strength == 3 =>  strongest_extension\
    \ = x\n            case x if max_strength == 4 =>  strongest_extension = x\n \
    \           case x if max_strength == 5 =>  strongest_extension = x\n        \
    \    case x if max_strength == 6 =>  strongest_extension = x\n            case\
    \ x if max_strength == 7 =>  strongest_extension = x\n            case x if max_strength\
    \ == 8 =>  strongest_extension = x\n            case x if max_strength == 9 =>\
    \  strongest_extension = x\n            case x if max_strength == 10 =>  strongest_extension\
    \ = x\n            case x if max_strength == 11 =>  strongest_extension = x\n\
    \            case x if max_strength == 12 =>  strongest_extension = x\n      \
    \      case x if max_strength == 13 =>  strongest_extension = x\n            case\
    \ x if max_strength == 14 =>  strongest_extension = x\n            case x if max_strength\
    \ == 15 =>  strongest_extension = x\n            case x if max_strength == 16\
    \ =>  strongest_extension = x\n            case x if max_strength == 17 =>  strongest_extension\
    \ = x\n            case x if max_strength == 18 =>  strongest_extension = x\n\
    \            case x if max_strength == 19 =>  strongest_extension = x\n      \
    \      case x if max_strength == 20 =>  strongest_extension = x\n            case\
    \ x if max_strength == 21 =>  strongest_extension = x\n            case x if max_strength\
    \ == 22 =>  strongest_extension = x\n            case x if max_strength == 23\
    \ =>  strongest_extension = x\n            case x if max_strength == 24 =>  stron",
  "        val map = Map[Int, List[String]]()\n        var count = 1\n        for\
    \ (e <- extensions) {\n            val c = e.toList.filter(x => x.matches(\"[A-Z]\"\
    )).length\n            val s = e.toList.filter(x => x.matches(\"[a-z]\")).length\n\
    \            val a = c - s\n            if (map.getOrElse(a, List[String]()) ne\
    \ List(e)) {\n                map.put(a, List(e))\n                count += 1\n\
    \            } else {\n                map.getOrElse(a, List(e))\n           \
    \ }\n        }\n        if (map.size > 1) map.values.sortBy(x => x.length).head._1\n\
    \        else map.values.sortBy(x => x.length).head", "        var maxStrength\
    \ = 0\n        var longestExtension = \"\"\n        var longestExtensionLength\
    \ = 0\n        var maxStrengthClass = 0\n        var maxStrengthExtension = 0\n\
    \        for(str <- extensions) {\n            val strengh = str.count(_ > ('A'\
    \ + str.length - 1)) - str.count(_ == 'A' + str.length)\n            if(strengh\
    \ > maxStrength) {\n                longestExtension = str\n                longestExtensionLength\
    \ = str.length\n                maxStrength = strengh\n                maxStrengthExtension\
    \ = str\n                maxStrengthClass = class_name\n            }\n      \
    \      if(strengh > maxStrengthClass && str.contains(class_name)) {\n        \
    \        maxStrengthClass = strengh\n                maxStrengthExtension = str\n\
    \            }\n        }\n        if(maxStrengthClass == 0) {\n            longestExtension\
    \ = longestExtension.substring(longestExtension.length - longestExtensionLength)\n\
    \        } else if(maxStrengthExtension == 0) {\n            maxStrengthExtension\
    \ = longestExtension.substring(longestExtension.length - longestExtensionLength)\n\
    \        }\n        maxStrengthClass - maxStrengthExtension", "        val classes\
    \ : Set[String] = new HashSet[String]();\n        for(i <- 0 until extensions.length)\
    \ {\n            val extension = extensions.charAt(i);\n            val class_name\
    \ = extensions.substring(0, i);\n            val class_with_extension = class_name\
    \ + extension;\n            if(classes.contains(class_with_extension)) {\n   \
    \             // We already have this extension. Continue\n            } else\
    \ {\n                // We haven't seen this extension yet. Add it to the set\
    \ of classes.\n                classes.add(class_with_extension);\n          \
    \  }\n        }\n        val classes_with_extension = classes.toList;\n      \
    \  if(classes_with_extension.isEmpty) {\n            return class_name;\n    \
    \    }\n        val highest_strength : Int = -1;\n        var highest_class_with_extension\
    \ : String = \"\";\n        for(class_with_extension <- classes_with_extension)\
    \ {\n            val c = class_name.charAt(0);\n            val l = class_name.charAt(1);\n\
    \            val strength = c.toUpperCase().length - l.toLowerCase();\n      \
    \      if(strength > highest_strength) {\n                highest_strength = strength;\n\
    \                highest_class_with_extension = class_with_extension;\n      \
    \      }\n        }\n        return highest_class_with_extension;", "        val\
    \ classes = new mutable.HashSet[String]()\n        val extensions_upper = new\
    \ mutable.HashSet[String]()\n        val extensions_lower = new mutable.HashSet[String]()\n\
    \        val class_upper = class_name.toUpperCase()\n        val class_lower =\
    \ class_name.toLowerCase()\n        extensions.foreach{ extension =>\n       \
    \     val ext_upper = extension.toUpperCase()\n            val ext_lower = extension.toLowerCase()\n\
    \            if (classes.contains(ext_upper)) {\n                val strength\
    \ = classes.count(ext_upper) / classes.size\n                if (strength > extensions_upper.count(ext_upper)\
    \ / extensions_upper.size) {\n                    extensions_upper.update(ext_upper)\n\
    \                }\n            } else {\n                classes.add(ext_upper)\n\
    \            }\n            if (classes.contains(ext_lower)) {\n             \
    \   val strength = classes.count(ext_lower) / classes.size\n                if\
    \ (strength > extensions_lower.count(ext_lower) / extensions_lower.size) {\n \
    \                   extensions_lower.update(ext_lower)\n                }\n  \
    \          } else {\n                classes.add(ext_lower)\n            }\n \
    \       }\n\n        if (classes.size == 1) {\n            val strength = classes.count(class_upper)\
    \ / classes.size\n            if (strength > extensions_upper.count(class_upper)\
    \ / extensions_upper.size) {\n                extensions_upper.update(class_upper)\n\
    \            }\n        } else if (classes.size == 2) {\n            val strength\
    \ = extensions_lower.count(class_lower) / extensions_lower.size\n            if\
    \ (strength > extensions_upper.count(class_lower) / extensions_upper.size) {\n\
    \                extensions_upper.update(class_lower)\n            }\n       \
    \ } else {\n            val strength = extensions_upper.count(class_upper) / extensions_upper.size\n\
    \            if (strength > extensions_lower.count(class_lower) / extensions_lower.size)\
    \ {\n                extensions_lower.update(class_lower)\n            }\n   \
    \     }\n\n        val strength = extensions_lower.count(class_lower) / extensions_lower.size\n\
    \        if (strength > extensions_upper.count(class_lower) / extensions_upper.size)\
    \ {\n            extensions_upper.update(class_lower)\n        }\n\n        classes.map(class_name\
    \ + \"_\" + _).map(_.toUpperCase()).map(_.toLowerCase()).\n            filter(_.equals(class_name))\n\
    \            .toList.map(_.concat(\".\" + _))\n            .toList.max", "   \
    \     var numCaps = 0\n        var numSms = 0\n        var maxStrongest = \"\"\
    \n        extensions.foreach( e => {\n            if (e.matches(\"\"\"[A-Z]\"\"\
    \")) numCaps += 1\n            if (e.matches(\"\"\"[a-z]\"\"\")) numSms += 1\n\
    \        })\n        numCaps -= numSms\n        if (numCaps == 0) maxStrongest\
    \ = class_name\n        else if (numSms == 0) maxStrongest = class_name + extensions.mkString(\"\
    .\")\n        else if (numCaps < numSms) maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(0).mkString(\".\")\n        else maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(1).mkString(\".\")\n        return maxStrongest", "        var max_ext\
    \ = 0\n        var ext_index = 0\n        for(e <- extensions){\n            if(e.length==(class_name.count(_==e(0)).toDouble/class_name.length))\n\
    \            {\n                if(e.count(_==e(0))>max_ext){\n              \
    \      max_ext=e.count(_==e(0))\n                    ext_index = extensions.indexof(e)\n\
    \                }\n            }\n        }\n        return ((class_name + \"\
    .\" + extensions(ext_index)).split(\"\")).slice(0,max_ext+1).mkString(\"\")",
  '        // Your code here', "        val map = extensions.toList.toMap\n      \
    \  var max = 0\n        var maxExtension = \"\"\n        for(x <- extensions)\
    \ map.get(x.toLowerCase).foreach(y => {\n            val strength = x.toUpperCase.toCharArray.count(x\
    \ => x.toUpperCase.equals(y))/x.length.toDouble\n            if(strength > max)\
    \ {\n                max = strength\n                maxExtension = y\n      \
    \      }\n        })\n        class_name + \".\" + maxExtension", "        val\
    \ extensions_str = extensions.map(x => x.toUpperCase).mkString(\".\")\n      \
    \  val splitted = class_name.split(\".\")\n        splitted match {\n        \
    \    case List(x) => x\n            case _ => throw new Exception(\"Incorrect\
    \ name!\")\n        }\n        splitted.foldLeft(\".\")(_.head + \"$\" + _.tail.map(_.toUpperCase).mkString(\"\
    .\") + \".\" + extensions_str)", "      val counts = Map(extension.head.capitalize\
    \ -> extension.count(c => c.isUpper), \n                       extension.head.capitalize\
    \ -> extension.count(c => c.isLower))\n      val strength = extension match {\n\
    \        case Nil => -1\n        case list if list.size == 1 => counts(list(0))\n\
    \        case list if list.size > 1 =>\n          val max = (counts(list(0)) -\
    \ counts(list(1))).max(0)\n          (list[0] - list[list.size - 1])\n      }\n\
    \      (class_name + \".\" + extensions.map(e => e.getClass.getSimpleName + \"\
    $\" + e).\n          foldLeft(\"\")( (acc, e) => acc + (\"|\" + e)).substring(2)\
    \ + \n         s\"$${strength}\"\n      ).split('|').last", "        // TODO:\
    \ Write your code here.\n        val class_strongest = mutable.HashMap[Int, Int]()\n\
    \        val extension_strongest = mutable.HashMap[Int, Int]()\n        for (extension\
    \ <- extensions) {\n            var class_index = class_name.lastIndexOf(extension)\n\
    \            var extension_index = extension.lastIndexOf(class_name)\n       \
    \     val str_class = class_name.substring(class_index + 1, class_index + CAP.size)\n\
    \            val str_extension = extension.substring(extension_index + 1, extension_index\
    \ + SM.size)\n            val class_strength = CAP.size - SM.size + (CAP.size\
    \ - CAP.size)\n            if (class_strength > class_strongest.getOrElse(class_index,\
    \ class_strength)) {\n                class_strongest.put(class_index, class_strength)\n\
    \            }\n            if (extension_strength > extension_strongest.getOrElse(extension_index,\
    \ extension_strength)) {\n                extension_strongest.put(extension_index,\
    \ extension_strength)\n            }\n        }\n        extension_strongest.max\
    \ foreach {\n            case (extension, strength) => class_strongest.get(extension)\
    \ match {\n                case Some(strength) =>\n                    val class_name\
    \ = class_name.substring(0, class_index)\n                    val extension_name\
    \ = extension.substring(0, extension_index)\n                    \"$class_name.$extension_name\"\
    \n                case None =>\n                    val class_name = class_name.substring(0,\
    \ class_index)\n                    \"$class_name\"\n            }\n        }",
  "        val strongest_extensions = extensions.foldLeft(Map[String, Int]()) { (prev,\
    \ curr) =>\n            val cap = curr.toList.count(x => x.isUpper)\n        \
    \    val sm = curr.toList.count(x => x.isLower)\n            (prev + (curr ->\
    \ (cap - sm)))\n        }\n        val max_value = strongest_extensions.getOrElse(class_name,\
    \ 0)\n        val max_key = strongest_extensions.keys.max\n        strongest_extensions(max_key)\
    \ + class_name + max_key", "        def checkForStrength(extensionName : String)\
    \ : Int = {\n          val parts = extensionName.split(\"_\")\n          val name\
    \ = parts(0)\n          val strength = parts(1).size.toDouble\n          (strength\
    \ / name.length)\n        }\n        def sortByStrength(extensionName : String)\
    \ : Int = {\n          checkForStrength(extensionName)\n        }\n        val\
    \ newList = extensions.sortWith(sortByStrength).reverse\n        newList.takeWhile(checkForStrength).last",
  "        // TODO: Your code here\n        val s = extensions.length.toDouble\n \
    \       if(s < 0){\n            return class_name\n        }\n        val c =\
    \ extensions.length.toDouble\n        if(c <= 0){\n            return class_name\n\
    \        }\n        val c1 = (c - 1).toDouble\n        val c2 = (c1 + 1).toDouble\n\
    \        val c3 = c1 + c2\n        val c4 = c1 + c3\n        val c5 = c1 + c4\n\
    \        val c6 = c1 + c5\n        val c7 = c1 + c6\n        val c8 = c1 + c7\n\
    \        val c9 = c1 + c8\n        val c10 = c1 + c9\n        val c11 = c1 + c10\n\
    \        val c12 = c1 + c11\n        val c13 = c1 + c12\n        val c14 = c1\
    \ + c13\n        val c15 = c1 + c14\n        val c16 = c1 + c15\n        val c17\
    \ = c1 + c16\n        val c18 = c1 + c17\n        val c19 = c1 + c18\n       \
    \ val c20 = c1 + c19\n        val c21 = c1 + c20\n        val c22 = c1 + c21\n\
    \        val c23 = c1 + c22\n        val c24 = c1 + c23\n        val c25 = c1\
    \ + c24\n        val c26 = c1 + c25\n        val c27 = c1 + c26\n        val c28\
    \ = c1 + c27\n        val c29 = c1 + c28\n        val c30 = c1 + c29\n       \
    \ val c31 = c1 + c30\n        val c32 = c1 + c31\n        val c33 = c1 + c32\n\
    \        val c34 = c1 + c33\n        val c35 = c1 + c34\n        val c36 = c1\
    \ + c35\n        val c37 = c1 + c36\n        val c38 = c1 + c37\n        val c39\
    \ = c1 + c38\n        val c40 = c1 + c39\n        val c41 = c1 + c40\n       \
    \ val c42 = c1 + c41\n        val c43 = c1 + c42\n        val c44 = c1 + c43\n\
    \        val c45 = c1 + c44\n        val c46 = c1 + c45\n        val c47 = c1\
    \ + c46\n        val c48 = c1 + c47\n        val c49 = c1 + c48\n        val c50\
    \ = c1 + c49\n        val c51 = c1 + c50\n        val c52 = c1 + c51\n       \
    \ val c53 = c1 + c52\n", "        val classes = new mutable.HashMap[String, Int]()\n\
    \        val class_arr = new mutable.ArrayBuffer[String]()\n        val class_arr2\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr3 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr4 = new mutable.ArrayBuffer[String]()\n        val class_arr5\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr6 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr7 = new mutable.ArrayBuffer[String]()\n        val class_arr8\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr9 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr10 = new mutable.ArrayBuffer[String]()\n        val class_arr11\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr12 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr13 = new mutable.ArrayBuffer[String]()\n        val class_arr14\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr15 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr16 = new mutable.ArrayBuffer[String]()\n        val class_arr17\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr18 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr19 = new mutable.ArrayBuffer[String]()\n        val class_arr20\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr21 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr22 = new mutable.ArrayBuffer[String]()\n        val class_arr23\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr24 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr25 = new mutable.ArrayBuffer[String]()\n        val class_arr26\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr27 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr28 = new mutable.ArrayBuffer[String]()\n        val class_arr29\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr30 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr31 = new mutable.ArrayBuffer[String]()\n        val class_arr32\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr33 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr34 = new mutable.ArrayBuffer[String]()\n        val class_arr35\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr36 = new mutable.",
  "        // Initialize a mutable map with the extension names as keys and the \n\
    \        // strongest extension names as values.\n        val strongest = mutable.Map[String,\
    \ String]()\n        val len = extensions.length\n\n        // Initialize two\
    \ counters, one for the number of lowercase letters\n        // and one for the\
    \ number of uppercase letters.\n        var sm = 0, cap = 0\n        for (i <-\
    \ 0 until len) {\n            val e = extensions(i)\n            if (e.isUpper)\
    \ {\n                cap = cap + 1\n            }\n            else {\n      \
    \          sm = sm + 1\n            }\n        }\n\n        // Calculate the strength\
    \ of the extension.\n        val strength = cap - sm\n\n        // Add the extension's\
    \ name to the strongest map only if it has the strongest\n        // strength.\n\
    \        val add = if (strength > 0) strongest.updated(extensions(0), extensions(1))\
    \ \n        else strongest.update(extensions(0), extensions(1))\n\n        //\
    \ Return the strongest extension name.\n        strongest.minOption.getOrElse(\"\
    \")", "        var strongest = Integer.MAX_VALUE\n        var strongest_extension\
    \ = \"\"\n        extensions.foreach {\n            if (extension.map(_.toUpperCase).count\
    \ > strongest) {\n                strongest = extension.map(_.toUpperCase).count\n\
    \                strongest_extension = extension\n            }\n        }\n \
    \       class_name + \".\" + strongest_extension", '        // Write your code
    here', "      require(extensions.nonEmpty, \"Empty list extension\")\n      require(class_name.nonEmpty,\
    \ \"Empty class name\")\n      require(extensions.forall(_.isLetter), \"Bad extension\"\
    )\n      require(extensions.forall(_.isLower), \"Bad extension\")\n\n      val\
    \ cap = class_name match { case c : String if c.forall(_.isUpper) => (c.toUpperCase.length)\n\
    \        case c : String if c.forall(_.isLower) => (c.toLowerCase().length)\n\
    \        case c => 0 }\n      val sm = class_name match { case c : String if c.forall(_.isUpper)\
    \ => (c.toLowerCase().length)\n        case c : String if c.forall(_.isLower)\
    \ => (c.toUpperCase.length)\n        case c => 0 }\n\n      val strength = (cap\
    \ - sm).toDouble / (cap + sm)\n      val firstExtension = extensions.min { s =>\
    \ strength >= s.length }\n      firstExtension", "        var bestStrongest =\
    \ \"\"\n        var bestStrength = -1\n        var bestExtension = \"\"\n    \
    \    var bestExtensionIndex = -1\n        \n        for ( extension <- extensions\
    \ ) {\n            val strenght = class_name.count( c => c.isUpper ) - class_name.count(\
    \ c => c.isLower )\n            if ( strenght > bestStrength ) {\n           \
    \     bestStrength = strenght\n                bestExtension = extension\n   \
    \             bestExtensionIndex = extensions.indexOf ( extension )\n        \
    \    }\n        }\n\n        return class_name + \".\" + bestExtension", "   \
    \     def strongest_extension(extension: String, list: List[String]) : String\
    \ = {\n            if (list == Nil) extension\n            else strongest_extension(extension,\
    \ list.tail) \n        }\n        val max_strength = 0\n        val max_strength_extension\
    \ = extensions(0)\n        for(extension <- extensions){\n            val strength\
    \ = extension.map(_.toUpper.toInt).sum - extension.map(_.toLower.toInt).sum\n\
    \            if (strength > max_strength) {\n                max_strength = strength\n\
    \                max_strength_extension = extension\n            }\n        }\n\
    \        class_name +  \".\" + max_strength_extension", "        val c = class_name.charAt(0).toLower\n\
    \        val s = class_name.substring(1).toLower\n        val c = extensions(0).charAt(0).toLower\n\
    \        val s = extensions(0).substring(1).toLower\n        val c = extensions(1).charAt(0).toLower\n\
    \        val s = extensions(1).substring(1).toLower\n        val c = extensions(2).charAt(0).toLower\n\
    \        val s = extensions(2).substring(1).toLower\n        var strength = 0\n\
    \        if (c.toLong > s.toLong)\n            strength = -1\n        else\n \
    \           if (c.toLong == s.toLong)\n                if (c.toLong < c.toLong)\n\
    \                    strength = c.toLong\n                if (s.toLong < s.toLong)\n\
    \                    strength = s.toLong\n            if (strength == 0)\n   \
    \             strength = 1\n        val strongest = extensions(extensions.indexWhere(s\
    \ => strength == s.toLong) + 1)\n        (class_name + \".\" + strongest)", " \
    \       val map = Map()\n        val extensions_map = Map[String, Int]()\n   \
    \     var i = 0\n        while (i < extensions.length) {\n            val letter\
    \ = extensions(i).toLowerCase\n            val lower_letter = letter.toLowerCase\n\
    \            val count = extensions_map.getOrElse(lower_letter, 0)\n         \
    \   extensions_map.put(lower_letter, count + 1)\n            i += 1\n        }\n\
    \        val strongest_extension = extensions_map.keys.max\n        val letter\
    \ = strongest_extension.toLowerCase \n        val lower_letter = letter.toLowerCase\n\
    \        if (map.contains(class_name)) {\n            map.get(class_name) match\
    \ {\n                case Some(class_object) => {\n                    val class_array\
    \ = class_object.asInstanceOf[Array[String]]\n                    val class_name\
    \ = class_array.last\n                    val strongest_extensions = map.get(class_name).asInstanceOf[List[String]]\n\
    \                    val new_class = strongest_extensions(0) + strongest_extensions(1)\n\
    \                    if (new_class == class_name) {\n                        strongest_extensions\n\
    \                    } else {\n                        val new_class_array = class_array\n\
    \                        new_class_array.init = new_class_array.init + \"_\" +\
    \ strongest_extensions\n                        new_class_array\n            \
    \        }\n                }\n                case None => Map()\n          \
    \  }\n        } else {\n            Map[String, List[String]]()\n        }", " \
    \       val strongest = extensions.maxBy(extension => extension.count(c => c.isUpperCase\
    \ && c.isLowerCase && c.isLetter))\n        val strength = strongest.count(c =>\
    \ c.isUpperCase && c.isLowerCase && c.isLetter)\n        class_name +(strongest\
    \ match {\n            case Some(ext) => s\"$ext.$strength\"\n            case\
    \ None => \"\"\n        })", "        val strengths = (extensions map {extension\
    \ => extension.filter(_.isUpper).toSet.size / (extension.filter(_.isLower).toSet.size)\
    \ }).toSeq\n        val strength = strengths.max\n        if (strength == 0) {\n\
    \            class_name.dropRight(class_name.lastIndexOf('.')).dropRight(1)\n\
    \        }\n        else {\n            class_name +\n                extensions.find(extension\
    \ => extension.substring(0, strength.abs).mkString.equalsIgnoreCase(extension)).map(_.substring(1,\
    \ strength.abs)).getOrElse(\"\")\n        }", "        val className = class_name.split('.').last\n\
    \n        val strengths = (0 until extensions.size).map( i => (class_name, extensions(i))\
    \ -> i)\n        val sorted = strengths.toList.sortBy(_._2)\n        val maxValue\
    \ = sorted.last._2\n        val maxExtension = sorted.last._1\n        className+\"\
    .\"+maxExtension", "        val extensions_map = Map[(Int, Int), List[String]]((1,2),\
    \ (2,3), (3,4), (4,5), (5,6))\n        var class_name_copy = class_name match\
    \ {\n            case Some(name) => name\n            case None => \"Slices\"\n\
    \        }\n        var best_score = -1\n        var best_extension = \"\"\n \
    \       for (extension <- extensions) {\n            var extension_copy = extension\
    \ match {\n                case Some(name) => name\n                case None\
    \ => extension_copy = \"Slice\"\n            }\n            var score = extensions_map.getOrElse(extension_copy,\
    \ 0).zip(extensions_map.getOrElse(extension_copy, 1)).map(x => (x._1 - x._2)/x._1).sum\n\
    \            if (score > best_score) {\n                best_score = score\n \
    \               best_extension = extension_copy\n            }\n        }\n  \
    \      (class_name_copy + \".\" + best_extension)", "        val className = class_name.substring(0,\
    \ class_name.length() - 1)\n        val classExtensions = className.split(\"\\\
    \\.\")\n        val extensionSet = extensions.toSet\n        val strongestExtension\
    \ = classExtensions.map(extension => {\n            if (extensionSet.contains(extension))\
    \ extension\n            else null\n        }).filter(_.isDefined)\n        strongestExtension.headOption.map\
    \ { s =>\n            className.concat(\".\").concat(s)\n        }", "       \
    \ val letters = new mutable.HashSet[String]()\n        val letterCount = new mutable.HashMap[String,Int]()\n\
    \n        for(ext <- extensions) {\n            val len = ext.length\n       \
    \     val cap = ext.toUpperCase match {\n                case c => c.toUpperCase\n\
    \                case _ => throw new Exception(\"String has non-uppercase\")\n\
    \            }\n            val sm = ext.toLowerCase match {\n               \
    \ case c => c.toUpperCase\n                case _ => throw new Exception(\"String\
    \ has non-lowercase\")\n            }\n            val c = cap - sm\n        \
    \    if(letterCount.containsKey(ext)) {\n                letterCount(ext) += c\n\
    \            } else {\n                letterCount(ext) = c\n            }\n \
    \           letters += cap\n        }\n        val strengths = letterCount.toSeq.sortBy(_._1)\n\
    \        val strongest = strengths.find(_._1 < letterCount.size).get\n       \
    \ if(strongest.get.size == 1) {\n            className + \".\" + strongest.get\n\
    \        } else {\n            val first = strengths.head\n            className\
    \ + \".\" + first._1 + first.last\n        }", "        val maxStrength = extensions\
    \ flatMap { ext => \n            ext.toSet.filter(x => x.isUpper) map {\n    \
    \            case x => (ext.toSet.count - ext.toSet.filter(_.isLower).length.toDouble\
    \ / ext.toSet.count).toInt\n            }\n        }.max\n        if (maxStrength\
    \ == -1) return class_name\n        val maxStrengths = extensions.sortBy(x =>\
    \ x.toSet.filter(x => x.isUpper).count - x.toSet.filter(_.isLower).count)\n  \
    \      val index = maxStrengths.indexOfMax(x => x._1)\n        val extensionWithStrength\
    \ = extensions.sortBy(x => x.toSet.filter(x => x.isUpper).count - x.toSet.filter(_.isLower).count(_))(index\
    \ - 1)\n        s\"$class_name.$extensionWithStrength\"", "      val (cap,sm,exts)\
    \ = extensions match {\n        case Nil => (0,0,Nil)\n        case x :: y =>\
    \ (x.toUpperCase length, (y.toLowerCase length), x)\n      }\n      var result\
    \ = class_name\n      val strongest_extension = if (cap > sm) exts(0) else exts(1)\n\
    \      for(e <- exts.tail) result += \".\" + strongest_extension\n      result",
  "        val strengths = ListBuffer.empty[Int]\n        for (ext <- extensions)\
    \ {\n            val name = ext.toLowerCase\n            var numLetters = name.length\n\
    \            var capLetters = name.toUpperCase.length\n            for (c <- name.substring(1,\
    \ capLetters)) {\n                numLetters -= 1\n                if (name.toUpperCase.charAt(numLetters)\
    \ == c.toUpper) {\n                    capLetters -= 1\n                }\n  \
    \          }\n            strengths += capLetters - numLetters\n        }\n  \
    \      val maxValue = strengths.max\n        val strengthIndex = strengths.indexOf(-1)\n\
    \        val name = class_name.toLowerCase\n        val extensionName = extensions.filter(ext\
    \ => ext.toLowerCase.startsWith(name))(0)\n        return name + extensionName.substring(name.length,\
    \ extensionName.length).capitalize", "        var extensions_with_same_strength\
    \ = mutable.HashMap[String, Int]()\n        val extensions_count = extensions.count\n\
    \        // Get all the extensions that start with the same letter than the class\n\
    \        val letters = class_name.split(\"(?=[A-Z])\")\n        val class_letters\
    \ = class_name.split(\"(?=[A-Z])\").filter(_.length == 1).length\n        \n \
    \       val class_letters_count = letters.length\n        // For each extension\n\
    \        for (i <- 0 until extensions_count) {\n            val current_extension\
    \ = extensions(i)\n            val current_extension_letters = current_extension.split(\"\
    (?=[A-Z])\").filter(_.length == 1).length\n            // If the extension has\
    \ the same letter than the class get the index\n            if (current_extension_letters\
    \ == class_letters) {\n                // Get the index of the extension\n   \
    \             val extensions_index = i - extensions.indexWhere(_ == current_extension)\n\
    \                // If the extension has the same strength than the class, add\
    \ it else get it\n                if (extensions_with_same_strength.get(current_extension)\
    \ != extensions_index) {\n                    extensions_with_same_strength +=\
    \ (current_extension -> extensions_index)\n                }\n            }\n\
    \        }\n        // Get the strongest extension\n        val strongest_extension\
    \ = extensions_with_same_strength.sortBy(_._2).reverse.head._1\n        class_name+\"\
    .\"+strongest_extension", "        // your code here\n        var strength = -1\n\
    \        var resultString = \".\"\n        val extensionMap = Map()\n        for\
    \ (extension <- extensions) {\n            val tempCap = extension.substring(0,\
    \ 1).toLowerCase\n            val tempSm  = extension.substring(1, 2).toLowerCase\n\
    \            if (strength > 0) {\n                if (tempCap > tempSm) {\n  \
    \                  strength = tempCap - tempSm\n                    resultString\
    \ = className + \".\" + extension\n                } else if (tempCap < tempSm)\
    \ {\n                    strength = tempSm - tempCap\n                    resultString\
    \ = className + \".\" + extension\n                } else {\n                \
    \    resultString = className + \".\" + extension\n                }\n       \
    \     }\n            extensionMap(tempCap, tempSm) += 1\n        }\n        resultString",
  "        var extensions_names = extensions.map(ext => ext.replaceAll(\"[A-Z]\",\
    \ \"_\").replaceAll(\"[a-z]\", \"_\"))\n        var extensions_strength = extensions.map(ext\
    \ => ext.replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").toInt)\n\n  \
    \      var extensions_sorted = extensions_names.sortWith(_ < _)\n\n        var\
    \ index = 1\n        var strength = 1\n        var highest_strength = extensions_strength(0)\n\
    \        var first_extension_name = extensions_names(0)\n\n        while (index\
    \ <= extensions_names.size) {\n            if (extensions_strength(index) > highest_strength)\
    \ {\n                highest_strength = extensions_strength(index)\n         \
    \       first_extension_name = extensions_names(index)\n            }\n      \
    \      index += 1\n        }\n\n        (class_name + first_extension_name).replaceFirst(\"\
    _\", \".\")", "        //TODO: Complete the code here\n        val counts = extensions.map(e\
    \ => e.count(c => c.isUpper))\n        val sum = extensions.map(e => e.count(c\
    \ => c.isUpper)).sum\n        val average = sum / extensions.size\n        val\
    \ strength = extensions.count(c => c.isUpper) - extensions.count(c => c.isLower)\n\
    \        val strengthOfExtension = strength / extensions.size\n        val strongestExtension\
    \ = extensions.find(c => c.count(c => c.isUpper) - c.count(c => c.isLower) ==\
    \ 0).get\n        val secondStrongestExtension = extensions.find(c => c.count(c\
    \ => c.isUpper) == 0).get\n        (class_name.getClass.getName + \".\" + strongestExtension.getClass.getName\
    \ + \n            ((if (strengthOfExtension > 0) \".\" + strengthOfExtension else\
    \ \"\")) + (if (secondStrongestExtension != null) \".\" + secondStrongestExtension\
    \ else \"\"))", "        val extensions_sorted = extensions sortBy {\n       \
    \     case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [A-Z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [a-z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.length()\
    \ >= CAP - SM)\n        val extensions_sorted = extensions_sorted sortBy {\n \
    \           case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [A-Z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [a-z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.length()\
    \ >= CAP - SM)\n        val extensions_sorted = extensions_sorted sortBy {\n \
    \           case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [A-Z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [a-z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.length()\
    \ >= CAP - SM)\n        val extensions_sorted = extensions_sorted sortBy {\n \
    \           case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [A-Z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [a-z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.length()\
    \ >= CAP - SM)\n        val extensions_sorted = extensions_sorted sortBy {\n \
    \           case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [A-Z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.matches(\"\
    [a-z]+\"))\n        val extensions_sorted = extensions_sorted filter (ext => ext.length()\
    \ >= CAP - SM)\n        val extensions_sorted = extensions_sorted sortBy {\n \
    \           case ext => ext.map(_.toUpperCase).length - ext.map(_.toLowerCase).length\n\
    \        }\n        val extensions_sorted = extensions_sorted filter (", "   \
    \     val extensions_count = extensions.foldLeft(0) { (acc, element) =>\n    \
    \        val char_count = element.toCharArray.foldLeft(0) { (acc, c) =>\n    \
    \            if (c >= 65 && c <= 90) acc + 1\n                else acc\n     \
    \       }\n            acc + char_count\n        }\n        val strength = extensions_count\
    \ / extensions.size.toDouble\n        val class_names = class_name.split(\"\\\\\
    .\").drop(1).map(_.capitalize).mkString\n        val class_names = class_names\
    \ + extensions_count.toString\n        val class_name_with_extensions = class_name\
    \ + class_names.toLowerCase\n        val extension_strings = extensions.map(e\
    \ => e.split(\"\\\\.\").take(1).mkString).toList\n        if (extension_strings.contains(\"\
    \")) {\n            throw new RuntimeException(\"Extension list has empty string\"\
    )\n        }\n        val extension_strings_count = extension_strings.foldLeft(0)\
    \ { (acc, e) =>\n            val extensions_count = e.split(\",\").map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                if (e == \"\") acc\n                else acc\
    \ + e\n            }\n            acc + extensions_count\n        }\n        val\
    \ extension_strings_count = extension_strings_count.toDouble\n        if (strength\
    \ > extension_strings_count) {\n            val strength_strongest = extension_strings(extension_strings_count.toInt)\n\
    \            val extension_strings_strongest = extension_strings.take(extension_strings_count.toInt)\n\
    \            val extension_strings_strongest_count = extension_strings_strongest.map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                if (e == \"\") acc\n                else acc\
    \ + e\n            }\n            val extensions_strongest = extension_strings_strongest.map(_.split(\"\
    \\\\.\").take(1).mkString).toList\n            val extensions_strongest_count\
    \ = extensions_strongest.foldLeft(0) { (acc, e) =>\n                if (e == \"\
    \") acc\n                else acc + e\n            }\n            val extensions_strongest_count\
    \ = extensions_strongest_count.toDouble\n            if (strength_strongest ==\
    \ \"\") {\n                val extension_strongest_strongest = extensions_strongest(extensions_strongest_count.toInt)\n\
    \                val extension_strongest_strongest_count = extension_strongest_strongest.map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                    if (e == \"\") acc\n                    else\
    \ acc + e\n                }\n                val extensions_strongest_", "  \
    \      val c = class_name.foldLeft((0,0))(_ + _)\n        val s = extensions.foldLeft((0,0))(_\
    \ + _)\n        val cap = c.toDouble - s.toDouble\n        val sm = s.toDouble\
    \ - c.toDouble\n        if(cap > sm) class_name + extensions.head else StrongestExtension(class_name,\
    \ extensions)", '        // Write your code here', "        val strength = extensions.length\
    \ / 2\n        var strongest = null\n        var i = 0\n        while (i < extensions.length)\
    \ {\n            val c = extensions(i)\n            val sl = c.toLowerCase //\
    \ to find sm\n            val cap = c.toUpperCase // to find cap\n           \
    \ val sm = i + 1 < extensions.length ? extensions(i + 1) : \"\"\n            if\
    \ (cap.size < sm.size) {\n                strongest = class_name\n           \
    \     break\n            } else if (cap == sm && i != 0) {\n                strongest\
    \ = class_name\n                break\n            } else if (cap.size == sm.size\
    \ && i == 0) {\n                if (strength < 0f - Float.parseFloat(sm.replaceAll(\"\
    [^A-Z]\", \"\")) - Float.parseFloat(cap.replaceAll(\"[^A-Z]\", \"\"))) {\n   \
    \                 strongest = class_name\n                }\n                break\n\
    \            } else if (i == 0 && strength < 0f - Float.parseFloat(sm.replaceAll(\"\
    [^A-Z]\", \"\")) - Float.parseFloat(cap.replaceAll(\"[^A-Z]\", \"\"))) {\n   \
    \             strongest = class_name\n            }\n            i += 1\n    \
    \    }\n        strongest", "        var sorted_extensions = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val max_length = sorted_extensions.length\n\
    \        for (i <- 0 until max_length) {\n            var extension = sorted_extensions(i)\n\
    \            val letter = extension.charAt(0)\n            val lower_letter =\
    \ extension.charAt(1)\n            if (letter.equalsIgnoreCase(class_name.charAt(class_name.length()\
    \ - 1))) {\n                sorted_extensions = sorted_extensions.drop(1)\n  \
    \          } else {\n                val length = class_name.length\n        \
    \        if (lower_letter != letter) {\n                    for (j <- 0 until\
    \ length) {\n                        if (class_name.charAt(j) != lower_letter)\
    \ {\n                            sorted_extensions = sorted_extensions.drop(j)\n\
    \                            break\n                        }\n              \
    \      }\n                } else \n                    sorted_extensions = sorted_extensions.drop(length\
    \ - 2)\n            }\n        }\n        sorted_extensions.head", "        var\
    \ strength = -1\n        val extensions_map = extensions.toMap\n        extensions_map\
    \ foreach (x => {\n                val y = x.toUpperCase - x.toLowerCase\n   \
    \             val c = x.toLowerCase - x\n                val n = x + y + c\n \
    \               if (strength < 0) strength = n\n                else if (n > strength)\
    \ strength = n\n            })\n            val key = extensions_map.maxBy(x =>\
    \ x._2)\n            val result = class_name + key._1\n            return result",
  '      // Your code here!', "        // The map function takes a string and generates\
    \ a tuple of uppercase letters\n        // and lowercase letters. \n        //\
    \ For each extension in the list, you will be able to generate the number\n  \
    \      // of uppercase letters and lowercase letters.\n        // For example,\
    \ for the first extension you will be able to generate the number\n        //\
    \ of uppercase letters to be 2 and lowercase letters to be 0, since 'AA' is\n\
    \        // the first string in the list and there are no uppercase letters before\
    \ it\n        // ('AA' is followed by 'Be' which is not the first letter in the\
    \ list).\n        // For the second extension you will be able to generate the\
    \ number of\n        // uppercase letters to be 1 and lowercase letters to be\
    \ 1, since 'Be' is \n        // the second string in the list and there are no\
    \ uppercase letters before it\n        // ('Be' is followed by 'CC' which is not\
    \ the first letter in the list).\n        // In case there are no extensions,\
    \ you should return an empty string. \n        \n        def number_of_uppercase_letters(s\
    \ : String) : Int = {\n            s.toCharArray.count(_ == 'A')\n        }\n\n\
    \        def number_of_lowercase_letters(s : String) : Int = {\n            s.toCharArray.count(_\
    \ == 'a')\n        }\n\n        // The hash function takes a string and returns\
    \ a hash of the string\n        // with all the uppercase letters replaced by\
    \ \"A\" and the lowercase letters\n        // replaced by \"a\". The hash function\
    \ ensures that the hash is the same for \n        // strings that have the same\
    \ number of uppercase and lowercase letters.\n        // For example, if the string\
    \ to be hashed is 'AAA', then 'A' would be the \n        // hash of 'AAA'. You\
    \ must use these hash functions to ensure your solution\n        // works correctly\
    \ even if the string to be hashed is changed (for example,\n        // to 'aAA').\
    \ The hash function should work for strings of any length.\n        def hasher(s\
    \ : String) : Int = {\n            val hashMap = new mutable.HashMap[String, Int]()\n\
    \            for (a <- s) {\n                hashMap += (a -> ('a' -> 1, 'A' ->\
    \ 1))\n            }\n            hashMap.foldLeft(0)((h, e) => h * e._2._1 +\
    \ e._2._2)\n        }\n\n        // This function finds the highest number of\
    \ uppercase letters and \n        // lowercase letters that appear in the string.\
    \ If there are more than\n        // two strings with the same number of uppercase\
    \ letters and lowercase letters\n        // then you choose the one that comes\
    \ first in the list of strings. \n        // For example, if there are two strings\
    \ with uppercase letters 'AB' and \n        // lowercase letters 'cd', then you\
    \ choose the one that comes first in the \n        // list of strings (i.e., you\
    \ choose 'AB')", "        val extension_strength = extensions.foldLeft(-1)((x,y)=>{\n\
    \            if(x.length>y.length) -1 \n            else x.length<y.length ? x.toString.compareTo(y.toString)\
    \ \n                : x.toString.compareTo(y.toString)\n        })\n        val\
    \ class_name = class_name.replaceAll(\"[_]\", \"\").replaceAll(\"[-]\", \"\").replaceAll(\"\
    [a-z]\", \"\").toCharArray\n        val class_name_strength = class_name.foldLeft(0)((x,y)=>{\n\
    \            if(x.length>y.length) x \n            else y\n        })\n      \
    \  return if (class_name_strength>extension_strength) \n                class_name\
    \ + \"_\" + extensions.foldLeft(0)((x,y)=>{\n                    if(x.length>y.length)\
    \ x \n                    else y\n                }) \n            else\n    \
    \            class_name + \"_\" + extensions.foldLeft(0)((x,y)=>{\n          \
    \          if(x.length>y.length) y \n                    else x\n            \
    \    }) ", "        val length = extensions.length\n        val extensionMap =\
    \ mutable.HashMap[String, Int]()\n\n        for ((extension, strength) <- extensions)\
    \ {\n            if (extension.length > 0) {\n                val key = extension.foldLeft(0)(_\
    \ + _.length)\n                extensionMap += (key -> strength)\n           \
    \ }\n        }\n\n        val maxValue = extensionMap.maxBy(_._2)\n        val\
    \ maxKey = maxValue.key\n\n        val maxExtensions = extensionMap.filter(kvp\
    \ => kvp._1 == maxKey)\n\n        if (maxExtensions.isEmpty) class_name\n    \
    \    else if (maxExtensions.size === 1) maxExtensions(0)._1\n        else class_name\
    \ + extensions(0)", "        val max_strength : Int = -1\n        val max_extension\
    \ : Option[String] = None\n        val name_array = class_name.split(\"\\\\.\"\
    )\n        extensions foreach {\n            ext => {\n                val ext_array\
    \ = ext.split(\"\\\\.\")\n                val name_cmp = ext_array.zip(name_array).map(x\
    \ => x._1.toUpper compareTo x._2.toUpper)\n                val strength = name_cmp.foldLeft(0)\
    \ { (acc, x) => acc + x._1 }\n                if ((strength > max_strength) ||\
    \ (strength == max_strength && ext_array == max_extension.getOrElse(ext))) {\n\
    \                    max_strength = strength\n                    max_extension\
    \ = Some(ext)\n                }\n            }\n        }\n        max_extension.getOrElse(\"\
    \")", "        val strengths = extensions.map{e =>\n            if (e.toUpperCase.size\
    \ < e.toLowerCase.size)\n              -1\n            else if (e.toUpperCase.size\
    \ > e.toLowerCase.size)\n              1\n            else\n              e.toUpperCase.toCharArray.count(_\
    \ == 'A') - e.toLowerCase.toCharArray.count(_ == 'a')\n        }\n        strengths.max",
  "        var strength = extensions.size\n        var max_strongest_extension = \"\
    \"\n        for(e <- extensions){\n            val cap = e.filter(_ <= 'Z').size\n\
    \            val sm = e.filter(_ >= 'A').size\n            var strongest = if\
    \ (cap - sm > 0) true\n            else false\n            if(strongest){\n  \
    \              strongest = cap - sm\n            }else{\n                strongest\
    \ = cap + sm\n            }\n            if(strongest > strength){\n         \
    \       strength = strongest\n                max_strongest_extension = e\n  \
    \          }\n        }\n        class_name + \".\" + max_strongest_extension",
  "        // Use mutable sets to track which extensions have already been used.\n\
    \        val extensions_used: mutable.Set[String] = mutable.Set()\n\n        //\
    \ Use a mutable set to keep track of the most used extension.\n        val most_used_extension:\
    \ Option[String] = None\n\n        // The extension with the greatest strength\
    \ must come first.\n        var extensions_with_greatest_strength: List[String]\
    \ = extensions \n\n        // Loop through the extensions list\n        for( extension\
    \ <- extensions_with_greatest_strength ) {\n            // If the extension has\
    \ already been used, skip this extension.\n            // This extension has been\
    \ used twice.\n            if( extensions_used.contains(extension) ) continue;\n\
    \            // If this is the first time the extension has been used, \n    \
    \        // add it to the extensions set.\n            if( most_used_extension.isEmpty\
    \ ) {\n                extensions_with_greatest_strength += extension;\n     \
    \           extensions_used += extension;\n                continue;\n       \
    \     }\n\n            // Otherwise, this extension has been used before. \n \
    \           // We will keep the extension with the greatest strength.\n      \
    \      val strength = most_used_extension.get.count - extension.count\n      \
    \      if( strength > 0 ) {\n                extensions_with_greatest_strength\
    \ += extension;\n                extensions_used += extension;\n             \
    \   most_used_extension = Some(extension)\n            }\n        }\n\n      \
    \  // Return the string that has the greatest strength.\n        extensions_with_greatest_strength.max",
  "       val caps = extensions.length\n       val sms = extensions.map(_.length)\n\
    \       val min = math.min(caps, sms)\n       extensions.sortWith(_.length - _.length)\n\
    \       extensions.headOption", "        var extension_name : String = \"\"\n\
    \        var extension_strength : Int = -1\n        var extension_class : String\
    \ = \"\"\n        \n        for (extension <- extensions) {\n            extension_class\
    \ = extension.substring(0, 1)\n            extension_name = extension.substring(2)\n\
    \            if (extension_strength == -1 || extension_strength > extension_strength)\
    \ {\n                extension_strength = extension_strength\n               \
    \ extension_class = extension_class\n                extension_name = extension_name\n\
    \            }\n        }\n        return class_name + \".\" + extension_class\
    \ + extension_name", "        val classes = ListBuffer(new mutable.HashMap[String,\
    \ String]())\n        val strengths = ListBuffer(0)\n        extensions.foreach\
    \ { e =>\n            val cap = e.length\n            val sm = e.toLowerCase().length\n\
    \            val strength = cap - sm\n            if (classes.contains(e + \"\
    __\" + strength)) {\n                strengths(strengths.indexOf(strength) + 1)\
    \ = strength\n            }\n            else {\n                strengths(strengths.size)\
    \ = strength\n                classes += e + \"__\" + strength\n            }\n\
    \        }\n        val strongest_extension = classes.filter(_._2.length == strengths.max).sortBy(_._2).head._1\n\
    \        class_name + \".\" + strongest_extension", "        val result = new\
    \ mutable.HashMap[Int, String]()\n        val extensions_length = extensions.size\n\
    \        val extensions_map = extensions.map(e => e -> 1)\n        val all_upper\
    \ = extensions_map.flatMap(e => e.filter(_ == e.toUpper))\n        val all_lower\
    \ = extensions_map.flatMap(e => e.filter(_ == e.toLower))\n        val strongest_extension_upper\
    \ = all_upper.maxBy(e => extensions_map.getOrElse(e, 0))\n        val strongest_extension_lower\
    \ = all_lower.minBy(e => extensions_map.getOrElse(e, 0))\n        val strongest_extension\
    \ = extensions_map.get(strongest_extension_upper) match {\n            case None\
    \ => strongest_extension_lower\n            case Some(strongest_extension) =>\
    \ strongest_extension\n        }\n        result.getOrElse(extensions_length,\
    \ \"\")", "        var strength = 0\n        var strongest_extension = null\n\
    \        for(extension <- extensions) {\n            var s = extension.filter(letter\
    \ => letter.isUpper).length\n            var t = extension.filter(letter => letter.isLower).length\n\
    \            strength = if (s > t) s else t\n            if (strength > 0) {\n\
    \                if (strongest_extension == null) {\n                    strongest_extension\
    \ = extension\n                } else {\n                    if (strength > strongest_extension.filter(letter\
    \ => letter.isUpper).length)\n                        strongest_extension = extension\n\
    \                }\n            }\n        }\n        if (strongest_extension\
    \ == null) {\n            throw Exception(\"Strongest extension has no strength\"\
    )\n        }\n        return s\"${class_name.split(\"$\").head}${strongest_extension}\"",
  "        val classNamesStr = class_name +\".\"\n        val extensionStrs = extensions.map((_,\
    \ extensionStr => classNamesStr + extensionStr))\n        val extensions = extensionStrs.toSet\n\
    \        val classes = extensionStrs.map((_, classNamesStr)).toMap\n        val\
    \ classes_and_extensions = classes.zip(extensions).toMap\n        val strengths\
    \ = classes_and_extensions.map {\n            case (k,(classNamesStr, extensionStr))\
    \ => extensionStr.split(\"\"\"[A-Z]\"\"\").map(_.length.toDouble).sum - k\n  \
    \      }\n        val maxStrength = strengths.max\n        classes_and_extensions.map\
    \ { case (k,(classNamesStr, extensionStr)) => classNamesStr + extensionStr }.max ",
  '        // Initialize your data structures, add your code here', '        // Your
    code goes here', "      var result = \"\"\n      var strength = -1\n      extensions.foreach\
    \ {ext => \n        val m = ext.toLowerCase \n        val n = ext.toUpperCase\
    \ \n        val cap = m.length\n        val sm = n.length \n        val c = cap\
    \ - sm \n        val s = c / sm\n        if(strength == -1 || strength == s) \n\
    \          result = class_name\n        strength = s \n      }\n      result",
  "        val exts = mutable.ArrayBuffer[String]()\n        val extensions_map =\
    \ extensions map { ext => ext.toUpperCase -> ext }\n        class_name match {\n\
    \            case name if (name.size() == 1) => {\n                val first_ext\
    \ = extensions_map.get(name head)\n                first_ext match {\n       \
    \             case Some(s) => {\n                        exts.append(s)\n    \
    \                    exts.append(first_ext)\n                    }\n         \
    \           case None => \"\"\n                }\n            }\n            case\
    \ name if (name.size() == 2) => {\n                val first_ext = extensions_map.get(name\
    \ head)\n                val second_ext = extensions_map.get(name tail)\n    \
    \            if (first_ext.size > second_ext.size) {\n                    exts.append(first_ext)\n\
    \                    exts.append(second_ext)\n                } else {\n     \
    \               exts.append(second_ext)\n                    exts.append(first_ext)\n\
    \                }\n            }\n            case name if (name.size() > 2)\
    \ => {\n                val first_ext = extensions_map.get(name head)\n      \
    \          val second_ext = extensions_map.get(name tail)\n                val\
    \ third_ext = extensions_map.get(name last index)\n                if (first_ext.size\
    \ > second_ext.size && first_ext.size > third_ext.size) {\n                  \
    \  exts.append(first_ext)\n                    exts.append(second_ext)\n     \
    \               exts.append(third_ext)\n                } else if (first_ext.size\
    \ > second_ext.size && first_ext.size < third_ext.size) {\n                  \
    \  exts.append(first_ext)\n                    exts.append(third_ext)\n      \
    \          } else if (first_ext.size > third_ext.size) {\n                   \
    \ exts.append(third_ext)\n                    exts.append(first_ext)\n       \
    \         }\n            }\n            case _ => \"\"\n        }\n        exts\
    \ mkString \".\"", "        var className = class_name\n        var strongestExtension\
    \ = \"\"\n        var strength = 0\n        for(extension <- extensions) {\n \
    \           var name = extension\n            var name = name.substring(0,1).toLowerCase()\
    \ + name.substring(1).toUpperCase()\n            strength = strength * 2\n   \
    \         if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"C\")\n\
    \            if (strength > name.indexOf(\"S\") ) strength = name.indexOf(\"S\"\
    )\n            if (strength > name.indexOf(\"N\") ) strength = name.indexOf(\"\
    N\")\n            if (strength > name.indexOf(\"R\") ) strength = name.indexOf(\"\
    R\")\n            if (strength > name.indexOf(\"P\") ) strength = name.indexOf(\"\
    P\")\n            if (strength > name.indexOf(\"I\") ) strength = name.indexOf(\"\
    I\")\n            if (strength > name.indexOf(\"G\") ) strength = name.indexOf(\"\
    G\")\n            if (strength > name.indexOf(\"H\") ) strength = name.indexOf(\"\
    H\")\n            if (strength > name.indexOf(\"E\") ) strength = name.indexOf(\"\
    E\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > name.indexOf(\"D\") ) strength = name.indexOf(\"\
    D\")\n            if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"\
    C\")\n            if (strength > name.indexOf(\"A\") ) strength = name.indexOf(\"\
    A\")\n            if (strength > name.indexOf(\"Z\") ) strength = name.indexOf(\"\
    Z\")\n            if (strength > name.indexOf(\"W\") ) strength = name.indexOf(\"\
    W\")\n            if (strength > name.indexOf(\"V\") ) strength = name.indexOf(\"\
    V\")\n            if (strength > name.indexOf(\"G\") ) strength = name.indexOf(\"\
    G\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > name.indexOf(\"E\") ) strength = name.indexOf(\"\
    E\")\n            if (strength > name.indexOf(\"D\") ) strength = name.indexOf(\"\
    D\")\n            if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"\
    C\")\n            if (strength > name.indexOf(\"A\") ) strength = name.indexOf(\"\
    A\")\n            if (strength > name.indexOf(\"Z\") ) strength = name.indexOf(\"\
    Z\")\n            if (strength > name.indexOf(\"W\") ) strength = name.indexOf(\"\
    W\")\n            if (strength > name.indexOf(\"V\") ) strength = name.indexOf(\"\
    V\")\n            if (strength > name.indexOf(\"H\") ) strength = name.indexOf(\"\
    H\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > ", "        val strengths = mutable.Map[Int,\
    \ String]()\n        extensions.foreach {\n            e =>\n                val\
    \ c = e.toUpperCase\n                val s = e.toLowerCase\n                val\
    \ v = (c - s) / c.toString.length\n                strengths += (v -> e)\n   \
    \     }\n        val max = strengths.maxBy(_._1)._1\n        val maxStrengths\
    \ = strengths.filter(_._1 == max)\n        val maxExtensions = maxStrengths.map(_._2)\n\
    \        val s = maxExtensions.sortBy(_).toList.mkString(\"\")\n        class_name\
    \ + s", "        var max_extension_name : String = \"\"\n        var max_extension_strength\
    \ : Int = -1\n\n        extensions.foreach(extension => {\n            if(class_name.matches(extension))\
    \ {\n                val uppercase_letters = class_name.substring(class_name.indexOf(\"\
    CAP\") + 3, class_name.indexOf(\"SM\") - 1).toUpperCase().toInt\n            \
    \    val lowercase_letters = class_name.substring(class_name.indexOf(\"SM\") +\
    \ 3, class_name.indexOf(\"CAP\") - 1).toLowerCase().toInt\n                max_extension_name\
    \ = extension\n                if(uppercase_letters > lowercase_letters) max_extension_strength\
    \ = uppercase_letters - lowercase_letters\n                else max_extension_strength\
    \ = lowercase_letters - uppercase_letters\n            }\n        })\n\n     \
    \   if(max_extension_strength > 0) max_extension_name + \".\" + max_extension_name\n\
    \        else \"\"", "        val extension_len = extensions.length\n        val\
    \ strength = extension_len - 1\n        val strength_max = strength * ( 1 + math.log(extension_len)\
    \ )\n        val strength_min = strength / ( 1 + math.log(extension_len) )\n \
    \       val strength_sum = 0\n        val max_index = -1\n        val min_index\
    \ = -1\n        for ( i <- 1 to extension_len ) {\n            if ( extensions(i).toUpperCase.count\
    \ != extensions(i).toUpperCase.count ) {\n                val tmp_len = extensions(i).toUpperCase.count\n\
    \                val tmp_strength = tmp_len * ( 1 + math.log(extension_len) )\n\
    \                if ( tmp_strength > strength_sum ) {\n                    strength_sum\
    \ = tmp_strength\n                    max_index = i\n                }\n     \
    \       }\n            if ( extensions(i).toLowerCase.count != extensions(i).toLowerCase.count\
    \ ) {\n                val tmp_len = extensions(i).toLowerCase.count\n       \
    \         val tmp_strength = tmp_len * ( 1 + math.log(extension_len) )\n     \
    \           if ( tmp_strength > strength_sum ) {\n                    strength_sum\
    \ = tmp_strength\n                    min_index = i\n                }\n     \
    \       }\n        }\n        val max_strength = strength_sum * ( 1 + math.log(extension_len)\
    \ )\n        val min_strength = strength_sum / extension_len\n        val strength_diff\
    \ = max_strength - min_strength\n        if ( strength_diff < 0 ) {\n        \
    \    class_name + extensions(max_index)\n        }\n        else {\n         \
    \   class_name + extensions(min_index)\n        }", "        // Your code goes\
    \ here.\n        val s = extensions reduce { (max,ext) => {\n            val cap\
    \ = ext.map(_.toUpperCase).filter(_.isLetter).length\n            val sm = ext.map(_.toLowerCase).filter(_.isLetter).length\n\
    \            val s = cap - sm\n            if(s == 0) ext\n            else if(s\
    \ > max) ext\n            else max\n        }} \n        s", "        var strongest_strength\
    \ = extensions.length\n        var strongest_extension = \"\"\n\n        for (extension\
    \ <- extensions) {\n            var extension_cap = extension.split(\"\").map(_.toUpperCase).length\n\
    \            var extension_sm  = extension.split(\"\").map(_.toLowerCase).length\n\
    \            var strongest_extension_strength = extension_cap - extension_sm\n\
    \            if (strongest_strength < strongest_extension_strength) {\n      \
    \          strongest_strength = strongest_extension_strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + strongest_extension", "        val strongest = scala.math.min(extensions.length,\
    \ extensions.length / 2)\n        \n        val classMap = mutable.HashMap[String,\
    \ String]()\n        \n        extensions.zipWithIndex.foreach { e =>\n      \
    \      if(e._1.matches(\"[A-Z]\")) {\n                classMap.put(e._1, e._2\
    \ + \".\" + e._1)\n            } else {\n                classMap.put(e._1, e._2)\n\
    \            }\n        }\n        \n        var strongestClass = \"\"\n     \
    \   \n        classMap.keys.toList.sortWith(_ < _).foreach { s =>\n          \
    \  if(s.matches(\"[A-Z]\")) {\n                strongestClass = s + \"$\" + strongest\n\
    \            } else {\n                strongestClass = s + \"$\" + strongest\n\
    \            }\n        }\n        \n        strongestClass + \"$\" + strongest",
  "        if (extensions.length == 0) {\n          class_name\n        }\n      \
    \  else {\n          val CAP = extensions(0).length\n          val SM = extensions(1).length\n\
    \          val strength = CAP - SM\n          extensions match {\n           \
    \ case Nil => \"null\"\n            case head :: tail => {\n              if (strength\
    \ < CAP) {\n                head.substring(0, CAP) + StrongestExtension(class_name\
    \ +\".\" +head, tail)\n              }\n              else if ((CAP - SM) == strength)\
    \ {\n                head.substring(0, SM) + StrongestExtension(class_name +\"\
    .\" +head, tail)\n              }\n              else if ((CAP - SM) > strength)\
    \ {\n                head.substring(0, SM - strength) + StrongestExtension(class_name\
    \ +\".\" +head, tail)\n              }\n              else {\n               \
    \ head.substring(0, CAP) + StrongestExtension(class_name +\".\" +head, tail)\n\
    \              }\n            }\n          }\n        }\n      }\n}\n\n\"\"\"\n\
    \nobject Solution {\n    def main(args: Array[String]): Unit = {\n        val\
    \ in = new java.io.BufferedReader(new java.io.InputStreamReader(System.in))\n\
    \        val sz = in.readLine().trim\n        val input = in.mkString.split(\"\
    \\\\s+\").map(x => x.trim).toList\n        val classNames = input(0)\n       \
    \ val extensions  = input.drop(1)\n        val classNames = classNames.split(\"\
    \\\\.\")\n        val result = classNames.map( _.reverse ).foldLeft[String](\"\
    \") { case (acc, x) => acc + x.head.toUpperCase + x.tail }\n        println(result)",
  "        val class_name_lower = class_name match {\n            case \"_\" => throw\
    \ new Exception(\"class name can not be _\")\n            case x => x.toLowerCase\n\
    \        }\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n\
    \n        var strongest = extensions_lower.toSet.min\n        var index = -1\n\
    \        for(i <- 0 until extensions_lower.length) {\n            val extension\
    \ = extensions_lower(i)\n            if(extension.indexOf(strongest) != -1) {\n\
    \                index = i\n                break\n            }\n        }\n\
    \        if(index < 0) throw new Exception(\"no extension could be found\")\n\n\
    \        val class_name_lower = class_name match {\n            case \"_\" =>\
    \ throw new Exception(\"class name can not be _\")\n            case x => x.toLowerCase\n\
    \        }\n        val extension = extensions_lower(index)\n        val extension_lower\
    \ = extension.toLowerCase\n        val strongest_extension = class_name_lower\
    \ + \".\" + extension\n        val strongest_extension_lower = strongest_extension.toLowerCase\n\
    \        if(extension_lower.indexOf(strongest_extension_lower) == -1) {\n    \
    \        throw new Exception(\"no extension could be found\")\n        }\n   \
    \     strongest_extension", "        val strongest_extension = extensions.foldLeft((\"\
    \", -1)){ (result, ext) =>\n            val name_parts = ext.split(\"[|]\")\n\
    \            val strongest_name = name_parts(name_parts.size - 2)\n          \
    \  val strongest_strength = name_parts.last.map(_.toInt).sum\n            val\
    \ strength = if (strongest_strength == 0) -1 else (strongest_strength - name_parts.last.map(_.toChar).sum)\n\
    \            if (strength > 0) (strongest_name + \".\" + ext, strength) else (\"\
    \", -1)\n        }._1\n        String.format(\"%s.%s\", class_name, strongest_extension)",
  "        def frac(x : String) =\n            if (x.isEmpty) 0.0\n            else\
    \ x.toCharArray.map(_.toUpperCase).length - x.toCharArray.map(_.toLowerCase).length\n\
    \        // A helper method which returns a list of extensions with the same strength.\n\
    \        def sameStrength(extensions : List[String]) : List[String] = {\n    \
    \        def sort(x : List[String], y: List[String]) : Boolean = \n          \
    \      if (frac(x._1) - frac(y._1)) == 0.0 // compare length of extension strings\n\
    \                else frac(x._1) == frac(y._1)\n            def compare(x : List[String],\
    \ y: List[String]) : Int = \n                if (frac(x._1) == frac(y._1))\n \
    \                   else if (frac(x._1) > frac(y._1)) -1\n                   \
    \ else 1\n            def xLen = x\n            def yLen = y\n            def\
    \ compareLength = compare(xLen, yLen)\n            if (compareLength != 0) xLen\
    \ else yLen\n        }\n        def extensionsWithSameStrength = sameStrength(extensions)\n\
    \        def extensionsWithSameStrengthOrder = extensionsWithSameStrength.sortBy(x\
    \ => frac(x._1))\n        def extensionsWithSameStrengthOrderWithIndex = extensionsWithSameStrengthOrder\n\
    \        var highestStrengthExtension = \"\"\n        var highestStrengthExtensionIndex\
    \ = -1\n        for (i <- 0 until extensionsWithSameStrengthOrderWithIndex.size)\
    \ {\n            var currentExtension = extensionsWithSameStrengthOrderWithIndex(i)\n\
    \            if (frac(currentExtension._1) > frac(highestStrengthExtension)) {\n\
    \                highestStrengthExtension = currentExtension\n               \
    \ highestStrengthExtensionIndex = i\n            }\n        }\n        className\
    \ +\".\" + highestStrengthExtension", "      var index = 0\n      val strongest_index\
    \ = -1\n      var strength = -1\n      var strongest_extension = \"\"\n      for\
    \ (i <- 0 until extensions.length) {\n        val extension = extensions(i)\n\
    \        val length = extension.length\n        if (length == 0) {\n         \
    \ continue\n        }\n        if (strength == -1) {\n          strength = extension.toUpperCase\
    \ - extension.toLowerCase - 1\n        }\n        else {\n          if (extension.toUpperCase\
    \ - extension.toLowerCase > strength) {\n            strength = extension.toUpperCase\
    \ - extension.toLowerCase - 1\n          }\n        }\n        index += length\n\
    \        if (index > strongest_index) {\n          strongest_index = index\n \
    \         strongest_extension = extension\n        }\n      }\n      class_name\
    \ + \".\" + strongest_extension", "        var strongest_extension = ListBuffer.empty[String]\n\
    \        var strongest_strength : Int = -1\n        \n        for (ex <- extensions)\n\
    \        {\n            if(ex.contains(class_name)) {\n                strongest_strength\
    \ = ex.length - class_name.length\n                strongest_extension += ex\n\
    \            }\n        }\n        \n        if(strongest_strength == -1)\n  \
    \      {\n            if(strongest_extension.nonEmpty) {\n                strongest_strength\
    \ = strongest_extension.head.index - class_name.index\n                strongest_extension\
    \ = strongest_extension.tail\n            }\n        }\n        \n        strongest_extension.foreach\
    \ { x => \n            if(x.contains(class_name))\n            {\n           \
    \     strongest_strength = strongest_strength - 1\n                strongest_extension\
    \ = strongest_extension.filter(x => x != x)\n            }\n        }\n      \
    \  \n        if(strongest_strength == -1) {\n            return \"ERROR\"\n  \
    \      }\n        else if(strongest_strength == 0)\n        {\n            return\
    \ class_name\n        }\n        else\n        {\n            return class_name\
    \ + \".\" + strongest_extension.head\n        }", "        if (extensions.isEmpty)\
    \ {\n           throw new Exception(\"No extensions\")\n        }\n        val\
    \ extensions_names_count = extensions.map(e => e.count(_ == '_')).sum\n      \
    \  val extensions_names_count_sorted = extensions.map(e => e.count(_ == '_')).sortBy(-_).take(extensions_names_count).toArray\n\
    \        val extensions_names_count_sorted.foreach(n => {\n            if (n %\
    \ 2 == 0) {\n                println(s\"$class_name.$n\")\n            }\n   \
    \     })\n        val extensions_names_count_sorted_2 = extensions.map(e => e.count(_\
    \ == '_')).sortBy(-_).take(extensions_names_count).toArray\n        val extensions_names_count_sorted_2.foreach(n\
    \ => {\n            if (n % 2 == 1) {\n                println(s\"$class_name.$n\"\
    )\n            }\n        })\n        throw new Exception(\"not implemeted\")",
  "        var highest_strength = -1\n        var best_extension = class_name.last\n\
    \        for (extension <- extensions){\n            if (extension.matches(class_name)){\n\
    \                var strength = extension.split(class_name).map(_.toUpperCase).count(_\
    \ == 'A')/extension.split(class_name).map(_.toLowerCase).count(_ == 'a')\n   \
    \             if (strength > highest_strength){\n                    best_extension\
    \ = extension\n                    highest_strength = strength\n             \
    \   }\n            }\n        }\n        return class_name + best_extension",
  "        val map = Map(\"AA\"->0, \"BB\"->0, \"CC\"->0, \"DD\"->0, \"EE\"->0, \"\
    FF\"->0, \"GG\"->0, \"HH\"->0, \"II\"->0, \"JJ\"->0, \"KK\"->0, \"LL\"->0, \"\
    MM\"->0, \"NN\"->0, \"OO\"->0, \"PP\"->0, \"QQ\"->0, \"RR\"->0, \"SS\"->0, \"\
    TT\"->0, \"UU\"->0, \"VV\"->0, \"WW\"->0, \"XX\"->0, \"YY\"->0, \"ZZ\"->0, \"\
    A\"->0, \"B\"->0, \"C\"->0, \"D\"->0, \"E\"->0, \"F\"->0, \"G\"->0, \"H\"->0,\
    \ \"I\"->0, \"J\"->0, \"K\"->0, \"L\"->0, \"M\"->0, \"N\"->0, \"O\"->0, \"P\"\
    ->0, \"Q\"->0, \"R\"->0, \"S\"->0, \"T\"->0, \"U\"->0, \"V\"->0, \"W\"->0, \"\
    X\"->0, \"Y\"->0, \"Z\"->0, \"AA\"->1, \"BB\"->1, \"CC\"->1, \"DD\"->1, \"EE\"\
    ->1, \"FF\"->1, \"GG\"->1, \"HH\"->1, \"II\"->1, \"JJ\"->1, \"KK\"->1, \"LL\"\
    ->1, \"MM\"->1, \"NN\"->1, \"OO\"->1, \"PP\"->1, \"QQ\"->1, \"RR\"->1, \"SS\"\
    ->1, \"TT\"->1, \"UU\"->1, \"VV\"->1, \"WW\"->1, \"XX\"->1, \"YY\"->1, \"ZZ\"\
    ->1, \"A\"->1, \"B\"->1, \"C\"->1, \"D\"->1, \"E\"->1, \"F\"->1, \"G\"->1, \"\
    H\"->1, \"I\"->1, \"J\"->1, \"K\"->1, \"L\"->1, \"M\"->1, \"N\"->1, \"O\"->1,\
    \ \"P\"->1, \"Q\"->1, \"R\"->1, \"S\"->1, \"T\"->1, \"U\"->1, \"V\"->1, \"W\"\
    ->1, \"X\"->1, \"Y\"->1, \"Z\"->1)\n        var best_extension = 0\n        var\
    \ best_extension_strength = -1\n        var class_name_chars = class_name.split(\"\
    \").toList\n        for (ext <- extensions) {\n            var ext_chars = ext.split(\"\
    \").toList\n            var ext_strength = 0\n            var ext_strength_diff\
    \ = -1\n            var ext_index = -1\n            var ext_index_diff = -1\n\
    \            for(i<-0 until ext_chars.size) {\n                ext_strength +=\
    \ map.get(ext_chars(i)).get", "        var strength : Int = -1\n        var index\
    \ : Int = 0\n        for (e <- extensions) {\n            if (e.length == 0) continue\n\
    \            if (e.length == class_name.length) continue\n            if (strength\
    \ == -1) strength = e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B')\n\
    \            val diff = e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B')\n            if (strength > diff) continue\n            strength = diff\n\
    \            index = extensions.indexOf (e)\n        }\n        if (strength ==\
    \ -1) class_name + extensions.last\n        else if (strength < 0) class_name\
    \ + extensions(index)\n        else class_name + extensions(index)", "       \
    \ \n        var maxS = 0\n        var maxStr = \"\"\n        \n        for(i <-\
    \ 0 until extensions.length){\n            val c = extensions(i).toChar\n    \
    \        val str = c.toString\n            var s = str.length\n            for(j\
    \ <- 0 until s.length){\n                val l = s(j).toLower\n              \
    \  s += l.length\n            }\n            if(s > maxS){\n                maxS\
    \ = s\n                maxStr = str\n            }\n        }\n        \n    \
    \    return s\"${class_name.split(\"\\\\.\").last}.${maxStr}\"", "        // Your\
    \ code here\n        val extension = extensions match {\n            case(ext)\
    \ => ext.map { ext => ext.toLowerCase().toUpperCase }\n            case(_) =>\
    \ Nil\n        }\n\n        val nameArray = class_name.toLowerCase().split(\"\\\
    \\.\").toList\n        var strength = nameArray.length match {\n            case\
    \ 1 => -1\n            case _ => nameArray.map(x => x.toUpperCase).map(x => x.count(_\
    \ == 'A')).sum - nameArray.map(x => x.toUpperCase).count(_ == 'A')\n        }\n\
    \n        val newName = nameArray.reverse.find(_.isLetter).zip(extension.reverse).find\
    \ {\n            case (name, _) => name.count(_ == 'A') == strength\n        }._1\n\
    \        class_name.toString.replaceFirst(class_name + \".\", \"\") + newName",
  "        val strongest_extension = extensions.minBy(extension =>\n            extension.filter(_.isUpper).length\
    \ - extension.filter(_.isLower).length)\n        s\"$class_name.${strongest_extension}\"",
  "        val extensions_hash = HashMap[String, Int]()\n        val sorted_extensions\
    \ = extensions sortBy (x => extensions_hash(x.toLowerCase()))\n        val strength_map\
    \ = new mutable.HashMap[String, Int]()\n        sorted_extensions.foreach{x =>\
    \ if (strength_map.contains(x.toLowerCase())) \n        strength_map(x.toLowerCase())\
    \ <- strength_map(x.toLowerCase()) + 1} else {\n            strength_map(x.toLowerCase())\
    \ <- 1}\n        val max_strength = strength_map max(_._2)\n        var class_name_to_return\
    \ = class_name\n        for ( x <- strength_map ){\n            class_name_to_return\
    \ = class_name_to_return + \".\" + x\n        }\n        return class_name_to_return",
  "        val extensionSet = extensions grouped by  {_.toUpperCase.length}\n    \
    \    val extensionNames = extensionSet.toList\n        val extensionNameSet =\
    \ extensionNames map (_.toLowerCase)\n        val extensionNameSetSizes = extensionNameSet\
    \ map (_=> extensionSet.size)\n        var max = extensionNameSetSizes.max\n \
    \       val strongestExtension = extensionNames.find(x=> extensionNameSetSizes(x)\
    \ == max)\n        val strongestExtensionName = strongestExtension.getOrElse(\"\
    \")\n        class_name + \"_\" + strongestExtensionName", "        var longest\
    \ = extensions(0)\n        var count = 1\n\n        for (x <- extensions){\n \
    \           if (x.length > longest.length) longest = x\n            if (x.length\
    \ == longest.length && x.toUpper == longest.toUpper) {\n                count\
    \ +=1\n            }\n        }\n\n        className + longest.substring(0,longest.length-count)\
    \ + longest.substring(longest.length-count).toLowerCase", "        // Write your\
    \ code here.\n        var result = \"\"\n        var strongest = extension(0)\n\
    \        var index = 0\n        var count = 0\n        while (index < extensions.size)\
    \ {\n            val item = extensions(index)\n            val match = item.toUpperCase().contains(strongest.toUpperCase())\n\
    \            if (match) {\n                count += 1\n            }\n       \
    \     if (count == strongest.toString.toUpperCase().count() - strongest.toString.toLowerCase().count())\
    \ {\n                strongest = item\n            }\n            index += count\n\
    \        }\n        result = class_name + strongest\n        result", "      \
    \  var class_name_length = class_name.count(' ') + 1\n        var extension_length\
    \ = 0\n        extensions.foreach {\n            extension =>\n            val\
    \ extension_length = extension.length\n        }\n        \n        var strongest_extension\
    \ = \"\"\n        var max_extension_strength = 0\n        extensions.foreach {\n\
    \            extension =>\n            var extension_strength = extension_length\
    \ - extension_length.toString.toUpperCase.count - extension_length.toString.toUpperCase.count\n\
    \            max_extension_strength = extension_strength if extension_strength\
    \ > max_extension_strength\n        }\n        if (max_extension_strength == 0)\
    \ strongest_extension = \"\"\n        if (max_extension_strength == 1) strongest_extension\
    \ = class_name\n        if (max_extension_strength > 1) {\n            val extension_strength_list\
    \ = ListBuffer[String]()\n            extensions.foreach {\n                extension\
    \ =>\n                var extension_strength = extension_length - extension_length.toString.toUpperCase.count\
    \ - extension_length.toString.toUpperCase.count\n                extension_strength_list.append(extension)\n\
    \                if (extension_strength == max_extension_strength) strongest_extension\
    \ = extension\n            }\n            if (extension_strength_list.size > 1)\
    \ \n                strongest_extension = extension_strength_list.toList.sortBy(x\
    \ => x).head\n        }\n        return strongest_extension", "      var bestStrongest\
    \ = \"\"\n      var bestStrength = 0\n      extensions.foreach{s =>\n        var\
    \ strength = s.toList.map(x => ((x.toUpperCase.length) - (x.toLowerCase.length))).max\n\
    \        if (strength > bestStrength) {\n          bestStrongest = s\n       \
    \   bestStrength = strength\n        }\n      }\n      class_name + \"_\" + bestStrongest",
  "        var strongest_extension = 0\n        var strongest_extension_name = \"\"\
    \n        var index = -1\n        for(index <- 0 until extensions.length) {\n\
    \            if(extensions(index).count(x => (x.isUpperCase) && (x.toLowerCase()\
    \ == class_name.charAt(0)) >= strongest_extension) {\n                strongest_extension\
    \ = extensions(index).count(x => (x.isLowerCase) && (x.toLowerCase() == class_name.charAt(0))\
    \ >= strongest_extension\n                strongest_extension_name = extensions(index)\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension_name",
  "        extensions match {\n            case Nil => \"\"\n            case _ =>\
    \ {\n                val classObject = scala.reflect.io.Codec.lookup(class_name)\n\
    \                val classNameToObject = classObject.getClass\n              \
    \  val classes = classObject.getClasses()\n                val extensionsWithSameStrength\
    \ = classes.flatMap(_.asInstanceOf[List[String]]).filter(e => e.filter(_.isUpperCase).length\
    \ == e.filter(_.isLowerCase).length).sortWith(_.isInstanceOf[String] compare _).takeWhile(_.isInstanceOf[String]).toList\n\
    \                val extensionsWithDifferentStrength = classes.flatMap(_.asInstanceOf[List[String]]).filter(e\
    \ => e.filter(_.isUpperCase).length != e.filter(_.isLowerCase).length).sortWith(_.isInstanceOf[String]\
    \ compare _).takeWhile(_.isInstanceOf[String]).toList\n                val strongestExtension\
    \ = extensionsWithSameStrength.head // TODO: check for exceptions here.\n    \
    \            (className + strongestExtension).getOrElse(\"\")\n            }\n\
    \        }", "        val class_ext = extensions.foldLeft(class_name) { (a, b)\
    \ => a + b + \".\" } \n        val length = class_ext.length\n        if(length\
    \ == 0) {\n            return class_name\n        }\n        val class_name =\
    \ class_ext.substring(0, length - 1)\n        val extension = class_ext.substring(length\
    \ - 1)\n        val class_length = class_name.length\n        val strength = extension.split(\"\
    \").map(x => (x to 0).foldLeft(0){ (acc, elem) =>\n            if(x.toUpperCase()\
    \ == elem.toUpperCase()) {\n                acc + 1;\n            } else {\n \
    \               acc;\n            }\n        }) match {\n            case x if\
    \ x != 0 => x - 1\n            case x => 0\n        }\n        if(strength ==\
    \ 0) {\n            return class_name\n        }\n        var result = \"\"\n\
    \        if(strength < class_length) {\n            result = class_name + extension.substring(0,\
    \ strength + 1)\n        } else if(strength > class_length) {\n            result\
    \ = class_name + extension.substring(strength + 1)\n        }\n        return\
    \ result", "        // Write your code here\n        // let strongest_extension\
    \ = ??\n        // strongest_extension should be the strongest extension\n   \
    \     // of class_name with the list extensions\n        // The order of the extensions\
    \ should not matter\n        // The extensions should not have duplicated names\n\
    \        // The extensions should be in lowercase letters\n        // The strength\
    \ of each extension should be positive\n        // The strongest extension should\
    \ be the first extension in the list\n", "        var strongest = \"\"\n     \
    \   var extensions_counter = Map[String,Int]()\n        for (ext in extensions)\
    \ {\n            extensions_counter += (ext -> (extensions_counter.getOrElse(ext,0)+1))\
    \ \n        }\n        val strength = extensions_counter.filter(_._2 > extensions_counter.filter(_._1\
    \ == class_name)._2).map(_._2).sum\n        if (strength > 0) strongest = class_name\
    \ + \".\" + extensions_counter.filter(_._2 == strength).map(_._1).head\n     \
    \   else strongest = class_name", "        var strongest = \"\"\n        var counter\
    \ = extensions.length\n        for (i <- 0 until extensions.length) {\n      \
    \      strongest += class_name + extensions(i).toUpperCase\n            strongest\
    \ += extensions(i).toLowerCase\n        }\n        if (extensions.count(_ == strongest)\
    \ == 0) {\n            return \"\"\n        } else {\n            val strength\
    \ = extensions.count(_ == strongest)\n            for (i <- 0 until strength)\
    \ {\n                strongest = extensions(i)\n            }\n            return\
    \ strongest\n        }", "        var max_index = -1\n        var max_ext = \"\
    \"\n        var max_ext_strength = -1\n        for (ext of extensions){\n    \
    \        val ext_strength = ext.toUpperCase.count - ext.toLowerCase.count\n  \
    \          if (ext_strength > max_ext_strength){\n                max_ext_strength\
    \ = ext_strength\n                max_index = extensions.length - 1\n        \
    \        max_ext = ext\n            }\n        }\n        val class_parts = class_name.split('.')\n\
    \        class_parts(max_index) +\".\"+max_ext", "        if (extensions.isEmpty)\
    \ throw new Exception(\"Invalid input\")\n        var class_strength = extension.Count(_.toChar.toUpperCase.toInt)\n\
    \        var extension_strength = extension.Count(_.toChar.toLowerCase.toInt)\n\
    \        if (extension_strength == 0) return class_name\n        var extension_max\
    \ = extension.Max(i => (extension_strength - i.toChar.toLowerCase.toInt))\n  \
    \      var class_max = extension.Max(i => (class_strength - i.toChar.toUpperCase.toInt))\n\
    \        var class_key = extension.Min(i=> i.toChar)\n        var max_score =\
    \ extension.Max(i => i.toChar)\n        val new_class = class_name+extension_max.toChar\n\
    \        for ((key, value) <- extension.zipWithIndex) {\n            if (key.toChar\
    \ == max_score) {\n                new_class += key.substring(1)\n           \
    \ }\n        }\n        new_class += class_max.toChar\n        return new_class",
  "        val strength = extensions.map(s => s.toUpperCase.count - s.toLowerCase.count).sum.toDouble\
    \ / extensions.length\n        val strength_sorted = extensions.sortBy(s => s.toUpperCase.count\
    \ - s.toLowerCase.count)\n        if (strength_sorted.length == 1) {\n       \
    \     class_name +\".\"+strength_sorted.head\n        } else {\n            if\
    \ (strength_sorted.last != strength) {\n                val first_extension =\
    \ strength_sorted.take(strength_sorted.length - 1).last\n                class_name\
    \ +\".\"+first_extension\n            } else {\n                class_name +\"\
    .\"+strength_sorted.last\n            }\n        }", "       val strongest = extensions.foldLeft(0)((max,\
    \ x) => {\n          if (x.toCharArray.filter(x => x.toUpper == x.toUpper).length\
    \ == x.toCharArray.filter(x => x.toLower == x.toLower).length) max else max -\
    \ 1\n       })\n       return s\"$class_name.$extensions(${strongest})\"", " \
    \       // Your code goes here\n        var extensions_ = extensions ++ List(\"\
    \")\n        var strength = -1\n        var strongest_extension = \"\"\n     \
    \   extensions_.foreach { extension =>\n            val cap = extension.substring(0,\
    \ 1).toUpperCase().toInt\n            val sm = extension.substring(0, 1).toLowerCase().toInt\n\
    \            val diff = cap - sm\n            if (diff > 0) {\n              \
    \  if (strength > 0) {\n                    strongest_extension = extension\n\
    \                }\n                strength = diff\n            } else {\n  \
    \              extensions_ = extensions_.filter(_ != extension)\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  val s = extensions.size\n        var n = 0\n        var m = -1\n        var\
    \ k = -1\n        extensions.foreach(x => { \n            if(x.contains(class_name))\
    \ {\n                if(x.charAt(0) == x.charAt(0)) {\n                    k =\
    \ x.charAt(0).toInt\n                    n = k\n                }\n          \
    \      if(x.charAt(x.length - 1) == x.charAt(x.length - 1)) {\n              \
    \      m = x.charAt(x.length - 1).toInt\n                }\n            }\n  \
    \      })\n        return s\"$class_name.$k$m\"", "        val letters = extensions\
    \ filter (_.isUpper)\n        val letters_count = letters.map(_.length).sum\n\n\
    \        val lowers = extensions filter (_.isLower)\n        val lowers_count\
    \ = lowers.map(_.length).sum\n\n        val caps = extensions filter (_.isUpper)\n\
    \        val caps_count = caps.map(_.length).sum\n\n        val sm = letters.toSet.size\
    \ == letters_count && lowers.toSet.size == lowers_count\n        val strength\
    \ = (caps_count - sm) / caps_count\n        s\"$class_name.$extensions.$strength\"",
  "        // The map function returns a map of class name to extension.\n       \
    \ var extensions_map = Map(className -> extensions)\n        // The reduce function\
    \ will reduce an extension list using the strongest extension\n        // that\
    \ has already encountered the particular class name.\n        // We need to keep\
    \ track of the strongest extension so far, starting with -1 as the default value.\n\
    \        var strongest_extension_strength = -1\n        // Traverse through the\
    \ extensions list\n        for (extension <- extensions) {\n            // If\
    \ the current extension is already in the map, increase the strongest extension\
    \ strength\n            if (extensions_map.contains(extension)) {\n          \
    \      strongest_extension_strength = extensions_map(extension).get.count(_.isUpper)\n\
    \            }\n            // If the current extension is in the map and the\
    \ current strongest extension strength\n            // is less than the given\
    \ extension strength, then replace the strongest extension strength\n        \
    \    // with the current strength.\n            if (extensions_map.contains(extension)\
    \ && (strongest_extension_strength < extensions_map(extension).get.count(_.isLower)))\
    \ {\n                strongest_extension_strength = extensions_map(extension).get.count(_.isUpper)\n\
    \            }\n        }\n        // Return the class name with strongest extension\
    \ name appended.\n        class_name + (extensions_map.get(class_name).get.maxBy(_.isUpper).getOrElse(\"\
    \"))", "        val c = class_name match { case \"Slices\" => 0 \n           \
    \ case \"Cheese\" => 1 \n            case \"StuFfed\" => 2 }\n        val strength\
    \ = extensions map { e => e.toUpperCase(Locale.ROOT).count(_.isUpper) - e.toUpperCase(Locale.ROOT).count(_.isLower)\
    \ }\n        val strengths = strength.toArray\n        val index = strengths.indexOf(-strength(0))\n\
    \        extensions.apply(index) ", "        // Your code here\n        var strength\
    \ : Int = -1\n        var strongest : String = \"\"\n        extensions.foreach(e\
    \ => {\n            if (strength > 0) return\n            if (e.matches(\"[A-Z][a-z]\"\
    ))\n                strength = e.length() - e.toLowerCase().length()\n       \
    \     else return\n        })\n        extensions.foreach(e => {\n           \
    \ if (strength > 0) return\n            if (e.matches(\"[a-z]\"))\n          \
    \      strength = e.length() - e.toLowerCase().length()\n            else return\n\
    \        })\n        extensions.foreach(e => {\n            if (strength > 0)\
    \ return\n            if (e.matches(\"[A-Z]\"))\n                strength = e.length()\
    \ - e.toLowerCase().length()\n            else return\n        })\n        if\
    \ (strength > 0) strongest = class_name + extensions.sortWith(_._2 > _._2).head._1\n\
    \        else strongest = class_name\n        return strongest", "        val\
    \ extension_set = extensions.toSet\n        var strength = 0\n        var name\
    \ = \"\"\n        var i = -1\n        for (extension <- extensions) {\n      \
    \      i = i + 1\n            if (extension_set contains extension) {\n      \
    \          strength = strength + i.toDouble / extension_set.size\n           \
    \ }\n        }\n        strength.toDouble match {\n            case x if x > strength\
    \ => name = extensions(strength)\n            case x if x == strength => name\
    \ = extensions(strength)\n            case _ => name = extensions(strength)\n\
    \        }\n        name + (if(name != \"\") \".\" + class_name else \"\")", " \
    \       val countMap = collection.mutable.Map[String, Int]()\n        val extensionList\
    \ = new collection.mutable.Array[String](extensions.length)\n\n        for (extension\
    \ <- extensions) {\n            val extensionString = extension.toLowerCase\n\
    \            val extensionArray = extensionString.split(\"(?!^)\")\n\n       \
    \     for (i <- 0 until extensionArray.length) {\n                val count =\
    \ countMap.getOrElse(extensionArray(i), 0)\n                countMap += (extensionArray(i)\
    \ -> count + 1)\n            }\n        }\n\n        val sortedCountMap = collection.mutable.Map[Int,\
    \ (String, Int)](countMap.toSeq.sortBy(_._2).reverse.toSeq)\n        \n      \
    \  val maxStrongestCount = 0\n        val maxStrongestExtension = \"\"\n     \
    \   val maxStrongestExtensionCount = 0\n\n        for (i <- 0 until extensionList.length)\
    \ {\n            val extension = extensionList(i)\n            val extensionCount\
    \ = sortedCountMap.getOrElse(i, 0)\n            val extensionString = extension.toLowerCase\n\
    \            val extensionArray = extensionString.split(\"(?!^)\")\n         \
    \   val strongestCount = extensionArray.length\n            val strongestExtension\
    \ = extensionArray(0)\n            val strongestExtensionCount = countMap.getOrElse(strongestExtension,\
    \ 0)\n            \n            if (strongestCount > maxStrongestCount) {\n  \
    \              maxStrongestCount = strongestCount\n                maxStrongestExtension\
    \ = strongestExtension\n                maxStrongestExtensionCount = strongestExtensionCount\n\
    \            }\n        }\n\n        return (class_name + maxStrongestExtension\
    \ + \".\" + maxStrongestExtensionCount)"]
stop_tokens:
- "\n    }\n"
