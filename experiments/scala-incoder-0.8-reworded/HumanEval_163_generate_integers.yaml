name: HumanEval_163_generate_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two positive integers a and b, return the even digits between a\n\
  \    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
  \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    //\
  \ >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong,\
  \ 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
  \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
  \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n  \
  \  assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
  \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        if (a<b) List(a).reverse ::: generateIntegers(b-1,a)\n    \
    \    else List()", "        var list : List[Long] = Nil\n        if (a < b) {\
    \ \n            list = a :: list \n        }\n        while (b > 0) {\n      \
    \      list = (b / 2l).toLong :: list \n            b = b % 2l\n        }\n  \
    \      list.reverse", "        if (a > b) a :: Nil\n        else b :: generateIntegers(a\
    \ / 10, a % 10).filter(x => x % 2 == 0).reverse", "        val evenDigits = scala.util.Random.shuffle((0\
    \ until a).toList)\n        val evenDigitsBetweenA = evenDigits.takeWhile(_ <\
    \ b)\n        val evenDigitsBetweenB = evenDigits.dropWhile(_ < b)\n        evenDigitsBetweenA.toList.sortBy(_.toString.charAt(0).toLong)",
  "        val aDigitsToGo = math.min(math.ceil(a.toDouble / 2.toDouble), b.toDouble)\n\
    \        var bDigitsToGo = math.min(math.ceil(b - a.toDouble), a.toDouble)\n \
    \       var listOfInts = List[Long]()\n        var current = 0\n        var currentNumber\
    \ = 0\n        while(current <= aDigitsToGo) {\n            currentNumber = math.floor(current)\n\
    \            current += 2\n            listOfInts += currentNumber.toLong\n  \
    \      }\n        current = 1\n        currentNumber = 1\n        while(current\
    \ <= bDigitsToGo) {\n            currentNumber = math.floor(current)\n       \
    \     current += 2\n            listOfInts += currentNumber.toLong\n        }\n\
    \        return listOfInts", "        val evens = a until b filter { x => x %\
    \ 2 == 0 }\n        if (evens.length == 0) List()\n        else evens.sort", " \
    \       val list = scala.collection.mutable.ListBuffer.empty[Long]\n        val\
    \ a1 = a % 10\n        val a2 = a / 10\n        var a3 = a1 % 2\n        a1 =\
    \ a1 // 2\n        a2 = a2 // 2\n        while (b > 0) {\n            val b1 =\
    \ b % 10\n            val b2 = b / 10\n            var b3 = b1 % 2\n         \
    \   b1 = b1 // 2\n            b2 = b2 // 2\n            var c = 0\n          \
    \  while ((b3 != a3) && (c < b2)) {\n                list.append((a1 * b1 + a2\
    \ * b2 + a3 * b3))\n                a3 = a3 * (2l - 1) + b3 // mod 2\n       \
    \         b3 = b3 // 2\n                c += 1\n            }\n            list.append((a1\
    \ * b1 + a2 * b2 + a3 * b3))\n            a += 1\n        }\n        list.toList",
  "        def isEven(x: Long) : Boolean = (x % 2) == 0\n        def digit(x: Long)\
    \ : Int = {\n            if (x < 10) {\n                0\n            } else\
    \ if (x < 100) {\n                1\n            } else if (x < 1000) {\n    \
    \            2\n            } else if (x < 10000) {\n                3\n     \
    \       } else if (x < 100000) {\n                4\n            } else if (x\
    \ < 1000000) {\n                5\n            } else if (x < 10000000) {\n  \
    \              6\n            } else if (x < 100000000) {\n                7\n\
    \            } else if (x < 1000000000) {\n                8\n            } else\
    \ if (x < 10000000000) {\n                9\n            } else {\n          \
    \      10\n            }\n        }\n\n        def getEven(x: Long) : List[Long]\
    \ = {\n            val res : List[Long] = List(x)\n            var x = x\n   \
    \         while (x > 0) {\n                if (isEven(x)) {\n                \
    \    res :+ x\n                }\n                x = x / 10\n            }\n\
    \            return res\n        }\n\n        def getOdd(x: Long) : List[Long]\
    \ = {\n            val res : List[Long] = List(x)\n            var x = x\n   \
    \         while (x > 0) {\n                if (!isEven(x)) {\n               \
    \     res :+ x\n                }\n                x = x / 10\n            }\n\
    \            return res\n        }\n\n        // For each number in a, get the\
    \ numbers in b that are less than it.\n        // For each of those numbers, find\
    \ if there is a number in b that is less\n        // than or equal to it.\n  \
    \      // For each of those numbers, find the lowest number in b to which it\n\
    \        // is less than or equal to it.\n        // If there is not one, add\
    \ it to the results list.\n        val results : List[Long] = getEven(a) flatMap\
    \ {\n            x => getOdd(x) flatMap {\n                y => getEven(y) flatMap\
    \ {\n                    z => {\n                        if (z >= x) z\n     \
    \                   else List()\n                    }\n                }\n  \
    \          }\n        } flatMap {\n            y => getOdd(y) flatMap {\n    \
    \            z => {\n                    if (z >= y) z\n                    else\
    \ List()\n                }\n            }\n        } flatMap {\n            z\
    \ => {\n                if (z >= 10) z\n                else List()\n        \
    \    }\n        } flatMap {\n            z => {\n                if (z >= 100)\
    \ z\n                else List()\n            }\n        } flatMap {\n       \
    \     z => {\n                if (z >= 1000) z\n                else List()\n\
    \            }\n        } flatMap {\n            z => {\n                if (z\
    \ >= 10000) z\n                else List()\n            }\n        } flatMap {\n\
    \            z => {\n                if (z >= 100000) z\n                else\
    \ List()\n            }\n        } flatMap {\n            z => {\n           \
    \     if (z >= 1000000) z\n                else List()\n", "        val digits\
    \ = mutable.ArrayBuffer(a, b).map(_.toLong).toList\n        if (digits.size <\
    \ 2) {\n            return List()\n        }\n        val a = digits.head\n  \
    \      val b = digits.tail.head\n        val digitPairs = generateDigitPairs(a,\
    \ b, digits.size)\n        digits.toList ::: digitPairs.toList", "        val\
    \ m = (a <= b)\n        if (m) a.toList.sorted else b.toList.sorted", "      if\
    \ (a < b)\n        List().toList ::: generateIntegers(a+1, b)\n      else {\n\
    \        val m = a / b\n        generateIntegers(m, b) ::: List(m).toList\n  \
    \    }", "        var result = List();\n        var remainder = (b - a).abs %\
    \ 10;\n        var i = 0;\n        for(; i + 1 < remainder; i = i + 1) {\n   \
    \         if(a <= ((b - a).abs / 10 * i) ) result = result :+ i;\n        }\n\
    \        for(; i + 1 < remainder - i; i = i + 1) {\n            if((a <= ((b -\
    \ a).abs / 10 * i) ) ) result = result :+ i;\n        }\n        if(remainder\
    \ > i ) result = result :+ remainder - i;\n        return result;", "        if\
    \ (a > b) return List()\n        val c = a % b\n        var d: Long = a / b\n\
    \        var r: List[Long] = List(b) //List(b)\n        while (c == 0) d = 2 *\
    \ d\n        c = c - b\n        c > 0 match {\n            case true =>\n    \
    \            val newC = c - b\n                val newd = d / newC\n         \
    \       r += newC.toLong\n                d = newd\n            case false =>\n\
    \        }\n        if (d > 0) r += d.toLong\n        return r", "        val\
    \ min = math.min(a, b)\n        val max = math.max(a, b)\n        val nums = mutable.ListBuffer.empty[Long]\n\
    \        var carry = true\n        for (i = min.toInt ; i >= 0; i = i - 2) {\n\
    \            if (i % 2 == 0) {\n                carry = true\n            }\n\
    \            else {\n                carry = false\n            }\n          \
    \  nums += i.toLong\n            if (carry && i < max) {\n                nums\
    \ += 1\n            }\n        }\n        nums.toList", "        val evenList\
    \ : scala.collection.mutable.ListBuffer[Long] = ListBuffer()\n        val rem\
    \ = a % b\n        var start = 0\n        var last = 0\n        while(start <=\
    \ rem){\n            val number = (rem * 100 + start).toLong\n            if(number\
    \ > a){\n                break\n            }\n            if(evenList.contains(number)){\n\
    \                continue\n            }\n            evenList += number\n   \
    \         last += number\n            start = last\n        }\n        if(evenList.size\
    \ > 0){\n            evenList.toList\n        }\n        else{\n            List()\n\
    \        }", "        val list = mutable.ListBuffer[Long]()\n        for (i =\
    \ a to b - 1){\n            if (i % 2 == 0)\n                list += i.toLong\n\
    \        }\n        list.toList", "        val evenIntegers : List[Long] = a to\
    \ b by 2 filter (_ % 2 == 0)\n        val evenIntegerList : List[Long] = evenIntegers.toList\n\
    \        evenIntegerList.sortWith (_ < _)", "      val ints = scala.collection.mutable.ListBuffer[Long]()\n\
    \      var i = a\n      var j = b\n      while (i <= j) {\n        if (i.toString.length\
    \ == 2) ints += i.toLong\n        i += 1\n        j += 1\n      }\n      if (ints.isEmpty)\
    \ ints += a.toLong\n      ints.toList", "        if (a == 0 || b == 0) return\
    \ Nil\n        def isEven(i: Long) : Boolean = i % 2 == 0\n        def isLessThan(n:\
    \ Long) : Boolean = n < a\n        def isGreaterThan(n: Long) : Boolean = n >\
    \ b\n        def rec(i : Long, acc : List[Long]) : List[Long] = {\n          \
    \  if (isEven(i) && isLessThan(b)) acc :+ i\n            if (isEven(i) && isGreaterThan(b))\
    \ rec(i, acc)\n            else if (isLessThan(i) && isGreaterThan(a)) rec(i,\
    \ acc :+ i)\n            else Nil\n        }\n        rec(0, List(a))", "    \
    \    val s = math.max(b.toInt, a.toInt)\n        var res = []\n        for (x\
    \ <- 0 to s) {\n            val rem = math.min(b.toInt, a.toInt) - x\n       \
    \     res ::= rem :: 0 until rem\n        }\n        res", "        val ans =\
    \ collection.mutable.ListBuffer.empty[Long]\n        for (d <- a.toInt until b.toInt)\
    \ {\n            if (d.toLong rem 2 == 0) {\n                ans += d\n      \
    \      }\n        }\n        ans.toList", "        var result : List[Long] = Nil\n\
    \        var temp : Long = a - 1\n\n        while(temp <= b) {\n            if\
    \ (temp % 2 == 0) {\n                result = result ::: List(temp.toLong)\n \
    \           }\n            temp += 1\n        }\n        return result", "   \
    \     val s = scala.util.Random.nextInt(100) + 1 //random\n        val m = a /\
    \ s\n        val n = b / s\n        val k = m / n\n        if (k > 0) {\n    \
    \        if (k % 2 == 0) {\n                List[Long](m / n) ::: generateIntegers(m,\
    \ n)\n            } else {\n                List[Long]() ::: generateIntegers(m,\
    \ n)\n            }\n        } else {\n            if (n % 2 == 0) {\n       \
    \         List[Long]() ::: generateIntegers(a, b)\n            } else {\n    \
    \            List[Long]() ::: generateIntegers(a, b)\n            }\n        }",
  "        if (a < 0 || b < 0) return List()\n        if (a == 0 || b == 0) return\
    \ List()\n        val max = (math.max(a, b)).toLong\n        val min = (math.min(a,\
    \ b)).toLong\n        if (min == max) return List()\n        val l = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        val r = scala.util.Random.nextInt(max-min+1)\n        var i = min - 1\n\
    \        while (i <= max) {\n            l.append(i)\n            i += 1\n   \
    \     }\n        val evens = l.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ odd = l.filter(_ % 2 == 1).sortWith(_ < _)\n        var even = evens.head\n\
    \        var odd = odd.head\n        while (even != odd) {\n            l.append(even)\n\
    \            even = evens.dropRight(1)\n            odd = odd.dropRight(1)\n \
    \       }\n        l.toList", "        val x = a % b\n        val evenList = a\
    \ until x filter (_ % 2 == 0)\n        val oddList = x until b filter (_ % 2 ==\
    \ 1)\n        oddList.filterNot(evenList.contains)", "        val list = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- a until b){\n            list += i.toLong\n        }\n     \
    \   list.sortWith((a, b) => a < b)", "        val n = b - a\n        val evens\
    \ = Seq[Long]()\n        for( x <- 0 until n ) {\n          val evenDigit = x\
    \ % 2\n          if(evenDigit == 0) evens += x\n        }\n        evens", " \
    \       val list = mutable.ListBuffer[Long]()\n        var i1 = -1\n        var\
    \ i2 = -1\n        var cur = a\n        while (cur <= b) {\n            i1 = cur.toInt\n\
    \            i2 = cur\n            if (i1 == 0) {\n                cur += 1\n\
    \                i1 = cur.toInt\n                list.append((i1).toLong)\n  \
    \          }\n            if (i1 == 1) {\n                cur += 1\n         \
    \       i2 = cur.toInt\n                if (i2 == 0) {\n                    cur\
    \ += 1\n                    i2 = cur.toInt\n                    list.append((i1).toLong)\n\
    \                } else {\n                    list.append((i1).toLong)\n    \
    \                cur += 1\n                }\n            }\n        }\n     \
    \   list.sortWith((x, y) => x <= y)\n        list.map(_.toLong)", "        val\
    \ min = a\n        val max = b\n        if (min > max) List()\n        else {\n\
    \            val l = (max - min)/2\n            val evens = generateIntegers(min,\
    \ l)\n            val odd = generateIntegers(l+1, max)\n            evens ++ odd\n\
    \        }", "      var even = a.toString.toList\n      for (i <- 1 to b) {\n\
    \        even = even :+ a.toString.toList.filter(_.isDigit).map(_.toLong)\n  \
    \    }\n      even.sortWith((a, b) => a < b)", "        var result : List[Long]\
    \ = Nil\n        var remainder = b - a\n        while(a > 0 && remainder > 0)\
    \ {\n            remainder /= 10\n            result = result :+ a.toLong\n  \
    \          a = remainder\n        }\n        return result", "        val result:\
    \ List[Long] = new mutable.ListBuffer[Long]()\n        val min = a\n        val\
    \ max = b\n        while(min <= max) {\n            if(min % 2 == 0 && max % 2\
    \ == 0) {\n                result.append(min.toLong)\n                min++\n\
    \                max++\n            } else if(min % 2 == 0) {\n              \
    \  min++\n            } else {\n                max++\n            }\n       \
    \ }\n        result ++ generateIntegers(min.toLong, max.toLong)", "        var\
    \ a = a\n        var b = b\n        var list = List[Long]()\n        while (a\
    \ < b) {\n            list += a\n            a = a.toInt\n            b = b.toInt\n\
    \        }\n        list += b\n        return list", "        var x = a\n    \
    \    var y = b\n        val result: List[Long] = new mutable.LinkedList\n    \
    \    while (x <= y) {\n            result.add(x)\n            val temp = a\n \
    \           a = b\n            b = temp\n        }\n        result.reverse", " \
    \       val a = a.toInt\n        val b = b.toInt\n        val even = List.range(0,\
    \ a).filter(x => x % 2 == 0)\n        val odd = List.range(a, b).filter(x => x\
    \ % 2 == 1)\n        odd.sortWith(_ > _)", "        val rangeIterator = a until\
    \ b\n        val evenNumbers = rangeIterator.filter(x => x % 2 == 0).toList\n\
    \        val evenNumbersSort = evenNumbers.sort\n        val evenNumbersLength\
    \ = evenNumbersSort.length\n        if (evenNumbersLength > 0){\n            val\
    \ result = new mutable.ListBuffer[Long]()\n            val curr = evenNumbersSort(0)\n\
    \            result.add[Long](curr)\n            var i = 0\n            while\
    \ (i < evenNumbersLength){\n                val nextNum = evenNumbersSort(i +\
    \ 1)\n                if (curr > nextNum){\n                    result.add[Long](curr)\n\
    \                    curr = nextNum\n                }\n                else{\n\
    \                    i += 1\n                }\n            }\n            result\n\
    \        }\n        else List()", "        val nums : List[Long] = a #:: b\n \
    \       val evenList : List[Long] = nums.filter(num => num % 2 == 0).sortBy(num\
    \ => num.toInt)\n        if (evenList.size == 0){\n            nums\n        }\
    \ else {\n            generateIntegers(evenList(1), evenList(0))\n        }",
  "        var aStr : List[String] = List()\n        var bStr : List[String] = List()\n\
    \        aStr = (a.toString / 10).toString.reverse.dropWhile(_.isDigit).reverse\n\
    \        bStr = (b.toString / 10).toString.reverse.dropWhile(_.isDigit).reverse\n\
    \        var a : Int = aStr.head.toInt\n        var b : Int = bStr.head.toInt\n\
    \        if (a > b) {\n            var temp : Int = a\n            a = b\n   \
    \         b = temp\n        }\n        var i : Int = 1\n        var x : Int =\
    \ 1\n        var res : List[Long] = List()\n        if (b > a) {\n           \
    \ while (i < b - a + 1) {\n                while (i < a && aStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                while (i < b && bStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                res = res :+ (x.toLong * 10 + i.toLong)\n\
    \                i += 1\n                x += 1\n            }\n        } else\
    \ {\n            while (i < a - b + 1) {\n                while (i < b && bStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                while (i < a && aStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                res = res :+ (x.toLong * 10 + i.toLong)\n\
    \                i += 1\n                x += 1\n            }\n        }\n  \
    \      res", "        var result : List[Long] = Nil\n        if (a < b) result\
    \ = a.toLong :: generateIntegers((a + 2).toLong, b)\n        else           result\
    \ = b.toLong :: generateIntegers(a, b - (b - a))\n        result.reverse", " \
    \       if (b < 0) List(a)\n        else if (b == a) List()\n        else {\n\
    \            val r = generateIntegers((a / b).toInt, (b % b).toInt)\n        \
    \    r ++ List((a / b).toInt.toLong, b % b).toInt\n        }", "        val ls\
    \ = Vector(a.toLong to b.toLong).map(_.toLong).toList\n        val lv = List(0\
    \ until ls.size)\n        var i = 1\n        while(i <= ls.size) {\n         \
    \   if(ls(i) % 2 == 0) {\n                lv.insert(i, ls(i).toLong)\n       \
    \         i += 1\n            }\n            i += 1\n        }\n        lv.sortWith(_\
    \ < _)\n        lv.foldLeft(Vector.empty[Long])((v, n) => {\n            if(n.toLong\
    \ < a.toLong) {\n                v.drop(1)\n            } else {\n           \
    \     v.prepend(n.toLong)\n            }\n            v\n        })", "      \
    \  if (a == 0) Nil\n        else generateIntegers(a /10 , b) + a.toLong * 10",
  "        def digits(x : Long) : List[Long] = {\n            var res : List[Long]\
    \ = Nil\n            while(x >= 10) {\n                res = x % 10l  :: res\n\
    \                x /= 10\n            }\n            res ::: List(x.toLong)\n\
    \        }\n        val digitA = digits(a)\n        val digitB = digits(b)\n \
    \       val even = digitA.filter(_ % 2 == 0).sortBy(x => x).zipWithIndex.toList\n\
    \        val odd = digitB.filter(_ % 2 == 1).sortBy(x => x).zipWithIndex.toList\n\
    \        if (even.size == 0) List()\n        else if(odd.size == 0) odd.head\n\
    \        else even.head :: odd.head", "        if (a>b) {\n            return\
    \ Nil\n        }\n        var result : List[Long] = Nil\n        var firstDigit\
    \ = a%b\n        var b = b-firstDigit\n        var remain = b\n        while(remain\
    \ > 0) {\n            val nextDigit = a%b\n            result::=List(firstDigit.toLong+nextDigit.toLong)\n\
    \            a = b\n            b = b-nextDigit\n            remain = b\n    \
    \    }\n        result.reverse", "        // If b is not an integer, return.\n\
    \        if (b > a) List()\n        // If b is equal to a, return.\n        else\
    \ if (a == b) List(b.toLong)\n        else { \n            // If a%b is 0, then\
    \ a is in odd digits, add b.\n            if (a%b == 0) a :: generateIntegers(a,\
    \ b.toLong)\n            else a :: generateIntegers(b.toLong, a)\n        }",
  "        var result: List[Long] = Nil\n        var min = a\n        var max = b\n\
    \        var minIndex = 0\n        while(max > min) {\n            var mid = min\
    \ + (max-min) / 2\n            if(mid % 2 == 0) {\n                result = result\
    \ :+ mid.toLong\n                min = mid\n            }\n            else {\n\
    \                max = mid\n            }\n        }\n        var resultList =\
    \ result.sortBy(_.toInt).reverse\n        return resultList", "        val r :\
    \ Int = Math.min(a, b).toInt\n        val s = List(l.toLong for l in (a to b).reverse).take(r)\n\
    \        if (b.toInt >= a.toInt) {\n            s ::: List(b.toLong).reverse.take(r)\n\
    \        } else {\n            List().reverse\n        }", "        def generate(a:\
    \ Long, b: Long, list : List[Long]) ={\n            if (a > b) {\n           \
    \     list\n            } else if (b == 0) {\n                list\n         \
    \   } else if (a > 0 && b > 0) {\n                list :+ b.toLong :+ a.toLong\n\
    \                generate(a - b, b - 1, list)\n            } else {\n        \
    \        list\n            }\n        }\n        generate(b, a, List.empty[Long])",
  "        if (b < 0)\n            throw new IllegalArgumentException(\"b < 0\")\n\
    \        val max = (b max a).toInt\n        val list = List.fill(max)(0)\n   \
    \     while (a < b) {\n            val remain = b - a\n            a += 2\n  \
    \          val l = remain.toLong\n            if (l % 2 == 0) list.+= l\n    \
    \    }\n        if (list.length == 0)\n            List()\n        else\n    \
    \        list", "        var current = a\n        val result = new mutable.ListBuffer[Long]()\n\
    \        while (current <= b) {\n            if (current % 2 == 0) {\n       \
    \         result += current\n            }\n            current += 1\n       \
    \ }\n        return result.toList", "        val n1 = a.toInt % b\n        val\
    \ n2 = a.toInt / b\n        if (n2 != 0) {\n            val n3 = a * (b / n2)\n\
    \            val n4 = b * n2\n            if (n3 <= n4) {\n                val\
    \ res : List[Long] = List()\n                val i1 : Int = 1\n              \
    \  while (i1 <= n3) {\n                    val i2 = n4\n                    val\
    \ i3 = i2 * i1\n                    val i4 = i2 * i3\n                    if (i4\
    \ < n3) {\n                        i2 += 1\n                    }\n          \
    \          res += b * i3\n                    i1 += 1\n                }\n   \
    \             res\n            } else {\n                val i1 = 1\n        \
    \        val i2 = n4\n                while (i1 <= n3) {\n                   \
    \ val i3 = n4\n                    val i4 = i2 * i3\n                    if (i4\
    \ < n3) {\n                        i2 += 1\n                    }\n          \
    \          val i5 = i2 * i1\n                    res += b * i3\n             \
    \       res += b * i5\n                    i1 += 1\n                }\n      \
    \          res\n            }\n        } else {\n            List()\n        }",
  "        val even = a.toInt % 2 != 0\n        val reminder = (a / 2).toInt % 2 ==\
    \ 0\n        val x = a.toInt / 2\n        var y = (b - a) / 2\n        var z =\
    \ 0\n\n        while (x * 2 < y) {\n            val rem = z.abs\n            if\
    \ (rem > 0) z += rem\n            else z = 0\n            y += 2\n        }\n\n\
    \        if (even) {\n            val rem = z.abs\n            if (rem > 0) z\
    \ += rem\n            else z = 0\n        }\n        var rem = z.abs\n       \
    \ if (rem > 0) z += rem\n        else z = 0\n\n        val digits = List(a)\n\
    \        while (z.abs > 0) {\n            if (z.abs % 2 == 1) digits += z.toLong\n\
    \            else digits += z.abs / 2\n            z += 1\n        }\n\n     \
    \   if (even) {\n            val even = digits(0).abs\n            if (even !=\
    \ 0) digits(0) += even\n            else digits(0) = 0\n        }\n        digits",
  "        // Only odd numbers matter\n        val isOdd = a % 2 == 1\n        //\
    \ Find the even digit\n        val isEven = a % 2 == 0\n        // Find even numbers\
    \ in the range\n        val even = if(isEven) a :: b\n        else a :: b\n  \
    \      val odd = if(isOdd) a.drop(1) + b\n        else a\n        // Find the\
    \ even numbers smaller than the given range\n        val smaller = odd.filter(_\
    \ < a)\n        // Find the odd numbers smaller than the given range\n       \
    \ val greater = even.filter(_ >= a)\n        // Find the common digits\n     \
    \   val common = if(smaller.isEmpty) greater.toList\n        else smaller.intersect(greater).toList\n\
    \        // Find the common digits\n        val evens = if(common.isEmpty) odd.toList\n\
    \        else common.intersect(odd).toList\n        if(evens.isEmpty) odd.toList\n\
    \        else evens.reverse", "        var n = 0\n        while (b >= 1) {\n \
    \           val n = b.toString.toLong\n            val digits = n.toString().takeWhile(_\
    \ != '0').toList\n            a % b == 0 match {\n                case true =>\n\
    \                    println(digits)\n                    digits ++ generateIntegers(a\
    \ / b, (b - 1).toLong)\n                case false =>\n                    println(digits)\n\
    \                    generateIntegers(a / b, (b - 1).toLong)\n            }\n\
    \            b = b - 1\n        }\n        println()\n        List[Long]()", " \
    \     var acc = 0\n      val ls = List(a,b).filter(_ > 0).zipWithIndex.filter\
    \ { case(x,i) => i % 2 == 0 }\n      while (ls.nonEmpty) {\n        val l = ls.head._2\n\
    \        ls = ls.tail\n        acc += l.toLong\n        acc %= 10\n        if\
    \ (acc >= 10) {\n          acc -= 10\n          ls = ls.reverse // remove this\
    \ line to see the difference\n        }\n      }\n      acc", "        var res\
    \ : List[Long] = Nil\n        var l = a\n        while (l <= b) {\n          \
    \  val r = math.min(math.ceil(l / 10), b - l)\n            res ::= r.toLong\n\
    \            l += r\n        }\n        res", "        val evenNumbers = mutable.Set[Long]()\n\
    \        val evenNumbersSet = mutable.Set[Long]()\n        var currentNum = a\n\
    \        var currentNumSet = evenNumbersSet\n        while (currentNum < b) {\n\
    \            evenNumbersSet.add(currentNum)\n            evenNumbers.add(currentNum)\n\
    \            currentNum += 2\n        }\n        while (b > currentNum) {\n  \
    \          evenNumbersSet.remove(currentNum)\n            evenNumbers.remove(currentNum)\n\
    \            currentNum -= 2\n        }\n        evenNumbersSet.retain(evenNumbers)\n\
    \        evenNumbersSet.toList.sortBy(_.toString.toLong)", "        val odd_range\
    \ = (0 until b).filter(x => x%2l==0l).toList\n        val even_range = odd_range.filter(_\
    \ < a)\n        if(even_range.isEmpty) Nil\n        else even_range.sortWith((x,\
    \ y) => x > y)", '        if (a > b) List() else if (a < b) List(a) else generateIntegers(b,
    a)', "        var num : int = 1\n        var nums : List[Long] = Nil\n       \
    \ while(a <= b){\n            num += 1\n            var remainder = num % a\n\
    \            if(remainder == 0){\n                nums = nums :+ num.toLong\n\
    \                num += 1\n            }\n        }\n        nums", "        val\
    \ evenDigitList = List.empty[Long]\n        val total = b - a\n        while (total\
    \ > 0 && (evenDigitList.isEmpty || evenDigitList.last() > b)) {\n            evenDigitList\
    \ :+= a % 10\n            a /= 10\n        }\n        return evenDigitList", " \
    \       val a = if (a < 2L) 2L else a\n        val b = if (b < 2L) 2L else b\n\
    \        var evens = List[Long]()\n        val n1 = a.toInt\n        val n2 =\
    \ b.toInt\n        for (i <- n2 until n1) {\n            val d = i.toInt\n   \
    \         val k = n1 - i\n            val k1 = k - 1\n            if (d.even)\
    \ {\n                if (k1 > 0) evens += d\n                k1 = k1-1\n     \
    \       }\n            if (k1 > 0) evens += d * ((k1).toInt)\n        }\n    \
    \    if (evens.isEmpty) List[Long]()\n        else evens", "        def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n            val ans = a to b\n         \
    \   val evenDigits = ans.filter { _ % 2 == 0}.toList\n            if (evenDigits.length\
    \ == 0) {\n                List[Long]()\n            } else {\n              \
    \  val middleDigits = evenDigits.toList\n                val remainders = middleDigits.filter\
    \ { _ % 2 == 0}.toList\n                remainders.reverse.head to remainders.last\n\
    \            }\n        }\n        generateIntegers(a, b)", "        // Base case\n\
    \        if(a.toLong > b.toLong)\n            return (List[Long]())\n        else\
    \ if(b.toLong == a.toLong)\n            return (List(b.toLong))\n        else\
    \ // Search subproblem\n            generateIntegers(a.toLong, b.toLong/2) + generateIntegers(a.toLong%b.toLong,\
    \ b.toLong)", "        val listOfNumbers = List(a, b).map(_.toLong).toList\n \
    \       listOfNumbers.sortBy(_.toString.dropWhile(_ < 0).length).toList", "  \
    \      val list: List[Long] = new mutable.ListBuffer[Long]()\n        val intList:\
    \ List[Long] = new mutable.ListBuffer[Long]()\n        var index = 0\n       \
    \ while (index < a) {\n            if (index % 2 == 0) {\n                intList\
    \ += index.toLong\n            }\n            index += 1\n        }\n        if\
    \ (index > b) {\n            return list\n        }\n        while (index < b)\
    \ {\n            if (index % 2 == 1) {\n                intList += index.toLong\n\
    \            }\n            index += 1\n        }\n        intList foreach {\n\
    \            index =>\n            list += index\n        }\n        list.sortWith((x:Long,\
    \ y:Long) => x > y)\n        list.toList", "        val start = 0\n        val\
    \ stop = b mod a\n        val list = mutable.ArrayBuffer.empty[Long]\n       \
    \ while(start < stop) {\n            list += start.toLong\n            start =\
    \ start + 1\n        }\n        list += stop.toLong\n        list", "        //\
    \ Initialize result\n        val evens : List[Long] = List()\n        var x =\
    \ a.toInt\n        var y = b.toInt\n        // While x has more digits than y\n\
    \        while (x < y) {\n            // Add new digit\n            evens ::=\
    \ x.toLong\n            // Add new digit\n            evens ::= y.toLong\n   \
    \         // Add new digit\n            evens ::= x.toLong\n            // Add\
    \ new digit\n            evens ::= y.toLong\n            // Add new digit\n  \
    \          evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.toLong\n            // Add new digit\n\
    \            evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.toLong\n            // Add new digit\n\
    \            evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.to", "        val result = new mutable.MutableList[Long]()\n\
    \        val current = a\n        val limit = b\n        var found = false\n \
    \       var remaining = b\n        while (current < limit && !found) {\n     \
    \       val remainder = current % 10\n            if (remainder == 0){\n     \
    \           result += current.toLong\n                found = true\n         \
    \   } else {\n                result += current.toLong\n                current\
    \ += 10\n            }\n            val nextRemaining = remaining % 10\n     \
    \       if (nextRemaining != 0) {\n                remaining -= nextRemaining\n\
    \            }\n        }\n        result.reverse", "        val n = math.abs(b\
    \ - a) + 2\n        var ans = List[Long]()\n        for (i = a to b by 2) {\n\
    \            if (i / 2 != i % 2) {\n                ans = ans :+ (i / 2)\n   \
    \         }\n        }\n        ans ::: List(a.abs)", "        val r : mutable.LinkedHashSet[Long]\
    \ = mutable.LinkedHashSet()\n        var m = 0\n        while(m < b) {\n     \
    \       val c = a + m\n            if(c % 2 == 0) r.add(c)\n            m += 1\n\
    \        }\n        List(a.longValue.toLong + r.toSeq.sortWith(_ < _))", "   \
    \     if (b < a) List.empty[Long]\n        else {\n            var list: List[Long]\
    \ = Nil\n            val tempA = a / 2\n            val tempB = b / 2\n      \
    \      val temp = tempA - tempB\n            val tempC = tempA - tempB\n     \
    \       if (temp <= 0) list.append (tempA.toLong)\n            else if (temp >\
    \ 0) list.append (tempB.toLong)\n            if (tempC <= 0) list\n          \
    \  else {\n                var tempD = tempA.toLong * tempC\n                list.append\
    \ (tempD)\n                if (temp < tempB) list\n                else {\n  \
    \                  var tempE = tempB.toLong * tempD\n                    list.append\
    \ (tempE)\n                    if (temp < tempA) list\n                    else\
    \ {\n                        var tempF = tempA.toLong * tempE\n              \
    \          list.append (tempF)\n                        list\n               \
    \     }\n                }\n            }\n        }", "      val startNum = a\n\
    \      val endNum = b\n      val startNumStr = startNum.toString\n      val endNumStr\
    \ = endNum.toString\n      val allNumbersBetweenStartAndEnd = (startNumStr to\
    \ endNumStr).toList\n      var evenDigitsAscendingOrder = Nil\n      var currentNumStr\
    \ = startNumStr\n      while(currentNumStr <= endNumStr){\n        if(allNumbersBetweenStartAndEnd.contains(currentNumStr.toLong)){\n\
    \          evenDigitsAscendingOrder ::= currentNumStr.toLong\n        }\n    \
    \    currentNumStr = currentNumStr + 1\n      }\n      evenDigitsAscendingOrder.toList",
  "        var result: List[Long] = Nil\n        for (i = a to b by 2)\n        result\
    \ = result :+ i\n        result :+ b\n        result", "        val num = 0\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        var digit = 0\n  \
    \      while(num < a || num < b) {\n            val result = num / 10\n      \
    \      if(result % 2 == 0) {\n                digit += 1\n                even\
    \ += result.toLong\n            }\n            num += 1\n        }\n        even\
    \ += num.toLong\n        if(digit == 0) {\n            even.clear\n        }\n\
    \        even.toList", "        val digits = (a to b).toList\n        val ranges\
    \ = (0 to (digits.length-1)).map(x => digits(x))\n        val result = (0 to (digits.length-1)).map(x\
    \ => digits(x)).toList.map(x => if(x%2 == 0) x else x+1)\n\n        ranges filter\
    \ { x => (a to b).exists(y => y <= x) } map { x => (a to b).find(y => y <= x)\
    \ } ", "        def generate(a: Long, b : Long, index: Long) : List[Long] = {\n\
    \            val c: List[Long] = Nil\n            var i = index\n            while(a\
    \ > 0 && i <= b) {\n                if (a % 10 == 0 && b % 10 == 0) {\n      \
    \              c :+= a.toLong\n                }\n                a /= 10\n  \
    \              b /= 10\n                i += 1\n            }\n            if\
    \ (a > 0 && b % 10 == 0) {\n                c :+= a.toLong\n            }\n  \
    \          c\n        }\n        generate(a, b, 0L)", "      val c = a.toString.length\n\
    \      val d = b.toString.length\n      val result = List[Long]()\n      var first\
    \ = a\n      var second = b\n      while (first < second) {\n        if (first\
    \ % 2 == 0)\n          result = result :+ first.toLong\n        first = first\
    \ + c\n      }\n      while(second < a){\n        if (second % 2 == 0)\n     \
    \     result = result :+ second.toLong\n        second = second + c\n      }\n\
    \      result", "        val m = Math.max(a, b)\n        val l = m.toInt\n   \
    \     val even = l / 2\n        val odd = l - even\n        val result = (0 to\
    \ even).map(i => m + i * 2).toList\n        if (odd > 0)\n            result +=\
    \ generateIntegers(odd, a)\n        return result", "        if (a < 0 || b <\
    \ 0) throw new IllegalArgumentException(\"Argument out of range\")\n        //\
    \ find odd num\n        val odd = math.ceil(math.log(b)/math.log(2))\n       \
    \ // check odd number limit\n        require(odd <= IntMaxValue.toLong)\n    \
    \    val odd_num = IntMaxValue.toLong / odd\n        val odd_nums = odd_num to\
    \ (odd_num * 2).toInt\n        var even_list = List[Long]()\n        // find even\
    \ num\n        val even = math.ceil(math.log(a)/math.log(2))\n        // check\
    \ even number limit\n        require(even <= IntMaxValue.toLong)\n        val\
    \ even_num = IntMaxValue.toLong / even\n        val even_nums = even_num to (even_num\
    \ * 2).toInt\n        // Find every odd nums in [a,b]\n        odd_nums.foreach\
    \ { odd_num =>\n            val result = odd_num\n            val temp_list =\
    \ odd_nums.takeWhile(_ < odd_num + 1).map(_+2).toList\n            if (even_nums.contains(temp_list.last))\
    \ {\n                temp_list.foreach { even_num =>\n                    if (even_list.contains(even_num))\
    \ {\n                        even_list.insert(even_num, even_num)\n          \
    \          }\n                }\n            }\n        }\n        even_list.reverse",
  "        val list = new mutable.LinkedList[Long]()\n        var i : Long = 0\n \
    \       while (i < a.toInt && i < b.toInt) {\n            list.add(new Long(math.min(a.floor.toInt,\
    \ b.floor.toInt)).div(10l).toLong)\n            i = i + 1\n        }\n       \
    \ if (i < a.toInt)\n            list.add(new Long(a.floor.toInt))\n        if\
    \ (i < b.toInt)\n            list.add(new Long(b.floor.toInt))\n        list.toList",
  "        if (a > b) {\n            a :: generateIntegers(b, a)\n        } else if\
    \ (a < b) {\n            generateIntegers(a, b)\n        } else {\n          \
    \  List(a.toLong)\n        }", "        // Convert all integers to a List\n  \
    \      var integers : List[Long] = List(1l, b)\n        \n        // While we\
    \ haven't found any result\n        while(integers.length > 0) {\n           \
    \ \n            // Find the first even digit\n            var i : Long = 0\n \
    \           while (i < integers.length) {\n                if (integers(i) % 2\
    \ == 0) {\n                    i = i + 1\n                } else {\n         \
    \           integers = integers.drop(i)\n                    break\n         \
    \       }\n            }\n            \n            // Add the current even digit\
    \ to the result\n            integers = integers :+ integers(i)\n        }\n \
    \       \n        // Return a List\n        return integers", "        var result:\
    \ List[Long] = Nil\n        while (b != 0) {\n            if (a >= b) {\n    \
    \            a -= b\n                result = (a until b).map(x => x.toLong).sorted\
    \ :: result\n            }\n            b -= 1\n        }\n        result", " \
    \       val result = new mutable.Buffer[Long]()\n        for (x <- a.toLong to\
    \ b.toLong by 2)\n            if (x % 2 == 0) {\n                result += x\n\
    \            }\n        return result.toList", "        val range = Range(a, b);\n\
    \        var l1 = range.min;\n        var l2 = range.max;\n        var l = l1\n\
    \        var temp : Long = 0;\n        while(l2 > l1){\n            if (l % 2\
    \ == 0){\n                temp = l\n                l2 = l2\n                l1\
    \ = temp\n            }\n            l = l + 2\n        }\n        if (l2 > l1){\n\
    \            l :: (generateIntegers(l1..l2, l2))\n        }\n        else{\n \
    \           List()\n        }", "        val result: List[Long] = List().asInstanceOf[List[Long]]\n\
    \        val range = (a to b) reverse\n        for (i <- 0 until range.length)\
    \ result ::= i.toLong % 2l\n        result.sortWith(_ < _)", "        if(a<b)\
    \ List(a,b) else {\n            // Sort the two numbers:\n            var even\
    \ = a.toInt/b.toInt\n            val remainder = (a.toInt-b)*even\n          \
    \  val newEven = even.toLong\n            val newRemainder = remainder.toLong\n\
    \            even = newEven\n            remainder = newRemainder\n\n        \
    \    // Get the first two numbers from the sorted list:\n            val list\
    \ = if (even.equals(0)) List()\n                    else {\n                 \
    \       List(even, remainder)\n                    }\n            list ::: generateIntegers(a+even,\
    \ b+even)\n        }", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val start = 1L\n        var i = start\n        while (i < a) result.+=(i\
    \ + (b - a) / 2)\n        i = start\n        while (i < b) result.+=(i + (b -\
    \ a) / 2)\n        result.toList", "        val numbers = scala.util.Random.shuffle((a\
    \ to b).filter(_ % 2 == 0)).takeWhile(_ <= b).toList\n        (0 to a).filter(_\
    \ <= b).map(numbers(_)).toList", "        def divideByTen (n : Long) : List[Long]\
    \ = {\n            if (n % 10 == 0) {\n                List(n.toLong)\n      \
    \      } else {\n                val div = n % 10\n                val num = n\
    \ / 10\n                if (num == 0)\n                    divideByTen(div)\n\
    \                else if (num < 10)\n                    divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse\n                else\n                    divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideByTen(num).reverse ::\n                        divideByTen(div).reverse.head\
    \ :: divideBy", "        val r = scala.util.Random\n        val evens = new mutable.HashSet[Long]\n\
    \        val odds = new mutable.HashSet[Long]\n        var low = a % 2\n     \
    \   while(low <= b) {\n            val rand = r()\n            if(rand < 0.5)\
    \ {\n                val l = rand.toLong\n                odds += l\n        \
    \        low *= 2\n            } else {\n                val l = rand.toLong\n\
    \                evens += l\n                low *= 2\n            }\n       \
    \ }\n        if(odds.isEmpty) {\n            odds += a\n        }\n        if(evens.isEmpty)\
    \ {\n            evens += b\n        }\n        if(odds.size > evens.size) {\n\
    \            odds ---> odds.take(evens.size)\n        } else {\n            evens\
    \ ---> evens.take(odds.size)\n        }\n        val res = new mutable.ArrayBuffer[Long]()\n\
    \        while(odds.nonEmpty || evens.nonEmpty) {\n            val l = evens.take(odds.size).getOrElse(odds.take(evens.size).get)\n\
    \            res += l\n        }\n        if(a < b) {\n            while (a <\
    \ b) {\n                val l = r.nextInt(b - a + 1) + a\n                res\
    \ ++: generateIntegers(l, b.toLong)\n            }\n        }\n        res", " \
    \       var result : List[Long] = Nil\n        var start = 0\n        var finish\
    \ = b - a\n        while (start < finish) {\n            val mid = start + (finish\
    \ - start) / 2\n            val number = mid * mid\n            if (number < a)\
    \ {\n                start = mid + 1\n            } else {\n                finish\
    \ = mid - 1\n            }\n        }\n        result ++= List(a.toLong, start.toLong,\
    \ finish.toLong)\n        result", "        val arr = new Array[Long](b.toInt\
    \ / 2)\n        val low = a.toInt % 2\n        var idx = low\n        val evens\
    \ = arr.filter { i =>\n            val b = low + i.toInt\n            val isEven\
    \ = b.toInt % 2 == 0\n            idx == low && isEven\n        }\n        val\
    \ l = evens.toList\n        val r = idx + b.toInt - 1\n        if (idx < b.toInt)\
    \ l ++ generateIntegers(l, r) else l", "        def helper(a:Long, maxA:Long,\
    \ digits: List[Long], maxB:Long, maxDigits: List[Long]) : List[Long] = {\n   \
    \         if (a <= maxA) {\n                if (b <= maxB) {\n               \
    \     digits ::= a.toLong\n                    maxDigits ::= a.toLong\n      \
    \              maxB += 1\n                    a += 1\n                    helper(a,\
    \ b, digits, maxB, maxDigits)\n                }\n                else {\n   \
    \                 digits(a)\n                    maxDigits(a)\n              \
    \  }\n            }\n            else {\n                digits(a)\n         \
    \       maxDigits(a)\n            }\n        }\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxA = a\n        val maxB = b\n        helper(a, maxA, new mutable.ListBuffer[Long](),\
    \ maxB, new mutable.ListBuffer[Long]())\n        return result", "        if (a\
    \ > b) (a,b) match {\n            case (_,0 ) => List(a)\n            case (_,1\
    \ ) => List(b - b + 1)\n            case (_,2 ) => List()\n            case (a,b)\
    \ =>\n                val nums = generateIntegers(a, b % a).toList :+ a\n    \
    \            nums ::: nums.filter(_ % a != 0) ::: nums.filter(_ % a != a) :::\
    \ nums.filter(_ % a != b) ::: nums.filter(_ % a != b + a)\n        }\n       \
    \ else {\n            (a,b) match {\n                case (_,0) => List(a)\n \
    \               case (_,1) => List(a)\n                case (_,2) => List()\n\
    \                case (a,b) => generateIntegers(a,b + 1).filter(_ % a != 0) :::\
    \ generateIntegers(a,b).filter(_ % a != a) ::: generateIntegers(a,b).filter(_\
    \ % a != b) ::: generateIntegers(a,b + a).filter(_ % a != b)\n            }\n\
    \        }", "        var result : List[Long] = Nil\n        var dividend : Long\
    \ = b - a\n        var remainder : Long = dividend\n        var current : Long\
    \ = a\n        while (dividend >= 10) {\n            current += 10\n         \
    \   dividend /= 10\n        }\n        if (dividend >= 1l) result ::= current\n\
    \        if (remainder < 10) {\n            result ::= current\n            result\
    \ += remainder\n        }\n        return result.reverse", "      val li = new\
    \ mutable.LinkedList[Long]()\n      val li2 = new mutable.LinkedList[Long]()\n\
    \      val li3 = new mutable.LinkedList[Long]()\n      val li4 = new mutable.LinkedList[Long]()\n\
    \      val li5 = new mutable.LinkedList[Long]()\n      li.add(a.toLong)\n    \
    \  li2.add(b.toLong)\n      li3.remove(0)\n      li4.add(0)\n      li5.add(0)\n\
    \      while (li2.nonEmpty) {\n        li3 += li2.head\n        li2.remove(0)\n\
    \      }\n      while (li3.nonEmpty) {\n        li4 += li3.head\n        li3.remove(0)\n\
    \      }\n      while (li4.nonEmpty) {\n        li5 += li4.head\n        li4.remove(0)\n\
    \      }\n      li5", "        def getEvens(l : Long) : List[Long] = {\n     \
    \       var result = List[Long]()\n            while (l > 0) {\n             \
    \   if ((l % 2) == 0) {\n                    result ::= l.toLong\n           \
    \     }\n                l /= 2\n            }\n            result\n        }\n\
    \        val list1 = getEvens(a)\n        val list2 = getEvens(b)\n        if\
    \ (list1.size < list2.size) {\n            for (i <- list1.size..list2.size) {\n\
    \                list2.remove(list1.last)\n            }\n        } else {\n \
    \           for (i <- list1.size..list2.size) {\n                list1.remove(list2.last)\n\
    \            }\n        }\n        list1.reverse.concat(list2)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val range = (b - a).toInt\n     \
    \   for (i <- 0 until range) {\n            list+=a.toLong+i\n        }\n    \
    \    return list.sorted", "        // Write your code here\n        val evens\
    \ = for (i <- a.toInt; j :: b <- a.toInt) yield j\n        evens.sortBy(_.toInt)",
  "        val result: List[Long] = new mutable.MutableList[Long]()\n        var max1\
    \ = a - b\n        var min1 = a + b\n        while (max1 > 0) {\n            max1\
    \ = max1 - b\n            if (max1 > 0) {\n                result.add(max1.toLong)\n\
    \            }\n        }\n        while (min1 < b) {\n            min1 = min1\
    \ + b\n            if (min1 < b) {\n                result.add(min1.toLong)\n\
    \            }\n        }\n        result.reverse()\n        result.filter(_ %\
    \ 2 == 0)", "        val (m, n) = if (a > b) (a, b) else {b, a}\n        val list\
    \ = mutable.ListBuffer.empty[Long]\n        for (x <- m until n){\n          \
    \  list += x\n        }\n        list.sortBy(math.abs).toList", "        // Create\
    \ a list of all even numbers within the range [a, b]\n        val evenNumbers\
    \ = a until (b / 2) filter ((_ % 2) == 0)\n        // Sort list\n        val evenSortedNumbers\
    \ = evenNumbers.sortWith(_ > _)\n        // Return sorted list\n        evenSortedNumbers.toList",
  "        var evens : List[Long] = List()\n        var current : Long = 1\n     \
    \   while(current <= b)\n        {\n            if(current % 2 == 0)\n       \
    \     {\n                evens = evens :+ current.toLong\n            }\n    \
    \        current = current + 1\n        }\n        return evens", "        val\
    \ evens = mutable.ListBuffer(a.toLong)\n        for (i <- b to 1 by -1)\n    \
    \        if (evens(i).equals(0))\n                evens.append(i.toLong)\n   \
    \         else\n                break\n        evens", "        val ans = List.empty[Long]\n\
    \        // We take only odd integers between a and b\n        // so that we can\
    \ add them without caring about the sign of \n        // their sum\n        val\
    \ range = a+1L to b+1L\n        for (x <- range.toList) {\n            // The\
    \ value of x is evenly divisible by 2,\n            // but not necessarily divisible\
    \ by 3\n            val even = x % 2l\n            // If the value of x is evenly\
    \ divisible by 2 but not 3\n            if (even % 3L != 0l) {\n             \
    \   // Add the value of x to the list \"ans\"\n                ans ::= x\n   \
    \         }\n        }\n        ans", "        val s = scala.math.BigInt(a).abs\
    \ + scala.math.BigInt(b).abs\n        val q = scala.math.BigInt(s) / (scala.math.BigInt(2)+1)\n\
    \        val l = scala.math.BigInt(s).quot(scala.math.BigInt(2)+1)\n        val\
    \ r = scala.math.BigInt(a).abs + scala.math.BigInt(b).abs\n        val lq = scala.math.BigInt(l).quot(scala.math.BigInt(2)+1)\n\
    \        val rl = scala.math.BigInt(r).quot(scala.math.BigInt(2)+1)\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Long]\n        var lastL\
    \ = -1\n        var lastR = -1\n        for (i <- 0 to scala.math.BigInt(s).toInt-1)\
    \ {\n            val d = scala.math.BigInt(i)\n            if (d == 0) {\n   \
    \             continue\n            }\n            var lastD = -1\n          \
    \  if (l == lastL) {\n                lastD = scala.math.BigInt(d)\n         \
    \   }\n            var lastD = scala.math.BigInt(lq)\n            if (r == lastR)\
    \ {\n                lastD = scala.math.BigInt(rl)\n            }\n          \
    \  var currentD = scala.math.BigInt(d)\n            while (currentD >= scala.math.BigInt(2))\
    \ {\n                digits.append(currentD)\n                lastD = scala.math.BigInt(currentD)\n\
    \                currentD = scala.math.BigInt(currentD.quot(scala.math.BigInt(2)+1))\n\
    \            }\n            lastL = l\n            lastR = scala.math.BigInt(r)\n\
    \        }\n        digits.toList", "      val result : List[Long] = Nil\n   \
    \   var tmp = b\n      var remain = tmp\n      while (a > remain) {\n        tmp\
    \ /= 10\n        remain = tmp\n        result ::= a.toLong\n        a /= 10\n\
    \      }\n      result ::= a.toLong\n      result ::= tmp\n      result.reverse",
  "        val results = new mutable.ArrayList[Long]()\n        val l = scala.util.Random\n\
    \        val aInt = scala.math.round(a).toInt\n        val bInt = scala.math.round(b).toInt\n\
    \        var last = a\n        var next = b\n        while (next > a) {\n    \
    \        results += last\n            last += l.getInt(next - last)\n        \
    \    next -= 1\n        }\n        if (next == 0) {\n            results += last\n\
    \        }\n        results.toList", "        var evens : List[Long] = Nil\n \
    \       for (a <- a until b){\n            if (a % 2 == 0){\n                evens\
    \ = List(a % 2)\n                a /= 2\n            }\n        }\n        evens.reverse",
  "        if (b < 0) return Nil\n        var result : List[Long] = Nil\n        var\
    \ start : Long = 0\n        var end : Long = b\n        while(start <= end){\n\
    \            result = result ::: List(start.toLong)\n            start = start.next\n\
    \        }\n        return result", "        val c = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        val d = new scala.collection.mutable.ListBuffer[Long]()\n        var\
    \ count = 0\n        var i1 = a\n        var i2 = b\n        while (i1 != i2)\
    \ {\n            if (i1 % 2 == 0) {\n                c += i1.toLong\n        \
    \        count += 1\n            }\n            i1 /= 2\n        }\n        for\
    \ (i <- 0 until count) {\n            if (c.length > 0) {\n                d +=\
    \ c.last\n                c.remove(c.size - 1)\n            } else {\n       \
    \         d += 0\n            }\n        }\n        val ans = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        ans += d.last\n        d.remove(d.size - 1)\n        ans += d.last\n\
    \        return ans.toList", "        val nums = new collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until a){\n            nums.append(i)\n        }\n      \
    \  for (i <- 0 until b){\n            nums.append(b)\n        }\n        nums.toList",
  "        if (a.signum == 0) return Nil\n        if (b.signum == 0) return Nil\n\
    \        val ret = new mutable.ListBuffer[Long]()\n        var current = a\n \
    \       while (current < b) {\n            val rem = current % 10\n          \
    \  current += rem\n            if (rem == 0) ret.append(current)\n        }\n\
    \        val l = ret.toList\n        val m = b - a\n        if (m < 0) Nil\n \
    \       else if (m <= 3) { l :: generateIntegers(a,(b+1)) }\n        else { l\
    \ :: generateIntegers((a+1),b) }", "        val n = math.max(math.abs(a), math.abs(b))\
    \ // the absolute value of both a and b\n        val range = a...b           \
    \     // a Range from -n to n\n        var res = []\n        while (range.hasNext)\
    \ {\n            if (n % range.next == 0) {\n                res.append(range.next)\n\
    \            }\n        }\n        res", "        val evenNumbers = List(Long(a),\
    \ Long(b))\n        if (evenNumbers.head % 2 == 0) evenNumbers\n        else generateIntegers(a\
    \ / 2, b / 2)", "        def getDigit(x : Long) : Int = if (x % 10 == 0) x % 10\
    \ else 0\n        def getDigits(x : Long) : List[Long] = 0 until x by 2 filter\
    \ getDigit toList\n        def getFirstDigits(x : Long) : List[Long] = getDigits(x).toList.init\
    \ filter getDigit toList\n        val max = (a / 10).toInt * (b / 10).toInt +\
    \ 1\n        var result : List[Long] = List.empty\n        for (x <- 0 until max)\
    \ {\n            val firstDigits = getFirstDigits(x)\n            val digits =\
    \ getDigits(x)\n            val currentDigit = firstDigits.head\n            if\
    \ (currentDigit > 0) result = result :+ currentDigit\n            val newDigits\
    \ = digits filterNot (_ == currentDigit)\n            if (newDigits.nonEmpty)\
    \ result = result :+ newDigits.last\n        }\n        result", "        def\
    \ generateIntegers(a : Long, b : Long) : List[Long] = {\n            // If they\
    \ are the same, return empty list\n            if (a == b) return List()\n\n \
    \           // Recurse to smaller numbers first\n            val smallerA = a\n\
    \            val smallerB = b\n            if (smallerB < smallerA) smallerA <\
    \ smallerB\n            else smallerB < smallerA\n\n            // Get a list\
    \ of all digits between a and b\n            val digits = List(a.toLong, b.toLong).map(_.toInt)\n\
    \n            // Find all evens\n            val evens = digits\n            \
    \    .zipWithIndex\n                .filter(_._2 % 2 == 0)\n                .map(_._1)\n\
    \n            // Return even integers sorted by ascending value\n            evens.sortWith(_\
    \ < _)\n        }\n        val a = a.toLong\n        val b = b.toLong\n      \
    \  generateIntegers(a, b)", "        val list = mutable.ListBuffer[Long]()\n \
    \       var remainder = b\n        while (a > 0) {\n            remainder *= 10\n\
    \            a -= (remainder / a)\n            list += (remainder % a)\n     \
    \   }\n        list.toList", "        var l1 = scala.math.BigInt(a).toInt;\n \
    \       var l2 = scala.math.BigInt(b).toInt;\n        while(true){\n         \
    \   val m = scala.math.BigInt(l1)%scala.math.BigInt(10);\n            l1 = l1*10\
    \ + m;\n            val n = scala.math.BigInt(l2)%scala.math.BigInt(10);\n   \
    \         l2 = l2*10 + n;\n            if (l1 == l2) break;\n        }\n     \
    \   l1 +: l2", "        val l1 = List(a,b)\n        l1.sortWith(_<=>_)\n     \
    \   l1.takeWhile(_<=>_)", "        val n = (b-a).toInt\n        val result: List[Long]\
    \ = ListBuffer.empty[Long]\n        for(i <- 0 to n-1) result += (a.+(2*i).toLong).toLong\n\
    \        return result", "        val digits = mutable.ListBuffer.empty[Long]\n\
    \        while (a.compareTo(b) < 0) {\n            digits.append(a)\n        \
    \    a += 1\n        }\n        digits.appendAll(reverse(b))\n        digits.reverse",
  "        val min = a\n        val max = b\n        val range = (max-min)/2\n   \
    \     val evens : List[Long] = new ListBuffer[Long]()\n        val ods : List[Long]\
    \ = new ListBuffer[Long]()\n        var current = min\n        var next = Math.floor(range)\n\
    \        while (current < max) {\n            if (current % 2 == 0) {\n      \
    \          evens += current\n            } else {\n                ods += current\n\
    \            }\n            next += 1\n            current = next\n          \
    \  next = Math.floor(range)\n        }\n        evens.toList ++ ods.toList", " \
    \       val list = ListBuffer[Long]()\n        var c : Long = 1\n        while\
    \ ((c <= b) && (a <= b)) {\n            list += c\n            c += 2\n      \
    \  }\n        list += a\n        list.sorted", "        var result = ListBuffer[Long]()\n\
    \        while (a <= b){\n            result += a.toString.toLong :: a\n     \
    \       a += 1\n        }\n        result.reverse", "        val l = a.toLong\
    \ + b.toLong;\n        val r = a.toLong - b.toLong;\n        val m = a.toLong\
    \ % b.toLong;\n        val c = new mutable.ListBuffer[Long]()\n        for(i <-\
    \ 0.until(Math.max(l,r))) yield {\n            val m = i*b + m;\n            val\
    \ k = m.toInt\n            c += k\n        }\n        c.sortWith(_>_)", "    \
    \    val even = a to b\n        val odd = a to b by -1\n        val diff = even\
    \ diff odd\n        diff.map { x => x % 10 }.sorted.reverse", "        if(a <\
    \ 0 || b < 0) {\n            throw new IllegalArgumentException(\"One or more\
    \ of the arguments is negative.\");\n        }\n        var numbers = mutable.ListBuffer(a).reverse\n\
    \        for(i <- b until (b - a)) {\n            numbers = numbers.filter { x\
    \ => (x % 2) == 0 }\n        }\n        numbers = numbers.reverse\n        numbers.toList",
  "        var result = List.empty[Long]\n        var curr = a\n        while (curr\
    \ < b) {\n            result += curr\n            curr = curr + 2l\n        }\n\
    \        result.sortWith((x, y) => x.toLong < y.toLong)\n        return result",
  "        var result: List[Long] = Nil\n        var a = a - 1\n        var b = b\
    \ - 1\n\n        while (b != 0) {\n            if (b % 2 == 0) {\n           \
    \     a += 1\n                b /= 2\n            } else {\n                a\
    \ += 1\n                b /= 2\n            }\n\n            result :+= a\n  \
    \      }\n\n        result.reverse", "        val minA = a\n        val maxA =\
    \ b\n        val minB = b\n        val maxB = a\n        val evenDigits = minA.until(maxB).filter(_\
    \ % 2 == 0).sorted\n        val digits = minB.until(maxA).filter(_ % 2 == 0).sorted\n\
    \        val evenNumbers = evenDigits.intersect(digits)\n        return evenNumbers.map(_.toLong).toList",
  "        def generate(i: Long, k: Long) : List[Long] = {\n            if (i > k)\
    \ {\n                return Nil\n            } else if (i < k) {\n           \
    \     return List(k.toLong)\n            }\n            val x = i.toLong / k.toLong.toInt\n\
    \            val y = i % k.toLong\n            if (x == 0) {\n               \
    \ return generate(i.toInt, k.toInt)\n            } else if (y == 0) {\n      \
    \          return generate(x * k, k.toInt)\n            } else {\n           \
    \     return generate ((x * k).toInt, y.toInt)\n            }\n        }\n   \
    \     generate(a.toInt, b.toInt)", "        val m = (b.toLong - a.toLong + 1l)\
    \ / 2l\n        val a =  a.toLong\n        val b =  b.toLong\n        val result:\
    \ List[Long] = new mutable.ArrayList[Long]()\n        val digits = 0 until m\n\
    \        for (digit <- digits)\n        {\n            if (digit == 0 ) {\n  \
    \              result.add(0)\n            }\n            else if (digit <= m /\
    \ 2 ) {\n                result.add(a % 10)\n                a /= 10\n       \
    \     }\n            else {\n                result.add(b % 10)\n            \
    \    b /= 10\n            }\n        }\n        result", "        val evens =\
    \ List(a, b)\n        val evensLongList = evens.map(_.toLong).toList\n       \
    \ val evensIntList = evens.map(_.toInt).toList\n        val evensLongSet = evensLongList.map(_.toSet).toList\n\
    \        val evensIntSet = evensIntList.map(_.toSet).toList\n        val evensSetList\
    \ = evensIntSet.flatMap(x => x).distinct\n\n        val minEvensSet = evensSetList.min\n\
    \        val minEvens = minEvensSet.head\n        val maxEvensSet = evensSetList.max\n\
    \        val maxEvens = maxEvensSet.head\n        val evensSetSet = evensSetList.filter(x\
    \ => x < maxEvens)\n        val evensSetList = evensSetSet.toList\n\n        val\
    \ evensLongSetSorted = evensLongSet.sorted\n        val evensIntSetSorted = evensIntSet.sorted\n\
    \        val evensSetSetSorted = evensSetList.sorted\n        val evensSetSortedSet\
    \ = evensSetSet.toSet\n        val evensSetSortedSetSet = evensSetSortedSet.toSet\n\
    \n        val minEvensLongSet = evensLongSetSorted.min\n        val maxEvensLongSet\
    \ = evensLongSetSorted.max\n\n        val minEvensIntSet = evensIntSetSorted.min\n\
    \        val maxEvensIntSet = evensIntSetSorted.max\n\n        val minEvensSetSet\
    \ = evensSetSetSorted.min\n        val maxEvensSetSet = evensSetSetSorted.max\n\
    \n        val evensLongSetMin = evensLongSetSorted.filter(x => x <= minEvensLongSet).min\n\
    \        val evensLongSetMax = evensLongSetSorted.filter(x => x >= maxEvensLongSet).max\n\
    \        val evensIntSetMin = evensIntSetSorted.filter(x => x <= minEvensIntSet).min\n\
    \        val evensIntSetMax = evensIntSetSorted.filter(x => x >= maxEvensIntSet).max\n\
    \        val evensSetSetMin = evensSetSortedSet.toSet.filter(x => x <= minEvensSetSet).min\n\
    \        val evensSetSetMax = evensSetSortedSet.toSet.filter(x => x >= maxEvensSetSet).max\n\
    \        val evensSetListMin = evensSetSortedSet.to", "        var sum : Long\
    \ = 0L\n        var list : List[Long] = Nil\n        var aCount : Int = 1\n  \
    \      var bCount : Int = 1\n        while (aCount < a.toInt) {\n            sum\
    \ += a.toLong * aCount\n            aCount *= 10\n        }\n        while (bCount\
    \ < b.toInt) {\n            sum += b.toLong * bCount\n            bCount *= 10\n\
    \        }\n        if (sum < a.toLong || sum < b.toLong) {\n            return\
    \ Nil\n        }\n        if (sum % 2 == 0) {\n            sum = Math.floor(sum\
    \ / 2)\n            list :+ sum.toLong\n        }\n        while (bCount < b.toInt)\
    \ {\n            sum += b.toLong * bCount\n            bCount *= 10\n        }\n\
    \        list :+ sum.toLong\n        return list.reverse", "        val l = List(a,\
    \ b)\n        var i = 0\n        var res : List[Long] = List()\n        while\
    \ (i < l.length) {\n            val q = math.min(l(i), l(i + 1))\n           \
    \ if (q % 2 == 0) {\n                res = res + q.toLong\n                i +=\
    \ 2\n            } else {\n                i += 1\n            }\n        }\n\
    \        res", "        val nums = a.toInt until b.toInt\n        val evens =\
    \ nums.filter(x => x.toInt % 2 == 0).sortBy(x => x.toInt).toList\n        evens.takeWhile(x\
    \ => a <= x).reverse", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        while(b >= a) {\n            result += b.toLong\n            b = b -\
    \ b.toLong.toInt\n        }\n        result.sortWith(_ < _)", "        val max\
    \ = (math.max(a, b)).toLong\n        val min = (math.min(a, b)).toLong\n     \
    \   val middle = (min + max) / 2\n        val numbers = List(1l.toLong, middle,\
    \ max)\n        var newList = List[Long]()\n        for (number <- numbers) {\n\
    \            if (number % 2l.toLong < middle) {\n                newList :+= number\n\
    \            }\n        }\n        newList.sorted", "        val start = a.toLong\n\
    \        val end = b.toLong\n        var list : List[Long] = Nil\n        for\
    \ (x <- start.toInt(until: (start: Int, end: Int)) to end.toInt(until: (start:\
    \ Int, end: Int))) {\n            list += x.toLong\n        }\n        list.sortWith(_\
    \ < _)", "        val m1 = b % a\n        val r = a / m1 \n        if (a == m1)\
    \ {\n            List()\n        } else {\n            generateIntegers(a, m1)\
    \ + List(m1.toLong) + generateIntegers(r, b)\n        }", "        def toInts(a\
    \ : Long, b : Long) : List[Long] = {\n            val s = scala.math.pow(2, a)\
    \ + scala.math.pow(2, b).mod(scala.math.pow(2, b))\n            var l : List[Long]\
    \ = List()\n            var i : Long = 1\n            while (i <= s) {\n     \
    \           l += i.toLong\n                i = i + 2\n            }\n        \
    \    l\n        }\n        return toInts(a, b).filter(_ % 2 == 0)", "        val\
    \ start = math.min(a, b)\n        val end = math.max(a, b)\n        var current\
    \ = start\n        val current = math.min(end, current)\n        val list = List[Long](current.toLong)\n\
    \        while(current < end) {\n            current = math.min(end, current)\n\
    \            current = math.max(end, current)\n            val next = math.min(end,\
    \ current)\n            val next = math.max(end, current)\n            list =\
    \ list :+ next.toLong\n        }\n        list", "      if (a > b) {\n       \
    \  List(a).iterator.toList.sortWith(_ < _)\n      } else if (a < b) {\n      \
    \   List(b).iterator.toList.sortWith(_ < _)\n      } else if (a > 0 && b > 0)\
    \ {\n         List(a).iterator.toList.takeWhile(_ > 0).takeWhile(_ < b).toList.sortWith(_\
    \ < _)\n      } else if (a > 0 && b == 0) {\n         List(a).iterator.toList.takeWhile(_\
    \ > 0).takeWhile(_ == 0).toList.sortWith(_ < _)\n      } else if (a == 0 && b\
    \ > 0) {\n         List(b).iterator.toList.takeWhile(_ > 0).takeWhile(_ == 0).toList.sortWith(_\
    \ < _)\n      } else if (a == 0 && b == 0) {\n         List().iterator.toList.sortWith(_\
    \ < _)\n      } else {\n         List().iterator.toList.sortWith(_ < _)\n    \
    \  }", "        // Store the digits in a list\n        var d = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        // Divide by 10 and store remainders\n        while (b > 0) {\n     \
    \       d += b % 10\n            b /= 10\n        }\n        // Return list of\
    \ digits\n        if (d.size < 2)\n            d += 0L\n        else\n       \
    \     d.sortWith(_ > _)", "        var res = List[Long]()\n        var low = a\n\
    \        var high = b\n        var temp = low\n        while (!temp.isZero &&\
    \ temp.isEven) {\n            temp = temp / 10\n            res.append(temp)\n\
    \            temp = temp % 10\n        }\n        if (temp.isZero) res.append[Long](temp.toLong)\n\
    \        while (!temp.isZero && temp.isOdd && temp > b) {\n            temp =\
    \ temp / 10\n            res.append(temp)\n            temp = temp % 10\n    \
    \    }\n        if (temp.isZero) res.append[Long](temp.toLong)\n        res.sort",
  "        val a = a / b\n        val digits = scala.math.pow(b, a).digits\n     \
    \   var evens = List[Long]()\n        var i = 0\n        while(i < digits.length)\
    \ {\n            if(digits(i) % 2 == 0) {\n                evens = evens :+ (a\
    \ / b * digits(i))\n                i += 1\n            } else {\n           \
    \     i += 1\n            }\n        }\n        evens", "        var result :\
    \ List[Long] = List()\n        // use while loop and recursion\n        while\
    \ (a <= b) {\n            result += a\n            a += 1l\n        }\n      \
    \  if (result.isEmpty) result :+ a\n        return result", "        val n = b-a\n\
    \        if (n.lt(0)) n else List()\n        val evens = generateIntegers(a+1,\
    \ b)\n        for (e <- 0 to n-2) evens = evens ++ List(a + (e*2))\n        evens",
  "        val m = List(a, b).sorted //sort ascending\n        val l = List(a,b).sorted\
    \ //sort ascending\n        val s = m.zip(l).map{ case (m, l) => l.map{ case b\
    \ => b.toLong % m }.toList }.toList\n        s match {\n            case a ::\
    \ b :: Nil => a.head :: b.head :: Nil\n            case _ => Nil\n        }",
  "        val list = new mutable.ListBuffer[Long]()\n        while (b != 0) {\n \
    \           if (a >= b) {\n                list.push(a.longValue)\n          \
    \      a = a.longValue / 2\n            } else {\n                a /= 2\n   \
    \             b /= 2\n            }\n        }\n        list.filterNot(x => x\
    \ == 0)", "        val digits = Seq[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong).reverse\n\
    \        val x = a / Math.pow(10, digits.size.toLong)\n        val y = a % Math.pow(10,\
    \ digits.size.toLong)\n        val result = digits ++ generateIntegers(x + Math.pow(10,\
    \ digits.size.toLong)*(b - y), b)\n        result", "        def isEven(a: Long)\
    \ : Boolean = {\n            if (a%2 != 0) false else true\n        }\n\n    \
    \    def isGreater(a : Long, b : Long) : Boolean = {\n            if (a > b) true\
    \ else false\n        }\n\n        def getEvenAndHigher(a : Long, b : Long) :\
    \ Long = {\n            var c : Long = a.toInt\n            var d : Long = b.toInt\n\
    \            while (c < b) {\n                d = c\n                c = d + b\n\
    \            }\n            return d\n        }\n\n        def getEvenAndLower(a\
    \ : Long, b : Long) : Long = {\n            var c : Long = a.toInt\n         \
    \   var d : Long = b.toInt\n            while (c > b) {\n                d = c\n\
    \                c = d - b\n            }\n            return d\n        }\n\n\
    \        def generate(a: Long, b: Long) : List[Long] = {\n            var c :\
    \ List[Long] = Nil\n            while (a < b) {\n                if (isEven(a))\
    \ c ::= a.toLong\n                else if (isGreater(a, b)) c ::= getEvenAndHigher(a.toLong,\
    \ b).toLong\n                else c ::= getEvenAndLower(a.toLong, b).toLong\n\
    \                a += 1\n            }\n            c\n        }\n\n        generate(a,\
    \ b)", "        val evenDigitsFromAtoB = a #:: generateIntegers((a.toInt + b.toInt)\
    \ / 2, b.toInt)\n        if (b.toInt % 2 == 0) evenDigitsFromAtoB\n        else\
    \ evenDigitsFromAtoB.reverse", "        def loop(a : Long, b : Long, s : List[Long])\
    \ : List[Long] = {\n            if (a > b) s\n            else loop(a+1, b, s.takeWhile(_\
    \ < a) ::: List(a.toLong)) \n        }\n        loop(a, b, nil)", "        val\
    \ even: Set[Long] = new scala.collection.mutable.HashSet\n        even.add(a.toLong)\n\
    \        val odd: Set[Long] = new scala.collection.mutable.HashSet\n        odd.add(b.toLong)\n\
    \        while (even.nonEmpty || odd.nonEmpty) {\n            val x = even.min.orElse(odd.min).getOrElse(0)\n\
    \            even.remove(x)\n            odd.remove(x)\n            if (even.nonEmpty\
    \ || odd.nonEmpty)\n                yield x\n        }\n        odd.toList", " \
    \       if(a > b) {\n            List();\n        }\n        else {\n        \
    \    var list : mutable.MutableList[Long] = mutable.MutableList[Long]()\n    \
    \        for(a <- a;\n                b <- b;\n                a <= b) {\n   \
    \                 list = list :+ a\n                }\n            list.toList\n\
    \        }", "        val list = new mutable.ListBuffer[Long]()\n        while(a\
    \ <= b) {\n            list += a\n            a = math.min(a,b)\n        }\n \
    \       list.sortBy(_.toString.toLong)\n        list.filter(i => i.toString.toLong\
    \ % 2 == 0).map(_.toString.toLong)", "        var result : List[Long] = Nil\n\
    \        var start = a\n        var end = b\n        while start <= end {\n  \
    \          val result = start.toString\n            start = start + 2\n      \
    \      result += end.toString\n            end = end - 2\n        }\n        result.reverse",
  "        val range = new Range(a, b+1)\n        val even = range.filter(i => i %\
    \ 2 == 0)\n        val odd = range.filter(i => i % 2 == 1)\n        val even_sorted\
    \ = even.toList.sortWith(_ > _)\n        val odd_sorted = odd.toList.sortWith(_\
    \ > _)\n        if (even_sorted.isEmpty() && odd_sorted.isEmpty())\n         \
    \   List()\n        else\n            List(even_sorted.head, odd_sorted.head)",
  "        val listA = new ArrayList[Long]()\n        val listB = new ArrayList[Long]()\n\
    \        var i : Long = 0\n        var j : Long = 0\n        while (i < a || j\
    \ < b) {\n            if (i < a) {\n                listA.add(i)\n           \
    \     i = i + 1\n            }\n            if (j < b) {\n                listB.add(j)\n\
    \                j = j + 1\n            }\n        }\n        val evenList = listA.toList.filterNot(_\
    \ % 2 == 0)\n        val oddList = listB.toList.filterNot(_ % 2 == 0)\n      \
    \  (evenList ++ oddList).sorted", "        val list = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b) list += i.toLong\n        list.toList", "        var\
    \ ans = List.empty[Long]\n        var digits = List.empty[Long]\n        for (i\
    \ <- 0 until b - a) {\n            var newDigit = i / a\n            digits +=\
    \ newDigit\n            if (newDigit > 0) {\n                ans = ans :+ newDigit.toLong\n\
    \            }\n        }\n        ans.toList", "        val res : List[Long]\
    \ = Nil\n        while (a < b) {\n            val x = a.toInt\n            val\
    \ y = b.toInt\n            if (x % 2 == 0 && y % 2 == 0) {\n                val\
    \ rem = x % y\n                if (rem == 0) {\n                    res :+= x\n\
    \                } else {\n                    res :+= y\n                }\n\
    \            } else if (x % 2 != 0 && y % 2 == 0) {\n                res :+= y\n\
    \            } else {\n                res :+= x\n            }\n            a\
    \ = x + 1\n            b = y + 1\n        }\n        if (res.isEmpty) res\n  \
    \      else generateIntegers(a+1, b).reverse.head +: res", "        if (b < 0)\
    \ throw new IllegalArgumentException();\n        if (a == 0) return List();\n\
    \        val max  = scala.math.min(a.toInt+b, b.toInt)\n        val min = scala.math.max(a.toInt+b,\
    \ b.toInt)\n        val aToInt = a.toInt;\n        val bToInt = b.toInt;\n   \
    \     val aList = new scala.collection.mutable.ListBuffer[Long]()\n        for\
    \ ( i <- 1 to max) {\n            val aDigit = scala.math.pow(10, i.toInt - aToInt)\n\
    \            val bDigit = scala.math.pow(10, i.toInt - bToInt)\n            val\
    \ a = aDigit / scala.math.pow(10, i.toInt - aToInt)\n            val b = bDigit\
    \ / scala.math.pow(10, i.toInt - bToInt)\n            val l = a*b\n          \
    \  if (l % 2 == 0) aList += l\n        }\n        if (aList.size < 1) return List()\n\
    \        val even = List(aList)\n        val odd = aList.filterNot(_ % 2 == 0)\n\
    \        even.sortBy(_ % 10)\n        even.foldLeft(List(even, odd)) { case (acc,x)\
    \ => \n            val xList = x.toList.sortBy(_ % 10)\n            val a = acc.head\n\
    \            val b = xList.head\n            val c = a*b\n            val d =\
    \ xList.last\n            acc\n                .append(c).\n                append(d).\n\
    \                map(_ % 10)\n        }", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        var current = a\n        while(current < b) {\n            val remainder\
    \ = current.toInt % 10\n            if(remainder != 0) {\n                result\
    \ += current.toLong\n                current += 10\n            }\n          \
    \  else {\n                result += current.toLong\n                current +=\
    \ 10\n            }\n        }\n        return result.toList", "      if (a ==\
    \ 0) Nil else if (b == 0) Nil else {\n        var l = b\n        var k = a\n \
    \       val res = (0 to a).map(i => l % k).filter(l => l % 2 == 0).sorted\n  \
    \      res.map(x => { l += 1; k *= 2; x })\n      }", "        if (a > b) {\n\
    \            List(a, b)\n        }\n        else {\n            val evenNumbers\
    \ = a.toLong.filter(_ % 2 == 0)\n            val evenNumbersSortedAsc = evenNumbers.sortWith(_\
    \ < _)\n            val remainder = b.toLong.filter(_ % 2 == 0)\n            val\
    \ evenNumbersSortedDesc = evenNumbers.sortWith(_ < _).reverse\n            val\
    \ remainderSortedDesc = remainder.sortWith(_ < _).reverse\n            val nums\
    \ = evenNumbersSortedAsc.takeWhile(_ <= b).toList ++ evenNumbersSortedDesc.takeWhile(_\
    \ >= a).toList\n            nums ++ remainderSortedDesc.takeWhile(_ <= b).reverse\n\
    \        }", "        var result : List[Long] = List()\n        var mid = a\n\
    \        while (mid<b) {\n            if (mid%2==0)\n                result ::=\
    \ mid.toLong\n            mid = mid+1\n        }\n        result ::= mid.toLong\n\
    \        result.reverse", "        val range = (a to b).toSet\n        val nums\
    \ = range.map( n=> n.toInt).toList\n        val result: List[Long] = nums.sortWith((a,\
    \ b) => a < b)\n        range.map(i => result(i))", "        if (b - a*2 > 0)\n\
    \            throw new Exception(\"Invalid input\")\n        val n = a.pow(2).ceil.toLong\n\
    \        val s = a.floor.toLong\n        val m = 1\n        var l = 0\n      \
    \  val even = []\n        for (i <- 0 until n) {\n            if (i % 2 == 0)\
    \ {\n                even += i.toLong\n                l++\n            }\n  \
    \          else {\n                if (s > m)\n                    m = s\n   \
    \             s = (i + m).floor.toLong\n                l++\n            }\n \
    \       }\n        return even.take(b.toLong - a + l)", "        val nums = for\
    \ (a <- a; b <- b) yield { val l = a % b; a / b }\n        val evens = for (a\
    \ <- nums; a % 2 == 0) yield a\n        evens ++ nums", "        val res = ListBuffer[Long]()\n\
    \        while(a < b) {\n            res += a\n            a = a >> 1\n      \
    \  }\n        res", "        var res = []\n        var rem = b - a\n        var\
    \ even = rem\n        var i = 0\n        while ( even > 0 ){\n            rem\
    \ = (rem / 10).toLong\n            rem %= 10\n            res +=    rem.toLong\n\
    \            even = even / 2\n            i += 1\n        }\n        val evens\
    \ = res.filter(_%2 == 0)\n        val odd = res.filter(_%2 == 1)\n        var\
    \ i = 1\n        while ( i < evens.length ){\n            evens(i) += evens(i\
    \ - 1) * 10\n            i += 1\n        }\n        val rem = evens.length - evens.length\n\
    \        odd(rem) += odd(rem - 1) * 10\n        if ( evens.length == 0 ){\n  \
    \          List[Long]()\n        } else {\n            List[Long](evens.toList,odd.toList)\n\
    \        }", "        val a = a.toInt\n        val b = b.toInt\n        var i\
    \ = 0\n        var ans = List[Long]()\n        while (i <= b) {\n            if\
    \ (a%2==0l) {\n                ans = ans :+ a.toLong\n                a = a.toLong\n\
    \                i = i + 1\n            }\n            else {\n              \
    \  a = a.toLong\n            }\n        }\n        return ans", "        def generateNumbers(x\
    \ : Long, i : Long) : List[Long] = {\n            val c = x.toString / i.toString.toDouble\n\
    \            if (c.toDouble < 1) {\n                List()\n            } else\
    \ {\n                val y = x.toString.remainder(i.toString.toDouble).toLong\n\
    \                if (y == 0)\n                    generateNumbers(x, i + 1)\n\
    \                else\n                    generateNumbers(y, i)\n           \
    \ }\n        }\n        val n = generateNumbers(a, b).filter(_ != 0).size\n  \
    \      val s = generateNumbers(a, b).filter(_ % 2 == 0).toList.sorted\n      \
    \  val a = s.head\n        val d = List(s.last).sortWith(_ > _)\n        generateNumbers(a,\
    \ n).map(_.toLong)", "        var list : List[Long] = Nil\n        val start =\
    \ (1l / a).toInt\n        val end = (1l / b).toInt\n        for (i <- start.until(end))\
    \ {\n            if (a % i == 0 && b % i == 0) {\n                list += i\n\
    \            }\n        }\n        list", "        val odd = scala.math.floor((b-a)/2l)\n\
    \        val even = b-a\n        odd.toLong :: even.toLong :: odd.toLong :: Nil",
  "        var list = List[Long]()\n        while(a <= b) {\n            list = list\
    \ :+ a.toLong\n            a = (a * b).toLong\n        }\n        list", "   \
    \     val evenNumbers = BigInt(a)\n        val oddNumbers = BigInt(b)\n      \
    \  val numEvens = evenNumbers / BigInt(2)\n        val numOdds = oddNumbers /\
    \ BigInt(2)\n\n        val result = ListBuffer(numEvens.toLong)\n        if (numOdds.toLong\
    \ >= BigInt(1)) {\n            for (num in 0 until numOdds.toInt) {\n        \
    \        result.prepend(BigInt(num + 1).toLong)\n            }\n        }\n  \
    \      result", "        val m = b - a\n        if (m <= 0) List.empty\n     \
    \   else m / 2L.toLong :: generateIntegers(a, b - (m*2L.toLong))", "        def\
    \ generate(a: Long, b: Long, result: List[Long]) : List[Long] = {\n          \
    \  if (b - a <= 0) result\n            else generate(a * b, b, a :: result)\n\
    \        }\n        generate(a, b, List[Long]())", "        var l = (b - a).toInt\n\
    \        var i = b\n        var evenNumbers = List[Long]()\n        while ( i\
    \ < a ) {\n            evenNumbers += i\n            i += 2l\n        }\n    \
    \    evenNumbers.reverse", "        def generateN(a : Long, b : Long, n: List[Long])\
    \ =\n            if (a <= 0 || b <= 0) n\n            else if (b < a) generateN(a,\
    \ (b - a), n :+ a).reverse\n            else generateN(a - b, b - a, n :+ a :+\
    \ b)\n        val list = generateN(a.toInt, b.toInt, Nil)\n        list.sort (Long.compare(x\
    \ => (x.toInt, x), y => (y.toInt, y)))", "        val list: List[Long] = new scala.collection.mutable.MutableList[Long]()\n\
    \        var num: Long = 0\n        while(num < a || num > b){\n            if(num\
    \ % 2 == 0){\n                list += num.toLong\n            }\n            num\
    \ += 1\n        }\n        list.sortWith((x, y) => x > y)\n        list.toList",
  "        val l = math.min(a, b);\n        val r = math.max(a, b);\n\n        var\
    \ cur = math.max(a, b);\n        var result = List[Long]();\n        while(cur\
    \ <= l) {\n            result ::= cur.toLong;\n            cur += r;\n       \
    \ }\n        result.reverse;", "        val evens =  a.toString.takeWhile(_ %\
    \ 2 == 0).sorted\n        val odds =  b.toString.takeWhile(_ % 2 == 1).sorted\n\
    \        evens.zipWithIndex.flatMap(x => List(x._2, x._2 + 1)).filter(x => x <\
    \ b.toString.length).filter(x => x >= a.toString.length).toList ::: odds", " \
    \       var x = a.toInt\n        var y = b.toInt\n        var answer = new Array[Long](x-y+1)\n\
    \        var x = a\n        var y = b\n        var even = x.toInt/evenDigit\n\
    \        var lastEven = y\n        var start = 0\n        var end = evenDigit\n\
    \        var i = 1\n        while (i < evenDigit) {\n            answer[start]\
    \ = even\n            start = end\n            end = start + 1\n            i\
    \ = i + 1\n        }\n        while (i < evenDigit) {\n            answer[start]\
    \ = lastEven\n            start = end\n            end = start + evenDigit\n \
    \           i = i + 1\n        }\n        return answer", "        val l1 =  a.toString.reverse.map(_.toInt)\n\
    \        val l2 =  b.toString.reverse.map(_.toInt)\n        val n1 = l1.takeWhile(x\
    \ => x >= 0)\n        val n2 = l2.takeWhile(x => x >= 0)\n        val l3 = n2.zip(l1).map\
    \ {\n            case (l,r) => r + l\n        }.toList\n        if (l3.isEmpty)\
    \ {\n            l3\n        }\n        else {\n            var temp = l1\n  \
    \          while (!l3.contains(temp)) {\n                temp = temp + n2.head\n\
    \            }\n            l3.sorted\n        }", "        var li = a.toString.toInt;\n\
    \        var lb = b.toString.toInt;\n        var list : List[Long] = Nil;\n  \
    \      var temp : List[Long] = Nil;\n        var count : Int = 0;\n\n        while(li\
    \ > 0) {\n            count = count + 1;\n            temp = List(li % 10);\n\
    \            li = li/10;\n\n            while(count > 0 && temp.length > 0) {\n\
    \                if(lb % 2 == 0) {\n                    temp = temp + List(temp(temp.length-1));\n\
    \                    count = count - 1;\n                }\n                lb\
    \ = lb / 2;\n            }\n            list = list + temp;\n        }\n     \
    \   return list;", '        if(a > b) a else b', "        val evenDigits = a.toString.takeWhile(digit\
    \ => digit != '0').iterator\n        val oddDigits = b.toString.dropWhile(digit\
    \ => digit != '0').iterator\n        val result = oddDigits.toList.filter(_ =>\
    \ evenDigits.hasNext)\n        if (result.isEmpty) Nil\n        else result ::\
    \ generateIntegers(result.head, result.tail)", "        var list: List[Long] =\
    \ Nil\n        var num = a\n        var pow = 10\n        while (pow != 0) {\n\
    \            list = list :+ num.toInt\n            num *= pow\n            pow\
    \ /= 2\n        }\n        if (b > num) {\n            list = list :+ (b - num).toInt\n\
    \        }\n        return list.reverse", "        def generate(): List[Long]\
    \ = {\n            def isEven(i: Long, even: List[Long]) : List[Long] = {\n  \
    \              if (i % 2 == 0) {\n                    i.toLong :: even\n     \
    \           } else {\n                    even\n                }\n          \
    \  }\n            val even = if (a > b) Nil else a.toLong :: generate()\n    \
    \        val odd = if (b > a) Nil else b.toLong :: generate()\n            isEven(a,\
    \ even) ++ isEven(b, odd)\n        }\n        generate()", "        val x = a%b\n\
    \        val y = a%b\n        val z = a%b\n        val z2 = a%b\n        val z3\
    \ = a%b\n        val z4 = a%b\n        val z5 = a%b\n        val z6 = a%b\n  \
    \      val z7 = a%b\n        val z8 = a%b\n        val z9 = a%b\n        val z10\
    \ = a%b\n        val z11 = a%b\n        val z12 = a%b\n        val z13 = a%b\n\
    \        val z14 = a%b\n        val z15 = a%b\n        val z16 = a%b\n       \
    \ val z17 = a%b\n        val z18 = a%b\n        val z19 = a%b\n        val z20\
    \ = a%b\n        val z21 = a%b\n        val z22 = a%b\n        val z23 = a%b\n\
    \        val z24 = a%b\n        val z25 = a%b\n        val z26 = a%b\n       \
    \ val z27 = a%b\n        val z28 = a%b\n        val z29 = a%b\n        val z30\
    \ = a%b\n        val z31 = a%b\n        val z32 = a%b\n        val z33 = a%b\n\
    \        val z34 = a%b\n        val z35 = a%b\n        val z36 = a%b\n       \
    \ val z37 = a%b\n        val z38 = a%b\n        val z39 = a%b\n        val z40\
    \ = a%b\n        val z41 = a%b\n        val z42 = a%b\n        val z43 = a%b\n\
    \        val z44 = a%b\n        val z45 = a%b\n        val z46 = a%b\n       \
    \ val z47 = a%b\n        val z48 = a%b\n        val z49 = a%b\n        val z50\
    \ = a%b\n        val z51 = a%b\n        val z52 = a%b\n        val z53 = a%b\n\
    \        val z54 = a%b\n        val z55 = a%b\n        val z56 = a%b\n       \
    \ val z57 = a%b\n        val z58 = a%b\n        val z59 = a%b\n        val z60\
    \ = a%b\n        val z61 = a%b\n        val z62 = ", "        var result: List[Long]\
    \ = Nil\n        var carry = 0\n        for(i <- a to b){\n            result\
    \ ::= i + (carry % 10)\n            carry /= 10\n        }\n        if(result\
    \ != Nil)\n            result ::= carry\n        result ::= Nil\n        return\
    \ result", "        def generate(a : Long, b : Long) : List[Long] = {\n      \
    \      val start = a\n            val end = b\n            val digits = mutable.LinkedList.empty[Long]\n\
    \            while (start < end) {\n                digits += start\n        \
    \        start += 1\n            }\n            digits.sortWith((a,b) => a < b)\n\
    \        }\n        generate(a,b).reverse", "        var l : List[Long] = Nil\n\
    \        var c = a\n        while(c <= b) {\n            if (c % 2==0) {\n   \
    \             c = c + 1;\n                l = c :: l\n            } else {\n \
    \               c = c + 1;\n            }\n        }\n        l"]
stop_tokens:
- "\n    }\n"
