language: scala
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new StringBuilder()\n        var index = -1\n        var i = 0\n\
    \        while (i < string.length) {\n            if (string.charAt(i) == 'a')\
    \ {\n                prefix.append(string.charAt(i))\n                index =\
    \ i\n            }\n            i += 1\n        }\n        if (prefix == \"\"\
    ) {\n            List(\"\")\n        } else {\n            var longest = string.length\n\
    \            var longestIndex = 0\n            var i = 0\n            while (i\
    \ < string.length) {\n                if (string.charAt(i) == 'a') {\n       \
    \             prefix.append(string.charAt(i))\n                    longestIndex\
    \ = i\n                    longest = string.length\n                }\n      \
    \          i += 1\n            }\n            for (i = longestIndex + 1; i < string.length;\
    \ i ++) {\n                prefix.append(string.charAt(i))\n            }\n  \
    \          prefix.reverse\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ij1ecte.scala:32:19 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mfor\e[0m (i = longestIndex + \e[31m1\e\
    [0m; i < string.length; i ++) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\
    \e[31m   |\e[0m                   ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp4ij1ecte.scala:32:56 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mfor\e[0m (i = longestIndex + \e[31m1\e\
    [0m; i < string.length; i ++) {\n\e[31m\e[31m   |\e[0m                       \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                        '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax\
    \ Error: /tmp/tmp4ij1ecte.scala:32:62 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mfor\e[0m (i = longestIndex + \e[31m1\e[0m; i <\
    \ string.length; i ++) {\n\e[31m\e[31m   |\e[0m                              \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                                   pattern expected\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp4ij1ecte.scala:18:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (prefix == \e[31m\"\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types\
    \ StringBuilder and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4ij1ecte.scala:32:37 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            \e[33mfor\e[0m (i = longestIndex + \e[31m1\e[0m;\
    \ i < string.length; i ++) {\n\e[31m\e[31m   |\e[0m                          \
    \           ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  imp"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var allPrefixes = new ListBuffer[String]()\n        var prefixLength = string.length\n\
    \        while (prefixLength > 0) {\n            allPrefixes += string.substring(0,\
    \ prefixLength)\n            string = string.substring(prefixLength)\n       \
    \     prefixLength = string.length\n        }\n        allPrefixes += string\n\
    \        allPrefixes.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnfaw3qk5.scala:12:19 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            string = string.substring(prefixLength)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val string\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result : List[String] = Nil\n        var shortest = string\n        var\
    \ longest = string\n        for(str <- string.length until 0){\n            val\
    \ prefix = string take(str)\n            result ::= prefix\n            shortest\
    \ = if (shortest.length > str) shortest.drop(str) else shortest\n            longest\
    \ = if (longest < prefix) prefix else longest \n        }\n        result ::=\
    \ shortest\n        result ::= longest\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gyw521t.scala:22)\n\tat Problem.main(tmp4gyw521t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes : List[String] = Nil\n        string match {\n        case \"\"\
    \ => prefixes = Nil\n        case s => allPrefixes(s.tail) foreach (prefix =>\
    \ prefixes ::= prefix :: prefix.tail)\n        }\n        prefixes\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw081xc99.scala:11:66 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mcase\e[0m s => allPrefixes(s.tail) foreach\
    \ (prefix => prefixes ::= prefix :: prefix.tail)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw081xc99.scala:11:77 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mcase\e[0m s => allPrefixes(s.tail) foreach\
    \ (prefix => prefixes ::= prefix :: prefix.tail)\n\e[31m\e[31m   |\e[0m      \
    \                                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = new mutable.ListBuffer[String]\n        // Loop over the string\
    \ and append the first character\n        var currentLength = string.length\n\
    \        var currentPrefixes = List[String]()\n        while(currentLength > 0)\
    \ {\n            prefixes += string.substring(0, currentLength)\n            //\
    \ Add rest of the characters\n            currentPrefixes += string.substring(currentLength)\n\
    \            // Move to the next character\n            currentLength -= 1\n \
    \       }\n        // Return the list of prefixes\n        return prefixes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfs_nz_bn.scala:8:27 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m  |\e[0m              \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                           Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfs_nz_bn.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            currentPrefixes\
    \ += string.substring(currentLength)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        var current = string\n        while\
    \ (current != \"\") {\n            var next = current.substring(0,1);\n      \
    \      var newPrefixes = prefixes :+ next\n            prefixes = newPrefixes\n\
    \            current = current.substring(1,current.length)\n        }\n      \
    \  prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjab3gp6c.scala:20)\n\tat Problem.main(tmpjab3gp6c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = new mutable.ListBuffer[String]\n        var prefix = \"\"\n \
    \       for( char <- string.toCharArray )\n            if( char == prefix )\n\
    \                prefixes += prefix\n            else\n                prefix\
    \ = char+prefix\n        prefixes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ui904d4.scala:8:27 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m  |\e[0m              \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                           Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp9ui904d4.scala:11:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m( char == prefix )\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var currentPrefix =\
    \ \"\"\n        var length = string.length\n\n        for (x  <- 0 until length)\
    \ {\n            if (string(x) == currentPrefix)\n                prefixes +=\
    \ currentPrefix\n            else\n                prefixes += currentPrefix +\
    \ string(x)\n            currentPrefix = string(x - 1)\n        }\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplx9d52m2.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmplx9d52m2.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (string(x) == currentPrefix)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplx9d52m2.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            currentPrefix = string(x\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Char\n\e[31m   |\e[0m\
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = List.empty[String]\n        var length = 0\n        var newPrefix\
    \ = prefix\n        for {\n            x <- string\n            y <- newPrefix\n\
    \        } yield {\n            x :: y\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptthl7d8a.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x :: y\n\e[31m\e[31m   |\e[0m           \
    \   ^^^^\e[0m\n\e[31m   |\e[0m              value :: is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def recursive(string : String, prefixes: List[String]) : List[String] =\n  \
    \          if (string.length == 0) prefixes else prefixes ::: recursive(string.substring(1),\
    \ prefixes)\n        recursive(string, Nil).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyvesy9fc.scala:14)\n\tat Problem.main(tmpyvesy9fc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       string.foldLeft(List[String]())((acc,\
    \ s) => {\n           if (acc.length == 0 || s.length < acc.head.length) acc :+\
    \ s\n           else allPrefixes(s.tail)\n       })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tq1gclg.scala:9:36 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m           \e[33mif\e[0m (acc.length == \e[31m0\e[0m ||\
    \ s.length < acc.head.length) acc :+ s\n\e[31m\e[31m  |\e[0m                 \
    \                 ^^^^^^^^\e[0m\n\e[31m  |\e[0m                              \
    \    value length is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8tq1gclg.scala:9:69 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m           \e[33mif\e[0m (acc.length == \e[31m0\e[0m || s.length < acc.head.length)\
    \ acc :+ s\n\e[31m\e[31m  |\e[0m                                             \
    \                        ^\e[0m\n\e[31m  |\e[0m                              \
    \                        Found:    (s : Char)\n\e[31m  |\e[0m                \
    \                                      Required: String\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8tq1gclg.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m           \e[33melse\e[0m allPrefixes(s.tail)\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    value tail is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        var i = 0\n        var j = string.length\
    \ - 1\n        while (i <= j) {\n            prefixes = prefixes :+ (string.substring(i,\
    \ string.length))\n            i += 1\n        }\n        prefixes\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsg52uvu2.scala:19)\n\tat Problem.main(tmpsg52uvu2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val result = new mutable.MutableList[String]()\n        var i = 0\n        var\
    \ temp = ''\n        while (i < string.length) {\n            temp = string.substring(i,\
    \ string.length)\n            result.add(temp)\n            i = result.size -\
    \ 1\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi9dma216.scala:10:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mtemp\e[0m = ''\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   empty\
    \ character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9dma216.scala:8:25\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.MutableList[\e[35mString\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val length = new mutable.HashMap[String, Int]()\n        def allPrefixesRecursive(prefix\
    \ : List[String]) : List[String] = {\n            if(string.length <= 0) prefix\n\
    \            else allPrefixesRecursive(prefix ::: prefix.reverse.tail) match {\n\
    \                case Nil => prefix\n                case prefix :: Nil => prefix\n\
    \                case prefix :: suffix => allPrefixesRecursive(prefix :: suffix)\n\
    \            }\n        }\n        length += (string -> string.length)\n     \
    \   allPrefixesRecursive(List[String]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7v9dbr3_.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlength\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7v9dbr3_.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e\
    [0m prefix :: Nil => prefix\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ Found:    (prefix : String)\n\e[31m   |\e[0m                               \
    \       Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.split(\"\").foldLeft(List[String]()){\n            (allPrefix, c) =>\
    \ allPrefix ::: list.takeWhile(_.length < c.length)\n        }.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyo39rogz.scala:9:44 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            (\e[36mallPrefix\e[0m, \e[36mc\e[0m) => allPrefix\
    \ ::: list.takeWhile(_.length < c.length)\n\e[31m\e[31m  |\e[0m              \
    \                              ^^^^\e[0m\n\e[31m  |\e[0m                     \
    \                       Not found: list\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = new mutable.ArrayBuffer[String]()\n        var current = new\
    \ ListBuffer[String]()\n        for (ch <- string) {\n            current.append(ch)\n\
    \            if (ch == string.last) prefixes ++= current\n        }\n        return\
    \ prefixes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpis_llcxz.scala:8:27 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mprefixes\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m  |\e[0m                           Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpis_llcxz.scala:11:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            current.append(ch)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e\
    [0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems: String*): scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m (elem: String): scala.collection.mutable.ListBuffer[String]\n\e\
    [31m   |\e[0mmatch arguments ((ch : Char))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def getPrefixes(i : Int, string : String) : List[String] = {\n            if\
    \ (i == string.length) List(string)\n            else (0 to string.length - i)\n\
    \                .map { x => string.substring(i, i+x) }\n                .map(x\
    \ => getPrefixes(x + 1, string))\n                .reduceLeft(_ ++ _)\n      \
    \  }\n        getPrefixes(1, string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9p5q75h.scala:12:38\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                .map(x => getPrefixes(x\
    \ + \e[31m1\e[0m, string))\n\e[31m\e[31m   |\e[0m                            \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    String\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.length == 1) List(string)\n        else allPrefixes(string.takeWhile(_\
    \ != 'a')) ++ allPrefixes(string.dropWhile(_ != 'a'))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\tat Problem$.allPrefixes(tmpaq9xlhqp.scala:9)\n\
    \tat Problem$.a"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = ListBuffer[String]()\n        for (c <- string) {\n         \
    \   prefixes += c.toString\n            prefixes += c.toString.reverse\n     \
    \       prefixes += c.toString.reverse.tail\n            prefixes += c.toString.reverse.tail.tail\n\
    \        }\n        prefixes.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5qp8ah_k.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        prefixes.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    scala.collection.mutable.ListBuffer[String]\n\e[31m   |\e[0m        Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes : List[String] = Nil\n        var i = string.length\n        while\
    \ (i >= 0) {\n            prefixes = prefixes :+ string.substring(0, i)\n    \
    \        i -= 1\n        }\n        return prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jun1kgw.scala:17)\n\tat Problem.main(tmp4jun1kgw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Using mutable collection\n        val prefix = mutable.ListBuffer[String]()\n\
    \        def findAllPrefixes(s : String, prefix : mutable.ListBuffer[String])\
    \ : Unit = {\n            if (s.length == 0) prefix.foreach(prefix.append)\n \
    \           else {\n                prefix.append(s.head)\n                findAllPrefixes(s.tail,\
    \ prefix)\n            }\n        }\n        findAllPrefixes(string, prefix)\n\
    \        prefix.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk20hym8.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvk20hym8.scala:10:49 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mdef\e[0m \e[36mfindAllPrefixes\e[0m(\e\
    [36ms\e[0m : \e[35mString\e[0m, \e[36mprefix\e[0m : mutable.ListBuffer[\e[35mString\e\
    [0m]) : \e[35mUnit\e[0m = {\n\e[31m\e[31m   |\e[0m                           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string == \"\") {\n            return Nil\n        }\n        val (prefix,\
    \ rest) = string.span(_.isPrefixOf(_))\n        val (restPrefix, restRest) = rest.span(_.isPrefixOf(_))\n\
    \        if (restPrefix.isEmpty) {\n            prefix :: allPrefixes(restRest)\n\
    \        } else {\n            prefix :: allPrefixes(restPrefix) :: allPrefixes(restRest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg_qorjgv.scala:11:41 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m (prefix, rest) = string.span(_.isPrefixOf(_))\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg_qorjgv.scala:12:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ (restPrefix, restRest) = rest.span(_.isPrefixOf(_))\n\e[31m\e[31m   |\e[0m \
    \                                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_qorjgv.scala:16:12 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            prefix :: allPrefixes(restPrefix) :: allPrefixes(restRest)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[Object]\n\e[31m   |\e[0m      \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List.empty[String]\n        for (i <- 0 until string.length)\
    \ {\n            prefixes ::= string(0, i)\n        }\n        prefixes\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxm80mtnz.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            prefixes ::= string(\e[31m0\e[0m, i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is\
    \ not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxm80mtnz.scala:10:32 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            prefixes ::= string(\e[31m0\e[0m, i)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    (Int, Int)\n\e[31m   |\e[0m       \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def getPrefixes(currentLength : Int, strings : mutable.Stack[String], stringList\
    \ : List[String]) : List[String] = {\n            if (currentLength > stringList.size)\
    \ stringList :+ strings(0)\n            else if (currentLength == stringList.size)\
    \ stringList :+ strings(0)\n            else {\n                strings(currentLength)\
    \ match {\n                    case \"\" => getPrefixes(currentLength + 1, strings,\
    \ stringList :+ strings(0))\n                    case _ => getPrefixes(currentLength\
    \ + 1, strings, stringList :+ strings(0)) :+ strings(currentLength + 1)\n    \
    \            }\n            }\n        }\n        getPrefixes(0, mutable.Stack(string),\
    \ List())\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv__sbp8a.scala:8:55 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mdef\e[0m \e[36mgetPrefixes\e[0m(\e[36mcurrentLength\e\
    [0m : \e[35mInt\e[0m, \e[36mstrings\e[0m : mutable.Stack[\e[35mString\e[0m], \e\
    [36mstringList\e[0m : \e[35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m  |\e[0m                                   \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                            \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv__sbp8a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        getPrefixes(\e[31m0\e[0m, mutable.Stack(string),\
    \ List())\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.foldLeft((List[String](), string)) {\n            case ((prefix, str),\
    \ ch) =>\n                (prefix.takeRight(1) :+ str, prefix :+ ch)\n       \
    \ }._1.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo0w01f2i.scala:10:45\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m                (prefix.takeRight(\e\
    [31m1\e[0m) :+ str, prefix :+ ch)\n\e[31m\e[31m   |\e[0m                     \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                           Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.split(' ').tails.map(_.toString).reverse.map(_.substring(0, _.length)).takeWhile(_.length\
    \ > 0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w4xrp4d.scala:8:48 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.split(\e[31m' '\e[0m).tails.map(_.toString).reverse.map(_.substring(\e\
    [31m0\e[0m, _.length)).takeWhile(_.length > \e[31m0\e[0m).reverse\n\e[31m\e[31m\
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      var\
    \ prefixes = scala.collection.mutable.ListBuffer.empty[String]\n      var lastPrefixLength\
    \ = scala.math.minInt\n      var len = string.length\n      var i = 1\n      while\
    \ (i < len) {\n        var curPrefix = string.take(i)\n        var curPrefixLength\
    \ = curPrefix.length\n        if (curPrefixLength > lastPrefixLength) {\n    \
    \      prefixes = prefixes :+ curPrefix\n          lastPrefixLength = curPrefixLength\n\
    \        }\n        i += 1\n      }\n      prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37cnl1a_.scala:9:40 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m      \e[33mvar\e[0m \e[36mlastPrefixLength\e[0m = scala.math.minInt\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m          value minInt is not a member of math - did you mean math.BigInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Initialize prefixes list as empty list\n        var prefixes: List[String]\
    \ = Nil\n        // Loop over each letter in string\n        for (letter <- string)\
    \ {\n            // If prefix is not empty and current letter is first letter\
    \ of new prefix, add prefix to prefixes\n            if (prefixes.nonEmpty &&\
    \ letter == prefixes.head) {\n                prefixes = prefixes ::: List(letter)\n\
    \            } else {\n                // If prefix is not empty and current letter\
    \ is not first letter of new prefix, append this letter to prefix and continue\n\
    \                if (prefixes.nonEmpty && letter != prefixes.head) {\n       \
    \             prefixes = prefixes ::: List(letter)\n                } else {\n\
    \                    // If prefix is not empty and current letter is first letter\
    \ of new prefix, append this letter to prefix and continue\n                 \
    \   if (prefixes.nonEmpty && letter == prefixes.head) {\n                    \
    \    prefixes = prefixes ::: List(letter)\n                    }\n           \
    \     }\n            }\n        }\n        return prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2zc7wf81.scala:13:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (prefixes.nonEmpty && letter\
    \ == prefixes.head) {\n\e[31m\e[31m   |\e[0m                                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2zc7wf81.scala:14:27 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                prefixes = prefixes ::: List(letter)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \                    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp2zc7wf81.scala:17:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (prefixes.nonEmpty && letter\
    \ != prefixes.head) {\n\e[31m\e[31m   |\e[0m                                 \
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2zc7wf81.scala:18:31 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                    prefixes = prefixes ::: List(letter)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                               Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp2zc7wf81.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mif\e[0m (prefixes.nonEmpty\
    \ && letter == prefixes.head) {\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatc"
  stdout: ''
  timestamp: 1660010364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val l = string.tail.length\n        string match {\n            case \"\"  =>\
    \ List(string)\n            case x => allPrefixes(string.take(l) + x)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtlh3f1q.scala:15)\n\tat Problem.main(tmpwtlh3f1q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string match{\n            case \"\" => Nil\n            case _ => string.tails.tails.map(_.head).filter(string.head==_).toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbu_i7d3s.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m _ => string.tails.tails.map(_.head).filter(string.head==_).toList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue tails is not a member of Iterator[String] - did you mean Iterator[String].take?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val s = collection.mutable.Stack[String]()\n        for (x <- string) {\n  \
    \          if (s.length == 0) s.push(x.toString)\n            else for (y <- s)\
    \ if (y.length >= x.length) s.push(x + y)\n            else s.push(x.toString)\n\
    \        }\n        if (s.length == 0) List()\n        else s.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6n8nf9dm.scala:11:48 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m \e[33mfor\e[0m (y <- s) \e\
    [33mif\e[0m (y.length >= x.length) s.push(x + y)\n\e[31m\e[31m   |\e[0m      \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var allPrefixes = List[String]()\n        var current = \"\"\n        var currentLength\
    \ = 0\n        string.foreach {\n            if (_ == current) {\n           \
    \     currentLength += 1\n            } else {\n                currentLength\
    \ = 1\n            }\n            current += _\n            if (currentLength\
    \ > allPrefixes.last) {\n                allPrefixes :+= current\n           \
    \ }\n        }\n        allPrefixes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpqryofy57.scala:12:16 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (_ == current) {\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 == current.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpqryofy57.scala:17:23 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            current += _\n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of\
    \ expanded function:\n\e[31m   |\e[0m   _$2 => current += _$2.\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpqryofy57.scala:18:30 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (currentLength > allPrefixes.last)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \ None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\
    \e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e\
    [31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m\
    \   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m \
    \  |\e[0m match arguments ((List[String]#last : => String))\n3 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new mutable.ListBuffer[String]\n        var current = string\n\
    \        var temp = \"\"\n        var i = 0\n        while(i < current.length)\
    \ {\n            temp += current(i)\n            if(temp.startsWith(prefix(0))){\n\
    \                prefix.remove(prefix(0))\n                prefix.prepend(temp)\n\
    \                temp = \"\"\n            } else {\n                i += 1\n \
    \           }\n        }\n        prefix.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgigu_l5b.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new Array[Char](string.length)\n        var i : Int = 0\n     \
    \   while (i < string.length) {\n            prefix(i) = string(i)\n         \
    \   i += 1\n        }\n        prefix\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66c_d6hi.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        prefix\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (prefix : Array[Char])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def prefixes(string : String, res : List[String], prefix : String) : List[String]\
    \ = {\n            if(string.length == 0) res.append(prefix)\n            else\
    \ prefixes(string.substring(1), res :+ prefix, prefix + string.charAt(0))\n  \
    \      }\n        prefixes(string, nil, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp98nyk2dj.scala:9:39 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m(string.length == \e[31m0\e[0m)\
    \ res.append(prefix)\n\e[31m\e[31m  |\e[0m                                   ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m value append is not a member of List[String] - did you mean\
    \ res.appended?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98nyk2dj.scala:12:25\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        prefixes(string,\
    \ nil, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: nil\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def loop(current : String, list : List[String], prefixes : List[String]) = {\n\
    \            if (current.length == string.length) list :+ prefixes\n         \
    \   else {\n                loop(string takeRight 1, (current + prefixes.head)\
    \ :: list, prefixes)\n            }\n        }\n        loop(\"\", List[String](),\
    \ List())\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmptkfjfu0e.scala:11:16 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                loop(string takeRight \e[31m1\e[0m, (current\
    \ + prefixes.head) :: list, prefixes)\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m                Overloaded or recursive \e[33mmethod\e[0m\
    \ \e[35mloop\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptkfjfu0e.scala:14:12 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        loop(\e[31m\"\"\e[0m, List[\e[35mString\e[0m](), List())\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    List[Object]\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if(string.length <= 2) return List(string)\n        var res = new ListBuffer[String]\n\
    \        var curString = string\n        while(curString.length != 1) {\n    \
    \        res += curString\n            curString = curString.dropRight(1)\n  \
    \      }\n        res ++= curString.dropRight(1)\n        res ++= List(\"\")\n\
    \        return res\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkpbq9o5l.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        res ++= curString.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    String\n\e[31m   |\e[0m             \
    \   Required: IterableOnce[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkpbq9o5l.scala:17:15 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mreturn\e[0m res\n\e[31m\e[31m   |\e[0m               ^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    (res : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m           Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.sliding(2).map(_.mkString).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2je98z_s.scala:12)\n\tat Problem.main(tmp2je98z_s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string match {\n            case x +: xs => allPrefixes(x) ++ allPrefixes(xs)\n\
    \            case x => List(x)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeoncqbtl.scala:9:40\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x\
    \ +: xs => allPrefixes(x) ++ allPrefixes(xs)\n\e[31m\e[31m  |\e[0m           \
    \                             ^\e[0m\n\e[31m  |\e[0m                         \
    \               Found:    (x : Any)\n\e[31m  |\e[0m                          \
    \              Required: String\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixList = List[String]()\n        string.foldLeft(prefixList){\n    \
    \        list => list ::: (list.head :: list.tail)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzljrxjln.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[36mlist\e[0m => list ::: (list.head ::\
    \ list.tail)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Wrong number of parameters, expected: 2\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // O(n) time, O(n) memory\n        val prefix = new Array[String](string.length)\n\
    \        var i = 0\n        for (l <- string) {\n            while (i < prefix.length\
    \ && prefix(i) != l)\n                i += 1\n            prefix(i) = l\n    \
    \    }\n        prefix.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74f8d86e.scala:12:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mwhile\e[0m (i < prefix.length && prefix(i)\
    \ != l)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74f8d86e.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            prefix(i) = l\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (l : Char)\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixesList = List[String]()\n        for {\n            i <- 0\n     \
    \   } while (i < string.length)\n        for (\n            s <- string.toCharArray\n\
    \            if (s.equals(string.subSequence(i, i + 1).head))\n              \
    \  prefixesList :+ string.subSequence(i, i + 1).head\n        )\n        prefixesList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqbix7f12.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                prefixesList :+ string.subSequence(i,\
    \ i + \e[31m1\e[0m).head\n\e[31m\e[31m   |\e[0m                              \
    \        ^\e[0m\n\e[31m   |\e[0m                                      expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqbix7f12.scala:10:17 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m            i <- \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0m                 value foreach is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        string.foreach { x =>\n          \
    \  val newPrefixes = for (prefix <- prefixes) yield x :: prefix\n            prefixes\
    \ = newPrefixes\n        }\n        prefixes.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn2puzytv.scala:10:63 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mnewPrefixes\e[0m = \e\
    [33mfor\e[0m (prefix <- prefixes) \e[33myield\e[0m x :: prefix\n\e[31m\e[31m \
    \  |\e[0m                                                               ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = List.empty[String]\n        var curPrefix = \"\"\n        for\
    \ (c <- string) if (c.isLetter) {\n            if (curPrefix == \"\") curPrefix\
    \ = c\n            else curPrefix = curPrefix + c\n        } else {\n        \
    \    prefixes = prefixes ::: List(curPrefix)\n            curPrefix = \"\"\n \
    \       }\n        prefixes\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnfis5e5.scala:11:45\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (curPrefix\
    \ == \e[31m\"\"\e[0m) curPrefix = c\n\e[31m\e[31m   |\e[0m                   \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                  Found:    (c : Char)\n\e[31m   |\e[0m                     \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmprnfis5e5.scala:14:21 -----------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            prefixes = prefixes ::: List(curPrefix)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val prefixes\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string :: string.toLowerCase :: string.toUpperCase :: Nil.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo7urpezc.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    an identifier expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val short = string.length\n        val longer = string.reverse.length\n\n  \
    \      val combinations = mutable.ListBuffer.empty[(Int, Int)]\n        (short,\
    \ longer) foreach {\n            x =>\n                for( y <- 1 to longer if\
    \ x > y ) combinations.++= ( x -> y )\n        }\n        combinations.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_5t28ln.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcombinations\e[0m = mutable.ListBuffer.empty[(\e\
    [35mInt\e[0m, \e[35mInt\e[0m)]\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_5t28ln.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        (short, longer) foreach\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value foreach is not a member of (Int, Int)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.size() <= 1) List(\"a\" + string)\n        else string :: allPrefixes(string.substring(1,\
    \ string.length))\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpoxb8z1hf.scala:8:19 ------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mif\e[0m (string.size() <= \e[31m1\e[0m)\
    \ List(\e[31m\"a\"\e[0m + string)\n\e[31m\e[31m  |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m            \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m does not take parameters\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixesImpl(string : String, n = 0) : List[String] = {\n           \
    \ string match {\n                case \"abc\" => List(string.substring(0, n).asInstanceOf[String])\n\
    \                case _ =>\n                    for (x <- allPrefixesImpl(string.substring(0,\
    \ n), n + 2)) yield x +: x\n            }\n        }\n        allPrefixesImpl(string,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk7nj6blh.scala:8:47 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mdef\e[0m \e[36mallPrefixesImpl\e[0m(\e[36mstring\e\
    [0m : \e[35mString\e[0m, \e[36mn\e[0m = \e[31m0\e[0m) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m  |\e[0m                                               ^\e\
    [0m\n\e[31m  |\e[0m                                               ':' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7nj6blh.scala:12:84\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                    \e[33mfor\e\
    [0m (x <- allPrefixesImpl(string.substring(\e[31m0\e[0m, n), n + \e[31m2\e[0m))\
    \ \e[33myield\e[0m x +: x\n\e[31m\e[31m   |\e[0m                             \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (x : String)\n\e\
    [31m   |\e[0m                                                  Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        var prefix = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            prefix += string(i)\n            prefixes\
    \ = prefixes :+ prefix\n        }\n        prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val l = string.length\n        val prefixes = mutable.ListBuffer.empty[String]\n\
    \n        // Go through each index and build prefix\n        for (i <- 0 until\
    \ l) {\n            // Build prefix by concatenating all previous values\n   \
    \         val prefix = prefixes take i\n            val appendString = string.substring\
    \ (i, l)\n            prefixes += prefix ++ appendString\n        }\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe42ri_zk.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Create a list of all characters in the string\n        val allChars = string.map(c\
    \ => c)\n        // Create a list of all possible prefixes of length 1\n     \
    \   val prefixes = allChars.takeWhile(c => c != allChars.last).map(c => c + \"\
    a\")\n        // Return list with longest prefixes at the end\n        prefixes.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8gx9uap.scala:13:17\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        prefixes.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mIndexedSeq\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = List[String]()\n        allPrefixesRec(prefixes, \"\", string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsz4fgl4.scala:9:8 --------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        allPrefixesRec(prefixes, \e[31m\"\"\e[0m, string)\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Not found:\
    \ allPrefixesRec\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new Array[String](string.length)\n        for( i <- 0 until prefix.length\
    \ ) {\n            prefix(i) = string.charAt(i)\n        }\n        prefix.reverse\
    \ ::: prefix.takeWhile( i => i < string.length ).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvl4fljsc.scala:10:37\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            prefix(i) = string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Found:    Char\n\e[31m   |\e[0m                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvl4fljsc.scala:12:54\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        prefix.reverse ::: prefix.takeWhile(\
    \ \e[36mi\e[0m => i < string.length ).reverse\n\e[31m\e[31m   |\e[0m         \
    \                                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Found:    Int\n\e[31m\
    \   |\e[0m                                                      Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val n = string.length\n        def allPrefixesRecursion(n: Int, acc: List[String])\
    \ : List[String] = {\n            if (n == 0)\n                acc\n         \
    \   else {\n                val head = string.substring(0, n)\n              \
    \  val tail = allPrefixesRecursion(n-1, head :: acc)\n                tail\n \
    \           }\n        }\n        allPrefixesRecursion(n-1, Nil)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.allPrefixesRecursion$1(tmpj2dnuh5w.scala:13)\n\tat Problem$.allPrefixes(tmpj2dnuh5w.scala:18)\n\
    \tat Problem$.main(tmpj2dnuh5w.scala:21)\n\tat Problem.main(tmpj2dnuh5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val lengths = new mutable.HashSet[Int]()\n        var prefixes: List[String]\
    \ = Nil\n        for (c <- string) {\n            if (lengths.contains(c.length))\
    \ {\n                prefixes = prefixes :+ string\n            }\n          \
    \  lengths += c.length\n        }\n        return prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk82trjwy.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlengths\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer[String]()\n        string.split(\"(?<=^)\"\
    ).foreach { prefix =>\n            val temp = mutable.ListBuffer[String]()\n \
    \           for (x <- prefix) {\n                temp += x\n                prefixes\
    \ += temp.mkString\n            }\n        }\n        prefixes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptl4j5aw2.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptl4j5aw2.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val array = string.split(\"\")\n        var res = List.empty[String]\n     \
    \   for ((x, i) in array.zipWithIndex) {\n            if (i + 1 < array.length)\
    \ res += x + array(i + 1)\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp01ixil2f.scala:10:43 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m ((x, i) in array.zipWithIndex)\
    \ {\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e\
    [31m   |\e[0m                                           '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp01ixil2f.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp01ixil2f.scala:12:9\
    \ -------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result: List[String] = Nil\n        for {\n            c <- string\n   \
    \         prefix <- allPrefixes(c.tail)\n        } yield prefix :: result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp2ux7o0.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            prefix <- allPrefixes(c.tail)\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             value tail is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes: List[String] = Nil\n        var i = string.head.length\n\n   \
    \     val substrings = string.split\n\n        while (i < substrings.length) {\n\
    \            prefixes = prefixes :+ substrings(i)\n            i += 1\n      \
    \  }\n        prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpli82oope.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = string.head.length\n\
    \e[31m\e[31m  |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \              value length is not a member of Char\n\e[31m\e[31m-- [E051] Reference\
    \ Error: /tmp/tmpli82oope.scala:11:32 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36msubstrings\e[0m = string.split\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpli82oope.scala:14:21 -----------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            prefixes = prefixes :+ substrings(i)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val prefixes\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.Buffer.empty[String]\n        var startIndex = 0\n  \
    \      var currentIndex = 0\n\n        while (startIndex < string.length) {\n\
    \            val currentChar = string.charAt(startIndex)\n            if (currentIndex\
    \ < startIndex) {\n                prefixes += string.substring(startIndex, currentIndex)\n\
    \            }\n            if (currentChar == 'a') {\n                currentIndex\
    \ = startIndex + 1\n                prefixes += \"a\"\n            } else if (currentChar\
    \ == 'b') {\n                currentIndex = startIndex + 2\n                prefixes\
    \ += \"ab\"\n            } else {\n                currentIndex = startIndex +\
    \ 3\n                prefixes += string.substring(startIndex, currentIndex)\n\
    \            }\n            startIndex += 1\n        }\n\n        prefixes\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2ix0ehi.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val lst : List[String] = Nil\n        var str : String = string\n        while\
    \ (str.length > 1) {\n            str = str.replaceFirst(\"\\\\w+\", \" \").trim()\n\
    \            lst ::= str\n        }\n        lst ::= str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsx5_17j.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            lst ::= str\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member of List[String]\
    \ - did you mean lst.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsx5_17j.scala:14:12\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst ::= str\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member\
    \ of List[String] - did you mean lst.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Return empty list if string is null\n        if(string == null) Nil\n   \
    \     else { \n            // Create empty set that we'll fill in with prefixes\
    \ from string until we exhaust it\n            var prefixSet = new mutable.HashSet[String]();\n\
    \            // Create stack to hold current prefix\n            var stack = new\
    \ mutable.Stack[String]();\n            // Push string onto stack\n          \
    \  stack += string\n            while(stack.nonEmpty) {\n                // Pop\
    \ string off stack\n                val nextString = stack.pop()\n           \
    \     // Add string to set\n                prefixSet += nextString\n        \
    \        // Add all prefixes of string to stack\n                for(prefix <-\
    \ nextString.split(\"[\\\\W]\").flatMap(x => prefixSet))\n                   \
    \ stack += prefix\n            }\n            // Return prefix set\n         \
    \   prefixSet.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1n3yhs5r.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mvar\e[0m \e[36mprefixSet\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]();\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1n3yhs5r.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m            \e[33mvar\e[0m \e[36mstack\e[0m = \e[33mnew\e[0m mutable.Stack[\e\
    [35mString\e[0m]();\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ArrayBuffer.empty[String]\n        string match {\n \
    \           case \"\" => prefixes\n            case xs if xs.size < 4 => prefixes\n\
    \            case _ => {\n                for( x <- string.length until 4 ) {\n\
    \                    prefixes += string(0)\n                    string.replace(0,\
    \ x, \"\")\n                }\n                prefixes\n            }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyc2h8exu.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpyc2h8exu.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    string.replace(\e[31m0\e[0m, x, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence,\
    \ x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\
    \e[31m   |\e[0mmatch arguments ((\e[31m0\e[0m : Int), (x : Int), (\e[32m\"\"\e\
    [0m : String))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def recurse(s: String, acc: List[String]) : List[String] = \n        if (s.isEmpty)\
    \ acc\n        else recurse(s.tail, acc + s.head)\n        recurse(string, Nil)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpowag0cx0.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33melse\e[0m recurse(s.tail, acc + s.head)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ require(string.length > 1, \"Input string cannot be empty\")\n        // Return\
    \ empty list when empty string\n        if (string.length == 0) return Nil\n \
    \       val prefix = new mutable.ListBuffer[String]\n        var index = 0\n \
    \       // Iterate over all possible combination of prefix of string except last\n\
    \        while (index < string.length) {\n            val prefix1 = prefix.tail\n\
    \            val prefix2 = prefix.init :+ string\n            prefix += prefix1\
    \ :+ prefix2\n            index++\n        }\n        prefix.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb3syap4y.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            index++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb3syap4y.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mprefix\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string match {\n            case Nil => Nil\n            case x :: xs => allPrefixes(xs)\
    \ ::: List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1kjv5om.scala:9:17\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Nil\n\e[31m\e[31m  |\e[0m                 ^^^\e[0m\n\e[31m  |\e[0m      \
    \    Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m  |\e[0m  \
    \        Required: String\n\e[31m  |\e[0m\n\e[31m  |\e[0m          where:    Nil\
    \  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m  |\e[0m \
    \                   Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0m          pattern type is incompatible with\
    \ expected type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1kjv5om.scala:10:40\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => allPrefixes(xs) ::: List(x)\n\e[31m\e[31m   |\e[0m                \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \            Found:    (xs : List[Any])\n\e[31m   |\e[0m                     \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.split(\"\").reverse.foldLeft(List[String]()){ case (acc, s) =>\n    \
    \        if(s.head==string(0)) acc else acc + allPrefixes(s.tail)\n        }.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytcbrmhd.scala:9:47 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m(s.head==string(\e[31m0\e[0m))\
    \ acc \e[33melse\e[0m acc + allPrefixes(s.tail)\n\e[31m\e[31m  |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m  |\e[0mvalue + is not a\
    \ member of List[String], but could be made available as an extension method.\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m  |\e[0m\n\e[31m  |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m  |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m  |\e[0m\
    \  import math.Numeric.Implicits.infixNumericOps\n\e[31m  |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val str = new String(string.getBytes)\n        val len = string.length\n   \
    \     var pre = new mutable.ListBuffer[String]()\n        var i = len\n      \
    \  var cur = 0\n        while(i>0) {\n            pre.append(str.get(cur))\n \
    \           i -= 1\n            cur += 1\n        }\n        pre\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bfv_f8u.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mpre\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      def\
    \ prefixes(s: String, remainingPrefix: List[String], prefixLength : Int) : List[String]\
    \ = \n        if (s.isEmpty) {\n            remainingPrefix\n        } else {\n\
    \          prefixes(s.tail, remainingPrefix :+ s.head, prefixLength + 1) match\
    \ {\n            case Nil => remainingPrefix\n            case prefixes => prefixes\
    \ ++ prefixes(s.head, remainingPrefix, prefixLength)\n          }\n        }\n\
    \      prefixes(string, Nil, 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi5ciuru.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m          prefixes(s.tail, remainingPrefix\
    \ :+ s.head, prefixLength + \e[31m1\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                              Found:    Char\n\e[31m   |\e[0m\
    \                                              Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi5ciuru.scala:14:50 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m prefixes => prefixes ++ prefixes(s.head,\
    \ remainingPrefix, prefixLength)\n\e[31m\e[31m   |\e[0m                      \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    (Char, List[String],\
    \ Int)\n\e[31m   |\e[0m                                     Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.zipWithIndex.foldLeft[List[String]](Nil)(\n            (xs, z) => (if\
    \ (z._2 >= xs.size + 1) xs.toList else z._2.toList :: xs)\n        )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwzt1mn1_.scala:9:69 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            (\e[36mxs\e[0m, \e[36mz\e[0m) => (\e[33mif\e\
    [0m (z._2 >= xs.size + \e[31m1\e[0m) xs.toList \e[33melse\e[0m z._2.toList ::\
    \ xs)\n\e[31m\e[31m  |\e[0m                                                  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m              value toList is not\
    \ a member of Int - did you mean _2.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        val current = mutable.Stack[String]()\n\
    \        current.push(string)\n        while (!current.isEmpty) {\n          \
    \  val top = current.get\n            current -= top\n            prefixes +=\
    \ top\n        }\n        prefixes.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0cdf0hk.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx0cdf0hk.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcurrent\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.length == 1) List(string)\n        else string.combinations(string.length).filter(\
    \ _.forall(string.startsWith)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp596gee8m.scala:9:72 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33melse\e[0m string.combinations(string.length).filter(\
    \ _.forall(string.startsWith)).toList\n\e[31m\e[31m  |\e[0m                  \
    \                                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mstartsWith\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m  |\e[0m (x$0: String):\
    \ Boolean\n\e[31m  |\e[0m (x$0: String, x$1: Int): Boolean\n\e[31m  |\e[0mmatch\
    \ expected type Char => Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ArrayBuffer.empty[String]\n        def addPrefix(current\
    \ : String) = {\n            if(current.length >= string.length) prefixes += current\n\
    \            else {\n                var current = string\n                while(current.length\
    \ >= current.substring(0, current.length-1)) {\n                    current +=\
    \ current.substring(0, current.length-1)\n                    addPrefix(current)\n\
    \                }\n            }\n        }\n        addPrefix(string)\n    \
    \    prefixes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjhxxe02.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpnjhxxe02.scala:13:37 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mwhile\e[0m(current.length >= current.substring(\e\
    [31m0\e[0m, current.length-\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>=\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments (String)\n\e[31m\e[31m--\
    \ [E044] Cyclic Error: /tmp/tmpnjhxxe02.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    addPrefix(current)\n\e[31m\e[31m\
    \   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m              Overloaded\
    \ or recursive \e[33mmethod\e[0m \e[35maddPrefix\e[0m needs return type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def recurse(prefix : List[String]) : List[String] = {\n            prefix match\
    \ {\n                case Nil => Nil\n                case prefix :: tail => recurse(tail.map(x\
    \ => x + prefix)) ++ prefix\n            }\n        }\n        return recurse(Nil)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprfmvapme.scala:11:77\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m                \e[33mcase\e\
    [0m prefix :: tail => recurse(tail.map(x => x + prefix)) ++ prefix\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \    Found:    (prefix : String)\n\e[31m   |\e[0m                            \
    \              Required: IterableOnce[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (char <- string) {\n            if (string.length > 1)\n                allPrefixes(string\
    \ -> char).foreach(prefix += _)\n            else\n                prefix += char\n\
    \        }\n        prefix.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x2w1ot7.scala:11:28\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m                allPrefixes(string\
    \ -> char).foreach(prefix += _)\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found: \
    \   \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mChar\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                            Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x2w1ot7.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                prefix += char\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (char : Char)\n\e[31m   |\e[0m              \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val lengths = string.split(\"(?<=\\\\G.{1})\").map(_.length).toList\n      \
    \  val candidates = length :: lengths.dropRight(1)\n        val allPrefixes =\
    \ Seq.empty[String]\n        for (prefix <- candidates)\n            allPrefixes\
    \ ::= prefix.toString\n        allPrefixes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_elmg6k.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcandidates\e[0m = length\
    \ :: lengths.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m  |\e[0m                   \
    \      ^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: length\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_elmg6k.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            allPrefixes ::=\
    \ prefix.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue ::= is not a member of scala.collection.mutable.Seq[String] -\
    \ did you mean allPrefixes.:++?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_elmg6k.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        allPrefixes\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (allPrefixes\
    \ : scala.collection.mutable.Seq[String])\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var res = ListBuffer[String]()\n        var lastPrefix: String = \"\"\n    \
    \    for (c <- string) {\n            if (lastPrefix.length < c.length) {\n  \
    \              lastPrefix = c\n            }\n            res.append(lastPrefix)\n\
    \        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplrom3g01.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (lastPrefix.length < c.length)\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrom3g01.scala:12:29\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                lastPrefix =\
    \ c\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (c : Char)\n\e[31m   |\e[0m          \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      def\
    \ prefixesIter(list: List[String], prefix: List[String]): List[String] = {\n \
    \       if (list.isEmpty) return prefix\n        val newPrefix = prefix :+ list.head\n\
    \        prefixesIter(list.tail, newPrefix)\n      }\n      prefixesIter(string.split(''),\
    \ Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpajq6c8hm.scala:13:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      prefixesIter(string.split(''), Nil)\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    empty character literal\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpajq6c8hm.scala:13:37 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m      prefixesIter(string.split(''), Nil)\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \                  Not found: 'Nil\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        var currentPrefix: Option[String] = None\n\
    \        for(i <- 0 to string.length - 1) {\n            if(currentPrefix == None\
    \ || string(i) != currentPrefix.get) {\n                currentPrefix = Some(string(i))\n\
    \                prefixes ::= currentPrefix\n            }\n        }\n      \
    \  prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjjwy4l_r.scala:11:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(currentPrefix == None || string(i)\
    \ != currentPrefix.get) {\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjjwy4l_r.scala:12:43 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                currentPrefix = Some(string(i))\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    Char\n\e[31m   |\e[0m      \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjjwy4l_r.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                prefixes ::= currentPrefix\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.size == 0) List(string)\n        else {\n            val (prefixes,\
    \ remainder) = string.span(_.length > 1)\n            allPrefixes(remainder) ++\
    \ prefixes\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8goa4yhn.scala:10:54 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m (prefixes, remainder) = string.span(_.length\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     value length is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8goa4yhn.scala:11:38 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            allPrefixes(remainder) ++ prefixes\n\e[31m\e[31m   |\e[0m\
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                              Found:    (prefixes : String)\n\e[31m   |\e[0m\
    \                                      Required: IterableOnce[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.sliding(2).map(_.toList) match {\n            case Array(prefix, _*)\
    \ => prefix\n            case _ => throw new RuntimeException\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq21wmiwo.scala:9:38\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Array(prefix,\
    \ _*) => prefix\n\e[31m\e[31m  |\e[0m                                      ^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                      Found:    (prefix : T$1)\n\
    \e[31m  |\e[0m                                      Required: List[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val res = mutable.ListBuffer.empty[String]\n        for (i <- 0 until string.length){\n\
    \            for (j <- i until string.length){\n                val str = string.substring(i,\
    \ j).trim\n                if (str.isEmpty)\n                    continue\n  \
    \              else {\n                    res ++= str.split(\"\\\\s\").toList\n\
    \                }\n            }\n        }\n        res.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00thu51s.scala:8:18 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp00thu51s.scala:13:20 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                    continue\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < string.length) {\n            if (string(i) == string(i+1))\n         \
    \       prefixes += string(i)\n            else {\n                var j = i +\
    \ 1\n                while (j < string.length) {\n                    if (string(i)\
    \ == string(j)) {\n                        prefixes += string(i) \n          \
    \              break\n                    } else {\n                        j++\n\
    \                    }\n                }\n            }\n            i += 1\n\
    \        }\n        prefixes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpajo9adzl.scala:20:27 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        j++\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpajo9adzl.scala:8:23 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpajo9adzl.scala:18:24 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                        break\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        var currentPrefix = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            currentPrefix += string.charAt(i)\n\
    \            if (!(currentPrefix has prefix string.substring(0, i))) {\n     \
    \           prefixes ::= currentPrefix\n                currentPrefix = \"\"\n\
    \            }\n        }\n        prefixes ::= currentPrefix\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdyko6hip.scala:12:49 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (!(currentPrefix has prefix\
    \ string.substring(\e[31m0\e[0m, i))) {\n\e[31m\e[31m   |\e[0m               \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdyko6hip.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (!(currentPrefix has prefix\
    \ string.substring(\e[31m0\e[0m, i))) {\n\e[31m\e[31m   |\e[0m               \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value has is not a member of\
    \ String - did you mean String.chars?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdyko6hip.scala:12:36 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            \e[33mif\e[0m (!(currentPrefix has prefix string.substring(\e[31m0\e\
    [0m, i))) {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: prefix\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val stringList = string.split(\"\\\\W+\")\n        var newStringList = new ListBuffer[String]()\n\
    \        var currentWord = new String\n        var currentPrefix  = new String\n\
    \        for (word <- stringList) {\n            currentWord = word\n        \
    \    currentPrefix = \"\"\n            for (prefix <- currentWord.substring(0,\
    \ currentWord.length - 1).split(\"\\\\W+\")) {\n                currentPrefix\
    \ += \"\\\\W+\"\n            }\n            newStringList += currentPrefix\n \
    \       }\n        return newStringList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.allPrefixes$$anonfun$1(tmpj4hrwzbx.scala:15)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.allPrefixes(tmpj4hrwzbx.scala:19)\n\tat Problem$.main(tmpj4hrwzbx.scala:23)\n\
    \tat Problem.main(tmpj4hrwzbx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val result: List[String] = new ListBuffer[String]()\n\n        def recursivePrefixes(prefix:\
    \ String, remaining: String) : List[String] = {\n            if (remaining.nonEmpty)\
    \ {\n                result += prefix :: recursivePrefixes(prefix, remaining.tail)\n\
    \            }\n            result\n        }\n\n        recursivePrefixes(\"\"\
    , string)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3cviju32.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m  |\e[0m                     Required: List[String]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3cviju32.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                result += prefix :: recursivePrefixes(prefix,\
    \ remaining.tail)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      value += is not a member of List[String] - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def longestPrefix(prefix: String): String = {\n            if (string.length\
    \ >= prefix.length) {\n                string\n            } else {\n        \
    \        longestPrefix(prefix.substring(1))\n            }\n        }\n      \
    \  var longestPrefixes: List[String] = Nil\n        for (prefix <- longestPrefix(string.substring(0,\
    \ string.length-1))) {\n            longestPrefixes ::= prefix\n        }\n  \
    \      longestPrefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn21_a3ca.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            longestPrefixes ::= prefix\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.Buffer.empty[String]\n        for(i <- 0 until string.length){\n\
    \            prefixes += string.substring(0, i)\n        }\n        prefixes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpylwbbfok.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.isEmpty) return Nil\n        val current = string\n        val nextPrefixes\
    \ = allPrefixes(string.tail)\n        val prefixes = nextPrefixes ++ List(current)\n\
    \        prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20ovjgnj.scala:16)\n\tat Problem.main(tmp20ovjgnj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if(string.length == 0) List(string)\n        else allPrefixes(string.substring(0,\
    \ string.length - 1)) ++ List(string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdet80cuv.scala:12)\n\tat Problem.main(tmpdet80cuv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      def\
    \ prefixes(string : String, current : String, list : List[String], prev : List[String]):\
    \ List[String] = {\n        if (string.length == 0) list :: prev\n        else\
    \ {\n          prefixes(string , current + string , list ++ List(current) , list\
    \ ++ prev)\n        }\n      }\n      prefixes(string , \"\", Nil , Nil)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyf2zktd.scala:9:32\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mif\e[0m (string.length\
    \ == \e[31m0\e[0m) list :: prev\n\e[31m\e[31m  |\e[0m                        \
    \        ^^^^\e[0m\n\e[31m  |\e[0m                                Found:    (list\
    \ : List[String])\n\e[31m  |\e[0m                                Required: String\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes: List[String] = Nil\n        string match {\n            case Nil\
    \ => prefixes\n            case _ => {\n                val (smallest, longest)\
    \ = string.span(_.length < string.length)\n                prefixes = allPrefixes(smallest)\
    \ ++ allPrefixes(longest)\n            }\n        }\n        prefixes\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqr_7w7co.scala:10:17\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m Nil\
    \ => prefixes\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e\
    [0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:  \
    \  Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e\
    [0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqr_7w7co.scala:12:56\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e\
    [0m (smallest, longest) = string.span(_.length < string.length)\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqr_7w7co.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                prefixes = allPrefixes(smallest) ++ allPrefixes(longest)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val prefixes\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string :: allPrefixes(string.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.StringOps$.tail$extension(StringOps.scala:1208)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\
    \tat Problem$.allPrefixes(tmp6loyjj7s.scala:8)\n\tat Problem$.allPrefixes(tmp6loyjj7s."
  stdout: ''
  timestamp: 1660010390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.length == 0) {\n            Nil\n        } else {\n            val\
    \ prefixes = allPrefixes(string.substring(1))\n            val head = string.substring(0,\
    \ string.length-1)\n            if (prefixes.contains(head)) {\n             \
    \   prefixes :+ head\n            } else {\n                prefixes\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpag4o84ox.scala:22)\n\tat Problem.main(tmpag4o84ox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.splitIterator.mkString(\"\") //convert to iterator of chars then back\
    \ to string\n            .sliding(2) //create sliding windows of length 2\n  \
    \          .flatMap(p => p take 1) //take the first character from each sliding\
    \ window\n            .distinct  //remove duplicates\n            .filter(!_.isEmpty)\
    \ //filter empty strings\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7uxuhl5a.scala:8:15 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.splitIterator.mkString(\e[31m\"\"\e[0m)\
    \ \e[34m//convert to iterator of chars then back to string\e[0m\n\e[31m\e[31m\
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        value splitIterator\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result = Nil\n        var currentPrefixLength = 0\n        for(x <- string.toList)\n\
    \        {\n            currentPrefixLength = x.length\n            result = x\
    \ :: result\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpig0q3hg2.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            currentPrefixLength = x.length\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  value length is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpig0q3hg2.scala:13:21 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            result = x :: result\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    List[Char]\n\e[31m   |\e[0m                     Required: scala.collection.immutable.Nil.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixes(string : String, prefix : List[String], current : Int) : List[String]\
    \ = {\n            if (string.length <= current) {\n                prefix :+\
    \ string.substring(0, current)\n            } else {\n                prefix :+\
    \ string.substring(0, current)\n                allPrefixes(string.substring(current),\
    \ prefix, current + 1)\n            }\n        }\n        allPrefixes(string,\
    \ Nil, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7d3ybjg.scala:19)\n\tat Problem.main(tmpi7d3ybjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      def\
    \ findPrefixes(s: String, prefixes: List[String], prefixLength: Int): (List[String],\
    \ Int) = {\n        if (s.length < prefixLength) {\n          return (prefixes,\
    \ prefixLength)\n        }\n        val prefix = s.take(prefixLength).toList\n\
    \        val (prefixes, prefixLength) = findPrefixes(s.drop(prefixLength), prefixes\
    \ ::: prefix, prefixLength + 1)\n        (prefixes ::: prefix, prefixLength)\n\
    \      }\n      findPrefixes(string, Nil, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7ga2z7wa.scala:12:28 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = s.take(prefixLength).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mprefixLength\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7ga2z7wa.scala:13:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ (prefixes, prefixLength) = findPrefixes(s.drop(prefixLength), prefixes ::: prefix,\
    \ prefixLength + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m\
    \   |\e[0m             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7ga2z7wa.scala:13:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ (prefixes, prefixLength) = findPrefixes(s.drop(prefixLength), prefixes ::: prefix,\
    \ prefixLength + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \               Recursive \e[33mvalue\e[0m \e[35mprefixLength\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ga2z7wa.scala:13:74\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m (prefixes,\
    \ prefixLength) = findPrefixes(s.drop(prefixLength), prefixes ::: prefix, prefixLength\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                                     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    List[\e[1m\e[31mChar\e\
    [0m]\n\e[31m   |\e[0m                                                  Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic"
  stdout: ''
  timestamp: 1660010394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer[String]()\n        for(i <- string.length\
    \ to 0) {\n            prefixes += string.substring(0, i)\n        }\n       \
    \ prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxcrp8yt6.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.Queue[String]()\n        for(i <- 0 until string.length)\n\
    \            prefixes += string.substring(0, i)\n        prefixes.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1af4d24.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      var\
    \ prefixes: List[String] = Nil\n      for(i <- 0 until string.length) {\n    \
    \    prefixes = allPrefixesRec(string.substring(0, i), prefixes)\n      }\n  \
    \    prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_8w0kac.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        prefixes = allPrefixesRec(string.substring(\e\
    [31m0\e[0m, i), prefixes)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: allPrefixesRec\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = ListBuffer[String]()\n        var cur = string\n        while\
    \ (cur.length > 0) {\n            prefixes = prefixes :+ cur\n            cur\
    \ = cur.substring(1)\n        }\n        prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8zm1i4ze.scala:18)\n\tat Problem.main(tmp8zm1i4ze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.iterator.toList.foldLeft[List[String]](List[String]()){\n           \
    \ case (acc, c) => acc.map(s => (0, s, c)) :: acc.map(s => (1, s, c))\n      \
    \  }.tail.map(p => (p._3 + p._1, p._2, p._3)).sortBy(_._1).map(_._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpakdfg1wh.scala:9:29\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m (acc,\
    \ c) => acc.map(s => (\e[31m0\e[0m, s, c)) :: acc.map(s => (\e[31m1\e[0m, s, c))\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                             Found:    List[Object & Equals]\n\
    \e[31m  |\e[0m                             Required: List[String]\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpakdfg1wh.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        }.tail.map(p => (p._3 + p._1, p._2, p._3)).sortBy(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value _3 is not a member of String @uncheckedVariance\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpakdfg1wh.scala:10:40 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        }.tail.map(p => (p._3 + p._1, p._2, p._3)).sortBy(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^\e[0m\n\e[31m \
    \  |\e[0m                   value _2 is not a member of String @uncheckedVariance\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpakdfg1wh.scala:10:46 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        }.tail.map(p => (p._3 + p._1, p._2, p._3)).sortBy(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^\e[0m\n\e\
    [31m   |\e[0m                   value _3 is not a member of String @uncheckedVariance\n\
    \e[31m\e[31m-- Error: /tmp/tmpakdfg1wh.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        }.tail.map(p => (p._3 + p._1, p._2, p._3)).sortBy(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mDeprecatedFloatOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ match type Ordering[B] of p"
  stdout: ''
  timestamp: 1660010395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        for (length <- 1 to\
    \ string.length)\n            for (prefix <- string.take(length))\n          \
    \      prefixes += prefix\n        prefixes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51ls8r8p.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixes(string : String, prefix : List[String] = Nil) : List[String]\
    \ = prefix match {\n            case Nil => prefix :: Nil\n            case x\
    \ :: xs => allPrefixes(xs, prefix :+ x)\n        }\n        allPrefixes(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpblawevdd.scala:9:24\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Nil\
    \ => prefix :: Nil\n\e[31m\e[31m  |\e[0m                        ^^^^^^\e[0m\n\e\
    [31m  |\e[0m                        Found:    (prefix : List[String])\n\e[31m\
    \  |\e[0m                        Required: String\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpblawevdd.scala:10:40 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m x :: xs => allPrefixes(xs,\
    \ prefix :+ x)\n\e[31m\e[31m   |\e[0m                                        ^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (xs : List[String])\n\
    \e[31m   |\e[0m                                        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.MutableList[String]()\n        if (string.nonEmpty) {\n\
    \            val prefix = string.head\n            val tail = string.tail\n  \
    \          prefixes :+= prefix\n            for (s <- allPrefixes(tail)) {\n \
    \               prefixes :+= s\n            }\n        }\n        prefixes\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0t3o8_8o.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var output = List[String]()\n        var i = 0\n        var currentLength =\
    \ 0\n\n        while (i < string.length) {\n            if (string(i) == string(0))\
    \ {\n                currentLength = 1\n            } else {\n               \
    \ currentLength += 1\n            }\n            i += 1\n        }\n\n       \
    \ i <- 0 until currentLength\n        if (string(i) == string(0)) {\n        \
    \    output = output :+ string(i)\n        }\n        while (i < string.length)\
    \ {\n            if (string(i) == string(i+1)) {\n                i += 1\n   \
    \         } else {\n                output = output :+ string(i)\n           \
    \     i += 1\n            }\n        }\n        output\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp18scz719.scala:21:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        i <- \e[31m0\e[0m until currentLength\n\e[31m\e\
    [31m   |\e[0m          ^^\e[0m\n\e[31m   |\e[0m          end of statement expected\
    \ but '<-' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp18scz719.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            output = output :+\
    \ string(i)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Char\n\e[31m   |\e[0m\
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp18scz719.scala:29:41 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                output = output :+ string(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Char\n\e[31m   |\e[0m          \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.length == 0) List(\"\")\n        else {\n            // create mutable\
    \ list of prefixes\n            val prefixes = new mutable.MutableList[String]\n\
    \            prefixes.head :: allPrefixes(string.substring(1))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpemkor33q.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mprefixes\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until string.length)\
    \ {\n            val prefix = string.take(i)\n            if (string.length >\
    \ i) {\n                result.+=(prefix)\n                allPrefixes(string.drop(i))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpixbx7oda.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      def\
    \ allPrefixesAux(i: Int, strings: List[String], prefixes: List[String]) : List[String]\
    \ = {\n        if (strings.length < i)\n          allPrefixesAux(i + 1, strings,\
    \ prefixes :+ string.substring(0, i))\n        else\n          allPrefixesAux(i\
    \ + 1, strings :+ string.substring(0, i), prefixes)\n      }\n      allPrefixesAux(0\
    \ ,List(), List())\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.allPrefixesAux$1(tmppqmngtfk.scala:12)\n\tat Problem$.allPrefixes(tmppqmngtfk.scala:14)\n\
    \tat Problem$.main(tmppqmngtfk.scala:17)\n\tat Problem.main(tmppqmngtfk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        var index = string.length\n      \
    \  while (index > 0) {\n            prefixes ::= string.substring(0, index)\n\
    \            index = index - 1\n        }\n        prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.takeWhile(_ != 'a').toList +: allPrefixes(string.dropWhile(_ != 'a'))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8kia_fr.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        string.takeWhile(_ !=\
    \ \e[31m'a'\e[0m).toList +: allPrefixes(string.dropWhile(_ != \e[31m'a'\e[0m))\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m        Found:    List[Char]\n\e[31m  |\e[0m        Required: String\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixesHelper(list: List[String], acc: List[String]) : List[String]\
    \ = {\n            list.map {\n                x => allPrefixesHelper(list.remove(x),\
    \ x :: acc)\n            } ++ acc\n        }\n        allPrefixesHelper(string.split[String](\"\
    \"), List.empty[String])\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3r06l1k4.scala:10:44 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[36mx\e[0m => allPrefixesHelper(list.remove(x),\
    \ x :: acc)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of List[String] - did you mean\
    \ list.reduce?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3r06l1k4.scala:13:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        allPrefixesHelper(string.split[\e\
    [35mString\e[0m](\e[31m\"\"\e[0m), List.empty[\e[35mString\e[0m])\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch type\
    \ arguments [String] and arguments ((\e[32m\"\"\e[0m : String))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Base case\n        if(string.length < 2) return Nil\n        // Recursive\
    \ case\n        var prefixes = Nil\n        var i = 0\n        while(i < string.length)\
    \ {\n            // Add character at i to list of prefixes from i to end of string\n\
    \            prefixes = prefixes :+ string.substring(i, string.length)\n     \
    \       // Increment i until you pass the end of the string\n            i = i\
    \ + 1 // Start from new position\n        }\n        // Return list of prefixes\n\
    \        return prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjpkhv44n.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            prefixes = prefixes\
    \ :+ string.substring(i, string.length)\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    List[String]\n\e[31m   |\e[0m              \
    \         Required: scala.collection.immutable.Nil.type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val longest = string.tail\n        val shortest = string.head\n        val longestPrefix\
    \ = longest.takeWhile(c => shortest == c).toList\n        val shortestPrefix =\
    \ shortest.takeWhile(c => longest == c).toList\n        val prefixes = longestPrefix.concat(shortestPrefix)\n\
    \        prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpegb_m5iy.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mshortestPrefix\e[0m = shortest.takeWhile(\e\
    [36mc\e[0m => longest == c).toList\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \  value takeWhile is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpegb_m5iy.scala:13:8 ---------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        prefixes\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    (prefixes : List[Char])\n\e[31m   |\e[0m        Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val result = new mutable.ListBuffer[String]()\n        val prefixes = string.foldLeft(\"\
    \")( (s, c) => s + c).split(\"\").reverse\n        for(prefix <- prefixes) yield\
    \ prefix +: result\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzt2xhx8.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmprzt2xhx8.scala:10:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(prefix <- prefixes) \e[33myield\e\
    [0m prefix +: result\n\e[31m\e[31m   |\e[0m                                  \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // Base case: empty string\n        if (string.length == 0) return Nil\n   \
    \     // Recursive case: not empty\n        // Choose starting point based on\
    \ length\n        var current = string(0)\n        val result : List[String] =\
    \ Nil\n        for (c <- string.tail) {\n            if (current.length < c.length)\
    \ {\n                result = result ::: List(current)\n                current\
    \ = c\n            } else {\n                current = c\n            }\n    \
    \    }\n        result = result ::: List(current)\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1uos5gu7.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (current.length < c.length)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value length is not a member of Char\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp1uos5gu7.scala:16:25 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m                result = result ::: List(current)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1uos5gu7.scala:22:17 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        result = result ::: List(current)\n\e[31m\e[31m  \
    \ |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           Found:    List[Matchable]\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ require(string != null , \"Error: Null argument\")\n        val length = string.length\n\
    \        val prefixes = mutable.ListBuffer[String]()\n        var current = \"\
    \"\n        for (i<-0 until length) {\n            if (string.charAt(i) == '_')\n\
    \                current += string.charAt(i)\n            else {\n           \
    \     prefixes += current\n                current = string.charAt(i)\n      \
    \      }\n        }\n        prefixes += current\n        prefixes\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfiwcwz8_.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfiwcwz8_.scala:17:39 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                current = string.charAt(i)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    Char\n\e[31m   |\e[0m                   \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      var\
    \ prefixes = List[String]()\n      var cur = string\n\n      while(cur.length\
    \ > 0) {\n          val p = cur.takeWhile(_ != \" \")\n          prefixes = p\
    \ :: prefixes\n          cur = cur.drop(p.length)\n      }\n      prefixes\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu1xl56kc.scala:12:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m          \e[33mval\e[0m \e[36mp\e[0m = cur.takeWhile(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new mutable.LinkedListBuffer[String]\n        var current = 0\n\
    \        string.foreach(x => {\n            if (x == string.charAt(current)) current\
    \ += 1\n            else prefix.append(string.charAt(current))\n        })\n \
    \       if (current == 0) prefix.reverse\n        else allPrefixes(prefix.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4onsfcup.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = \e[33mnew\e\
    [0m mutable.LinkedListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m  |\e[0m        \
    \                 ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result = new collection.mutable.ListBuffer[String]()\n        // Traverse\
    \ string from beginning\n        var index = 0\n        var nextSubStringLength\
    \ = string.length\n        while (index < nextSubStringLength) {\n           \
    \ val currentSubString = string.substring(index, nextSubStringLength)\n      \
    \      // Find all prefixes of current substring\n            // >>> allPrefixes(\"\
    abc\")\n            // (List[String](\"a\", \"ab\", \"abc\"))\n            //\
    \ >>> allPrefixes(\"ab\")\n            // (List[String](\"a\", \"ab\"))\n    \
    \        // >>> allPrefixes(\"b\")\n            // (List[String](\"b\"))\n   \
    \         var prefixes = findPrefixes(currentSubString)\n            // If this\
    \ prefix is not part of result yet, add it\n            if (prefixes == null)\
    \ prefixes = findPrefixes(\"\")\n            result += prefixes\n            //\
    \ Move forward the index\n            index += 1\n            // Move forward\
    \ the length of the string\n            nextSubStringLength += nextSubStringLength\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp33x7l8ob.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e[36mprefixes\e[0m = findPrefixes(currentSubString)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: findPrefixes\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp33x7l8ob.scala:23:45 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (prefixes == \e[31mnull\e[0m)\
    \ prefixes = findPrefixes(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                    Not found: findPrefixes\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010399
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      var\
    \ result: List[String] = Nil\n      var n = string.length\n      while ( n !=\
    \ 0 ) {\n        result = (string take (n)) :: result\n        n = math.min(n,\
    \ string.length)\n      }\n      result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val r = new mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        if (len == 0) r\n        else {\n            allPrefixes(string.substring(0,len-1),\
    \ r)\n            r += string.substring(0,len-1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkeuj_cd.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphkeuj_cd.scala:12:24 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            allPrefixes(string.substring(\e[31m0\e[0m,len-\e\
    [31m1\e[0m), r)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    \e[1m\e[31m(\e[0mString\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mNothing\e[0m\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        for ((prefix, s) <- string.zipWithIndex)\
    \ {\n            if (s == 0) prefixes ::= prefix\n            else allPrefixes(prefix.substring(1)\
    \ + s)\n        }\n        return prefixes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpturkt9s3.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (s == \e[31m0\e[0m) prefixes\
    \ ::= prefix\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpturkt9s3.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m allPrefixes(prefix.substring(\e\
    [31m1\e[0m) + s)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value substring is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result : List[String] = Nil\n        var minIndex = 0\n        var minLength\
    \ = string.length\n        var maxIndex = minLength\n        var maxLength = string.length\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var iEnd = 0\n\
    \        var jEnd = 0\n        var kEnd = 0\n\n        while(i < minLength) {\n\
    \            if(string.charAt(i) == string.charAt(minIndex)) {\n             \
    \   minIndex = i + 1\n                minLength = minIndex + 1\n            }\
    \ else if(string.charAt(i) == string.charAt(maxIndex)) {\n                maxIndex\
    \ = i - 1\n                maxLength = maxIndex - 1\n            }\n         \
    \   i += 1\n        }\n\n        while(j < maxLength) {\n            if(string.charAt(j)\
    \ == string.charAt(minIndex)) {\n                minIndex = j + 1\n          \
    \      minLength = minIndex + 1\n            } else if(string.charAt(j) == string.charAt(maxIndex))\
    \ {\n                maxIndex = j - 1\n                maxLength = maxIndex -\
    \ 1\n            }\n            j += 1\n        }\n\n        while(k <= minIndex)\
    \ {\n            result::= string.substring(k, minIndex)\n            k += 1\n\
    \        }\n\n        while(iEnd < minLength) {\n            if(string.charAt(iEnd)\
    \ == string.charAt(minIndex)) {\n                minIndex = iEnd + 1\n       \
    \         minLength = minIndex + 1\n            } else if(string.charAt(iEnd)\
    \ == string.charAt(maxIndex)) {\n                maxIndex = iEnd - 1\n       \
    \         maxLength = maxIndex - 1\n            }\n            iEnd += 1\n   \
    \     }\n\n        while(jEnd < maxLength) {\n            if(string.charAt(jEnd)\
    \ == string.charAt(minIndex)) {\n                minIndex = jEnd + 1\n       \
    \         minLength = minIndex + 1\n            } else if(string.charAt(jEnd)\
    \ == string.charAt(maxIndex)) {\n                maxIndex = jEnd - 1\n       \
    \         maxLength = maxIndex - 1\n            }\n            jEnd += 1\n   \
    \     }\n\n        while(k <= minIndex) {\n            result::= string.substring(k,\
    \ minIndex)\n            k += 1\n        }\n\n        while(iEnd < minLength)\
    \ {\n            if(string.charAt(iEnd) == string.charAt(minIndex)) {\n      \
    \          minIndex = iEnd + 1\n                minLength = minIndex + 1\n   \
    \         } else if(string.charAt(iEnd) == string.charAt(maxIndex)) {\n      \
    \          maxIndex = iEnd - 1\n                maxLength = maxIndex - 1\n   \
    \         }\n            iEnd += 1\n        }\n\n        while(jEnd < maxLength)\
    \ {\n            if(string.charAt(jEnd) == string.charAt(minIndex)) {\n      \
    \          minIndex = jEnd + 1\n                minLength = minIndex + 1\n   \
    \         } else if(string.charAt(jEnd) == string.charAt(maxIndex)) {\n      \
    \          maxIndex = jEnd - 1\n                maxLength = maxIndex - 1\n   \
    \         }\n            jEnd += 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmparv1esmc.scala:85:8\
    \ ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m        \e[33mwhile\e[0m(jEnd\
    \ < maxLength) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\e[31m86 |\e\
    [0m            \e[33mif\e[0m(string.charAt(jEnd) == string.charAt(minIndex)) {\n\
    \e[31m87 |\e[0m                minIndex = jEnd + \e[31m1\e[0m\n\e[31m88 |\e[0m\
    \                minLength = minIndex + \e[31m1\e[0m\n\e[31m89 |\e[0m        \
    \    } \e[33melse\e[0m \e[33mif\e[0m(string.charAt(jEnd) == string.charAt(maxIndex))\
    \ {\n\e[31m90 |\e[0m                maxIndex = jEnd - \e[31m1\e[0m\n\e[31m91 |\e\
    [0m                maxLength = maxIndex - \e[31m1\e[0m\n\e[31m92 |\e[0m      \
    \      }\n\e[31m93 |\e[0m            jEnd += \e[31m1\e[0m\n\e[31m94 |\e[0m   \
    \     }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        var start = 0\n\n        while(start\
    \ < string.length){\n            val end = string.indexOf(\"_\", start)\n    \
    \        prefix = string.substring(start, end+1)\n            prefixes ::= prefix\n\
    \            start = end + 1\n        }\n        return prefixes\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7akqjjak.scala:13:12 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            prefix = string.substring(start, end+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Not found: prefix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7akqjjak.scala:14:21\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            prefixes ::=\
    \ prefix\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ ::= is not a member of List[String] - did you mean List[String].::?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7akqjjak.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            prefixes ::= prefix\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: prefix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       string.substrings().map(_.toString).reverse.takeWhile(_.length\
    \ >= string.length).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiyceg11c.scala:8:14 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m       string.substrings().map(_.toString).reverse.takeWhile(_.length\
    \ >= string.length).reverse\n\e[31m\e[31m  |\e[0m       ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue substrings is not a member of String - did you mean string.substring?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val longestPrefixList = longestPrefix(string, \"\", \"\")\n        val longestPrefixListReversed\
    \ = longestPrefix(string, \"\", \"\").reverse\n        longestPrefixList ++ longestPrefixListReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3n_biunh.scala:8:32 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlongestPrefixList\e[0m =\
    \ longestPrefix(string, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m\
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m          \
    \                      Not found: longestPrefix\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3n_biunh.scala:9:40 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mlongestPrefixListReversed\e\
    [0m = longestPrefix(string, \e[31m\"\"\e[0m, \e[31m\"\"\e[0m).reverse\n\e[31m\e\
    [31m  |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                                        Not found: longestPrefix\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      val\
    \ (shortest, longest) = (string.length, string.length)\n      if (shortest > longest)\
    \ {\n        val r = new scala.collection.mutable.StringBuilder(string)\n    \
    \    for(i <- 0 until shortest) r.append(string.charAt(i))\n        allPrefixes(r.toString)\n\
    \      } else {\n        for(i <- 0 until longest) if(string.charAt(i) == string.charAt(longest))\
    \ longest = i\n        for(i <- 0 until longest) if(string.charAt(i) != string.charAt(longest))\
    \ result +=  string.charAt(i)\n        result\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3fmvkgw2.scala:14:89 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until longest)\
    \ \e[33mif\e[0m(string.charAt(i) == string.charAt(longest)) longest = i\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                   Reassignment to val longest\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3fmvkgw2.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until longest)\
    \ \e[33mif\e[0m(string.charAt(i) != string.charAt(longest)) result +=  string.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                Not found: result\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3fmvkgw2.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val result = new mutable.ArrayBuffer[String]()\n        var i = 0\n        val\
    \ len = string.length\n        while (i < len) {\n            if (string.charAt(i)\
    \ == 'a') {\n                result.add(\"a\")\n            }\n            if\
    \ (string.charAt(i) == 'b') {\n                result.add(\"ab\")\n          \
    \  }\n            if (string.charAt(i) == 'c') {\n                result.add(\"\
    abc\")\n            }\n            i += 1\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovw0dtbd.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefix = new mutable.ListBuffer[String]()\n        var start = 0\n     \
    \   var end = string.length - 1\n        while(start <= end) {\n            prefix\
    \ += string.substring(start, end + 1).trim\n            end -= 1\n           \
    \ start += 1\n        }\n        prefix.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54idxqoj.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mprefix\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = mutable.ListBuffer.empty[String]\n        for (char <- string)\
    \ {\n            prefixes += char\n        }\n        prefixes\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbn6slvu.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var list : List[String] = Nil\n        var current = \"\"\n        var i = 0\n\
    \        var j = string.length()\n\n        while (i <= j) {\n            current\
    \ = string.substring(i, j)\n            list = list ::: List(current)\n      \
    \      i = j\n            j -= 1\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelgn0gjf.scala:22)\n\tat Problem.main(tmpelgn0gjf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.tails.flatMap { n => allPrefixes(n) ++ n }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoczqqlrs.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        string.tails.flatMap\
    \ { \e[36mn\e[0m => allPrefixes(n) ++ n }\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m        Found:    Iterator[Matchable]\n\e[31m  |\e[0m     \
    \   Required: List[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ArrayBuffer.empty[String]\n        // get longest prefix\
    \ of the string \n        // longest is prefix of string without its first character\n\
    \        val longestPrefix = string.indexOfPrefix(string.substring(1))\n     \
    \   // loop over all prefixes of the string \n        // longest prefix is the\
    \ prefix of string without first character\n        for (i <- 0 until longestPrefix)\
    \ {\n            // add string without its first character to the list prefixes\n\
    \            prefixes += string.substring(0,i)\n        }\n        // return list\
    \ of all prefixes\n        return prefixes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptk845u5y.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptk845u5y.scala:11:35 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlongestPrefix\e[0m = string.indexOfPrefix(string.substring(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value indexOfPrefix is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = (string split \"\").toList\n        if (prefixes.size == 1) {\n\
    \            List(prefixes.head)\n        } else {\n            var result: List[String]\
    \ = Nil\n            prefixes foreach {prefix =>\n                for {prefix\
    \ <- allPrefixes(string.substring(0,prefix.length))}\n                result +=\
    \ prefix\n            }\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpouh3i_va.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result += prefix\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[String] - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val minSize = Math.min(string.length, 3).toInt\n        val suffixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string.tail.trim\n        while(current != \"\") {\n  \
    \          suffixes += current\n            current = current.tail.trim\n    \
    \    }\n        suffixes.reverse.take(minSize).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2wpc7w1.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36msuffixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      var\
    \ prefixes = Nil\n      string match {\n        case prefix +: s => prefixes =\
    \ prefixes :+ prefix\n        case x => prefixes = prefixes :+ x\n      }\n  \
    \    prefixes.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpodxtrjil.scala:10:39\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mcase\e[0m prefix\
    \ +: s => prefixes = prefixes :+ prefix\n\e[31m\e[31m   |\e[0m               \
    \                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \               Found:    List[Any]\n\e[31m   |\e[0m                         \
    \  Required: scala.collection.immutable.Nil.type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpodxtrjil.scala:11:29 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mcase\e[0m x => prefixes = prefixes :+ x\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Found:    List[String]\n\e[31m   |\e[0m  \
    \                         Required: scala.collection.immutable.Nil.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new mutable.ListBuffer[String]()\n        var index = string.length\
    \ - 1\n        while(index >= 0) {\n            prefix.append(string.charAt(index))\n\
    \            index--\n        }\n        prefix.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpksra573m.scala:12:19 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            index--\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpksra573m.scala:8:25\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mprefix\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var currLen = 0\n \
    \       for(letter <- string){\n            if(letter == '\\0'){\n           \
    \     prefixes += string.substring(1, currLen)\n                currLen = 1\n\
    \            }\n            else currLen += 1\n        }\n        prefixes +=\
    \ string.substring(1, currLen)\n        prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo_3anpck.scala:11:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(letter == \e[31m'\\0'\e[0m){\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \        octal escape literals are unsupported: use \\u0000 instead\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo_3anpck.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def addPrefix(prefix : List[String], string : List[String]) : List[String] =\
    \ {\n            if (string.length == prefix.length) prefix :+ string(0)\n   \
    \         else {\n                val newPrefix = prefix :+ string(0)\n      \
    \          val newString = string.drop(1)\n                addPrefix(newPrefix,\
    \ newString)\n            }\n        }\n        val prefixes = mutable.Stack[List[String]]()\n\
    \        addPrefix(prefixes, List())(prefixes, string)\n        prefixes.toList.reverse.map(_.mkString).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqq3j8npm.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Stack[\e\
    [35mList\e[0m[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqq3j8npm.scala:17:36\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        addPrefix(prefixes, List())(prefixes,\
    \ string)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (Nothing, String)\n\
    \e[31m   |\e[0m                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val charArray = string.chars\n        val prefixArray = charArray.sliding(2)\n\
    \        val result = new collection.mutable.ArrayList[String]()\n        for\
    \ (prefix <- prefixArray) {\n            val prefix = prefix.mkString\n      \
    \      result.add(prefix)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdc4wme0.scala:9:36 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprefixArray\e[0m = charArray.sliding(\e\
    [31m2\e[0m)\n\e[31m\e[31m  |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value sliding is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdc4wme0.scala:10:44 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m collection.mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \            type ArrayList is not a member of scala.collection.mutable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var current = string\n\
    \        while (current != \"\") {\n            current :: prefixes\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3xdplj6.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val stack = new mutable.Stack[String]()\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until string.length) {\n            for (prefix <- 0 until\
    \ string.length) {\n                stack += (string(prefix) + (if (i < (prefix\
    \ - 1)) \",\" else \"\"))\n            }\n            if (stack.size == 0) {\n\
    \                result += stack\n                stack = new mutable.Stack[String]()\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppapffbh0.scala:8:24 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                 \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppapffbh0.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppapffbh0.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                stack = \e[33mnew\e[0m mutable.Stack[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        string.split(\"\").foreach {\n      \
    \      char =>\n                prefixes ::= string\n        }\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkodiugw.scala:16)\n\tat Problem.main(tmpdkodiugw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = new mutable.ListBuffer[String]\n        var currentPrefix : String\
    \ = \"\"\n        for(c <- string){\n            currentPrefix += c\n        \
    \    if(currentPrefix != \"\") {\n                prefixes += currentPrefix\n\
    \            }\n        }\n        prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3szor9u.scala:8:27 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mprefixes\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m  |\e[0m              \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                           Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def recurse(string : String, prefix : Option[String] = Some(string)) : List[String]\
    \ =\n            if (string.length <= 0) prefix else recurse(string.reverse, prefix\
    \ :+ string.reverse.reverse)\n        recurse(string)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfu3ehij.scala:9:36\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (string.length\
    \ <= \e[31m0\e[0m) prefix \e[33melse\e[0m recurse(string.reverse, prefix :+ string.reverse.reverse)\n\
    \e[31m\e[31m  |\e[0m                                    ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                                    Found:    (prefix : Option[String])\n\e\
    [31m  |\e[0m                                    Required: List[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfu3ehij.scala:9:79 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (string.length <= \e[31m0\e\
    [0m) prefix \e[33melse\e[0m recurse(string.reverse, prefix :+ string.reverse.reverse)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \               ^^^^^^^^^\e[0m\n\e[31m  |\e[0m                               \
    \ value :+ is not a member of Option[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.MutableList[String]()\n        if (string.size == 0)\n\
    \            prefixes\n        else\n            for (i <- 0 until string.length)\n\
    \                allPrefixes(string takeWhile {\n                    charAt =>\
    \ string.charAt(i) != charAt\n                })\n                prefixes +=\
    \ string\n                prefixes\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp299oir5j.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp299oir5j.scala:12:12 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until string.length)\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ Unit\n\e[31m   |\e[0m            Required: List[String]\n\e[31m13 |\e[0m   \
    \             allPrefixes(string takeWhile {\n\e[31m14 |\e[0m                \
    \    \e[36mcharAt\e[0m => string.charAt(i) != charAt\n\e[31m15 |\e[0m        \
    \        })\n\e[31m16 |\e[0m                prefixes += string\n\e[31m17 |\e[0m\
    \                prefixes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = new ArrayBuffer[String]()\n        var longestIndex = 0\n   \
    \     for ((index, char) <- string.span(_ == 'a')) {\n            if (index >\
    \ longestIndex) {\n                prefixes ++= string.getChars(longestIndex,\
    \ index).mkString(\"\")\n                longestIndex = index\n            }\n\
    \        }\n        if (longestIndex < string.length) prefixes ++= string.getChars(longestIndex,\
    \ string.length).mkString(\"\")\n        prefixes ++= string.getChars(longestIndex,\
    \ string.length).mkString(\"\")\n        return prefixes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq7owy167.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m ((index, char) <- string.span(_\
    \ == \e[31m'a'\e[0m)) {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value withFilter is not a member of (String,\
    \ String)\n\e[31m\e[31m-- Error: /tmp/tmpq7owy167.scala:16:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (longestIndex < string.length)\
    \ prefixes ++= string.getChars(longestIndex, string.length).mkString(\e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                                \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnot\
    \ enough arguments for \e[33mmethod\e[0m \e[35mgetChars\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m: (x$0: Int, x$1: Int, x$2: Array[Char], x$3: Int): Unit\n\
    \e[31m\e[31m-- Error: /tmp/tmpq7owy167.scala:17:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        prefixes ++= string.getChars(longestIndex, string.length).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnot enough arguments for \e[33mmethod\e[0m \e[35mgetChars\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (x$0: Int, x$1: Int, x$2: Array[Char],\
    \ x$3: Int): Unit\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7owy167.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m prefixes\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m     Found:\
    \    (prefixes : scala.collection.mutable.ArrayBuffer[String])\n\e[31m   |\e[0m\
    \     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new scala.collection.mutable.ArrayList[String]()\n        var index\
    \ = 0\n        while(index < string.length){\n            if(string.charAt(index)\
    \ != string.charAt(index - 1)){\n                prefix.append(string.substring(index,index+1))\n\
    \                index += 1\n            }\n            else{\n              \
    \  index += 1\n            }\n        }\n        if(string.charAt(string.length-1)\
    \ == string.charAt(0)){\n            prefix.append(string.substring(0,string.length-1))\n\
    \        }\n        prefix\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9a05ewzt.scala:8:50 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = \e[33mnew\e\
    [0m scala.collection.mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e\
    [0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                type ArrayList is not a member of scala.collection.mutable\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val len = string.length\n        val prefix = new ListBuffer[String]()\n   \
    \     var start = 0\n        var pos = -1\n        while(pos < len) {\n      \
    \      pos = string.indexOf('a',pos)\n            while (pos < len && string((pos+1))\
    \ == 'a') { \n                prefix += string((pos+1))\n                pos =\
    \ string.indexOf('a',pos+1)\n            }\n            pos = string.lastIndexOf('a',pos)\n\
    \            while (pos > start && string((pos-1)) == 'a') { \n              \
    \  prefix += string((pos-1))\n                pos = string.lastIndexOf('a',pos-1)\n\
    \            }\n            pos = string.lastIndexOf('a',len)\n            while\
    \ (pos > start && string((pos-1)) == 'a') { \n                prefix += string((pos-1))\n\
    \                pos = string.lastIndexOf('a',pos-1)\n            }\n        \
    \    pos += 1\n        }\n        prefix.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdcfshcue.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                prefix += string((pos+\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Char\n\e[31m   |\e[0m\
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdcfshcue.scala:20:32 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                prefix += string((pos-\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Found:    Char\n\e[31m   |\e[0m            \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdcfshcue.scala:25:32 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                prefix += string((pos-\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \               Found:    Char\n\e[31m   |\e[0m                          Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixes(prefix: String, strings: List[String]): List[String] = {\n \
    \           if (strings.length <= 1) \n                return string::prefix\n\
    \            else\n                allPrefixes(prefix :+ strings.last, strings.dropRight(1));\n\
    \        }\n        allPrefixes(\"\", List(string))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphp6fd6_u.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mreturn\e[0m string::prefix\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value :: is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphp6fd6_u.scala:12:46 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                allPrefixes(prefix :+ strings.last, strings.dropRight(\e\
    [31m1\e[0m));\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    String\n\e\
    [31m   |\e[0m                                      Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.size.toList.flatMap(x => string.substring(x).split(\"\").toList).toList.map(x\
    \ => x + x)\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3we3hv8t.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.size.toList.flatMap(\e[36mx\e[0m => string.substring(x).split(\e\
    [31m\"\"\e[0m).toList).toList.map(\e[36mx\e[0m => x + x)\n\e[31m\e[31m  |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        value toList is not a\
    \ member of Int - did you mean Int.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var list : List[String] = Nil\n        var index = 0\n        while ( index\
    \ < string.length ) {\n            list = list :+ string.substring(0,index) \n\
    \            index = index + 1\n        }\n        return list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_r2g0nmo.scala:18)\n\tat Problem.main(tmp_r2g0nmo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.length == 1) {\n            List(string)\n        } else {\n    \
    \        val list = new mutable.ListBuffer[String]()\n            for (x <- allPrefixes(string.substring(0,\
    \ string.length - 1)))\n                list += x + \"|\" + string\n         \
    \   list += string\n            list.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplgftihrx.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixes(\"\", string,\
    \ prefixes)\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpj6jhvk.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbpj6jhvk.scala:9:20 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        allPrefixes(\e[31m\"\"\e[0m, string, prefixes)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                    Found:    (String, String, Nothing)\n\e[31m  |\e[0m   \
    \                 Required: String\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.map { i =>\n            string = i\n            i +: allPrefixes(string).reverse\n\
    \        }.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6lf3a7h.scala:9:21\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            string = i\n\e[31m\e\
    [31m  |\e[0m                     ^\e[0m\n\e[31m  |\e[0m                     Found:\
    \    (i : Char)\n\e[31m  |\e[0m                     Required: String\n\e[31m \
    \ |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val strs = mutable.ListBuffer.empty[String]\n        for(x <- string){\n   \
    \         strs += x\n        }\n        var prefixes = mutable.ListBuffer.empty[String]\n\
    \        var prefix = \"\"\n        for(x <- strs){\n            if(x.length ==\
    \ 1){\n                prefix += x\n            }else{\n                if(x.startsWith(prefix)){\n\
    \                    prefixes += prefix\n                }\n                prefix\
    \ = x\n            }\n        }\n        prefixes += prefix\n        return prefixes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14zcm4xu.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mstrs\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp14zcm4xu.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = ListBuffer[String]()\n        var lastChar = string(0)\n    \
    \    for ( char <- string) {\n            if (char == lastChar) {\n          \
    \      prefixes += char\n            } else {\n                prefixes += lastChar\n\
    \                prefixes += char\n                lastChar = char\n         \
    \   }\n        }\n        prefixes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau0uefkl.scala:12:28\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                prefixes += char\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          Found:    (char : Char)\n\e[31m   |\e[0m          \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpau0uefkl.scala:14:28 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                prefixes += lastChar\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (lastChar : Char)\n\e[31m   |\e[0m                            Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau0uefkl.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                prefixes += char\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          Found:    (char : Char)\n\e[31m   |\e[0m          \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        var current = string\n        while(current\
    \ != \"\") {\n            prefixes = prefixes ::: ListBuffer.apply(current)\n\
    \            current = current.substring(1)\n        }\n        prefixes.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamuiie_t.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            prefixes = prefixes ::: ListBuffer.apply(current)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ::: is not a member of scala.collection.mutable.ListBuffer[String]\
    \ - did you mean scala.collection.mutable.ListBuffer[String].++:?\n1 error found\n"
  stdout: ''
  timestamp: 1660010420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.foldLeft(List.empty[String]){\n            case (prefix, str) =>\n  \
    \              val prefix = prefix ++ List(str)\n                if (prefix.length\
    \ == str.length) prefix\n                else allPrefixes(str)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcujux5o_.scala:10:29 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mval\e[0m \e[36mprefix\e[0m = prefix\
    \ ++ List(str)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0m                             Recursive \e[33mvalue\e[0m \e[35mprefix\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcujux5o_.scala:12:33\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33melse\e\
    [0m allPrefixes(str)\n\e[31m\e[31m   |\e[0m                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (str : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val (prefixes, suffix) = string.span(_.nonEmpty)\n        val reversedSuffix\
    \ = (suffix.reverse)\n        val reversedPrefixes = prefixes.reverse\n      \
    \  (reversedPrefixes :: reversedSuffix).filterNot(_ == \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkfs6970y.scala:8:47 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m (prefixes, suffix) = string.span(_.nonEmpty)\n\
    \e[31m\e[31m  |\e[0m                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                    value nonEmpty is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkfs6970y.scala:11:26\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        (reversedPrefixes\
    \ :: reversedSuffix).filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             value :: is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ require(string != null)\n        require(string != \"\", \"Prefix is undefined\"\
    )\n        val chars = string.toCharArray\n        var i = 0\n        var result:\
    \ List[String] = Nil\n        val stringLen = string.length\n        while (i\
    \ < stringLen) {\n            val prefix = string(i).asInstanceOf[Char]\n    \
    \        val prefixString = string.substring(0, i).toString.asInstanceOf[String]\n\
    \            require(prefix != prefix, \"String cannot have a prefix of itself\"\
    )\n            require(prefix != chars(0), \"String cannot have an empty prefix\"\
    )\n            if (i < stringLen - 1) {\n                val nextChar = chars(i\
    \ + 1).asInstanceOf[Char]\n                if (prefix != nextChar) {\n       \
    \             result += prefix :: prefixString\n                }\n          \
    \  }\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphcu2f0np.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    result += prefix :: prefixString\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphcu2f0np.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    result += prefix :: prefixString\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value :: is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.sliding(1,1).flatMap(_+_).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbnbyidim.scala:8:36 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.sliding(\e[31m1\e[0m,\e[31m1\e[0m).flatMap(_+_).toList\n\
    \e[31m\e[31m  |\e[0m                                    ^^^\e[0m\n\e[31m  |\e\
    [0m                                   Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.zipWithIndex.flatMap {\n            case (prefix, index) => allPrefixes(prefix.takeRight(index+1))\n\
    \            case _ => Nil\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntboro6f.scala:9:55 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m (prefix, index) => allPrefixes(prefix.takeRight(index+\e\
    [31m1\e[0m))\n\e[31m\e[31m  |\e[0m                                           \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                                  \
    \ value takeRight is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.isEmpty) return Nil\n        val list = MutableList[String]()\n \
    \       var currentPrefix = \"a\"\n        var currentString = \"\"\n        for\
    \ ((char, currentIndex) <- string.indices) {\n            if (char == currentPrefix)\
    \ {\n                currentString +=(char)\n            } else {\n          \
    \      if (currentString.isEmpty) currentString += char\n                else\
    \ {\n                    list += (currentPrefix:currentString)\n             \
    \       currentPrefix = char\n                    currentString = char\n     \
    \           }\n            }\n        }\n        list += (currentPrefix:currentString)\n\
    \        return list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxc1x9ti.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                   Not found: MutableList\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprxc1x9ti.scala:19:36 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    currentPrefix = char\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    (char : Any)\n\e[31m   |\e[0m      \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxc1x9ti.scala:20:36 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    currentString = char\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    (char : Any)\n\e[31m   |\e[0m      \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var currentPrefix = \"\"\n        var allPrefixes = new Array[String](string.size)\n\
    \        for( i <- 0 until string.size) {\n            allPrefixes(i) = currentPrefix\n\
    \            currentPrefix = currentPrefix.concat(string.charAt(i))\n        }\n\
    \        return allPrefixes\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbdhp43h.scala:12:62\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            currentPrefix = currentPrefix.concat(string.charAt(i))\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Char\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbdhp43h.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m allPrefixes\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \       Found:    (allPrefixes : Array[String])\n\e[31m   |\e[0m             \
    \  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ for (symbol <- string) {\n            i +=1\n            prefixes += string.slice(0,\
    \ i)\n        }\n        prefixes += string.slice(0, i)\n        prefixes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphd8ll9mv.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.split(\"\").reverse.map(x => string.substring(0, x)).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwe51tvmr.scala:8:62\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        string.split(\e[31m\"\
    \"\e[0m).reverse.map(\e[36mx\e[0m => string.substring(\e[31m0\e[0m, x)).toList\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \     ^\e[0m\n\e[31m  |\e[0m                                                 \
    \   Found:    (x : String)\n\e[31m  |\e[0m                                   \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.sliding(2).map(_.mkString).distinct.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2rcobc67.scala:8:51 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.sliding(\e[31m2\e[0m).map(_.mkString).distinct.sorted\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m        value sorted is not a member of Iterator[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var ret: List[String] = Nil\n        var length : Int = string.length\n    \
    \    while length >= 1 {\n            length += 1\n            ret = ret :+ string.substring(0,\
    \ length)\n        }\n        ret\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpox2qhteb.scala:14:11 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        ret\n\e[31m\e[31m   |\e[0m           ^\e[0m\n\
    \e[31m   |\e[0m           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpox2qhteb.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mwhile\e[0m length >= \e[31m1\e[0m {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             expression does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if(string.length == 0) return Nil\n        var prefixes = ListBuffer[String]()\n\
    \        var minLength = string.length\n        val chars = string.chars\n   \
    \     while(chars.nonEmpty) {\n            var currentPrefix = \"\"\n        \
    \    var currentChar = chars.head\n            var endOfWord = false\n       \
    \     var wordLength = 0\n            while(!endOfWord) {\n                if(currentChar\
    \ == ' ') {\n                    if(wordLength > 0)\n                        prefixes\
    \ = prefixes :+ currentPrefix\n                    wordLength = 0\n          \
    \      } else {\n                    currentPrefix = currentPrefix.dropRight(1)\
    \ ++ currentChar\n                    wordLength += 1\n                }\n   \
    \             currentChar = chars.next()\n                endOfWord = currentChar\
    \ == ' ' || currentChar == '.'\n            }\n            if(wordLength > 0)\
    \ {\n                if(wordLength < minLength) {\n                    minLength\
    \ = wordLength\n                }\n                prefixes = prefixes :+ currentPrefix\n\
    \            }\n        }\n        prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94kgypbl.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mwhile\e[0m(chars.nonEmpty) {\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ nonEmpty is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp94kgypbl.scala:14:36 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mvar\e[0m \e[36mcurrentChar\e[0m = chars.head\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue head is not a member of java.util.stream.IntStream - did you mean chars.peek?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94kgypbl.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                currentChar = chars.next()\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of java.util.stream.IntStream - did you mean chars.peek?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var result : List[String] = Nil\n        for (i <- 0 until string.length) {\n\
    \            for (prefix <- 0 until i) {\n                result :+= string.substring(0,\
    \ prefix)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98f10pvt.scala:18)\n\tat Problem.main(tmp98f10pvt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var current = string\n        var result: List[String] = Nil\n\n        while\
    \ (current.length >= 1) {\n            current =\n                if (current.charAt(0)\
    \ == string.charAt(0)) current.substring(1)\n                else current + string.charAt(0)\n\
    \            result += List(current)\n        }\n\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjej27g01.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result += List(current)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.takeWhile{_ => true}\n            .foldRight(List[String]()){ (prefix,\
    \ c) =>\n            if (prefix.isEmpty) List(c) :: prefix else List(c, prefix)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
    )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyt9fp5_x.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (prefix.isEmpty) List(c) ::\
    \ prefix \e[33melse\e[0m List(c, prefix) }\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isEmpty is not\
    \ a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyt9fp5_x.scala:10:40\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m\
    \ (prefix.isEmpty) List(c) :: prefix \e[33melse\e[0m List(c, prefix) }\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                        value :: is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyt9fp5_x.scala:10:60 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (prefix.isEmpty) List(c) ::\
    \ prefix \e[33melse\e[0m List(c, prefix) }\n\e[31m\e[31m   |\e[0m            \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                       Found:    (c : List[String])\n\e[31m \
    \  |\e[0m                                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyt9fp5_x.scala:10:63 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (prefix.isEmpty) List(c) ::\
    \ prefix \e[33melse\e[0m List(c, prefix) }\n\e[31m\e[31m   |\e[0m            \
    \                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (prefix : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.sliding(2).sliding(2).filter( x => x._2 > x._1).map {\n            x\
    \ => x._1 -> x._2\n        }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphw90l7m.scala:8:52 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.sliding(\e[31m2\e[0m).sliding(\e[31m2\e\
    [0m).filter( \e[36mx\e[0m => x._2 > x._1).map {\n\e[31m\e[31m  |\e[0m        \
    \                                          ^^^^\e[0m\n\e[31m  |\e[0m         \
    \                          value _2 is not a member of Seq[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpphw90l7m.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[36mx\e[0m => x._1 -> x._2\n\e[31m\e[31m\
    \  |\e[0m                 ^^^^\e[0m\n\e[31m  |\e[0m                 value _1 is\
    \ not a member of Seq[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = List[String]()\n        var start = string(0)\n        var end\
    \ = string.length\n\n        while (start != end) {\n            prefixes = prefixes\
    \ :+ string.substring(start, end)\n            start = end + 1\n            end\
    \ = string.indexOf((start, end), start) + start\n        }\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpltubf_nx.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            start = end + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Int\n\e[31m   |\e[0m                    Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.foldLeft[List[String]](List.empty[String]) { case (acc, x) => acc + x.takeWhile(_.isUpper).toList\
    \ }.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwckbl99.scala:8:81 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.foldLeft[\e[35mList\e[0m[\e[35mString\e\
    [0m]](List.empty[\e[35mString\e[0m]) { \e[33mcase\e[0m (acc, x) => acc + x.takeWhile(_.isUpper).toList\
    \ }.reverse\n\e[31m\e[31m  |\e[0m                                            \
    \                                 ^^^^^\e[0m\n\e[31m  |\e[0mvalue + is not a member\
    \ of List[String], but could be made available as an extension method.\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m  |\e[0m\n\e[31m  |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m  |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m  |\e[0m\
    \  import math.Numeric.Implicits.infixNumericOps\n\e[31m  |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppwckbl99.scala:8:85 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.foldLeft[\e[35mList\e[0m[\e[35mString\e\
    [0m]](List.empty[\e[35mString\e[0m]) { \e[33mcase\e[0m (acc, x) => acc + x.takeWhile(_.isUpper).toList\
    \ }.reverse\n\e[31m\e[31m  |\e[0m                                            \
    \                                       ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                              value takeWhile is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // TODO: replace with dynamic programming\n        val prefixes = mutable.ListBuffer[String]()\n\
    \        prefixes ++= string.dropRight(1).map(_.toString)\n        for(i <- 1\
    \ to string.length)\n            prefixes ++= string.take(i).drop(1).map(_.toString)\n\
    \        prefixes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1nrjwr0.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.dropWhile(_.length < string.length) ++ (0 to string.length - 1).map{_\
    \ => string}.reverse.foldLeft(List[String]()){ (list, i) => list :+ list.last(i)\
    \ }.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbq1n_04f.scala:8:27 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.dropWhile(_.length < string.length) ++\
    \ (\e[31m0\e[0m to string.length - \e[31m1\e[0m).map{_ => string}.reverse.foldLeft(List[\e\
    [35mString\e[0m]()){ (\e[36mlist\e[0m, \e[36mi\e[0m) => list :+ list.last(i) }.reverse\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                      value length is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbq1n_04f.scala:8:161 --------------------\e[0m\e\
    [0m\n\e[31m8 |\e[0m        string.dropWhile(_.length < string.length) ++ (\e[31m0\e\
    [0m to string.length - \e[31m1\e[0m).map{_ => string}.reverse.foldLeft(List[\e\
    [35mString\e[0m]()){ (\e[36mlist\e[0m, \e[36mi\e[0m) => list :+ list.last(i) }.reverse\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \                                                                            \
    \                            ^\e[0m\n\e[31m  |\e[0m                          \
    \                          Found:    (i : String)\n\e[31m  |\e[0m            \
    \                                        Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      val\
    \ prefix = mutable.ListBuffer[String]()\n      allPrefixes(string, prefix)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4moon6lg.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m      \e[33mval\e[0m \e[36mprefix\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4moon6lg.scala:9:18 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m      allPrefixes(string, prefix)\n\e[31m\e[31m  |\e[0m\
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                  Found:\
    \    \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mNothing\e\
    [0m\e[1m\e[31m)\e[0m\n\e[31m  |\e[0m                  Required: String\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.ArrayBuffer.empty[String]\n        for { x <- string.toCharArray\n\
    \            if x.isPrefixOf } { prefixes += x }\n        return prefixes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3y22k4a.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpm3y22k4a.scala:10:17 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m x.isPrefixOf } { prefixes +=\
    \ x }\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value isPrefixOf is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes: List[String] = Nil\n        var current = \"\"\n        for (character\
    \ <- string) {\n            current += character\n            prefixes = current::prefixes\n\
    \        }\n        prefixes\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwxfsp05.scala:18)\n\tat Problem.main(tmpnwxfsp05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def allPrefixes(string : String, nPrefixes : MutableList[String]) =\n      \
    \      if (string.length == nPrefixes.length)\n                nPrefixes :+ string\n\
    \            else\n                allPrefixes(string.substring(0, string.length),\
    \ nPrefixes :+ string)\n\n        allPrefixes(string, new MutableList[String]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsrz5jlj.scala:8:53 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mdef\e[0m \e[36mallPrefixes\e[0m(\e[36mstring\e\
    [0m : \e[35mString\e[0m, \e[36mnPrefixes\e[0m : \e[35mMutableList\e[0m[\e[35mString\e\
    [0m]) =\n\e[31m\e[31m  |\e[0m                                                \
    \     ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                                       \
    \        Not found: type MutableList\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E044] Cyclic Error:\
    \ /tmp/tmpfsrz5jlj.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                allPrefixes(string.substring(\e[31m0\e[0m, string.length),\
    \ nPrefixes :+ string)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m  \
    \ |\e[0m            Overloaded or recursive \e[33mmethod\e[0m \e[35mallPrefixes\e\
    [0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsrz5jlj.scala:14:32\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        allPrefixes(string,\
    \ \e[33mnew\e[0m \e[35mMutableList\e[0m[\e[35mString\e[0m]())\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            Not found: type MutableList\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.head :: allPrefixes(string.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5kod7gsk.scala:8:15\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        string.head :: allPrefixes(string.tail)\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Found:   \
    \ Char\n\e[31m  |\e[0m        Required: String\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ if (string.isEmpty) return Nil\n        val arr = new Array[Char](string.length)\n\
    \        for (i <- 0 until string.length) {\n            arr(i) = string.charAt(i)\n\
    \        }\n        val prefixes = allPrefixesHelper(arr, string.lenght)\n   \
    \     prefixes.map(_.toString).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgrytefj.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = allPrefixesHelper(arr,\
    \ string.lenght)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: allPrefixesHelper\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgrytefj.scala:13:53 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = allPrefixesHelper(arr,\
    \ string.lenght)\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value lenght is not a member of\
    \ String - did you mean string.length?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.takeWhile(_ => string.indexOf(_) != string.length).tail\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmphk3l3nha.scala:8:45 ------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.takeWhile(_ => string.indexOf(_) != string.length).tail\n\
    \e[31m\e[31m  |\e[0m                                             ^\e[0m\n\e[31m\
    \  |\e[0m     Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m     I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m  |\e[0m\
    \     _$2 => string.indexOf(_$2) != string.length.\n1 error found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var prefixes = ListBuffer.empty[String]\n        allPrefixesHelper(string, prefixes)\n\
    \        prefixes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcp_6uiob.scala:9:8 --------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        allPrefixesHelper(string, prefixes)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Not found: allPrefixesHelper\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n      if(string.length\
    \ == 0)\n        return Nil\n\n      def prefixes(string : String) : List[String]\
    \ = {\n        if(string.length == 0)\n          return Nil\n\n        val prefix\
    \ = string.toList(0)\n        var result: List[String] = Nil\n        for(i <-\
    \ 0 until string.length - 1){\n          result :=  prefixes (string.substring(0,i))\
    \ :: prefix\n        }\n        result\n      }\n      prefixes(string)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnteufqdu.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          result :=  prefixes (string.substring(\e[31m0\e\
    [0m,i)) :: prefix\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue := is not a member of List[String] - did you mean List[String].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnteufqdu.scala:18:54 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          result :=  prefixes (string.substring(\e[31m0\e\
    [0m,i)) :: prefix\n\e[31m\e[31m   |\e[0m                                     \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \            value :: is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixList = mutable.ListBuffer[String]()\n        def dfs(string : String)\
    \ : Unit = string match {\n            case \"\" => prefixList ++= List(string)\n\
    \            case x => dfs(x +: string.tail)\n        }\n        dfs(string.tail)\n\
    \        prefixList.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpno5k_kwr.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpno5k_kwr.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m x => dfs(x +: string.tail)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : String)\n\e[31m   |\e[0m                  \
    \        Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ def go (string : String, prefix : List[String]) : List[String] = {\n       \
    \     if(string.length < prefix.length) go(string.substring(1), prefix:+ prefix)\n\
    \            else if(string.length == prefix.length) prefix :+ string\n      \
    \      else go(string.substring(1), prefix:+ prefix)\n        }\n        go(string,\
    \ new ListBuffer[String]())\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbw4z5xv3.scala:9:79\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m(string.length\
    \ < prefix.length) go(string.substring(\e[31m1\e[0m), prefix:+ prefix)\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \              ^^^^^^\e[0m\n\e[31m  |\e[0m                                   \
    \      Found:    (prefix : List[String])\n\e[31m  |\e[0m                     \
    \                    Required: String\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbw4z5xv3.scala:11:50 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33melse\e[0m go(string.substring(\e[31m1\e[0m), prefix:+\
    \ prefix)\n\e[31m\e[31m   |\e[0m                                             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (prefix : List[String])\n\e[31m   |\e[0m                                \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbw4z5xv3.scala:13:19 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        go(string, \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mString\e\
    [0m]())\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var output : List[String] = Nil\n        var currPrefix: String = \"\"\n   \
    \     var currentLength : Int = string.length\n        while(currentLength > 0)\
    \ {\n            var lastChar = string.last\n            currentLength = currentLength\
    \ - lastChar.length\n            var newPrefix = currPrefix + lastChar\n     \
    \       if(string.startsWith(newPrefix)) {\n                output = output :+\
    \ newPrefix\n                currPrefix = newPrefix\n            }\n        }\n\
    \        output.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw2aesaog.scala:13:53 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            currentLength = currentLength - lastChar.length\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = mutable.Stack[String]()\n        var current = \"\"\n       \
    \ for( c <- string) {\n            current += c\n            prefixes += current\n\
    \        }\n        prefixes.reverse.tail.map(_.toString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_gltrqfq.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefix = new Array[String]()\n        allPrefixesAux(string, 0, prefix,\
    \ new mutable.ListBuffer[String]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpty1do2et.scala:8:21 ------------------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mmissing argument for parameter\
    \ _length of \e[33mconstructor\e[0m \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e\
    [0m: (_length: Int): Array[String]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpty1do2et.scala:9:8\
    \ --------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        allPrefixesAux(string,\
    \ \e[31m0\e[0m, prefix, \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]())\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Not found:\
    \ allPrefixesAux\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpty1do2et.scala:9:46\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        allPrefixesAux(string,\
    \ \e[31m0\e[0m, prefix, \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]())\n\
    \e[31m\e[31m  |\e[0m                                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                                              Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ var list = List[String]()\n        var cur = string\n        while (cur.length\
    \ > 0) {\n            val newList: List[String] = cur splitTo List(\"aa\", \"\
    ab\", \"ac\", \"ba\", \"bb\", \"bc\", \"ca\", \"cb\", \"cc\")\n            list\
    \ :+ newList.head\n            cur = newList.tail.head\n        }\n        list.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxibjw9xm.scala:11:44 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mnewList\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = cur splitTo List(\e[31m\"aa\"\e[0m, \e[31m\"ab\"\e[0m,\
    \ \e[31m\"ac\"\e[0m, \e[31m\"ba\"\e[0m, \e[31m\"bb\"\e[0m, \e[31m\"bc\"\e[0m,\
    \ \e[31m\"ca\"\e[0m, \e[31m\"cb\"\e[0m, \e[31m\"cc\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \   value splitTo is not a member of String - did you mean String.split?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ string.headOption match {\n            case None => List(string.tail)\n    \
    \        case Some(head) =>\n                val tail = string.tail\n        \
    \        tail.headOption match {\n                    case None => List(head ::\
    \ tail)\n                    case Some(tailhead) =>\n                        allPrefixes(tail)\
    \ ::: List(tailhead)\n                }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppqn94d4g.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                    \e[33mcase\e[0m None => List(head\
    \ :: tail)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppqn94d4g.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                        allPrefixes(tail)\
    \ ::: List(tailhead)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                        Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ // If string contains only one character, it is a prefix of empty string\n \
    \       if (string.length <= 1) {\n            return Nil\n        }\n       \
    \ \n        // Set of all possible prefixes\n        var prefixes = mutable.Set[String]()\n\
    \        \n        // If string is a prefix of empty string, it is also a prefix\
    \ of any other string.\n        // So add it to the prefix set\n        prefixes\
    \ += string\n        \n        // Repeat till we find longest possible prefix\n\
    \        var i = string.length\n        while (i > 0) {\n            prefixes\
    \ += string(i)\n            i -= 1\n        }\n        \n        // Convert prefix\
    \ set to a list\n        prefixes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ahy6ucy.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mprefixes\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val len = string.length\n        val prefixes = List(string.substring(0), string.substring(1,\
    \ len-1)).map(x => x + string.substring(len-1))\n        val longestPrefixes =\
    \ prefixes.sortBy(_.length).reverse\n        longestPrefixes.map(_ + string.substring(len-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.allPrefixes(tmprd5mo4o4.scala:9)\n\tat Problem$.main(tmprd5mo4o4.scala:14)\n\
    \tat Problem.main(tmprd5mo4o4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val prefixes = ListBuffer.empty[String]\n        for (i <- string.length to\
    \ 1 by -1) {\n            prefixes ++= allPrefixesIterative(string, i)\n     \
    \   }\n        prefixes\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3pblnop.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            prefixes ++= allPrefixesIterative(string,\
    \ i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: allPrefixesIterative\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_3pblnop.scala:12:8 ---------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        prefixes\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    (prefixes : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\"\
    , \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n       \
    \ val startIndex = math.min(string.length, string.length-4)\n        val prefixes\
    \ = List.newBuilder[String]\n        for (i <- 0 to startIndex) {\n          \
    \  prefixes += (string.take(i) + string.drop(i+1))\n        }\n        prefixes.result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp25vanq0h.scala:17)\n\tat Problem.main(tmp25vanq0h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010436
