language: scala
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var output = \"\"\n        var lastSpace = false\n\
    \        var prevChar = \"\"\n        var index = 0\n        while (index < text.length)\
    \ {\n            val char = text.charAt(index)\n            if (char == \" \"\
    ) {\n                if (lastSpace) {\n                    output = output + char\n\
    \                }\n                else {\n                    output = output\
    \ + \"-\"\n                    lastSpace = true\n                }\n         \
    \   }\n            else {\n                lastSpace = false\n            }\n\
    \            index = index + 1\n        }\n        output\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw9logql0.scala:22:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (char == \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\") \n        val newText = newText.replaceAll(\"\\\\s{2,}\", \"_\") \n     \
    \   newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaq9myag5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewText\e[0m = newText.replaceAll(\e\
    [31m\"\\\\s{2,}\"\e[0m, \e[31m\"_\"\e[0m) \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewText is already defined as \e[33mvalue\e[0m \e[35mnewText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660029455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      text.split(\"\\\\s+\").map(x => x.replaceAll(\"\
    \\\\s+\", \"-\")).mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2prniay.scala:20)\n\tat Problem.main(tmpz2prniay.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newText\
    \ = words.foldLeft(\"\")(\n          (acc, w) =>\n            if (acc.length >\
    \ 0) acc else (w.replaceAll(\" \", \"_\"))\n        )\n        newText.reverse.foldLeft(\"\
    \")(\n          (acc, w) => if (acc.length != 0) acc else (w.replaceAll(\" \"\
    , \"-\"))\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp10lv_mkt.scala:22:55 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          (\e[36macc\e[0m, \e[36mw\e[0m) => \e[33mif\e\
    [0m (acc.length != \e[31m0\e[0m) acc \e[33melse\e[0m (w.replaceAll(\e[31m\" \"\
    \e[0m, \e[31m\"-\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              value replaceAll is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val r = scala.io.Codec.ascii.decodeString(text)\n\
    \        val split = r.replace(\" \", \"_\").split(\"_\")\n        val r = if\
    \ (split.length == 2) {\n            split.mkString.replace(\" \", \"-\")\n  \
    \      } else {\n            split.mkString.replace(\" \", \"_\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqshxirn.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mif\e[0m (split.length\
    \ == \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mr is\
    \ already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m19 |\e[0m            split.mkString.replace(\e[31m\"\
    \ \"\e[0m, \e[31m\"-\"\e[0m)\n\e[31m20 |\e[0m        } \e[33melse\e[0m {\n\e[31m21\
    \ |\e[0m            split.mkString.replace(\e[31m\" \"\e[0m, \e[31m\"_\"\e[0m)\n\
    \e[31m22 |\e[0m        }\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcqshxirn.scala:16:31\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mr\e[0m = scala.io.Codec.ascii.decodeString(text)\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ ascii is not a member of object scala.io.Codec\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcqshxirn.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\" \").map(x => if(x != null && x.trim.length()\
    \ == 0) \"_\" else x).mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2uqdg7v.scala:20)\n\tat Problem.main(tmpu2uqdg7v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.split(\"\\\\s+\").foldLeft(\"\
    \"){\n            (res, e) => if (e.trim.length() > 2) \n                (res+\"\
    -\") else\n                (res + e)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppst6chcf.scala:24)\n\tat Problem.main(tmppst6chcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val len = text.length\n        if (len == 0)\
    \ \"\"\n        else if (len == 1) \"\"\n        else {\n            val ss =\
    \ new StringBuilder(text)\n            val sb = new StringBuilder\n          \
    \  var isConsecutiveSpace = true\n            var lastSpace: Int = -1\n      \
    \      val ind = ss\n                .replaceAll(\" \", \"\")\n              \
    \  .split(' ')\n                .zipWithIndex\n                .toList\n     \
    \           .sortWith((a, b) => a._2 > b._2)\n                .reverse\n     \
    \           .toSeq.indexWhere(_._2 == 0) \n                .getOrElse(0)\n   \
    \         sb.append(text.replaceAllIn(\" \", \" \".replaceAllIn(\"  \", \" \"\
    )));\n            while (sb.length() > 1) {\n                val currentSpace\
    \ = sb.length()\n                if (currentSpace - lastSpace > 1) {\n       \
    \             sb.deleteCharAt(currentSpace)\n                } else {\n      \
    \              isConsecutiveSpace = false\n                }\n               \
    \ lastSpace = currentSpace\n            }\n            val newText = if (isConsecutiveSpace)\
    \ sb.toString() else sb.substring(0, ind).append(sb.substring(ind).replaceAll(\"\
    \ \", \"_\"))\n            newText\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn1ahz_fi.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mind\e[0m = ss\n\e[31m25\
    \ |\e[0m                .replaceAll(\e[31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0mvalue replaceAll is\
    \ not a member of StringBuilder - did you mean ss.replace?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn1ahz_fi.scala:33:27 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            sb.append(text.replaceAllIn(\e[31m\" \"\e[0m,\
    \ \e[31m\" \"\e[0m.replaceAllIn(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m)));\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ replaceAllIn is not a member of String - did you mean text.replaceAll?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn1ahz_fi.scala:33:49 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            sb.append(text.replaceAllIn(\e[31m\" \"\e\
    [0m, \e[31m\" \"\e[0m.replaceAllIn(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m)));\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ (\e[32m\" \"\e[0m : String).replaceAll?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn1ahz_fi.scala:43:90 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m            \e[33mval\e[0m \e[36mnewText\e[0m = \e[33mif\e[0m (isConsecutiveSpace)\
    \ sb.toString() \e[33melse\e[0m sb.substring(\e[31m0\e[0m, ind).append(sb.substring(ind).replaceAll(\e\
    [31m\" \"\e[0m, \e[31m\"_\"\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value append is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaceIndex =\
    \ text.indexOf(' ')\n        val spaceCount = 0\n        while (spaceIndex !=\
    \ -1) {\n            if (spaceCount > 1) {\n                result = result.replaceAll(\"\
    \ \", \"-\")\n            }\n            spaceIndex = text.indexOf(' ', spaceIndex\
    \ + 1)\n            spaceCount = spaceCount + 1\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6kc9pkne.scala:23:23 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            spaceIndex = text.indexOf(\e[31m' '\e[0m,\
    \ spaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val spaceIndex\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp6kc9pkne.scala:24:23 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            spaceCount = spaceCount + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val spaceCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Replace all spaces with underscores\n   \
    \     val replacedText = text.split(\" \").map(_.toLowerCase).map(s => if(s.trim.length\
    \ > 0) \"_\"+s else s).mkString\n        // If there are more than 2 consecutive\
    \ spaces, replace all consecutive spaces with -\n        val consecutiveSpaces\
    \ = Seq(\"_\", \"_-\")\n        if(replacedText.split('-').length >= 2)\n    \
    \        replacedText.replaceAll('\\\\s', consecutiveSpaces(replacedText.split('-').length-1))\n\
    \        else\n            replacedText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxxe6pypx.scala:21:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            replacedText.replaceAll('\\\\s', consecutiveSpaces(replacedText.split(\e\
    [31m'-'\e[0m).length-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    unclosed\
    \ character literal\n\e[31m\e[31m-- Error: /tmp/tmpxxe6pypx.scala:21:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            replacedText.replaceAll('\\\\s', consecutiveSpaces(replacedText.split(\e\
    [31m'-'\e[0m).length-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \        unclosed character literal\n2 errors found\n"
  stdout: ''
  timestamp: 1660029458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText : String = \"\"\n        for(i <-\
    \ 0 until text.length)\n            if(text.charAt(i) == ' ')\n              \
    \  newText += \"_\"\n            else\n                newText += text.charAt(i)\n\
    \        for(i <- 0 until newText.length)\n            if(newText.charAt(i) ==\
    \ ' ')\n                newText = newText.substring(i)\n        for(i <- 0 until\
    \ newText.length)\n            if(newText.charAt(i) != '_' && newText.charAt(i)\
    \ != ' ')\n                newText = newText.substring(i)\n        newText\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 4\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.fixSpaces$$anonfun$3(tmpli8gtynx.scala:26)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fixSpaces(tmpli8gtynx.scala:27)\n\
    \tat Problem$.main(tmpli8gtynx.scala:31)\n\tat Problem.main(tmpli8gtynx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        words.map(_.trim).map(w\
    \ => if (w.isEmpty) \"_\" else w).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3wvvosr.scala:21)\n\tat Problem.main(tmpe3wvvosr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\"\\\\s+\").map(s => s.replaceAll(\"\
    \\\\s\", \"\")).mkString(\"_\") + \"-\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3wqxqaf.scala:19)\n\tat Problem.main(tmpb3wqxqaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Split string into an array of strings \n\
    \        // >>> text.split(\" \")\n        // Array(\" Example\", \" Example 1\"\
    , \" Example 2\", \" Example 3\")\n        val arr = text.split(\" \")\n     \
    \   val newArr = new Array[String](arr.length)\n        // Iterate through array\
    \ and remove spaces \n        // >>> for (i<-0 until arr.length){\n        //\
    \         val elem = arr(i)\n        //         if (elem != \" \"){\n        //\
    \             newArr(i) = elem\n        //         }\n        // }\n        val\
    \ elemsToRemove = arr.map(_.trim).filter(_.nonEmpty).map(_.toLowerCase).filter(elem\
    \ => !elem.equals(\"\\t\"))\n        val elementsToRemove = elemsToRemove.toSeq.sortBy(_.length)\n\
    \        var i = 0\n        while (i < elementsToRemove.length-1){\n         \
    \   while (i < elementsToRemove.length-1 && elementsToRemove(i+1) < elementsToRemove(i)){\n\
    \                i += 1\n            }\n            if (elementsToRemove(i) ==\
    \ elementsToRemove(i+1)) elementsToRemove(i) = elementsToRemove(i+1)\n       \
    \     else elementsToRemove(i) = elementsToRemove(i) + \"-\"\n            i +=\
    \ 1\n        }\n        val newArrWithSpace = elementsToRemove.toSeq.sortBy(_.length).toSeq.map(x\
    \ => x + \" \")\n        // Join back into string \n        // >>> newArrWithSpace.mkString(\"\
    \ \")\n        // \"Example_ Example_1 Example_2 Example_3\"\n        newArrWithSpace.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzns9tvz8.scala:35:62 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mif\e[0m (elementsToRemove(i) == elementsToRemove(i+\e\
    [31m1\e[0m)) elementsToRemove(i) = elementsToRemove(i+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Seq[String] - did you mean\
    \ elementsToRemove.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzns9tvz8.scala:36:17\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33melse\e\
    [0m elementsToRemove(i) = elementsToRemove(i) + \e[31m\"-\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of Seq[String] - did you mean elementsToRemove.updated?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        \n        // Replace\
    \ all spaces in the original text with underscores\n        fixedText = fixedText.replaceAll(\"\
    \\\\s\", \"\")\n        \n        // If there are more than 2 consecutive spaces\n\
    \        // then replace the spaces with '-'\n        fixedText = fixedText.replaceAll(\"\
    \  +\", \"- \")\n        \n        // Return the fixed text\n        fixedText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzqzihrd.scala:30)\n\tat Problem.main(tmppzqzihrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newString = text\n        var lastSpaces\
    \ = 0 // counts the number of consecutive spaces (two or more spaces in a row)\n\
    \        for (c1 <- text.toCharArray;\n            c2 <- text.toCharArray;\n \
    \           c3 <- text.toCharArray) {\n            if (c1 == ' ' && c2 == ' '\
    \ && c3 == ' ') {\n                if (lastSpaces > 2) {\n                   \
    \ newString = newString + \"_\"\n                    lastSpaces = 0\n        \
    \        } else {\n                    newString = newString + \"-\"\n       \
    \             lastSpaces = 1\n                }\n            } else if (c1 ==\
    \ ' ') {\n                if (lastSpaces > 1) {\n                    newString\
    \ = newString + \"_\"\n                    lastSpaces = 0\n                } else\
    \ {\n                    newString = newString + \"-\"\n                    lastSpaces\
    \ = 1\n                }\n            } else if (c2 == ' ') {\n              \
    \  if (lastSpaces > 1) {\n                    newString = newString + \"_\"\n\
    \                    lastSpaces = 0\n                } else {\n              \
    \      newString = newString + \"-\"\n                    lastSpaces = 1\n   \
    \             }\n            } else if (c3 == ' ') {\n                if (lastSpaces\
    \ > 1) {\n                    newString = newString + \"_\"\n                \
    \    lastSpaces = 0\n                } else {\n                    newString =\
    \ newString + \"-\"\n                    lastSpaces = 1\n                }\n \
    \           } else {\n                if (lastSpaces > 1) {\n                \
    \    newString = newString + \"_\"\n                    lastSpaces = 0\n     \
    \           } else {\n                    newString = newString + \"-\"\n    \
    \                lastSpaces = 1\n                }\n            }\n        }\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1sd8wwam.scala:66)\n\tat Problem.main(tmp1sd8wwam.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val replaceSpace = text replaceAll(\"\\\\s\"\
    , \"\")\n        if (replaceSpace.length != text.length) {\n            replaceSpace\n\
    \        } else if (replaceSpace == \" \") {\n            \"_\"\n        } else\
    \ if (replaceSpace == \" \") {\n            \"-\"\n        } else if (replaceSpace.substring(0,1)\
    \ == \" \" && replaceSpace.substring(1,2).equals(\" \")) {\n            replaceSpace.substring(1,2)\
    \ + \"-\"\n        } else {\n            replaceSpace\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjgczj8vg.scala:31)\n\tat Problem.main(tmpjgczj8vg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val pattern = \"\"\"(\\s+)(\\s)\"\"\".r\n  \
    \      var result = text\n        result = result.replace(pattern,\" $1_$2\")\n\
    \        var result2 = result\n        result = result.replace(pattern,\" -$2\"\
    )\n        while(result.endsWith(\"-\"))\n            result = result.replace(pattern,\"\
    \ -\")\n        while(result.endsWith(\"_\"))\n            result = result.replace(pattern,\"\
    \ _\")\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpg03dn42b.scala:18:24 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        result = result.replace(pattern,\e[31m\" $1_$2\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence,\
    \ x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\
    \e[31m   |\e[0mmatch arguments ((pattern : scala.util.matching.Regex), (\e[32m\"\
    \ $1_$2\"\e[0m : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpg03dn42b.scala:20:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result = result.replace(pattern,\e\
    [31m\" -$2\"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence,\
    \ x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\
    \e[31m   |\e[0mmatch arguments ((pattern : scala.util.matching.Regex), (\e[32m\"\
    \ -$2\"\e[0m : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpg03dn42b.scala:22:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            result =\
    \ result.replace(pattern,\e[31m\" -\"\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence): String\n\
    \e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch arguments\
    \ ((pattern : scala.util.matching.Regex), (\e[32m\" -\"\e[0m : String))\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpg03dn42b.scala:24:28 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result = result.replace(pattern,\e[31m\"\
    \ _\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660029457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def fixSpace(c: Char): Char = {\n          \
    \  if (c == ' ') '_'\n            else c\n        }\n        text.foldLeft((\"\
    \", \"\"))((x, y) => fixSpace(x) + fixSpace(y))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6p_8ajku.scala:20:51\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        text.foldLeft((\e[31m\"\
    \"\e[0m, \e[31m\"\"\e[0m))((\e[36mx\e[0m, \e[36my\e[0m) => fixSpace(x) + fixSpace(y))\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                        Found:    (x : (String,\
    \ String))\n\e[31m   |\e[0m                                        Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val pattern = \" +\"\n        var text = text.toLowerCase()\n\
    \        var modifiedText = text\n        while (text.indexOf(pattern) >= 0) {\n\
    \            val replacement = \"-\"\n            modifiedText = modifiedText.replaceAll(pattern,\
    \ replacement)\n            text = modifiedText\n        }\n        if (modifiedText.length\
    \ < text.length) {\n            modifiedText\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg8_iodg9.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mtext\e[0m = text.toLowerCase()\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvariable\e[0m \e[35mtext\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var text = text\n        var res = \"\"\n  \
    \      var i = 0\n        while (i < text.length) {\n            val c = text(i)\n\
    \            if (c == \" \") {\n                res += \"_\"\n            }\n\
    \            else if (i < text.length - 1 && text(i + 1) == \" \") {\n       \
    \         res += \"-\"\n            }\n            i += 1\n        }\n       \
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxjb9phyf.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mtext\e[0m = text\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvariable\e[0m \e[35mtext\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ArrayBuffer.empty[String]\n        var i = 0\n        while (i < words.length)\
    \ {\n            val word = words(i)\n            val fixedWord = if (word.trim().isEmpty)\
    \ word else word + \"_\"\n            if (i > 0) {\n                fixedWords\
    \ += fixedWord\n            } else {\n                fixedWords += fixedWord\n\
    \            }\n            i += 1\n        }\n        fixedWords.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptt3mzecl.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = \"\"\n        var lastSpace = \"\
    \ \"\n        for (x <- text) {\n            x match {\n                case '\
    \ ' =>\n                    if (lastSpace != \" \") {\n                      \
    \  lastSpace = \" \"\n                        result += \"_\"\n              \
    \      }\n                case _ => \n                    if (lastSpace != \"\
    \ \") {\n                        result += lastSpace + \"-\"\n               \
    \     }\n                lastSpace = x\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhcnv7is.scala:29:28\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                lastSpace = x\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (x : Char)\n\e[31m   |\e[0m                \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var currentString = \"\"\n        var currentSpaceCount\
    \ = 1\n        text foreach { char =>\n            if (char == ' ')\n        \
    \        currentSpaceCount += 1\n            else\n                currentString\
    \ += (char)\n        }\n        if (currentSpaceCount == 2)\n            currentString\
    \ = currentString + \"_\"\n        else if (currentSpaceCount > 2)\n         \
    \   currentString = currentString.substring(0, currentString.length() - 1) + \"\
    -\"\n        else\n            currentString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rs444a5.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            currentString = currentString\
    \ + \e[31m\"_\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rs444a5.scala:27:26\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            currentString = currentString.substring(\e\
    [31m0\e[0m, currentString.length() - \e[31m1\e[0m) + \e[31m\"-\"\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.split(\" \").map(word => if\
    \ (word == \" \") \"_\" else word).mkString(\" \")\n        if (text.length <\
    \ 2) result\n        else if (result.take(2).last == \" \") result.drop(2).mkString(\"\
    \ \")\n        else result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg86bgjpi.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (result.take(\e\
    [31m2\e[0m).last == \e[31m\" \"\e[0m) result.drop(\e[31m2\e[0m).mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var resultString = text\n        val spaceIndex\
    \ : List[Int] = List(0, 0).reverse // the start indices of each space\n      \
    \  for ((index, char) <- text.indices) {\n            if (char == ' ') {\n   \
    \             spaceIndex.lastIndex = index\n            }\n        }\n       \
    \ for (index <- spaceIndex.indices) {\n            var lastSpaceIndex = index\n\
    \            var consecutiveSpaces = 0\n            while (lastSpaceIndex < text.length)\
    \ {\n                if (text(lastSpaceIndex) != ' ') {\n                    break\n\
    \                }\n                lastSpaceIndex += 1\n                consecutiveSpaces\
    \ += 1\n            }\n            if (consecutiveSpaces > 1) {\n            \
    \    lastSpaceIndex = index\n                consecutiveSpaces = 1\n         \
    \   }\n            val substring = text.substring(lastSpaceIndex, index)\n   \
    \         resultString = resultString.substring(0, lastSpaceIndex) + \n      \
    \                 resultString.substring(index, index + substring.length) + \n\
    \                       \"_\" + \n                       resultString.substring(index\
    \ + substring.length, resultString.length)\n        }\n        return resultString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfz4r1kn.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                spaceIndex.lastIndex = index\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndex\
    \ is not a member of List[Int] - did you mean spaceIndex.lastIndexOf?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplfz4r1kn.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text match {\n            case \" \" => \" \"\
    \n            case \" \" => \"_\"\n            case s if s.startsWith(\" \") &&\
    \ s.endsWith(\" \") => s\"-${s}\" \n            case s if s.startsWith(\" \")\
    \ && s.endsWith(\" \") => \"_${s}\" \n            case s if s.startsWith(\" \"\
    ) => s\"-${s}\" \n            case s if s.startsWith(\" \") => \"_${s}\" \n  \
    \          case s => s\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwmoi2pma.scala:28)\n\tat Problem.main(tmpwmoi2pma.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val charArray = text.toCharArray\n        var\
    \ string = new StringBuilder\n        var isSpace = false\n        for(i <- 0\
    \ until charArray.length) {\n            val c = charArray(i)\n            if(c\
    \ == ' ') isSpace = !isSpace\n            else {\n                if(isSpace)\
    \ {\n                    string.append(\" \")\n                } else {\n    \
    \                string.append(c)\n                }\n            }\n        }\n\
    \        return string.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8805nho6.scala:34)\n\tat Problem.main(tmp8805nho6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastNonSpace\
    \ = \"\"\n        for (char <- text) {\n            if (char != ' ') {\n     \
    \           if (char != lastNonSpace) {\n                    result = result.replace(char,\
    \ '_')\n                    lastNonSpace = char\n                }\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoc6m59tz.scala:20:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (char != lastNonSpace)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoc6m59tz.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    lastNonSpace\
    \ = char\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    (char : Char)\n\e[31m\
    \   |\e[0m                                   Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val pattern = \"\\\\s\"\n        val repl =\
    \ \"_\"\n        val result = text.replace(pattern, repl)\n\n        val replaced\
    \ = text.replaceAll(\" {2,}\", \"_\")\n        if (replaced != text) {\n     \
    \       fixSpaces(replaced)\n        } else {\n            result\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb22fdg1e.scala:29)\n\tat Problem.main(tmpb22fdg1e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // We use mutable variables to hold our results.\n\
    \        val finalText = mutable.MutableString\n        val finalSpaces = mutable.MutableSet[String]\n\
    \        val nextSpaces = mutable.MutableSet[String]\n        val nextSpace =\
    \ mutable.MutableString\n        val textLength = text.length\n        \n    \
    \    // iterate over each character of our string\n        for (i <- 0 until textLength)\
    \ {\n            // If this character is a space, \n            // then check\
    \ if we are on a space sequence\n            // and if not then add a space to\
    \ the end of the \n            // current spaces set\n            if (text.charAt(i)\
    \ == ' ') {\n                if (!nextSpaces.contains(nextSpace)) {\n        \
    \            finalSpaces += nextSpace\n                    nextSpaces ++= \" \"\
    \n                }\n            }\n            // If this character is not a\
    \ space, \n            // then check if we are on a space sequence\n         \
    \   // and if it is, add it to our nextSpaces set\n            else {\n      \
    \          if (!nextSpaces.contains(nextSpace)) {\n                    nextSpaces\
    \ += nextSpace\n                }\n                // And add this character to\
    \ the current spaces set\n                nextSpace += text.charAt(i)\n      \
    \      }\n        }\n        // Reset the next spaces set and add a space to it\
    \ \n        // since we used a mutable variable\n        nextSpaces = mutable.MutableSet[String]()\n\
    \        nextSpace = mutable.MutableString(\" \")\n        // Iterate over each\
    \ element of our current spaces\n        for (s <- finalSpaces) {\n          \
    \  // If this element is a space sequence, \n            // then check if we have\
    \ two consecutive spaces in our \n            // current spaces set\n        \
    \    if (s == ' ' && nextSpaces.contains(s)) {\n                nextSpaces +=\
    \ \"-\"\n            }\n            // Add the current element to the final text\n\
    \            finalText += s\n        }\n        // And return the final text value\n\
    \        finalText.toString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptl0bxxds.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfinalText\e[0m = mutable.MutableString\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptl0bxxds.scala:18:26 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfinalSpaces\e[0m = mutable.MutableSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptl0bxxds.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnextSpaces\e[0m = mutable.MutableSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptl0bxxds.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnextSpace\e[0m = mutable.MutableString\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptl0bxxds.scala:48:21 ------------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m        nextSpaces = mutable.MutableSet[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptl0bxxds.scala:49:20 ------------------------\e[0m\e[0m\n\e[31m49 |\e\
    [0m        nextSpace = mutable.MutableStrin"
  stdout: ''
  timestamp: 1660029475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Initialize the mutable string that we will\
    \ fill \n        // with spaces \n        var fixedText = mutable String\n\n \
    \       // Iterate over the characters in text\n        for (c <- text.toCharArray)\
    \ {\n            // If the character is a space, \n            // append an underscore\
    \ \n            if (c == ' ') {\n                fixedText += '_'\n          \
    \      // If more than one space is found, \n                // append a hyphen\n\
    \            } else if (c == ' ') {\n                fixedText += '-'\n      \
    \      }\n            // Otherwise, append the character \n            else {\n\
    \                fixedText += c\n            }\n        }\n\n        // Return\
    \ the mutable string\n        fixedText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp29589omp.scala:18:38 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfixedText\e[0m = mutable\
    \ String\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                          expression expected but \e[31mend of statement\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29589omp.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfixedText\e[0m = mutable String\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      val spaces : Int = text.length\n      val newText\
    \ = (0 until text.length).map(i => if (text(i) == \" \") \"_\" else text(i)).mkString\n\
    \      (spaces % 2) == 0 ? (newText + \"-\")  : newText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_9lx4j3d.scala:17:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mnewText\e[0m = (\e[31m0\e\
    [0m until text.length).map(\e[36mi\e[0m => \e[33mif\e[0m (text(i) == \e[31m\"\
    \ \"\e[0m) \e[31m\"_\"\e[0m \e[33melse\e[0m text(i)).mkString\n\e[31m\e[31m  \
    \ |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_9lx4j3d.scala:18:45\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m      (spaces % \e[31m2\e\
    [0m) == \e[31m0\e[0m ? (newText + \e[31m\"-\"\e[0m)  : \e[35mnewText\e[0m\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: type newText\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9lx4j3d.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m      (spaces % \e[31m2\e\
    [0m) == \e[31m0\e[0m ? (newText + \e[31m\"-\"\e[0m)  : \e[35mnewText\e[0m\n\e\
    [31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m           \
    \           value ? is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (newText.length() > 2) {\n            newText.replace(\" \",\
    \ \"_\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbwrx0pj7.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (newText.length()\
    \ > \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\
    \        Maybe you are missing an else part for the conditional?\n\e[31m18 |\e\
    [0m            newText.replace(\e[31m\" \"\e[0m, \e[31m\"_\"\e[0m)\n\e[31m19 |\e\
    [0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.isEmpty) text\n        else {\n   \
    \         // replace all spaces with underscores \n            val spaces = text.filter(c\
    \ => c != \" \") \n            val underscores = spaces.map(c => c.toString +\
    \ \"_\")\n            val join = underscore.mkString(\" \")\n            if (spaces.length\
    \ > 2 && spaces.zip(underscores).forall(\n                (a: String, b: String)\
    \ => a == b)) {\n                val spaceSplit = text.split(\" \").map(s => s\
    \ + \"-\").mkString(\" \")\n                fixSpaces(spaceSplit)\n          \
    \  }\n            else {\n                join\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt0q6eeh8.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mspaces\e[0m = text.filter(\e\
    [36mc\e[0m => c != \e[31m\" \"\e[0m) \n\e[31m\e[31m   |\e[0m                 \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpt0q6eeh8.scala:21:23 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mjoin\e[0m = underscore.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: underscore\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0q6eeh8.scala:23:16 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                (\e[36ma\e[0m: \e[35mString\e[0m, \e\
    [36mb\e[0m: \e[35mString\e[0m) => a == b)) {\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (\e[1m\e[31mString\e[0m, String) => Boolean\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32m(\e[0m\e[1m\e[32mChar\e[0m, String)\e[1m\e[32m)\e[0m\
    \ => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text match {\n            case \"\" => \"\"\n\
    \            case \" \" => \"_\"\n            case text => fixSpaces(text.substring(1))\
    \ + text.substring(0, text.indexOfLast(\" \"))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4co6plju.scala:19:79 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m text => fixSpaces(text.substring(\e\
    [31m1\e[0m)) + text.substring(\e[31m0\e[0m, text.indexOfLast(\e[31m\" \"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \         value indexOfLast is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.trim.isEmpty) \"\"\n        else text.split(\"\
    \ \").toList.map(_.trim).filterNot(_.isEmpty).mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqwv9s_h.scala:21)\n\tat Problem.main(tmprqwv9s_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaceRegex = \"\"\"(\\s*) \"\"\".r\n   \
    \     val noSpaceRegex = \"\"\"(\\s*) \"\"\".r\n        val countRegex = \"\"\"\
    (\\s*) \"\"\".r\n\n        val result = text.replaceAll(spaceRegex, \"_\").replaceAll(noSpaceRegex,\
    \ \"_\").replaceAll(countRegex, \"-\")\n        result \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7w2gcj1t.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = text.replaceAll(spaceRegex, \e[31m\"_\"\e[0m).replaceAll(noSpaceRegex, \e\
    [31m\"_\"\e[0m).replaceAll(countRegex, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (spaceRegex : scala.util.matching.Regex)\n\e[31m   |\e\
    [0m                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7w2gcj1t.scala:20:65 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = text.replaceAll(spaceRegex,\
    \ \e[31m\"_\"\e[0m).replaceAll(noSpaceRegex, \e[31m\"_\"\e[0m).replaceAll(countRegex,\
    \ \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    (noSpaceRegex : scala.util.matching.Regex)\n\e[31m   |\e[0m\
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7w2gcj1t.scala:20:95 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = text.replaceAll(spaceRegex,\
    \ \e[31m\"_\"\e[0m).replaceAll(noSpaceRegex, \e[31m\"_\"\e[0m).replaceAll(countRegex,\
    \ \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    (countRegex : scala.util.matching.Regex)\n\
    \e[31m   |\e[0m                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\"\\\\s\").map(_.toLowerCase()).map(x\
    \ => (x.replaceAll(\" \", \"_\"))).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdo1lkwuz.scala:19)\n\tat Problem.main(tmpdo1lkwuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result : String = text\n        for( i <-\
    \ 0 until text.length ){\n            if( text.charAt(i) == ' ' ){\n         \
    \       result = result.replace( text.charAt(i), \"_\" ) \n            }\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpht3b665g.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result = result.replace( text.charAt(i),\
    \ \e[31m\"_\"\e[0m ) \n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments (Char, (\e[32m\"_\"\e[0m\
    \ : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660029480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val arr = text.split(\"\")\n        var finalArray\
    \ = arr.map(c => if (c.isSpace) '_' else c)\n        var lastSpaceCount = arr.length\n\
    \        arr.map { c =>\n            if (c.isSpace) lastSpaceCount += 1\n    \
    \        else if (lastSpaceCount > 2 && c.isSpace) lastSpaceCount -= 1\n     \
    \       finalArray += c\n        }\n        finalArray.toString()\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2nxvvbn.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfinalArray\e[0m = arr.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c.isSpace) \e[31m'_'\e[0m \e[33melse\e[0m c)\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isSpace is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2nxvvbn.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (c.isSpace) lastSpaceCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isSpace is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2nxvvbn.scala:21:45\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (lastSpaceCount > \e[31m2\e[0m && c.isSpace) lastSpaceCount\
    \ -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value isSpace\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2nxvvbn.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            finalArray +=\
    \ c\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of Array[Matchable] - did you mean Array[Matchable].!=?\n\
    \e[31m\e[31m-- Error: /tmp/tmpm2nxvvbn.scala:23:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m         where:    B is a type variable\n5 errors found\n"
  stdout: ''
  timestamp: 1660029489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val arr = text.split(\" \").toList\n       \
    \ var i = 1\n        while (i < arr.length) {\n            if (arr(i).equals(arr(i-1)))\
    \ {\n                arr(i) = arr(i).replaceAll(\"\\\\s+\", \"_\")\n         \
    \   } else if (arr(i).equals(arr(i+1))) {\n                arr(i) = arr(i).replaceAll(\"\
    \\\\s+\", \"-\")\n            } else {\n                i += 1\n            }\n\
    \        }\n        arr.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp82q0xt5z.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                arr(i) = arr(i).replaceAll(\e[31m\"\\\
    \\s+\"\e[0m, \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\
    \e[31m   |\e[0mvalue update is not a member of List[String] - did you mean arr.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp82q0xt5z.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                arr(i) = arr(i).replaceAll(\e[31m\"\\\
    \\s+\"\e[0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\
    \e[31m   |\e[0mvalue update is not a member of List[String] - did you mean arr.updated?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val sb = new StringBuilder\n        var lastSpace\
    \ = text.indexOf(\" \")\n        while (lastSpace > -1) {\n            if (lastSpace\
    \ + 1 == text.length) {\n                sb.append(\" \")\n            } else\
    \ {\n                sb.append(text.charAt(lastSpace + 1))\n                sb.append(\"\
    \ \")\n            }\n            lastSpace = text.indexOf(\" \", lastSpace +\
    \ 1)\n        }\n        if (sb.length() > 2) {\n            sb.delete(0, sb.lastIndexOf('\
    \ '))\n            sb.replace(\" \", \"-\")\n        }\n        sb.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnqyltg2s.scala:29:23\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            sb.replace(\e[31m\"\
    \ \"\e[0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (\e[32m\" \"\e[0m : String)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnqyltg2s.scala:29:28 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            sb.replace(\e[31m\" \"\e[0m, \e[31m\"-\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (\e[32m\"-\"\e[0m : String)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = \"\"\n        var lastSpaceIndex\
    \ : Int = 0\n        for (i <- 0 until text.length){\n            var char = text.charAt(i)\n\
    \            if(char == ' '){\n                result += text.substring(lastSpaceIndex,\
    \ i)\n                lastSpaceIndex = i + 1\n                result += \"_\"\n\
    \            }\n            else if(char == '\\n'){\n                result +=\
    \ text.substring(lastSpaceIndex, i)\n                lastSpaceIndex = i + 1\n\
    \                result += \"-\"\n            }\n            else{\n         \
    \       result += char\n            }\n        }\n        result += text.substring(lastSpaceIndex,\
    \ text.length)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaimmmkse.scala:38)\n\tat Problem.main(tmpaimmmkse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text == null) {\n            throw new Exception(\"\
    You cannot fix spaces for null\")\n        }\n        if (text.length < 2) {\n\
    \            return text\n        }\n        var result : String = \"\"\n    \
    \    var isConsecutiveSpaces = false\n        var temp : String = text\n     \
    \   for (i <- 1 to text.length-1) {\n            if (text.charAt(i) == ' ') {\n\
    \                result += \"_\"\n                isConsecutiveSpaces = false\n\
    \            } else {\n                if (isConsecutiveSpaces == true) {\n  \
    \                  result += \"-\"\n                    isConsecutiveSpaces =\
    \ false\n                }\n                result += text.charAt(i)\n       \
    \         isConsecutiveSpaces = true\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8my2f26w.scala:41)\n\tat Problem.main(tmp8my2f26w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      var lastSpaceIndex = text.lastIndexOf(' ')\n \
    \     val newText = text\n      while (lastSpaceIndex > -1 && lastSpaceIndex <\
    \ text.length) {\n        lastSpaceIndex = text.lastIndexOf(' ', lastSpaceIndex\
    \ + 1)\n        if (lastSpaceIndex > -1 && lastSpaceIndex < text.length) {\n \
    \         lastSpaceIndex = text.lastIndexOf(' ', lastSpaceIndex + 1)\n       \
    \ }\n        newText = newText.substring(0, lastSpaceIndex) + newText.substring(lastSpaceIndex).replaceAll('\
    \ ', '-')\n      }\n      if (newText.length > 1) {\n        return newText\n\
    \      } else {\n        return \"\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8giqurkd.scala:23:102\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m        newText = newText.substring(\e\
    [31m0\e[0m, lastSpaceIndex) + newText.substring(lastSpaceIndex).replaceAll(\e\
    [31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \ ^^^\e[0m\n\e[31m   |\e[0m                                                  Found:\
    \    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m                                \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8giqurkd.scala:23:107 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        newText = newText.substring(\e[31m0\e[0m, lastSpaceIndex) + newText.substring(lastSpaceIndex).replaceAll(\e\
    [31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                                             \
    \     Found:    (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m                     \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text;\n        for (i <- 0 until\
    \ text.length()) {\n            if((text.charAt(i) == ' ') && ((i + 1) == text.length()))\
    \ {\n                result = result.replace(' ', '_');\n            } else if((text.charAt(i)\
    \ == ' ') && ((i + 1) < text.length())) {\n                result = result.replace('\
    \ ', '-');\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxlotzt8.scala:28)\n\tat Problem.main(tmpbxlotzt8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      val fixedText = text.split(' ').map(_.toUpperCase).map(_.replaceAll(\"\
    \\\\s\", \"\")).join(\"-\")\n      fixedText.length < text.length ? fixedText\
    \ : text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu2xsnwhp.scala:16:86 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mfixedText\e[0m = text.split(\e\
    [31m' '\e[0m).map(_.toUpperCase).map(_.replaceAll(\e[31m\"\\\\s\"\e[0m, \e[31m\"\
    \"\e[0m)).join(\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue join is not a member of Array[String] - did you mean\
    \ Array[String].wait?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2xsnwhp.scala:17:51\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m      fixedText.length <\
    \ text.length ? fixedText : \e[35mtext\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                                        ^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                         Not found: type text\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val charList = text.split(\"\")\n        val\
    \ fixedCharList = charList.map(c => {\n            if(c.equals(\" \")) {\n   \
    \             c\n            } else {\n                if(c.equals(c.toUpper))\
    \ {\n                    c.toLower\n                } else {\n               \
    \     c.toUpper\n                }\n            }\n        })\n        return\
    \ fixedCharList.toList.toString.replace(\" \" -> \"_\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvpax1or.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m(c.equals(c.toUpper)) {\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value toUpper is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvvpax1or.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    c.toLower\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ toLower is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvpax1or.scala:24:22\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    c.toUpper\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               value toUpper is not a member of String\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpvvpax1or.scala:28:45 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mreturn\e[0m fixedCharList.toList.toString.replace(\e\
    [31m\" \"\e[0m -> \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments ((String, String))\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def fix(text : String) : String = {\n      \
    \      val text = text.trim\n            if (text.nonEmpty) {\n              \
    \  if (text.head == ' ') {\n                    if (text.last.equals(' ')) {\n\
    \                        text.init\n                    } else {\n           \
    \             text + text.init\n                    }\n                } else\
    \ {\n                    text + text.init\n                }\n            }\n\
    \        }\n        val result = (for {\n            text <- text.split(\"\\\\\
    s+\")\n            fixedText = fix(text)\n        } yield fixedText).mkString(\"\
    \ \")\n        if (result.length() > 2) {\n            fix(result)\n        }\
    \ else {\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse2ecnju.scala:17:23 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mtext\e[0m = text.trim\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35mtext\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpse2ecnju.scala:18:12 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (text.nonEmpty) {\n\e[31m\e\
    [31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: String\n\e[31m   |\e[0m            Maybe you\
    \ are missing an else part for the conditional?\n\e[31m19 |\e[0m             \
    \   \e[33mif\e[0m (text.head == \e[31m' '\e[0m) {\n\e[31m20 |\e[0m           \
    \         \e[33mif\e[0m (text.last.equals(\e[31m' '\e[0m)) {\n\e[31m21 |\e[0m\
    \                        text.init\n\e[31m22 |\e[0m                    } \e[33melse\e\
    [0m {\n\e[31m23 |\e[0m                        text + text.init\n\e[31m24 |\e[0m\
    \                    }\n\e[31m25 |\e[0m                } \e[33melse\e[0m {\n\e\
    [31m26 |\e[0m                    text + text.init\n\e[31m27 |\e[0m           \
    \     }\n\e[31m28 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val tokens = text.split(\" \").toList\n    \
    \    val result = new StringBuilder\n        for (i <- 0 until tokens.length)\
    \ {\n            val word = tokens(i)\n            if (word.isEmpty) \n      \
    \          continue\n            if (word.equals(\"  \"))\n                result.append(word.replaceAll(\"\
    \ \", \"_\"))\n            else\n                result.append(word.replaceAll(\"\
    \ \", \"-\"))\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_k9jlsb.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val textChars = text.toCharArray\n        var\
    \ index = 0\n        var newString = \"\"\n        while (index < text.length){\n\
    \            val currentChar = textChars(index)\n            if (currentChar ==\
    \ ' '){\n                newString += \"_\"\n            }\n            if (currentChar\
    \ == ' '){\n                newString += \"-\"\n            }\n            index\
    \ += 1\n        }\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucenhpot.scala:32)\n\tat Problem.main(tmpucenhpot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val resultingText = text.replaceAll(\" \", \"\
    _\")\n        val consecutive = resultingText.split(\" \").filter(_ != \"_\")\n\
    \        if (consecutive.length > 2)\n            resultingText.split(\" \").foldLeft(resultingText){\n\
    \                case (res, space) => (res + space + \"-\")\n            }\n \
    \       else\n            resultingText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuo_2l0_j.scala:29)\n\tat Problem.main(tmpuo_2l0_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text.replaceAll(\" \", \"_\");\n\
    \        var consecutive = false;\n        var lastChar = \"\";\n        for(i\
    \ <- 0 until text.length){\n            if(text.charAt(i) == ' '){\n         \
    \       if(!consecutive){\n                    lastChar = text.charAt(i);\n  \
    \                  consecutive = true;\n                }\n                else{\n\
    \                    if(text.charAt(i - 1) == ' '){\n                        newText\
    \ = newText.replace(text.charAt(i), lastChar);\n                        consecutive\
    \ = false;\n                    }\n                    else{\n               \
    \         newText = newText.replace(text.charAt(i), '_' + lastChar);\n       \
    \                 consecutive = true;\n                    }\n               \
    \ }\n            }\n        }\n        newText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpojdqd7d0.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    lastChar\
    \ = text.charAt(i);\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Char\n\e[31m   |\e\
    [0m                               Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpojdqd7d0.scala:27:42 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        newText = newText.replace(text.charAt(i),\
    \ lastChar);\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments (Char, (lastChar : String))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpojdqd7d0.scala:31:42 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                        newText = newText.replace(text.charAt(i),\
    \ \e[31m'_'\e[0m + lastChar);\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence): String\n\
    \e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch arguments\
    \ (Char, String)\n3 errors found\n"
  stdout: ''
  timestamp: 1660029497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val tokens = text.split(\" \")\n        val\
    \ spaceTokens = tokens.filter(t => t == \" \")\n        val consecutiveSpaceTokens\
    \ = spaceTokens.zipWithIndex.filter(t => t._2==1).map(t => t._1).toList\n    \
    \    val consecutiveNonSpaceTokens = spaceTokens.filter(t => t == \" \").toList.filterNot(t\
    \ => t == \" \")\n        val nonSpaceTokens = consecutiveNonSpaceTokens.filter(t\
    \ => t != \" \")\n        val finalTokens = nonSpaceTokens.mkString(\"-\")\n \
    \       return finalTokens\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41235uuj.scala:25)\n\tat Problem.main(tmp41235uuj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029505
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text match {\n            case \" \" => \"_\"\
    \n            case s => s\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsbpk9mbr.scala:23)\n\tat Problem.main(tmpsbpk9mbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var index = 0\n \
    \       var length = 0\n        while (index < (result.length()-1)) {\n      \
    \      length += 1\n            if (result.charAt(index) == result.charAt(index+1))\
    \ {\n                result += result.charAt(index+1) + result.charAt(index)\n\
    \                index += 2\n            } else {\n                result += result.charAt(index)\n\
    \                index++\n            }\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplzj0m7rq.scala:26:23 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.toList.filter(x => x != \"\
    \ \")\n        val newSpaces = spaces.map(x => x + \"-\")\n        newSpaces.reduce(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgdyfbgkq.scala:16:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = text.toList.filter(\e\
    [36mx\e[0m => x != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val cleanedText = text.replaceAll(\"\\\\s+\"\
    , \"_\")\n        if (cleanedText.contains(\"_\")) {\n            return cleanedText.replace(\"\
    _\", \"-\")\n        } else {\n            return cleanedText\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5apfjmox.scala:25)\n\tat Problem.main(tmp5apfjmox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // 1. Replace spaces in text with underscores\n\
    \        // >>> text = \" Example 1\"\n        // >>> text.replaceAll(\" \", \"\
    _\")\n        // (\"_Example_1\")\n        // 2. Replace consecutive spaces with\
    \ -\n        // >>> text.replaceAll(\" \", \"-\")\n        // (\"_Example-1\"\
    )\n        \n        // 3. Return result\n        text.replaceAll(\" \", \"_\"\
    ).replaceAll(\" \", \"-\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvoe7unn.scala:31)\n\tat Problem.main(tmpsvoe7unn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result : String = \"\"\n        var currentString\
    \ : String = \"\"\n        for(str <- text.split(\" \")) {\n            currentString\
    \ = str\n            result += currentString + \"_\"\n        }\n        if(result.length\
    \ > 2) {\n            var start = 0\n            while((start < result.length)\
    \ && (result.charAt(start) == ' ')) {\n                start += 1\n          \
    \  }\n            while(result.charAt(start) == ' ') {\n                start\
    \ += 1\n            }\n            while(result.charAt(start) != ' ') {\n    \
    \            start += 1\n            }\n            var end = result.length -\
    \ 1\n            while(result.charAt(end) == ' ') {\n                end -= 1\n\
    \            }\n            while(end > start) {\n                result += \"\
    -\"\n                end -= 1\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 8\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.fixSpaces(tmpe_r5wjfo.scala:30)\n\tat Problem$.main(tmpe_r5wjfo.scala:45)\n\
    \tat Problem.main(tmpe_r5wjfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text != null && text.length > 1) {\n   \
    \         val text1 = text.split(\"\\\\s+\");\n            val text2 = text1.map(x\
    \ => x.replaceAll(\" \", \"_\"));\n            if (text2.length > 1) {\n     \
    \           val lastText = text2.last;\n                text2.remove(lastText);\n\
    \                text2.reverse.mkString(lastText + \" \")\n            }\n   \
    \         else\n                text2.mkString(\" \")\n        }\n        else\n\
    \            text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsi9jiiaq.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                text2.remove(lastText);\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ remove is not a member of Array[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val slines = text.split(\"\\n\")\n        val\
    \ linesWithSpaces = slines.map(_.split(\"\\\\s+\").map(_.toLowerCase).filter(x\
    \ => x.length > 2))\n        val linesWithOnlySpaces = linesWithSpaces.filter(_.length\
    \ == 1)\n        val linesWithConsecutiveSpaces = linesWithSpaces.filter(_.length\
    \ == 2)\n        val linesWithSpaces = linesWithSpaces.map(_.toUpperCase)\n  \
    \      slines.foldLeft(\"\\n\") { (result, line) => s\"$result$line\" }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpab2fth2t.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlinesWithSpaces\e[0m = linesWithSpaces.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlinesWithSpaces is already defined as \e[33mvalue\e[0m \e\
    [35mlinesWithSpaces\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.replace(\" \",\"_\")\n   \
    \     if(text.contains(\" \")){\n            var lastSpace = false\n         \
    \   var temp = \"\"\n            var temp2 = \"\"\n            for(x <- text){\n\
    \                if(x == \" \"){\n                    if(!lastSpace){\n      \
    \                  temp += x\n                    } else {\n                 \
    \       temp2 += x\n                    }\n                    lastSpace = true\n\
    \                } else {\n                    lastSpace = false\n           \
    \         temp += x\n                }\n            }\n            return temp\
    \ + temp2\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfmkqnwge.scala:22:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(x == \e[31m\" \"\e[0m){\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      val cleanText = text\n        .split(\"\\\\s\"\
    )\n        .map(_.toLowerCase)\n        .map(_.trim).toList\n        if (cleanText.length\
    \ < 2 || cleanText.zip(cleanText.tail).zipped.forall(_.length == 1))\n       \
    \   text\n        else\n          cleanText.zipWithIndex.map { case (s, i) =>\
    \ if (i != cleanText.length - 1) s\"_${s}\" else s }.mkString(\"\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwzcci5p.scala:20:66 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (cleanText.length < \e[31m2\e[0m\
    \ || cleanText.zip(cleanText.tail).zipped.forall(_.length == \e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue zipped is not a member of List[(String, String)] - did\
    \ you mean List[(String, String)].zipAll?\n1 error found\n"
  stdout: ''
  timestamp: 1660029509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var lastSpaceIndex = -1\n        var nextSpaceIndex\
    \ = -1\n        var resultString = \"\"\n        var inSpace = false\n       \
    \ for (i <- 0 to text.length-1) {\n            if (text(i) == \" \") {\n     \
    \           if (lastSpaceIndex == -1) {\n                    nextSpaceIndex =\
    \ i\n                } else {\n                    if (nextSpaceIndex == -1) {\n\
    \                        nextSpaceIndex = i\n                    } else {\n  \
    \                      nextSpaceIndex = 0\n                        lastSpaceIndex\
    \ = -1\n                    }\n                }\n                inSpace = true\n\
    \            } else if (inSpace) {\n                if (nextSpaceIndex == -1)\
    \ {\n                    lastSpaceIndex = i\n                } else if (i == lastSpaceIndex)\
    \ {\n                    nextSpaceIndex = i\n                } else if (text(i)\
    \ == \" \") {\n                    lastSpaceIndex = -1\n                }\n  \
    \              inSpace = false\n            }\n            if (lastSpaceIndex\
    \ != -1) {\n                resultString += \"_\"\n            }\n           \
    \ resultString += text(i)\n        }\n        if (resultString.length > 1) {\n\
    \            resultString = resultString.substring(0,resultString.length-1)\n\
    \        }\n        return resultString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps0apc1sv.scala:21:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (text(i) == \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmps0apc1sv.scala:38:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (text(i)\
    \ == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660029510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var text = text\n        var count = 0\n   \
    \     for(c <- text.toCharArray()){\n            if(c == ' '){\n             \
    \   count += 1\n            }\n            if(count == 2){\n                text.replace(\"\
    \ \", \"-\")\n                count = 0\n            }\n        }\n        text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3ybwldei.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mtext\e[0m = text\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvariable\e[0m \e[35mtext\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val pattern = \" +\"\n        val replacement\
    \ = \"-\"\n        val fixedText = text.replaceAll(pattern,replacement)\n    \
    \    if(fixedText.indexOf(\"  \") == -1)\n            return fixedText\n     \
    \   else\n            return fixSpaces(fixedText.replace(\"  \",\"-\")) \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpto6xsq1d.scala:26)\n\tat Problem.main(tmpto6xsq1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\"\\\\s\").map { \n            x\
    \ => x.replace(\" \", \"_\") \n        }.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxqp6cyg.scala:22)\n\tat Problem.main(tmpbxqp6cyg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replace(\"  \", \" \")\n\
    \        val splitText = fixedText.split(\" \").map(_.toUpperCase)\n        val\
    \ consecutiveSpaces = splitText.zip(splitText.tail).count(_ == _)\n        if\
    \ (consecutiveSpaces > 2) {\n            splitText.zipWithIndex.map(_.swap).takeWhile(_._2\
    \ != _._1).map {\n                case (l, i) => (l + l.substring(i, i + 2))\n\
    \            }.mkString(\"_\")\n        } else {\n            splitText.mkString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppgp_7gmi.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            splitText.zipWithIndex.map(_.swap).takeWhile(_._2\
    \ != _._1).map {\n\e[31m\e[31m   |\e[0m                                      \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \          value _2 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppgp_7gmi.scala:21:38 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mcase\e[0m (l, i) => (l + l.substring(i, i + \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value substring is not a\
    \ member of Int\n\e[31m\e[31m-- Error: /tmp/tmppgp_7gmi.scala:22:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }.mkString(\e[31m\"_\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m             where:    B is a type variable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result : String\n        var lastSpaceIndex\
    \ : Int = -1\n        text.split(\" \").foreach(word => {\n            if (lastSpaceIndex\
    \ == -1) {\n                result += \"_\" + word\n            } else {\n   \
    \             result += word + word.substring(lastSpaceIndex, 1)\n           \
    \ }\n            lastSpaceIndex = word.lastIndexOf(' ')\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E067] Syntax Error: /tmp/tmpkceu_3lo.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m : \e[35mString\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mDeclaration of \e\
    [33mvariable\e[0m \e[35mresult\e[0m not allowed here: only classes can have declared\
    \ but undefined members\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.map(s => if(s.equals(\" \"\
    ) || s.equals(\" \")) \"_\" else s)\n        val result2 = result.filter(s =>\
    \ s.equals(\" \"))\n        val result3 = result.filter(s => s.equals(\"  \"))\n\
    \        val result4 = result2.filter(s => s.equals(\" \"))\n        val result5\
    \ = result3.filter(s => s.equals(\"  \"))\n        result4.mkString(\"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1pvavvk.scala:24)\n\tat Problem.main(tmpj1pvavvk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = for (word <- words) yield {\n            if(word != \" \"){\n            \
    \    word\n            } else {\n                word.dropRight(2)\n         \
    \   }\n        }\n        val text = newWords.mkString(\" \")\n        val count\
    \ = text.count(\" \")\n        if(count > 1){\n            text = text.replaceAll(\"\
    \\\\s+\", \"-\")\n        }\n        text\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp01gc5ijr.scala:17:36 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = \e[33mfor\e\
    [0m (word <- words) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \   Recursive \e[33mvalue\e[0m \e[35mwords\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp01gc5ijr.scala:27:17 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            text = text.replaceAll(\e[31m\"\\\\s+\"\e\
    [0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\" \").foldLeft(\"\") {\n       \
    \     (res, str) =>\n            val spaceIndex = res.lastIndexOf(' ');\n    \
    \        if (spaceIndex != -1) {\n                if (str.length() == spaceIndex)\
    \ {\n                    res + str\n                } else {\n               \
    \     res + str.substring(spaceIndex).toUppercase + str.substring(0, spaceIndex).toLowerCase\n\
    \                }\n            } else {\n                res + str\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzux5wr1y.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    res + str.substring(spaceIndex).toUppercase\
    \ + str.substring(\e[31m0\e[0m, spaceIndex).toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toUppercase is not a member of String - did you mean String.toUpperCase?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var out: String = text\n        // Replace any\
    \ number of spaces with underscores\n        out = out.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        // If the string has more than 2 spaces, replace any 2 or more\
    \ consecutive spaces with \"-\" \n        if (out.split(\" \").length > 2){\n\
    \            out = out.replaceAll(\"\\\\s+{2,}\", \"_\")\n        }\n        return\
    \ out\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe18b1ozm.scala:28)\n\tat Problem.main(tmpe18b1ozm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpacePattern = \n            \"\"\"^(\\s){2,}\"\"\".r\n\
    \        consecutiveSpacePattern.findAllIn(text).map(_.group(1)).filter(_.nonEmpty).toList\
    \ match {\n          case Nil if text.trim.nonEmpty => text\n          case _\
    \ => text.replaceAllIn(consecutiveSpacePattern, \"-\")\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky3q55sf.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        consecutiveSpacePattern.findAllIn(text).map(_.group(\e\
    [31m1\e[0m)).filter(_.nonEmpty).toList \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                   value group is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky3q55sf.scala:19:73 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        consecutiveSpacePattern.findAllIn(text).map(_.group(\e\
    [31m1\e[0m)).filter(_.nonEmpty).toList \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                                                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue nonEmpty is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky3q55sf.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m          \e[33mcase\e[0m\
    \ _ => text.replaceAllIn(consecutiveSpacePattern, \e[31m\"-\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ replaceAllIn is not a member of String - did you mean text.replaceAll?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = \" \".r findAllIn(text)\n     \
    \   val newText = spaces.map(s => if(s.length == 1) \"_\"+s else s.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n        (if (newText.length >= 2) \"-\"+newText.dropRight(2)\
    \ else newText)\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26xfr45v.scala:21)\n\tat Problem.main(tmp26xfr45v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n\n        // Remove consecutive\
    \ spaces\n        newText = newText.replaceAll(\" \", \"\");\n        if (newText.trim().length()\
    \ >= 3) {\n            newText = newText.replaceAll(\" \", \"-\");\n        }\n\
    \n        // Replace spaces with underscores\n        newText = newText.replaceAll(\"\
    \\\\s+\", \"_\");\n        return newText;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4yojb10h.scala:30)\n\tat Problem.main(tmp4yojb10h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n       if (text.length < 2) text\n       else {\n  \
    \        var newText = text\n          val s = text.trim\n          if (s.length\
    \ > 0)\n          {\n            newText = s.mkString.replaceAll(\" \",\"_\")\n\
    \            newText = newText.replaceAll(\" {2,}\", \"-\")\n          }\n   \
    \       newText\n       }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzrn8kml.scala:30)\n\tat Problem.main(tmpmzrn8kml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def fixed(text : String) : String = {\n    \
    \        if(text.indexOf(\"  \") > -1) return \"_\"\n            return text\n\
    \        }\n        return fixed(text).replaceAll(\" \",\"_\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0kc_fvel.scala:25)\n\tat Problem.main(tmp0kc_fvel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val chars = text.mkString.toCharArray\n    \
    \    val length = chars.length\n        var result = \"\"\n        var lastSpace\
    \ = -1\n        var i = 0\n        var j = -1\n        while (i < length) {\n\
    \            j = chars(i)\n            if (j == ' ') {\n                result\
    \ += chars(i)\n                i += 1\n            } else if (j < ' ') {\n   \
    \             result += chars(i)\n                i += 1\n            } else {\n\
    \                if (chars(i) == ' ') {\n                    result += chars(i)\n\
    \                    i += 1\n                } else {\n                    if\
    \ (lastSpace > i - 1 || chars(i) != ' ') {\n                        result +=\
    \ chars(i)\n                    } else {\n                        result += chars(i)\
    \ - ' ' // remove spaces\n                    }\n                    lastSpace\
    \ = i - 1\n                    i += 1\n                }\n            }\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bsxutxx.scala:49)\n\tat Problem.main(tmp5bsxutxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\" \", \"_\"\
    )\n        if (fixedText.size > 2) {\n            fixedText.replaceAll(\"  +\"\
    , \"-\")\n        } else {\n            fixedText\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7k57a9tw.scala:27)\n\tat Problem.main(tmp7k57a9tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        var start = 0\n\
    \        var end = 0\n        var spaces = 0\n        while ((end = fixedText.indexOf('\
    \ ', start)) > -1) {\n            spaces += 1\n            fixedText = fixedText.substring(0,\
    \ end) + \"_\" + fixedText.substring(end + 1)\n            start = end + 1\n \
    \       }\n        if ((end = fixedText.indexOf(' ', start)) > -1) {\n       \
    \     fixedText = fixedText.substring(0, end) + \"-\" + fixedText.substring(end\
    \ + 1)\n        }\n        fixedText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkklp0nzh.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m ((end = fixedText.indexOf(\e\
    [31m' '\e[0m, start)) > -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not\
    \ a member of Unit, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Unit.mkOrderingOps\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkklp0nzh.scala:25:50 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mif\e[0m ((end = fixedText.indexOf(\e[31m' '\e\
    [0m, start)) > -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of Unit, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Unit.mkOrderingOps\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if(text.length <= 2)\n            return text\n\
    \        val buffer = new StringBuilder(text)\n        buffer.replaceAll(\" \"\
    , \"_\")\n        val tokens = buffer.toString().split(\"_\")\n        if (tokens.size\
    \ > 2)\n            tokens.map(x => if (x.equals(\"-\"))\n                   \
    \ x.replaceAll(\" \", \"_\")\n                else\n                    x.replaceAll(\"\
    \ \", \"-\")).mkString\n        else\n            tokens.map(x => if (x.equals(\"\
    -\"))\n                    x\n                else\n                    x.replaceAll(\"\
    \ \", \"-\")).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9s3ietp.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        buffer.replaceAll(\e[31m\" \"\e[0m, \e[31m\"\
    _\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ replaceAll is not a member of StringBuilder - did you mean buffer.replace?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text;\n        var spaceCount\
    \ = 1;\n        var charCount = 0;\n        var prevChar = ' ';\n        var nextChar\
    \ = ' ';\n        var tempString = \"\";\n        while (true) {\n           \
    \ if (charCount > 2) {\n                tempString += \"-\";\n               \
    \ charCount = 1;\n            }\n            if (charCount == 2) {\n         \
    \       tempString += \"-\";\n            }\n            charCount += 1\n    \
    \        nextChar = text.charAt(charCount);\n            prevChar = text.charAt(charCount\
    \ - 1);\n            if (nextChar == ' ') {\n                spaceCount += 1\n\
    \            } else if (prevChar == ' ') {\n                spaceCount -= 1\n\
    \            }\n            newText = newText.replaceFirst(\" \", \"_\").replaceAll(\"\
    \ \", \"_\");\n            if (spaceCount == 0)\n                break;\n    \
    \    }\n        return newText\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx59zukdn.scala:40:16 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                break;\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var i = 0\n        var retVal : String = \"\"\
    \n        while(i < text.length()) {\n            if(text.charAt(i) == ' ') {\n\
    \                retVal += \"_\"\n                i += 1\n            } else {\n\
    \                retVal += text.charAt(i)\n                i += 1\n          \
    \  }\n        }\n        return retVal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezef4g8h.scala:33)\n\tat Problem.main(tmpezef4g8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Find all of the spaces\n        val spaces\
    \ = text.findAllMatchIn(\"\\\\s+\") // Find all spaces including tabs and newlines\
    \ in the string\n        val spaceCount = spaces.size\n        var fixedText =\
    \ text\n\n        // Replace all spaces with _\n        for( i <- 0 until spaceCount\
    \ ) fixedText =\n            fixedText.replace(\"\\\\s+\", \"_\") // Replace all\
    \ spaces with _\n\n        // If there are more than 2 consecutive spaces, replace\
    \ the two consecutive spaces with -\n        for(i <- 0 until spaceCount - 1 )\
    \ fixedText =\n            fixedText.replace(\"\\\\s{2,}\", \"_-\")\n        fixedText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfih4vw0t.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = text.findAllMatchIn(\e\
    [31m\"\\\\s+\"\e[0m) \e[34m// Find all spaces including tabs and newlines in the\
    \ string\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value findAllMatchIn is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText : String = text\n        val spaceIndexes\
    \ : Array[Int] = Array.fill(text.size + 1)(0)\n        // Find all spaces in text\n\
    \        for( x <- text.indices if x != text.size - 1 ) \n            if ( text.charAt(x)\
    \ == ' ' ) \n                spaceIndexes(x) = x + 1\n        // If there is a\
    \ space after a space, \n        // then insert underscores \n        for( x <-\
    \ spaceIndexes if spaceIndexes(x) > spaceIndexes(x + 1) ) \n            newText\
    \ = newText + (\"-\" * (spaceIndexes(x) - spaceIndexes(x + 1)) + text.charAt(x\
    \ + 1))\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2a7fxy70.scala:30)\n\tat Problem.main(tmp2a7fxy70.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        while(text.size >\
    \ 0){\n            val nextSpace = text.indexOf(\" \", 0)\n            val spaceIndex\
    \ = if (nextSpace == -1) -1 else nextSpace - 1\n            val spaceCount = text.count(_\
    \ == ' ')\n            if (spaceCount == 1 && spaceIndex > 0) {\n            \
    \    result = result.substring(0, spaceIndex) + \"_\" + result.substring(spaceIndex\
    \ + 1, result.length)\n            } else {\n                result = result.substring(0,\
    \ spaceIndex) + \"-\" + result.substring(spaceIndex + 1, result.length)\n    \
    \        }\n            text = text.substring(nextSpace + 1)\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwbsar2cl.scala:26:17 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            text = text.substring(nextSpace + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var firstSpace = true\n        var result =\
    \ \"\"\n        for (char <- text.toCharArray) {\n            if (char == ' ')\
    \ {\n                if (firstSpace) {\n                    firstSpace = false\n\
    \                } else {\n                    result = result + \"-\"\n     \
    \           }\n            } else {\n                firstSpace = true\n     \
    \           result = result + char\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdvle0mxu.scala:34)\n\tat Problem.main(tmpdvle0mxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      text match {\n        case x if x.trim().isEmpty()\
    \ => \"\"\n        case x => x.replaceAll(\" \", \"_\")\n      }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2p_8xxxq.scala:25)\n\tat Problem.main(tmp2p_8xxxq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixed = \"\"\n        var index = 0\n  \
    \      while (index < text.length) {\n            if (text.charAt(index) == '\
    \ ') {\n                fixed += \"_\"\n                index += 2\n         \
    \   } else {\n                fixed += text.charAt(index)\n                index\
    \ += 1\n            }\n        }\n        while (text.charAt(index) == ' ') {\n\
    \            fixed += \"_\"\n            index += 1\n        }\n        return\
    \ fixed\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 7\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.fixSpaces(tmp027863rp.scala:27)\n\tat Problem$.main(tmp027863rp.scala:34)\n\
    \tat Problem.main(tmp027863rp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\" \", \"_\")\n\
    \        if(newText.count > 2) newText.replaceAll(\" \", \"_\")\n        else\
    \ newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wx73ply.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m(newText.count > \e[31m2\e[0m) newText.replaceAll(\e\
    [31m\" \"\e[0m, \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val s = text.replace(\" \", \"_\")\n       \
    \ var fixed = s\n        val startIndex = 0\n        var endIndex = 0\n      \
    \  val index = text.indexOf(s)\n        while (index >= 0) {\n            endIndex\
    \ = index\n            fixed = fixed.substring(0, fixed.length - 1) + fixed.substring(endIndex\
    \ + 1, fixed.length)\n            index = text.indexOf(s, endIndex + 1)\n    \
    \    }\n        fixed\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpudujb1yx.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            index = text.indexOf(s, endIndex + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val index\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\"\
    _\");\n        if (fixedText.length()>2 && fixedText.contains(\"_\")) {\n    \
    \        val consecutivesSpaces = fixedText.replaceAll(\"\\\\s+\",\"_\");\n  \
    \          fixedText.replaceAll(\"\\\\s+\",\"-\")\n        } else {\n        \
    \    fixedText\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4b669wm.scala:27)\n\tat Problem.main(tmpm4b669wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n\n        // Replace the\
    \ spaces with underscores\n        newText = newText.replaceAll(\" \", \"_\")\n\
    \n        // If the string has more than 2 consecutive spaces\n        if (newText.length\
    \ > 2 && newText.replaceAll(\" \", \"\").length > 2) {\n            // Replace\
    \ the consecutive spaces with -\n            newText = newText.replaceAll(\" \"\
    , \"-\")\n        }\n\n        // Return the modified string\n        newText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpskpjlbwz.scala:34)\n\tat Problem.main(tmpskpjlbwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val tokens = text.split(\" \").filter(_ != \"\
    \")\n        val spaceCounts = tokens.groupBy(_.length).mapValues(_.length)\n\
    \        if (spaceCounts.size > 1) {\n            val fixedTokens = tokens.foldLeft(List.empty[String])\
    \ {\n                case (acc, token) => \n                    if (spaceCounts(token.length)\
    \ == 1) acc :+ token else acc :+ \"-\"\n            }\n            fixedTokens.mkString(\"\
    \ \")\n        } else {\n            tokens.mkString(\" \")\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjvutxmrw.scala:30)\n\tat Problem.main(tmpjvutxmrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var i = 1;\n        var chars = text.toCharArray()\n\
    \        var res = \"\"\n        for (c <- chars) {\n            if (c == ' ')\
    \ {\n                res += \"_\" + chars(i)\n                i = i + 1\n    \
    \        } else\n            if (i == chars.length - 1) {\n                res\
    \ += c\n            } else {\n                res += c\n                i = i\
    \ + 1\n            }\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09634wrr.scala:35)\n\tat Problem.main(tmp09634wrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var res = text\n        val spaceCounter = new\
    \ mutable.HashMap[String, Int]()\n        for (i <- text.indices) {\n        \
    \    val c = text(i).toChar\n            if (c == ' ') {\n                if (spaceCounter.contains(text(i+1).toString))\
    \ {\n                    res = res.substring(0, i)+\"-\"+ res.substring(i+1)\n\
    \                    spaceCounter -= text(i+1).toString\n                } else\
    \ {\n                    spaceCounter += text(i+1).toString\n                }\n\
    \            }\n        }\n        spaceCounter.foreach { case (k,v) =>\n    \
    \        if (v > 1) {\n                res = res.substring(0, k-1)+\"-\"+res.substring(k+1)\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvi_r3sv.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspaceCounter\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n       val spaceCount = text.count(_ == ' ')\n     \
    \  if(spaceCount == 2) text.replaceAll(\" \", \"-\")\n       else text\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_wl_emv.scala:22)\n\tat Problem.main(tmp7_wl_emv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var counts : mutable.Map[String, Int] = mutable.Map[String,\
    \ Int]()\n        text.foreach(c => counts += (c -> 1))\n        var newString\
    \ = \"\"\n        text.foreach(c => if((counts(c) + 1) > 2) newString += c.toChar\
    \ - \"_\")\n        newString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe337z6pq.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpe337z6pq.scala:16:48 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe337z6pq.scala:19:60\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        text.foreach(\e[36mc\e\
    [0m => \e[33mif\e[0m((counts(c) + \e[31m1\e[0m) > \e[31m2\e[0m) newString += c.toChar\
    \ - \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpe337z6pq.scala:19:72 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        text.foreach(\e[36mc\e[0m => \e[33mif\e[0m((counts(c) + \e[31m1\e\
    [0m) > \e[31m2\e[0m) newString += c.toChar - \e[31m\"_\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m-\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m\
    \   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((\e[32m\"_\"\e[0m : String))\n"
  stdout: ''
  timestamp: 1660029539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n       val newText = text.replaceAll(\"\\\\s+\",\"_\"\
    )\n       val consecSpace = newText.replaceAll(\" +\",\"-\")\n       if (consecSpace.contains(\"\
    -\"))\n          consecSpace\n       else\n          newText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghp7dwwf.scala:26)\n\tat Problem.main(tmpghp7dwwf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var text = text.toLowerCase()\n        val chars\
    \ = text.toList\n        val isTwoConsecutiveSpaces = \n        ( chars.takeWhile(\
    \ c => c != \" \" ) || chars.dropWhile( c => c != \" \" ).last ) == \" \"\n  \
    \      val isConsecutiveSpaces = \n        ( chars.takeWhile( c => c != \" \"\
    \ ) || chars.dropWhile( c => c != \" \" ).last ) == \" \"\n        val replaceWith\
    \ = \"_\"\n        if( isTwoConsecutiveSpaces ) \n        { \n            text.map(\
    \ c => c match { \n                case \" \" => replaceWith\n               \
    \ case c => c\n            } )\n        } else {\n            if( isConsecutiveSpaces\
    \ ) \n            {\n                text.map( c => c match { \n             \
    \       case \" \" => replaceWith\n                    case c => c\n         \
    \       } )\n            } else {\n                text\n            }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpex4ba1r5.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mtext\e[0m = text.toLowerCase()\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvariable\e[0m \e[35mtext\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaceReplacement = new mutable.StringBuilder()\n\
    \        var lastSpace = 0\n        text.foreach {\n            c =>\n       \
    \     if (c == ' ') {\n                if (lastSpace == 0) {\n               \
    \     spaceReplacement.append(c).append('_')\n                } else {\n     \
    \               spaceReplacement.append(c).append('-')\n                }\n  \
    \          } else {\n                spaceReplacement.append(c).append('_')\n\
    \            }\n            lastSpace = c\n        }\n        spaceReplacement.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzmvbe6f.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspaceReplacement\e[0m =\
    \ \e[33mnew\e[0m mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text = text.replaceAll(\" \",\"_\")\n      \
    \  if(text.length > 2){\n            val temp = text\n            while(temp.length\
    \ > 2) {\n                text = text.replaceAll(\" \",\"-\")\n              \
    \  temp = temp.replaceAll(\" \",\"-\")\n            }\n        }\n        text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp21u5lqdb.scala:16:13 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        text = text.replaceAll(\e[31m\" \"\e[0m,\e[31m\"\
    _\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Reassignment to val text\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp21u5lqdb.scala:20:21 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                text = text.replaceAll(\e[31m\" \"\e\
    [0m,\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val text\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp21u5lqdb.scala:21:21 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                temp = temp.replaceAll(\e[31m\" \"\e\
    [0m,\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val temp\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val replaced = text.replaceAll(\" \",\"_\")\n\
    \        val replaced2 = replaced.replaceAll(\"  \",\"-\")\n        if (replaced.length\
    \ > 2)\n            return replaced2.substring(0,replaced2.length-2) + \"-\" +\
    \ replaced2.substring(replaced2.length-1)\n        else\n            return replaced2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd00c44zy.scala:24)\n\tat Problem.main(tmpd00c44zy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.replaceAll(\" \", \"_\").replaceAll(\"\\\
    \\s+\", \"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpteqmtc8c.scala:22)\n\tat Problem.main(tmpteqmtc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val sb = new StringBuilder\n        val spaceRegex\
    \ = new Regex(\" {2,}\")\n        val lastSpaceRegex = new Regex(\" {2,} *\")\n\
    \        val lastSpaceStr = new String\n        val spaceStr = new String\n  \
    \      var nextSpace = 0\n        // loop through all chars\n        for (i <-\
    \ 0 to text.length - 1) {\n            if (text.charAt(i) == ' ') {\n        \
    \        if (nextSpace == 0) {\n                    sb.append(text.charAt(i))\n\
    \                }\n                else {\n                    sb.append(spaceStr)\n\
    \                }\n                nextSpace = 1\n            }\n           \
    \ else {\n                if (nextSpace != 0) {\n                    sb.append(lastSpaceStr)\n\
    \                    nextSpace = 0\n                }\n                sb.append(text.charAt(i))\n\
    \            }\n        }\n        if (nextSpace != 0) {\n            sb.append(lastSpaceStr)\n\
    \        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpakt2dlky.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspaceRegex\e[0m = \e[33mnew\e\
    [0m \e[35mRegex\e[0m(\e[31m\" {2,}\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: type Regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpakt2dlky.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mlastSpaceRegex\e[0m = \e[33mnew\e[0m \e[35mRegex\e[0m(\e[31m\" {2,} *\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Not found: type Regex\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replace(\" \", \"_\") //\
    \ Replace all spaces with underscores\n        var newText2 = newText\n      \
    \  // Look for consecutive spaces and make them dashes\n        var consecutive\
    \ = false\n        val start = newText2.indexOf(\"  \")\n        val end = newText2.indexOf(\"\
    \  \", start + 1)\n        if (start != -1) {\n            // The string has two\
    \ consecutive spaces\n            consecutive = true\n            for (i <- start\
    \ until end) {\n                newText2 = newText2.substring(0, i) + \"-\" +\n\
    \                            newText2.substring(i + 1)\n            }\n      \
    \  }\n        // Replace all consecutive dashes with one dash\n        if (consecutive)\
    \ {\n            newText2 = newText2.substring(0, start) + \"-\" +\n         \
    \               newText2.substring(start + 1)\n        }\n        // Put back\
    \ the underscores\n        newText2 = newText2.replace(\"_\", \" \")\n       \
    \ newText2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb87n25rx.scala:41)\n\tat Problem.main(tmpb87n25rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val textWithSpaces = text.replace(\"  \", \"\
    \ \")\n        var result = \"\"\n        var currIndex = 0\n        while (textWithSpaces.charAt(currIndex)\
    \ != \" \") {\n            if (currIndex > 0) {\n                result += textWithSpaces.charAt(currIndex\
    \ - 1)\n            }\n            result += textWithSpaces.charAt(currIndex)\n\
    \            currIndex++\n        }\n        if (textWithSpaces.charAt(currIndex)\
    \ == \" \") {\n            result += textWithSpaces.charAt(currIndex)\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp487i_7j2.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            currIndex++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp487i_7j2.scala:19:15\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mwhile\e[0m (textWithSpaces.charAt(currIndex) != \e[31m\" \"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp487i_7j2.scala:26:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (textWithSpaces.charAt(currIndex)\
    \ == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var spaces =  text.count(_ == ' ')\n       \
    \ if(spaces > 1) {\n            for(i <- 0 until spaces-1) {\n               \
    \ text = text.replace(i, i+1, \"_\")\n            }\n        }\n        text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp59zc2l3p.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                text = text.replace(i, i+\e[31m1\e[0m,\
    \ \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments ((i : Int), Int, (\e[32m\"\
    _\"\e[0m : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660029541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.length >= 2 && text.charAt(text.length\
    \ - 1) == ' ') {\n            val l = text.length\n            var newText = text.substring(0,\
    \ l - 1)\n            var lastSpace = -1\n            var nextSpace = -1\n   \
    \         while (lastSpace < text.length - 1 && lastSpace != nextSpace) {\n  \
    \              if (nextSpace == -1) nextSpace = lastSpace\n                val\
    \ s = text.charAt(nextSpace)\n                if (s.equals(\" \")) {\n       \
    \             lastSpace = nextSpace + 1\n                    nextSpace = lastSpace\n\
    \                } else {\n                    newText += s\n                \
    \    lastSpace = nextSpace\n                }\n            }\n            if (lastSpace\
    \ == -1) {\n                newText += text.charAt(lastSpace)\n            } else\
    \ {\n                newText += text.charAt(lastSpace)\n                newText\
    \ += \"-\"\n                newText += text.substring(lastSpace + 1)\n       \
    \     }\n            return newText\n        } else {\n            return text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.fixSpaces(tmpqzn0jb6y.scala:33)\n\tat Problem$.main(tmpqzn0jb6y.scala:46)\n\
    \tat Problem.main(tmpqzn0jb6y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.length == 1) {\n            text.mkString\n\
    \        } else {\n            if (text.contains(\" \")) {\n                val\
    \ firstSpacePos = text.indexOf(' ')\n                val firstSpace = text.substring(0,firstSpacePos)\n\
    \                val lastSpacePos = text.lastIndexOf(' ')\n                val\
    \ lastSpace = text.substring(lastSpacePos)\n                val newText = firstSpace\
    \ + lastSpace.replaceAll(' ', '-') + lastSpace\n                fixSpaces(newText)\n\
    \            } else {\n                text\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdmpd1tw.scala:24:64\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m\
    \ \e[36mnewText\e[0m = firstSpace + lastSpace.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m) + lastSpace\n\e[31m\e[31m   |\e[0m                                      \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                         Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdmpd1tw.scala:24:69 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mnewText\e[0m = firstSpace\
    \ + lastSpace.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m) + lastSpace\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                              \
    \    Found:    (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m                      \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var i = 0\n        var isConsecutive = true\n\
    \        var result = ''\n        while (i < text.length) {\n            result\
    \ += if (text.charAt(i) == ' ') {\n                if (isConsecutive) {\n    \
    \                '_'\n                } else {\n                    ' '\n    \
    \            }\n            } else {\n                text.charAt(i)\n       \
    \     }\n            i += 1\n            isConsecutive = (text.charAt(i) == '\
    \ ' && text.charAt(i + 1) == ' ') || (text.charAt(i) == ' ')\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpar3alfuk.scala:18:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = ''\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ empty character literal\n1 error found\n"
  stdout: ''
  timestamp: 1660029541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\" \").map(w => w match {\n     \
    \       case \" \" => \"_\"\n            case _ => w\n        }).mkString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9_ce010.scala:23)\n\tat Problem.main(tmpe9_ce010.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Return text if there are no spaces \n   \
    \     if(text.contains(\" \")) text\n        else {\n            // Build an array\
    \ of chars\n            val chars = text.map(_.toChar)\n            // If the\
    \ string contains no spaces, return text without changes\n            if(chars.forall(_.isSpace))\
    \ text\n            // Replace all spaces with underscores \n            else\
    \ text.replaceAll(\"\\\\s+\",\"_\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdfoub3xe.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(chars.forall(_.isSpace)) text\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value isSpace is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.trim().split(\" \")\n     \
    \   val output = new StringBuilder(text.length)\n        for(i <- 0 until words.length-1){\n\
    \            val word = words(i)\n            if(word.equals(\" \")){\n      \
    \          output.append(word.replaceAll(\" \", \"_\"))\n            }\n     \
    \       else if(word.equals(\" \")){\n                output.append(word.replaceAll(\"\
    \ \", \"-\"))\n            }\n            else{\n                output.append(word)\n\
    \            }\n        }\n        output.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrvrcg35.scala:33)\n\tat Problem.main(tmprrvrcg35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Create a mutable array of characters\n  \
    \      var chars : Array[Char] = text.toCharArray\n        val len : Int = chars.length\n\
    \        var i = 0\n        // Iterate over the mutable array in reverse order\n\
    \        while (i < (len-1)) {\n            // If current character is a space,\
    \ insert an underscore at the current index\n            if (chars(i) ==' ') {\n\
    \                chars = chars.updated(i, ' ')\n                chars = chars.updated(i+1,\
    \ ' ')\n                chars = chars.updated(i+2, ' ')\n                chars\
    \ = chars.updated(i+3, ' ')\n                chars = chars.updated(i+4, ' ')\n\
    \                chars = chars.updated(i+5, ' ')\n                chars = chars.updated(i+6,\
    \ ' ')\n                chars = chars.updated(i+7, ' ')\n            }\n     \
    \       i += 1\n        }\n        // Iterate over the array in forward order\n\
    \        var j = 0\n        while (j < (len-1)) {\n            // If current character\
    \ is an underscore, insert a hyphen at the current index\n            if (chars(j)\
    \ =='_') {\n                chars = chars.updated(j, ' ')\n                chars\
    \ = chars.updated(j+1, ' ')\n                chars = chars.updated(j+2, ' ')\n\
    \                chars = chars.updated(j+3, ' ')\n                chars = chars.updated(j+4,\
    \ ' ')\n                chars = chars.updated(j+5, ' ')\n                chars\
    \ = chars.updated(j+6, ' ')\n                chars = chars.updated(j+7, ' ')\n\
    \                chars = chars.updated(j+8, ' ')\n                chars = chars.updated(j+9,\
    \ ' ')\n            }\n            j += 1\n        }\n        new String(chars)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 14 is out of bounds (min 0, max 13)\n\
    \tat scala.collection.ArrayOps$.updated$extension(ArrayOps.scala:1552)\n\tat Problem$.fixSpaces(tmppvbvitd5.scala:31)\n\
    \tat Problem$.main(tmppvbvitd5.scala:57)\n\tat Problem.main(tmppvbvitd5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if(text == null || text.trim().isEmpty)\n  \
    \          return text\n        val words = text.split(\" \")\n        val words2\
    \ = words.map(_.replaceAll(\"\\\\s+\", \"_\"))\n        val words2String = words2.mkString(\"\
    \ \")\n        val result = words2String.replaceAll(\"_\\\\s+\", \"-\")\n    \
    \    \n        if(result.size > 2) {\n            result = result.replaceAll(\"\
    _+\", \"-\")\n        }\n        \n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmplk6e8pw8.scala:24:19 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result = result.replaceAll(\e[31m\"_+\"\e\
    [0m, \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val result\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var start = 0\n \
    \       var i = 0\n        while(i < text.length){\n            i += 1\n     \
    \       val found = text.indexOf(\" \", start)\n            if(found != -1){\n\
    \                var j = 0\n                while(j < found){\n              \
    \      j += 1\n                    val next = found + 1 \n                   \
    \ result += text.substring(start, next)\n                    start = next\n  \
    \              }\n                result += text.substring(start, found)\n   \
    \         }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 8, end 7, length 14\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmppgiy1v2i.scala:30)\n\tat Problem$.main(tmppgiy1v2i.scala:37)\n\
    \tat Problem.main(tmppgiy1v2i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = \"\\\\s+\"\n        val doubleSpaces\
    \ = \"\\\\s{2,}\"\n        val consecutiveSpaces = \"\\\\s+\"\n        val consecutiveSpaced\
    \ = \"-+\"\n        val consecutiveDoubleSpaces = \"\\\\s{2,}\"\n        val consecutiveDoubleSpaced\
    \ = \"-{2,}\"\n        val consecutiveDoubleDoubleSpaces = \"\\\\s{2,}\" + \"\\\
    \\s{2,}\"\n        val consecutiveDoubleDoubleSpaced = \"-{2,}\" + \"-{2,}\"\n\
    \        val spaced = \"_\"\n        val doubleSpaced = \"_\"\n        var newText\
    \ = \"\"\n        var foundSpace = false\n        var foundDoubleSpace = false\n\
    \        var foundDoubleDoubleSpace = false\n        var i = text.length()\n \
    \       var j = i\n        while (i < j) {\n            var char = text.charAt(i)\n\
    \            val charCount = 1\n            while (i < j) {\n                char\
    \ = text.charAt(i)\n                val charCount = charCount * 2\n          \
    \      if (char == spaces) {\n                    foundSpace = true\n        \
    \        } else if (char == doubleSpaces) {\n                    foundDoubleSpace\
    \ = true\n                } else if (char == consecutiveSpaces) {\n          \
    \          foundDoubleDoubleSpace = true\n                } else if (char == consecutiveDoubleSpaces)\
    \ {\n                    foundDoubleDoubleSpace = true\n                }\n  \
    \              if (charCount == 2) {\n                    if (foundDoubleDoubleSpace)\
    \ {\n                        newText += doubleDoubleSpaced\n                 \
    \       foundDoubleDoubleSpace = false\n                    } else if (foundDoubleSpace)\
    \ {\n                        newText += doubleSpaced\n                       \
    \ foundDoubleSpace = false\n                    } else if (foundSpace) {\n   \
    \                     newText += spaced\n                        foundSpace =\
    \ false\n                    } else if (foundDoubleSpace) {\n                \
    \        newText += doubleSpaced\n                        foundDoubleSpace = false\n\
    \                    } else if (foundSpace) {\n                        newText\
    \ += spaced\n                        foundSpace = false\n                    }\
    \ else {\n                        newText += char\n                    }\n   \
    \             } else if (charCount == 1) {\n                    if (foundDoubleSpace)\
    \ {\n                        newText += doubleSpaced\n                       \
    \ foundDoubleSpace = false\n                    } else if (foundSpace) {\n   \
    \                     newText += spaced\n                        foundSpace =\
    \ false\n                    } else if (foundDoubleSpace) {\n                \
    \        newText += doubleSpaced\n                        foundDoubleSpace = false\n\
    \                    } else if (foundSpace) {\n                        newText\
    \ += spaced\n                        foundSpace = false\n                    }\
    \ else {\n                        newText += char\n                    }\n   \
    \             } else {\n                    if (foundDoubleDoubleSpace) {\n  \
    \                      newText += doubleDoubleSpaced\n                       \
    \ foundDoubleDoubleSpace = false\n                    } else if (foundDoubleSpace)\
    \ {\n                        newText += doubleSpaced\n                       \
    \ foundDoubleSpace = false\n                    } else if (foundSpace\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkslz3j1.scala:90:4 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkslz3j1.scala:100:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpbkslz3j1.scala:37:32 ---------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                \e[33mval\e[0m \e[36mcharCount\e[0m = charCount\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\
    \e[31m   |\e[0m                                Recursive \e[33mvalue\e[0m \e[35mcharCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbkslz3j1.scala:38:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m38 |\e[0m       \
    \         \e[33mif\e[0m (char == spaces) {\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbkslz3j1.scala:40:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \         } \e[33melse\e[0m \e[33mif\e[0m (char == doubleSpaces) {\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpbkslz3j1.scala:42:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (char\
    \ == consecutiveSpaces) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbkslz3j1.scala:44:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (char\
    \ == consecutiveDoubleSpaces) {\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Create a mutable string that we will mutate\
    \ in place in the for loop\n        var fixedText = mutable.StringBuilder()\n\
    \        for( char <- text ) {\n            // If it is a space, then we replace\
    \ it with a dash\n            if(char == ' ') {\n                fixedText.append(\"\
    _\")\n            }\n            // If it is a dash, then we replace it with a\
    \ space\n            if(char == '-') {\n                fixedText.append(\" \"\
    )\n            }\n            // Otherwise we append the character\n         \
    \   else {\n                fixedText.append(char)\n            }\n        }\n\
    \        // Return the string\n        fixedText.result()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmpwi_w_f.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfixedText\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Replace all spaces with underscores\n   \
    \     var result = text.replaceAll(\"\\\\s+\", \"_\");\n\n        // If a string\
    \ has more than 2 consecutive spaces, \n        // replace all consecutive spaces\
    \ with - \n        if (text.length() > 2 && text.indexOf(\"  \") != -1) {\n  \
    \          val index = text.indexOf(\"  \");\n            val substringBefore\
    \ = text.substring(0, index + 1);\n            val substringAfter = text.substring(index\
    \ + 2);\n            result = substringBefore + \"-\" + substringAfter;\n    \
    \    }\n\n        // Return the new string\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2850yndq.scala:34)\n\tat Problem.main(tmp2850yndq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029556
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var buffer = new StringBuilder\n        var\
    \ lastSpace = -1\n        for (i <- 0 until text.length)\n            if (text.charAt(i)\
    \ == ' ') {\n                if (lastSpace >= 0) {\n                    buffer.append(text.charAt(lastSpace))\n\
    \                    lastSpace = -1\n                }\n                buffer.append(\"\
    _\")\n            } else {\n                lastSpace = i\n                buffer.append(text.charAt(i))\n\
    \            }\n        if (buffer.length() > 1) {\n            for (i <- 0 until\
    \ buffer.length()) {\n                if (i == 0) {\n                    buffer(i)\
    \ = buffer.charAt(i + 1)\n                } else {\n                    if (buffer.charAt(i)\
    \ == ' ' && buffer.charAt(i + 1) == ' ') {\n                        buffer.deleteCharAt(i\
    \ + 1)\n                    }\n                }\n            }\n        }\n \
    \       buffer.toString\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5_ykobo.scala:43)\n\tat Problem.main(tmpi5_ykobo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val res = text\n            .split(\" \")\n\
    \            .map(x => x.replace(\" \", \"_\"))\n            if (res.size > 1)\
    \ {\n                val startIndex = res.head.length\n                val endIndex\
    \ = res.last.length\n                val middleIndex = startIndex + (endIndex\
    \ - startIndex) / 2\n                if (middleIndex > 2) {\n                \
    \    val middle = res(middleIndex)\n                    val replace = middle.substring(0,\
    \ middleIndex).replaceAll(\" \", \"-\")\n                    res.remove(middle)\n\
    \                    res.insert(middleIndex, replace)\n                }\n   \
    \         }\n        res.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprz2gpsfl.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    res.remove(middle)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     value remove is not a member of Array[String]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmprz2gpsfl.scala:27:24 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                    res.insert(middleIndex, replace)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        value insert is not a member of Array[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660029559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var i = 0\n        while (i < text.length) {\n\
    \            if (text(i) == \" \") {\n                i += 1\n               \
    \ while (i < text.length && text(i) == \" \") {\n                    i += 1\n\
    \                }\n                if (i < text.length) {\n                 \
    \   val l = text.substring(0, i).split(\"-\")\n                    val r = text.substring(i\
    \ + 1).split(\"-\")\n                    var j = 0\n                    while\
    \ (j < r.length) {\n                        r (j) = r (j) + \"-\" + l (j)\n  \
    \                      j += 1\n                    }\n                    text\
    \ = r.mkString\n                }\n            }\n            i += 1\n       \
    \ }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9cn05jrl.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (text(i) == \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp9cn05jrl.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mwhile\e[0m (i < text.length &&\
    \ text(i) == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmp9cn05jrl.scala:31:25 -----------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                    text = r.mkString\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Reassignment to val text\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text;\n        val regex = Regex(\"\
    \\\\s+\");\n        result = regex.replaceAll(\" \", \"_\")\n        if(text.length\
    \ > 2) {\n            val regex = Regex(\"\\\\s+\");\n            result = regex.replaceAll(\"\
    \\\\s+\", \"-\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lieg7ri.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mregex\e[0m = Regex(\e[31m\"\
    \\\\s+\"\e[0m);\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: Regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2lieg7ri.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mregex\e[0m = Regex(\e\
    [31m\"\\\\s+\"\e[0m);\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: Regex\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Replace all spaces with underscores\n   \
    \     val fixedText = text.replaceAll(\" \", \"_\")\n\n        // Remove consecutive\
    \ spaces\n        if (fixedText.contains(\" \"))\n            fixedText.replace(\"\
    \ \", \"-\")\n\n        // Return the fixed string\n        fixedText\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvgy6wnr.scala:30)\n\tat Problem.main(tmpzvgy6wnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text flatMap {\n            case \" \" => \"\
    \ \"\n            case c => if (c == \" \"){\n                \"_\"\n        \
    \    } else {\n                c\n            }\n        } mkString \"\"\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfs4g5bbx.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e[31m\" \"\e[0m => \e[31m\"\
    \ \"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m   \
    \     Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpfs4g5bbx.scala:18:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m c => \e[33mif\e[0m (c ==\
    \ \e[31m\" \"\e[0m){\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfs4g5bbx.scala:16:13\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        text flatMap\
    \ {\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (f: Char => String): String\n\
    \e[31m   |\e[0m [B](f: Char => IterableOnce[B]): IndexedSeq[B]\n\e[31m   |\e[0mmatch\
    \ arguments (Char => Matchable)\n3 errors found\n"
  stdout: ''
  timestamp: 1660029561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val r = text.split(\"\\\\s\").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n        var c = 0\n        var n = 0\n        r.foreach {\n   \
    \         x =>\n                if(n > 0) {\n                    if((c == n-1))\
    \ x = x.replaceAll(\"\\\\s\",\"-\")\n                    else c = n\n        \
    \        }\n                c += 1\n            n += 1\n        }\n        r.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb9u0cxw7.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m((c == n-\e[31m1\e[0m))\
    \ x = x.replaceAll(\e[31m\"\\\\s\"\e[0m,\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Reassignment to val x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n       val textArray = text.toString.split(' ')\n  \
    \     textArray.map(i => i.split(' ')).map(i => i.replaceAll(\" \",\"_\")).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfef1ldz3.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m       textArray.map(\e[36mi\e[0m => i.split(\e[31m'\
    \ '\e[0m)).map(\e[36mi\e[0m => i.replaceAll(\e[31m\" \"\e[0m,\e[31m\"_\"\e[0m)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value replaceAll\
    \ is not a member of Array[String]\n\e[31m\e[31m-- Error: /tmp/tmpfef1ldz3.scala:17:71\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       textArray.map(\e\
    [36mi\e[0m => i.split(\e[31m' '\e[0m)).map(\e[36mi\e[0m => i.replaceAll(\e[31m\"\
    \ \"\e[0m,\e[31m\"_\"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val sb = new StringBuilder(text)\n        var\
    \ lastSpaceIndex = sb.lastIndexOf(\" \")\n        var newText = \"\"\n       \
    \ while (lastSpaceIndex != -1) {\n            newText += sb.substring(0,lastSpaceIndex)\
    \ + sb.substring(lastSpaceIndex+1, lastSpaceIndex+2) + \"-\" \n            lastSpaceIndex\
    \ = sb.lastIndexOf(\" \", lastSpaceIndex+1)\n        }\n        newText += sb.substring(0,lastSpaceIndex)\n\
    \        return newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: start 0, end -1, length 7\n\t\
    at java.base/java.lang.AbstractStringBuilder.checkRangeSIOOBE(AbstractStringBuilder.java:1810)\n\
    \tat java.base/java.lang.AbstractStringBuilder.substring(AbstractStringBuilder.java:1070)\n\
    \tat java.base/java.lang.StringBuilder.substring(StringBuilder.java:91)\n\tat\
    \ scala.collection.mutable.StringBuilder.substring(StringBuilder.scala:433)\n\t\
    at Problem$.fixSpaces(tmpxndve1nd.scala:23)\n\tat Problem$.main(tmpxndve1nd.scala:27)\n\
    \tat Problem.main(tmpxndve1nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // use mutable StringBuilder object to do your\
    \ magic\n        val sb = new StringBuilder(text)\n        val spaceReplacer =\
    \ \" \"\n        var last = 0\n        while(last < text.length){\n          \
    \  if(text(last) == spaceReplacer) last = last + 1\n            else last = last\
    \ + 1\n        }\n        last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9vtahxq5.scala:21:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(text(last) == spaceReplacer)\
    \ last = last + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vtahxq5.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        last\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (last : Int)\n\e\
    [31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.toString.split(\"\\\\s\").filter(_\
    \ != \" \")\n        if(spaces.length < 2) {\n            text + \"_\"\n     \
    \   } else if(spaces.length > 2) {\n            spaces.mkString(\"_\") + \"-\"\
    \n        } else {\n            text + \"_\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ha0zr_j.scala:26)\n\tat Problem.main(tmp4ha0zr_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var text : String = \"\"\n        for(i <- 1\
    \ to text.length){\n            text += text.charAt(i).toString.replaceAll(\"\
    \ \", \"_\")\n            if((i-1)%4 == 1){\n                text = text.replaceAll(\"\
    \ \", \"-\")\n            }\n        }\n        return text\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6krb_fn.scala:26)\n\tat Problem.main(tmpi6krb_fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var count = 0\n        var text = text.replaceAll(\"\
    \\\\s+\", \"_\")\n        for(i <- 1 until text.length){\n            if(text.charAt(i)\
    \ == text.charAt(i-1)){\n                count++\n            }\n        }\n \
    \       if (count >= 2){\n            text = text.replaceAll(\"\\\\s+\", \"-\"\
    )\n        }\n        text \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpimrfdq8v.scala:20:23 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpimrfdq8v.scala:17:19 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mtext\e[0m = text.replaceAll(\e[31m\"\\\\\
    s+\"\e[0m, \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\
    \e[31m   |\e[0m                   Recursive \e[33mvariable\e[0m \e[35mtext\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = new StringBuilder()\n        val\
    \ chars = text.chars\n        var lastChar = \"\"\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i) == ' ')\n                lastChar = ' '\n          \
    \  else\n                if (lastChar == '_')\n                    result.append(chars(i))\n\
    \                else\n                    result.append(chars(i))\n         \
    \       result.append(lastChar)\n        result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaxnpd1ed.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until chars.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value length is not a member of java.util.stream.IntStream\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpaxnpd1ed.scala:20:16 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (chars(i) == \e[31m' '\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   \e[33mvalue\e[0m \e[35mchars\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxnpd1ed.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                lastChar = \e[31m' '\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m               \
    \            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m              \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpaxnpd1ed.scala:23:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \         \e[33mif\e[0m (lastChar == \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpaxnpd1ed.scala:24:34 -----------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m                    result.append(chars(i))\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     \e[33mvalue\e[0m \e[35mchars\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpaxnpd1ed.scala:26:34 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    result.append(chars(i))\n\e[31m\e\
    [31m   |\e[0m                                  ^^^"
  stdout: ''
  timestamp: 1660029569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\" \").foldLeft(\"\")((c, s) => c\
    \ + (if (s == \" \") \"_\" else s))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjwbtkgp.scala:20)\n\tat Problem.main(tmppjwbtkgp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def helper(input : String) : String = {\n  \
    \          val output = input.replaceAll(\"\\\\s+\",\"_\");\n            if (output.contains(\"\
    -\")) {\n                output = output.replaceAll(\"\\\\s+\",\"-\");\n     \
    \       }\n            return output;\n        }\n        return helper(text).replaceAll(\"\
    _\",\" \");\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdyd55ka6.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                output = output.replaceAll(\e[31m\"\\\
    \\s+\"\e[0m,\e[31m\"-\"\e[0m);\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val output\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = mutable.ListBuffer[String]()\n\
    \        \n        for(word <- text.split(\"\\\\s+\")) {\n            if (word.length\
    \ > 2) {\n                word +:= \"_\"\n            }\n        }\n        \n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xlyfped.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3xlyfped.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                word +:= \e[31m\"_\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ +:= is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Your code here\n        val charArray = text.map(_.toChar)\n\
    \        val spaceArray = charArray.filter(c => c == ' ')\n        if (spaceArray.size\
    \ == text.size){\n            charArray\n        }else if (spaceArray.size > text.size){\n\
    \            val filteredArray = spaceArray.zip(charArray).filter(_._1 == ' '\
    \ && _._2 == ' ').map { case (a, b) => b}\n            filteredArray\n       \
    \ }else{\n            val filteredArray = spaceArray.zip(charArray).filter(_._1\
    \ == ' ' && _._2 != ' ').map { case (a, b) => a}\n            filteredArray\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwue5u5l4.scala:22:67 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mfilteredArray\e[0m =\
    \ spaceArray.zip(charArray).filter(_._1 == \e[31m' '\e[0m && _._2 == \e[31m' '\e\
    [0m).map { \e[33mcase\e[0m (a, b) => b}\n\e[31m\e[31m   |\e[0m               \
    \                                                  ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        value _1 is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwue5u5l4.scala:23:12 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            filteredArray\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (filteredArray\
    \ : IndexedSeq[Char])\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwue5u5l4.scala:25:67 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mfilteredArray\e[0m =\
    \ spaceArray.zip(charArray).filter(_._1 == \e[31m' '\e[0m && _._2 != \e[31m' '\e\
    [0m).map { \e[33mcase\e[0m (a, b) => a}\n\e[31m\e[31m   |\e[0m               \
    \                                                  ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        value _1 is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwue5u5l4.scala:26:12 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            filteredArray\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (filteredArray\
    \ : IndexedSeq[Char])\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def makeSpaces(text : String) : String = { \n\
    \            val words = text.split(\" \").map(_.toLowerCase).toList\n       \
    \     if (words.size == 1) {\n                text\n            } else {\n   \
    \             words.foldLeft((\"\",\"\"))((s,w)=> {\n                    if (s.length\
    \ != 0 && w.toString.toString.toLowerCase != \"\") {\n                       \
    \ (s+\"_\"+w.toString.toString.toLowerCase, \"\")\n                    } else\
    \ if (s.length == 0 && w.toString.toString.toLowerCase != \"\") {\n          \
    \              (s+w.toString.toLowerCase, \"\")\n                    } else {\n\
    \                        (s,w)\n                    }\n                })\n  \
    \          }\n        }\n        makeSpaces(text)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd6mxff7c.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m (s.length != \e[31m0\e\
    [0m && w.toString.toString.toLowerCase != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    value length is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpd6mxff7c.scala:23:26 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m                        (s+\e[31m\"_\"\e[0m+w.toString.toString.toLowerCase,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of (String, String), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd6mxff7c.scala:24:33 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    } \e[33melse\e[0m \e[33mif\e[0m (s.length\
    \ == \e[31m0\e[0m && w.toString.toString.toLowerCase != \e[31m\"\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value length is not a member of (String, String)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpd6mxff7c.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        (s+w.toString.toLowerCase, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of (String, String), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.I"
  stdout: ''
  timestamp: 1660029579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var res = text\n        var i = 0\n        var\
    \ j = 0\n        while (i < text.length){\n            if (text.charAt(i) == '\
    \ '){\n                res = res.substring(0, i) + \"_\" + res.substring(i + 1)\n\
    \                i = i + 1\n            }\n            if (i>= text.length-1){\n\
    \                res = res + text.substring(i)\n                i = i\n      \
    \      }\n            i = i + 1\n        }\n        return res.trim()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0531nuw4.scala:33)\n\tat Problem.main(tmp0531nuw4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.length < 2) \n            return text\n\
    \        val spaceIndex = text.indexOf(\" \")\n        var result = text\n   \
    \     while (spaceIndex >= 0) {\n            val spaceIndex = text.indexOf(\"\
    \ \", spaceIndex + 1)\n            if (spaceIndex >= 0) {\n                val\
    \ firstSpace = text.substring(0, spaceIndex)\n                val lastSpace =\
    \ text.substring(spaceIndex + 1, text.length)\n                val intermediateSpace\
    \ = text.substring(spaceIndex + 2, text.length)\n                if (intermediateSpace.length()\
    \ > 1) \n                    result = intermediateSpace.replaceAll(\" \", \"-\"\
    )\n                else {\n                    if (firstSpace.length() > 1) \n\
    \                        result = firstSpace.replaceAll(\" \", \"-\")\n      \
    \          }\n            }\n            else \n                break\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0jwoasxt.scala:21:47 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mspaceIndex\e[0m = text.indexOf(\e\
    [31m\" \"\e[0m, spaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Recursive \e[33mvalue\e[0m \e[35mspaceIndex\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jwoasxt.scala:34:16\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val chars = text.map(c => if (c == ' ') '_'\
    \ else c)\n        val prevChar = mutable.Buffer.empty[Char]\n        val res\
    \ = mutable.Buffer.empty[Char]\n        var i = 0\n        while (i < chars.length)\
    \ {\n            if (chars(i) == ' ' && prevChar.nonEmpty) {\n               \
    \ val s = prevChar + chars(i)\n                if (i == chars.length - 1) {\n\
    \                    res += s\n                } else {\n                    res\
    \ += if (s.last.equals('-') || s.last.equals('_')) s.last else s\n           \
    \     }\n                prevChar.clear()\n                i += 1\n          \
    \  } else {\n                prevChar.append(chars(i))\n                i += 1\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplpnlctne.scala:26:27 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    res += \e[33mif\e[0m (s.last.equals(\e\
    [31m'-'\e[0m) || s.last.equals(\e[31m'_'\e[0m)) s.last \e[33melse\e[0m s\n\e[31m\e\
    [31m   |\e[0m                           ^^\e[0m\n\e[31m   |\e[0m             \
    \              expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplpnlctne.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprevChar\e[0m = mutable.Buffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplpnlctne.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.Buffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val replacedText = (text replace (\" \",\"_\"\
    )) split (\"_\") foreach {\n            x => if (x.length > 2) x.replaceAll(\"\
    \\\\s+\",\"_\") else x\n        }\n        replacedText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4fn9n6t.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        replacedText\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (replacedText\
    \ : Unit)\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText : String = text\n        // Replace\
    \ all spaces with underscores\n        fixedText = fixedText.replace(\" \", \"\
    _\")\n        // If there is more than 1 space between words, then replace\n \
    \       // all the consecutive spaces with -\n        fixedText = fixedText.replace(\"\
    ( )\", \"-\")\n        // Return fixed text\n        fixedText\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2btqrmyx.scala:29)\n\tat Problem.main(tmp2btqrmyx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      var newText = text\n      var i = 0\n      while(i\
    \ < newText.length) {\n        val c = newText.charAt(i)\n        if(c == ' ')\
    \ {\n          newText = newText.substring(0,i) + \"_\" + newText.substring(i+1)\n\
    \          i = i+1\n        }\n        i += 1\n      }\n      newText.substring(0,newText.length-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqfn24qm.scala:29)\n\tat Problem.main(tmpuqfn24qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text match {\n            case \" \" => \"_\"\
    \n            case \" \" ~ \" \" => \"_\"\n            case a ~ b => a ~ b\n \
    \           case _ => text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gsdhy6r.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31m\" \"\e[0m ~ \e[31m\"\
    \ \"\e[0m => \e[31m\"_\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     Not found: ~\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7gsdhy6r.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m a ~ b => a ~ b\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: ~\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gsdhy6r.scala:19:28\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e\
    [0m a ~ b => a ~ b\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e\
    [31m   |\e[0m                          value ~ is not a member of Any\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText : String = \"\"\n        var index\
    \ = 0\n        while (index < text.length) {\n            if (text.isSpace)\n\
    \                newText = newText + \"-\"\n            else\n               \
    \ newText = newText + \" \"\n            index += 1\n        }\n        newText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp04mqk4ft.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (text.isSpace)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ isSpace is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\"\\\\s+\".r) \n    \
    \    val res = words.foldLeft( \"\" ) { case (acc, w) =>\n          acc + (if\
    \ (w.contains(' ')) \"_\" else if (w.size > 2) w.replace(\" \", \"-\") else w)\
    \ \n        } \n        res.length == 1 || res.last == \"-\" || res.length ==\
    \ 1 && res == \"\" ? res.head : res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0nr_bql8.scala:16:38\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m = text.split(\e[31m\"\\\\s+\"\e[0m.r) \n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Found:    scala.util.matching.Regex\n\e[31m   |\e[0m                    \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0nr_bql8.scala:20:88 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        res.length == \e[31m1\e[0m || res.last == \e[31m\"-\"\e[0m || res.length\
    \ == \e[31m1\e[0m && res == \e[31m\"\"\e[0m ? res.head : \e[35mres\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                          Not found: type res\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp0nr_bql8.scala:20:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        res.length == \e[31m1\e[0m || res.last == \e\
    [31m\"-\"\e[0m || res.length == \e[31m1\e[0m && res == \e[31m\"\"\e[0m ? res.head\
    \ : \e[35mres\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0nr_bql8.scala:20:75\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        res.length == \e\
    [31m1\e[0m || res.last == \e[31m\"-\"\e[0m || res.length == \e[31m1\e[0m && res\
    \ == \e[31m\"\"\e[0m ? res.head : \e[35mres\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                                  ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value ? is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660029584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def fix(text : String) : String = {\n      \
    \      text.split(\" \")\n            .replace(\" \", \"_\") \n            .groupBy(c\
    \ => c).mapValues(_.size).filter(_._2 > 2).mapValues(_.head).mkString(\"_\")\n\
    \        }\n        fix(text).replace(\"-\", \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3siuezz.scala:18:13 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            text.split(\e[31m\" \"\e[0m)\n\e[31m18 |\e\
    [0m            .replace(\e[31m\" \"\e[0m, \e[31m\"_\"\e[0m) \n\e[31m\e[31m   |\e\
    [0m            ^\e[0m\n\e[31m   |\e[0m            value replace is not a member\
    \ of Array[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\",\"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s{2,}\",\"-\")\n       \
    \ newText2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpivxxh02a.scala:23)\n\tat Problem.main(tmpivxxh02a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        def replaceConsecutiveSpaces(s : String) : String\
    \ = {\n            var result : String = \"\"\n            var inSpaces = false\n\
    \            var nextSpaces = 0\n            for (c <- s) {\n                if\
    \ (c == \" \") {\n                    if (!inSpaces) {\n                     \
    \   result += c\n                        nextSpaces = 1\n                    }\
    \ else {\n                        inSpaces = false\n                    }\n  \
    \              } else {\n                    inSpaces = true\n               \
    \     result += c\n                }\n            }\n            result += s.drop(nextSpaces)\n\
    \            result\n        }\n        def replaceSpaces(s : String) : String\
    \ = {\n            var result : String = \"\"\n            var inSpaces = false\n\
    \            for (c <- s) {\n                if (c == \" \") {\n             \
    \       if (!inSpaces) {\n                        result += c\n              \
    \      } else {\n                        inSpaces = false\n                  \
    \  }\n                } else {\n                    inSpaces = true\n        \
    \            result += c\n                }\n            }\n            result\n\
    \        }\n        text.split(\" \").map(x => x != \" \" ? x.replaceAll(\" \"\
    , \"_\") : x).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkla5f1h5.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (c == \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpkla5f1h5.scala:40:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                \e[33mif\e[0m (c == \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkla5f1h5.scala:53:69 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        text.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m\
    \ => x != \e[31m\" \"\e[0m ? x.replaceAll(\e[31m\" \"\e[0m, \e[31m\"_\"\e[0m)\
    \ : \e[35mx\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                       Not found: type x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkla5f1h5.scala:53:42\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        text.split(\e[31m\"\
    \ \"\e[0m).map(\e[36mx\e[0m => x != \e[31m\" \"\e[0m ? x.replaceAll(\e[31m\" \"\
    \e[0m, \e[31m\"_\"\e[0m) : \e[35mx\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      value ? is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpkla5f1h5.scala:53:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        text.split(\e[31m\" \"\e[0m).map(\e[36mx\e[0m\
    \ => x != \e[31m\" \"\e[0m ? x.replaceAll(\e[31m\" \"\e[0m, \e[31m\"_\"\e[0m)\
    \ : \e[35mx\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                          No ClassTag available for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                                          wh"
  stdout: ''
  timestamp: 1660029586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val result = text.split(\" \").map(_.replaceAll(\"\
    \ \", \"_\"))\n        if(result.length >= 2){\n            val temp = result\n\
    \            var i = 0\n            while(i < temp.length - 1){\n            \
    \    if(temp(i + 1).equalsIgnoreCase(temp(i))){\n                    i += 1\n\
    \                }else{\n                    temp = temp.substring(0, i) + \"\
    -\" +\n                           temp.substring(i + 1, temp.length)\n       \
    \             i = i\n                }\n            }\n            temp.substring(0,i)\n\
    \        }else{\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsuanm5dp.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    temp = temp.substring(\e[31m0\e[0m,\
    \ i) + \e[31m\"-\"\e[0m +\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value substring is not a member of\
    \ Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsuanm5dp.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            temp.substring(\e\
    [31m0\e[0m,i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            value substring is not a member of Array[String]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsuanm5dp.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            result\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (result : Array[String])\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(' ')\n        val wordCounts\
    \ = mutable.Map[String, Int]()\n        words.foreach(word => {\n            wordCounts(word)\
    \ += 1\n        })\n        val maxWordCount = wordCounts.maxBy(_._2)._2\n   \
    \     var fixedWords = List[String]()\n        val maxSpaceCount = wordCounts.maxBy(_._2)._1\n\
    \        val replaceSpaces = maxSpaceCount > 2\n        val replaceSpaceReplacement\
    \ = \"-\"\n        for (word <- words) {\n            if (wordCounts(word) > maxWordCount)\
    \ {\n                fixedWords.append(word + \" \" + replaceSpaceReplacement)\n\
    \            } else if (wordCounts(word) == maxWordCount) {\n                fixedWords.append(word)\n\
    \            } else if (replaceSpaces && wordCounts(word) == maxSpaceCount) {\n\
    \                fixedWords.append(word + \" \" + replaceSpaceReplacement)\n \
    \           } else {\n                fixedWords.append(word)\n            }\n\
    \        }\n        fixedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9m6krxt.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9m6krxt.scala:28:27\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                fixedWords.append(word\
    \ + \e[31m\" \"\e[0m + replaceSpaceReplacement)\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[String] - did you mean List[String].appended?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm9m6krxt.scala:30:27 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                fixedWords.append(word)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not\
    \ a member of List[String] - did you mean List[String].appended?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpm9m6krxt.scala:32:27 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                fixedWords.append(word + \e[31m\" \"\e\
    [0m + replaceSpaceReplacement)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[String] - did you mean\
    \ List[String].appended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9m6krxt.scala:34:27\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                fixedWords.append(word)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ append is not a member of List[String] - did you mean List[String].appended?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660029588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val textArr = text.split(\" \")\n        var\
    \ strArr : List[String] = Nil\n        var index = 0\n        for(x <- textArr){\n\
    \            if(index != 0 && x.equals(\" \") && x.equals(textArr[index-1])){\n\
    \                strArr = strArr :+ x.replace(\"_\",\" \")\n            } else\
    \ {\n                strArr = strArr :+ x\n            }\n            index +=\
    \ 1\n        }\n        val text = strArr.mkString(\"_\")\n        if(strArr.size\
    \ >= 2){\n            val index = textArr(strArr.size-1).indexWhere(x => x.equals(\"\
    \ \"))\n            val prefix = textArr(strArr.size - 2 - index).replace(\"_\"\
    ,\" \")\n            val suffix = textArr(index).replaceAll(\"_\",\" \")\n   \
    \         text = prefix + suffix\n        }\n        text\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzvfras0.scala:20:68 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(index != \e[31m0\e[0m && x.equals(\e\
    [31m\" \"\e[0m) && x.equals(textArr[\e[35mindex-\e[31m1\e[0m])){\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                                    \
    \   Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmprzvfras0.scala:32:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            text = prefix\
    \ + suffix\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var output : String = \"\"\n        var consecutiveSpacesCount\
    \ : Int = 0\n        var lastSpace : Boolean = false\n        text.foreach(c =>\
    \ {\n            output += (lastSpace) ? \" \" + c : c\n            lastSpace\
    \ = !lastSpace\n            if (c.toString.isSpace) {\n                consecutiveSpacesCount\
    \ += 1\n            } else {\n                consecutiveSpacesCount = 0\n   \
    \         }\n            if (consecutiveSpacesCount > 2) {\n                output\
    \ += \"-\"\n                consecutiveSpacesCount = 0\n            }\n      \
    \  })\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj8gqgubb.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            output += (lastSpace) ? \e[31m\" \"\e[0m\
    \ + c : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \     Not found: type c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj8gqgubb.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            output += (lastSpace)\
    \ ? \e[31m\" \"\e[0m + c : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj8gqgubb.scala:20:34\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            output += (lastSpace)\
    \ ? \e[31m\" \"\e[0m + c : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value ? is not\
    \ a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj8gqgubb.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (c.toString.isSpace) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value isSpace is not a member of String\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixed = text\n        fixed.foldLeft(text){\n\
    \            case (acc, c) =>\n                if (c == ' ')\n               \
    \     acc + \"_\"\n                else\n                    acc + \"-\" + c\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnv00kdx6.scala:26)\n\tat Problem.main(tmpnv00kdx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaceRegex = \"\"\"\\s\"\"\".r\n       \
    \ var newText : String = \"\"\n        var nextSpace : String = \"\"\n       \
    \ text match {\n            case spaceRegex() => newText += nextSpace\n      \
    \      case space => nextSpace = space\n            case _ =>\n        }\n   \
    \     val newText = newText.trim\n        if (newText != \"\") {\n           \
    \ newText ++ \"_\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpriprwrxt.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewText\e[0m = newText.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewText\
    \ is already defined as \e[33mvariable\e[0m \e[35mnewText\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpriprwrxt.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (newText\
    \ != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e\
    [0m        Maybe you are missing an else part for the conditional?\n\e[31m26 |\e\
    [0m            newText ++ \e[31m\"_\"\e[0m\n\e[31m27 |\e[0m        }\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var n = 1\n        var nextSpace = 1\n     \
    \   var prevSpace = 0\n        val text1 = text + \"_\"\n        var text2 = text\
    \ + \"_\"\n        var text3 = text + \"_\"\n\n        val text1Len = text1.length\n\
    \        val text2Len = text2.length\n        val text3Len = text3.length\n\n\
    \        if (text1Len > text2Len && text1Len > text3Len) {\n            n = text1Len\
    \ - text2Len\n            nextSpace = text2Len\n        } else if (text2Len >\
    \ text3Len) {\n            n = text2Len - text3Len\n            nextSpace = text3Len\n\
    \        }\n        \n        for (i<-n;i<=1;i++) {\n            if (text1.charAt(i)\
    \ == ' ') {\n                text2 = text2.substring(0, nextSpace) + \"_\" + text2.substring(nextSpace)\n\
    \                text3 = text3.substring(0, prevSpace) + \"_\" + text3.substring(prevSpace)\n\
    \                nextSpace = nextSpace + 1\n                prevSpace = nextSpace\n\
    \            } else {\n                text2 = text2 + text1.charAt(i)\n     \
    \           text3 = text3 + text1.charAt(i)\n            }\n        }\n      \
    \  return text2 + text3\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmploqhhd1i.scala:35:22 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mfor\e[0m (i<-n;i<=\e[31m1\e[0m;i++) {\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmploqhhd1i.scala:35:26 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mfor\e[0m (i<-n;i<=\e[31m1\e[0m;i++) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmploqhhd1i.scala:35:16\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mfor\e[0m (i<-n;i<=\e\
    [31m1\e[0m;i++) {\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \                value foreach is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        result = result.split(\"\
    \\\\s\").map(_.concat(\"-\")).mkString\n        result = result.split(\"\\\\s{2,}\"\
    ).map(_.concat(\"-\")).mkString\n        result = result.split(\"\\\\s\").mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7p0vzwyd.scala:23)\n\tat Problem.main(tmp7p0vzwyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // If text is empty, return empty string\n \
    \       if(text == \"\"){\n            return \"\"\n        }\n        // If text\
    \ has less than 2 spaces, return text\n        if(text.count(_.isSpace) < 2){\n\
    \            return text\n        }\n        val spaceIndex = text.lastIndexOf(\"\
    \ \").map(x => x.toInt)\n        // If spaceIndex is empty or text has no spaces,\
    \ return text\n        if(spaceIndex.isEmpty || text.split(\" \").length == 1){\n\
    \            return text\n        }\n        // If there are more than 2 consecutive\
    \ spaces, return text\n        if(text.count(x => x == \" \" && x.isSpace) > 2){\n\
    \            return text\n        }\n        // Get last space index in text\n\
    \        val lastSpaceIndex = text.lastIndexOf(\" \")\n        // Get space index\
    \ which has minimum value\n        val minSpaceIndex = spaceIndex.min\n\n    \
    \    // Iterate over spaceIndex from min to max\n        for(i <- minSpaceIndex\
    \ to lastSpaceIndex){\n            // If spaceIndex is equal to i, replace i with\
    \ \"_\"\n            if(spaceIndex(i) == i){\n                text = text.replace(i,\
    \ \"_\")\n            }\n            // If spaceIndex is greater than i and text\
    \ does not end with \"_\", \n            // replace it with \"_\"\n          \
    \  else if(spaceIndex(i) > i && !text.endsWith(\"_\")){\n                text\
    \ = text.replace(i, \"_\")\n            }\n            // If spaceIndex is less\
    \ than i and text does not begin with \"_\", \n            // replace it with\
    \ \"_\"\n            else if(spaceIndex(i) < i && !text.startsWith(\"_\")){\n\
    \                text = text.replace(i, \"_\")\n            }\n            //\
    \ If spaceIndex is equal to i and text does not end with \"_\", \n           \
    \ // replace it with \"_\"\n            else if(spaceIndex(i) == i && !text.endsWith(\"\
    _\")){\n                text = text.replace(i, \"_\")\n            }\n       \
    \     // If spaceIndex is greater than i and text does not begin with \"_\", \n\
    \            // replace it with \"_\"\n            else if(spaceIndex(i) > i &&\
    \ !text.startsWith(\"_\")){\n                text = text.replace(i, \"_\")\n \
    \           }\n            // If spaceIndex is less than i and text does not begin\
    \ with \"_\", \n            // replace it with \"_\"\n            else if(spaceIndex(i)\
    \ < i && !text.startsWith(\"_\")){\n                text = text.replace(i, \"\
    _\")\n            }\n            // If spaceIndex is equal to i, replace it with\
    \ \"-\"\n            else if(spaceIndex(i) == i){\n                text = text.replace(i,\
    \ \"-\")\n            }\n            // If spaceIndex is greater than i and text\
    \ does not end with \"-\", \n            // replace it with \"-\"\n          \
    \  else if(spaceIndex(i) > i && !text.endsWith(\"-\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps1tpj1fz.scala:75:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(spaceIndex(i)\
    \ > i && !text.endsWith(\"-\n\e[31m\e[31m   |\e[0m                           \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmps1tpj1fz.scala:77:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m77 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmps1tpj1fz.scala:86:0 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1tpj1fz.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(text.count(_.isSpace)\
    \ < \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value isSpace is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps1tpj1fz.scala:24:47 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mspaceIndex\e[0m = text.lastIndexOf(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           value map is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmps1tpj1fz.scala:30:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \ \e[33mif\e[0m(text.count(\e[36mx\e[0m => x == \e[31m\" \"\e[0m && x.isSpace)\
    \ > \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1tpj1fz.scala:30:41\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m(text.count(\e\
    [36mx\e[0m => x == \e[31m\" \"\e[0m "
  stdout: ''
  timestamp: 1660029593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text == null) return null\n        var fixedText\
    \ = text\n        if (fixedText.isEmpty) fixedText = \" \"\n        if (fixedText.trim.isEmpty)\
    \ fixedText = \" \"\n        if (fixedText.contains(\" \"))\n        {\n     \
    \       fixedText = fixedText.replaceAll(\" \", \"_\")\n            if (fixedText.contains(\"\
    _\"))\n            {\n                fixedText = fixedText.replaceAll(\"_\",\
    \ \"-\")\n            }\n        }\n        return fixedText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nmiw9tl.scala:32)\n\tat Problem.main(tmp_nmiw9tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text.foldLeft(\"\")((result, char)\
    \ => {\n            result += char.codePoints().find(_ == ' ').orElse(\"-\")\n\
    \            result += char.codePoints().dropWhile(_ == ' ')\n            result\
    \ += char.codePoints().takeWhile(_ == ' ').drop(1)\n            result += char.codePoints().takeWhile(_\
    \ == ' ').dropWhile(_ == ' ')\n            result += char.codePoints().takeWhile(_\
    \ == ' ').drop(1)\n            result += char.codePoints().takeWhile(_ == ' ').dropWhile(_\
    \ == ' ')\n            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n\
    \            result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == '\
    \ ')\n            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n  \
    \          result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n\
    \            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n       \
    \     result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n  \
    \          result += char.codePoints().takeWhile(_ == ' ').drop(1)\n         \
    \   result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n    \
    \        result += char.codePoints().takeWhile(_ == ' ').drop(1)\n           \
    \ result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n      \
    \      result += char.codePoints().takeWhile(_ == ' ').drop(1)\n            result\
    \ += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n            result\
    \ += char.codePoints().takeWhile(_ == ' ').drop(1)\n            result += char.codePoints().takeWhile(_\
    \ == ' ').dropWhile(_ == ' ')\n            result += char.codePoints().takeWhile(_\
    \ == ' ').drop(1)\n            result += char.codePoints().takeWhile(_ == ' ').dropWhile(_\
    \ == ' ')\n            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n\
    \            result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == '\
    \ ')\n            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n  \
    \          result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n\
    \            result += char.codePoints().takeWhile(_ == ' ').drop(1)\n       \
    \     result += char.codePoints().takeWhile(_ == ' ').dropWhile(_ == ' ')\n  \
    \          result += char.codePoints().takeWhile(_ == ' ').drop\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm80rgz5l.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpm80rgz5l.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm80rgz5l.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += char.codePoints().find(_ == \e\
    [31m' '\e[0m).orElse(\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm80rgz5l.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            result += char.codePoints().find(_\
    \ == \e[31m' '\e[0m).orElse(\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ codePoints is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm80rgz5l.scala:18:19\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            result += char.codePoints().dropWhile(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean result.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm80rgz5l.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result += char.codePoints().dropWhile(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value codePoints is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm80rgz5l.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            result += char.codePoints().takeWhile(_ ==\
    \ \e[31m' '\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did yo"
  stdout: ''
  timestamp: 1660029600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if(text.length == 0) return text\n        if(text.split(\"\
    \\\\s\").length > 2) {\n            val sb :StringBuilder = new StringBuilder()\n\
    \            text.split(\" \").foreach(x => {\n                if(sb.length()\
    \ > 0) sb.append(\" \")\n                sb.append(x)\n            })\n      \
    \      return sb.toString()\n        }\n        text.split(\"\\\\s\").foreach(x\
    \ => text.replaceAll(\" \",\"_\"))\n        return text\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6axvwcv5.scala:30)\n\tat Problem.main(tmp6axvwcv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val clean = text\n        val length = clean.length\n\
    \        val spaced = clean.filter(c => c == ' ') // exclude spaces\n        val\
    \ cleanSpaced = spaced.mkString  // make a string from spaced string\n       \
    \ val doubleSpaced = cleanSpaced.length == 2 // if the length == 2, it has to\
    \ be consecutive\n        val replaced = cleanSpaced.replaceAll(\" \", \"_\")\
    \ // replace spaces with underscore\n        val replacedLength = replaced.length\
    \ // count the replaced length\n        var newText = if (length == replacedLength)\
    \ replaced else replaced + \"_\"\n        // if the length of the replaced is\
    \ 2 and not consecutive\n        if (doubleSpaced && replacedLength == 2) newText\
    \ += \"-\"\n        else newText\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3fppvjco.scala:25:49\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (doubleSpaced\
    \ && replacedLength == \e[31m2\e[0m) newText += \e[31m\"-\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                 ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.length > 3) {\n            var i :\
    \ Int = 0\n            while (i < text.length) {\n                if (text.charAt(i)\
    \ == ' ') {\n                    if (i+1 < text.length && text.charAt(i+1) ==\
    \ ' ') {\n                        text = \"_\"+text\n                    } else\
    \ {\n                        text = \"-\"+text\n                    }\n      \
    \          }\n                i += 1\n            }\n        }\n        return\
    \ text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5q96t_i7.scala:21:29 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                        text = \e[31m\"_\"\e[0m+text\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Reassignment to val text\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp5q96t_i7.scala:23:29 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        text = \e[31m\"-\"\e[0m+text\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Reassignment to val text\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(\"\\\\s+\")\n      \
    \  if (spaces > 2) {\n            val dash = text.substring(0, spaces - 2)\n \
    \           text = text.replaceAll(\"\\\\s+\", dash)\n        }\n        text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0r9qgx07.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspaces\e\
    [0m = text.count(\e[31m\"\\\\s+\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Found:    (\e[32m\"\\\\s+\"\e[0m : String)\n\e[31m   |\e[0m                \
    \                Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp0r9qgx07.scala:19:17 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            text = text.replaceAll(\e[31m\"\\\\s+\"\e[0m,\
    \ dash)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Convert text to an array of chars \n    \
    \    val chars = text.toCharArray\n        // Initialize an array of Booleans\
    \ indicating whether a space was found\n        val foundSpace = Array[Boolean](text.length)\n\
    \        // Initialize a String which will contain the transformed text\n    \
    \    val result = \"\"\n\n        // Loop through chars and keep track of the\
    \ space index \n        var i : Int = 0\n        while (i < chars.length) {\n\
    \            // If the character is equal to space (ASCII 32), mark it as found\n\
    \            if (chars(i) == 32) {\n                foundSpace(i) = true\n   \
    \         }\n            // Increment the index\n            i += 1\n        }\n\
    \n        // Loop through chars and replace spaces with underscores\n        i\
    \ = -1\n        while (i < chars.length) {\n            // If the space has been\
    \ found\n            if (foundSpace(i)) {\n                // Replace the space\
    \ with underscore\n                result += chars(i).toString + \"_\"\n     \
    \       }\n            // Increment the index\n            i += 1\n        }\n\
    \n        // Return the result\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5t35ndk.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfoundSpace\e\
    [0m = Array[\e[35mBoolean\e[0m](text.length)\n\e[31m\e[31m   |\e[0m          \
    \                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                           Found:    Int\n\e[31m   |\e[0m                   \
    \                     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt5t35ndk.scala:40:23 ------------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m                result += chars(i).toString + \e[31m\"_\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of String - did you mean result.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n       val tokens = text.split(\" \")\n       var res\
    \ = text.trim.replaceAll(\" \", \"_\")\n       for (i <- 1 to tokens.length -\
    \ 2) {\n           res = res.replaceAll(\" \" + tokens(i) + \"$\", \"_\" + tokens(i))\n\
    \       }\n       res\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8brw0w92.scala:25)\n\tat Problem.main(tmp8brw0w92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = new mutable.ArrayBuffer[String]()\n        for (word <- words) {\n       \
    \     val fixedWord = word.replaceAll(\" \", \"_\")\n            if (fixedWord.length\
    \ > 2 || (fixedWord.length == 1 && word != \" \")) {\n                fixedWords.append(fixedWord\
    \ + \"-\")\n            } else {\n                fixedWords.append(fixedWord)\n\
    \            }\n        }\n        fixedWords.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvq4wch3g.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var i = 0\n        var newText : String = \"\
    \"\n        var lastSpaces : Int = 0\n        var lastChar = ' '\n        while\
    \ (i < text.length) {\n            val c = text.charAt(i)\n            if (c ==\
    \ ' ') {\n                if (lastSpaces == 0) {\n                    newText\
    \ += c\n                    lastSpaces = 1\n                } else {\n       \
    \             newText += '-'\n                    lastSpaces = 0\n           \
    \     }\n                lastChar = c\n            } else {\n                if\
    \ (lastChar == ' ') {\n                    newText += c\n                    lastChar\
    \ = c\n                    lastSpaces = 1\n                } else {\n        \
    \            newText += c\n                    lastChar = c\n                \
    \    lastSpaces = 0\n                }\n            }\n            i += 1\n  \
    \      }\n        if (newText.length > 1) {\n            val space = newText.indexOf('\
    \ ')\n            newText = newText.substring(0, space) + '-' + newText.substring(space+1,\
    \ newText.length)\n        }\n        return newText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 7\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpjuxae29k.scala:46)\n\tat Problem$.main(tmpjuxae29k.scala:51)\n\
    \tat Problem.main(tmpjuxae29k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = \"[\\\\s]+\"\n        val fixed\
    \ = text.replaceAll(spaces, \" \")\n        val consecutiveSpaces = \"\\\\s[\\\
    \\s]+\"\n        val consecutiveFixed = fixed.replaceAll(consecutiveSpaces, \"\
    -\")\n        if (fixed.size > 1 && fixed.contains(\"  \")) {\n            consecutiveFixed\n\
    \        } else {\n            fixed\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcolzhfwj.scala:28)\n\tat Problem.main(tmpcolzhfwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spacePattern: String = \" \"\n        var\
    \ consecutiveSpacesCount = 0\n        var fixedText = text\n\n        while (consecutiveSpacesCount\
    \ < 2) {\n            consecutiveSpacesCount = text.count(spacePattern)\n    \
    \        fixedText = fixedText.replaceAll(spacePattern, \"_\")\n        }\n\n\
    \        return fixedText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpycz06pwc.scala:21:48\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            consecutiveSpacesCount\
    \ = text.count(spacePattern)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                   Found:    (spacePattern : String)\n\e[31m   |\e[0m       \
    \                                Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Convert the string to mutable collection\n\
    \        val mc = text.chars().toList.mutable\n\n        // Iterate over each\
    \ character in the string\n        mc foreach {\n        case c : Char => \n \
    \           if (c == ' ') \n                mc.remove(c)\n            else if\
    \ (c == ' ')\n                mc += ('_')\n            else if (c == ' ')\n  \
    \              mc += ('-')\n        }\n        // Return string\n        mc mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppzor9f5a.scala:30:19 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        mc mkString\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzor9f5a.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmc\e[0m = text.chars().toList.mutable\n\e[31m\e[31m   |\e[0m             \
    \    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value toList is not\
    \ a member of java.util.stream.IntStream\n2 errors found\n"
  stdout: ''
  timestamp: 1660029603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val splitted = text.split(\" \")\n        val\
    \ cleanedText = (splitted.map { x => x.replaceAll(\"\\\\s+\",\"_\") }).mkString\n\
    \n        if(splitted.size == 1) {\n            cleanedText\n        } else {\n\
    \            if(splitted.size == 2) {\n                cleanedText\n         \
    \   } else {\n                cleanedText.replaceAll(\"\\\\s+\",\"-\")\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiamsaojn.scala:31)\n\tat Problem.main(tmpiamsaojn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val buffer = new StringBuilder\n        var\
    \ index = 0\n        while (index < text.length) {\n            val next = if\
    \ (index+1 < text.length) text(index+1).equals(text(0)) ? index+2 : index+1\n\
    \            else text.length\n            buffer.append(text.substring(index,\
    \ next))\n            index = next\n        }\n        buffer.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7ezgs09.scala:19:97 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnext\e[0m = \e[33mif\e\
    [0m (index+\e[31m1\e[0m < text.length) text(index+\e[31m1\e[0m).equals(text(\e\
    [31m0\e[0m)) ? index+\e[31m2\e[0m : \e[35mindex+\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                         Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl7ezgs09.scala:19:80 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnext\e[0m = \e[33mif\e\
    [0m (index+\e[31m1\e[0m < text.length) text(index+\e[31m1\e[0m).equals(text(\e\
    [31m0\e[0m)) ? index+\e[31m2\e[0m : \e[35mindex+\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val regex = \" +\"\n        var fixedText =\
    \ text\n        val matchList = text.split(regex)\n        \n        for (i <-\
    \ 0 until matchList.length - 1){\n            if (matchList(i).equals(matchList(i+1))){\n\
    \                fixedText = fixedText.replaceFirst(matchList(i), \"_\")\n   \
    \         }\n            else{\n                fixedText = fixedText.replaceFirst(matchList(i),\
    \ \"\")\n            }\n        }\n        fixedText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppczh8l1h.scala:32)\n\tat Problem.main(tmppczh8l1h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.foldLeft(\"\"){(acc, s)\
    \ => \n            if(s.equals(\" \")){\n                acc + \"_\"\n       \
    \     }else{\n                acc + s\n            }\n        }\n        if(text.split(\"\
    \ \").length>2){\n            fixedText.split(\"\\\\s+\").map(x=>x.replaceAll(\"\
    \ \",\"_\")).mkString\n        }else{\n            fixedText\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m1hyqoc.scala:31)\n\tat Problem.main(tmp4m1hyqoc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var first = true\n        var prev : String\
    \ = \"\"\n        for (ch <- text.toCharArray) {\n            if (ch == ' ') {\n\
    \                if (first) {\n                    first = false\n           \
    \     }\n                else {\n                    text = text.replace(prev,\
    \ \"_\")\n                    prev = ch\n                }\n            }\n  \
    \          else {\n                prev = ch\n            }\n        }\n     \
    \   return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpn5x5s0nt.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    text = text.replace(prev, \e[31m\"\
    _\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val text\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5x5s0nt.scala:25:27 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    prev = ch\n\e[31m\e[31m   |\e[0m\
    \                           ^^\e[0m\n\e[31m   |\e[0m                         \
    \  Found:    (ch : Char)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5x5s0nt.scala:29:23\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                prev = ch\n\e\
    [31m\e[31m   |\e[0m                       ^^\e[0m\n\e[31m   |\e[0m           \
    \            Found:    (ch : Char)\n\e[31m   |\e[0m                       Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newString = text.replaceAll(\" \",\"_\"\
    )\n        val isConsecutiveSpaces = newString.count(_ == '_').getOrElse(0) >\
    \ 1\n        newString.replaceAll(\" \",\"-\")\n        if (isConsecutiveSpaces)\n\
    \            newString\n        else\n            fixSpaces(newString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp84v5r947.scala:17:60 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misConsecutiveSpaces\e[0m\
    \ = newString.count(_ == \e[31m'_'\e[0m).getOrElse(\e[31m0\e[0m) > \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value getOrElse is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val s = text.toLowerCase\n        // Fix leading\
    \ spaces\n        var i = 2\n        while (i < s.length && s(i) == \" \") {\n\
    \            i += 1\n        }\n        val leadingSpaces = s.length - i\n   \
    \     val fixed = s.substring(0, i)\n        // Fix spaces at the beginning and\
    \ end of text\n        if (fixed == \"\") {\n            fixed\n        } else\
    \ {\n            if (fixed.length < leadingSpaces) {\n                fixed +\
    \ \" \"\n            } else if (fixed.length > leadingSpaces) {\n            \
    \    fixed.substring(0, leadingSpaces) + \"-\"\n            } else {\n       \
    \         fixed\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa8hifn24.scala:19:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mwhile\e[0m (i < s.length && s(i) == \e\
    [31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        for (x <- text.split(\"\
    \ \")){\n            newText = newText.replace(x.toLowerCase, \"_\")\n       \
    \ }\n        if (text.split(\" \").length < 2) {\n            newText = newText.replace(\"\
    \ \", \"-\")\n        }\n        newText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp066l7l1k.scala:27)\n\tat Problem.main(tmp066l7l1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if(text == null || text.length < 2) text \n\
    \        else {\n            val spaceCount = text.length\n            val replacementCount\
    \ = spaceCount - 2\n            var nextReplacement = 0\n            var finalText\
    \ = text\n            var currentChar = text.charAt(0)\n            var currentCharIndex\
    \ = 0\n            var currentReplacement = 0\n            while(nextReplacement\
    \ < replacementCount) {\n                if(currentCharIndex < spaceCount) {\n\
    \                    currentReplacement += 1\n                    if(currentChar\
    \ == text.charAt(currentCharIndex)) {\n                        currentCharIndex\
    \ = currentCharIndex + 1\n                    }\n                }\n         \
    \       else {\n                    if(currentCharIndex > 0) {\n             \
    \           currentCharIndex = currentCharIndex - 1\n                    }\n \
    \                   finalText = finalText.substring(0, currentCharIndex) + \"\
    -\" + (finalText.substring(currentCharIndex))\n                }\n           \
    \     nextReplacement = nextReplacement + 1\n            }\n            finalText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped3aqsci.scala:45)\n\tat Problem.main(tmped3aqsci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        for (line <- text.split(\"\
    \\n\")) {\n            var fixedLine = line\n            var spaceIndex = -1\n\
    \            val spaceRegex = \"\"\"\\s\"\"\".r\n            var lastSpaceIndex\
    \ = -1\n            var consecutiveSpaces = 0\n            while (spaceIndex =\
    \ spaceRegex.findFirstIn(fixedLine).isDefined) {\n                val spaceIndex\
    \ = fixedLine.indexOf(spaceRegex.get, spaceIndex+1)\n                fixedLine\
    \ = fixedLine.replace(spaceRegex, \"_\")\n                if (spaceIndex-lastSpaceIndex\
    \ > 2) {\n                    consecutiveSpaces += 1\n                }\n    \
    \            lastSpaceIndex = spaceIndex\n            }\n            if (consecutiveSpaces\
    \ > 2) {\n                fixedLine = fixedLine.replace(\"_\", \"-\")\n      \
    \      }\n            fixedLine = fixedLine + lineSuffix\n            fixedText\
    \ = fixedText + fixedLine\n        }\n        return fixedText\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdbj6lm0i.scala:23:66\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mwhile\e[0m\
    \ (spaceIndex = spaceRegex.findFirstIn(fixedLine).isDefined) {\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Boolean\n\e[31m\
    \   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdbj6lm0i.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mspaceIndex\e[0m\
    \ = fixedLine.indexOf(spaceRegex.get, spaceIndex+\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                   ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value get is not a member of scala.util.matching.Regex\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpdbj6lm0i.scala:25:38 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                fixedLine = fixedLine.replace(spaceRegex,\
    \ \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments ((spaceRegex : scala.util.matching.Regex),\
    \ (\e[32m\"_\"\e[0m : String))\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbj6lm0i.scala:34:36\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            fixedLine = fixedLine\
    \ + lineSuffix\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: lineSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val res = text match {\n            case \"\"\
    \       => text\n            case \" \" => \"_\"\n            case x => x\n  \
    \      }\n        res.replaceAll(\" \", \"_\");\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qh6bipl.scala:27)\n\tat Problem.main(tmp2qh6bipl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\" \").map(word => \n           \
    \ (if (word == \" \")\n                \"_\"\n            else if (word.split(\"\
    \\\\s\").length > 1)\n                word.split(\"\\\\s\").mkString(\"-\")\n\
    \            else word)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jgqqrig.scala:25)\n\tat Problem.main(tmp2jgqqrig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text flatMap { s =>\n            s.toString.replaceAll(\"\
    \\\\s+\".r, \"_\") match {\n                case s => s\n            }\n     \
    \   }.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpihje3xl4.scala:16:23 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        text flatMap { \e[36ms\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                     \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  \
    \     I could not infer the type of the parameter s.\n1 error found\n"
  stdout: ''
  timestamp: 1660029609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      text.replaceAll(\"\\\\s+\", \" \").replaceAll(\"\
    \\\\s{2,}\", \"_\").trim\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe1y6kdfa.scala:20)\n\tat Problem.main(tmpe1y6kdfa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.map { c =>\n            if\
    \ (c == ' ') '_' else c\n        }\n        if (newText.length < 2) text\n   \
    \     else newText.take(2).mkString + \"_\" + newText.drop(2).mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzx5hot04.scala:23)\n\tat Problem.main(tmpzx5hot04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaceIdx = text.indexOf(' ').filter(_ !=\
    \ -1).toList\n        val spaces = text.drop(spaceIdx).toList\n        val newText\
    \ = \"\"\n        while(spaces.nonEmpty && newText.isEmpty) {\n            val\
    \ nextSpaceIdx = spaceIdx find (x => x.isSpace)\n            val currentSpaceIdx\
    \ = spaceIdx diff nextSpaceIdx\n            spaceIdx diff currentSpaceIdx foreach\
    \ newText += _\n            spaces diff currentSpaceIdx foreach newText += _\n\
    \            spaceIdx = nextSpaceIdx diff spaceIdx\n            spaces diff nextSpaceIdx\
    \ foreach newText += _\n        }\n        newText +: spaces\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_lduac7z.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspaceIdx\e[0m = text.indexOf(\e\
    [31m' '\e[0m).filter(_ != -\e[31m1\e[0m).toList\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \         value filter is not a member of Int\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp_lduac7z.scala:22:61 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            spaceIdx diff currentSpaceIdx foreach newText += _\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => spaceIdx diff currentSpaceIdx foreach newText += _$2.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp_lduac7z.scala:23:59 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            spaces diff currentSpaceIdx foreach newText\
    \ += _\n\e[31m\e[31m   |\e[0m                                                \
    \           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => spaces diff currentSpaceIdx foreach newText\
    \ += _$3.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_lduac7z.scala:23:48\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            spaces diff currentSpaceIdx\
    \ foreach newText += _\n\e[31m\e[31m   |\e[0m                                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \             Found:    (newText : String)\n\e[31m   |\e[0m                  \
    \                          Required: Char => Any\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_lduac7z.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            spaceIdx = nextSpaceIdx diff spaceIdx\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e"
  stdout: ''
  timestamp: 1660029617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        if (text.isEmpty) return text\n        var s\
    \ = \"\"\n        var count = 0\n        for (c <- text.toCharArray) {\n     \
    \       if (c == ' ') count += 1\n            else if ((count > 1) && (c == '\
    \ ')) {\n                s = s + \"-\"\n                count = 0\n          \
    \  } else {\n                s = s + c\n            }\n        }\n        return\
    \ s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpukqyypxi.scala:32)\n\tat Problem.main(tmpukqyypxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        while (text.indexOf(\"\
    \ \") != -1) {\n            text = text.replace(\" \", \"_\")\n        }\n   \
    \     while (text.indexOf(\"  \") != -1) {\n            text = text.replace(\"\
    \  \", \"-\")\n        }\n        if (text.indexOf(\"_\") != -1) {\n         \
    \   return result\n        } else {\n            return text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpvv3xibcv.scala:18:17 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            text = text.replace(\e[31m\" \"\e[0m, \e\
    [31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpvv3xibcv.scala:21:17 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            text = text.replace(\e[31m\"  \"\e[0m, \e\
    [31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val text\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n      val replacedString = text.replace(\" \", \"_\"\
    )\n      val twoConsecutiveSpacesString = replacedString.replace(\" \", \"_\"\
    )\n      if (twoConsecutiveSpacesString.length > 2) {\n        val consecutiveSpacesString\
    \ = twoConsecutiveSpacesString.split(\"_\").map(x => x.trim).mkString(\"-\")\n\
    \        replacedString.replace(consecutiveSpacesString, \"_\")\n      } else\
    \ replacedString\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu1s874ri.scala:24)\n\tat Problem.main(tmpu1s874ri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        text.split(\"\\\\s\").toList.filterNot(_.isEmpty).map(_.toLowerCase).map(_.toString).mkString(\"\
    \").replaceAll(\"\\\\s+\", \"_\").replaceAll(\"\\\\s+\", \"-\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56tia_cd.scala:19)\n\tat Problem.main(tmp56tia_cd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val splitted = text.split(\" \")\n        val\
    \ newText = new StringBuilder()\n        var lastWasSpace = false\n        for(word\
    \ <- splitted) {\n            if(lastWasSpace && word.isEmpty) {\n           \
    \     lastWasSpace = false\n            }\n            else {\n              \
    \  newText.append(word)\n                newText.append(\" \")\n             \
    \   lastWasSpace = !lastWasSpace\n            }\n        }\n        newText.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmw08aad8.scala:32)\n\tat Problem.main(tmpmw08aad8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        // Step 1: replace all spaces with underscore\n\
    \        var modifiedText = text.replace(\"_\", \" \")\n        // Step 2: if\
    \ there are more than 2 consecutive spaces, replace all consecutive spaces with\
    \ -\n        var charPos = modifiedText.length\n        var currentChar = modifiedText.charAt(0)\n\
    \        var previousChar = \"\"\n        var nextChar = \"\"\n        while (currentChar\
    \ != \" \") {\n            previousChar = currentChar\n            nextChar =\
    \ modifiedText.charAt(charPos - 1)\n            if (nextChar == \" \") {\n   \
    \             if (previousChar != \" \") {\n                    modifiedText =\
    \ modifiedText.replace(\" \", \"-\")\n                }\n                charPos\
    \ -= 1\n                currentChar = modifiedText.charAt(charPos)\n         \
    \   }\n            charPos -= 1\n            currentChar = modifiedText.charAt(charPos)\n\
    \        }\n        // Step 3: remove all spaces from modified text\n        modifiedText\
    \ = modifiedText.replace(\"-\", \" \")\n        return modifiedText\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprhnoamd4.scala:23:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m (currentChar != \e[31m\" \"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhnoamd4.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            previousChar = currentChar\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (currentChar : Char)\n\e[31m   |\e[0m\
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprhnoamd4.scala:25:42 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            nextChar = modifiedText.charAt(charPos -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Char\n\e[31m   |\e[0m   \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val res = text.replaceAll(\" \", \"_\")\n  \
    \      if (res.count(_ == '_') > 2)\n            res = res.replaceAll(\"\\\\s+\"\
    , \"_\")\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp83pnjq1d.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            res = res.replaceAll(\e[31m\"\\\\s+\"\e[0m,\
    \ \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val res\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = mutable.MutableSet[Char]()\n  \
    \      var result = \"\"\n        for (x <- text.toList) \n          if (x ==\
    \ \" \") spaces += x\n          else result += x\n        while (spaces.size !=\
    \ 0 && !(spaces.size == 1 && spaces.head == ' ')) \n          result += \"-\"\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xw8ayzd.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.MutableSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1xw8ayzd.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          \e[33mif\e[0m (x == \e[31m\" \"\e[0m) spaces\
    \ += x\n\e[31m\e[31m   |\e[0m              ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029618
