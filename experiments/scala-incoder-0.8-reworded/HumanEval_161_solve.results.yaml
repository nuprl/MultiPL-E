language: scala
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def reverse(s1 : String) : String = {\n            val index = 0\n  \
    \          val end = s1.length\n            while(index<end){\n              \
    \  if(s1.charAt(index) != 'a'){\n                    val temp = s1.charAt(index)\n\
    \                    s1.charAt(index) = s1.charAt(end)\n                    s1.charAt(end)\
    \ = temp\n                    end = end-1\n                }else{\n          \
    \          index = index+1\n                }\n            }\n            s1\n\
    \        }\n        val charArray = s.toCharArray\n        val index = charArray.indexOf(0)\n\
    \        val reverseString = reverse(s.substring(1,index))\n        if(charArray.indexOf(0)!=-1){\n\
    \            s = s.substring(1,s.length-1)\n            reverseString = reverse(s.substring(1,index))\n\
    \        }\n        s = reverseString\n        return s.mkString.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz0wu6kmm.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    s1.charAt(index) = s1.charAt(end)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               value update is not a member of Int => Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpz0wu6kmm.scala:24:20 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    s1.charAt(end) = temp\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  value update is not a member of Int => Char\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpz0wu6kmm.scala:25:24 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                    end = end-\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val end\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz0wu6kmm.scala:27:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ index = index+\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val index\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz0wu6kmm.scala:35:31 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m(charArray.indexOf(\e[31m0\e[0m)!=-\e\
    [31m1\e[0m){\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value !=- is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpz0wu6kmm.scala:36:14 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            s = s.substring(\e[31m1\e[0m,s.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val s\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpz0wu6kmm.scala:37:26 ----------"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def rev(s: String): String = {\n            for (i <- 0 until s.length\
    \ - 1) {\n                if(s.charAt(i) == s.charAt(i).toLowerCase) {\n     \
    \               s = s.replace(s.charAt(i).toLowerCase, s.charAt(i).toUpperCase)\n\
    \                } else if (s.charAt(i) == s.charAt(i).toLowerCase) {\n      \
    \              s = s.replace(s.charAt(i).toLowerCase(), s.charAt(i).toUpperCase)\n\
    \                }\n            }\n            return s\n        }\n\n       \
    \ def addChar(s: String) : String = {\n            def reverse(s: String) : String\
    \ = {\n                val sb = new StringBuilder\n                for(i <- 0\
    \ until s.length - 1) {\n                    if(s.charAt(i) == s.charAt(i).toLowerCase)\
    \ {\n                        sb append (s.charAt(i).toLowerCase)\n           \
    \         } else {\n                        sb append (s.charAt(i).toUpperCase)\n\
    \                    }\n                }\n                sb.toString\n     \
    \       }\n\n            val sb = new StringBuilder\n            val n = s.length\n\
    \            for (i <- 0 until n) {\n                val c = s.charAt(i)\n   \
    \             if (c == '#') {\n                    sb append (\" \")\n       \
    \         } else if (c == '@') {\n                    sb append (reverse(sb.toString))\n\
    \                } else {\n                    sb append (c)\n               \
    \ }\n            }\n            sb.toString\n        }\n\n        def addCharRev(s:\
    \ String) : String = {\n            def reverse(s: String) : String = {\n    \
    \            val sb = new StringBuilder\n                for(i <- 0 until s.length\
    \ - 1) {\n                    if(s.charAt(i) == s.charAt(i).toLowerCase) {\n \
    \                       sb append (s.charAt(i).toUpperCase)\n                \
    \    } else {\n                        sb append (s.charAt(i).toLowerCase)\n \
    \                   }\n                }\n                sb.toString\n      \
    \      }\n\n            val sb = new StringBuilder\n            val n = s.length\n\
    \            for (i <- 0 until n) {\n                val c = s.charAt(i)\n   \
    \             if (c == '#') {\n                    sb append (\" \")\n       \
    \         } else if (c == '@') {\n                    sb append (reverse(sb.toString))\n\
    \                } else {\n                    sb append (c)\n               \
    \ }\n            }\n            sb.toString\n        }\n\n        val str = s.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        if (str.isEmpty) s\n        else addChar(addCharRev(addCharRev(addCharRev(rev(str)))))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90odbb6c.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m(s.charAt(i) == s.charAt(i).toLowerCase)\
    \ {\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90odbb6c.scala:20:46\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    s = s.replace(s.charAt(i).toLowerCase,\
    \ s.charAt(i).toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp90odbb6c.scala:20:71 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    s = s.replace(s.charAt(i).toLowerCase, s.charAt(i).toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp90odbb6c.scala:21:54 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == s.charAt(i).toLowerCase)\
    \ {\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90odbb6c.scala:22:46\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    s = s.replace(s.charAt(i).toLowerCase(),\
    \ s.charAt(i).toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp90odbb6c.scala:22:73 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                    s = s.replace(s.charAt(i).toLowerCase(), s.charAt(i).toUpperCase)\n\
    \e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = if (s.isEmpty) s else {\n            for (i <- 0 until s.length)\n\
    \                if (s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || \n\
    \                    s.charAt(i).toUpperCase == s.charAt(i).toLowerCase) \n  \
    \                  s.replaceCharAt(i, '_').toUpperCase\n                else \n\
    \                    s.replaceCharAt(i, '_').toLowerCase\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzhkeuei.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m (s.charAt(i).toLowerCase\
    \ == s.charAt(i).toUpperCase || \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzhkeuei.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    s.replaceCharAt(i, \e[31m'_'\e[0m).toUpperCase\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value replaceCharAt is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplzhkeuei.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    s.replaceCharAt(i, \e[31m'_'\e[0m).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value replaceCharAt is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplzhkeuei.scala:25:8 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Matchable)\n\e[31m   |\e[0m  \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val list = s.toLowerCase\n        val result = new mutable.StringBuilder\n\
    \        for (i <- list.toCharArray.indices) {\n            if (i > 0) {\n   \
    \             if (Character.isLetter(list(i))) {\n                    val firstLetter\
    \ = list.substring(0, i)\n                    val lastLetter = list.substring(i\
    \ + 1, list.size)\n                    result.append(lastLetter).append(firstLetter.toUpperCase)\n\
    \                } else {\n                    result.append(list.substring(0,\
    \ i))\n                }\n            } else {\n                result.append(list.substring(0,\
    \ i))\n            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a7pc179.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var s = StringBuilder(s)\n        for( i <- 0 until s.length )\n    \
    \    {\n            if( isLetter( s.charAt(i) ) )\n            {\n           \
    \     s.reverse()\n                s = s.substring(0, s.length - 1) + s.charAt(i)\n\
    \            }\n        }\n        if( s.length == 0 ) return s\n        else\
    \ return s.reverse().toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi5iu0fzg.scala:17:30 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = StringBuilder(s)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Recursive \e[33mvariable\e[0m \e[35ms\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5iu0fzg.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(\
    \ isLetter( s.charAt(i) ) )\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: isLetter\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        var flag = false\n        for(i <- 0 until s.length()){\n\
    \            flag = false\n            if(s.charAt(i)!='A' && s.charAt(i)!='a'\
    \ && s.charAt(i)!='B' && s.charAt(i)!='b' && s.charAt(i)!='C' && s.charAt(i)!='c'){\n\
    \                res = res + s.charAt(i)\n                flag = true\n      \
    \      }else{\n                i = i+1\n            }\n        }\n        for(i\
    \ <- 0 until s.length()){\n            if(s.charAt(i)!='A' && s.charAt(i)!='a'\
    \ && s.charAt(i)!='B' && s.charAt(i)!='b' && s.charAt(i)!='C' && s.charAt(i)!='c'){\n\
    \                res = res + s.charAt(i)\n            }\n        }\n        if(!flag){\n\
    \            res = s.reverse\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwth47edg.scala:25:18 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                i = i+\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var i = 0\n        var j = 0\n        var temp = \"\"\n        val len\
    \ = s.length\n        while(i < len){\n            if(s.charAt(i) == s.charAt(j)){\n\
    \                temp = s.charAt(i)\n                s.charAt(i) = s.charAt(j)\n\
    \                s.charAt(j) = temp\n                i += 1 \n               \
    \ j += 1 \n            }\n            else{\n                temp = s.charAt(i)\n\
    \                s.charAt(i) = s.charAt(j)\n                s.charAt(j) = temp\n\
    \                i += 1\n                j++\n            }\n        }\n     \
    \   s \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbbnyhh_h.scala:34:19 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbnyhh_h.scala:23:31\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                temp = s.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbnyhh_h.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                s.charAt(i)\
    \ = s.charAt(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value update is not a member of Int => Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbbnyhh_h.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                s.charAt(j) = temp\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value update\
    \ is not a member of Int => Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbnyhh_h.scala:30:31\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                temp = s.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbnyhh_h.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                s.charAt(i)\
    \ = s.charAt(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value update is not a member of Int => Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbbnyhh_h.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val input = s.toCharArray\n        val output = input.toList\n      \
    \  val reversed = input.toList.reverse\n        if (input.length == 0) {\n   \
    \         s\"$s\"\n        } else {\n            val hasLetter = input.exists(_\
    \ >= 'a' && _ <= 'z')\n            if (hasLetter) {\n                output.map(_\
    \ + input(0).toChar)\n            } else {\n                val res = output.map(_\
    \ + input(0).toChar).mkString\n                output.clear\n                output.reverse\n\
    \                output.map(_ + input(0) +: res) mkString \n            }\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmpy88_g2xz.scala:30:31 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                output.map(_ + input(\e[31m0\e[0m) +:\
    \ res) mkString \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m+ (which is left-associative) and +: (which is right-associative)\
    \ have same precedence and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpy88_g2xz.scala:30:56 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                output.map(_ + input(\e[31m0\e[0m) +:\
    \ res) mkString \n\e[31m\e[31m   |\e[0m                                      \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpy88_g2xz.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mhasLetter\e[0m = input.exists(_\
    \ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpy88_g2xz.scala:25:26 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                output.map(_ + input(\e[31m0\e[0m).toChar)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Found:    List[Int]\n\e[31m   |\e[0m            \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy88_g2xz.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                output.clear\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear\
    \ is not a member of List[Char], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports migh"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val c = s.toCharArray\n        var i = 0\n        val res = c.reverse\n\
    \        var rev = res\n        val n = c.length\n        while (i < n) {\n  \
    \          val t = s(i, res)\n            if (t >= 65 && t <= 90) {\n        \
    \        rev = rev + t.toChar\n            } else if (t >= 97 && t <= 122) {\n\
    \                rev = rev + t.toChar.swapCase\n            } else {\n       \
    \         rev = rev + t\n            }\n            i = i + 1\n        }\n   \
    \     rev\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4t4nh8k8.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mt\e[0m = s(i, res)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    (Int, Array[Char])\n\e[31m   |\e\
    [0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4t4nh8k8.scala:25:26 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                rev = rev + t.toChar\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Array[Char],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4t4nh8k8.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                rev = rev + t.toChar.swapCase\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of Array[Char], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4t4nh8k8.scala:27:37 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                rev = rev + t.toChar.swapCase\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value swapCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4t4nh8k8.scala:29:26 -"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toList\n        val newArr : List[Char] = arr.map(c => if(c.isLetter)\
    \ c.toUpper else c.toLower).toList\n        val firstChar = newArr.head\n    \
    \    val restOfChars = newArr.tail\n        if(firstChar.isLetter) solveHelper(restOfChars,\
    \ firstChar)\n        else solveHelper(restOfChars.reverse, firstChar)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1zo2nge.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(firstChar.isLetter) solveHelper(restOfChars,\
    \ firstChar)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: solveHelper\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1zo2nge.scala:22:13\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m solveHelper(restOfChars.reverse,\
    \ firstChar)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             Not found: solveHelper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val ret = new mutable.ArrayBuffer[Char]()\n        s.toCharArray.foreach(c\
    \ => {\n            if( c.isLetter ) ret.append(c.toUpperCase)\n            else\
    \ ret.append(c)\n        })\n        return ret.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk_um63b.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var ans : List[Char] = Nil\n        var i = 0\n        while (i < s.length)\
    \ {\n            if (isLetter(s(i))) {\n                val c = s(i)\n       \
    \         var j = i\n                while (j < s.length && isLetter(s(j))) {\n\
    \                    j -= 1\n                }\n                ans = ans :::\
    \ List(c)\n                i += 1\n                j = i\n                while\
    \ (j < s.length && isLetter(s(j))) {\n                    j -= 1\n           \
    \     }\n                ans = ans ::: List(s(i))\n                i += 2\n  \
    \          } else {\n                ans = ans ::: List(s(i))\n              \
    \  i += 1\n            }\n        }\n        ans.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8zbwsv4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (isLetter(s(i))) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8zbwsv4.scala:23:39\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mwhile\e\
    [0m (j < s.length && isLetter(s(j))) {\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa8zbwsv4.scala:29:39 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                \e[33mwhile\e[0m (j < s.length && isLetter(s(j)))\
    \ {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Not found: isLetter\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8zbwsv4.scala:39:12\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        ans.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[Char]\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var s = s\n        val len = s.length\n        var i = 0\n        while\
    \ (i < len) {\n            if (isLetter(s.charAt(i))) {\n                s = s.substring(0,\
    \ i) + s.substring(i, i + 1) + s.substring(i + 1, len) + s.substring(len)\n  \
    \              i += 1\n            }\n            else {\n                i +=\
    \ 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwg43wrwg.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = s\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwg43wrwg.scala:21:16 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isLetter(s.charAt(i))) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        for (x <- s) {\n            if (x.isLetter)\
    \ {\n                if (x.toUpperCase() == x) result +=  x.toUpperCase() else\
    \ result += x.toLowerCase()\n            } else {\n                result += x\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt5waq0y8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (x.toUpperCase() == x)\
    \ result +=  x.toUpperCase() \e[33melse\e[0m result += x.toLowerCase()\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpt5waq0y8.scala:20:49 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                \e[33mif\e[0m (x.toUpperCase() == x) result +=\
    \  x.toUpperCase() \e[33melse\e[0m result += x.toLowerCase()\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpt5waq0y8.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (x.toUpperCase() == x)\
    \ result +=  x.toUpperCase() \e[33melse\e[0m result += x.toLowerCase()\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt5waq0y8.scala:20:81\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e\
    [0m (x.toUpperCase() == x) result +=  x.toUpperCase() \e[33melse\e[0m result +=\
    \ x.toLowerCase()\n\e[31m\e[31m   |\e[0m                                     \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value += is not a member of String - did you mean String.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt5waq0y8.scala:20:86 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (x.toUpperCase() == x)\
    \ result +=  x.toUpperCase() \e[33melse\e[0m result += x.toLowerCase()\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          value toLowerCase is not a member of Char\n5 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val reversed = reverseStringWithCase(s, s.length)\n        if(s.length\
    \ != reversed.length)\n            reversed\n        else\n            s\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20etbdce.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = reverseStringWithCase(s,\
    \ s.length)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: reverseStringWithCase\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.foldLeft(\"\"){(s,x) => \n            if(x == \"a\") (s.reverse+x.toUpperCase)\
    \ else (s.reverse+x)\n        }\n        \n        if(result.isEmpty) \"\" else\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzj0i4qpn.scala:18:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(x == \e[31m\"a\"\e[0m) (s.reverse+x.toUpperCase)\
    \ \e[33melse\e[0m (s.reverse+x)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzj0i4qpn.scala:18:38\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(x\
    \ == \e[31m\"a\"\e[0m) (s.reverse+x.toUpperCase) \e[33melse\e[0m (s.reverse+x)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        var i = 0\n        while (i<s.length()) {\n \
    \           val c = s(i)\n            if(c>='a' && c<='z')\n                res\
    \ = res + c.toUpperCase\n            if(c>='A' && c<='Z')\n                res\
    \ = res + c.toLowerCase\n            i = i + 1\n        }\n        if(res.isEmpty)\n\
    \            res = s\n        res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcn7v1dmf.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                res = res + c.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                        value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcn7v1dmf.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                res = res + c.toLowerCase\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                        value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var reverseString = \"\"\n        var count = 1\n        for(i <- s.length)\
    \ if(s.charAt(i) != '#') count = count + 1\n        if(count == 0) return s\n\
    \        for(i <- 0 to s.length - count) if(s.charAt(i) == '#') {\n          \
    \  val l = s.substring(0, i)\n            val r = s.substring(i + 1)\n       \
    \     reverseString = reverseString + new String(l) + new String(r).toUpperCase\n\
    \        }\n        for(i <- 0 to s.length - count) if(s.charAt(i) == '@') {\n\
    \            val l = s.substring(0, i)\n            val r = s.substring(i + 1)\n\
    \            reverseString = reverseString + new String(l) + new String(r).toLowerCase\n\
    \        }\n        return reverseString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2q_fmcz2.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- s.length) \e[33mif\e[0m(s.charAt(i)\
    \ != \e[31m'#'\e[0m) count = count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value foreach is not\
    \ a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result: mutable.MutableList[String] = mutable.MutableList();\n  \
    \      for(char <- s.toCharArray) if(char.isLetter) result.append(char.toUpper)\
    \ else result.append(char.toLower);\n        if (result.length == 0) s.reverse\
    \ else result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp685g_xmy.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.MutableList[\e\
    [35mString\e[0m] = mutable.MutableList();\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp685g_xmy.scala:17:50\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.MutableList[\e[35mString\e[0m] = mutable.MutableList();\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        // write your code in Scala 2.12\n        s.toList\n            .filter(_.isLetter)\n\
    \            .map(_.toLowerCase)\n            .map(_.toUpperCase)\n          \
    \  .map(_.toString)\n            .mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmdcz_ogy.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            .map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmdcz_ogy.scala:21:19\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            .map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \             value toUpperCase is not a member of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result : String = \"\"\n        for( i <- 0 until s.length ) {\n\
    \            if( isLetter(s(i)) ) {\n                val temp = s(i)\n       \
    \         s(i) = s(s.length - i - 1)\n                s(s.length - i - 1) = temp\n\
    \            }\n        }\n        for( i <- 0 until s.length ) {\n          \
    \  if( !isLetter(s(i)) ) {\n                val temp = s(i)\n                s(i)\
    \ = s(s.length - i - 1)\n                s(s.length - i - 1) = temp\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g96njv9.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m( isLetter(s(i)) ) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_g96njv9.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                s(i) = s(s.length\
    \ - i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e\
    [0m                value update is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_g96njv9.scala:22:16 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                s(s.length - i - \e[31m1\e[0m) = temp\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g96njv9.scala:26:17\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(\
    \ !isLetter(s(i)) ) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_g96njv9.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                s(i) = s(s.length - i - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_g96njv9.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                s(s.length\
    \ - i - \e[31m1\e[0m) = temp\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e\
    [31m   |\e[0m                value update is not a member of String\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def recur(s : String) : (String, String) = {\n            val result\
    \ = if (s.isEmpty) \"\" else s.charAt(0)\n            val rest = s.substring(1)\n\
    \            if (rest.forall(_.isLetter)) (recur(rest), (rest + result.swapCase()))\n\
    \            else (rest, result)\n        }\n        recur(s)._2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsplmde_g.scala:20:47\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (rest.forall(_.isLetter))\
    \ (recur(rest), (rest + result.swapCase()))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                              Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mString\e\
    [0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mString\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m\
    \                                          Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsplmde_g.scala:20:70 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (rest.forall(_.isLetter)) (recur(rest),\
    \ (rest + result.swapCase()))\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                            value swapCase is not a member of Matchable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsplmde_g.scala:21:24 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m (rest, result)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \            Found:    (result : Matchable)\n\e[31m   |\e[0m                 \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def reverseString(s : String) : String = {\n            var res = \"\"\
    \n            for (i <- 0 until s.length) res += (if (Character.isLetter(s.charAt(i)))\
    \ s.charAt(i).toUpperCase else s.charAt(i).toLowerCase)\n            return res\n\
    \        }\n        val str = s.toCharArray.toList\n        val str1 = s.toCharArray.toList\n\
    \        val str2 = s.toCharArray.toList\n        for (i <- 0 until str.length-1)\
    \ {\n            val c = str.charAt(i)\n            val c1 = str1.get(i)\n   \
    \         val c2 = str2.get(i)\n            if (c == 'a' && (c1 == 'A' || c1 ==\
    \ 'a')) str1.set(i, (c2 == 'A' || c2 == 'a')?'a':'A')\n            if (c == 'A'\
    \ && (c1 == 'a' || c1 == 'A')) str2.set(i, (c2 == 'a' || c2 == 'A')?'a':'A')\n\
    \            if (c == '#' && (c1 == '@' || c1 == '#')) str1.set(i, (c2 == '@'\
    \ || c2 == '#')?'@':'#')\n            if (c == '@' && (c1 == '#' || c1 == '@'))\
    \ str2.set(i, (c2 == '#' || c2 == '@')?'@':'#')\n        }\n        reverseString(new\
    \ String(str1.toArray))\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumeggd1k.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ res += (\e[33mif\e[0m (Character.isLetter(s.charAt(i))) s.charAt(i).toUpperCase\
    \ \e[33melse\e[0m s.charAt(i).toLowerCase)\n\e[31m\e[31m   |\e[0m            \
    \                            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpumeggd1k.scala:19:97 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length) res\
    \ += (\e[33mif\e[0m (Character.isLetter(s.charAt(i))) s.charAt(i).toUpperCase\
    \ \e[33melse\e[0m s.charAt(i).toLowerCase)\n\e[31m\e[31m   |\e[0m            \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumeggd1k.scala:19:126\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m until s.length) res += (\e[33mif\e[0m (Character.isLetter(s.charAt(i)))\
    \ s.charAt(i).toUpperCase \e[33melse\e[0m s.charAt(i).toLowerCase)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumeggd1k.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mc\e[0m = str.charAt(i)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value charAt is not a member of List[Char]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumeggd1k.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mc1\e[0m = str1.get(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ get is not a member of List[Char], but cou"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def isLetter(ch: Char) : Boolean = ('A' <= ch && ch <= 'Z') || ('a' <=\
    \ ch && ch <= 'z') || ('0' <= ch && ch <= '9')\n        def isLetter(ch: Char)\
    \ : Boolean = ('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z')\n        def\
    \ isDigit(ch: Char) : Boolean = ('0' <= ch && ch <= '9')\n        def reverseString(str:\
    \ String) : String = str.reverse\n        def reverseString(str: Int) : String\
    \ = str.toString\n        def reverseString(str: Long) : String = str.toString\n\
    \        def reverseString(str: Boolean) : String = str.toString\n        def\
    \ reverseString(str: Char) : String = str.toString\n        def reverseString(str:\
    \ StringBuffer) : String = str.toString\n        def reverseString(str: StringBuilder)\
    \ : String = str.toString\n        def reverseString(str: Array[Char]): String\
    \ = str.toString\n        def reverseString(str: Array[String]): String = str.toString\n\
    \        def reverseString(str: Array[Byte]): String = str.toString\n        val\
    \ buf = new StringBuffer\n        for (char <- s) {\n            if (isDigit(char))\
    \ {\n                buf.append(char)\n            } else {\n                if\
    \ (isLetter(char)) {\n                    buf.append(reverseString(char))\n  \
    \              } else {\n                    buf.append(char)\n              \
    \  }\n            }\n        }\n        buf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7wtx2uv4.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36misLetter\e[0m(\e[36mch\e\
    [0m: \e[35mChar\e[0m) : \e[35mBoolean\e[0m = (\e[31m'A'\e[0m <= ch && ch <= \e\
    [31m'Z'\e[0m) || (\e[31m'a'\e[0m <= ch && ch <= \e[31m'z'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLetter is already defined as \e[33mmethod\e[0m \e[35misLetter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7wtx2uv4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mdef\e[0m \e[36mreverseString\e[0m(\e[36mstr\e[0m: \e\
    [35mInt\e[0m) : \e[35mString\e[0m = str.toString\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mreverseString\
    \ is already defined as \e[33mmethod\e[0m \e[35mreverseString\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7wtx2uv4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mdef\e[0m\
    \ \e[36mreverseString\e[0m(\e[36mstr\e[0m: \e[35mLong\e[0m) : \e[35mString\e[0m\
    \ = str.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mreverseString is already defined as \e[33mmethod\e[0m \e[35mreverseString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7wtx2uv4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mdef\e[0m \e[36mreverseString\e[0m(\e[36mstr\e[0m: \e\
    [35mBoolean\e[0m) : \e[35mString\e[0m = str.toString\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mreverseString is already defined as \e[33mmethod\e[0m \e[35mreverseString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that o"
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newS = s\n        for(i <- 0 until s.length){\n            if(s.contains(Char(i))){\n\
    \                newS = newS.replaceFirst(s.substring(i, s.length), s.substring(i,\
    \ s.length).reverse)\n            }\n            else{\n                newS =\
    \ newS.replaceFirst(s, s.substring(i, s.length))\n            }\n        }\n \
    \       newS\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp0bb_ruzv.scala:19:26 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(s.contains(Char(i))){\n\e[31m\e\
    [31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m            \
    \       \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mpackage\e[0m \e[35mscala\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val map = mutable.Map[Char,Char]()\n        for(i <- 0 until s.length){\n\
    \            map(i) match {\n                case c if ('A' <= c && c <= 'Z')\
    \ => map(i) = c.toUpper\n                case c if ('a' <= c && c <= 'z') => map(i)\
    \ = c.toLower\n                case _ => map(i) = s(i)\n            }\n      \
    \  }\n        new String(map.toSeq)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3z6i9my.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val len = s.length\n        val res = new Array[Char](len)\n        var\
    \ i = 0\n        for(i <- 0 until len) {\n            val ch = s.charAt(i)\n \
    \           if(isLetter(ch))\n                res.update(i, isLetter(ch) ? ch.toUpperCase()\
    \ : ch.toLowerCase)\n            else\n                res(i) = ch\n        }\n\
    \        return new String(res)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpub7d5hy2.scala:22:15 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(isLetter(ch))\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpub7d5hy2.scala:23:67\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                res.update(i,\
    \ isLetter(ch) ? ch.toUpperCase() : ch.toLowerCase)\n\e[31m\e[31m   |\e[0m   \
    \                                                             ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                type toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpub7d5hy2.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                res.update(i,\
    \ isLetter(ch) ? ch.toUpperCase() : ch.toLowerCase)\n\e[31m\e[31m   |\e[0m   \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val r : ListBuffer[String] = ListBuffer()\n        for (i <- 0 until\
    \ s.length()) {\n            val c = s.charAt(i)\n            if (c.isLetter)\
    \ {\n                c match {\n                    case \"a\" => \"A\"\n    \
    \                case \"b\" => \"b\"\n                    case \"c\" => \"C\"\n\
    \                    case \"d\" => \"D\"\n                    case \"e\" => \"\
    e\"\n                    case \"f\" => \"F\"\n                    case \"g\" =>\
    \ \"g\"\n                    case \"h\" => \"H\"\n                    case \"\
    i\" => \"I\"\n                    case \"j\" => \"J\"\n                    case\
    \ \"k\" => \"K\"\n                    case \"l\" => \"L\"\n                  \
    \  case \"m\" => \"M\"\n                    case \"n\" => \"N\"\n            \
    \        case \"o\" => \"o\"\n                    case \"p\" => \"p\"\n      \
    \              case \"q\" => \"Q\"\n                    case \"r\" => \"r\"\n\
    \                    case \"s\" => \"s\"\n                    case \"t\" => \"\
    T\"\n                    case \"u\" => \"U\"\n                    case \"v\" =>\
    \ \"V\"\n                    case \"w\" => \"W\"\n                    case \"\
    x\" => \"x\"\n                    case \"y\" => \"Y\"\n                    case\
    \ \"z\" => \"Z\"\n                    case \"A\" => \"a\"\n                  \
    \  case \"B\" => \"b\"\n                    case \"C\" => \"c\"\n            \
    \        case \"D\" => \"d\"\n                    case \"E\" => \"e\"\n      \
    \              case \"F\" => \"f\"\n                    case \"G\" => \"g\"\n\
    \                    case \"H\" => \"h\"\n                    case \"I\" => \"\
    i\"\n                    case \"J\" => \"j\"\n                    case \"K\" =>\
    \ \"k\"\n                    case \"L\" => \"l\"\n                    case \"\
    M\" => \"m\"\n                    case \"N\" => \"n\"\n                    case\
    \ \"O\" => \"o\"\n                    case \"P\" => \"p\"\n                  \
    \  case \"Q\" => \"q\"\n                    case \"R\" => \"r\"\n            \
    \        case \"S\" => \"s\"\n                    case \"T\" => \"t\"\n      \
    \              case \"U\" => \"u\"\n                    case \"V\" => \"v\"\n\
    \                    case \"W\" => \"w\"\n                    case \"X\" => \"\
    x\"\n                    case \"Y\" => \"y\"\n                    case \"Z\" =>\
    \ \"z\"\n                    case _ => r.append(c.toUpperCase)\n             \
    \   }\n            } else r.append(c)\n        }\n        r.toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:22:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m\"a\"\e[0m\
    \ => \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:23:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m \e[31m\"b\"\e[0m\
    \ => \e[31m\"b\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:24:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m \e[31m\"c\"\e[0m\
    \ => \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:25:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mcase\e[0m \e[31m\"d\"\e[0m\
    \ => \e[31m\"D\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:26:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mcase\e[0m \e[31m\"e\"\e[0m\
    \ => \e[31m\"e\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:27:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m \e[31m\"f\"\e[0m\
    \ => \e[31m\"F\"\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3qncxcru.scala:28:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m \e[31m\"g\"\e[0m\
    \ => \e[31m\"g\"\e[0m\n\e"
  stdout: ''
  timestamp: 1659979548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result : MutableList[String] = MutableList.empty\n        for( i\
    \ <- 0 until s.length ){\n            val letter = s.charAt(i)\n            if(\
    \ letter >= 'a' && letter <= 'z' ){\n                result :+ letter.toString.reverse\n\
    \            } else if( letter >= 'A' && letter <= 'Z' ){\n                result\
    \ :+ letter.toString.toLowerCase\n            } else {\n                result\
    \ :+ letter\n            }\n        }\n        result :+ \"\".reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsg5k7yt.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m : \e[35mMutableList\e\
    [0m[\e[35mString\e[0m] = MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: type\
    \ MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsg5k7yt.scala:17:43\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m : \e[35mMutableList\e[0m[\e[35mString\e[0m] = MutableList.empty\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: MutableList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val nums = s.toList.toString.toInt\n        var res = \"\"\n        var\
    \ first = true\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 0) {\n                val next = nums(i).toString.toInt\n                if\
    \ (next > 0) {\n                    if (first) {\n                        first\
    \ = false\n                        res += nums(i).toString.toUpper\n         \
    \           } else {\n                        res += nums(i).toString.toUpper\n\
    \                    }\n                } else {\n                    res += nums(i).toString.toLower\n\
    \                }\n            } else if (nums(i) == 0) {\n                val\
    \ next = nums(i).toString.toInt\n                if (next > 0) {\n           \
    \         res += nums(i).toString.toUpper\n                } else {\n        \
    \            res += nums(i).toString.toLower\n                }\n            }\n\
    \        }\n        if (nums.isEmpty) {\n            return s.reverse\n      \
    \  } else {\n            return res\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiy6oddps.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.length)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value length is not a member of Int\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpiy6oddps.scala:21:16 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpiy6oddps.scala:22:27 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnext\e[0m = nums(i).toString.toInt\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiy6oddps.scala:26:28\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                        res\
    \ += nums(i).toString.toUpper\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpiy6oddps.scala:26:31 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        res += nums(i).toString.toUpper\n\
    \e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m\
    \                               \e[33mvalue\e[0m \e[35mnums\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiy6oddps.scala:28:28\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                        res\
    \ += nums(i).toString.toUpper\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var reversed = \"\"\n        for ((i, c) <- s.zipWithIndex) {\n     \
    \       val letter = c match {\n                case 'a' => 'A'\n            \
    \    case 'b' => 'B'\n                case 'c' => 'C'\n                case 'd'\
    \ => 'D'\n                case 'e' => 'E'\n                case 'f' => 'F'\n \
    \               case 'g' => 'G'\n                case 'h' => 'H'\n           \
    \     case 'i' => 'I'\n                case 'j' => 'J'\n                case 'k'\
    \ => 'K'\n                case 'l' => 'L'\n                case 'm' => 'M'\n \
    \               case 'n' => 'N'\n                case 'o' => 'O'\n           \
    \     case 'p' => 'P'\n                case 'q' => 'Q'\n                case 'r'\
    \ => 'R'\n                case 's' => 'S'\n                case 't' => 'T'\n \
    \               case 'u' => 'U'\n                case 'v' => 'V'\n           \
    \     case 'w' => 'W'\n                case 'x' => 'X'\n                case 'y'\
    \ => 'Y'\n                case 'z' => 'Z'\n                case 'A' => 'a'\n \
    \               case 'B' => 'b'\n                case 'C' => 'c'\n           \
    \     case 'D' => 'd'\n                case 'E' => 'e'\n                case 'F'\
    \ => 'f'\n                case 'G' => 'g'\n                case 'H' => 'h'\n \
    \               case 'I' => 'i'\n                case 'J' => 'j'\n           \
    \     case 'K' => 'k'\n                case 'L' => 'l'\n                case 'M'\
    \ => 'm'\n                case 'N' => 'n'\n                case 'O' => 'o'\n \
    \               case 'P' => 'p'\n                case 'Q' => 'q'\n           \
    \     case 'R' => 'r'\n                case 'S' => 's';\n                case\
    \ 'T' => 't'\n                case 'U' => 'u'\n                case 'V' => 'v'\n\
    \                case 'W' => 'w'\n                case 'X' => 'x'\n          \
    \      case 'Y' => 'y'\n                case 'Z' => 'z'\n                case\
    \ '_' => 'A'\n                case '-' => 'B'\n                case '+' => 'C'\n\
    \                case '.' => 'D'\n                case '/' => 'E'\n          \
    \      case '%' => 'F'\n                case '$' => 'G'\n                case\
    \ '#' => 'H'\n                case '&' => 'I'\n                case '@' => 'J'\n\
    \                case '$' => 'K'\n                case '%' => 'L'\n          \
    \      case '^' => 'M'\n                case '&' => 'N'\n                case\
    \ '*' => 'O'\n                case '(' => 'P'\n                case ')' => 'Q'\n\
    \                case '[' => 'R'\n                case ']' => 'S'\n          \
    \      case '|' => 'T'\n                case '-' => 'U'\n                case\
    \ '+' => 'V'\n                case '.' => 'W'\n                case '/' => 'X'\n\
    \                case '?' => 'Y'\n                case '!' => 'Z'\n          \
    \      case _ => c\n            }\n            val toAdd = if (letter.isLetter)\
    \ letter else c.toUpperCase\n            val letterIndex = s.indexOf(c, i)\n \
    \           if (\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplp7trg71.scala:102:16 --------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m            \e[33mif\e[0m (\n\e[31m\e[31m    |\e[0m\
    \                ^\e[0m\n\e[31m    |\e[0m                expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmplp7trg71.scala:116:0 ---------------------------\e[0m\e[0m\n\e[31m116\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp7trg71.scala:100:35\
    \ -----------------------\e[0m\e[0m\n\e[31m100 |\e[0m            \e[33mval\e[0m\
    \ \e[36mtoAdd\e[0m = \e[33mif\e[0m (letter.isLetter) letter \e[33melse\e[0m c.toUpperCase\n\
    \e[31m\e[31m    |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \    |\e[0m                            value isLetter is not a member of AnyVal\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp7trg71.scala:100:59 -----------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m            \e[33mval\e[0m \e[36mtoAdd\e[0m = \e[33mif\e\
    [0m (letter.isLetter) letter \e[33melse\e[0m c.toUpperCase\n\e[31m\e[31m    |\e\
    [0m                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m    |\e[0m                              value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplp7trg71.scala:115:1\
    \ --------------------\e[0m\e[0m\n\e[31m115 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmplp7trg71.scala:104:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m104 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val s1 =\n            s match {\n                case x if x.matches(\"\
    [a-z]+\") => x.toUpperCase()\n                case x if x.matches(\"[A-Z]+\")\
    \ => x.toLowerCase()\n                case x => x\n            }\n        val\
    \ s2 =\n            if (s1 == s) s1 else (\n                s1.replaceAllIn(\n\
    \                    s,\n                    s => if (s.contains(Character.toLowerCase(s.charAt(0))))\
    \ s.toUpperCase() else s.toLowerCase()\n                )\n            )\n   \
    \     s2\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr6045w6r.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                s1.replaceAllIn(\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue replaceAllIn is\
    \ not a member of String - did you mean s1.replaceAll?\n1 error found\n"
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val res = new StringBuilder\n        for (i <- 0 until s.length){\n \
    \           val letter = s.charAt(i)\n            res.append(if(letter == letter.toUpperCase)\
    \ letter.toUpperCase\n                    else letter.toLowerCase)\n        }\n\
    \        if(res.isEmpty) res.reverse\n        else res.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsa1ghr6.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            res.append(\e[33mif\e[0m(letter == letter.toUpperCase)\
    \ letter.toUpperCase\n\e[31m\e[31m   |\e[0m                                  \
    \  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprsa1ghr6.scala:20:63 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            res.append(\e[33mif\e[0m(letter == letter.toUpperCase) letter.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsa1ghr6.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33melse\e\
    [0m letter.toLowerCase)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsa1ghr6.scala:23:28\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(res.isEmpty)\
    \ res.reverse\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Found:    StringBuilder\n\e[31m   |\e[0m\
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprsa1ghr6.scala:24:17 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33melse\e[0m res.reverse\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    StringBuilder\n\
    \e[31m   |\e[0m             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toList.toSet.toList.map(_.toString.toChar).toSet\n    \
    \    val r = s.reverse\n        if (chars.isEmpty) r\n        else r.map(x=>(x==='A'||x==='a'?x.toUpperCase():x).toChar).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp113_jgxj.scala:17:57 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = s.toList.toSet.toList.map(_.toString.toChar).toSet\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp113_jgxj.scala:20:56\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m r.map(x=>(x===\e\
    [31m'A'\e[0m||x===\e[31m'a'\e[0m?x.toUpperCase():x).toChar).mkString\n\e[31m\e\
    [31m   |\e[0m                                                        ^\e[0m\n\e\
    [31m   |\e[0m                                                       Not found:\
    \ type x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp113_jgxj.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m r.map(x=>(x===\e\
    [31m'A'\e[0m||x===\e[31m'a'\e[0m?x.toUpperCase():x).toChar).mkString\n\e[31m\e\
    [31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m               \
    \   value === is not a member of Char - did you mean x.==?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var str = s.toUpperCase\n\n        if (s.isEmpty) {\n            str\
    \ = \"#\"\n        } else if (s.head == s.tail) {\n            str = s.toUpperCase\n\
    \        } else {\n            var lst : mutable.LinkedHashSet[Char] = mutable.LinkedHashSet()\n\
    \            for (i <- 0 until str.length) {\n                if (str.charAt(i)\
    \ == str.charAt(i).toLowerCase) {\n                    lst.add(str.charAt(i).toLowerCase)\n\
    \                }\n            }\n            str = str.reverse\n           \
    \ str = str.toLowerCase.mkString(\"\") +\n                str.split(\"\").map(lst.remove(_)).mkString(\"\
    \")\n        }\n        return str\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmper689jja.scala:21:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (s.head == s.tail)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmper689jja.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m \e[36mlst\e[0m : mutable.LinkedHashSet[\e\
    [35mChar\e[0m] = mutable.LinkedHashSet()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper689jja.scala:24:52\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mlst\e[0m : mutable.LinkedHashSet[\e[35mChar\e[0m] = mutable.LinkedHashSet()\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmper689jja.scala:26:51\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (str.charAt(i) == str.charAt(i).toLowerCase) {\n\e[31m\e[31m   |\e[0m    \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\e\
    [31m\e[31m-- Error: /tmp/tmper689jja.scala:32:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                str.split(\e[31m\"\"\e[0m).map(lst.remove(_)).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n5 errors found\n"
  stdout: ''
  timestamp: 1659979550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val charMap = new mutable.HashMap[Character, String]()\n        val reString\
    \ = new mutable.StringBuilder(s.reverse)\n        for(c <- s) {\n            if(charMap.contains(c))\
    \ {\n                charMap.get(c) = charMap.get(c) + c.toUpperCase\n       \
    \         charMap.remove(c)\n            }\n            else if(c.isLetter) {\n\
    \                charMap.get(c) = c.toUpperCase\n            }\n            else\
    \ {\n                charMap.get(c) = c\n            }\n        }\n        charMap.map(s\
    \ => reString.append(s) + \"\\n\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud7rnpac.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcharMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mCharacter\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpud7rnpac.scala:18:27 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mreString\e[0m = \e[33mnew\e[0m mutable.StringBuilder(s.reverse)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(!s.contains(\"\")){\n            return s\n        }else{\n      \
    \      var r = \"\"\n            var v = \"\"\n            var f = s.length()\n\
    \            for(i<-0 until f){\n                if(s.charAt(i)>='A' && s.charAt(i)<='Z'){\n\
    \                    v = s.charAt(i).toUpperCase + v\n                }else{\n\
    \                    v = s.charAt(i).toLowerCase + v\n                }\n    \
    \        }\n            r = v\n            return r\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpl0hg93.scala:25:36 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    v = s.charAt(i).toUpperCase + v\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpl0hg93.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    v = s.charAt(i).toLowerCase + v\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if (s.length() == 0) {\n            return \"\"\n        } else {\n \
    \           var newString = \"\"\n            var isLetter = false\n         \
    \   for (i <- 0 until s.length()) {\n                val c = s.charAt(i)\n   \
    \             if (Character.isLetter(c)) {\n                    isLetter = true\n\
    \                } else {\n                    if (!isLetter) {\n            \
    \            newString += c\n                    } else {\n                  \
    \      newString += c.toUpperCase()\n                    }\n                }\n\
    \            }\n            newString\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pq8xt6z.scala:30:34 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        newString += c.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of String - did you mean String.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pq8xt6z.scala:30:39 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        newString += c.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var reversed = \"\"\n        for (i <- 0 until s.length) reversed = reversed.concat(s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase )\n        if (reversed.length != s.length) return\
    \ reversed\n        reversed.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3x8iwyhq.scala:18:75 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ reversed = reversed.concat(s.charAt(i).toLowerCase + s.charAt(i).toUpperCase\
    \ )\n\e[31m\e[31m   |\e[0m                                                   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \       var res = \"\"\n       for ( i <- 0 until s.length ) {\n         if (\
    \ Character.isLetter(s.charAt(i)) ) {\n           val c = s.charAt(i).toLower\n\
    \           val u = s.charAt(i).toUpper\n           if ( c != u ) {\n        \
    \      res =  res +  c\n           } else {\n              res =  res +  u\n \
    \          }\n         } else {\n           res =  res +  s.charAt(i)\n      \
    \   }\n       }\n       res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9h_weton.scala:34)\n\tat Problem.main(tmp9h_weton.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \       s.foldLeft(\"\")(\n          (acc, x) => {\n            x match {\n  \
    \              case a if a.isLetter => acc + (x.toUpper + x.toLowerCase)\n   \
    \             case a => acc + x\n            }\n          }\n       )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24ugkdy5.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m a \e[33mif\e[0m a.isLetter\
    \ => acc + (x.toUpper + x.toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \                                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toLowerCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.length\n        val output = mutable.ArrayBuffer.empty[String]\n\
    \        for(i <- 0 until chars) {\n            val ch = s.charAt(i)\n       \
    \     if(ch == ch) {\n                output += s.substring(i)\n            }\n\
    \        }\n        output.toString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkjt7ffsj.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moutput\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until s.length)\n        result\
    \ += (if (s.toUpperCase(s.charAt(i))) s.toUpperCase(s.charAt(i)) else s.toLowerCase(s.charAt(i)))\
    \ + \"\"\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuzcq9s_s.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result += (\e[33mif\e[0m (s.toUpperCase(s.charAt(i)))\
    \ s.toUpperCase(s.charAt(i)) \e[33melse\e[0m s.toLowerCase(s.charAt(i))) + \e\
    [31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuzcq9s_s.scala:19:45 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result += (\e[33mif\e[0m (s.toUpperCase(s.charAt(i)))\
    \ s.toUpperCase(s.charAt(i)) \e[33melse\e[0m s.toLowerCase(s.charAt(i))) + \e\
    [31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    Char\n\e[31m\
    \   |\e[0m                                     Required: java.util.Locale\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuzcq9s_s.scala:19:73\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result += (\e[33mif\e\
    [0m (s.toUpperCase(s.charAt(i))) s.toUpperCase(s.charAt(i)) \e[33melse\e[0m s.toLowerCase(s.charAt(i)))\
    \ + \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Found:    Char\n\e[31m   |\e[0m            \
    \                                  Required: java.util.Locale\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuzcq9s_s.scala:19:105 -------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result += (\e[33mif\e[0m (s.toUpperCase(s.charAt(i)))\
    \ s.toUpperCase(s.charAt(i)) \e[33melse\e[0m s.toLowerCase(s.charAt(i))) + \e\
    [31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                                         \
    \                                                        ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Char\n\e\
    [31m   |\e[0m                                        "
  stdout: ''
  timestamp: 1659979550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for (i <- s.indices)\
    \ {\n            val t = s.charAt(i)\n            if (t >= 'a' && t <= 'z') {\n\
    \                result.append((t - 'a').toUpper)\n            } else if (t >=\
    \ 'A' && t <= 'Z') {\n                result.append((t - 'A').toUpper)\n     \
    \       } else {\n                result.append(t)\n            }\n        }\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplgrm0_mj.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append((t - \e[31m'a'\e[0m).toUpper)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value toUpper is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplgrm0_mj.scala:23:40 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append((t - \e[31m'A'\e[0m).toUpper)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value toUpper is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        var temp = \"\"\n        for (i <- 0 until s.length){\n\
    \            if ( isLetter(s.charAt(i)) ){\n                temp = s.charAt(i)\n\
    \                res = temp.toUpperCase\n            }\n            else{\n  \
    \              res = temp + s.charAt(i)\n            }\n        }\n        return\
    \ res\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fpztl5c.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m ( isLetter(s.charAt(i)) ){\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3fpztl5c.scala:21:31 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                temp = s.charAt(i)\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:   \
    \ Char\n\e[31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if (s.isEmpty) {\n            s\n        } else {\n            val res\
    \ = new Array[String](s.length)\n            val sL = s.toLower\n            val\
    \ sU = s.toUpperCase\n            val sF = s.filterNot(_.isLetter)\n         \
    \   val sA = s.filter(_.isLetter)\n            var i = 0\n            for (x <-\
    \ sF) {\n                if (i == res.length) {\n                    res(i) =\
    \ x.toUpperCase\n                    i += 1\n                    res(i) = x.toLowerCase\n\
    \                    i += 1\n                } else {\n                    res(i)\
    \ = x.toUpperCase\n                    i += 1\n                }\n           \
    \ }\n            for (x <- sA) {\n                if (i == res.length) {\n   \
    \                 res(i) = x.toLowerCase\n                    i += 1\n       \
    \         } else {\n                    res(i) = x.toLowerCase\n             \
    \       i += 1\n                }\n            }\n            for (x <- sU) {\n\
    \                if (i == res.length) {\n                    res(i) = x.toUpperCase\n\
    \                    i += 1\n                } else {\n                    res(i)\
    \ = x.toUpperCase\n                    i += 1\n                }\n           \
    \ }\n            for (x <- sL) {\n                if (i == res.length) {\n   \
    \                 res(i) = x.toLowerCase\n                    i += 1\n       \
    \         } else {\n                    res(i) = x.toLowerCase\n             \
    \       i += 1\n                }\n            }\n            res\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36msL\e[0m = s.toLower\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 value toLower is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp28orfkuz.scala:28:31 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                    res(i) = x.toUpperCase\n\e[31m\e[31m \
    \  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:30:31 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    res(i) = x.toLowerCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:33:31 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    res(i) = x.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:39:31 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                    res(i) = x.toLowerCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:42:31 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                    res(i) = x.toLowerCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp28orfkuz.scala:48:31 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                    res(i) = x.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \       "
  stdout: ''
  timestamp: 1659979554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if (s.isEmpty) {\n            s\n        } else {\n            val rev\
    \ = if (s.head.isLetter) s.toUpper else s.toLower\n            var rev2: String\
    \ = \"\"\n            var index = 0\n            var isRev2 = false\n        \
    \    var isRev = false\n            val c = charArrayOf(s.head)\n            for\
    \ (i <- 0 until c.length) {\n                if (s.subSequence(index, i + 1).forall(_.isLetter))\
    \ {\n                    isRev = true\n                    rev2 = rev2 + c.charAt(i)\
    \ + s.subSequence(index, i + 1).mkString(\"\")\n                } else {\n   \
    \                 isRev2 = true\n                    rev2 = rev2 + c.charAt(i)\
    \ + s.subSequence(index, i + 1).mkString(\"\")\n                }\n          \
    \      index = i + 1\n            }\n            if (isRev && isRev2) {\n    \
    \            rev\n            } else if (isRev) {\n                rev\n     \
    \       } else {\n                rev2\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpndzhkekm.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mrev\e[0m = \e[33mif\e\
    [0m (s.head.isLetter) s.toUpper \e[33melse\e[0m s.toLower\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 value toUpper is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpndzhkekm.scala:20:60 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mrev\e[0m = \e[33mif\e\
    [0m (s.head.isLetter) s.toUpper \e[33melse\e[0m s.toLower\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value toLower is not a member of\
    \ String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpndzhkekm.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mc\e[0m = charArrayOf(s.head)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: charArrayOf\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpndzhkekm.scala:27:48\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m (s.subSequence(index, i + \e[31m1\e[0m).forall(_.isLetter)) {\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value forall is not a member of CharSequence\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpndzhkekm.scala:29:76 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    rev2 = rev2 + c.charAt(i) + s.subSequence(index,\
    \ i + \e[31m1\e[0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of CharSequence - did you mean\
    \ CharSequence.toString?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpndzhkekm.scala:32:76\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    "
  stdout: ''
  timestamp: 1659979559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newstr = \"\"\n        for ( i <- 0 until s.length ) {\n        \
    \    val c = s(i)\n            if ( c.isLetter) {\n                newstr = newstr\
    \ + c.toUpperCase\n            }\n            else {\n                newstr =\
    \ newstr + c\n            }\n        }\n        return newstr\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_0jykww.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                newstr = newstr + c.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val array = s.toCharArray\n        val s = array\n        var i = 0\n\
    \        while (i < s.length) { \n            val x = s(i)\n            if (x\
    \ >='a' && x <='z' || x >='A' && x <='Z') {\n                val y = x.toUpperCase\n\
    \                s(i) = y\n            }\n            else {\n               \
    \ s(i) = x\n            }\n            i += 1\n        }\n        new String(s)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp75l8rmgy.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = array\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35marray\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var new_s = s\n        for( i <- 1 to s.length ) {\n            if( s.charAt(i).isLetter)\
    \ {\n                if( s.charAt(i) == s.charAt(i).toLower ) {\n            \
    \        new_s = new_s.replace( s.charAt(i), s.charAt(i).toUpper )\n         \
    \       }else {\n                    new_s = new_s.replace( s.charAt(i), s.charAt(i).toLower\
    \ )\n                }\n            }\n        }\n        if( new_s.length ==\
    \ 0 ) {\n            return s\n        }else {\n            return new_s\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 4\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.solve$$anonfun$1(tmpunlua3qk.scala:19)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.solve(tmpunlua3qk.scala:26)\n\
    \tat Problem$.main(tmpunlua3qk.scala:34)\n\tat Problem.main(tmpunlua3qk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        for(i <- s.length){\n            if(isLetter(s.charAt(i))){\n\
    \                if(s.charAt(i).isUpper){\n                    res += s.charAt(i).toLowerCase\n\
    \                }else{\n                    res += s.charAt(i).toUpperCase\n\
    \                }\n            }else{\n                res += s.charAt(i)\n \
    \           }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprc4ji02x.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- s.length){\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def isLetter(char : Char) : Boolean = {\n            char.equals('a')\
    \ || char.equals('b') || char.equals('c') || char.equals('d')\n        }\n\n \
    \       var result: String = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (isLetter(s.charAt(i))) {\n                result += s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase\n            } else {\n                result += s.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwq_o1bx2.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                result += s.charAt(i).toLowerCase + s.charAt(i).toUpperCase\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of String - did you mean String.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwq_o1bx2.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                result += s.charAt(i).toLowerCase + s.charAt(i).toUpperCase\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val letters = mutable.LinkedHashSet[Char]()\n        var i = 0\n    \
    \    for (c <- s) {\n            if (Character.isLetter(c)) {\n              \
    \  letters += c\n            } else {\n                letters += Char(c.toUpperCase)\n\
    \            }\n        }\n        val result = s.reverse\n        letters.foreach\
    \ { c => result = result.swap(0, c.length) }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4eijblr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.LinkedHashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toCharArray()\n        var resultStr = \"\"\n        var\
    \ pos = 0\n        while (pos < arr.length) {\n            val c = arr(pos)\n\
    \            if (c.isLetter) {\n                resultStr += c.toUpper\n     \
    \           resultStr += c.toLower\n            } else {\n                resultStr\
    \ += c\n            }\n            pos += 1\n        }\n        resultStr.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8uytm1d7.scala:33)\n\tat Problem.main(tmp8uytm1d7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val sb = new StringBuilder(s)\n        for(i <- 0 until s.length)\n \
    \           if(i == 0 || Character.isLetter(s.charAt(i-1)))\n            {\n \
    \               sb.setCharAt(i, s.charAt(i-1).toLower)\n            }\n      \
    \      else\n            {\n                sb.setCharAt(i, s.charAt(i-1).toUpper)\n\
    \            }\n        sb.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyktd9bu.scala:27:11\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        sb.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def reverse(str: String, i: Int): String = {\n            if (i >= str.length)\
    \ str\n            else reverse(str.substring(0,i+1), i) + str.substring(i+1,\
    \ str.length) + reverse(str.substring(i+1, str.length), i+1)\n        }\n    \
    \    val resultSet = mutable.LinkedHashSet[String]()\n        val reversedString\
    \ = reverse(s, 0)\n        def checkAndAdd(str: String, i: Int) {\n          \
    \  if (i >= str.length) return\n            if (!resultSet.contains(str)) {\n\
    \                resultSet += str\n                checkAndAdd(reversedString,\
    \ i+1)\n            }\n        }\n        checkAndAdd(reversedString, 0)\n   \
    \     resultSet.mkString.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxer2qcod.scala:23:45 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mdef\e[0m \e[36mcheckAndAdd\e[0m(\e[36mstr\e\
    [0m: \e[35mString\e[0m, \e[36mi\e[0m: \e[35mInt\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                     '=' expected, but '{' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxer2qcod.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toList.toSet\n        chars.foldLeft(\"\")( (acc, c) =>\
    \ {\n            val reversed = if (c.isUpper) c.toLower else c.toUpperCase\n\
    \            acc + (if (acc.isEmpty) \"\" else \",\") + reversed\n        }).dropRight(1)\
    \ ++ chars.head.toLower\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpckxvq3q2.scala:19:59 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mif\e\
    [0m (c.isUpper) c.toLower \e[33melse\e[0m c.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strArray = s.toList\n        val reversedArray = strArray.reverse\n\
    \        if (strArray.isEmpty) reversedArray\n        else {\n            val\
    \ lettersCounts = strArray.map(letter => letter -> 1).groupBy(_._1).mapValues(_.size).withDefault(0)\
    \ {_ + _}\n            val strArrayInverted = strArray.map(letter => lettersCounts(letter)\
    \ - lettersCounts(letter.toUpperCase)).reverse.map(i => letter -> i)\n       \
    \     reversedArray.filter(_._1 == 0).getOrElse(reversedArray.toList.flatMap(item\
    \ => lettersCounts(item._1) / lettersCounts(item._1.toUpperCase).roundToInt)).reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7b1tkr71.scala:19:30\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (strArray.isEmpty)\
    \ reversedArray\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (reversedArray : List[Char])\n\
    \e[31m   |\e[0m                              Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7b1tkr71.scala:21:100 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlettersCounts\e[0m =\
    \ strArray.map(\e[36mletter\e[0m => letter -> \e[31m1\e[0m).groupBy(_._1).mapValues(_.size).withDefault(\e\
    [31m0\e[0m) {_ + _}\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue withDefault is not a member of scala.collection.MapView[Char,\
    \ Int]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7b1tkr71.scala:22:134 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mstrArrayInverted\e[0m\
    \ = strArray.map(\e[36mletter\e[0m => lettersCounts(letter) - lettersCounts(letter.toUpperCase)).reverse.map(\e\
    [36mi\e[0m => letter -> i)\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                     Not found: letter\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7b1tkr71.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            reversedArray.filter(_._1 == \e[31m0\e[0m).getOrElse(reversedArray.toList.flatMap(\e\
    [36mitem\e[0m => lettersCounts(item._1) / lettersCounts(item._1.toUpperCase).roundToInt)).reverse\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m   |\e\
    [0m                                 value _1 is not a member of Char\n4 errors\
    \ found"
  stdout: ''
  timestamp: 1659979571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var s = \"\"\n        var i = 0\n        var k = 0\n        var charCount\
    \ = 0\n        for (i <- 0 until s.length)\n        {\n            k = i\n   \
    \         while(k != 0)\n            {\n                char = s.charAt(k - 1)\n\
    \                if (char.matches(\"[a-zA-Z]+\"))\n                {\n       \
    \             charCount += 1\n                    k = k - 1\n                }\n\
    \                else\n                {\n                    charCount = 0\n\
    \                    k = k - 1\n                }\n            }\n           \
    \ if (charCount == 0)\n            {\n                k = i\n                while(k\
    \ != 0)\n                {\n                    char = s.charAt(k - 1)\n     \
    \               charCount += 1\n                    k = k - 1\n              \
    \  }\n            }\n            if (charCount > 0)\n            {\n         \
    \       k = i\n                while(k != 0)\n                {\n            \
    \        char = s.charAt(k - 1)\n                    if (char.matches(\"[a-zA-Z]+\"\
    ))\n                    {\n                        charCount -= 1\n          \
    \              k = k + 1\n                    }\n                    else\n  \
    \                  {\n                        charCount = 0\n                \
    \        k = k - 1\n                    }\n                }\n            }\n\
    \            s = s.substring(0,i) + s.substring(i+1, s.length) + s.substring(0,k)\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5mre63e.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                char = s.charAt(k - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5mre63e.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m (char.matches(\e[31m\"[a-zA-Z]+\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                    Not found: char\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5mre63e.scala:43:20 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    char = s.charAt(k - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5mre63e.scala:53:20 ------------------------\e[0m\e[0m\n\e[31m53 |\e\
    [0m                    char = s.charAt(k - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5mre63e.scala:54:24\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m                    \e[33mif\e\
    [0m (char.matches(\e[31m\"[a-zA-Z]+\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                        Not found: char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.length == 0) return s\n        var l = 0\n        var r = 0\n  \
    \      var count = 0\n        val lower = mutable.HashMap[Char,Char]()\n     \
    \   val upper = mutable.HashMap[Char,Char]()\n        for(i <- 0 until s.length)\n\
    \        {\n            if(i < s.length)\n            {\n                val c\
    \ = s(i)\n                if(c in lower)\n                    lower(c) = i\n \
    \               else\n                    upper(c) = i\n            }\n      \
    \      else\n            {\n                if(count == 0)\n                {\n\
    \                    r = i - 1\n                    l = i\n                }\n\
    \                else if(count < s.length)\n                {\n              \
    \      val c = s(count)\n                    if(c in upper)\n                \
    \    {\n                        lower(c) = l\n                        upper(c)\
    \ = r\n                        count += 1\n                    }\n           \
    \         else\n                    {\n                        lower(c) = l\n\
    \                        upper(c) = r\n                        count += 1\n  \
    \                  }\n                }\n            }\n        }\n        if(count(upper)\
    \ > 0)\n            for(c <- upper)\n                lower(c) = count\n      \
    \  if(count(lower) > 0)\n            for(c <- lower)\n                upper(c)\
    \ = count\n        val result = mutable.ArrayBuffer(\"\")\n        var i = 0\n\
    \        while(i < s.length)\n        {\n            val c = s(i)\n          \
    \  if(!(c in lower) && !(c in upper))\n                result += c\n         \
    \   i += 1\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h5zt6c1.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m,\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h5zt6c1.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m,\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1h5zt6c1.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m(c in lower)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ in is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1h5zt6c1.scala:43:25\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                    \e[33mif\e\
    [0m(c in upper)\n\e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value in is not a member of Char\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp1h5zt6c1.scala:58:11 -----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mif\e[0m(count(upper) > \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvariable\e\
    [0m \e[35mcount\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp1h5zt6c1.scala:61:11 -----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mif\e[0m(count(lower) > \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvariable\e\
    [0m \e[35mcount\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n"
  stdout: ''
  timestamp: 1659979571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val mapString = mutable.LinkedHashMap[Char, String]()\n        val arrayString\
    \ = s.toCharArray.map(x => (x, \"\")).toArray\n        for(i <- 0 to arrayString.size\
    \ - 1) {\n            val currentChar = arrayString(i)\n            mapString.put(currentChar,\
    \ \"\")\n        }\n        val finalString = \"\"\n        for(i <- 0 to arrayString.size\
    \ - 1) {\n            val currentChar = arrayString(i)\n            val currentStringValue:\
    \ String = mapString(currentChar)\n            if(currentStringValue != \"\")\
    \ {\n                if(currentStringValue.length >= arrayString.size) {\n   \
    \                 currentStringValue ++= arrayString(arrayString.size - 1)\n \
    \               }\n                mapString.put(currentChar, currentStringValue)\n\
    \                mapString.putIfAbsent(currentChar, currentStringValue)\n    \
    \        }\n        }\n        for(i <- 0 to mapString.size - 1) {\n         \
    \   val currentChar = arrayString(i)\n            val currentStringValue: String\
    \ = mapString(currentChar)\n            if(currentStringValue != \"\") {\n   \
    \             finalString += mapString(currentChar)\n                mapString.remove(currentChar)\n\
    \            }\n        }\n        finalString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hy56vib.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmapString\e[0m = mutable.LinkedHashMap[\e\
    [35mChar\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hy56vib.scala:29:39\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    currentStringValue\
    \ ++= arrayString(arrayString.size - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value ++= is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4hy56vib.scala:39:28 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m                finalString += mapString(currentChar)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a\
    \ member of String - did you mean finalString.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.reversed\n        val isLetter = result.forall(_.isLetter)\n\
    \        if (isLetter) {\n            result.reverse\n        } else {\n     \
    \       result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwum27w3t.scala:17:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = s.reversed\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mreversed\e[0m in \e[33mtrait\e[0m \e[35mIndexedSeqOps\e[0m cannot be\
    \ accessed as a member of scala.collection.immutable.WrappedString from module\
    \ class Problem$.\n\e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mreversed\e\
    [0m not permitted because enclosing \e[33mobject\e[0m \e[35mProblem\e[0m\n\e[31m\
    \   |\e[0m is not a subclass of \e[33mtrait\e[0m \e[35mIndexedSeqOps\e[0m in \e\
    [33mpackage\e[0m \e[35mscala.collection\e[0m where target is defined\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val ret = new StringBuilder\n        val letter = s.toCharArray\n   \
    \     val len = s.length\n        if (len > 0) {\n            val letterMap =\
    \ Map(('a' to 'z'), ('A' to 'Z'))\n            var index = 0\n            while\
    \ (index < len) {\n                val c = letter(index)\n                index\
    \ += 1\n                if (letterMap.contains(c)) {\n                    ret.append(letterMap(c))\n\
    \                } else {\n                    ret.append(c)\n               \
    \ }\n            }\n        }\n        return ret.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pac94k2.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mletterMap\e[0m = Map((\e[31m'a'\e[0m to \e[31m'z'\e[0m), (\e[31m'A'\e[0m to\
    \ \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m   |\e[0m       Required: (Any, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8pac94k2.scala:21:47 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mletterMap\e[0m = Map((\e\
    [31m'a'\e[0m to \e[31m'z'\e[0m), (\e[31m'A'\e[0m to \e[31m'Z'\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m   |\e[0m       Required: (Any, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8pac94k2.scala:26:39 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (letterMap.contains(c)) {\n\e\
    [31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (c : Char)\n\e[31m   |\e[0m\
    \                                       Required: Nothing\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pac94k2.scala:27:41 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    ret.append(letterMap(c))\n\e[31m\e\
    [31m   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (c : Char)\n\e[31m   |\e[0m\
    \                                         Required: Nothing\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E051] Reference Error: /tmp/tmp8pac94k2.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newString : String = s.reverse\n        var isInLowerCase = true\n\
    \        var index = 0\n        while (index < s.length) {\n            val char\
    \ = s.charAt(index)\n            if (char >= 'a' && char <= 'z') {\n         \
    \       if (!isInLowerCase) {\n                    val newChar = char.toUpperCase\n\
    \                    newString = newString.substring(0, newString.length - 1)\
    \ + newChar\n                    index = index + 1\n                    isInLowerCase\
    \ = true\n                }\n                else {\n                    val newChar\
    \ = char.toLowerCase\n                    newString = newString.substring(0, newString.length\
    \ - 1) + newChar\n                    index = index + 1\n                    isInLowerCase\
    \ = false\n                }\n            }\n            else {\n            \
    \    newString = newString + char\n                index = index + 1\n       \
    \     }\n        }\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxfvyd2h.scala:24:39 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mval\e[0m \e[36mnewChar\e[0m\
    \ = char.toUpperCase\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxfvyd2h.scala:30:39\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    \e[33mval\e\
    [0m \e[36mnewChar\e[0m = char.toLowerCase\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val resultArray = s.map {\n            char =>\n                if (char\
    \ >= 'a' && char <= 'z')\n                    char.toUpperCase\n             \
    \   else if (char >= 'A' && char <= 'Z')\n                    char.toLowerCase\n\
    \                else\n                    char\n        }\n        val result\
    \ = resultArray.toString.reverse\n        result != \"\" ? result : s.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tmk3w03.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    char.toUpperCase\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4tmk3w03.scala:22:25 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                    char.toLowerCase\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4tmk3w03.scala:27:34 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        result != \e[31m\"\"\e[0m ? result : s.reverse\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     type reverse is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var index = 0\n        var resultString : String = \"\"\n\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (index != 0) {\n\
    \                    resultString += c.toUpperCase\n                    index\
    \ = 0\n                } else {\n                    resultString += c.toLowerCase\n\
    \                }\n            } else {\n                index += 1\n       \
    \     }\n        }\n\n        if (index > 0) {\n            resultString += s.substring(index).reverse\n\
    \        }\n\n        return resultString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbu9yazvn.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    resultString += c.toUpperCase\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbu9yazvn.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    resultString += c.toUpperCase\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbu9yazvn.scala:26:33\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    resultString\
    \ += c.toLowerCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbu9yazvn.scala:26:38\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    resultString\
    \ += c.toLowerCase\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if (s.isEmpty) s\n        val m = s.toLower\n        val n = m.countLetters\n\
    \        if (n == 0) s.reverse\n        else if (n == 1) s(0).toUpper + s(1)\n\
    \        else {\n            val t = m span (_.isLetter)\n            val c =\
    \ t.length\n            val b = t map (_.toLowerCase)\n            val b = b.sortWith\
    \ ((x, y) => x.compareTo(y))\n            val l = b.length /2 + 1\n          \
    \  val x = b.take(l).mkString\n            val y = b.drop(l).mkString\n      \
    \      val z = x ++ \"@\" + y\n            z\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb_b6x6z8.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = s.toLower\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ toLower is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb_b6x6z8.scala:21:41 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m1\e[0m) s(\e[31m0\e[0m).toUpper\
    \ + s(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    Char\n\e[31m   |\e[0m                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb_b6x6z8.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mb\e[0m = b.sortWith ((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mb is already defined as \e[33mvalue\e[0m \e[35mb\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpb_b6x6z8.scala:17:23 ----------------\e[0m\e[0m\n\e[33m17 |\e\
    [0m        \e[33mif\e[0m (s.isEmpty) s\n\e[33m\e[33m   |\e[0m                \
    \       ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val a = mutable.ArrayBuffer(0)\n        var r = \"\"\n        for(i<-\
    \ 0 until s.length)\n            {\n                if(s.charAt(i).toUpperCase\
    \ == 'A')\n                    r = r.substring(1) + s.charAt(i)\n            \
    \    else\n                    a = a.cons(s.charAt(i) + s.charAt(i).toLowerCase)\n\
    \            }\n        r = r ++ a.reverse\n        return r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmporcg2r5z.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmporcg2r5z.scala:21:31 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mif\e[0m(s.charAt(i).toUpperCase == \e[31m'A'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmporcg2r5z.scala:24:22 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    a = a.cons(s.charAt(i) + s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val a\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      var result = \"\"\n      var i = 0\n      while (i < s.length && charAt.apply(s,i)\
    \ != ' ') {\n        result += charAt.apply(s,i)\n        i += 1\n      }\n  \
    \    \n      if (i == s.length) {\n        result += charAt.apply(s,0)\n     \
    \ } else {\n        val j = s.length-1\n        while (i >= 0 && charAt.apply(s,i)\
    \ != ' ') {\n          result += charAt.apply(s,i)\n          i -= 1\n       \
    \ }\n        if (i < 0) {\n          result += charAt.apply(s,i)\n        }\n\
    \      }\n      result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjyn0y70.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mwhile\e[0m (i < s.length && charAt.apply(s,i)\
    \ != \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: charAt\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjyn0y70.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        result += charAt.apply(s,i)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of\
    \ String - did you mean String.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjyn0y70.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result += charAt.apply(s,i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        Not found: charAt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxjyn0y70.scala:25:15 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        result += charAt.apply(s,\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of String\
    \ - did you mean String.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjyn0y70.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result += charAt.apply(s,\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: charAt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxjyn0y70.scala:28:25 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mwhile\e[0m (i >= \e[31m0\e[0m && charAt.apply(s,i)\
    \ != \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: charAt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/t"
  stdout: ''
  timestamp: 1659979576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray.map(c => if (isLetter(c.toString)) c.toUpperCase\
    \ else c.toLowerCase).toArray\n        val newChars = chars.filter(c => isLetter(c.toString)).map(c\
    \ => if (isLetter(c)) c.toUpperCase else c.toLowerCase)\n        val reversed\
    \ = newChars.reverse\n        if (chars.isEmpty) reversed\n        else reversed.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzc5vs68u.scala:17:47 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = s.toCharArray.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c.toString)) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase).toArray\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                    Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzc5vs68u.scala:17:71 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = s.toCharArray.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c.toString)) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase).toArray\n\e[31m\e[31m   |\e[0m                            \
    \                                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzc5vs68u.scala:17:90 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = s.toCharArray.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c.toString)) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase).toArray\n\e[31m\e[31m   |\e[0m                            \
    \                                                            ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpzc5vs68u.scala:17:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = s.toCharArray.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c.toString)) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase).toArray\n\e[31m\e[31m   |\e[0m                            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659979578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val res = new StringBuilder(s.length)\n        for((i, _) <- s.zipWithIndex)\
    \ { \n            val c = s.charAt(i)\n            if(c.isLetter) res.append(c.toUpperCase)\n\
    \            else res.append(c)\n        }\n        if(s.length == 0) res.reverse\n\
    \        else res\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpewqbu303.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c.isLetter) res.append(c.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewqbu303.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(s.length\
    \ == \e[31m0\e[0m) res.reverse\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    StringBuilder\n\
    \e[31m   |\e[0m                          Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewqbu303.scala:24:13 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m res\n\e[31m\e[31m   |\e[0m  \
    \           ^^^\e[0m\n\e[31m   |\e[0m             Found:    (res : StringBuilder)\n\
    \e[31m   |\e[0m             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toList\n        val reverse = arr.reverse\n        if(arr.forall(_.isLetter))\n\
    \        {\n            var newStr = \"\"\n            for(i <- 0 until arr.length)\n\
    \            {\n                if(!arr(i).isLetter)\n                {\n    \
    \                arr(i) = arr(i).swapCase\n                }\n               \
    \ else\n                {\n                    arr(i) = arr(i).toUpper\n     \
    \           }\n            }\n            for(i <- 0 until arr.length)\n     \
    \       {\n                if(arr(i).isLetter && !arr(i).equals(\"\"))\n     \
    \           {\n                    newStr += arr(i).swapCase\n               \
    \ }\n                else\n                {\n                    newStr += arr(i)\n\
    \                }\n            }\n            return newStr\n        }\n    \
    \    else\n        {\n            return reverse\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpwxffgv.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    arr(i) = arr(i).swapCase\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m  value update is not\
    \ a member of List[Char] - did you mean arr.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzpwxffgv.scala:26:36 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                    arr(i) = arr(i).swapCase\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                     value swapCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzpwxffgv.scala:30:20 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                    arr(i) = arr(i).toUpper\n\e[31m\e[31m\
    \   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m  value update is not a\
    \ member of List[Char] - did you mean arr.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzpwxffgv.scala:37:27 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m                    newStr += arr(i).swapCase\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzpwxffgv.scala:37:37 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m                    newStr += arr(i).swapCase\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       value swapCase is not a member of Char\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzpwxffgv.scala:48:19 --------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mreturn\e[0m reverse\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (reverse : List[Char])\n\e[31m   |\e[0m                   Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659979583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        s.toUpperCase() match {\n            case \"\" => s\n            case\
    \ s => s.head + s.tail\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppknn_q00.scala:23)\n\tat Problem.main(tmppknn_q00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result : String = \"\"\n        for (i<- 0 until s.length){\n   \
    \         if (s(i).toLower.toUpper == s(i)){\n                result = s.substring(0,i)\
    \ + s.substring(i+1)\n                break\n            }\n            else{\n\
    \                result = result + s(i)\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmabxkdmu.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = s\n        var count = s.size\n        var i = 0\n        var\
    \ j = 0\n        while(i < count){\n            if(s.charAt(i) == ' '){\n    \
    \            i += 1\n                if(i < count){\n                    if(s.charAt(i)\
    \ == ' '){\n                        i += 1\n                        if(i < count){\n\
    \                            if(s.charAt(i) == ' '){\n                       \
    \         i += 1\n                                if(i < count){\n           \
    \                         if(s.charAt(i) == ' '){\n                          \
    \              i += 1\n                                        if(i < count){\n\
    \                                            if(s.charAt(i) == ' '){\n       \
    \                                         i += 1\n                           \
    \                 }\n                                        }\n             \
    \                       }\n                                }\n               \
    \             }\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        while(i < count){\n            if(s.charAt(i)\
    \ == ' '){\n                i += 1\n                if(i < count){\n         \
    \           if(s.charAt(i) == ' '){\n                        i += 1\n        \
    \                if(i < count){\n                            if(s.charAt(i) ==\
    \ ' '){\n                                i += 1\n                            \
    \    if(i < count){\n                                    if(s.charAt(i) == ' '){\n\
    \                                        i += 1\n                            \
    \        }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        while(i < count){\n            if(s.charAt(i) == '\
    \ '){\n                i += 1\n                if(i < count){\n              \
    \      if(s.charAt(i) == ' '){\n                        i += 1\n             \
    \           if(i < count){\n                            if(s.charAt(i) == ' '){\n\
    \                                i += 1\n                                if(i\
    \ < count){\n                                    if(s.charAt(i) == ' '){\n   \
    \                                     i += 1\n                               \
    \     }\n                                }\n                            }\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n        while(i < count){\n            if(s.charAt(i) == ' '){\n\
    \                i += 1\n                if(i < count){\n                    if(s.charAt(i)\
    \ == ' '){\n                        i += 1\n                        if(i < count){\n\
    \                            if(s.charAt(i) == ' '){\n                       \
    \         i += 1\n                                if(i < count){\n           \
    \                         if(s.charAt(i) == ' '){\n                          \
    \              i += 1\n                                    }\n               \
    \                 }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        while(i\
    \ < count){\n            if(s.charAt(i) == ' '){\n                i += 1\n   \
    \             if(i < count){\n                    if(s.charAt(i) == ' '){\n  \
    \                      i += 1\n                        if(i < count){\n      \
    \                      if(s.charAt(i) == ' '){\n                             \
    \   i += 1\n                                if(i < count){\n                 \
    \                   if(s.charAt(i) == ' '){\n                                \
    \        i += 1\n                                    }\n                     \
    \           }\n                            }\n                        }\n    \
    \                }\n                }\n            }\n        }\n        while(i\
    \ < count){\n            if(s.charAt(i) == ' '){\n                i += 1\n   \
    \             if(i < count){\n                    if(s.charAt(i) == ' '){\n  \
    \                      i += 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjrt1r996.scala:145:0 ---------------------------\e\
    [0m\e[0m\n\e[31m145 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrt1r996.scala:126:8\
    \ --------------------\e[0m\e[0m\n\e[31m126 |\e[0m        \e[33mwhile\e[0m(i <\
    \ count){\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m        Found:\
    \    Unit\n\e[31m    |\e[0m        Required: String\n\e[31m127 |\e[0m        \
    \    \e[33mif\e[0m(s.charAt(i) == \e[31m' '\e[0m){\n\e[31m128 |\e[0m         \
    \       i += \e[31m1\e[0m\n\e[31m129 |\e[0m                \e[33mif\e[0m(i < count){\n\
    \e[31m130 |\e[0m                    \e[33mif\e[0m(s.charAt(i) == \e[31m' '\e[0m){\n\
    \e[31m131 |\e[0m                        i += \e[31m1\e[0m\n\e[31m132 |\e[0m  \
    \  }\n\e[31m133 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m134 |\e[0m    assert(solve((\e[31m\"AsDf\"\e\
    [0m)).equals((\e[31m\"aSdF\"\e[0m)));\n\e[31m135 |\e[0m    assert(solve((\e[31m\"\
    1234\"\e[0m)).equals((\e[31m\"4321\"\e[0m)));\n\e[31m136 |\e[0m    assert(solve((\e\
    [31m\"ab\"\e[0m)).equals((\e[31m\"AB\"\e[0m)));\n\e[31m137 |\e[0m    assert(solve((\e\
    [31m\"#a@C\"\e[0m)).equals((\e[31m\"#A@c\"\e[0m)));\n\e[31m138 |\e[0m    assert(solve((\e\
    [31m\"#AsdfW^45\"\e[0m)).equals((\e[31m\"#aSDFw^45\"\e[0m)));\n\e[31m139 |\e[0m\
    \    assert(solve((\e[31m\"#6@2\"\e[0m)).equals((\e[31m\"2@6#\"\e[0m)));\n\e[31m140\
    \ |\e[0m    assert(solve((\e[31m\"#$a^D\"\e[0m)).equals((\e[31m\"#$A^d\"\e[0m)));\n\
    \e[31m141 |\e[0m    assert(solve((\e[31m\"#ccc\"\e[0m)).equals((\e[31m\"#CCC\"\
    \e[0m)));\n\e[31m142 |\e[0m    }\n\e[31m143 |\e[0m}\n\e[31m    |\e[0m\n\e[31m\
    \    |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newString : String = \"\"\n        var i = 0\n        for (i <- 0\
    \ until s.length()) {\n            if (isLetter(s.charAt(i))) {\n            \
    \    newString += s.charAt(i).toLower\n            }\n            else {\n   \
    \             newString += s.charAt(i)\n            }\n        }\n        newString\
    \ += s.substring(0, i)\n        newString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfiueeym4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (isLetter(s.charAt(i))) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newString :String = \"\"\n        val letters = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length()) {\n            val c = s(i)\n         \
    \   if (letters.contains(c)) {\n                newString += (newString.toUpperCase)\n\
    \            } else {\n                newString += (newString.toLowerCase)\n\
    \            }\n            letters.add(c)\n        }\n        newString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe6g56nt5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val counts = mutable.HashMap[(Int, Int), Int]()\n        for (c <- s.toCharArray)\
    \ {\n            counts.getOrElse((c, 1), 0)\n            counts.update((c + ('a'\
    \ -'A'), counts.getOrElse((c, 1), 0) + 1), (c + ('a' -'A'), 1))\n        }\n \
    \       val list = for ((key, val) <- counts) yield (val -> key)\n        list.sortWith(_._1\
    \ > _._1).flatMap(x => x._2.toCharArray).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4ysn2988.scala:22:30 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mfor\e\
    [0m ((key, \e[33mval\e[0m) <- counts) \e[33myield\e[0m (\e[33mval\e[0m -> key)\n\
    \e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e[0m \
    \                             pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp4ysn2988.scala:22:35 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mfor\e\
    [0m ((key, \e[33mval\e[0m) <- counts) \e[33myield\e[0m (\e[33mval\e[0m -> key)\n\
    \e[31m\e[31m   |\e[0m                                   ^^\e[0m\n\e[31m   |\e\
    [0m                                   ')' expected, but '<-' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp4ysn2988.scala:22:46 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mfor\e\
    [0m ((key, \e[33mval\e[0m) <- counts) \e[33myield\e[0m (\e[33mval\e[0m -> key)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        '<-' expected, but 'yield'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ysn2988.scala:23:23 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list.sortWith(_._1 > _._1).flatMap(\e[36mx\e\
    [0m => x._2.toCharArray).mkString\n\e[31m\e[31m   |\e[0m                     \
    \  ^\e[0m\n\e[31m   |\e[0m                       ')' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ysn2988.scala:23:34 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list.sortWith(_._1 > _._1).flatMap(\e[36mx\e\
    [0m => x._2.toCharArray).mkString\n\e[31m\e[31m   |\e[0m                     \
    \             ^\e[0m\n\e[31m   |\e[0m                                  '<-' expected,\
    \ but '.' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ysn2988.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[(\e[35mInt\e[0m, \e[35mInt\e[0m), \e[35mInt\e\
    [0m]()\n\e[31"
  stdout: ''
  timestamp: 1659979589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val s = s(0)\n      val s = s.toLowerCase + s.toUpperCase + s.toCharArray\n\
    \      if(s.toCharArray.length == 0) {\n        return s.reverse\n      }\n  \
    \    var i = 0\n      for(i <- 0 until s.length - 1) {\n        if(s(i).isLetter)\
    \ {\n          if(s(i + 1) != s(i)) {\n            s(i + 1) = s(i)\n         \
    \ }\n        }\n      }\n      return s.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5w7la97_.scala:18:10 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36ms\e[0m = s.toLowerCase + s.toUpperCase\
    \ + s.toCharArray\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5w7la97_.scala:17:14 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m      \e[33mval\e[0m \e[36ms\e[0m = s(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newS = s\n        for {\n            i <- 0 to newS.length - 1\n\
    \            c <- newS.charAt(i)\n            l <- 1 to c.toString.length - 1\n\
    \            if (c.toString.toUpperCase() == c.toString.charAt(l)) {\n       \
    \         newS = newS.replaceAll(c, c.toString.charAt(l).toUpperCase)\n      \
    \      }\n            else if (!(c.toString.toUpperCase() == c.toString.charAt(l)))\
    \ {\n                newS = newS.replaceAll(c, c.toString.charAt(l).toLowerCase)\n\
    \            }\n        } yield newS\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmjdz33s4.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (!(c.toString.toUpperCase()\
    \ == c.toString.charAt(l))) {\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e\
    [31m   |\e[0m            '}' expected, but 'else' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmjdz33s4.scala:20:17 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            c <- newS.charAt(i)\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value flatMap\
    \ is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (c <- s)\n            c match\
    \ {\n                case x@(\"\\\\\")  => result.append((x map {_.toUpperCase})(0))\n\
    \                case x@(\"`\")   => result.append((x map {_.toLowerCase})(0))\n\
    \                case x         => result.append(x)\n            }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp83fzz0e7.scala:20:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m x@(\e[31m\"\\\\\"\e[0m)\
    \  => result.append((x map {_.toUpperCase})(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                        ^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp83fzz0e7.scala:20:51 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mcase\e[0m x@(\e[31m\"\\\\\"\e[0m)  => result.append((x\
    \ map {_.toUpperCase})(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value map is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp83fzz0e7.scala:21:24 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m x@(\e[31m\"`\"\e[0m)   =>\
    \ result.append((x map {_.toLowerCase})(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                        ^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp83fzz0e7.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mcase\e[0m x@(\e[31m\"`\"\e[0m)   => result.append((x\
    \ map {_.toLowerCase})(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value map is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp83fzz0e7.scala:24:15 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        result.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.foldLeft(\"\") { (result, c) =>\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result + c.toUpperCase()\n            }\
    \ else (result + c.toLowerCase())\n        }\n        if (!result.isEmpty) result.reverse\n\
    \        else s\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzj14198o.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result + c.toUpperCase()\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzj14198o.scala:20:31 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            } \e[33melse\e[0m (result + c.toLowerCase())\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = s.toLowerCase\n        val result = str.filter( c => c.isLetter\
    \ || c.isDigit)\n            .foldLeft(\"\")( (acc, c) =>\n                if\
    \ ( acc.isEmpty) {\n                    acc\n                } else {\n      \
    \              if (acc.last.isDigit) {\n                        if (acc.last.isUpper)\
    \ {\n                            acc + c.toUpper\n                        } else\
    \ {\n                            acc + c.toLower\n                        }\n\
    \                    } else {\n                        if (acc.last.isUpper) {\n\
    \                            acc + c.toUpper\n                        } else {\n\
    \                            acc + c.toLower\n                        }\n    \
    \                }\n                }\n            )\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvi2kiqy9.scala:41)\n\tat Problem.main(tmpvi2kiqy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        var flag = true\n        for(i <- s.indices)\
    \ {\n            if(s[i].toLowerCase == s[i].toUpperCase)\n            {\n   \
    \             if(s.substring(i).contains(s[i].toUpperCase) == false)\n       \
    \             result += s.substring(0,i) + s[i].toUpperCase\n                else\n\
    \                    result += s.substring(0,i) + s[i].toLowerCase\n         \
    \       flag = true\n                i += 1 \n            }\n            else\n\
    \            {\n                if(result == \"\")\n                    result\
    \ += s.substring(0,i)\n                else\n                    result += s.substring(0,i)\n\
    \                \n                result += s[i].toLowerCase\n              \
    \  flag = false\n                i += 1\n            }\n            \n       \
    \ }\n        \n        \n        if(result == \"\")\n            return s\n  \
    \      else\n            return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmqszetz.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(s[\e[35mi\e[0m].toLowerCase\
    \ == s[\e[35mi\e[0m].toUpperCase)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0m                 Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwmqszetz.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(s.substring(i).contains(s[\e\
    [35mi\e[0m].toUpperCase) == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                            Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwmqszetz.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    result += s.substring(\e[31m0\e[0m,i)\
    \ + s[\e[35mi\e[0m].toUpperCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmqszetz.scala:23:51\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    result\
    \ += s.substring(\e[31m0\e[0m,i) + s[\e[35mi\e[0m].toUpperCase\n\e[31m\e[31m \
    \  |\e[0m                                                   ^\e[0m\n\e[31m   |\e\
    [0m                                                   Not found: type i\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmqszetz.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    result += s.substring(\e[31m0\e[0m,i)\
    \ + s[\e[35mi\e[0m].toLowerCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmqszetz.scala:25:51\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m               "
  stdout: ''
  timestamp: 1659979595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val lowerCaseChars = s.toCharArray.toList.flatMap(c => if (isLetter(c))\
    \ c.toLower else c)\n        val upperCaseChars = s.toCharArray.toList.flatMap(c\
    \ => if (isLetter(c)) c.toUpper else c)\n        val emptyChars = s.toCharArray.toList.filter(c\
    \ => !isLetter(c))\n        val emptyCharsChars = s.toCharArray.toList.filterNot(c\
    \ => isLetter(c))\n        val emptyCharsCharsChars = s.toCharArray.toList.filterNot(c\
    \ => isLetter(c) && c.toLower == c.toUpper)\n        val emptyCharsCharsCharsChars\
    \ = s.toCharArray.toList.filterNot(c => isLetter(c) && c.toUpper == c.toLower)\n\
    \        val charsToBeReversed = if (emptyChars.isEmpty) emptyCharsChars else\
    \ upperCaseChars\n        charsToBeReversed.foldLeft(\"\") {\n            case\
    \ (acc, c) => acc + (if (isLetter(c)) c else c.toUpper)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb986tsvs.scala:17:67 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseChars\e[0m = s.toCharArray.toList.flatMap(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c)) c.toLower \e[33melse\e[0m c)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \          Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb986tsvs.scala:17:82 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mlowerCaseChars\e[0m = s.toCharArray.toList.flatMap(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c)) c.toLower \e[33melse\e[0m c)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                Found:    Char\n\e[31m   |\e[0m                             \
    \                Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb986tsvs.scala:17:95 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseChars\e[0m = s.toCharArray.toList.flatMap(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c)) c.toLower \e[33melse\e[0m c)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                       Found:    (c : Char)\n\e[31m   |\e[0m                \
    \                             Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb986tsvs.scala:18:67 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mupperCaseChars\e[0m = s.toCharArray.toList.flatMap(\e\
    [36mc\e[0m => \e[33mif\e[0m (isLetter(c)) c.toUpper \e[33melse\e[0m c)\n\e[31m\e\
    [31m   |\e[0m       "
  stdout: ''
  timestamp: 1659979596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val (n, rest) = s.length, s.drop(n).reverse\n      if (rest == \"\") s\n\
    \      else solve(rest) + s.take(n) + s.take(rest.length).map(x => (x.toUpperCase).reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzoq7e533.scala:17:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m (n, rest) = s.length, s.drop(n).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           end of statement expected but ',' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzoq7e533.scala:19:17 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33melse\e[0m solve(rest) + s.take(n) + s.take(rest.length).map(x\
    \ => (x.toUpperCase).reverse)\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                 Found:    (rest : Any)\n\e[31m   |\e[0m      \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzoq7e533.scala:19:32 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m      \e[33melse\e[0m solve(rest) + s.take(n) + s.take(rest.length).map(x\
    \ => (x.toUpperCase).reverse)\n\e[31m\e[31m   |\e[0m                         \
    \       ^\e[0m\n\e[31m   |\e[0m                                Found:    (n :\
    \ Any)\n\e[31m   |\e[0m                                Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzoq7e533.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33melse\e[0m solve(rest) + s.take(n) + s.take(rest.length).map(x\
    \ => (x.toUpperCase).reverse)\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \             value length is not a member of Any\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpzoq7e533.scala:19:69 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m      \e[33melse\e[0m solve(rest) + s.take(n) + s.take(rest.length).map(x\
    \ => (x.toUpperCase).reverse)\n\e[31m\e[31m   |\e[0m                         \
    \                                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toUpperCase is not a member of Char\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        for (i <- 0 until s.length) { \n            if(s.charAt(i).toLower.toUpper\
    \ == s.charAt(i)) {\n                s = s.substring(0, i) + s.substring(i + 1,\
    \ s.length)\n                res.reverse\n            }\n            else {\n\
    \                s += s.charAt(i).toLower\n            }\n        }\n        s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp59lh1ily.scala:20:18 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                s = s.substring(\e[31m0\e[0m, i) + s.substring(i\
    \ + \e[31m1\e[0m, s.length)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val s\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp59lh1ily.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s += s.charAt(i).toLower\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of String - did you mean s.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var str = \"\"\n        var newStr = \"\"\n        for (i <- 0 to s.length\
    \ - 1) {\n            str += s(i)\n            if (isLetter(s(i))) {\n       \
    \         newStr += s(i).swapCase()\n            } else {\n                newStr\
    \ += s(i)\n            }\n        }\n        if (str == \"\") {\n            newStr\
    \ += s\n        }\n        newStr\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpev6y79k7.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isLetter(s(i))) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpev6y79k7.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                newStr +=\
    \ s(i).swapCase()\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpev6y79k7.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                newStr += s(i).swapCase()\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                    value swapCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newString = \"\"\n        for (i <- 0 until s.length)\n         \
    \   if (s.charAt(i) != '#' && s.charAt(i) != '@' && s.charAt(i) != '.')\n    \
    \            newString += s.charAt(i).toUpper\n            else\n            \
    \    newString += s.charAt(i)\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_bzxxj3.scala:26)\n\tat Problem.main(tmpz_bzxxj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        for (c <- s) {\n            if (c.toLower.isLetter)\
    \ {\n                c = c.toUpperCase\n            } else {\n               \
    \ c = c.toLowerCase\n            }\n        }\n        for (c <- s) {\n      \
    \      if (c.toUpper.isLetter) {\n                c += c.toUpper\n           \
    \ } else {\n                c += c.toLower\n            }\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0om371g.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                c = c.toUpperCase\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr0om371g.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                c = c.toLowerCase\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value toLowerCase is\
    \ not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0om371g.scala:27:18\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                c += c.toUpper\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Char - did you mean c.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpr0om371g.scala:29:18 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                c += c.toLower\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Char - did you mean c.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val res = s.map(x => x.toUpperCase()).map(x => x.toLowerCase())\n   \
    \     res.foldLeft(\"abc\") {\n            (t, x) => if (t.length < x.length)\
    \ x else t.charAt(t.length - x.length) + x\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4yo9s3mo.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = s.map(\e[36mx\e\
    [0m => x.toUpperCase()).map(\e[36mx\e[0m => x.toLowerCase())\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val sb = new mutable.StringBuilder\n        for (i <- 0 until s.length)\
    \ \n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') \n             \
    \   sb.append((s.charAt(i) - 'a' + 26).toChar)\n            else \n          \
    \      sb.append(s.charAt(i))\n        sb.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp435qv5o6.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msb\e[0m = \e[33mnew\e[0m\
    \ mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var reversedString = \"\"\n        var letterCount = 0\n        for (xs\
    \ <- s) {\n            if (xs.isLetter) {\n                letterCount += 1\n\
    \                val reversed = xs.toUpperCase(Locale.ROOT)\n                if\
    \ (letterCount > 1) {\n                    reversedString += reversed\n      \
    \          } else {\n                    reversedString += xs\n              \
    \  }\n            } else {\n                val reversed = xs.toLowerCase(Locale.ROOT)\n\
    \                reversedString += reversed\n            }\n        }\n      \
    \  return reversedString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdudzmtmi.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mreversed\e[0m =\
    \ xs.toUpperCase(Locale.ROOT)\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdudzmtmi.scala:22:46 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                \e[33mval\e[0m \e[36mreversed\e[0m = xs.toUpperCase(Locale.ROOT)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Not found: Locale\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdudzmtmi.scala:29:34\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e\
    [0m \e[36mreversed\e[0m = xs.toLowerCase(Locale.ROOT)\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                     value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdudzmtmi.scala:29:46 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36mreversed\e[0m =\
    \ xs.toLowerCase(Locale.ROOT)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                   Not found: Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def reverse1(i : Int, j : Int) : String = {\n            if (i < j) \n\
    \                if (s(i) == s(j)) s(i)\n                else (s(i) + s(j)) \n\
    \            else if (i == j) \n                s(i)\n            else s(j)\n\
    \        }\n        def reverse2(i : Int, j : Int) : String = {\n            if\
    \ (i < j)\n                if (s(i) == s(j))\n                {\n            \
    \        if (s(i) == s('a')) s(i)\n                    else s(i) ++ (s(j) - s('a'))\n\
    \                }\n                else (s(i) + s(j))\n            else if (i\
    \ == j)\n                if (s(i) == s('a'))\n                {\n            \
    \        if (s(i) == s('a')) s(i)\n                    else s(i) ++ (s(j) - s('a'))\n\
    \                }\n                else if (s(i) == s('A')) s(i) ++ s(j) \n \
    \               else if (s(i) == s('a')) s(i) ++ s(j) \n                else if\
    \ (s(i) == s('A')) s(i) ++ s(j) \n                else (s(i) + s(j))\n       \
    \     else s(j)\n        }\n        val str = s.toUpperCase\n        var result\
    \ : String = \"\"\n        var i : Int = 0\n        var j : Int = str.length -\
    \ 1\n        while (j < i)\n        {\n            if (str(i) == str[j])\n   \
    \         {\n                result = result + reverse1(i, j)\n              \
    \  i = j\n            }\n            else \n            {\n                result\
    \ = result + str[j]\n                j = i\n            }\n        }\n       \
    \ if (str.length > i) result = result + reverse2(i, j)\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vvpv5sy.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m\
    \ (s(i) == s(j)) s(i)\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                  Found:    Char\n\
    \e[31m   |\e[0m                                  Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vvpv5sy.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m (s(i) + s(j)) \n\e[31m\e\
    [31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Found:    Char\n\e[31m   |\e[0m                         \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vvpv5sy.scala:22:17\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                s(i)\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Char\n\e[31m   |\e[0m                Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vvpv5sy.scala:23:18 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m s(j)\n\e[31m\e[31m   |\e\
    [0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Char\n\
    \e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7vvpv5sy.scala:29:41 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m (s(i) == s(\e[31m'a'\e\
    [0m)) s(i)\n\e[31m\e[31m   |\e[0m                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Char\n\e\
    [31m   |\e[0m                                        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e["
  stdout: ''
  timestamp: 1659979606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = s.toUpperCase\n        val revStr = new StringBuilder(str)\n\
    \        var index = 0\n        while (index < revStr.length) {\n            val\
    \ chr = revStr(index)\n            if (chr.isLetter) revStr.reverse()\n      \
    \      else revStr.insert(index, chr.toLowerCase)\n            index += 1\n  \
    \      }\n        revStr.toString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjc96v3wv.scala:22:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (chr.isLetter) revStr.reverse()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringBuilder\e[0m: (i: Int): Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjc96v3wv.scala:23:42 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m revStr.insert(index, chr.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newString = \"\"\n        for(c:String <- s.toCharArray) {\n    \
    \        if(c == c.toLower) c = c.toUpper\n            else c = c.toLower\n  \
    \          newString = newString.concat(c)\n        }\n        newString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw_j2vvy.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(c == c.toLower) c = c.toUpper\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               value toLower is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphw_j2vvy.scala:19:37 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(c == c.toLower) c = c.toUpper\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 value toUpper is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw_j2vvy.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m c = c.toLower\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      value toLower is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val reversed = s.foldLeft(new StringBuilder){ (builder, char) =>\n  \
    \          if (char >= 'a' && char <= 'z') {\n                builder.append(char.asInstanceOf[String]).append(char.asInstanceOf[String])\n\
    \            } else {\n                builder.append(char)\n            }\n \
    \       }.toString\n        val chars = reversed.asInstanceOf[String].toCharArray\n\
    \        val result = chars.foldLeft(new StringBuilder){ (builder, char) =>\n\
    \            if (char >= 'a' && char <= 'z') {\n                builder.append(char.asInstanceOf[String]).append(char.asInstanceOf[String])\n\
    \            } else {\n                builder.append(char)\n            }\n \
    \       }.toString\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class java.lang.Character cannot be cast\
    \ to class java.lang.String (java.lang.Character and java.lang.String are in module\
    \ java.base of loader 'bootstrap')\n\tat Problem$.$anonfun$1(tmpwcnyaq_r.scala:19)\n\
    \tat Problem$.$anonfun$adapted$1(tmpwcnyaq_r.scala:22)\n\tat scala.collection.StringOps$.foldLeft$extension(StringOps.scala:1084)\n\
    \tat Problem$.solve(tmpwcnyaq_r.scala:22)\n\tat Problem$.main(tmpwcnyaq_r.scala:35)\n\
    \tat Problem.main(tmpwcnyaq_r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.length\n        val arr = new Array[Char](l)\n        for (i<-\
    \ 0 to l-1){\n            arr(i) = s.charAt(i)\n        }\n        if(arr.length\
    \ == 0)\n            return s\n        val len = arr.length\n        val s = arr.mkString.toUpperCase\n\
    \        val r = new StringBuilder(s.length)\n        var i = 0\n        for (i\
    \ <- 0 to (len-1)){\n            if(i == 0 && s.charAt(i) == s.charAt(i+1))\n\
    \                r(i+1) = s.charAt(i)\n            else if(s.charAt(i) == s.charAt(i+1))\n\
    \                r(i) = s.charAt(i)\n            else\n                r(i) =\
    \ s.charAt(i)\n        }\n        return r.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphsva_o5z.scala:18:34 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mChar\e[0m](l)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphsva_o5z.scala:36:17 --------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mreturn\e[0m r.reverse\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    StringBuilder\n\
    \e[31m   |\e[0m               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def isLetter(s: String): Boolean = s.forall(_.isLetter)\n        def\
    \ isLower(s: String): Boolean = s.forall(_.isLower)\n        def isUpper(s: String):\
    \ Boolean = s.forall(_.isUpper)\n        def toUpper(s: String): String = s.foldLeft(\"\
    \")(_ + _.toUpperCase)\n        def toLower(s: String): String = s.foldLeft(\"\
    \")(_ + _.toLowerCase)\n        def reverseCase(s: String): String = {\n     \
    \       if (isLetter(s)) toUpper(toLower(s)) else s\n        }\n        if (isLetter(s))\
    \ reverseCase(s) else s\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7q3q7cpf.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m \e[36mtoUpper\e[0m(\e[36ms\e[0m:\
    \ \e[35mString\e[0m): \e[35mString\e[0m = s.foldLeft(\e[31m\"\"\e[0m)(_ + _.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7q3q7cpf.scala:21:62\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mdef\e[0m \e\
    [36mtoLower\e[0m(\e[36ms\e[0m: \e[35mString\e[0m): \e[35mString\e[0m = s.foldLeft(\e\
    [31m\"\"\e[0m)(_ + _.toLowerCase)\n\e[31m\e[31m   |\e[0m                     \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val map = mutable.Map[Char, String]()\n        for (c <- s.toCharArray)\
    \ \n            if (map.contains(c)) {\n                map += (c->map.get(c))\n\
    \            } else {\n                map += (c->c.toString)\n            }\n\
    \        \n        val keys: Set[Char] = map.keySet.toSet\n        val vals: Set[String]\
    \ = map.values.toSet\n        val keys = keys diff vals.toSet\n\n        val result\
    \ = keys.toIterator.map(c => c -> map.get(c)).toMap\n\n        val result2 = for\
    \ ( (k, v) <- result if v == \"\" ) yield k\n        val reversed = result2.toIterator.map(c\
    \ => c -> map.get(c._1)).toMap\n        val result3 = reversed.toIterator.map(c\
    \ => c._1 -> c._2)\n        \n        val final = result3.toSeq.sortBy(c => -c._1.length).map(c\
    \ => c._1 + \"@\" + c._2)\n        \n        val final2 = final diff result2\n\
    \        final2.toSeq.sortBy(c => -c._2.length).map(c => c._1 + \"@\" + c._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp31ihwoz_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[33mfinal\e[0m = result3.toSeq.sortBy(c\
    \ => -c._1.length).map(c => c._1 + \e[31m\"@\"\e[0m + c._2)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp31ihwoz_.scala:37:21 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mfinal2\e[0m = \e[33mfinal\e\
    [0m diff result2\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     expression expected but \e[31mfinal\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp31ihwoz_.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mkeys\e[0m = keys diff vals.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mkeys is already defined as \e[33mvalue\e[0m \e[35mkeys\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp31ihwoz_.scala:17:18 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp31ihwoz_.scala:38:15 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m        final2.toSeq.sortBy(\e[36mc\e[0m => -c._2.length).map(\e\
    [36mc\e[0m => c._1 + \e[31m\"@\"\e[0m + c._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toSeq is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val charMap = new mutable.HashMap[Char, Char]()\n        for (ch <- s.toCharArray)\
    \ {\n            if (!charMap.contains(ch)) {\n                charMap += (ch\
    \ -> ch)\n            } else {\n                charMap += (ch -> charMap(ch))\n\
    \            }\n        }\n        if (charMap.isEmpty) {\n            return\
    \ s\n        }\n        for (ch <- charMap.keySet) {\n            charMap.remove(ch)\n\
    \        }\n        charMap.toList.sortWith((x, y) => x._2 < y._2).map(_._1).mkString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrub8mnh.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcharMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val ans = mutable.ListBuffer[String]()\n        for (i <- 0 to s.length\
    \ - 1) {\n            val chr = s.charAt(i)\n            if (isLetter(chr)) {\n\
    \                val ch = chr.toUpperCase\n                val l = chr.toLowerCase\n\
    \                if (isLetter(l)) {\n                    ans append l\n      \
    \          } else {\n                    ans append ch\n                }\n  \
    \          } else {\n                ans append chr\n            }\n        }\n\
    \        if (ans.isEmpty) {\n            s.reverse\n        } else {\n       \
    \     ans\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcoz0wzgj.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcoz0wzgj.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (isLetter(chr)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcoz0wzgj.scala:21:29\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36mch\e[0m = chr.toUpperCase\n\e[31m\e[31m   |\e[0m                   \
    \      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcoz0wzgj.scala:22:28\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36ml\e[0m = chr.toLowerCase\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcoz0wzgj.scala:23:20\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m (isLetter(l)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: isLetter\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val result = new StringBuilder\n      for (c <- s) {\n        if (c >=\
    \ 'A' && c <= 'Z') {\n          result.append(c.toUpperCase)\n        } else {\n\
    \          result.append(c)\n        }\n      }\n      if (result.toString.isEmpty)\
    \ {\n        result.toString\n      } else {\n        result.reverse\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpppnkdxkk.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          result.append(c.toUpperCase)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpppnkdxkk.scala:28:15 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        result.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val reverses = s.toString.toUpperCase.map(_.toUpperCase).getOrElse(s)\n\
    \        val withoutLetters = reverses.filter(!Char.isLetter)\n        withoutLetters.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwc1f7qq1.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mreverses\e[0m = s.toString.toUpperCase.map(_.toUpperCase).getOrElse(s)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var str = \"\"\n        for (ch <- s) {\n            if (Character.isLetter(ch))\
    \ str = ch + str\n            else str = ch + str.toUpperCase\n        }\n   \
    \     str.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdtup74ru.scala:25)\n\tat Problem.main(tmpdtup74ru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toCharArray\n        val result = mutable.Buffer.empty[String]\n\
    \        var i = 1\n        while (i <= arr.length) {\n            if (arr(i).toLowerCase\
    \ != arr(i).toUpperCase && arr(i) != 0) {\n                result += arr(i)\n\
    \            }\n            i += 1\n        }\n        result.toString()\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfg2oj7st.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfg2oj7st.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (arr(i).toLowerCase != arr(i).toUpperCase\
    \ && arr(i) != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.length\n        val rs = new StringBuilder\n        var i =\
    \ 0\n        while (i < l) {\n            if (s.charAt(i) >= 65 && s.charAt(i)\
    \ <= 90)\n                rs.append(s.charAt(i)-32) \n            else if (s.charAt(i)\
    \ >= 97 && s.charAt(i) <= 122)\n                rs.append(s.charAt(i)+32) \n \
    \           else\n                rs.append(s.charAt(i))\n            i += 1\n\
    \        }\n        return rs.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd_bxaoh.scala:29:18\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m rs.reverse\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      Found:    StringBuilder\n\e[31m   |\e[0m               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strArray = s.toCharArray\n        strArray.foldLeft(\"\") {\n   \
    \     case (acc, x) =>\n            if(x.isLetter) {\n                acc +: x.toUpperCase\n\
    \            } else {\n                acc +: x.toLowerCase\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj4udzvt6.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                acc +: x.toUpperCase\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \            value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpj4udzvt6.scala:23:25 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                acc +: x.toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \     value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.isEmpty) {\n            s\n        } else {\n            val temp\
    \ = s.toUpperCase\n            var result : List[String] = Nil\n            for(i\
    \ <- 0 until temp.length) {\n                val s = temp(i)\n               \
    \ if(s.isLetter) {\n                    if(temp.indexOf(s) + 1 ==  temp.length)\n\
    \                        result ::= s\n                    else\n            \
    \            result ::= s.toUpperCase\n                } else {\n            \
    \        result ::= s\n                }\n            }\n            val res =\
    \ result.mkString.reverse\n            res\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpimgnwq0h.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        result ::= s\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpimgnwq0h.scala:28:31 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                        result ::= s.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::=\
    \ is not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpimgnwq0h.scala:28:37 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        result ::= s.toUpperCase\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpimgnwq0h.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    result ::= s\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val input = s.toLowerCase \n        var resultStr = \"\"\n        var\
    \ i = 0;\n        while (i < input.length) {\n            if (input.charAt(i).toUpperCase\
    \ != input.charAt(i).toLowerCase) {\n                val tmp = input.charAt(i)\n\
    \                input.charAt(i) = input.charAt(i).toLowerCase\n             \
    \   input.charAt(i).toLowerCase = tmp\n            }\n            resultStr +=\
    \ input.charAt(i)\n            i += 1\n        }\n        return resultStr\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb_skidm.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (input.charAt(i).toUpperCase\
    \ != input.charAt(i).toLowerCase) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb_skidm.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                input.charAt(i) = input.charAt(i).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value update is not a member of Int => Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphb_skidm.scala:23:50 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                input.charAt(i) = input.charAt(i).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb_skidm.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                input.charAt(i).toLowerCase\
    \ = tmp\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value toLowerCase is not a member of Char\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val a = s.toUpperCase\n        val b = a.replaceAll(\"[A-Z]\", \"[a-z]\"\
    )\n        val c = b.replaceAll(\"[a-z]\", \"[A-Z]\")\n        if (b.isEmpty ||\
    \ c.isEmpty) s \n        else c.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68judov4.scala:24)\n\tat Problem.main(tmp68judov4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        // write your code here\n        val strList = s.toList\n        strList.foreach\
    \ { x => if(x.isLetter) x.toUpperCase() else x.toLowerCase() }\n        strList.reverse\n\
    \        \n        val result = strList.mkString\n        \n        result \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf6_wvwcz.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        strList.foreach { \e[36mx\e[0m => \e[33mif\e\
    [0m(x.isLetter) x.toUpperCase() \e[33melse\e[0m x.toLowerCase() }\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf6_wvwcz.scala:19:69\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        strList.foreach {\
    \ \e[36mx\e[0m => \e[33mif\e[0m(x.isLetter) x.toUpperCase() \e[33melse\e[0m x.toLowerCase()\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var rev = \"\"\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == s.charAt(i).toLowerCase())\n                rev = s.charAt(i) + rev\n   \
    \         else\n                rev = s.charAt(i) + rev\n        \n        if(rev.equals(\"\
    aaa\"))\n            rev = \"\"\n        else\n            rev = rev.reverse\n\
    \        \n        return rev\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmaf5w8r2.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (s.charAt(i) == s.charAt(i).toLowerCase())\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      var reverse = s\n      val letter = mutable.HashSet[Char]()\n      def\
    \ isUpper(letter : Char) : Boolean = {\n        if(letter.contains(letter.toLowerCase))\n\
    \          return false\n        else\n          return true\n      }\n      def\
    \ isLower(letter : Char) : Boolean = {\n        if(letter.contains(letter.toUpperCase))\n\
    \          return false\n        else\n          return true\n      }\n      for(i<-0\
    \ until reverse.length)\n        if(reverse(i).isLetter) \n          if(isUpper(reverse(i)))\
    \ reverse(i) = (reverse(i).toChar.toUpperCase)\n          else if(isLower(reverse(i)))\
    \ reverse(i) = (reverse(i).toChar.toLowerCase)\n          else \n            letter\
    \ += reverse(i).toChar\n      reverse = reverse.mkString\n      for(i<-0 until\
    \ letter.length)\n        if(!letter.contains(reverse(i))) reverse = reverse.reverse\n\
    \      reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprwx5eaa6.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mletter\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprwx5eaa6.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(letter.contains(letter.toLowerCase))\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprwx5eaa6.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mif\e[0m(letter.contains(letter.toLowerCase))\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprwx5eaa6.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(letter.contains(letter.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprwx5eaa6.scala:26:34 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mif\e[0m(letter.contains(letter.toUpperCase))\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprwx5eaa6.scala:33:34 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m          \e[33mif\e[0m(isUpper(reverse(i))) reverse(i)\
    \ = (reverse(i).toChar.toUpperCase)\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \  value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprwx5eaa6.scala:33:66 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m          \e[33mi"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def checkLetter(x:String) : Unit = {\n            if (x.toUpper == x)\n\
    \                x.toUpper\n            else if (x.toLower == x)\n           \
    \     x.toLower\n            else \n                x \n        }\n        var\
    \ rev = \"\"\n        var x = s.toCharArray().toList;\n        var index = x.length\n\
    \        while (index > 0) {\n            rev += checkLetter(x(0))\n         \
    \   x -= 1\n            index -= 1\n        }\n        rev\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67yz7qkk.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (x.toUpper == x)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ toUpper is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67yz7qkk.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                x.toUpper\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value toUpper is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp67yz7qkk.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (x.toLower == x)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      value toLower is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp67yz7qkk.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                x.toLower\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toLower is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp67yz7qkk.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            rev += checkLetter(x(\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp67yz7qkk.scala:29:32 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            rev += checkLetter(x(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            Found:    Char\n\e[31m   |\e[0m                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67yz7qkk.scala:30:14\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            x -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m    value -= is\
    \ not a member of List[Char] - did you mean List[Char].!=?\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = s.replaceAll(\"[^a-zA-Z]+\"\
    , \"\").reverse\n        if (reversed.isEmpty) result\n        else reversed.replaceAll(\"\
    [A-Za-z]+\", result)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfnqylp4l.scala:23)\n\tat Problem.main(tmpfnqylp4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.isEmpty || s.forall(c => c.isLetter)) s \n        else {\n     \
    \       val list = s.toList.map(_.toLowerCase)\n            val reversed = list.reverse\n\
    \            val newString = \"\"\n            list.foreach(i => { newString +=\
    \ i })\n            newString += reversed.mkString\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ocv5jf7.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = s.toList.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ocv5jf7.scala:22:42\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            list.foreach(\e\
    [36mi\e[0m => { newString += i })\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member\
    \ of String - did you mean newString.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ocv5jf7.scala:23:22 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            newString += reversed.mkString\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member of String\
    \ - did you mean newString.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = \"\"\n        for(i <- 0 until s.length)\n            str match\
    \ {\n                case s if Character.isLetter(s.charAt(i)) => Character.toUpperCase(s.charAt(i))\
    \ :: str\n                case s if Character.isUpperCase(s.charAt(i)) => Character.toLowerCase(s.charAt(i))\
    \ :: str\n                case _ => str :+ s\n            }\n        str.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6_a9t3u.scala:20:96 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m s \e[33mif\e[0m Character.isLetter(s.charAt(i))\
    \ => Character.toUpperCase(s.charAt(i)) :: str\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \  value :: is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpv6_a9t3u.scala:21:99 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mcase\e[0m s \e[33mif\e[0m Character.isUpperCase(s.charAt(i))\
    \ => Character.toLowerCase(s.charAt(i)) :: str\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \     value :: is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      def reverse(str: String) : String = {\n        if (str.size() <= 1) str\n\
    \        else reverse(s.subString(str.lastIndex)) + str.charAt(0) + reverse(s.subString(0,str.lastIndex))\n\
    \      }\n\n      def check(str: String, letters: List[Char]) : Boolean = {\n\
    \        if (str.size() == 0) true else letters.forall(letter => letter == str.charAt(0))\
    \ || check(str.substring(1), letters)\n      }\n\n      val result = check(s,\
    \ List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z').toList)\n\
    \      if (result == true) reverse(s.toList)\n      else s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpgoyudbpb.scala:18:16 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (str.size() <= \e[31m1\e[0m) str\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \e\
    [33mmethod\e[0m \e[35msize\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgoyudbpb.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m reverse(s.subString(str.lastIndex))\
    \ + str.charAt(\e[31m0\e[0m) + reverse(s.subString(\e[31m0\e[0m,str.lastIndex))\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \ value subString is not a member of String - did you mean s.substring?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgoyudbpb.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m reverse(s.subString(str.lastIndex))\
    \ + str.charAt(\e[31m0\e[0m) + reverse(s.subString(\e[31m0\e[0m,str.lastIndex))\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndex is not a member of String - did you mean str.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgoyudbpb.scala:19:77 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m reverse(s.subString(str.lastIndex))\
    \ + str.charAt(\e[31m0\e[0m) + reverse(s.subString(\e[31m0\e[0m,str.lastIndex))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value subString is not\
    \ a member of String - did you mean s.substring?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgoyudbpb.scala:19:93 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33melse\e[0m reverse(s.subString(str.lastIndex)) + str.charAt(\e\
    [31m0\e[0m) + reverse(s.subString(\e[31m0\e[0m,str.lastIndex))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndex is not\
    \ a member"
  stdout: ''
  timestamp: 1659979628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      def checkChar(s : String) : String = {\n        if (s.contains(\"\")) \n\
    \          \"\"\n        else \n          (s.toCharArray map {_.toUpperCase})\
    \ mkString \"\"\n      }\n      val arr = s.toCharArray\n      val ls = arr.length\n\
    \      val out = new mutable.ArrayBuffer[Char]\n      for (i<-ls downto 0 by -1)\n\
    \      if (arr(i).isLetter) out.append(checkChar(arr(i)))\n      else out.append(arr(i))\n\
    \      out.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_rve2xn.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          (s.toCharArray map {_.toUpperCase}) mkString\
    \ \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpn_rve2xn.scala:21:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          (s.toCharArray map {_.toUpperCase}) mkString\
    \ \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \       ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn_rve2xn.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m      \e[33mval\e[0m \e[36mout\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpn_rve2xn.scala:26:17 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      \e[33mfor\e[0m (i<-ls downto \e[31m0\e[0m by -\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value downto is not a member of Int - did you mean ls.toInt?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for ( i <- 0 to s.length\
    \ - 1) {\n            val letter = s(i)\n            if (letter.isUpper) {\n \
    \               val upperLetter = s(i).toUpperCase\n                if (upperLetter\
    \ != letter)\n                    result.append(upperLetter)\n            }\n\
    \            else\n                result.append(letter)\n        }\n        if\
    \ (result.length == 0)\n            s.reverse\n        else\n            result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_foad7qz.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_foad7qz.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mupperLetter\e[0m\
    \ = s(i).toUpperCase\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val map = mutable.Map[Char,Char]()\n        s.toList foreach {c => map.putIfAbsent(c.toLowerCase,c.toLowerCase)}\n\
    \        map.toList foreach {c =>\n            val upper = c.toUpperCase\n   \
    \         val lower = c.toLowerCase\n            map.remove(lower)\n         \
    \   map.remove(upper)\n        }\n        s.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbassa195.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = new StringBuilder\n        val l = s.length\n        for (i\
    \ <- 0 until l) {\n            str.append(\n                if (s.charAt(i).isLetter)\
    \ {\n                    if (s.charAt(i).toUpperCase == s.charAt(i)) {\n     \
    \                   s.charAt(i).toLowerCase\n                    } else {\n  \
    \                      s.charAt(i).toUpperCase\n                    }\n      \
    \          } else if (s.charAt(i) == s.charAt(i)) {\n                    s.charAt(i)\n\
    \                } else {\n                    s.charAt(i)\n                }\n\
    \            )\n        }\n        str.result()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf23_x5sk.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m (s.charAt(i).toUpperCase\
    \ == s.charAt(i)) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf23_x5sk.scala:23:36\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                        s.charAt(i).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf23_x5sk.scala:25:36 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        s.charAt(i).toUpperCase\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toUpperCase is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\"\n        for(c <- s) {\n            if(c.isLetter) res\
    \ += c.toUpper\n            else if(c.isLower && !c.isUpper) res += c.toLower\n\
    \            else res += c\n        }\n        if(res.isEmpty) res \n        else\
    \ res.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprs5wrx8q.scala:27)\n\tat Problem.main(tmprs5wrx8q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.length\n        val arr = new Array[String](l)\n        for(i\
    \ <- 0 until l){\n            arr(i) = s(i).toChar\n        }\n        val r =\
    \ arr.map(_.toUpperCase).foldLeft(\"\"){(acc, s) => \n            val ind = acc.lastIndexOf(s)\n\
    \            if(ind != -1){\n                acc += acc.substring(ind)\n     \
    \       }\n            acc += s\n        }\n        if(r.length == 0){\n     \
    \       return s\n        } else {\n            return r.substring(0,r.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp166k49wn.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            arr(i) = s(i).toChar\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Found:    Char\n\e[31m   |\e[0m                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp166k49wn.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                acc += acc.substring(ind)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   value += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp166k49wn.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            acc += s\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean acc.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toUpperCase().toList\n        strList.sortWith(a => a.isLetter\
    \ ? 0 : a.isUppercase ? 1 : -1)\n        strList.foldLeft(\"\")( (acc, c) => acc\
    \ + (if (c.isLetter) c.toUpperCase else c.toLowerCase))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsab82une.scala:18:65 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        strList.sortWith(\e[36ma\e[0m => a.isLetter ?\
    \ \e[31m0\e[0m : a.isUppercase \e[35m?\e[0m \e[31m1\e[0m : -\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                             ')'\
    \ expected, but ':' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpsab82une.scala:18:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        strList.sortWith(\e\
    [36ma\e[0m => a.isLetter ? \e[31m0\e[0m : a.isUppercase \e[35m?\e[0m \e[31m1\e\
    [0m : -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsab82une.scala:19:67 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        strList.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e\
    [0m, \e[36mc\e[0m) => acc + (\e[33mif\e[0m (c.isLetter) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase))\n\e[31m\e[31m   |\e[0m                                   \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsab82une.scala:19:86 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        strList.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e\
    [0m, \e[36mc\e[0m) => acc + (\e[33mif\e[0m (c.isLetter) c.toUpperCase \e[33melse\e\
    [0m c.toLowerCase))\n\e[31m\e[31m   |\e[0m                                   \
    \                                                 ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toLowerCase is not a member of Char\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.foldLeft(\"\") { (result, c) =>\n            if(c.isLetter)\
    \ c.toUpperCase() : c.toLowerCase()\n            else result + c\n        }\n\
    \        if(result.isEmpty) \"\" else result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxfx3inzq.scala:18:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(c.isLetter) c.toUpperCase()\
    \ : c.toLowerCase()\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   end of statement expected but '(' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxfx3inzq.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mif\e[0m(c.isLetter) c.toUpperCase() : c.toLowerCase()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxfx3inzq.scala:18:59 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(c.isLetter) c.toUpperCase()\
    \ : c.toLowerCase()\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                           Found:    Unit\n\e[31m   |\e[0m                  \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newStr = \"\"\n        var lastChar = scala.util.Try(s.lastChar).getOrElse(\"\
    \")\n        \n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == lastChar)\n                s = s.substring(0, i) + s.substring(i+1, s.length)\
    \ + s.substring(i, s.length)\n            else newStr += s.charAt(i)\n       \
    \ newStr\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps7addemp.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mlastChar\e[0m = scala.util.Try(s.lastChar).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value lastChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmps7addemp.scala:21:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(s.charAt(i) == lastChar)\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmps7addemp.scala:22:18 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                s = s.substring(\e[31m0\e[0m, i) + s.substring(i+\e\
    [31m1\e[0m, s.length) + s.substring(i, s.length)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val s\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.map(x => {\n            if (x.isLetter) {\n          \
    \      x.toUpperCase\n            } else {\n                x\n            }\n\
    \        }).reverse\n        result.filter(_.isLetter).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj8jp3wbw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                x.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value toUpperCase\
    \ is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        s.filter(_.isLetter).map(_.toUpperCase).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkwxw74ii.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        s.filter(_.isLetter).map(_.toUpperCase).mkString\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var chars = s.toCharArray\n        for(i <- chars.indices) {\n      \
    \      if(!chars(i).isLetter) {\n                chars(i) = chars(i).toUpper\n\
    \            } else {\n                chars(i) = chars(i).toLower\n         \
    \   }\n        }\n        new String(chars)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vn5oulv.scala:28)\n\tat Problem.main(tmp0vn5oulv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val arr = s.toList\n      val len = arr.size\n      val count = mutable.HashMap[String,\
    \ Int]()\n      for(i <- 0 until len){\n        val ch = arr(i)\n        if(count.contains(ch)){\n\
    \          count(ch) += 1\n        } else {\n          count(ch) = 1\n       \
    \ }\n      }\n      var newArr : List[Char] = Nil\n      for(i <- 0 until len){\n\
    \        val ch = arr(i)\n        if(count(ch) == 1){\n          newArr ::= ch\n\
    \        } else {\n          newArr ::= ch.toUpper\n        }\n      }\n     \
    \ newArr.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvi6wtj.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val a = s.toUpperCase\n        val b = a.toUpperCase.drop(1)\n      \
    \  val l = b.toUpperCase.map(chr => if(chr == '#') chr - '@' else '#')\n     \
    \   val d = l.toList.foldLeft(List[Char]())((l,c) => c +: l)\n        (a diff\
    \ b diff d).mkString.toUpperCase\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy1gkcfz.scala:20:57\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36md\e\
    [0m = l.toList.foldLeft(List[\e[35mChar\e[0m]())((\e[36ml\e[0m,\e[36mc\e[0m) =>\
    \ c +: l)\n\e[31m\e[31m   |\e[0m                                             \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \         Found:    (c : AnyVal)\n\e[31m   |\e[0m                            \
    \                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.length == 0)\n          return s\n        var str = s\n        var\
    \ chars = Array[Char](s.toCharArray: _*)\n        var reversedChars = Array[Char](s.toCharArray:\
    \ _*)\n\n        var i = 0\n        var j = 0\n\n        for(i <- 0 until chars.length)\
    \ {\n            if(chars(i) == chars(i))\n              chars(i) = chars(i).toLower\n\
    \            else chars(i) = chars(i).toUpper\n        }\n\n        for(i <- 0\
    \ until chars.length) {\n            if(chars(i) != chars(i)) // if the char is\
    \ not the same\n              chars(j) = chars(i) \n            else // if it\
    \ is the same\n              chars(j) = chars(i).toLower\n              j = (j\
    \ + 1) % chars.length // change the char and change position\n        }\n\n  \
    \      for(i <- 0 until reversedChars.length)\n          reversedChars(i) = chars(i)\
    \ \n        str = reversedChars.mkString(\"\")\n        return str\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgdedt1k.scala:46)\n\tat Problem.main(tmprgdedt1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        var rs = \"\"\n        var i = 0\n\
    \        while (i < chars.length) {\n            val c = chars(i)\n          \
    \  if (c == c.toLower) {\n                chars(i) = c.toUpper\n            }\
    \ else {\n                chars(i) = c.toLower\n            }\n            i +=\
    \ 1\n        }\n        for ( i <- 0 until chars.length) rs = rs.toString + chars(i)\n\
    \        rs\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0gsal20u.scala:34)\n\tat Problem.main(tmp0gsal20u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toCharArray\n        var newS = new StringBuilder(\"\")\n\
    \        for ((index, c) <- arr.zipWithIndex) {\n            if (Character.isLetter(c))\
    \ {\n                c match {\n                    case 'a' -> newS.append('A');\n\
    \                    case 'b' -> newS.append('B');\n                    case 'c'\
    \ -> newS.append('C');\n                    case 'd' -> newS.append('D');\n  \
    \                  case 'e' -> newS.append('E');\n                    case 'f'\
    \ -> newS.append('F');\n                    case 'g' -> newS.append('G');\n  \
    \                  case 'h' -> newS.append('H');\n                    case 'i'\
    \ -> newS.append('I');\n                    case 'j' -> newS.append('J');\n  \
    \                  case 'k' -> newS.append('K');\n                    case 'l'\
    \ -> newS.append('L');\n                    case 'm' -> newS.append('M');\n  \
    \                  case 'n' -> newS.append('N');\n                    case 'o'\
    \ -> newS.append('O');\n                    case 'p' -> newS.append('P');\n  \
    \                  case 'q' -> newS.append('Q');\n                    case 'r'\
    \ -> newS.append('R');\n                    case 's' -> newS.append('S');\n  \
    \                  case 't' -> newS.append('T');\n                    case 'u'\
    \ -> newS.append('U');\n                    case 'v' -> newS.append('V');\n  \
    \                  case 'w' -> newS.append('W');\n                    case 'x'\
    \ -> newS.append('X');\n                    case 'y' -> newS.append('Y');\n  \
    \                  case 'z' -> newS.append('Z');\n                    case 'A'\
    \ -> newS.append('a');\n                    case 'B' -> newS.append('b');\n  \
    \                  case 'C' -> newS.append('c');\n                    case 'D'\
    \ -> newS.append('d');\n                    case 'E' -> newS.append('e');\n  \
    \                  case 'F' -> newS.append('f');\n                    case 'G'\
    \ -> newS.append('g');\n                    case 'H' -> newS.append('h');\n  \
    \                  case 'I' -> newS.append('i');\n                    case 'J'\
    \ -> newS.append('j');\n                    case 'K' -> newS.append('k');\n  \
    \                  case 'L' -> newS.append('l');\n                    case 'M'\
    \ -> newS.append('m');\n                    case 'N' -> newS.append('n');\n  \
    \                  case 'O' -> newS.append('o');\n                    case 'P'\
    \ -> newS.append('p');\n                    case 'Q' -> newS.append('q');\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps45br6cl.scala:22:48 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m ->\
    \ newS.append(\e[31m'A'\e[0m);\n\e[31m\e[31m   |\e[0m                        \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \               '=>' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmps45br6cl.scala:23:48 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                    \e[33mcase\e[0m \e[31m'b'\e[0m -> newS.append(\e[31m'B'\e\
    [0m);\n\e[31m\e[31m   |\e[0m                                                ^\e\
    [0m\n\e[31m   |\e[0m                                            '=>' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps45br6cl.scala:24:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'c'\e[0m -> newS.append(\e[31m'C'\e[0m);\n\e[31m\e[31m   |\e\
    [0m                                                ^\e[0m\n\e[31m   |\e[0m   \
    \                                         '=>' expected, but ';' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmps45br6cl.scala:25:48 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mcase\e[0m \e[31m'd'\e[0m ->\
    \ newS.append(\e[31m'D'\e[0m);\n\e[31m\e[31m   |\e[0m                        \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \               '=>' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmps45br6cl.scala:26:48 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    \e[33mcase\e[0m \e[31m'e'\e[0m -> newS.append(\e[31m'E'\e\
    [0m);\n\e[31m\e[31m   |\e[0m                                                ^\e\
    [0m\n\e[31m   |\e[0m                                            '=>' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps45br6cl.scala:27:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'f'\e[0m -> newS.append(\e[31m'F'\e[0m);\n\e[31m\e[31m   |\e\
    [0m                                                ^\e[0m\n\e[31m   |\e[0m   \
    \                                    "
  stdout: ''
  timestamp: 1659979642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val list = s.toList\n      list.map(x => (x.toString.toLowerCase match\
    \ {\n        case 'a' => x.toUpperCase\n        case 'b' => x.toLowerCase\n  \
    \      case _ => x\n      }))\n      .filter(x => x != s)\n      .reverse\n  \
    \    .toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr111mes3.scala:19:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mcase\e[0m \e[31m'a'\e[0m => x.toUpperCase\n\
    \e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpr111mes3.scala:19:22 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mcase\e[0m \e[31m'a'\e[0m => x.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmpr111mes3.scala:20:13\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mcase\e[0m \e[31m'b'\e[0m => x.toLowerCase\n\e[31m\e[31m   |\e[0m     \
    \        ^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr111mes3.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mcase\e[0m \e\
    [31m'b'\e[0m => x.toLowerCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- Error: /tmp/tmpr111mes3.scala:23:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      .filter(x => x != s)\n\e[31m\e[31m   |\e[0m   \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n5 errors found\n"
  stdout: ''
  timestamp: 1659979646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = s.toUpperCase\n        val len : Int = str.length\n       \
    \ val newStr = new StringBuilder(\"\")\n        var i = 0\n        while ( i <\
    \ len) {\n            val c = str(i).toChar\n            if (c.isLetter) {\n \
    \               if (c.isUpper) {\n                    newStr += str(i).toUpperCase\n\
    \                } else {\n                    newStr += str(i).toLowerCase\n\
    \                }\n                i += 1\n            } else if (c.isDigit)\
    \ {\n                newStr += c\n                i += 1\n            } else {\n\
    \                newStr += c\n            }\n        }\n        if (newStr.length\
    \ == 0)\n            newStr = str.substring(1)\n        newStr.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwi6fai1b.scala:25:37 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    newStr += str(i).toUpperCase\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwi6fai1b.scala:27:37 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    newStr += str(i).toLowerCase\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi6fai1b.scala:38:34 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            newStr = str.substring(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    String\n\e[31m   |\e[0m                     Required:\
    \ StringBuilder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi6fai1b.scala:39:15\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        newStr.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val len = s.length\n        val maxIndex = len - 1 // last character\
    \ in s\n        val mapChar = Map('a' -> 'z', 'A' -> 'Z', '0' -> '9')\n      \
    \  var i = 0\n        while(i < maxIndex) {\n            val char = s(i)\n   \
    \         if(mapChar(char) match {\n                case Some(v) => char += v\n\
    \                case None => char\n            } != s) {\n                return\
    \ s\n            }\n            i += 1\n        }\n        if(s.isEmpty || s(0)\
    \ == '.') {\n            return s\n        }\n        if(s(0) == '#') {\n    \
    \        var i = 0\n            var j = 0\n            while(i < maxIndex) {\n\
    \                val char = s(i)\n                if(j == i) {\n             \
    \       if(char == '@') {\n                        j = 0\n                   \
    \ } else {\n                        i -= 1\n                        j += 1\n \
    \                   }\n                } else {\n                    val map =\
    \ Map(char.toLowerCase() -> char)\n                    var k = i\n           \
    \         while(k != j) {\n                        map(map(k.toLowerCase())) match\
    \ {\n                            case Some(v) => char += v\n                 \
    \           case None => char\n                        }\n                   \
    \     k += 1\n                    }\n                }\n                i += 1\n\
    \            }\n        }\n        return s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3cccx15.scala:26:14 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            } != s) {\n\e[31m\e[31m   |\e[0m        \
    \      ^^\e[0m\n\e[31m   |\e[0m              ')' expected, but identifier found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr3cccx15.scala:24:37 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m Some(v) => char += v\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Char - did you mean char.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3cccx15.scala:25:21 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m None => char\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Found:    None.type\n\e[31m   |\e[0m                     Required: Char\n\
    \e[31m   |\e[0m                     pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3cccx15.scala:25:29\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m None => char\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\
    \e[31m   |\e[0m                             Found:    (char : Char)\n\e[31m  \
    \ |\e[0m                             Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr3cccx15.scala:47:39 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                    \e[33mval\e[0m \e[36mmap\e[0m = Map(char.toLowerCase()\
    \ -> char)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr3cccx15.scala:50:34\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m                        map(map(k.toLowerCase()))\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1659979648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if (s.isEmpty) \"\"\n        else{\n            var sb = scala.collection.mutable.StringBuilder.newBuilder\n\
    \            for (i <- 0 until s.length){\n                sb ++= if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z') s.charAt(i).toUpperCase else s.charAt(i).toLowerCase\n\
    \            }\n            sb.toString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpagpzu9qj.scala:21:23 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sb ++= \e[33mif\e[0m(s.charAt(i) >= \e\
    [31m'a'\e[0m && s.charAt(i) <= \e[31m'z'\e[0m) s.charAt(i).toUpperCase \e[33melse\e\
    [0m s.charAt(i).toLowerCase\n\e[31m\e[31m   |\e[0m                       ^^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val numSet = s.toList.toSet\n        val numLen = s.size\n        val\
    \ numList = numSet.filter( _ >= 'a' && _ <= 'z' ).map { (_ - 'a') }\n        val\
    \ reversed = s.filter( _ >= 'a' && _ <= 'z' ).map { (_ - 'a') }\n        val numNumSet\
    \ = numList.filter( _ >= 'a' && _ <= 'z' ).map { (_ - 'a') }\n        val reverseNumNumSet\
    \ = reversed.filter( _ >= 'a' && _ <= 'z' ).map { (_ - 'a') }\n        if(numList.size\
    \ == 0 && numSet == numLen) reversed\n        else if(numNumSet.size == 0 && numNumSet\
    \ == numLen) reverseNumNumSet\n        else if(numSet.size == 0 && numNumSet ==\
    \ numLen) numSet\n        else reverseNumNumSet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1_km1acg.scala:19:37 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumList\e[0m = numSet.filter(\
    \ _ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m ).map { (_ - \e[31m'a'\e[0m) }\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1_km1acg.scala:20:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mreversed\e[0m = s.filter( _ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m ).map\
    \ { (_ - \e[31m'a'\e[0m) }\n\e[31m\e[31m   |\e[0m                            \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp1_km1acg.scala:21:40 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumNumSet\e[0m = numList.filter( _ >= \e\
    [31m'a'\e[0m && _ <= \e[31m'z'\e[0m ).map { (_ - \e[31m'a'\e[0m) }\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1_km1acg.scala:22:48 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mreverseNumNumSet\e[0m =\
    \ reversed.filter( _ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m ).map { (_ - \e\
    [31m'a'\e[0m) }\n\e[31m\e[31m   |\e[0m                                       \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp1_km1acg.scala:23:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mif\e[0m(numList.size == \e[31m0\e[0m && numSet == numLen) reversed\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      Values of types Set[Char] and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_km1acg.scala:23:50\
    \ --------"
  stdout: ''
  timestamp: 1659979649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val map: Map[Character, Char] = Map(a -> 'A', b -> 'B', c -> 'C', d ->\
    \ 'D', e -> 'E', f -> 'F', g -> 'G', h -> 'H', i -> 'I', j -> 'J', k -> 'K', l\
    \ -> 'L', m -> 'M', n -> 'N', o -> 'O', p -> 'P', q -> 'Q', r -> 'R', s -> 'S',\
    \ t -> 'T', u -> 'U', v -> 'V', w -> 'W', x -> 'X', y -> 'Y', z -> 'Z')\n    \
    \    var newString = \"\"\n        for {\n            i <- s.indices\n       \
    \     c <- s.charAt(i)\n            map <- Map(c -> c)\n        } yield {\n  \
    \          if (map.containsKey(c)) {\n                newString += map.get(c)\n\
    \            } else {\n                newString += c\n            }\n       \
    \ }\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1_doth5.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m: \e[35mMap\e[0m[\e\
    [35mCharacter\e[0m, \e[35mChar\e[0m] = Map(a -> \e[31m'A'\e[0m, b -> \e[31m'B'\e\
    [0m, c -> \e[31m'C'\e[0m, d -> \e[31m'D'\e[0m, e -> \e[31m'E'\e[0m, f -> \e[31m'F'\e\
    [0m, g -> \e[31m'G'\e[0m, h -> \e[31m'H'\e[0m, i -> \e[31m'I'\e[0m, j -> \e[31m'J'\e\
    [0m, k -> \e[31m'K'\e[0m, l -> \e[31m'L'\e[0m, m -> \e[31m'M'\e[0m, n -> \e[31m'N'\e\
    [0m, o -> \e[31m'O'\e[0m, p -> \e[31m'P'\e[0m, q -> \e[31m'Q'\e[0m, r -> \e[31m'R'\e\
    [0m, s -> \e[31m'S'\e[0m, t -> \e[31m'T'\e[0m, u -> \e[31m'U'\e[0m, v -> \e[31m'V'\e\
    [0m, w -> \e[31m'W'\e[0m, x -> \e[31m'X'\e[0m, y -> \e[31m'Y'\e[0m, z -> \e[31m'Z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                            Not found: a\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1_doth5.scala:17:54 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m: \e[35mMap\e[0m[\e\
    [35mCharacter\e[0m, \e[35mChar\e[0m] = Map(a -> \e[31m'A'\e[0m, b -> \e[31m'B'\e\
    [0m, c -> \e[31m'C'\e[0m, d -> \e[31m'D'\e[0m, e -> \e[31m'E'\e[0m, f -> \e[31m'F'\e\
    [0m, g -> \e[31m'G'\e[0m, h -> \e[31m'H'\e[0m, i -> \e[31m'I'\e[0m, j -> \e[31m'J'\e\
    [0m, k -> \e[31m'K'\e[0m, l -> \e[31m'L'\e[0m, m -> \e[31m'M'\e[0m, n -> \e[31m'N'\e\
    [0m, o -> \e[31m'O'\e[0m, p -> \e[31m'P'\e[0m, q -> \e[31m'Q'\e[0m, r -> \e[31m'R'\e\
    [0m, s -> \e[31m'S'\e[0m, t -> \e[31m'T'\e[0m, u -> \e[31m'U'\e[0m, v -> \e[31m'V'\e\
    [0m, w -> \e[31m'W'\e[0m, x -> \e[31m'X'\e[0m, y -> \e[31m'Y'\e[0m, z -> \e[31m'Z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \     Not found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1_doth5.scala:17:64\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m: \e[35mMap\e[0m[\e[35mCharacter\e[0m, \e[35mC"
  stdout: ''
  timestamp: 1659979650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toCharArray\n        val res = arr.reverse.map(x => {\n \
    \           if (x>=65 && x<=90){\n                (x+32).toChar\n            }\n\
    \            else{\n                x\n            }\n        }).mkString\n  \
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmybjp1go.scala:29)\n\tat Problem.main(tmpmybjp1go.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toList\n        var result: String = \"\"\n        var\
    \ i = 0\n        while (i < chars.length) {\n            if (chars(i) >= 65 &&\
    \ chars(i) <= 90) {\n                result += (chars(i) + 32).toChar\n      \
    \      } else {\n                result += chars(i)\n            }\n         \
    \   i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped27clh6.scala:31)\n\tat Problem.main(tmped27clh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.length\n        var res: String = \"\"\n        var index =\
    \ 0\n        var result = 0\n        for(i <- 0 until l) {\n            val temp\
    \ = s(i)\n            if(temp.equalsIgnoreCase(\"a\")) temp = s(i + 1)\n     \
    \       else if(temp.equalsIgnoreCase(\"b\")) temp = s(i + 2)\n            else\
    \ if(temp.equalsIgnoreCase(\"c\")) temp = s(i + 3)\n            else temp = s(i)\n\
    \            if(!temp.equalsIgnoreCase(\"_\")){\n                result = Character.toUpperCase(temp.charAt(0))\
    \ + Character.toUpperCase(temp.charAt(1)) + Character.toUpperCase(temp.charAt(2))\
    \ + Character.toUpperCase(temp.charAt(3))\n            }\n            else if(temp.equalsIgnoreCase(\"\
    _\")){\n                result = Character.toUpperCase(temp) + Character.toUpperCase(temp)\
    \ + Character.toUpperCase(temp) + Character.toUpperCase(temp)\n            }\n\
    \            else {\n                result = temp\n            }\n          \
    \  if(!res.equalsIgnoreCase(result)){\n                res = result\n        \
    \        index += l\n            }\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.equalsIgnoreCase(res)){\n\
    \            res = res\n            index += 1\n        }\n        if(!res.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfmyt6owq.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfmyt6owq.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mif\e[0m(temp.equalsIgnoreCase(\e[31m\"a\"\e[0m)) temp\
    \ = s(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value equalsIgnoreCase is not a member of Char\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpfmyt6owq.scala:23:48 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(temp.equalsIgnoreCase(\e[31m\"\
    a\"\e[0m)) temp = s(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                              Reassignment to val temp\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfmyt6owq.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(temp.equalsIgnoreCase(\e\
    [31m\"b\"\e[0m)) temp = s(i + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ equalsIgnoreCase is not a member of Char\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpfmyt6owq.scala:24:53 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(temp.equalsIgnoreCase(\e[31m\"\
    b\"\e[0m)) temp = s(i + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                        Reassignment to val temp\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfmyt6owq.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(temp.equalsIgnoreCase(\e\
    [31m\"c\"\e[0m)) temp = s(i + \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659979653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new collection.mutable.HashMap[Character, String]()\n  \
    \      for(i <- 0 until s.length)\n            if(!result.contains(s.charAt(i)))\n\
    \                result += (s.charAt(i) -> s.substring(0,i) + s.substring(i+1,s.length))\n\
    \        result.mapValues { v => v.reverse.mkString(\"\") }.toSeq.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5i0g60pp.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result += (s.charAt(i) -> s.substring(\e\
    [31m0\e[0m,i) + s.substring(i+\e[31m1\e[0m,s.length))\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (Char, String), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result : String = s.toUpperCase\n        for (i <- 0 to s.length\
    \ - 1 by -1) {\n            if (result(i) == s(i)) {\n                if (s(i)\
    \ ==  \"A\" || s(i) ==  \"a\") {\n                    result =result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.substring(0, i)\n     \
    \           } else if (s(i) ==  \"B\" || s(i) ==  \"b\") {\n                 \
    \   result =result.substring(0, i) + result.substring(i + 1, result.length) +\
    \ result.substring(0, i)\n                } else if (s(i) ==  \"C\" || s(i) ==\
    \  \"c\") {\n                    result =result.substring(0, i) + result.substring(i\
    \ + 1, result.length) + result.substring(0, i)\n                } else if (s(i)\
    \ ==  \"D\" || s(i) ==  \"d\") {\n                    result =result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.substring(0, i)\n     \
    \           } else if (s(i) ==  \"E\" || s(i) ==  \"e\") {\n                 \
    \   result =result.substring(0, i) + result.substring(i + 1, result.length) +\
    \ result.substring(0, i)\n                } else if (s(i) ==  \"F\" || s(i) ==\
    \  \"f\") {\n                    result =result.substring(0, i) + result.substring(i\
    \ + 1, result.length) + result.substring(0, i)\n                } else if (s(i)\
    \ ==  \"G\" || s(i) ==  \"g\") {\n                    result =result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.substring(0, i)\n     \
    \           } else if (s(i) ==  \"H\" || s(i) ==  \"h\") {\n                 \
    \   result =result.substring(0, i) + result.substring(i + 1, result.length) +\
    \ result.substring(0, i)\n                } else if (s(i) ==  \"I\" || s(i) ==\
    \  \"i\") {\n                    result =result.substring(0, i) + result.substring(i\
    \ + 1, result.length) + result.substring(0, i)\n                } else if (s(i)\
    \ ==  \"J\" || s(i) ==  \"j\") {\n                    result =result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.substring(0, i)\n     \
    \           } else if (s(i) ==  \"K\" || s(i) ==  \"k\") {\n                 \
    \   result =result.substring(0, i) + result.substring(i + 1, result.length) +\
    \ result.substring(0, i)\n                } else if (s(i) ==  \"L\" || s(i) ==\
    \  \"l\") {\n                    result =result.substring(0, i) + result.substring(i\
    \ + 1, result.length) + result.substring(0, i)\n                } else if (s(i)\
    \ ==  \"M\" || s(i) ==  \"m\") {\n                    result =result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.substring(0, i)\n     \
    \           } else if (s(i) ==  \"N\" || s(i) ==  \"n\") {\n                 \
    \   result =result.substring(0, i) + result.substring(i + 1, result.length) +\
    \ result.substring(0, i)\n                } else if (s(i) ==  \"O\" || s(i) ==\
    \  \"o\") {\n                    result =result.substring(0, i) + result.substring(i\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsppqhifv.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsppqhifv.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpsppqhifv.scala:20:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \         \e[33mif\e[0m (s(i) ==  \e[31m\"A\"\e[0m || s(i) ==  \e[31m\"a\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpsppqhifv.scala:20:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (s(i) ==  \e[31m\"A\"\e\
    [0m || s(i) ==  \e[31m\"a\"\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpsppqhifv.scala:22:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \         } \e[33melse\e[0m \e[33mif\e[0m (s(i) ==  \e[31m\"B\"\e[0m || s(i) ==\
    \  \e[31m\"b\"\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpsppqhifv.scala:22:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (s(i)\
    \ ==  \e[31m\"B\"\e[0m || s(i) ==  \e[31m\"b\"\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpsppqhifv.scala:24:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (s(i)\
    \ ==  \e[31m\"C\"\e[0m || s(i) ==  \e[31m\"c\"\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var r = \"\"\n        for (char1 <- s) {\n            if (char1.isLetter)\
    \ {\n                if (char1.toLower > char1.toUpper) {\n                  \
    \  r ++= char1.toUpper\n                } else {\n                    r ++= char1.toLower\n\
    \                }\n            } else {\n                r ++= char1\n      \
    \      }\n        }\n        if (s.length == 0) {\n            r = r.toUpperCase\n\
    \        } else {\n            r = r.toLowerCase\n        }\n        r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8wnzqej.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    r ++= char1.toUpper\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ ++= is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8wnzqej.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    r ++=\
    \ char1.toLower\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    value ++= is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_8wnzqej.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                r ++= char1\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                value ++= is not a member\
    \ of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toList\n        val reversedChars = chars.reverse\n   \
    \     val newChars = chars.map {\n            case c if c.isLetter => (c.toUpperCase\
    \ + c.toLowerCase + c.toUpperCase).filter(_ != c)\n            case c => (c +\
    \ c).filter(_ != c)\n        }\n        val empty = newChars.isEmpty\n       \
    \ val newString = newChars.mkString\n        if (empty) {\n            return\
    \ newString\n        }\n        return solve(newString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbxk675nt.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter\
    \ => (c.toUpperCase + c.toLowerCase + c.toUpperCase).filter(_ != c)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbxk675nt.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m c => (c + c).filter(_ !=\
    \ c)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val letters = s.toList\n        var result : String = s\n        letters.foreach{\
    \ letter =>\n            if (letter.toUpperCase != letter)\n                result\
    \ = result.replace(letter, letter.toUpperCase)\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp07rs40_8.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (letter.toUpperCase != letter)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp07rs40_8.scala:21:55 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                result = result.replace(letter, letter.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        s.toList match {\n            case Nil => \"no letters\"\n          \
    \  case h::t => {\n                val list = h.toList\n                val revList\
    \ = list.map(l => {\n                    val first = l.head\n                \
    \    val rest = l.tail\n                    if (first.isLetter) {\n          \
    \              if (first.isLower) first.toUpperCase()\n                      \
    \  else first.toLowerCase()\n                    } else {\n                  \
    \      if (first.isUpper) first.toLowerCase()\n                        else first.toUpperCase()\n\
    \                    }\n                    rest match {\n                   \
    \     case Nil => Nil\n                        case x => x\n                 \
    \   }\n                })\n                val revString = (revList match {\n\
    \                    case Nil => s\n                    case x => x.reverse.mkString(\"\
    \")\n                }).mkString(\"\")\n                revString\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfx1ak8mh.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mlist\e[0m = h.toList\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value toList is not a member of Char - did you mean h.toInt?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        for (charSeq <- s.toList)\n            for\
    \ (letter <- charSeq)\n                if ('a' <= letter && letter <= 'z') result\
    \ += letter.toUpperCase\n                else if (('a' <= letter && letter <=\
    \ 'z') || ('A' <= letter && letter <= 'Z')) result += letter\n               \
    \ else result += letter\n        return result.dropWhile(_.isLower).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpse6k3e8k.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (letter <- charSeq)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   value foreach is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for (i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if ( c >= 'a' && c <=\
    \ 'z')\n            {\n                result.append((s.charAt(i) - 'a').toChar)\n\
    \            }\n            else if ( c >= 'A' && c <= 'Z')\n            {\n \
    \               result.append((s.charAt(i) - 'A').toChar)\n            }\n   \
    \         else\n            {\n                result.append(c)\n            }\n\
    \        }\n        if (result.length == 0)\n        {\n            result.reverse\n\
    \        }\n        else\n        {\n            result\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhqceaqr.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val map = HashMap[Char,String]()\n        for (i <- 0 to s.length - 1)\
    \ {\n            map(i.toChar, s.substring(i, i+1))\n        }\n        map.values.map(_.toLowerCase).reduceLeft((x,\
    \ y) => x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaor_juc4.scala:19:16\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            map(i.toChar, s.substring(i,\
    \ i+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    (Char, String)\n\e[31m   |\e[0m\
    \                Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.length == 0) return s\n        val newS = s.toLowerCase\n      \
    \  val newS = newS.replace(s.toUpperCase, \"\")\n        val newS = newS.replace(\"\
    \", \"@\")\n        val newS = newS.replace(\"@\", \"\")\n        val newS = newS.replaceAll(\"\
    [#@]\", \"\")\n        return newS\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipiy9uay.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewS\e[0m = newS.replace(s.toUpperCase,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewS is already defined as \e[33mvalue\e[0m \e[35mnewS\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpipiy9uay.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewS\e[0m = newS.replace(\e[31m\"\"\e[0m,\
    \ \e[31m\"@\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewS is already defined as \e[33mvalue\e[0m \e[35mnewS\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpipiy9uay.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewS\e[0m = newS.replace(\e[31m\"@\"\e[0m,\
    \ \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewS is already defined as \e[33mvalue\e[0m \e[35mnewS\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpipiy9uay.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewS\e[0m = newS.replaceAll(\e[31m\"[#@]\"\
    \e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewS is already defined as \e[33mvalue\e[0m \e[35mnewS\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def isLetter(c : Char) = Character.isLetter(c)\n        def swapLetter(c\
    \ : Char, i : Int, j : Int) = if(isLetter(c)) {\n            val s = c.toUpperCase()\n\
    \            val l = s.substring(0, i)\n            val u = s.substring(j, j)\n\
    \            s -> l + u.substring(i, i) + u + l\n        } else c\n        def\
    \ swapCase(c : Char) = c.toUpperCase\n        val l = s.toList\n        val m\
    \ = l.map(c => swapCase(c))\n        val n = m.map(c => swapLetter(c, l.indexOf(c),\
    \ l.lastIndexOf(c) + 1))\n        val result = n.reduce(_ + _)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8dlyxs4.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = c.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph8dlyxs4.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mdef\e[0m \e[36mswapCase\e[0m(\e[36mc\e\
    [0m : \e[35mChar\e[0m) = c.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmph8dlyxs4.scala:28:32 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = n.reduce(_ + _)\n\e[31m\e[31m\
    \   |\e[0m                              ^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph8dlyxs4.scala:29:8 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Any)\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var chars = s.toCharArray\n        var result = new StringBuilder\n \
    \       val stack = new mutable.Stack[String]()\n        var i = 0\n        while\
    \ ( i < chars.length) {\n            if (chars(i) == '#') {\n                val\
    \ n = stack.pop()\n                val v = chars(i)\n                val k = chars(i\
    \ + 1)\n                stack += s\"$v$k\"\n                i += 1\n         \
    \   } else if (chars(i) != '@' && chars(i) != '.') {\n                result +=\
    \ chars(i)\n                i += 1\n            }\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_oewbgo.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = \e[33mnew\e\
    [0m mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        for(i <- s.indices) {\n            val c =\
    \ s(i)\n            if(('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')) {\n \
    \               result += c.toUpperCase\n            } else {\n              \
    \  result += c.toLowerCase\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            result = s.reverse\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnnq7237v.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += c.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnnq7237v.scala:21:28 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                result += c.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnnq7237v.scala:23:23 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m                result += c.toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnnq7237v.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                result += c.toLowerCase\n\e[31m\e[31m   |\e[0m       \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    value toLowerCase is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val s = mutable.ListBuffer[String]()\n        for (x <- s)\n        \
    \    if (x.isLetter) s += x.toUpperCase\n            else s += x.toLowerCase\n\
    \        if (s.isEmpty) s\n        else s.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_6asam_.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val sb = mutable.Stack[String]()\n      sb.push(s)\n      while (sb.nonEmpty)\
    \ {\n        val sCopy = sb.copy\n        var s = sb.mkString(\"\")\n        if\
    \ (s.isEmpty) break\n        val strList = s.chars().filter(x => x.isLetter).toList\n\
    \        strList.foreach(x => if (x.isLetter) {\n          val len = s.length\n\
    \          s = s.substring(0,len - x) + s.substring(len - x)\n        }) \n  \
    \      sCopy = sCopy.mkString(\"\")\n        sCopy = sCopy.substring(0,s.length\
    \ - strList.size) + sCopy.substring(s.length - strList.size)\n        sb.push(sCopy)\n\
    \      }\n      sb.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmanfbs7z.scala:17:15 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36msb\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmanfbs7z.scala:22:23 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (s.isEmpty) break\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmanfbs7z.scala:28:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        sCopy = sCopy.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Reassignment to val sCopy\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpmanfbs7z.scala:29:14 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        sCopy = sCopy.substring(\e[31m0\e[0m,s.length\
    \ - strList.size) + sCopy.substring(s.length - strList.size)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val sCopy\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val len  = s.length\n        val strs = s.toList\n        var i = 0\n\
    \        while (i < len) {\n            if (strs(i)  < 'a') {\n              \
    \  strs(i) = strs(i).asInstanceOf[Char].toUpper\n            } else {\n      \
    \          strs(i) = strs(i).asInstanceOf[Char].toLower\n            }\n     \
    \       i += 1\n        }\n        strs.reverse.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw323jxeh.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                strs(i) = strs(i).asInstanceOf[\e[35mChar\e\
    [0m].toUpper\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m\
    \ value update is not a member of List[Char] - did you mean strs.updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpw323jxeh.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                strs(i) = strs(i).asInstanceOf[\e[35mChar\e\
    [0m].toLower\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m\
    \ value update is not a member of List[Char] - did you mean strs.updated?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw323jxeh.scala:28:21 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        strs.reverse.toList\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[Char]\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var s = StringBuilder(s).reverse\n        for (i<- 0 to s.length-1){\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                var\
    \ newChar = s.charAt(i).toUpper\n                s.replace(i, 1, newChar)\n  \
    \              s.replace(i, 1, newChar)\n            }\n            else {\n \
    \               var newChar = s.charAt(i).toLower\n                s.replace(i,\
    \ 1, newChar)\n                s.replace(i, 1, newChar)\n            }\n     \
    \   }\n        return s.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps0uffl6t.scala:17:30 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = StringBuilder(s).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Recursive \e[33mvariable\e[0m \e[35ms\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val arr = s.toList\n        val m = arr.length\n        var res : String\
    \ = arr(0)\n        for (i <- 0 until m) {\n            if (arr(i).isLetter)\n\
    \                res +=  arr(i).swapCase\n            else\n                res\
    \ += arr(i)\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpodu3h7ib.scala:19:30\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mres\e\
    [0m : \e[35mString\e[0m = arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    Char\n\e[31m   |\e[0m                           Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpodu3h7ib.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                res +=  arr(i).swapCase\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpodu3h7ib.scala:22:31 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                res +=  arr(i).swapCase\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \         value swapCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val ls : List[Char] = s.toList\n        val rev = ls.reverse\n      \
    \  rev.filter(x=>x != ' ').reduce(_ ++ _).filter(x=>x != ' ')\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklfnh37o.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        rev.filter(\e[36mx\e[0m=>x != \e[31m' '\e[0m).reduce(_\
    \ ++ _).filter(\e[36mx\e[0m=>x != \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                       value ++ is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      var res = \"\"\n      for(i <- s.length.toInt){\n        if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n          s = s.replaceAt(i, s.charAt(i).toString.toUpperCase)\n\
    \        }\n        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n     \
    \     s = s.replaceAt(i, s.charAt(i).toString.toLowerCase)\n        }\n      \
    \  else s += s.charAt(i)\n      }\n      if(s.length < 1){\n        res = s\n\
    \      }\n      else s = s.reverse\n      res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv9e6w2st.scala:18:15 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mfor\e[0m(i <- s.length.toInt){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  value foreach is not a member of Int\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv9e6w2st.scala:30:13\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m      \e[33melse\e[0m\
    \ s = s.reverse\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Reassignment to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val a = mutable.ArrayBuffer.empty[String]\n        val list = s.toList\n\
    \        for(i <- 0 until list.length){ \n            if(isLetter(list(i)))\n\
    \            a.append(toUpperCase(list(i)) + toUpperCase(list.drop(i).head))\n\
    \            else \n            a.append(list(i))\n        }\n        a.toList.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvypnfh3.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphvypnfh3.scala:20:15 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(isLetter(list(i)))\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def swap (c1 , c2) = if(c1 >= 'a' && c1 <= 'z') (c1 - 'a' + 26).toChar\
    \ + (c2 - 'a' + 26).toChar else c1 + c2.toChar\n        val map = mutable.Map[Char,Char]()\n\
    \        s.toList\n            .filter(_.isLetter)\n            .foreach(c =>\
    \ map += c -> (map.getOrElse(c, c.toLower) + 'a'.toLower))\n            .toList\n\
    \            .map(c => (map get c).orElse(c))\n            .foldLeft[String](\"\
    \")(swap)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjll1ijj.scala:17:21 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m (\e[36mc1\e[0m\
    \ , \e[36mc2\e[0m) = \e[33mif\e[0m(c1 >= \e[31m'a'\e[0m && c1 <= \e[31m'z'\e[0m)\
    \ (c1 - \e[31m'a'\e[0m + \e[31m26\e[0m).toChar + (c2 - \e[31m'a'\e[0m + \e[31m26\e\
    [0m).toChar \e[33melse\e[0m c1 + c2.toChar\n\e[31m\e[31m   |\e[0m            \
    \         ^\e[0m\n\e[31m   |\e[0m                     ':' expected, but ',' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjll1ijj.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m (\e[36mc1\e[0m\
    \ , \e[36mc2\e[0m) = \e[33mif\e[0m(c1 >= \e[31m'a'\e[0m && c1 <= \e[31m'z'\e[0m)\
    \ (c1 - \e[31m'a'\e[0m + \e[31m26\e[0m).toChar + (c2 - \e[31m'a'\e[0m + \e[31m26\e\
    [0m).toChar \e[33melse\e[0m c1 + c2.toChar\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         ':' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjjll1ijj.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = mutable.Map[\e[35mChar\e[0m,\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjjll1ijj.scala:22:13\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        s.toList\n\e[31m20\
    \ |\e[0m            .filter(_.isLetter)\n\e[31m21 |\e[0m            .foreach(\e\
    [36mc\e[0m => map += c -> (map.getOrElse(c, c.toLower) + \e[31m'a'\e[0m.toLower))\n\
    \e[31m22 |\e[0m            .toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        value toList is not a member of Unit\n4 errors found\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def reverse(s: String) : String = {\n            val len = s.length\n\
    \            var res = \"\"\n            for (i <- 0 until len) {\n          \
    \      val lower = s(i).toLowerCase\n                val upper = lower(i).toUpperCase\n\
    \                if (lower == upper)\n                    res += upper\n     \
    \           else\n                    res += lower\n            }\n          \
    \  res\n        }\n        \n        def isLetter(s: Char) : Boolean = {\n   \
    \         s match {\n                case \"a\" => \"a\" == \"a\"\n          \
    \      case \"b\" => \"b\" == \"b\"\n                case \"c\" => \"c\" == \"\
    c\"\n                case \"d\" => \"d\" == \"d\"\n                case \"e\"\
    \ => \"e\" == \"e\"\n                case \"f\" => \"f\" == \"f\"\n          \
    \      case \"g\" => \"g\" == \"g\"\n                case \"h\" => \"h\" == \"\
    h\"\n                case \"i\" => \"i\" == \"i\"\n                case \"j\"\
    \ => \"j\" == \"j\"\n                case \"k\" => \"k\" == \"k\"\n          \
    \      case \"l\" => \"l\" == \"l\"\n                case \"m\" => \"m\" == \"\
    m\"\n                case \"n\" => \"n\" == \"n\"\n                case \"o\"\
    \ => \"o\" == \"o\"\n                case \"p\" => \"p\" == \"p\"\n          \
    \      case \"q\" => \"q\" == \"q\"\n                case \"r\" => \"r\" == \"\
    r\"\n                case \"s\" => \"s\" == \"s\"\n                case \"t\"\
    \ => \"t\" == \"t\"\n                case \"u\" => \"u\" == \"u\"\n          \
    \      case \"v\" => \"v\" == \"v\"\n                case \"w\" => \"w\" == \"\
    w\"\n                case \"x\" => \"x\" == \"x\"\n                case \"y\"\
    \ => \"y\" == \"y\"\n                case \"z\" => \"z\" == \"z\"\n          \
    \  }\n        }\n        \n        def getUpperLetter(s: String) : String = {\n\
    \            val len = s.length\n            var res = \"\"\n            for (i\
    \ <- 0 until len) {\n                val lower = s(i).toLowerCase\n          \
    \      if (!isLetter(lower)) {\n                    res += lower(i).toUpperCase\n\
    \                } else {\n                    res += lower(i)\n             \
    \   }\n            }\n            res\n        }\n        \n        def getLowerLetter(s:\
    \ String) : String = {\n            val len = s.length\n            var res =\
    \ \"\"\n            for (i <- 0 until len) {\n                val lower = s(i).toLowerCase\n\
    \                if (!isLetter(lower)) {\n                    res += lower(i)\n\
    \                } else {\n                    res += lower(i).toUpperCase\n \
    \               }\n            }\n            res\n        }\n        \n     \
    \   var res = \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp70fb0kvp.scala:90:17 ---------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp70fb0kvp.scala:21:33 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mval\e[0m \e[36mlower\e[0m = s(i).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmp70fb0kvp.scala:33:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mcase\e[0m \e[31m\"a\"\e[0m => \e\
    [31m\"a\"\e[0m == \e[31m\"a\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp70fb0kvp.scala:34:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mcase\e[0m \e[31m\"b\"\e[0m => \e\
    [31m\"b\"\e[0m == \e[31m\"b\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp70fb0kvp.scala:35:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mcase\e[0m \e[31m\"c\"\e[0m => \e\
    [31m\"c\"\e[0m == \e[31m\"c\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp70fb0kvp.scala:36:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mcase\e[0m \e[31m\"d\"\e[0m => \e\
    [31m\"d\"\e[0m == \e[31m\"d\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp70fb0kvp.scala:37:21 -----------------------------------------\e\
    ["
  stdout: ''
  timestamp: 1659979680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val letters: List[Char] = s.toList\n        val result: String = letters.foldLeft(\"\
    \"){case (res, c) =>\n            c match {\n                case \"a\" => \"\
    A\"\n                case \"b\" => \"B\"\n                case \"c\" => \"C\"\n\
    \                case \"d\" => \"D\"\n                case \"e\" => \"E\"\n  \
    \              case \"f\" => \"F\"\n                case \"g\" => \"G\"\n    \
    \            case \"h\" => \"H\"\n                case \"i\" => \"I\"\n      \
    \          case \"j\" => \"J\"\n                case \"k\" => \"K\"\n        \
    \        case \"l\" => \"L\"\n                case \"m\" => \"M\"\n          \
    \      case \"n\" => \"N\"\n                case \"o\" => \"O\"\n            \
    \    case \"p\" => \"P\"\n                case \"q\" => \"Q\"\n              \
    \  case \"r\" => \"R\"\n                case \"s\" => \"S\"\n                case\
    \ \"t\" => \"T\"\n                case \"u\" => \"U\"\n                case \"\
    v\" => \"V\"\n                case \"w\" => \"W\"\n                case \"x\"\
    \ => \"X\"\n                case \"y\" => \"Y\"\n                case \"z\" =>\
    \ \"Z\"\n                case _ =>\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m\"a\"\e[0m => \e\
    [31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m\"b\"\e[0m => \e\
    [31m\"B\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m\"c\"\e[0m => \e\
    [31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m\"d\"\e[0m => \e\
    [31m\"D\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m\"e\"\e[0m => \e\
    [31m\"E\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m\"f\"\e[0m => \e\
    [31m\"F\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp2s20h0ze.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m\"g\"\e[0m => \e\
    [31m\"G\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var res = \"\";\n        for (i <- 0 until s.length) {\n            if\
    \ (s.charAt(i) > 'Z')\n                s = s.reverse\n            else if (s.charAt(i)\
    \ > 'z')\n                s = s.toUpperCase\n            else\n              \
    \  s = s.toLowerCase\n            res += s\n        }\n        res\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdya3e_2m.scala:20:18 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                s = s.reverse\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdya3e_2m.scala:22:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                s =\
    \ s.toUpperCase\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val s\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpdya3e_2m.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = s.toLowerCase\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val str = s.toList\n      val newStr = str.foldLeft(\"\")(\n        (r:\
    \ String, acc: List[Char], i: Int) => {\n          if (i >= str.length) r else\
    \ acc + str.charAt(i) + r\n        }\n      )\n      newStr.length <= s.length\
    \ match {\n        case false => newStr\n        case true => s.reverse\n    \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1kgaeiy8.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mif\e[0m (i >= str.length) r \e[33melse\e\
    [0m acc + str.charAt(i) + r\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Char],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1kgaeiy8.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mif\e[0m (i >= str.length) r \e[33melse\e\
    [0m acc + str.charAt(i) + r\n\e[31m\e[31m   |\e[0m                           \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   value charAt is not a member of List[Char]\n2 errors found\n"
  stdout: ''
  timestamp: 1659979678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \       var stringRev = s.reverse \n       var charSet = string.split(\"\") \n\
    \       val rev = stringRev filter { x => charSet.contains(x.toChar) }\n     \
    \  charSet = charSet filter { x => !charSet.contains(x.toChar) }\n       stringRev\
    \ = stringRev filter { x => !charSet.contains(x.toChar) }\n       rev mkString\
    \ \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7vx1kjz5.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m       \e[33mvar\e[0m \e[36mcharSet\e[0m = string.split(\e\
    [31m\"\"\e[0m) \n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val a = s.toList\n        var i = a.length-1\n        var s1 =  a.map(_\
    \ + \"\").filter(_ == \"a\") map (_.toUpperCase)\n        var s2 = a.map(_ + \"\
    \").filter(_ == \"A\") map (_.toUpperCase)\n        var s3 = a.map(_ + \"\").filter(_\
    \ == \"c\") map (_.toUpperCase)\n        while (s1 contains \"a\" ||  s2 contains\
    \ \"A\" || s3 contains \"c\") {\n            if (s1 contains \"a\") {\n      \
    \          s2 += \"A\"\n                s1 -+= \"A\"\n            } else if (s2\
    \ contains \"A\") {\n                s1 += \"a\"\n                s2 -+= \"a\"\
    \n            } else if (s3 contains \"c\") {\n                s1 += \"c\"\n \
    \               s3 -+= \"c\"\n            }\n        }\n        s1 ++= a\n   \
    \     s2 ++= a\n        s3 ++= a\n        s1 ++= s2.toList\n        s2 ++= s1.toList\n\
    \        s3 ++= s1.toList\n        a.clear()\n        a.extend(s1.toList)\n  \
    \      a.extend(s2.toList)\n        a.extend(s3.toList)\n        a.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_awu19m3.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mwhile\e[0m (s1 contains \e[31m\"a\"\e[0m\
    \ ||  s2 contains \e[31m\"A\"\e[0m || s3 contains \e[31m\"c\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  value || is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_awu19m3.scala:22:51 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mwhile\e[0m (s1 contains \e[31m\"a\"\e[0m ||  s2 contains\
    \ \e[31m\"A\"\e[0m || s3 contains \e[31m\"c\"\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                                              ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                    value || is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_awu19m3.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s2 += \e[31m\"A\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_awu19m3.scala:25:19 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                s1 -+= \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0mvalue -+= is not a member of List[String]\
    \ - did you mean List[String].++:?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_awu19m3.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                s1 += \e\
    [31m\"a\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_awu19m3.scala:28:19 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                s2 -+= \e[31m\"a\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue -+= is not a member\
    \ of List[String] - did you mean List[String].++:?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_awu19m3.scala:30:19 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m                s1 += \e[31m\"c\"\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659979684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str: List[Char] = s.toList\n        str.zipWithIndex.map{case (c,\
    \ i) => \n            val isLetter = c.toLowerCase == c\n            c.toUpperCase()\
    \ if isLetter else c.toLowerCase()\n        }.foldLeft(\"\"){case (str, char)\
    \ => str + char}\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw67oo7s6.scala:20:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            c.toUpperCase() \e[33mif\e[0m isLetter \e\
    [33melse\e[0m c.toLowerCase()\n\e[31m\e[31m   |\e[0m                         \
    \   ^^\e[0m\n\e[31m   |\e[0m                            end of statement expected\
    \ but 'if' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw67oo7s6.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36misLetter\e[0m = c.toLowerCase == c\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \ value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpw67oo7s6.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            c.toUpperCase() \e[33mif\e[0m isLetter \e[33melse\e[0m c.toLowerCase()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val input = s + \"$\"\n        val result = new StringBuilder()\n   \
    \     var index = 0\n        var ch = \"\"\n        while(index < input.length)\
    \ {\n            ch = input((index + 1))\n            if(ch.isLetter) {\n    \
    \            ch = ch.toUpperCase\n            }\n            else {\n        \
    \        ch = ch.toLowerCase\n            }\n            result.append(ch)\n \
    \           index += 1\n        }\n        result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1n_jvwa0.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            ch = input((index\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Char\n\e[31m   |\e[0m         \
    \        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1n_jvwa0.scala:23:18 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mif\e[0m(ch.isLetter) {\n\e[31m\e[31m   |\e[0m           \
    \    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val sb = new StringBuilder\n      for (x <- s) {\n        if (x.isLetter)\
    \ {\n          if (x.toUpperCase == x) sb.append(x.toUpperCase)\n          else\
    \ sb.append(x.toLowerCase)\n        }\n        else sb.append(x)\n      }\n  \
    \    if (sb.toString() == \"\") sb.toString()\n      else sb.reverse.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16l3lo20.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mif\e[0m (x.toUpperCase == x) sb.append(x.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \       value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp16l3lo20.scala:20:46 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m          \e[33mif\e[0m (x.toUpperCase == x) sb.append(x.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16l3lo20.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m          \e[33melse\e[0m\
    \ sb.append(x.toLowerCase)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val stringBuilder = new StringBuilder(s.length)\n        var charArray\
    \ = Array.ofDim[Char](s.length)\n        for (i<-0 until s.length){\n        \
    \    charArray(i) = s.charAt(i)\n        }\n        if (charArray.exists(!Char.isLetter(charArray(i)))){\n\
    \            for (i <-0 until s.length){\n                stringBuilder.append(charArray(i))\n\
    \            }\n            return stringBuilder.reverse\n        }else{\n   \
    \         for (i <-0 until s.length){\n                charArray(i) = charArray(i).swapCase()\n\
    \                stringBuilder.append(charArray(i))\n            }\n         \
    \   return stringBuilder.reverse\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3phvv6.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (charArray.exists(!Char.isLetter(charArray(i)))){\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value isLetter is not a member of object\
    \ Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphb3phvv6.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (charArray.exists(!Char.isLetter(charArray(i)))){\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3phvv6.scala:26:33\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mreturn\e[0m\
    \ stringBuilder.reverse\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    StringBuilder\n\e[31m   |\e[0m\
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphb3phvv6.scala:29:44 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                charArray(i) = charArray(i).swapCase()\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value swapCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3phvv6.scala:32:33\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mreturn\e[0m\
    \ stringBuilder.reverse\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    StringBuilder\n\e[31m   |\e[0m\
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        var last = 0\n        for (i <- 0 until s.length){\n\
    \            val c = s(i)\n            if (c >= 'a' && c <= 'z'){\n          \
    \      if (last+1 > i) result += s.substring(last+1, i)\n                last\
    \ += 1\n                result += c.toUpperCase\n            } else if (c >= 'A'\
    \ && c <= 'Z'){\n                if (last+1 > i) result += s.substring(last+1,\
    \ i)\n                last += 1\n                result += c.toLowerCase\n   \
    \         } else {\n                if (last+1 > i) result += s.substring(last+1,\
    \ i)\n                last += 1\n                result += c\n            }\n\
    \        }\n        if (last > 0) result += s.substring(last+1)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsw3oc4v4.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                result += c.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsw3oc4v4.scala:24:28 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m                result += c.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsw3oc4v4.scala:28:23 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m                result += c.toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpsw3oc4v4.scala:28:28 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                result += c.toLowerCase\n\e[31m\e[31m   |\e[0m       \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    value toLowerCase is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.toLower\n        val uc = s.toUpper\n        s.find(x => x\
    \ => x.isLetter) match {\n            case Some(idx) => \n                val\
    \ rev = s.reverse\n                val rev2 = rev.reverse\n                val\
    \ rev3 = rev2.reverse\n                val rev4 = rev3.reverse\n             \
    \   val rev5 = rev4.reverse\n                val rev6 = rev5.reverse\n       \
    \         val rev7 = rev6.reverse\n                val rev8 = rev7.reverse\n \
    \               val rev9 = rev8.reverse\n                val rev10 = rev9.reverse\n\
    \                val rev11 = rev10.reverse\n                val rev12 = rev11.reverse\n\
    \                val rev13 = rev12.reverse\n                val rev14 = rev13.reverse\n\
    \                val rev15 = rev14.reverse\n                val rev16 = rev15.reverse\n\
    \                val rev17 = rev16.reverse\n                val rev18 = rev17.reverse\n\
    \                val rev19 = rev18.reverse\n                val rev20 = rev19.reverse\n\
    \                val rev21 = rev20.reverse\n                val rev22 = rev21.reverse\n\
    \                val rev23 = rev22.reverse\n                val rev24 = rev23.reverse\n\
    \                val rev25 = rev24.reverse\n                val rev26 = rev25.reverse\n\
    \                val rev27 = rev26.reverse\n                val rev28 = rev27.reverse\n\
    \                val rev29 = rev28.reverse\n                val rev30 = rev29.reverse\n\
    \                val rev31 = rev30.reverse\n                val rev32 = rev31.reverse\n\
    \                val rev33 = rev32.reverse\n                val rev34 = rev33.reverse\n\
    \                val rev35 = rev34.reverse\n                val rev36 = rev35.reverse\n\
    \                val rev37 = rev36.reverse\n                val rev38 = rev37.reverse\n\
    \                val rev39 = rev38.reverse\n                val rev40 = rev39.reverse\n\
    \                val rev41 = rev40.reverse\n                val rev42 = rev41.reverse\n\
    \                val rev43 = rev42.reverse\n                val rev44 = rev43.reverse\n\
    \                val rev45 = rev44.reverse\n                val rev46 = rev45.reverse\n\
    \                val rev47 = rev46.reverse\n                val rev48 = rev47.reverse\n\
    \                val rev49 = rev48.reverse\n                val rev50 = rev49.reverse\n\
    \                val rev51 = rev50.reverse\n                val rev52 = rev51.reverse\n\
    \                val rev53 = rev52.reverse\n                val rev54 = rev53.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1kwem0fu.scala:88:0 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1kwem0fu.scala:17:18\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36ml\e[0m = s.toLower\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                value toLower is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1kwem0fu.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36muc\e[0m = s.toUpper\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       value toUpper is not a member of String\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp1kwem0fu.scala:19:20 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        s.find(\e[36mx\e[0m => \e[36mx\e[0m => x.isLetter) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m      \
    \              Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \              I could not infer the type of the parameter x.\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1kwem0fu.scala:87:1 ---------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp1kwem0fu.scala:76:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m76 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659979684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val numArray = s.toCharArray.map(_.toInt)\n        val numArray2 = s.toCharArray.map(_.toInt\
    \ - 65).filter(x => x > 0 && x < 26)\n        val numArray3 = s.toCharArray.map(_.toInt\
    \ - 97).filter(x => x > 0 && x < 26)\n        val numArray4 = s.toCharArray.map(_.toInt\
    \ - 65).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26)\n        val\
    \ numArray5 = s.toCharArray.map(_.toInt - 97).filter(x => x > 0 && x < 26).filter(x\
    \ => x > 0 && x < 26).filter(x => x > 0 && x < 26)\n        val numArray6 = s.toCharArray.map(_.toInt\
    \ - 65).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x =>\
    \ x > 0 && x < 26).filter(x => x > 0 && x < 26)\n        val numArray7 = s.toCharArray.map(_.toInt\
    \ - 97).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x =>\
    \ x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26)\n\
    \        val numArray8 = s.toCharArray.map(_.toInt - 65).filter(x => x > 0 &&\
    \ x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x =>\
    \ x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26)\n\
    \        val numArray9 = s.toCharArray.map(_.toInt - 97).filter(x => x > 0 &&\
    \ x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x =>\
    \ x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x\
    \ => x > 0 && x < 26)\n        val numArray10 = s.toCharArray.map(_.toInt - 65).filter(x\
    \ => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x\
    \ => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x\
    \ => x > 0 && x < 26).filter(x => x > 0 && x < 26)\n        val numArray11 = s.toCharArray.map(_.toInt\
    \ - 97).filter(x => x > 0 && x < 26).filter(x => x > 0 && x < 26).filter(x =>\
    \ x > 0 && x < 26).filter(x => x > 0 && x < 26).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhuozj88.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxhuozj88.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val l = s.toList\n        val reversed = mutable.Buffer.empty[String]\n\
    \        for (i <- 0 until l.size) {\n            if (l.contains(i.toString))\n\
    \                reversed.+=(i.toString.toUpperCase)\n            else reversed.+=(i.toString)\n\
    \        }\n        reversed.toString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0d8nj1i0.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var reverseString = \"\"\n        var index = 0\n        while (index\
    \ < s.length){\n            if(s(index).isLetter){\n                val toUpper\
    \ = s(index).toUpper\n                val toLower = s(index).toLower\n       \
    \         reverseString += (toUpper + toLower)\n                index++\n    \
    \        }else{\n                reverseString += s(index)\n                index++\n\
    \            }\n        }\n        return reverseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6kvwwqsb.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp6kvwwqsb.scala:27:23 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                index++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \      val arr = mutable.ArrayBuffer.empty[String]\n      var flag = false\n \
    \     var i = 0\n      while (i < s.length) {\n        val c = s.charAt(i)\n \
    \       if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n          arr.push(s.reverse)\n\
    \          flag = true\n        }\n        i += 1\n      }\n      if (flag) arr.reverse.toString.toUpperCase()\n\
    \      else s\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu6li3vd.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36marr\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val r = new StringBuilder(s).reverse\n        val a = s.toList\n    \
    \    a.foreach {\n            case c: Char =>\n                if (c.isLetter)\
    \ r +=  c.toUpper else r +=     c.toLower\n            case _ =>\n        }\n\
    \        r.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7wzb84r.scala:24:10\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        r.reverse\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        s.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1t87fs5.scala:20)\n\tat Problem.main(tmpr1t87fs5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = mutable.ArrayBuffer.empty[String]\n        var index = 0\n\
    \        while (index < s.length) {\n            val letter = s(index)\n     \
    \       index += 1\n            if (letter.matches(\"\\\\d\")) result += \"0\"\
    \n            else if (letter.matches(\"[a-zA-Z]\")) {\n                val letter2\
    \ = s(index)\n                index += 1\n                if (letter2.matches(\"\
    [a-zA-Z]\")) {\n                    result += letter.toLowerCase\n           \
    \         result += letter2.toUpperCase\n                } else {\n          \
    \          result += letter.toLowerCase\n                }\n            } else\
    \ {\n                result += letter\n            }\n        }\n        result.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvy8enx_d.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvy8enx_d.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (letter.matches(\e[31m\"\\\\\
    d\"\e[0m)) result += \e[31m\"0\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value matches is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy8enx_d.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (letter.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value matches is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy8enx_d.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (letter2.matches(\e[31m\"\
    [a-zA-Z]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value matches is not a member of Char\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        def toUpper(s : String) : String = { \n            if(s.isEmpty) s\n\
    \            else s.toUpperCase\n        }\n        def toLower(s : String) :\
    \ String = { \n            if(s.isEmpty) s\n            else s.toLowerCase\n \
    \       }\n        val lowerCase = mutable.ListBuffer[String]()\n        val upperCase\
    \ = mutable.ListBuffer[String]()\n        for(x <- s.toCharArray) \n         \
    \   if(x.isLetter) \n                if(x.toUpperCase == x) \n               \
    \     upperCase += toUpper(x)\n                else upperCase += x\n         \
    \   else\n                if(x.toLowerCase == x) \n                    lowerCase\
    \ += toLower(x)\n                else lowerCase += x\n        toLower(upperCase.toIterable.mkString)\
    \ + toUpper(lowerCase.toIterable.mkString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_ayu7_8.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlowerCase\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_ayu7_8.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mupperCase\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_ayu7_8.scala:29:21 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m(x.toUpperCase == x) \n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \               value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg_ayu7_8.scala:33:21 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                \e[33mif\e[0m(x.toLowerCase == x) \n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         value toLowerCase is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var newStr = s\n        var newStr2 = newStr\n        var i = 0\n   \
    \     var j = 0\n        var count = 1\n        while (i < newStr.length && j\
    \ < newStr2.length) {\n            if (newStr(i) == newStr2(j)) {\n          \
    \      newStr += newStr2(i).asInstanceOf[String].toUpperCase\n               \
    \ i += 1\n                j += 1\n                count += 1\n            } else\
    \ {\n                count += 1\n            }\n        }\n        if (count ==\
    \ newStr2.length) {\n            newStr2 = newStr.reverse\n        }\n       \
    \ newStr = newStr2.reverse\n        newStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class java.lang.Character cannot be cast\
    \ to class java.lang.String (java.lang.Character and java.lang.String are in module\
    \ java.base of loader 'bootstrap')\n\tat Problem$.solve(tmp174zh561.scala:24)\n\
    \tat Problem$.main(tmp174zh561.scala:39)\n\tat Problem.main(tmp174zh561.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.length == 0) s.reverse\n        else \n            val countMap\
    \ = mutable.Map[Char, Int]()\n            for (i <- 0 until s.length) {\n    \
    \            countMap(s(i)) = countMap(s(i)) + 1\n            }\n            var\
    \ result : String = \"\"\n            var i = 0\n            while (i < s.length)\
    \ {\n                if (countMap.contains(s(i))) {\n                    countMap(s(i))\
    \ = countMap(s(i)) - 1\n                    result += s(i)\n                 \
    \   i += 1\n                } else {\n                    result += s(i)\n   \
    \             }\n                i += 1\n            }\n            result\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpziy0231f.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpziy0231f.scala:19:27\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcountMap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpziy0231f.scala:39:11 ------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m    assert(solve((\e[31m\"AsDf\"\e[0m)).equals((\e[31m\"aSdF\"\
    \e[0m)));\n\e[31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \    Not found: solve\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpziy0231f.scala:40:11\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m    assert(solve((\e[31m\"\
    1234\"\e[0m)).equals((\e[31m\"4321\"\e[0m)));\n\e[31m\e[31m   |\e[0m         \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m           Not found: solve\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpziy0231f.scala:41:11 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    assert(solve((\e[31m\"ab\"\e[0m)).equals((\e[31m\"\
    AB\"\e[0m)));\n\e[31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \        Not found: solve\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpziy0231f.scala:42:11 ------------------------\e[0m\e[0m\n\e[31m42 |\e\
    [0m    assert(solve((\e[31m\"#a@C\"\e[0m)).equals((\e[31m\"#A@c\"\e[0m)));\n\e\
    [31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ solve\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpziy0231f.scala:43:11\
    \ ------------------------\e[0"
  stdout: ''
  timestamp: 1659979687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \       val chars = s filter (c => ('A' <= c && c <= 'Z') || ('a' <= c && c <=\
    \ 'z'))\n       val newChars = chars.toList.sortWith(_ < _)\n       if (chars.isEmpty)\
    \ {\n           newChars.mkString\n       } else {\n           newChars.reverse.mkString\n\
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09tzg4mq.scala:26)\n\tat Problem.main(tmp09tzg4mq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result = \"\"\n        var temp = \"\"\n        for(char <- s.toCharArray)\
    \ {\n            if(char >= 'a' && char <= 'z') {\n                temp =  temp\
    \ + char.asInstanceOf[Int].toString.toUpperCase\n            } else if(char >=\
    \ 'A' && char <= 'Z') {\n                temp = temp + char.asInstanceOf[Int].toString\n\
    \            } else {\n                temp = temp + char\n            }\n   \
    \     }\n        result = result + temp\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbajxbuxj.scala:32)\n\tat Problem.main(tmpbajxbuxj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val charSet = new collection.mutable.HashSet[Char]()\n        for (c\
    \ <- s) {\n            if (charSet.contains(c)) charSet.remove(c.toLowerCase)\n\
    \            charSet += c.toLowerCase\n        }\n        charSet.map(c => if\
    \ (charSet.contains(c.toLowerCase)) c.toUpper else c).toString.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsawcg5_w.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (charSet.contains(c)) charSet.remove(c.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsawcg5_w.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            charSet += c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsawcg5_w.scala:22:48 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        charSet.map(\e[36mc\e[0m => \e[33mif\e[0m (charSet.contains(c.toLowerCase))\
    \ c.toUpper \e[33melse\e[0m c).toString.reverse\n\e[31m\e[31m   |\e[0m       \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             value toLowerCase is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.ArrayBuffer[String]()\n        val lowerCase\
    \ = s.toLowerCase // keep a lowercase copy of original string\n        for (i\
    \ <- 0 until s.length){ // traverse the original string until it ends\n      \
    \      if (isLetter(lowerCase(i))){\n                val revCase = revCase(lowerCase(i))\n\
    \                result.append((revCase))\n            }else {\n             \
    \   result.append(lowerCase(i))\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoolszgp.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoolszgp.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (isLetter(lowerCase(i))){\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: isLetter\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val rev = s.reverse\n        val str = rev.split(\"\").map(_.toLowerCase).toList\n\
    \        val noLettersStr = if (str.isEmpty) \"#a@C\" else s\n        val result\
    \ = if (str.contains(rev.split(\"\").head)) \n            str.map(_.toLowerCase).reverse\n\
    \        else\n            noLettersStr.map(_.toLowerCase).reverse\n        result.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4902uiue.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            noLettersStr.map(_.toLowerCase).reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             value toLowerCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val res = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\
    \ res += if(s.charAt(i).toUpperCase == s.charAt(i).toLowerCase) s.charAt(i).toUpperCase\
    \ else s.charAt(i).toLowerCase\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptfgo006_.scala:18:42 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.length)\
    \ res += \e[33mif\e[0m(s.charAt(i).toUpperCase == s.charAt(i).toLowerCase) s.charAt(i).toUpperCase\
    \ \e[33melse\e[0m s.charAt(i).toLowerCase\n\e[31m\e[31m   |\e[0m             \
    \                             ^^\e[0m\n\e[31m   |\e[0m                       \
    \                 expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptfgo006_.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : StringBuilder)\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        if(s.isEmpty) {\n            return s\n        }\n        var revStr\
    \ = \"\"\n        var i = 0\n        while(i < s.length()) {\n            if(s.charAt(i).toLowerCase\
    \ == 'a') {\n                revStr = s.substring(i, s.length()).reverse\n   \
    \             i = s.length()\n            }else if(s.charAt(i).toUpperCase ==\
    \ 'A') {\n                revStr = s.substring(i, s.length()).reverse\n      \
    \          i = s.length()\n            }else if(s.charAt(i).toLowerCase == 'b')\
    \ {\n                revStr = s.substring(i, s.length()).reverse\n           \
    \     i = s.length()\n            }else if(s.charAt(i).toUpperCase == 'B') {\n\
    \                revStr = s.substring(i, s.length()).reverse\n               \
    \ i = s.length()\n            }\n            else {\n                revStr =\
    \ revStr + s.charAt(i)\n                i = i + 1\n            }\n        }\n\
    \        if(revStr.length() == 0) {\n            revStr = revStr + s.substring(0,\
    \ s.length())\n        }\n        return revStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kbxsk_x.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ \e[31m'a'\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kbxsk_x.scala:26:33 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(s.charAt(i).toUpperCase\
    \ == \e[31m'A'\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kbxsk_x.scala:29:33 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(s.charAt(i).toLowerCase\
    \ == \e[31m'b'\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kbxsk_x.scala:32:33 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(s.charAt(i).toUpperCase\
    \ == \e[31m'B'\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toUpperCase is not a member of\
    \ Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        var result : String = \"\"\n        var tmpStr : String = \"\"\n    \
    \    for(i <- 0 until s.length){\n            if(s.charAt(i)>= 'a' && s.charAt(i)<=\
    \ 'z'){\n                tmpStr += s.charAt(i).toLower\n            }\n      \
    \      else if(s.charAt(i)>= 'A' && s.charAt(i)<= 'Z'){\n                tmpStr\
    \ += s.charAt(i).toUpper\n            }\n            else{\n                tmpStr\
    \ += s.charAt(i)\n            }\n        }\n        val tmpArray = tmpStr.toCharArray\n\
    \        var reverseStr = \"\"\n        for(i <- 0 until tmpArray.length){\n \
    \           reverseStr += tmpArray(i)\n        }\n        return reverseStr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxfh7a9s.scala:38)\n\tat Problem.main(tmpfxfh7a9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val len = s.length\n        var result = \"\"\n        var flag = 0\n\
    \        var temp = \"\"\n        var i = 0\n        var j = 0\n        while(i\
    \ < len) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n    \
    \            temp = temp + s.charAt(i).toUpper\n            } else {\n       \
    \         temp = temp + s.charAt(i).toLower\n            }\n            i = i\
    \ + 1\n        }\n        for (i = 1; i < len; i++) {\n            if (temp ==\
    \ \"\") {\n                result = result + s.charAt(i)\n            } else {\n\
    \                flag = i\n                temp = \"\"\n                j = 0\n\
    \                while (j < flag) {\n                    temp = temp + s.charAt(j).toUpper\n\
    \                    j = j + 1\n                }\n                temp = temp\
    \ + s.charAt(flag).toLower\n                flag = flag - 1\n                while\
    \ (j > flag) {\n                    temp = temp + s.charAt(j).toLower\n      \
    \              j = j - 1\n                }\n                temp = temp + s.charAt(flag).toLower\n\
    \                i = i + 1\n                while (i < len) {\n              \
    \      if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                     \
    \   temp = temp + s.charAt(i).toUpper\n                    } else {\n        \
    \                temp = temp + s.charAt(i).toLower\n                    }\n  \
    \                  i = i + 1\n                }\n                result = result\
    \ + temp\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhkvsus0.scala:31:15 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m; i < len; i++)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhkvsus0.scala:31:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m; i < len; i++) {\n\e[31m\e[31m   |\e[0m                  \
    \         ^\e[0m\n\e[31m   |\e[0m                           '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjhkvsus0.scala:31:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m; i < len; i++) {\n\e[31m\e[31m   |\e[0m                  \
    \              ^\e[0m\n\e[31m   |\e[0m                                pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhkvsus0.scala:31:18\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m (i\
    \ = \e[31m1\e[0m; i < len; i++) {\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m  "
  stdout: ''
  timestamp: 1659979695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val lower = s.toLowerCase \n        val upper = s.toUpperCase \n    \
    \    if (lower == upper) {\n            return s\n        }\n        val nums\
    \ = mutable.ArrayBuffer.empty[String]\n        for (x <- lower) {\n          \
    \  if (x != x.toLowerCase) {\n                nums += x\n            } else if\
    \ (x != x.toUpperCase) {\n                nums += x.toUpperCase\n            }\n\
    \        }\n        nums.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkdylnl1.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxkdylnl1.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (x != x.toLowerCase) {\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxkdylnl1.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (x != x.toUpperCase)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value toUpperCase is not a member of Char\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val lower = (\"a\" -> \"A\", \"b\" -> \"B\", \"c\" -> \"C\", \"d\" ->\
    \ \"D\", \"e\" -> \"E\", \"f\" -> \"F\", \"g\" -> \"G\", \"h\" -> \"H\", \"i\"\
    \ -> \"I\", \"j\" -> \"J\", \"k\" -> \"K\", \"l\" -> \"L\", \"m\" -> \"M\", \"\
    n\" -> \"N\", \"o\" -> \"O\", \"p\" -> \"P\", \"q\" -> \"Q\", \"r\" -> \"R\",\
    \ \"s\" -> \"S\", \"t\" -> \"T\", \"u\" -> \"U\", \"v\" -> \"V\", \"w\" -> \"\
    W\", \"x\" -> \"X\", \"y\" -> \"Y\", \"z\" -> \"Z\")\n        val upper = lower\n\
    \        val news = lower.keySet.filter(s => s !in lower.values)\n        news.foreach(s\
    \ => s += upper(s))\n        lower\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprbtachoy.scala:19:55 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnews\e[0m = lower.keySet.filter(\e\
    [36ms\e[0m => s !in lower.values)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprbtachoy.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnews\e[0m = lower.keySet.filter(\e\
    [36ms\e[0m => s !in lower.values)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue keySet is not a member of ((String, String), (String,\
    \ String), (String, String), (String, String), (String\n\e[31m   |\e[0m  , \n\e\
    [31m   |\e[0mString), (String, String), (String, String), (String, String), (String,\
    \ String)\n\e[31m   |\e[0m  , \n\e[31m   |\e[0m(String, String), (String, String),\
    \ (String, String), (String, String), (String\n\e[31m   |\e[0m  , \n\e[31m   |\e\
    [0mString), (String, String), (String, String), (String, String), (String, String)\n\
    \e[31m   |\e[0m  , \n\e[31m   |\e[0m(String, String), (String, String), (String,\
    \ String), (String, String), (String\n\e[31m   |\e[0m  , \n\e[31m   |\e[0mString))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprbtachoy.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lower\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0mFound:    (lower : ((String, String), (String, String), (String,\
    \ String), (String, String)\n\e[31m   |\e[0m  , \n\e[31m   |\e[0m(String, String),\
    \ (String, String), (String, String), (String, String), (String\n\e[31m   |\e\
    [0m  , \n\e[31m   |\e[0mString), (String, String), (String, String), (String,\
    \ String), (String, String)\n\e[31m   |\e[0m  , \n\e[31m   |\e[0m(String, String),\
    \ (String, String), (String, String), (String, String), (String\n\e[31m   |\e\
    [0m  , \n\e[31m   |\e[0mString), (String, String), (String, String), (String,\
    \ String), (String, String)\n\e[31m "
  stdout: ''
  timestamp: 1659979695
