name: HumanEval_118_get_closest_vowel
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    // two consonants from the right side of the word (case sensitive).\n\
  \    // Vowels in the beginning and ending doesn't count. Return empty string if\
  \ you didn't\n    // find any vowel met the above condition. \n    // You may assume\
  \ that the given string contains English letter only.\n    // Example:\n    // >>>\
  \ getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        var result\
    \ = \"\"\n        var index = word.length - 1\n        while(index >= 0) {\n \
    \           val currentChar = word(index)\n            var isCurrentCharVowel\
    \ = false\n            vowels.find(currentChar => isCurrentCharVowel = currentChar.toLowerCase\
    \ == currentChar)\n            if (isCurrentCharVowel) {\n                result\
    \ = currentChar\n                index -= 2\n            } else {\n          \
    \      index -= 1\n            }\n        }\n        result", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val firstLetter = word.charAt(word.length-1)\n\
    \        if(firstLetter >= 'A' && firstLetter <= 'Z') {\n            val secondLetter\
    \ = word.charAt(word.length-2)\n            if(secondLetter >= 'A' && secondLetter\
    \ <= 'Z') {\n                if(vowels.contains(word.charAt(word.length-2)))\n\
    \                    return word.charAt(word.length-2)\n            }\n      \
    \  }\n        return \"\"", "        val vowels = Array('a','e','i','o','u')\n\
    \        var index = 0\n        val wordArray = word.split(\" \").toList\n   \
    \     wordArray.reverse.foreach {\n            if (vowels.contains(_))\n     \
    \           index = wordArray.indexOf(\"\")\n        }\n        if (index == -1)\n\
    \            return \"\"\n        else\n            return wordArray.apply(index+1)",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\",\"E\",\"I\",\"\
    O\",\"U\")\n        val index = word.lastIndexOfAny(vowels)\n        val end =\
    \ word.substring(index).lastIndexOf(\"e\")\n        val start = word.substring(0,index).lastIndexOf(\"\
    a\")\n        val res = word.substring(start,end)\n        if (res.length==0)\n\
    \            return \"\"\n        else\n            return res", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsSet = vowels.toSet\n\
    \        val leftSide = word.lastOption\n        val rightSide = word.dropRight(1)\n\
    \n        if(leftSide.isEmpty)\n            return \"\"\n\n        if(rightSide.isEmpty)\n\
    \            return \"\"\n\n        val rightVowel = rightSide.last\n\n      \
    \  // if the last character is a vowel\n        if(rightVowel in vowelsSet)\n\
    \            return \"\"\n        else if(rightVowel == \" \" || rightVowel ==\
    \ \"'\")\n            return \"\"\n\n        val leftVowel = leftSide.last\n\n\
    \        if(leftVowel == \" \" || leftVowel == \"'\")\n            return \"\"\
    \n\n        if(leftVowel in vowelsSet){\n            // if the last character\
    \ of the word is a vowel\n            val leftVowelPos = word.lastIndexOf(' ')\
    \ + 1\n            val rightVowelPos = word.lastIndexOf(' ') + 1\n\n         \
    \   val leftVowelCount = word.slice(leftVowelPos, leftVowelPos + 1).count(' ')\n\
    \            val rightVowelCount = word.slice(rightVowelPos, rightVowelPos + 1).count('\
    \ ')\n\n            if(rightVowelCount == leftVowelCount)\n                return\
    \ \"\"\n            else if(rightVowelCount < leftVowelCount)\n              \
    \  return \"\"\n\n        }\n\n        return \"\"", "        val vowelList =\
    \ \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".split(\",\").toSet\n\
    \        var vowel = word.substring(word.length-1)\n        var newVowel = \"\"\
    \n        vowelList.toSeq.foreach { vowel2 =>\n            if (vowel2.toUpperCase.equals(vowel.toUpperCase))\
    \ {\n                newVowel = vowel2\n            }\n        }\n        if (vowelList.isEmpty\
    \ && newVowel.isEmpty) {\n            newVowel = \"\"\n        }\n        return\
    \ newVowel", "        var bestVowel = \"\"\n        var bestVowelCount = 0\n \
    \       for(i <- word.indexOf(\"G\"-1); i+1 < word.length && !(word.charAt(i)\
    \ == \"F\" && word.charAt(i+1) == \"A\") && !(word.charAt(i) == \"M\" && word.charAt(i+1)\
    \ == \"P\")){\n            var vowel = word.substring(i, i+1);\n            if(vowel.equals(\"\
    U\") || vowel.equals(\"UA\") || vowel.equals(\"UB\") || vowel.equals(\"UC\") ||\
    \ vowel.equals(\"UD\") || vowel.equals(\"UE\") || vowel.equals(\"UF\") || vowel.equals(\"\
    UG\") || vowel.equals(\"UH\") || vowel.equals(\"UJ\") || vowel.equals(\"UK\")\
    \ || vowel.equals(\"UL\") || vowel.equals(\"UM\") || vowel.equals(\"UN\") || vowel.equals(\"\
    UO\") || vowel.equals(\"UP\") || vowel.equals(\"UQ\") || vowel.equals(\"UR\")\
    \ || vowel.equals(\"US\") || vowel.equals(\"UT\") || vowel.equals(\"UU\") || vowel.equals(\"\
    UV\") || vowel.equals(\"UW\") || vowel.equals(\"UX\") || vowel.equals(\"UY\")\
    \ || vowel.equals(\"UZ\") || vowel.equals(\"V\") || vowel.equals(\"VB\") || vowel.equals(\"\
    VC\") || vowel.equals(\"VD\") || vowel.equals(\"VE\") || vowel.equals(\"VF\")\
    \ || vowel.equals(\"VG\") || vowel.equals(\"VH\") || vowel.equals(\"VI\") || vowel.equals(\"\
    VJ\") || vowel.equals(\"VK\") || vowel.equals(\"VL\") || vowel.equals(\"VM\")\
    \ || vowel.equals(\"VN\") || vowel.equals(\"VO\") || vowel.equals(\"VP\") || vowel.equals(\"\
    VQ\") || vowel.equals(\"VR\") || vowel.equals(\"VS\") || vowel.equals(\"VT\")\
    \ || vowel.equals(\"VU\") || vowel.equals(\"VV\") || vowel.equals(\"VW\") || vowel.equals(\"\
    VX\") || vowel.equals(\"VY\") || vowel.equals(\"VZ\") || vowel.equals(\"W\") ||\
    \ vowel.equals(\"WB\") || vowel.equals(\"WC\") || vowel.equals(\"WD\") || vowel.equals(\"\
    WE\") || vowel.equals(\"WF\") || vowel.equals(\"WG", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val lowerCaseWord = word.map(_.toLowerCase)\n\
    \        val index = lowerCaseWord.indexWhere(_.toChar == 'a')\n        var closestVowel\
    \ = \"\"\n        if(index != -1){\n            var closest = lowerCaseWord.take(index).map(_.toLowerCase)\n\
    \            val vowelsIndex = vowels.indexWhere(_.toChar == closest(2))\n   \
    \         if(vowelsIndex != -1){\n                closestVowel = vowels(vowelsIndex)\n\
    \            }\n        }\n        return closestVowel", "        val vowels =\
    \ mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\")\n        val consonants\
    \ = mutable.Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    )\n        val letters = mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    , \"a\")\n        var i = 0\n        var j = word.length - 1\n        var closest\
    \ = \"\"\n        while (i <= j) {\n            var min = i\n            var max\
    \ = j\n            val length = j - i\n            val newVowel = vowels.subsetOf(word.slice(i,\
    \ i + length))\n            if (newVowel.length > 0) {\n                min =\
    \ i\n                max = i + newVowel.length\n            }\n            val\
    \ newConsonant = consonants.subsetOf(word.slice(i, j))\n            if (newConsonant.length\
    \ > 0) {\n                min = i\n                max = j\n            }\n  \
    \          val newLetter = letters.subsetOf(word.slice(i, j))\n            if\
    \ (newLetter.length > 0) {\n                min = i\n                max = j\n\
    \            }\n            val newLetters = letters.subsetOf(word.slice(i, j))\n\
    \            if (newLetters.length > 0) {\n                min = i\n         \
    \       max = j\n            }\n            val newVowels = vowels.subsetOf(word.slice(i,\
    \ j))\n            if (newVowels.length > 0) {\n                min = i\n    \
    \            max = j\n            }\n            if (newVowel.length < min.length)\
    \ {\n                min = i\n            }\n            if (newVowel.length <\
    \ max.length) {\n                max = j\n            }\n            val newConsonants\
    \ = consonants.subsetOf(word.slice(i, j))\n            if (newConsonants.length\
    \ > 0) {\n                min = i\n                max = j\n            }\n  \
    \          if (newConsonant.length < min.length) {\n                min = i\n\
    \            }\n            if (newConsonant.length < max.length) {\n        \
    \        max = j\n            }\n            val newLetter = letters.subsetOf(word.slice(i,\
    \ j))\n            if (newLetter.length > 0) {\n                min = i\n    \
    \            max = j\n            }\n            if (newLetter.length < min.length)\
    \ {\n                min = i\n            }\n            if (newLetter.length\
    \ < max.length) {\n                max = j\n            }\n            if (closest\
    \ == \"\") {\n                closest = (word.slice(i, j)) + \"U\"\n         \
    \   } else {\n                closest = (word.slice(i, j)) + closest\n       \
    \     }\n            i += 1\n            j -= 1\n        }\n        return closest",
  "        var currentIndex : Int = 0\n        var currentVowel : String = \"\"\n\
    \        var currentDistance : Double = 0.0 \n\n        for (i <- word.length\
    \ - 1; i >= 0; i--){\n            var previousIndex : Int = word.length - i -\
    \ 1\n            var previousVowel : String = word.substring(previousIndex, 1)\n\
    \            val distance = getDistance(word, previousIndex,previousVowel)\n \
    \           if(distance < currentDistance){\n                currentIndex = previousIndex\n\
    \                currentVowel = previousVowel\n                currentDistance\
    \ = distance\n            }\n        }\n\n        currentVowel", "        var\
    \ res = \"\"\n        var first = 0\n        var last = word.length\n        while(first\
    \ <= last){\n            res +=  word.charAt(first)\n            first += 1\n\
    \            last -= 1\n        }\n        val vowels = mutable.Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        vowels.foreach(x => {\n            if(res.indexOf(x)\
    \ == -1 && res.charAt(res.length-1) == x){\n                res = res + x\n  \
    \          }\n        })\n        if(res.contains(\"y\") || res.contains(\"a\"\
    )) res += \"u\"\n        if(res.contains(\"y\") || res.contains(\"e\")) res +=\
    \ \"u\"\n        if(res.contains(\"y\") || res.contains(\"i\")) res += \"u\"\n\
    \        if(res.contains(\"y\") || res.contains(\"o\")) res += \"u\"\n       \
    \ if(res.contains(\"y\") || res.contains(\"u\")) res += \"u\"\n        if(res.contains(\"\
    a\")) res += \"u\"\n        if(res.contains(\"e\")) res += \"u\"\n        if(res.contains(\"\
    i\")) res += \"u\"\n        if(res.contains(\"o\")) res += \"u\"\n        if(res.contains(\"\
    u\")) res += \"u\"\n        return res", "        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var vowelsIndex = 0\n        var vowelsLength\
    \ = 0\n        var vowelsIndexRight = 0\n        var vowelsLengthRight = 0\n \
    \       var tempString = \"\"\n        for (i <- 0 until word.length-1){\n   \
    \         if(vowels.contains(word.charAt(i))){\n                tempString +=\
    \ word.charAt(i)\n                vowelsIndex += 1\n                vowelsLength\
    \ += 1\n                if(word.charAt(i+1) == word.charAt(i).toLowerCase){\n\
    \                    vowelsIndexRight += 1\n                    vowelsLengthRight\
    \ += 1\n                }\n            }\n        }\n        if(vowelsIndex ==\
    \ 1){\n            return tempString\n        }else if(vowelsIndex == 2){\n  \
    \          return tempString.reverse\n        }else if(vowelsIndexRight == 1){\n\
    \            return tempString.reverse\n        }else if(vowelsIndexRight == 2){\n\
    \            return tempString\n        }\n        tempString = \"\"\n       \
    \ var wordIndex = 0\n        var wordLength = 0\n        var wordIndexRight =\
    \ 0\n        var wordLengthRight = 0\n        for (i <- 0 until word.length-1){\n\
    \            if(vowels.contains(word.charAt(i))){\n                tempString\
    \ += word.charAt(i)\n                wordIndex += 1\n                wordLength\
    \ += 1\n                if(word.charAt(i+1) == word.charAt(i).toLowerCase){\n\
    \                    wordIndexRight += 1\n                    wordLengthRight\
    \ += 1\n                }\n            }\n        }\n        if(wordIndex == 1){\n\
    \            return tempString\n        }else if(wordIndex == 2){\n          \
    \  return tempString.reverse\n        }else if(wordIndexRight == 1){\n       \
    \     return tempString.reverse\n        }else if(wordIndexRight == 2){\n    \
    \        return tempString\n        }\n        tempString = \"\"\n        var\
    \ wordIndex = 0\n        var wordLength = 0\n        var wordIndexRight = 0\n\
    \        var wordLengthRight = 0\n        for (i <- 0 until word.length-1){\n\
    \            if(vowels.contains(word.charAt(i))){\n                tempString\
    \ += word.charAt(i)\n                wordIndex += 1\n                wordLength\
    \ += 1\n                if(word.charAt(i+1) == word.charAt(i).toLowerCase){\n\
    \                    wordIndexRight += 1\n                    wordLengthRight\
    \ += 1\n                }\n            }\n        }\n        if(wordIndex == 1){\n\
    \            return tempString\n        }else if(wordIndex == 2){\n          \
    \  return tempString.reverse\n        }else if(wordIndexRight == 1){\n       \
    \     return tempString.reverse\n        }else if(wordIndexRight == 2){\n    \
    \        return tempString\n        }\n        tempString = \"\"\n        var\
    \ wordIndex = 0\n        var wordLength = 0\n        var wordIndexRight = 0\n\
    \        var wordLengthRight = 0\n        for (i <- 0 until word.length-1){\n\
    \            if(vowels.contains(word.charAt(", "        var index = word.length\
    \ - 1\n        var vowelFound = false\n        var vowel : String = \"\"\n   \
    \     while(index >= 0 && !vowelFound) {\n            vowel = word.charAt(index)\n\
    \            if(vowel == \"a\" || vowel == \"e\" || vowel == \"i\" || vowel ==\
    \ \"o\" || vowel == \"u\")\n                vowelFound = true\n            index\
    \ = index - 1\n        }\n        if (index >= 0) {\n            var lastIndex\
    \ = word.length - 1\n            var lastVowel = \"\"\n            while (lastIndex\
    \ >= 0 && !vowelFound) {\n                lastVowel = word.charAt(lastIndex)\n\
    \                if(lastVowel == \"a\" || lastVowel == \"e\" || lastVowel == \"\
    i\" || lastVowel == \"o\" || lastVowel == \"u\")\n                    vowelFound\
    \ = true\n                lastIndex = lastIndex - 1\n            }\n         \
    \   if (lastIndex >= 0) {\n                lastVowel = word.charAt(lastIndex)\n\
    \                if (vowelFound && lastVowel != vowel)\n                    vowel\
    \ = vowel + lastVowel\n            }\n        }\n        return vowel", "    \
    \    var vowelList : mutable.MutableList[String] = mutable.MutableList[String]()\n\
    \        var consonants : mutable.MutableList[String] = mutable.MutableList[String]()\n\
    \        var vowelLength : Int = 0\n        var index : Int = word.length-1\n\
    \        var i : Int = word.length\n        var vowel : String = \"\"\n      \
    \  while (i >=0  && consonants.isEmpty) {\n            if (word.charAt(i) == 'a'\
    \ || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' ||\
    \ word.charAt(i) == 'u') {\n                vowelList.add(word.charAt(i))\n  \
    \              consonants = word.substring(i+1)\n            }\n            i\
    \ -= 1\n        }\n        if (vowelList.isEmpty && vowelLength == 0) return \"\
    \"\n        while (vowelList.isEmpty) {\n            vowel = word.charAt(index)\n\
    \            if (vowelLength == 0) {\n                if (vowel == word.charAt(index))\
    \ vowel = word.charAt(index)\n            }\n            vowelLength += 1\n  \
    \          index --\n        }\n        var diff : Int = abs(index - consonants.size)\n\
    \        if (diff > 0) {\n            return vowel\n        } else {\n       \
    \     diff = abs(index - vowelLength)\n        }\n        if (diff < 0) {\n  \
    \          return \"\"\n        } else {\n            vowelList.sort()\n     \
    \       if (vowelList.isEmpty) return \"\"\n            vowelList.last()\n   \
    \     }", "        var vowelList = new collection.mutable.ArrayBuffer[Char]()\n\
    \        for(i<- word.length-1 to 0 by -1){\n            if(word.charAt(i) ==\
    \ 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o'\
    \ || word.charAt(i) == 'u'){\n                vowelList += word.charAt(i)\n  \
    \          }\n        }\n        vowelList.sort( (x,y) => (x.compareTo(y)) )\n\
    \        vowelList.reverse.find(_ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' ||\
    \ _ == 'u').getOrElse(\"\")", "        val wordList = word.split(\" \")\n    \
    \    val vowelList = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n       \
    \ val minLen = math.min(wordList.map(_.length).toInt, vowelList.size)\n      \
    \  val vowels = wordList.map(_.toUpperCase).zipWithIndex.filter(_._2 % vowelList.size\
    \ == 0).map(_._1)\n        val vowelPosition = vowels.toSeq.sortBy(-_.length)\n\
    \        vowelPosition.find(_.length == minLen).getOrElse(\"\")", "        val\
    \ vowels = word.filter(x => (x like \"[aeiouAEIOU]\")).map(x => (x + \"y\"))\n\
    \        val consonants = word.filter(x => (x like \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    )).map(x => (x + \"y\"))\n        if(vowels.isEmpty) {\n            return \"\"\
    \n        }\n        if(consonants.isEmpty) {\n            return vowels.head\n\
    \        }\n        var count = 0\n        while(vowels.head.isLowerCase && consonants.head.isUpperCase\
    \ && vowels.head <= consonants.head && count < vowels.size) {\n            val\
    \ temp = vowels.head\n            vowels.head = consonants.head\n            consonants.head\
    \ = temp\n            count += 1\n        }\n        if(vowels.head < consonants.head\
    \ || vowels.head > consonants.head) {\n            return \"\"\n        }\n  \
    \      vowels.head", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\") \n        val vowelsCount = vowels.toSet.size\n        val vowelsArray\
    \ = vowels.toArray.sortWith(_ < _)\n        val vowelsArrayLen = vowelsArray.length\n\
    \        var index = vowelsArray.length\n        var closestVowel = \"\"\n   \
    \     while (index > 0) {\n            val lastCharIndex = word.lastIndexOfAny(vowelsArray.toArray)\n\
    \            if (lastCharIndex > 0) {\n                val lastChar = word.charAt(lastCharIndex\
    \ - 1)\n                val firstCharIndex = word.indexOfAny(vowelsArray.toArray)\n\
    \                if (firstCharIndex < 0) {\n                    closestVowel =\
    \ \"\"\n                } else {\n                    val firstChar = word.charAt(firstCharIndex)\n\
    \                    if (vowels.contains(firstChar)) {\n                     \
    \   val vowelsCount = vowels.toSet.size\n                        var vowelIndex\
    \ = vowelsArray.indexOfFirst(firstChar)\n                        if (vowelIndex\
    \ == vowelsCount - 1 || vowelIndex == 0) {\n                            closestVowel\
    \ = firstChar\n                        } else {\n                            val\
    \ vowelsCount2 = vowels.toSet.size\n                            var vowelIndex2\
    \ = vowelsArray.indexOfLast(firstChar)\n                            if (vowelIndex2\
    \ == vowelsCount - 1 || vowelIndex2 == 0) {\n                                closestVowel\
    \ = firstChar\n                            } else {\n                        \
    \        val vowelsCount3 = vowels.toSet.size\n                              \
    \  var vowelIndex3 = vowelsArray.indexOfMiddle(firstChar)\n                  \
    \              if (vowelIndex3 == vowelsCount - 1 || vowelIndex3 == 0) {\n   \
    \                                 closestVowel = firstChar\n                 \
    \               }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n            index -=\
    \ 1\n        }\n        return closestVowel", "        val vowels = Array(\"a\"\
    ,\"e\",\"i\",\"o\",\"u\")\n        val vowelArray = word.split(\"\").map(x =>\
    \ vowels.contains(x))\n        val vowelIndexs = vowelArray.zipWithIndex.filter(x\
    \ => x._2).map(x => x._1)\n        val vowelIndexMap = vowelIndexs.groupBy(x =>\
    \ x).map(x => (x._1, x._2.max))\n        val consonants = Array(\"b\",\"c\",\"\
    d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"v\",\"w\",\"x\",\"y\",\"z\")\n        val consonantArray = word.split(\"\
    \").map(x => consonants.contains(x))\n        val consonantIndexs = consonantArray.zipWithIndex.filter(x\
    \ => x._2).map(x => x._1)\n        val consonantIndexMap = consonantIndexs.groupBy(x\
    \ => x).map(x => (x._1, x._2.max))\n        if(vowelIndexMap.isEmpty || consonantIndexMap.isEmpty)\
    \ {\n            return \"\"\n        }\n        var closest = vowelIndexMap.map(_._2).max\n\
    \        var closestVowel = closest\n        if(closest == 0) {\n            closest\
    \ = consonantIndexMap.map(_._2).max\n            closestVowel = closest\n    \
    \    }\n        var lastVowel = closestVowel\n        var lastClosest = closest\n\
    \        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ vowel = lastVowel\n        var consonant = lastConsonant\n        for(x <- 1\
    \ to closest) {\n            if(vowelIndexMap(vowelIndexMap.length - 1)._2 !=\
    \ 0) {\n                consonantIndexMap(consonantIndexMap.length - 1)._2 -=\
    \ 1\n            } else {\n                consonantIndexMap(consonantIndexMap.length\
    \ - 1)._2 += 1\n            }\n            val vIndex = consonantIndexMap.get(vowel)\n\
    \            val cIndex = consonantIndexMap.get(consonant)\n            if(vIndex\
    \ < cIndex) {\n                vowel = vowelIndexMap.get(vowel)._1\n         \
    \       consonant = consonantIndexMap.get(consonant)._1\n            } else {\n\
    \                vowel = vowelIndexMap.get(consonant)._1\n                consonant\
    \ = consonantIndexMap.get(vowel)._1\n            }\n            val newVowelIndex\
    \ = 0\n            val newConsonantIndex = 0\n            if(vowelIndexMap.get(vowel",
  "        var index = word.lastIndexOf(\"a\");\n        index += 1;\n        val\
    \ found = word.lastIndexOf(\"u\");\n        val found2 = word.lastIndexOf(\"e\"\
    );\n        val found3 = word.lastIndexOf(\"i\");\n        val found4 = word.lastIndexOf(\"\
    o\");\n        val found5 = word.lastIndexOf(\"u\");\n        val found6 = word.lastIndexOf(\"\
    i\");\n        if(found < found2 && found < found3 && found < found4 && found\
    \ < found5 && found < found6){\n            return word.substring(found,index)\
    \ + \"U\";\n        }\n        if(found2 < found && found2 < found3 && found2\
    \ < found4 && found2 < found5 && found2 < found6){\n            return word.substring(found2,index)\
    \ + \"E\";\n        }\n        if(found3 < found && found3 < found2 && found3\
    \ < found4 && found3 < found5 && found3 < found6){\n            return word.substring(found3,index)\
    \ + \"I\";\n        }\n        if(found4 < found && found4 < found2 && found4\
    \ < found3 && found4 < found5 && found4 < found6){\n            return word.substring(found4,index)\
    \ + \"O\";\n        }\n        if(found5 < found && found5 < found2 && found5\
    \ < found3 && found5 < found4 && found5 < found6){\n            return word.substring(found5,index)\
    \ + \"U\";\n        }\n        if(found6 < found && found6 < found2 && found6\
    \ < found3 && found6 < found4 && found6 < found5){\n            return word.substring(found6,index)\
    \ + \"I\";\n        }\n        return \"\";", "        val vowels = scala.collection.mutable.MutableSet.empty[String]\n\
    \        for {\n            i <- 0 until word.length\n        } yield {\n    \
    \        val c = word.charAt(i)\n            if (c.toUpper != \"A\" && c.toUpper\
    \ != \"E\" && c.toUpper != \"I\" && c.toUpper != \"O\" && c.toUpper != \"U\")\n\
    \            vowels += c\n        }\n        vowels.toList.reverse.takeWhile(_\
    \ != \"U\").lastOption.getOrElse(\"\")", "        var count = 0\n        var result\
    \ = 0\n        val list = new mutable.ListBuffer[String]()\n        val wordArray\
    \ = word.split(\"\")\n        for(i <- 0 until wordArray.length-1) {\n       \
    \     for(j <- 0 until wordArray.length-1) {\n                val firstLetter\
    \ = wordArray(i)\n                val secondLetter = wordArray(j)\n          \
    \      val currentLetter = if (i < j) wordArray(i) else wordArray(j)\n       \
    \         if (firstLetter != secondLetter && currentLetter == \"a\" && firstLetter\
    \ == \"A\") count = count + 1\n                if (firstLetter != secondLetter\
    \ && currentLetter == \"e\" && firstLetter == \"E\") count = count + 1\n     \
    \           if (firstLetter != secondLetter && currentLetter == \"i\" && firstLetter\
    \ == \"I\") count = count + 1\n                if (firstLetter != secondLetter\
    \ && currentLetter == \"o\" && firstLetter == \"O\") count = count + 1\n     \
    \           if (firstLetter != secondLetter && currentLetter == \"u\" && firstLetter\
    \ == \"U\") count = count + 1\n            }\n        }\n        if (count > 0)\
    \ result = if (count >= 5) 1 else 1\n        else result = \"\"\n        result.mkString",
  "        var bestVowel = \"\";\n        var bestUpper = 0;\n        var bestLower\
    \ = 0;\n        var vowel = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelLower = \"\
    eiyoou\"\n        var vowelUpper = \"AIU\"\n        var vowelLowerIndex = 0\n\
    \        var vowelUpperIndex = 0\n        var vowelIndex = 0\n        var vowelVowelIndex\
    \ = -1\n        var vowelIndexUpper = 0\n        var vowelIndexLower = 0\n   \
    \     var lowerIndex = -1\n        var upperIndex = -1\n        var vowelVowel\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelVowelIndex = -1\n\
    \        var vowelVowelIndexUpper = 0\n        var vowelVowelIndexLower = 0\n\
    \        var lowerIndexUpper = -1\n        var lowerIndexLower = -1\n        for(i\
    \ <- 0 until word.length-1){\n            val cons = word.charAt(i).toInt\n  \
    \          vowelIndex += cons\n            vowelIndexUpper += cons\n         \
    \   vowelIndexLower += cons\n            vowelVowelIndex += cons\n           \
    \ vowelVowelIndexUpper += cons\n            vowelVowelIndexLower += cons\n   \
    \         lowerIndex += cons\n            lowerIndexUpper += cons\n          \
    \  lowerIndexLower += cons\n            vowelVowelIndex += cons\n            vowelVowelIndexUpper\
    \ += cons\n            vowelVowelIndexLower += cons\n        }\n        if(vowelIndex\
    \ != -1){\n            for(i <- 0 until word.length-1){\n                val cons\
    \ = word.charAt(i).toInt\n                if(vowel.contains(word.charAt(i))){\n\
    \                    if(vowelIndexUpper == cons || vowelIndexLower == cons){\n\
    \                        bestUpper = vowelIndexUpper\n                       \
    \ bestLower = vowelIndexLower\n                        bestVowel = vowel.indexOf(vowel.indexOf(word.charAt(i)))\n\
    \                    }\n                }\n                if(vowelVowel.contains(word.charAt(i))){\n\
    \                    if(vowelVowelIndexUpper == cons || vowelVowelIndexLower ==\
    \ cons){\n                        bestUpper = vowelVowelIndexUpper\n         \
    \               bestLower = vowelVowelIndexLower\n                        bestVowel\
    \ = vowelVowel.indexOf(vowelVowel.indexOf(word.charAt(i)))\n                 \
    \   }\n                }\n                if(vowelLower.contains(word.charAt(i))){\n\
    \                    if(vowelIndexUpper == cons || vowelIndexLower == cons){\n\
    \                        bestUpper = vowelIndexUpper\n                       \
    \ bestLower = ", "        var vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var start = 0\n        var end = word.length - 1\n        while(start\
    \ < end) {\n            var middle = (start + end) / 2\n            if(vowels.contains(word.substring(middle\
    \ + 1, middle + 4).toLowerCase )) {\n                end = middle\n          \
    \  } else {\n                start = middle + 1\n            }\n        }\n  \
    \      \n        \n        var vowel = word.substring(end + 1, word.length)\n\
    \        vowel = vowel.toLowerCase \n        vowel = vowel.substring(0,vowel.length-1)\n\
    \        \n        if(vowel != \"\") {\n            return vowel\n        }\n\
    \        \n        return \"\"", "        // initialize result string\n      \
    \  var result = \"\"\n        // initialize vowel index\n        var vowelIndex\
    \ = 0\n        // iterate through word backward\n        for(i <- word.length-1\
    \ to 1 by -1){\n            // if current character is a vowel, increment vowel\
    \ index\n            if(word.charAt(i) == 'A' || word.charAt(i) == 'E' || word.charAt(i)\
    \ == 'I' || word.charAt(i) == 'O' || word.charAt(i) == 'U'){\n               \
    \ vowelIndex = i\n            }\n            // if current character is a consonant,\
    \ compare current vowel index to consonant index\n            else{\n        \
    \        if(vowelIndex > 0 && vowelIndex < i){\n                    val closestVowel\
    \ = word.charAt(vowelIndex+1)\n                    val vowelToBeClosest = word.charAt(vowelIndex-1)\n\
    \                    val isVowel = vowelToBeClosest.equals(closestVowel)\n   \
    \                 // check if previous char is a vowel\n                    if(word.charAt(vowelIndex-1)\
    \ == 'A' || word.charAt(vowelIndex-1) == 'E' || word.charAt(vowelIndex-1) == 'I'\
    \ || word.charAt(vowelIndex-1) == 'O' || word.charAt(vowelIndex-1) == 'U'){\n\
    \                        // check if the previous vowel index is valid\n     \
    \                   if(vowelIndex > 0 && vowelIndex < i){\n                  \
    \          // get the closest vowel\n                            val closestVowel\
    \ = word.charAt(vowelIndex+1)\n                            // check if we found\
    \ a vowel that's a little closer to last vowel\n                            if(closestVowel.isUpperCase\
    \ && !isVowel){\n                                result = closestVowel\n     \
    \                           vowelIndex = vowelIndex\n                        \
    \    } else {\n                                result = \"\"\n               \
    \             }\n                        } else {\n                          \
    \  result = \"\"\n                        }\n                    } else {\n  \
    \                      result = \"\"\n                    }\n                }\
    \ else {\n                    result = \"\"\n                }\n            }\n\
    \        }\n        result", "        var vowel = \"a\";\n        var vowelPos\
    \ = 0\n        val vowels = \"aeiou\";\n        for ( i <- word.length - 1 until\
    \ word.length ) {\n            if ( vowels.contains(word.charAt(i).toLowerCase())\
    \ ) {\n                vowel = word.charAt(i)\n                vowelPos = i\n\
    \            }\n        }\n        for ( i <- vowelPos until word.length ) {\n\
    \            if ( vowels.contains(word.charAt(i).toLowerCase()) ) {\n        \
    \        if (word.charAt(i).toLowerCase() != vowel) {\n                    return\
    \ \"\";\n                }\n            }\n        }\n        return vowel", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsMap\
    \ = vowels.toMap\n        val consonants = Array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsMap = consonants.toMap\n\
    \        val lastVowel = vowels.last\n        val lastConsonant = consonants.last\n\
    \        word.sliding(2).map(s => vowelsMap(s(0) + lastVowel)) ", "        //\
    \ Solution code goes here\n        val vowels = \"aeiouAEIOU\"\n        var result\
    \ : String = \"\"\n        var start : Int = 0\n        var index : Int = word.length\n\
    \        while(index > 0) {\n            val firstChar = word.charAt(start - 1)\n\
    \            if (vowels.contains(firstChar)) start -= 1 \n            else break\n\
    \        }\n        while(index > 0) {\n            val firstChar = word.charAt(start)\n\
    \            if (vowels.contains(firstChar)) break\n            else index -=\
    \ 1\n        }\n        val end = word.size - 1\n        while(end > 0) {\n  \
    \          val firstChar = word.charAt(end)\n            if (vowels.contains(firstChar))\
    \ end -= 1\n            else break\n        }\n        for(i <- start until end)\
    \ {\n            val firstChar = word.charAt(i)\n            if (vowels.contains(firstChar))\
    \ result = vowels.toString.substring(start, end) + result \n            else result\
    \ = \"\" + result \n        }\n        return result", "        // write your\
    \ code here\n        var vowels = \"aeiouAEIOU\"\n        var finalVowel = \"\"\
    \n        var tempVowel = \"\"\n        var tempStr = \"\"\n        val lengthWord\
    \ = word.length\n        var i = 0\n        while (i < lengthWord) {\n       \
    \     tempVowel = word.substring(i, i + 1)\n            if (vowels.contains(tempVowel))\
    \ {\n                tempStr = word.substring(0, i)\n                finalVowel\
    \ = tempStr.substring(tempStr.length - tempVowel.length, 1)\n                i\
    \ = tempStr.lastIndexOf(finalVowel)\n                if (i < 0) {\n          \
    \          i = lengthWord\n                }\n            } else {\n         \
    \       i = i + 1\n            }\n        }\n        return finalVowel", "   \
    \     if (word.isEmpty) {\n            return \"\"\n        }\n        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        var minDistance = 0\n        var index\
    \ = word.length - 1\n        while (index >= 0) {\n            val c = word.charAt(index)\n\
    \            if (vowels.contains(c)) {\n                minDistance = index -\
    \ c\n            }\n            index -= 1\n        }\n        minDistance < word.length\
    \ match {\n            case false => \"\"\n            case true => {\n      \
    \          val startIndex = minDistance - 1\n                val endIndex = minDistance\
    \ + word.charAt(minDistance).length\n                val result = word.substring(startIndex,\
    \ endIndex)\n                return result\n            }\n        }", "     \
    \   val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\",\
    \ \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\")\n        val vowelsHash = vowels.foldLeft(Map[Char,Int]())((map, char)\
    \ => map + (char -> (map.getOrElse(char, 0) + 1)));\n        val consonants =\
    \ List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val consonantsHash = consonants.foldLeft(Map[Char,Int]())((map, char)\
    \ => map + (char -> (map.getOrElse(char, 0) + 1)));\n        val vowelsCount =\
    \ vowelsHash.filter(_._2 > 0).map(_._1).length\n        val consonantsCount =\
    \ consonantsHash.filter(_._2 > 0).map(_._1).length\n\n        if (vowelsCount\
    \ == 0){\n            return \"\"\n        }\n\n        if (vowelsCount == 1){\n\
    \            return vowelsHash.maxBy(_._1)\n        }\n        if (vowelsCount\
    \ == 2){\n            return vowelsHash.maxBy(_._1).filter(_._2 > 1).head\n  \
    \      }\n\n        val consonantsVowelsCount = vowelsCount + consonantsCount\
    \ - vowelsHash.filter(_._2 > 0).map(_._1).length\n        var closestVowel = vowelsHash.maxBy(_._1)\n\
    \        if (consonantsVowelsCount > 0){\n            val difference = consonantsHash.filter(_._2\
    \ > 0).map(_._1) - vowelsHash.filter(_._2 > 0).map(_._1)\n            if (consonantsHash.filter(_._2\
    \ > 0).map(_._1) < vowelsHash.filter(_._2 > 0).map(_._1)){\n                closestVowel\
    \ = vowelsHash.maxBy(_._1)\n            }\n            val vowelIndex = (vowelsHash.filter(_._2\
    \ > 0).map(_._1) - vowelsHash.filter(_._2 > 0).map(_._1)) + consonantsHash.filter(_._2\
    \ > 0).map(_._1) - difference\n            closestVowel = vowels(vowelIndex)\n\
    \        }\n        return closestVowel", "        def getVowels(word : String)\
    \ : List[Char] = \n            word.chars.toList.filter(_ == 'a' || _ == 'e' ||\
    \ _ == 'i' || _ == 'o' || _ == 'u')\n        val vowels = getVowels(word).sort\n\
    \        (vowels.dropRight(2)).headOption.getOrElse(\"\")", "        var vowel\
    \ = word.charAt(word.length-1)\n        val vowels = \"aeiouAEIOU\".toList\n \
    \       var vowelIndex = vowels.indexOf(vowel)\n        val vowelIndex = vowels.index(vowel)\n\
    \        var vowelCount = vowels.length\n        var startVowelIndex = vowelIndex\
    \ - 1\n        var endVowelIndex = vowelIndex + vowelCount\n        var startVowel\
    \ = vowels.take(vowelIndex).toString\n        var endVowel = vowels.drop(vowelIndex).toString\n\
    \        var startVowelCount = startVowelIndex - 1\n        var endVowelCount\
    \ = startVowelIndex + startVowelCount\n        var startVowelString = vowels.take(startVowelIndex).toString\n\
    \        var endVowelString = vowels.drop(startVowelIndex).toString\n        var\
    \ endVowelCount = endVowelIndex + endVowelCount\n        \n        if (startVowelCount\
    \ < 0) {\n            val startVowelCount = startVowelIndex\n            startVowel\
    \ = vowels.take(startVowelIndex).toString\n            startVowelString = vowels.take(startVowelIndex).toString\n\
    \        }\n        if (endVowelCount < 0) {\n            val endVowelCount =\
    \ endVowelIndex\n            endVowel = vowels.drop(endVowelIndex).toString\n\
    \            endVowelString = vowels.drop(endVowelIndex).toString\n        }\n\
    \n        if (startVowelCount < endVowelCount && (vowel == vowels.take(vowelIndex)\
    \ || vowel == vowels.drop(vowelIndex)) && startVowel != endVowel) {\n        \
    \    vowel = vowels.take(vowelIndex).toString\n            vowelString = vowels.take(vowelIndex).toString\n\
    \        }\n        if (startVowelCount > endVowelCount && (vowel == vowels.take(endVowelIndex)\
    \ || vowel == vowels.drop(endVowelIndex)) && startVowel != endVowel) {\n     \
    \       vowel = vowels.take(endVowelIndex).toString\n            vowelString =\
    \ vowels.take(endVowelIndex).toString\n        }\n        if (startVowelCount\
    \ < endVowelCount && startVowel != endVowel) {\n            val startIndex = startVowelIndex\n\
    \            var endIndex = startVowelIndex + startVowelCount\n            if\
    \ (endVowelCount < startVowelCount) {\n                endIndex = startVowelIndex\
    \ + start", "        // Your code goes here\n        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n        val vowel_count =\
    \ word.count(_.toLowerCase == _)\n        if(vowel_count == 1) vowel = word.charAt(word.length-1)\n\
    \        if(vowel_count == 2) vowel = vowels.find(_.toLowerCase == word.substring(word.length-2,word.length))\n\
    \        if(vowel_count == 3) vowel = vowels.find(_.toLowerCase == word.substring(word.length-3,word.length))\n\
    \        if(vowel_count == 4) vowel = vowels.find(_.toLowerCase == word.substring(word.length-4,word.length))\n\
    \        if(vowel_count == 5) vowel = vowels.find(_.toLowerCase == word.substring(word.length-5,word.length))\n\
    \        if(vowel_count == 6) vowel = vowels.find(_.toLowerCase == word.substring(word.length-6,word.length))\n\
    \        if(vowel_count == 7) vowel = vowels.find(_.toLowerCase == word.substring(word.length-7,word.length))\n\
    \        if(vowel_count == 8) vowel = vowels.find(_.toLowerCase == word.substring(word.length-8,word.length))\n\
    \        if(vowel_count == 9) vowel = vowels.find(_.toLowerCase == word.substring(word.length-9,word.length))\n\
    \        if(vowel_count == 10) vowel = vowels.find(_.toLowerCase == word.substring(word.length-10,word.length))\n\
    \        if(vowel_count == 11) vowel = vowels.find(_.toLowerCase == word.substring(word.length-11,word.length))\n\
    \        if(vowel_count == 12) vowel = vowels.find(_.toLowerCase == word.substring(word.length-12,word.length))\n\
    \        if(vowel_count == 13) vowel = vowels.find(_.toLowerCase == word.substring(word.length-13,word.length))\n\
    \        if(vowel_count == 14) vowel = vowels.find(_.toLowerCase == word.substring(word.length-14,word.length))\n\
    \        if(vowel_count == 15) vowel = vowels.find(_.toLowerCase == word.substring(word.length-15,word.length))\n\
    \        if(vowel_count == 16) vowel = vowels.find(_.toLowerCase == word.substring(word.length-16,word.length))\n\
    \        if(vowel_count == 17) vowel = vowels.find(_.toLowerCase == word.substring(word.length-17,word.length))\n\
    \        if(vowel_count == 18) vowel = vowels.find(_.toLowerCase == word.substring(word.length-18,word.length))\n\
    \        if(vowel_count == 19) vowel = vowels.find(_.toLowerCase == word.substring(word.length-19,word.length))",
  "        val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n \
    \       val vowelsCounts = mutable.Map(\"a\" -> 0, \"e\" -> 0, \"i\" -> 0, \"\
    o\" -> 0, \"u\" -> 0, \"y\" -> 0)\n        val vowelsIndex = word.zipWithIndex.filter(_._1\
    \ != 'y').filter(_._1.toLowerCase == 'u').map(_._2).max\n        vowels.find(_.toLowerCase.contains(vowelsIndex.toString))",
  "        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowelsToRemove = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \   var i = 0\n        var j = word.length-1\n        var closestVowel = \"\"\n\
    \        while(i < j){\n            val currVowel = word.charAt(i).toLowerCase\n\
    \            if(vowels.contains(currVowel)){\n                if(closestVowel\
    \ == \"\"){\n                    closestVowel = currVowel\n                }else{\n\
    \                    val currVowelLoc = vowels.indexOf(currVowel)\n          \
    \          val closestVowelLoc = vowels.indexOf(closestVowel)\n              \
    \      val currVowelIndex = currVowelLoc+i\n                    val closestVowelIndex\
    \ = closestVowelLoc+i\n                    if(currVowelIndex < closestVowelIndex){\n\
    \                        closestVowel = currVowel\n                    }else if(currVowelIndex\
    \ > closestVowelIndex){\n                        closestVowel = closestVowel\n\
    \                    }else{\n                        closestVowel = closestVowel\n\
    \                    }\n                }\n                j -= 1\n          \
    \  }else if(consonants.contains(currVowel)){\n                j -= 1\n       \
    \     }else{\n                i += 1\n            }\n        }\n        if(closestVowel\
    \ == \"\"){\n            closestVowel = \"\"\n        }\n        closestVowel",
  "        // Your code goes here\n        if(word.length > 1) {\n            val\
    \ vowels = \"aeiouAEIOU\"\n            val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n            val vowelIndex = 0\n            val leftIndex = 0\n            val\
    \ rightIndex = word.length - 1\n            val left = word.substring(0, leftIndex)\n\
    \            val right = word.substring(rightIndex + 1)\n            val result:\
    \ String = word\n            for (consonantIndex \u2190 1 to rightIndex - 1) {\n\
    \                if (consonants.contains(left.charAt(consonantIndex))) {\n   \
    \                 val vowelIndex = consonants.indexOf(left.charAt(consonantIndex))\n\
    \                    if (vowelIndex != -1) {\n                        val leftVowelIndex\
    \ = vowels.indexOf(left.charAt(vowelIndex))\n                        val rightVowelIndex\
    \ = vowels.indexOf(right.charAt(consonantIndex))\n                        if (leftVowelIndex\
    \ != -1 && rightVowelIndex != -1) {\n                            val distance\
    \ = leftVowelIndex - rightVowelIndex\n                            if (distance\
    \ < 0)\n                                distance * -1\n                      \
    \      else if (distance == 0)\n                                \"\"\n       \
    \                     else if (distance > 0)\n                               \
    \ vowels(vowelIndex + distance)\n                        }\n                 \
    \   }\n                }\n            }\n        }\n        else\n           \
    \ \"\"", "        val vowelsSet = scala.collection.mutable.HashSet[String]()\n\
    \        for (i <- word.lastIndex+1 to word.length-1) {\n            val con =\
    \ word.charAt(i)\n            if (con == 'a' || con == 'e' || con == 'i' || con\
    \ == 'o' || con == 'u'){\n                vowelsSet += con\n            }\n  \
    \      }\n        vowelsSet.lastOption.toString.toUpper", "        val vowels\
    \ = \"AEIOUaeiou\"\n        var bestVowel : String = \"\"\n        var bestIndex\
    \ = 0\n        var curIndex = 0\n        var index = word.length\n\n        while(index\
    \ > 0) {\n            var curChar = word.charAt(index-1)\n            var curCharIndex\
    \ = index\n            while(curCharIndex > 0 && !vowels.contains(curChar)) {\n\
    \                curChar = word.charAt(curCharIndex-1)\n                curCharIndex\
    \ -= 1\n            }\n            val rightVowel = word.charAt(curCharIndex+1)\n\
    \            if(vowels.contains(rightVowel)) {\n                val leftVowel\
    \ = word.charAt(curCharIndex-1)\n                if(vowels.contains(leftVowel))\
    \ {\n                    val vowelLength = vowels.length\n                   \
    \ val bestLength = bestVowel.length\n                    if(vowelLength < bestLength)\
    \ {\n                        bestVowel = rightVowel\n                        bestIndex\
    \ = curCharIndex\n                    }\n                }\n            }\n  \
    \          index --\n        }\n\n        return bestVowel", "        val vowel\
    \ = \"AEIOUaeiou\"\n        val cons = \"BCDFGHJKLMNPQRSTVWXYZ\"\n        var\
    \ vowelIndex = word.length\n        var consonantIndex = word.length - word.length\
    \ % 2\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n  \
    \      var minIndex = 0\n        var minVowel = \"\"\n        while(vowelIndex\
    \ > 0 && consonantIndex > 0) {\n            if(vowels(word.charAt(vowelIndex -\
    \ 1)) == word.charAt(vowelIndex)) {\n                vowelIndex -= 1\n       \
    \         consonantIndex -= 1\n                minIndex += 1\n               \
    \ minVowel = word.charAt(minIndex)\n            } else {\n                if(cons(word.charAt(consonantIndex\
    \ - 1)) == word.charAt(consonantIndex)) {\n                    consonantIndex\
    \ -= 1\n                    minIndex += 1\n                    minVowel = word.charAt(minIndex)\n\
    \                } else {\n                    vowelIndex -= 1\n             \
    \       consonantIndex -= 1\n                    minIndex += 1\n             \
    \       minVowel = word.charAt(minIndex)\n                }\n            }\n \
    \       }\n        if(minIndex == 0) {\n            return \"\"\n        } else\
    \ {\n            return minVowel\n        }", "        var str = \"\"\n      \
    \  var vowels = \"aeiouAEIOU\"\n        val vowelsSet = scala.collection.mutable.Set(vowels)\n\
    \        for(i <- 0 until word.length){\n            for(x <- 0 until word.length){\n\
    \                if(i != x && !vowelsSet.contains(word.charAt(i)) && !vowelsSet.contains(word.charAt(x))){\n\
    \                    var startIndex = i\n                    var endIndex = x\n\
    \                    while(startIndex > 0 && word.charAt(startIndex-1) == word.charAt(startIndex)){\n\
    \                        startIndex -= 1\n                    }\n            \
    \        while(endIndex < word.length && word.charAt(endIndex+1) == word.charAt(endIndex)){\n\
    \                        endIndex += 1\n                    }\n              \
    \      var middleIndex = startIndex + (endIndex - startIndex) / 2;\n         \
    \           if(middleIndex < word.length && middleIndex > 1){\n              \
    \          var middleVowel = word.charAt(middleIndex);\n                     \
    \   if(vowelsSet.contains(middleVowel)){\n                            str = middleVowel\n\
    \                            break\n                        }\n              \
    \      }\n                }\n            }\n        }\n        return str", " \
    \       val vowels = \"AEIOUaeiou\".toList\n        val vowelsIndex : List[Int]\
    \ = vowels.map(word => {\n            val index : Int = word.indexOf(Character.toString(word.charAt(0)))\n\
    \            (index.toInt)\n        }).toList\n        val vowelIndex : List[Int]\
    \ = vowels.map(word => {\n            val index : Int = word.indexOf(Character.toString(word.charAt(word.length\
    \ - 1)))\n            (index.toInt)\n        }).toList\n        var currentIndex\
    \ : Int = vowelIndex(vowelsIndex(word.length - 1)) + 1\n        var nextIndex\
    \ : Int = vowelsIndex(currentIndex)\n        while(currentIndex < word.length){\n\
    \            val currentCharacter = word.charAt(currentIndex)\n            val\
    \ nextCharacter = word.charAt(nextIndex)\n            if(currentCharacter == nextCharacter){\n\
    \                currentIndex = currentIndex + 1\n            }else if(currentCharacter\
    \ == Character.toString(word.charAt(currentIndex))){\n                currentIndex\
    \ = currentIndex + 1\n            }else{\n                val diff : Int = nextIndex\
    \ - currentIndex\n                if(diff > 0){\n                    currentIndex\
    \ = nextIndex\n                    nextIndex = vowelsIndex(currentIndex)\n   \
    \             }else{\n                    nextIndex = nextIndex + 1\n        \
    \        }\n            }\n        }\n        val currentCharacter = word.charAt(currentIndex)\n\
    \        if(currentCharacter == Character.toString(word.charAt(currentIndex))){\n\
    \            return \"\"\n        }else{\n            return currentCharacter\n\
    \        }", "        // TODO: add your code here\n        val vowels = word.substring(word.length\
    \ -1).map(_.toUpperCase())\n        val consonants = word.substring(0 ,word.length-1)\n\
    \        val diff = consonants.zipWithIndex.filter(x => vowels.contains(x._2)).map(_._1\
    \ - x._2)\n        if(diff.isEmpty) {\n            return \"\"\n        } else\
    \ {\n            val min = diff.min\n            val max = (diff diff ).max\n\
    \            val index = diff.indexOf(min)\n            if(index > 0) vowels(index)\n\
    \            else \"\"\n        }", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val newWord = word.tail.filter(x => vowels.indexOf(x) > -1)\n        val\
    \ firstVowel = newWord.filter(x => vowels.indexOf(x) == vowels.lastIndexOf(x))\n\
    \        val secondVowel = newWord.filter(x => vowels.indexOf(x) == vowels.indexOf(x.toUpperCase))\n\
    \        val thirdVowel = newWord.filter(x => vowels.indexOf(x) == vowels.indexOf(x.toUpperCase().toUpperCase()))\n\
    \        if (firstVowel.length == 2 && secondVowel.length == 2 && thirdVowel.length\
    \ == 2) \"\"\n        else if (firstVowel.length == 2 && secondVowel.length ==\
    \ 2 && thirdVowel.length == 0) \"\"\n        else if (firstVowel.length == 2 &&\
    \ secondVowel.length == 2 && thirdVowel.length != 0) firstVowel.head + secondVowel.head\n\
    \        else if (firstVowel.length == 2 && secondVowel.length == 0 && thirdVowel.length\
    \ != 0) firstVowel.head + thirdVowel.head\n        else if (firstVowel.length\
    \ != 2 && secondVowel.length == 2 && thirdVowel.length != 0) secondVowel.head\
    \ + thirdVowel.head\n        else if (firstVowel.length != 2 && secondVowel.length\
    \ == 2 && thirdVowel.length == 0) secondVowel.head + thirdVowel.head\n       \
    \ else if (firstVowel.length != 2 && secondVowel.length == 2 && thirdVowel.length\
    \ == 0) thirdVowel.head\n        else \"\"", "        val letterCounts = word.map(c\
    \ => count(c)).groupBy(_._1).map(x => (x._2,x._1.head._2))\n        val maxIndexes\
    \ = letterCounts.map(_.length).max\n        var ret = \"\"\n        var maxLetterCount\
    \ = letterCounts.map(_.length).max\n        for (i <- 0 until maxIndexes ) {\n\
    \            val letterCount = letterCounts(i)\n            if (letterCount ==\
    \ maxLetterCount) {\n                val index = letterCounts(i).index\n     \
    \           val letter = word.charAt(index-1)\n                if (word.charAt(index+1).isUpperCase\
    \ || word.charAt(index+1).isLowerCase) {\n                    ret += (letter +\
    \ word.charAt(index+1))\n                }\n            }\n        }\n       \
    \ return ret", "        val vowels = \"aeiou\"\n        val vowelMap = mutable.Map[String,\
    \ String]()\n        for (letter <- word) {\n            vowelMap += letter ->\
    \ vowels\n        }\n        val vowelsCount = vowelMap.values.count(_ == vowels)\n\
    \        var closestVowel = \"\"\n        var vowelInMiddle = 0\n        for (letter\
    \ <- word.reverse) {\n            if (vowelMap.values.contains(letter)) {\n  \
    \              closestVowel = letter\n                vowelInMiddle += 1\n   \
    \         }\n            if (vowelInMiddle == vowelsCount) {\n               \
    \ return closestVowel\n            }\n        }\n        return \"\"", "     \
    \   // use mutable set data structure to find closest vowel \n        val vowelSet\
    \ = mutable.Set[String]()\n        var index = word.length -1\n        while (index\
    \ >= 0) {\n            if (word.charAt(index) == 'u' || word.charAt(index) ==\
    \ 'U') {\n                vowelSet += word.charAt(index)\n            }\n    \
    \        index--\n        }\n        var minVowel = vowelSet.toSeq.minBy(_.length)\n\
    \        val vowels = minVowel.getLength\n        if (vowels == 0) {\n       \
    \     \"\"\n        } else if (vowels == 1) {\n            minVowel\n        }\
    \ else {\n            vowelSet.toSeq.dropWhile(_.length < vowels).toSeq.minBy(_.length)\n\
    \        }", "      var vowel : String = \"\"\n      var start = 0\n      var\
    \ end = word.size - 1\n\n      while(start < end){\n        var vowelStart : Int\
    \ = word.indexOf(vowel, start)\n        var vowelEnd : Int = word.indexOf(vowel,\
    \ end)\n        if (vowelStart == -1){\n          vowel = word.charAt(end)\n \
    \         start = 0\n        }\n        else if (vowelEnd == -1){\n          vowel\
    \ = word.charAt(start)\n          end = word.size - 1\n        }\n        else{\n\
    \          vowel = word.charAt(end)\n          start = vowelEnd + 1\n        \
    \  end = word.size - 1\n        }\n      }\n      return vowel", "      val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    )\n      val vowelMap   = scala.collection.mutable.Map[Char,Int]()\n      var\
    \ startIdx = 0\n      var endIdx   = 0\n      word.zipWithIndex.foreach {\n  \
    \      case (ch, i) => vowelMap += (ch -> i)\n      }\n      vowelMap.foreach\
    \ {\n        case (ch, idx) => {\n          val nextChar = word.charAt(idx + 1)\n\
    \          if (ch == 'z') {\n            endIdx = idx\n          } else {\n  \
    \          if (vowelMap(ch) < vowelMap(nextChar)) {\n              startIdx =\
    \ idx\n            } else {\n              endIdx = idx\n            }\n     \
    \     }\n        }\n      }\n      if (startIdx == 0 && endIdx == 0) {\n     \
    \   if (word.startsWith(\"y\")) {\n          return \"\"\n        } else {\n \
    \         return \"\"\n        }\n      }\n      val lastChar = word.charAt(endIdx)\n\
    \      val lastVowel = vowelMap(lastChar)\n      if (endIdx - startIdx <= 1) {\n\
    \        \"\"\n      } else {\n        val leftVowel = word.charAt(startIdx -\
    \ 1)\n        if (lastVowel < vowelMap(leftVowel)) {\n          \"\"\n       \
    \ } else {\n          word.substring(startIdx, endIdx).mkString\n        }\n \
    \     }", "        val vowels = mutable.Array[String]()\n        val consonants\
    \ = word.filter(x => (x != \" \"))\n        consonants.map(x => (x + \"a\").headOption)\n\
    \            .filter(x => vowels.indexOf(x) == -1).map { x => (x + \"a\").headOption\
    \ } \n            .find(x => x != None).getOrElse(\"\")", "        var vowels\
    \ = \"aeiou\"\n        var vowelCount = word.filter(letter=> vowels.contains(letter)).size\n\
    \        var vowel = \"\"\n        if (vowelCount == 0){\n            return \"\
    \"\n        }\n        var vowelIndex = 0\n        var newIndex = 0\n        var\
    \ result = 0\n        while (vowelIndex < word.length){\n            var currentLetter\
    \ = word.charAt(vowelIndex)\n            if (vowels.contains(currentLetter)){\n\
    \                newIndex = vowelIndex + 1\n                if (vowelIndex + 1\
    \ < word.length){\n                    var nextLetter = word.charAt(newIndex)\n\
    \                    while (vowels.contains(nextLetter)){\n                  \
    \      newIndex = newIndex + 1\n                        if (newIndex + 1 < word.length){\n\
    \                            nextLetter = word.charAt(newIndex)\n            \
    \            }else{\n                            result = newIndex\n         \
    \                   break\n                        }\n                    }\n\
    \                }else{\n                    result = newIndex\n             \
    \   }\n            }else{\n                vowelIndex += 1\n            }\n  \
    \      }\n        if (result == 0){\n            return \"\"\n        }\n    \
    \    var vowelEndIndex = result\n        var vowelIndex = vowelEndIndex - 1\n\
    \        vowel = \"\"\n        if (vowelIndex != 0){\n            var currentLetter\
    \ = word.charAt(vowelIndex)\n            while (vowels.contains(currentLetter)){\n\
    \                if (vowelIndex + 1 < word.length){\n                    vowel\
    \ = vowel + word.charAt(vowelIndex + 1)\n                    vowelIndex += 1\n\
    \                }else{\n                    return vowel\n                }\n\
    \                currentLetter = word.charAt(vowelIndex)\n            }\n    \
    \    }\n        return vowel", "        var vowels = List(\"A\", \"E\", \"I\"\
    , \"O\", \"U\")\n        var vowelsIndex = -1\n        var vowelsLastIndex = -1\n\
    \        var vowelsIndex1 = -1\n        var vowelsLastIndex1 = -1\n        var\
    \ vowelsLastIndex2 = -1\n        var lastVowel = -1\n        var lastVowel1 =\
    \ -1\n        var lastVowel2 = -1\n        var foundFirstVowel = false\n     \
    \   var foundSecondVowel = false\n\n        var firstVowel = vowels.find(x =>\
    \ word.contains(x))\n        var secondVowel = vowels.find(x => word.contains(x))\n\
    \        var firstVowelIndex = word.indexOf(firstVowel)\n        var secondVowelIndex\
    \ = word.indexOf(secondVowel)\n\n        while (vowelsIndex == -1){\n        \
    \    vowelsIndex = vowelsIndex1 + 1\n            vowelsLastIndex = vowelsLastIndex1\n\
    \            vowelsIndex1 = word.indexOf(firstVowel, vowelsIndex + 1)\n      \
    \      vowelsLastIndex1 = word.indexOf(secondVowel, vowelsIndex1)\n\n        \
    \    if (vowelsIndex1 == -1 && vowelsIndex == -1) {\n                vowelsIndex1\
    \ = word.lastIndexOf(firstVowel)\n                vowelsLastIndex1 = word.lastIndexOf(secondVowel)\n\
    \                vowelsLastIndex2 = word.lastIndexOf(secondVowel)\n          \
    \      lastVowel = secondVowel\n                lastVowel1 = secondVowel\n   \
    \             lastVowel2 = secondVowel\n                foundSecondVowel = true\n\
    \            }\n        }\n\n        foundFirstVowel = true\n\n        if (vowelsIndex1\
    \ != -1) {\n            var vowelsIndex2 = word.indexOf(secondVowel, vowelsIndex1\
    \ + 1)\n            while (vowelsIndex2 == -1){\n                vowelsIndex2\
    \ = vowelsLastIndex2\n                vowelsLastIndex2 = word.indexOf(lastVowel2,\
    \ vowelsLastIndex2 + 1)\n\n                if (vowelsIndex2 == -1 && vowelsIndex2\
    \ == -1) {\n                    vowelsLastIndex2 = word.lastIndexOf(lastVowel2)\n\
    \                    vowelsLastIndex1 = word.lastIndexOf(lastVowel1)\n       \
    \             lastVowel2 = secondVowel\n                    lastVowel1 = firstVowel\n\
    \                    lastVowel2 = firstVowel\n                    foundFirstVowel\
    \ = true\n                    vowelsIndex = -1\n                    break\n  \
    \              }\n            }\n        }\n\n        var firstVowelToCompare\
    \ = word.substring(vowelsIndex + 1, vowelsIndex2)\n        var secondVowelToCompare\
    \ = word.substring(vowel", "        var resultSet = mutable.HashSet[String]();\n\
    \        var vowels = \"aeiou\"\n        var searchedVowel = \"\";\n        var\
    \ tempString = \"\";\n        for(i <- 0 until word.length){\n            val\
    \ c = word(i)\n            if(vowels.contains(c)){\n                resultSet.add(c)\n\
    \            }\n            else{\n                tempString = tempString.concat(c)\n\
    \            }\n        }\n        if(!resultSet.isEmpty){\n            val tempSet\
    \ = resultSet.mkString(\"_\").split(\"_\")\n            for(i <- 0 until tempSet.length){\n\
    \                val c = tempSet(i)\n                if(vowels.contains(c)){\n\
    \                    searchedVowel = vowels.indexOf(c)\n                }\n  \
    \          }\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"\
    ){\n            searchedVowel = vowels.indexOf(\"a\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedVowel = vowels.indexOf(\"e\"\
    )\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"){\n     \
    \       searchedVowel = vowels.indexOf(\"i\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedVowel = vowels.indexOf(\"o\"\
    )\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"){\n     \
    \       searchedVowel = vowels.indexOf(\"u\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedVowel = vowels.indexOf(\"y\"\
    )\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"){\n     \
    \       searchedVowel = vowels.indexOf(\"A\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedVowel = vowels.indexOf(\"E\"\
    )\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"){\n     \
    \       searchedVowel = vowels.indexOf(\"I\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedVowel = vowels.indexOf(\"O\"\
    )\n        }\n        if(!resultSet.isEmpty && searchedVowel == \"\"){\n     \
    \       searchedVowel = vowels.indexOf(\"U\")\n        }\n        if(!resultSet.isEmpty\
    \ && searchedVowel == \"\"){\n            searchedV", "        val len = word.length\n\
    \        val maxLength = len\n        val vowels = Array(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"y\");\n\n        var maxVowel : String = \"\"\n        var nextCharIndex\
    \ : Int = 0\n\n        // Traverse through word from right to left (from right\
    \ to left)\n        for (i <- len - 1 to 0 by -1)\n        {\n            // Skip\
    \ vowels found in the beginning\n            if((i >= 0) && vowels(i) match {\n\
    \                case true => {\n                    nextCharIndex = i\n     \
    \               break\n                }\n                case false => {}\n \
    \           })\n\n            // Skip vowels found in the end\n            if((i\
    \ + 1) >= len) \n            {\n                nextCharIndex = len\n        \
    \        break\n            }\n\n            val currentChar = word(i)\n\n   \
    \         // Skip vowels found in a middle character\n            if((currentChar\
    \ == 'a') || (currentChar == 'e') || (currentChar == 'i') || (currentChar == 'o')\
    \ || (currentChar == 'u'))\n            {\n                continue\n        \
    \    }\n\n            // If current character is a vowel and nextCharIndex is\
    \ not\n            // a vowel, return current character as an answer\n       \
    \     if((currentChar == 'a') && !(vowels(nextCharIndex) match {\n           \
    \     case true => {\n                    nextCharIndex = i\n                \
    \    break\n                }\n                case false => {}\n            }))\n\
    \            {\n                return currentChar.toString \n            }\n\n\
    \            // If current character is a vowel and nextCharIndex\n          \
    \  // is a vowel, compare the distance between current and next character\n  \
    \          if((currentChar == 'a' && vowels(nextCharIndex) match {\n         \
    \       case true => {\n                    nextCharIndex = i\n              \
    \      break\n                }\n                case false => {}\n          \
    \  }))\n            {\n                // If current character is closer to nextCharIndex,\
    \ \n                // return current character as an answer\n               \
    \ val currentDistance = i - nextCharIndex\n                if(currentDistance\
    \ < maxDistance)\n                {\n                    maxDistance = currentDistance\n\
    \                    maxVowel = currentChar.toString\n                }\n    \
    \        }\n        }\n\n        return maxVowel", "        val vowels = Set(\"\
    A\", \"A\", \"A\", \"A\", \"A\") +\n                        Set(\"a\", \"a\",\
    \ \"a\", \"a\", \"a\")\n        var result = \"a\"\n        var i = 0\n      \
    \  val letter = word.charAt(i).toLowerCase \n        val currentLetters = word.substring(i\
    \ + 1, word.length)\n        val index = vowels.indexOf(currentLetters.charAt(0))\n\
    \        if (index != -1) {\n            result = vowels(index)\n        }\n \
    \       return result ", "        val pattern = \"\"\"^(?=.*[aeiou])([aeiouy]+)$\"\
    \"\".r\n        var bestVowel = \"\"\n        var bestConsonant = \"\"\n     \
    \   var minVowelLength = math.min(word.length, word.length >> 1)\n        for(i\
    \ <- word.indices){\n            if(minVowelLength < word.length - i && word(i)\
    \ != \"o\" && word(i) != \"I\"){\n                val match = pattern.findFirstIn(word(i))\n\
    \                if(match == null || match.matches()){\n                    bestVowel\
    \ = word(i)\n                    bestConsonant = word(i+1).toLowerCase\n     \
    \               break\n                }else{\n                    bestVowel =\
    \ \"\"\n                    bestConsonant = word(i+1).toLowerCase\n          \
    \      }\n            }else{\n                bestVowel = \"\"\n             \
    \   bestConsonant = \"\"\n            }\n        }\n        if(bestVowel.isEmpty){\n\
    \            bestVowel = word.substring(word.length-bestVowel.length)\n      \
    \  }\n        return bestVowel", "        var index = 0\n        var vowels =\
    \ Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        var vowelsCount = vowels.size\n\
    \        var result = 0\n        var result = findClosestVowel(vowels,vowelsCount,word,index,result)\n\
    \        return result", "      var index = 0\n      var vowel = word.takeRight(2).reverse.dropRight(2).takeWhile(_\
    \ != 'a' && _ != 'e' && _ != 'i' && _ != 'o' && _ != 'u').last\n      for (i <-\
    \ word.indices) {\n        if (vowel.isPresent)\n          index = i\n      }\n\
    \      if (vowel.isEmpty) {\n        vowel = word.takeRight(2).reverse.dropRight(2).takeWhile(_\
    \ != 'a' && _ != 'e' && _ != 'i' && _ != 'o' && _ != 'u').last\n        for (i\
    \ <- word.indices) {\n          if (vowel.isPresent)\n            index = i\n\
    \        }\n      }\n      if (vowel.isEmpty)\n        return \"\"\n      return\
    \ vowel", "        var vowels = scala.collection.mutable.Set.empty[String]\n \
    \       var vowelIndex : Int = word.indexOf('u')\n        var vowelCount = 0\n\
    \        while (vowelIndex > -1) {\n            vowels = vowels + word.substring(vowelIndex\
    \ + 1, vowelIndex + 2)\n            vowelCount = vowelCount + 1\n            vowelIndex\
    \ = word.indexOf('u', vowelIndex + 1)\n        }\n        if(vowelCount != 0)\
    \ return \"\"\n        return scala.collection.immutable.Set.empty[String].last",
  "        val vowels = \"a\" #|\"e\" #|\"i\" #|\"o\" #|\"u\" #|\"A\" #|\"E\" #|\"\
    I\" #|\"O\" #|\"U\"\n        val vowelMap : mutable.Map[Character, Double] = word.sliding(2).filter(_(0)\
    \ != \"_\").map(w => (w(0), w(1)).zipped.filter(_._1 == w(0)).map(w(_)).map(c\
    \ => (vowelMap(c), c)).sortBy(_._1).reverse\n        vowelMap.values.filter(_._1\
    \ > 0).lastOption.getOrElse(\"\")", "        val vowels = List(\"a\",\"e\",\"\
    i\",\"o\",\"u\")\n        val vowels_2 = List(\"A\",\"E\",\"I\",\"O\",\"U\")\n\
    \        val vowels_3 = List(\"a\",\"e\",\"i\",\"o\",\"u\")\n        var last_vowel\
    \ = -1\n        val length = word.length\n        for(i <- 0 to (length-1) ) {\n\
    \            val c = word.charAt(i)\n            if(c == 'a') {\n            \
    \    last_vowel = 0\n            } else if(c == 'e') {\n                last_vowel\
    \ = 1\n            } else if(c == 'i') {\n                last_vowel = 2\n   \
    \         } else if(c == 'o') {\n                last_vowel = 3\n            }\
    \ else if(c == 'u') {\n                last_vowel = 4\n            }\n       \
    \     if(last_vowel != -1) {\n                val next_c = word.charAt(i+1)\n\
    \                if(vowels.contains(next_c) && vowels_2.contains(next_c) && vowels_3.contains(next_c))\
    \ {\n                    var result = (vowels.indexOf(next_c)).asInstanceOf[Int]\n\
    \                    var last = (vowels.indexOf(last_vowel)).asInstanceOf[Int]\n\
    \                    if(result.isEmpty || last.isEmpty) {\n                  \
    \      return \"\"\n                    }\n                    var diff = result.asInstanceOf[Int]\
    \ - last.asInstanceOf[Int]\n                    if(diff == 1) {\n            \
    \            return \"\"\n                    }\n                    return vowels.slice(last+1,last+1).mkString\n\
    \                }\n            }\n        }\n        return \"\"", "        val\
    \ vowels = mutable.Set[String](\"a\",\"e\",\"i\",\"o\",\"u\")\n        val vowelCount\
    \ = mutable.Map[String,Int]()\n        val vowelStarts = mutable.Map[String,Int]()\n\
    \        val vowelEnds = mutable.Map[String,Int]()\n        val length = word.length\n\
    \        for (i <- length to (length - 1)){\n            val consonants = word.substring(0,i).split(\"\
    (?!^)(?=[A-Z])\") // Split each consonant in the word on uppercase letter\n  \
    \          vowelCount.update(consonants(0),0)\n            vowelStarts.update(consonants(0),0)\n\
    \            vowelEnds.update(consonants(0),0)\n        }\n        for (i <- 0\
    \ to (length - 1)){\n            val consonants = word.substring(0,i).split(\"\
    (?!^)(?=[A-Z])\") // Split each consonant in the word on uppercase letter\n  \
    \          vowelCount.update(consonants(0),vowelCount(consonants(0)) + 1)\n  \
    \          val count = vowelCount(consonants(0))\n            val start = vowelStarts(consonants(0))\n\
    \            val end = vowelEnds(consonants(0))\n            if (count <= 1 ||\
    \ count >= 3 && vowels(count) != consonants(0)) continue\n            val count2\
    \ = vowelCount(consonants(1))\n            if (count2 <= 1 || count2 >= 3 && vowels(count)\
    \ != consonants(1)) continue\n            val start2 = vowelStarts(consonants(1))\n\
    \            val end2 = vowelEnds(consonants(1))\n            if (vowelCount(consonants(0))\
    \ + vowelCount(consonants(1)) > 3 || vowelCount(consonants(0)) + vowelCount(consonants(1))\
    \ == 0 || vowelCount(consonants(0)) + vowelCount(consonants(1)) == 1 || vowelCount(consonants(0))\
    \ + vowelCount(consonants(1)) == 2) continue\n            if (vowelCount(consonants(1))\
    \ + vowelCount(consonants(0)) > 3 || vowelCount(consonants(1)) + vowelCount(consonants(0))\
    \ == 0 || vowelCount(consonants(1)) + vowelCount(consonants(0)) == 1 || vowelCount(consonants(1))\
    \ + vowelCount(consonants(0)) == 2) continue\n            if (vowelCount(consonants(1))\
    \ + vowelCount(consonants(2)) > 3 || vowelCount(consonants(1)) + vowelCount(consonants(2))\
    \ == 0 || vowelCount(consonants(1)) + vowelCount(consonants(", "        if(word.isEmpty)\
    \ \"\"\n        else {\n            var res = \"\"\n            var vowels = Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n            var lastLetter = word(0)\n         \
    \   for(letter <- word.substring(1)) {\n                if(vowels.contains(letter))\
    \ {\n                    res = res + letter\n                }\n             \
    \   if(letter == lastLetter) {\n                    break\n                } else\
    \ {\n                    lastLetter = letter\n                }\n            }\n\
    \            return res\n        }", "        val vowels = Set(\"a\",\"e\",\"\
    i\",\"o\",\"u\")\n        var wordIndex = 0\n        val index = word.indexWhere(x\
    \ => vowels.contains(x.charAt(0)))\n        if(index != -1)\n            wordIndex\
    \ = index\n        val newWord = word.substring(wordIndex+1)\n        val newVowels\
    \ = Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        val newIndex = newWord.indexWhere(x\
    \ => newVowels.contains(x.charAt(0)))\n        if(newIndex != -1)\n          \
    \  wordIndex = newIndex\n        val newWord2 = newWord.substring(wordIndex+1)\n\
    \        newWord2.substring(0,1)", "        // Use `head` and `tail` to get the\
    \ first and last element of a list respectively\n        // `head` will give us\
    \ the first element of a list, and `tail` will give us \n        // the rest elements\
    \ of a list\n        val firstVowel = word.head \n        val lastVowel = word.tail.last\
    \ \n        \n        // Use `tail` and `init` to get the first and second elements\
    \ of a list respectively\n        // `tail` will give us the rest elements of\
    \ a list, and `init` will give us \n        // the first element of a list\n \
    \       val firstConsonant = word.tail.init \n        val lastConsonant = word.tail.tail\
    \ \n        \n        // Create a mutable variable and set it to an empty string\n\
    \        var vowelsFound = \"\"\n        // For each consonant\n        for (consonant\
    \ <- firstConsonant until lastConsonant) {\n            // If the current consonant\
    \ is an uppercase letter\n            if (consonant > 'Z') {\n               \
    \ // Iterate through each vowel in the word\n                for (vowel <- vowelsFound\
    \ until vowelsFound + lastVowel) {\n                    // If the current vowel\
    \ from the word is in the middle of the current vowel\n                    //\
    \ we found before\n                    if (vowel == vowelsFound) {\n         \
    \               // Break the loop\n                        break\n           \
    \         }\n                    // If current vowel is equal to the current consonant,\
    \ then we found a vowel\n                    // from the word that is in the current\
    \ vowel position in the word \n                    // so we return it\n      \
    \              if (vowel == consonant) {\n                        vowelsFound\
    \ += vowel\n                        break\n                    }\n           \
    \     }\n                // If the vowel was not found in the word, we append\
    \ the vowel to the vowelsFound\n                // string\n                if\
    \ (vowelsFound == \"\") {\n                    vowelsFound += vowel\n        \
    \        }\n            }\n        }\n        vowelsFound", "        //TODO: your\
    \ code here\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n        var str = \"\";\n        for(i <- 0 to word.length-1){\n         \
    \   if(vowels.contains(word.charAt(i))){\n                str = str + word.charAt(i).toLowerCase()\
    \ + word.charAt(i+1).toLowerCase();\n            }\n        }\n        return\
    \ str;", "        val words = mutable.Buffer.empty[String]\n        for (i <-\
    \ 0 to word.length - 2) {\n            if (word.charAt(i) == word.charAt(i+1))\
    \ {\n                words ++= word.substring(0,i)\n            }\n        }\n\
    \        val vowels = words.toList\n        vowels.find(word => word.matches(s\"\
    (?i)[aeiou]$\")).getOrElse(\"\")", "        val vowels = \"aeiouAEIOU\"\n    \
    \    // convert each char to it's integer representation\n        val charIntMap\
    \ = word.foldLeft(Map[Int, Int]()) { (m, c) =>\n            m + (c -> (m.getOrElse(c,\
    \ 0) + c.toInt))\n        }\n        // find all pairs with the same int value\
    \ and add one to the other value\n        val pairs = charIntMap.filter(_._2 >\
    \ 1).map(_._1).groupBy(_._1).map(_._2).sortBy(_._1).reverse\n        // iterate\
    \ through the pairs and find the first pair where the difference is 0\n      \
    \  pairs.find(_ == 0) match {\n            // if none found, return empty string\n\
    \            case Some(d) => \"\"\n            // else return first element in\
    \ the pair\n            case None => pairs.head._2\n        }", "        // find\
    \ first and last consonants\n        var lastConsonantIndex = word.indexOf(\"\
    G\") + 1\n        var firstConsonantIndex = word.indexOf(\"A\") + 1\n\n      \
    \  // make sure consonants exist\n        if(lastConsonantIndex >= firstConsonantIndex){\n\
    \            // loop through the word\n            var vowel = \"\"\n        \
    \    var consonantIndex = 0\n            for(consonantIndex = lastConsonantIndex;\
    \ consonantIndex >= firstConsonantIndex; consonantIndex--){\n                //\
    \ if the consonant is in the word return the vowel\n                if(word(consonantIndex)\
    \ != \"a\"){\n                    vowel = word(consonantIndex)\n             \
    \       lastConsonantIndex = consonantIndex\n                }\n            }\n\
    \            if(vowel != \"\"){\n                // find first and last vowels\n\
    \                var lastVowelIndex = vowel.indexOf(\"u\") + 1\n             \
    \   var firstVowelIndex = vowel.indexOf(\"i\") + 1\n                // make sure\
    \ vowels exist\n                if(lastVowelIndex >= firstVowelIndex){\n     \
    \               var closestVowel = \"\"\n                    var closestVowelIndex\
    \ = 0\n                    for(closestVowelIndex = lastVowelIndex; closestVowelIndex\
    \ >= firstVowelIndex; closestVowelIndex--){\n                        if(closestVowelIndex\
    \ > lastConsonantIndex){\n                            closestVowel = vowel(closestVowelIndex)\n\
    \                            lastVowelIndex = closestVowelIndex\n            \
    \            }\n                    }\n                    closestVowel\n    \
    \            } else {\n                    \"\"\n                }\n         \
    \   } else {\n                \"\"\n            }\n        } else {\n        \
    \    \"\"\n        }", "        var lower = word.substring(0,word.indexOf(' '));\n\
    \        var upper = word.substring(word.indexOf(' ')+1);\n        var result\
    \ = '';\n        if(lower.length == 0) {\n            return \"\";\n        }\n\
    \        for (v <- 'a' to 'z') {\n            if (lower.contains(v)) {\n     \
    \           result = v\n            }\n        }\n        if (result == ''){\n\
    \            for (v <- 'A' to 'Z') {\n                if (lower.contains(v)) {\n\
    \                    result = v\n                }\n            }\n        }\n\
    \        return result", "        var vowel : String = \"\"\n        var vowel1\
    \ : String = \"\"\n        var vowel2 : String = \"\"\n        var vowel3 : String\
    \ = \"\"\n        var vowel4 : String = \"\"\n        var vowel5 : String = \"\
    \"\n        var vowel6 : String = \"\"\n        var vowel7 : String = \"\"\n \
    \       var vowel8 : String = \"\"\n        var vowel9 : String = \"\"\n     \
    \   var vowel10 : String = \"\"\n        var vowel11 : String = \"\"\n       \
    \ var vowel12 : String = \"\"\n        var vowel13 : String = \"\"\n        var\
    \ vowel14 : String = \"\"\n        var vowel15 : String = \"\"\n        var vowel16\
    \ : String = \"\"\n        var vowel17 : String = \"\"\n        var vowel18 :\
    \ String = \"\"\n        var vowel19 : String = \"\"\n        var vowel20 : String\
    \ = \"\"\n        var vowel21 : String = \"\"\n        var vowel22 : String =\
    \ \"\"\n        var vowel23 : String = \"\"\n        var vowel24 : String = \"\
    \"\n        var vowel25 : String = \"\"\n        var vowel26 : String = \"\"\n\
    \        var vowel27 : String = \"\"\n        var vowel28 : String = \"\"\n  \
    \      var vowel29 : String = \"\"\n        var vowel30 : String = \"\"\n    \
    \    var vowel31 : String = \"\"\n        var vowel32 : String = \"\"\n      \
    \  var vowel33 : String = \"\"\n        var vowel34 : String = \"\"\n        var\
    \ vowel35 : String = \"\"\n        var vowel36 : String = \"\"\n        var vowel37\
    \ : String = \"\"\n        var vowel38 : String = \"\"\n        var vowel39 :\
    \ String = \"\"\n        var vowel40 : String = \"\"\n        var vowel41 : String\
    \ = \"\"\n        var vowel42 : String = \"\"\n        var vowel43 : String =\
    \ \"\"\n        var vowel44 : String = \"\"\n        var vowel45 : String = \"\
    \"\n        var vowel46 : String = \"\"\n        var vowel47 : String = \"\"\n\
    \        var vowel48 : String = \"\"\n        var vowel49 : String = \"\"\n  \
    \      var vowel50 : String = \"\"\n        var vowel51 : String = \"\"\n    \
    \    var vowel52 : String = \"\"\n        var vowel53 : String = \"\"\n      \
    \  var vowel54 : String = \"\"\n        var vowel55 : String = \"\"\n        var\
    \ vowel56 : String = \"\"\n        var vowel57 : String = \"\"\n        var vowel58\
    \ : String = \"\"\n        var vowel59 : String = \"\"\n        var vowel60 :\
    \ String = \"\"\n        var vowel61 : String = \"\"\n        var vowel62 : String\
    \ = \"\"\n        var vowel63 : String = \"\"\n        var vowel64 : String =\
    \ \"\"\n        var vowel65 : String = \"\"\n        var vowel66 : String = \"\
    \"\n        var vowel67 : String = \"\"\n        var vowel68 : String = \"\"\n\
    \        var vowel69 : String = \"\"\n        var vowel70 : String = \"\"\n  \
    \      var vowel71 : String = \"\"\n        var vowel72 : String = \"\"\n    \
    \    var vowel73 : String = \"\"\n        var ", "        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val resultList = mutable.ArrayBuffer.empty[String]\n\
    \        val reversedWord = word.reverse\n        for (i <- 0 until reversedWord.length)\
    \ {\n            if (vowels.contains(reversedWord(i))) {\n                val\
    \ index = reversedWord.length - i - 1\n                val lastVowel = vowels(index)\n\
    \                if (index > 0) {\n                    if (vowels(index - 1) !=\
    \ lastVowel) {\n                        val tempReversedWord = reversedWord.substring(0,\
    \ index) + lastVowel + reversedWord.substring(index + 1)\n                   \
    \     resultList += getClosestVowel(tempReversedWord)\n                    }\n\
    \                }\n            }\n        }\n        if (resultList.isEmpty)\
    \ {\n            \"\"\n        } else {\n            val res = resultList.max\n\
    \            res\n        }", "        var count = 0\n        var vowel = \"a\"\
    \n        var vowelEnd = \"o\"\n        var firstVowel : Char = \"a\"\n      \
    \  var secondVowel : Char = \"o\"\n        var consonant = \"b\"\n        var\
    \ charList = new Array[Char](word.length)\n        charList.fill(0)\n        charList.foreach(x\
    \ => charList(x) = word.charAt(x))\n        var firstVowelIndex: Int = word.indexOfChar(vowel)\n\
    \        var secondVowelIndex: Int = word.indexOfChar(vowelEnd)\n        var thirdVowelIndex:\
    \ Int = 0\n        var fourthVowelIndex: Int = 0\n        var fifthVowelIndex:\
    \ Int = 0\n        var sixthVowelIndex: Int = 0\n        while(firstVowelIndex\
    \ != -1){\n            if(firstVowelIndex <= secondVowelIndex){\n            \
    \    firstVowelIndex = word.indexOfChar(vowel, firstVowelIndex + 1)\n        \
    \    }\n            else{\n                firstVowelIndex = word.indexOfChar(vowel,\
    \ firstVowelIndex - 1)\n            }\n        }\n        while(secondVowelIndex\
    \ != -1){\n            if(secondVowelIndex <= thirdVowelIndex){\n            \
    \    secondVowelIndex = word.indexOfChar(vowel, secondVowelIndex + 1)\n      \
    \      }\n            else{\n                secondVowelIndex = word.indexOfChar(vowel,\
    \ secondVowelIndex - 1)\n            }\n        }\n        while(thirdVowelIndex\
    \ != -1){\n            if(thirdVowelIndex <= fourthVowelIndex){\n            \
    \    thirdVowelIndex = word.indexOfChar(vowel, thirdVowelIndex + 1)\n        \
    \    }\n            else{\n                thirdVowelIndex = word.indexOfChar(vowel,\
    \ thirdVowelIndex - 1)\n            }\n        }\n        while(fourthVowelIndex\
    \ != -1){\n            if(fourthVowelIndex <= fifthVowelIndex){\n            \
    \    fourthVowelIndex = word.indexOfChar(vowel, fourthVowelIndex + 1)\n      \
    \      }\n            else{\n                fourthVowelIndex = word.indexOfChar(vowel,\
    \ fourthVowelIndex - 1)\n            }\n        }\n        while(fifthVowelIndex\
    \ != -1){\n            if(fifthVowelIndex <= sixthVowelIndex){\n             \
    \   fifthVowelIndex = word.indexOfChar(vowel, fifthVowelIndex + 1)\n         \
    \   }\n            else{\n                fif", "        def getVowels(word :\
    \ String) : List[String] = {\n            val vowels = List(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n            val nonvowels = word.filter(!vowels.contains)\n \
    \           nonvowels.toList\n        }\n        val vowels = getVowels(word)\n\
    \        vowels.maxBy { case vowel => word.lastIndexOf(vowel) }", "        val\
    \ vowelList = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantList\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        var result = \"\"\n        // go through each consonant in the word\n\
    \        for (c <- consonantList) {\n            // loop through each vowel in\
    \ the word from right side and find if it is the closest vowel\n            for\
    \ (v <- vowelList) {\n                // if current vowel is closer to current\
    \ consonant than previous, then store it as the result\n                if(word.indexOf(c)\
    \ > word.indexOf(v)){\n                    result = v\n                }\n   \
    \         }\n        }\n        result", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val vowelCount = word.foldLeft(Map.empty[Int, Int]){\n  \
    \          case (m, c) =>\n                val index = vowels.find(_.toString\
    \ == c).map(_.toInt).getOrElse(0)\n                m(index) += 1\n           \
    \     m\n        }\n        val index = vowelCount.keys.max\n        if(index\
    \ == 0) \"\"\n        else vowels(index)", "        val vowels = \"aAbBcCdDfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    .toUpperCase\n        val vowelsWithA = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    .toUpperCase\n        val vowelsWithA = vowelsWithA.reverse\n        val vowelsWithA\
    \ = vowelsWithA.dropRight(vowelsWithA.length-1)\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        var consonantIndex = 0\n      \
    \  var vowelIndex = 0\n        var vowel = \"\"\n        word.foldRight(\"\")\
    \ { (vowel,c) =>\n            if(vowels.contains(c)) {\n                vowelIndex\
    \ = vowel.indexOf(c)\n                if(vowelIndex > -1) {\n                \
    \    lastVowelIndex = vowelIndex\n                    lastConsonantIndex = consonantIndex\n\
    \                } else {\n                    lastConsonantIndex = consonantIndex\n\
    \                }\n                consonantIndex += 1\n            } else {\n\
    \                lastVowelIndex = consonantIndex\n                consonantIndex\
    \ += 1\n            }\n            \n            if(consonantIndex < lastConsonantIndex)\
    \ {\n                vowel += c\n            }\n        }\n        if(lastVowelIndex\
    \ >= 0 && lastConsonantIndex >= 0) {\n            val consonants = word.substring(0,lastConsonantIndex)\n\
    \            val vowels = word.substring(lastVowelIndex,lastConsonantIndex+1)\n\
    \            val vowel = vowels.indexOf(vowels.toUpperCase)\n            val vowelIndex\
    \ = vowel.orElse(vowels.length)\n            if(vowelIndex > 0) {\n          \
    \      vowel = vowels(vowelIndex)\n            } else {\n                vowel\
    \ = \"\"\n            }\n        }\n        vowel", '        // code here', " \
    \       val vowels = List('a','e','i','o','u')\n        val vowelsMap = vowels.toMap\n\
    \        val list = word.substring(1)\n        if (list.length == 1) \"\"\n  \
    \      else list.substring(list.length-2).map(vowelsMap(_)).min(math.abs(_ - vowelsMap('e')))",
  "        var vowel = word.last\n        var minDistance = math.Int.MaxValue\n  \
    \      var newWord = word\n        for(v <- newWord.reverse) {\n            if(vowel\
    \ == \"a\" || vowel == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"\
    u\" || vowel == \"A\" || vowel == \"E\" || vowel == \"I\" || vowel == \"O\" ||\
    \ vowel == \"U\"){\n                if(math.abs(vowel.toString.length - v.toString.length)\
    \ < minDistance){\n                    minDistance = math.abs(vowel.toString.length\
    \ - v.toString.length)\n                    vowel = v\n                }\n   \
    \         }\n        }\n        if(minDistance == math.Int.MaxValue){\n      \
    \      vowel = \"\"\n        }\n        return vowel", "        val letters =\
    \ word.split(\"\").toList\n        val vowels = List(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\")\n        val consonants = letters.toSet.toList.filter(letter =>\
    \ letter !='z')\n        val vowelsMap = vowels.toList.toMap.withDefaultValue(0)\n\
    \        val consonantsMap = consonants.toList.toMap.withDefaultValue(0)\n   \
    \     var closest = consonants.last\n        var min = Integer.MAX_VALUE\n   \
    \     for(letter <- letters) {\n            if(vowelsMap(letter) < min && consonantsMap(letter)\
    \ < min) {\n                min = vowelsMap(letter)\n                closest =\
    \ letter\n            }\n        }\n        if(letters.last == closest) {\n  \
    \          closest\n        } else {\n            \"\"\n        }", "        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelArray = vowels.toArray\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantArray = consonants.toArray\n    \
    \    val index = word.length -1\n        if(index < 0)\n            return \"\"\
    \n        val vowelMatch = word.charAt(index).toLowerCase match {\n          \
    \  case \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => true\n            case _    \
    \                   => false\n        }\n        if(vowelMatch)\n            return\
    \ \"\"\n        val consonantMatch = word.charAt(index).toLowerCase match {\n\
    \            case \"b\" | \"c\" | \"d\" | \"f\" | \"g\" | \"h\" | \"j\" | \"k\"\
    \ | \"l\" | \"m\" | \"n\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"v\" | \"\
    w\" | \"x\" | \"y\" | \"z\" => true\n            case _                      \
    \           => false\n        }\n        if(consonantMatch)\n            return\
    \ \"\"\n        val vowelIndex = index % vowelArray.length\n        val consonantIndex\
    \ = index % consonantArray.length\n        var closestVowel = \"\"\n        val\
    \ currentVowel = vowelArray(vowelIndex)\n        val currentConsonant = consonantArray(consonantIndex)\n\
    \        closestVowel = currentVowel +\n            if(currentVowel == \"u\" &&\
    \ currentConsonant == \"e\")\n                closestVowel + currentVowel +\n\
    \                if(currentVowel == \"o\" && currentConsonant == \"u\")\n    \
    \                closestVowel + currentVowel +\n                    closestVowel\
    \ + currentVowel +\n                    if(currentVowel == \"e\" && currentConsonant\
    \ == \"o\")\n                        closestVowel + currentVowel +\n         \
    \               if(currentVowel == \"e\" && currentConsonant == \"a\")\n     \
    \                       closestVowel + currentVowel +\n                      \
    \      closestVowel + currentVowel +\n                            closestVowel\
    \ + currentVowel +\n                            closestVowel + currentVowel +\n\
    \                            closestVowel + currentVowel +\n                 \
    \           closestVowel + currentVowel +\n                            closestVowel\
    \ + currentVowel +\n                            closestVowel + currentVowel +\n\
    \                            closestVowel + currentV", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val result = word.map( c => vowels.indexOf(\
    \ c.toLowerCase.toUpperCase )).min\n\n        if (result == -1){\n           \
    \ return \"\"\n        }\n        else{\n            return vowels(result)\n \
    \       }", "        val vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        val vowelSet2 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n\
    \        val consonantSet = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        val consonantSet2 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonants1 = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonants2\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n   \
    \     val consonantSet3 = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        val consonantSet4 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonantSet5 = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonantSet6\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n   \
    \     val consonantSet7 = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        val consonantSet8 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonantSet9 = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val consonant",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        def\
    \ getClosestVowel2(w: List[String]): (String, Int) = {\n            if (w.isEmpty)\
    \ return (\"\", -1)\n            def getClosestVowel3(w: List[String], i : Int,\
    \ j : Int): (String, Int) = {\n                val k = (w.size - 1 - i)\n    \
    \            val l = (w.size - 1 - j)\n                if (k == -1 || l == -1)\
    \ return(\"\", -1)\n                val vowel = vowels(k % w.size)\n         \
    \       val newWord = w.filter( x => x != vowel).toList\n                getClosestVowel3(newWord,\
    \ k, l)\n            }\n            val list = (w.size - 1).toString.toCharArray\n\
    \            (getClosestVowel3(list, 0, list.length - 1), vowels.indexOf(vowel))\n\
    \        }\n        getClosestVowel2(word)._1", "        var vowels : Seq[String]\
    \ = Seq.empty\n        var firstVowelIndex = word.indexOf(\"a\")\n        var\
    \ lastVowelIndex = word.lastIndexOf(\"a\")\n        var vowelsCount = word.count(\"\
    a\")\n        val vowelsMap : Map[String, Int] = Map(\"a\" -> 0, \"e\" -> 1, \"\
    i\" -> 2, \"o\" -> 3, \"u\" -> 4)\n        var maxVowelIndex : Int = -1\n    \
    \    var maxVowelValue : Int = 0\n        var currentVowel : String = \"\"\n \
    \       var currentVowelValue : Int = 0\n        var currentCount : Int = 0\n\
    \        for(i <- 0 until firstVowelIndex) currentVowel += word(i)\n        for(j\
    \ <- firstVowelIndex until lastVowelIndex) currentVowel += word(j)\n        for(i\
    \ <- 0 until lastVowelIndex) currentVowel += word(i)\n        for(j <- lastVowelIndex\
    \ to word.size ) currentVowel += word(j)\n        for(v <- vowelsMap.values) currentVowelValue\
    \ += v\n        for(i <- 0 until vowelsCount) currentCount += vowelsMap.get(vowels(i))\n\
    \        for(i <- 0 until vowelsCount) {\n            currentVowelValue += vowelsMap.get(vowels(i))\n\
    \            if(currentVowelValue > maxVowelValue) {\n                maxVowelValue\
    \ = currentVowelValue\n                maxVowelIndex = i\n            }\n    \
    \    }\n        return vowels(maxVowelIndex)", "        val vowelMap = new HashMap[Char,\
    \ Int]()\n        vowelMap ++= (\"A\".toInt -> 1)\n        vowelMap ++= (\"E\"\
    .toInt -> 1)\n        vowelMap ++= (\"I\".toInt -> 1)\n        vowelMap ++= (\"\
    O\".toInt -> 1)\n        vowelMap ++= (\"U\".toInt -> 1)\n        vowelMap ++=\
    \ (\"a\".toInt -> 1)\n        vowelMap ++= (\"e\".toInt -> 1)\n        vowelMap\
    \ ++= (\"i\".toInt -> 1)\n        vowelMap ++= (\"o\".toInt -> 1)\n        vowelMap\
    \ ++= (\"u\".toInt -> 1)\n        vowelMap ++= (\"Y\".toInt -> 1)\n        vowelMap\
    \ ++= (\"y\".toInt -> 1)\n        vowelMap.values.min match {\n            case\
    \ Some(value) => word.reverse.charAt(word.length - value.toString.length) + word.reverse.charAt(word.length\
    \ - value.toString.length)\n            case None => \"\"\n        }", "     \
    \   var vowels = Set(\"\" +  \"A\" + \"\" +  \"E\" + \"\" +  \"I\" + \"\" +  \"\
    O\" + \"\" +  \"U\" + \"\")\n        var vowelCount = 0 \n        var vowelsRight\
    \ = \"\"\n        var vowelsLeft = \"\"\n        var currentVowel = \"\"\n   \
    \     var currentVowelIndex = -1\n        for ( i <- 0 until word.length ) {\n\
    \            var ch = word.charAt(i)\n            vowelsRight += ch\n        \
    \    vowelsLeft += ch\n            vowelCount += 1 \n            if ( ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                currentVowelIndex\
    \ = i\n                currentVowel = ch\n            }\n        }\n        var\
    \ i = 0\n        for ( i <- 0 until vowelsRight.length ) {\n            var j\
    \ = 0\n            for ( j <- 0 until vowels.length ) {\n                if (\
    \ vowelsRight.charAt(i) == vowels.charAt(j) ) {\n                    vowelsRight\
    \ += vowels.charAt(j)\n                    vowelCount -= 1\n                 \
    \   if (vowelCount == 0) {\n                        return vowelsRight\n     \
    \               }\n                }\n                j += 1\n            }\n\
    \            i += 1\n        }\n        return vowelsRight", "        var best\
    \ = 0\n        var bestVowel = \"\"\n        var currentVowel = \"\"\n       \
    \ var lastVowel = \"\"\n        var currentScore = 0\n        var isVowel = false\n\
    \        var consonants = (\"bcdfghjklmnpqrstvwxyz\")\n        for(i <- 0 until\
    \ word.length-1) {\n            if (word(i) ==: \"a\" || word(i) ==: \"e\" ||\
    \ word(i) ==: \"i\" || word(i) ==: \"o\" || word(i) ==: \"u\" || word(i) ==: \"\
    A\" || word(i) ==: \"E\" || word(i) ==: \"I\" || word(i) ==: \"O\" || word(i)\
    \ ==: \"U\" || word(i) ==: \"a\" || word(i) ==: \"e\" || word(i) ==: \"i\" ||\
    \ word(i) ==: \"o\" || word(i) ==: \"u\") {\n                currentScore = 0\n\
    \                lastVowel = word(i)\n                isVowel = true\n       \
    \     } else if(word(i) ==: \"z\" || word(i) ==: \"Z\") {\n                currentScore\
    \ = -1\n                lastVowel = word(i)\n                isVowel = false\n\
    \            }\n            if (isVowel) {\n                currentScore = currentScore\
    \ + 1\n            } else {\n                currentScore = currentScore - 1\n\
    \            }\n            \n            val newScore = currentScore*2\n    \
    \        if (newScore > best) {\n                best = newScore\n           \
    \     bestVowel = lastVowel\n            }\n        }\n        return bestVowel",
  "        var vowel : String = \"\"\n        val vowels = Array(\"a\",\"e\",\"i\"\
    ,\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n        for (i <- word.lastIndex\
    \ until word.length-1){\n            if (vowels.contains(word.charAt(i))){\n \
    \               vowel = vowel + word.charAt(i)\n            }\n        }\n   \
    \     if (vowel.length==0) {\n            return \"\"\n        }\n        return\
    \ vowel", "        if(word.contains(\"a\") && word.contains(\"e\") && word.contains(\"\
    i\") && word.contains(\"o\") && word.contains(\"u\") && word.contains(\"y\") &&\
    \ word.contains(\"g\") && word.contains(\"r\") && word.contains(\"t\") && word.contains(\"\
    b\")) {\n            //return \n            val vowelsIndexes: mutable.ArrayBuffer[Int]\
    \ = mutable.ArrayBuffer(-1, word.length-1)\n            var vowelIndex = 0\n \
    \           var currentVowelIndex = 0\n            var currentConsonantIndex =\
    \ 0\n            while(vowelIndex < word.length) {\n                if(vowelsIndexes.length\
    \ == 0 || vowelsIndexes.lastOption.isEmpty) {\n                    currentVowelIndex\
    \ = currentVowelIndex + 1\n                } else {\n                    currentConsonantIndex\
    \ = currentConsonantIndex + 1\n                }\n                if(vowelsIndexes(currentVowelIndex)\
    \ == currentConsonantIndex) {\n                    vowelIndex = vowelIndex + 1\n\
    \                    currentVowelIndex = currentVowelIndex + 1\n             \
    \   } else {\n                    currentConsonantIndex = currentConsonantIndex\
    \ + 1\n                }\n            }\n            return word.substring(currentVowelIndex+1,\
    \ word.length-1)\n        }\n        \"\"", "      var index = 0;\n      var leftVowel\
    \ = Set.empty[String]\n      var rightVowel = Set.empty[String]\n      var length\
    \ = word.length\n      while (index != length-1) {\n        val mid = (index+length)/2\n\
    \        if(word.charAt(mid) == 'A'|| word.charAt(mid) == 'a'){\n          leftVowel\
    \ +=  word.substring(mid, mid+1)\n        } else if (word.charAt(mid) == 'O'||\
    \ word.charAt(mid) == 'o'){\n          rightVowel += word.substring(mid, mid+1)\n\
    \        }\n        index = mid + 1\n      }\n      var vowel = Set.empty[String]\n\
    \      if(leftVowel.isEmpty){\n        vowel = rightVowel\n      }\n      else\
    \ {\n        vowel = leftVowel ++ rightVowel\n      }\n      vowel.toList.last",
  "        val vowel = \"a\" :: \"e\" :: \"i\" :: \"o\" :: \"u\" :: Nil\n        val\
    \ vowel1 = vowel.sorted\n        val vowel2 = vowel.sortBy(_.toString.toInt)\n\
    \        val vowel3 = vowel1.drop(vowel.size)\n        val vowel4 = vowel2.drop(vowel2.size)\n\
    \        val vowel5 = vowel3.drop(vowel3.size)\n        val vowel6 = vowel4.drop(vowel4.size)\n\
    \        val vowel7 = vowel5.drop(vowel5.size)\n        val vowel8 = vowel6.drop(vowel6.size)\n\
    \        val vowel9 = vowel7.drop(vowel7.size)\n        val vowel10 = vowel8.drop(vowel8.size)\n\
    \        val vowel11 = vowel9.drop(vowel9.size)\n        val vowel12 = vowel10.drop(vowel10.size)\n\
    \        val vowel13 = vowel11.drop(vowel11.size)\n        val vowel14 = vowel12.drop(vowel12.size)\n\
    \        val vowel15 = vowel13.drop(vowel13.size)\n        val vowel16 = vowel14.drop(vowel14.size)\n\
    \        val vowel17 = vowel15.drop(vowel15.size)\n        val vowel18 = vowel16.drop(vowel16.size)\n\
    \        val vowel19 = vowel17.drop(vowel17.size)\n        val vowel20 = vowel18.drop(vowel18.size)\n\
    \        val vowel21 = vowel19.drop(vowel19.size)\n        val vowel22 = vowel20.drop(vowel20.size)\n\
    \        val vowel23 = vowel21.drop(vowel21.size)\n        val vowel24 = vowel22.drop(vowel22.size)\n\
    \        val vowel25 = vowel23.drop(vowel23.size)\n        val vowel26 = vowel24.drop(vowel24.size)\n\
    \        val vowel27 = vowel25.drop(vowel25.size)\n        val vowel28 = vowel26.drop(vowel26.size)\n\
    \        val vowel29 = vowel27.drop(vowel27.size)\n        val vowel30 = vowel28.drop(vowel28.size)\n\
    \        val vowel31 = vowel29.drop(vowel29.size)\n        val vowel32 = vowel30.drop(vowel30.size)\n\
    \        val vowel33 = vowel31.drop(vowel31.size)\n        val vowel34 = vowel32.drop(vowel32.size)\n\
    \        val vowel35 = vowel33.drop(vowel33.size)\n        val vowel36 = vowel34.drop(vowel34.size)\n\
    \        val vowel37 = vowel35.drop(vowel35.size)\n        val vowel38 = vowel36.drop(vowel36.size)\n\
    \        val vowel39 = ", "        val vowels = List(\"u\",\"a\",\"i\",\"e\",\"\
    o\",\"u\")\n        var lower = word.foldLeft(true)((v,c) => v && c.isLetter)\n\
    \        if (lower) {\n            val lowerToUpper = word.map(_.toUpperCase)\n\
    \            val lowerToUpperIter = lowerToUpper.iterator\n            while (lowerToUpperIter.hasNext)\
    \ {\n                val candidate = lowerToUpperIter.next()\n               \
    \ val candidateUpper = candidate.toUpperCase\n                val foundVowel =\
    \ vowels.forall(_.equals(candidateUpper))\n                if (foundVowel) {\n\
    \                    return candidate\n                }\n            }\n    \
    \    }\n        return \"\"", "        var vowels = mutable.Set.empty[String]\n\
    \        var i = 0\n        for (i <- 1 to word.length-1) {\n            if (word.charAt(i)\
    \ == 'a'  || word.charAt(i) == 'e'  || word.charAt(i) == 'i' || word.charAt(i)\
    \ == 'o' || word.charAt(i) == 'u' ) {\n                vowels += word.substring(i,\
    \ i+1)\n            }\n        }\n        if (vowels.nonEmpty) {\n           \
    \ return vowels.min\n        }\n        return \"\"", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelList = vowels.toList\n\
    \        val vowelIndex = word.lastIndexOfAny(vowelList)\n        val lowerString\
    \ = word.substring(0, vowelIndex)\n        val upperString = word.substring(vowelIndex\
    \ + 1)\n        var result = \"\"\n        var i = 0\n        for(letter <- lowerString)\
    \ {\n            val index = upperString.indexOf(letter)\n            val nextLetter\
    \ = upperString(index + 1)\n            val nextLetterIndex = upperString.indexOf(nextLetter)\n\
    \            if(index < vowelIndex && nextLetterIndex > vowelIndex) {\n      \
    \          result = letter\n                i = index + 1\n            }\n   \
    \     }\n        result", "        var closest = \"\"\n        val vs = vowel\n\
    \        val ps = consonants\n        val w = word\n        // iterate over consonants\n\
    \        for (c <- ps) {\n            // iterate over vowel\n            for (i\
    \ <- vs) {\n                // find minimum distance between c and i\n       \
    \         val minDiff = math.min(c.length(), i.length())\n                // use\
    \ sliding window to find the next vowel \n                // until a consonant\
    \ found\n                val consonantsWithVowel = w.sliding(minDiff)\n      \
    \          // try to find any vowel in the window \n                // that is\
    \ in the right position\n                val vowelsInWindow = consonantsWithVowel.find(_\
    \ == i)\n                // if the window has a vowel \n                // and\
    \ is in the right position\n                if (vowelsInWindow.nonEmpty && vowelsInWindow.last.charAt(minDiff)\
    \ == c) {\n                    closest = (closest match {\n                  \
    \      case \"\" => i\n                        case _ => i\n                 \
    \   })\n                }\n            }\n        }\n        closest", "     \
    \ var vowels: List[String] = Nil\n      var vowelsSet: Set[String] = Nil\n   \
    \   \n      for (i <- 0 until word.length-1) {\n        for (j <- 0 until word.length\
    \ - 1 - i){\n          if (word.charAt(i) == word.charAt(j + 1)){\n          \
    \  vowelsSet += word.charAt(j)\n          }\n        }\n      }\n      \n    \
    \  if (vowelsSet.isEmpty){\n        return \"\"\n      }\n      for (vowel <-\
    \ vowelsSet){\n        if (vowels.contains(vowel)){\n          return vowel\n\
    \        }\n      }\n      \n      return \"\"", "        //TODO: Fill in the\
    \ function\n        var vowels = word.filter(_.isLetter)\n        vowels = vowels.map(_.toUpperCase)\n\
    \        vowels = vowels.toArray\n        var res = vowels.min((x,y)=> x.toString.indexOf(y).toString)\n\
    \        res.isEmpty\n            ? \"\"\n            : res", "        var currentVowel\
    \ = word.lastIndexOf(vowel)\n        if (currentVowel == -1 || currentVowel ==\
    \ word.length-1) return \"\"\n        val firstConsonant = word.substring(0, currentVowel+1)\n\
    \        var vowelsCount = 0\n        for(i <- 0 to currentVowel) {\n        \
    \    val currentConsonant = word.substring(currentVowel, i+1)\n            vowelsCount\
    \ += vowelsMap.contains(currentConsonant)\n        }\n        if (vowelsCount\
    \ > 1) currentVowel = word.lastIndexOf(vowel)\n        if (vowelsCount > 2) currentVowel\
    \ = word.lastIndexOf(vowel2)\n        if (vowelsCount > 3) currentVowel = word.lastIndexOf(vowel3)\n\
    \        if (vowelsCount > 4) currentVowel = word.lastIndexOf(vowel4)\n      \
    \  if (vowelsCount > 5) currentVowel = word.lastIndexOf(vowel5)\n        if (vowelsCount\
    \ > 6) currentVowel = word.lastIndexOf(vowel6)\n        if (vowelsCount > 7) currentVowel\
    \ = word.lastIndexOf(vowel7)\n        if (vowelsCount > 8) currentVowel = word.lastIndexOf(vowel8)\n\
    \        if (vowelsCount > 9) currentVowel = word.lastIndexOf(vowel9)\n      \
    \  word.substring(currentVowel)", "        val vowels = mutable.Set.empty[Char]\n\
    \        for (i <- 0 until word.length - 1) {\n            val c = word.charAt(i)\n\
    \            val l = c to word.charAt(i + 1)\n            vowels ++= l\n     \
    \   }\n        vowels.toList.sortWith( (x,y) => x < y ).lastOption", "       \
    \ val vowels = List(\"a\",\"e\",\"i\",\"o\",\"u\")\n        val arr = Array(\"\
    y\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"\
    z\")\n        var start = 0\n        var end = word.length\n\n        while (start\
    \ < end){\n            var vowel = \"\"\n            for(i <- start until end){\n\
    \                vowel += arr(i).toLowerCase + arr(i +1)\n            }\n    \
    \        vowel = vowel.substring(1, vowel.length)\n            if(vowels.exists(x\
    \ => vowel == x)){\n                return vowel\n            }\n            start\
    \ += 1\n        }\n        return \"\"", "        // get last 2 consonants to\
    \ get 'y'\n        var consonants = word.last\n        for( i <- 0 until word.length-1\
    \ ){\n            if(consonants == 'c') consonants = word.last\n            else\
    \ consonants = word.last\n        }\n        // get last vowel in the word\n \
    \       var vowels = word.last\n        // if the word's last letter is consonants,\
    \ find the consonants that stands between the right side of the word\n       \
    \ for( i <- 0 until word.length-1 ){\n            if( word.last.equals('c') ){\n\
    \                vowels = word.last\n                // if the right side of the\
    \ word is a consonant, find the vowels that stands between the left side of the\
    \ word \n                for( i <- 0 until word.length-1 ){\n                \
    \    if( word.last.equals('c') ){\n                        vowels = word.last\n\
    \                    }\n                }\n            }\n        }\n        //\
    \ if there is no vowel, return an empty string\n        if( vowels == \"\" ){\n\
    \            return \"\"\n        }\n        // get vowel count between right\
    \ side and left side of the word\n        val vowelCount = word.count( c => c.equals(vowels)\
    \ )\n        // if vowel count is less than 3, return an empty string\n      \
    \  if( vowelCount < 3 ){\n            return \"\"\n        }\n        // loop\
    \ through the vowels and check which vowel has the least count among all vowels\n\
    \        var vowelWithLowestCount = \"\"\n        var temp = \"\"\n        for(\
    \ i <- 0 until vowels.length ){\n            temp = vowels(i)\n            val\
    \ vowelCount = word.count( c => c.equals(temp) )\n            if( vowelCount <\
    \ vowelWithLowestCount ){\n                vowelWithLowestCount = temp\n     \
    \       }\n        }\n        // return the vowel with the lowest count\n    \
    \    return vowelWithLowestCount", "        if(word.length == 0) \"\"\n      \
    \  else if(word.length == 1) \"\"\n        else if(word.charAt(word.length - 1)\
    \ == word.charAt(0)) \"\"\n        else word.last.init.toString.last.init", " \
    \       val vowels = \"aeiouAEIOU\".toSet\n        val words = word.dropRight(2).map\
    \ { x => x.toLower }\n        val vowelsMap = words.sliding(2).flatMap(x => vowels.intersect(x.flatMap(y\
    \ => vowels.contains(y)))).distinct\n        val index = vowelsMap.indexOf(vowels.minBy(x\
    \ => Math.abs(vowelsMap.length - 1 - x)).get)\n        if(index < 0) \"\"\n  \
    \      else word.takeRight(2).drop(index)", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val vowel = word.substring(word.length - 1).map(c\
    \ => vowels contains c.toLowerCase && c != \" \")\n        if(vowel.nonEmpty)\n\
    \            vowel.headOption.getOrElse(\"\")\n        else\n            \"\"",
  "        val vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\")\n        val lowerSet = Set(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val upperSet = Set(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"\
    H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"\
    S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val wordSet = Set(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        var currentVowel : Option[String] = None\n\
    \        var currentLower : Option[String] = None\n        var currentUpper: Option[String]\
    \ = None\n        var currentWord: Option[String] = None\n\n        var nextLower:\
    \ Option[String] = None\n        var nextUpper: Option[String] = None\n      \
    \  var nextWord: Option[String] = None\n\n        var prevLower: Option[String]\
    \ = None\n        var prevUpper: Option[String] = None\n        var prevWord:\
    \ Option[String] = None\n\n        var nextVowel: Option[String] = None\n    \
    \    var nextWordSet: Option[String] = None\n        var nextVowelSet: Option[String]\
    \ = None\n        var prevWordSet: Option[String] = None\n\n        val wordSetSet\
    \ = word.toSet.toSet\n        for (char <- word.dropRight(1)) {\n            currentLower\
    \ = if (lowerSet.contains(char)) Some(lowerSet(word.lastIndexOf(char)))\n    \
    \        else currentLower\n\n            currentUpper = if (upperSet.contains(char))\
    \ Some(upperSet(word.lastIndexOf(char)))\n            else currentUpper\n\n  \
    \          currentWord = if (wordSet.contains(char)) Some(wordSet(word.lastIndexOf(char)))\n\
    \            else currentWord\n\n            currentVowel = if (vowelSet.contains(char))\
    \ Some(vowelSet(word.lastIndexOf(char)))\n            else currentVowel\n\n  \
    \          prevLower = if (lowerSet.contains(char)) Some(lowerSet(word.lastIndexOf(char)))\n\
    \            else prevLower\n\n            prevUpper = if (upperSet.contains(char))\
    \ Some(upperSet(word.lastIndexOf(char)))\n            else prevUpper\n\n     \
    \       prevWord = if (wordSet.contains(char)) Some(wordSet(word.lastIndexOf(char)))\n\
    \            else prevWord\n\n            prev", "        var count = 0\n    \
    \    var vowels = List(\"a\",\"e\",\"i\",\"o\",\"u\")\n        var vowelsUpper\
    \ = List(\"A\",\"E\",\"I\",\"O\",\"U\")\n        var vowelsLower = List(\"a\"\
    ,\"e\",\"i\",\"o\",\"u\")\n        var vowelsAll = vowels\n        var vowelsUpperAll\
    \ = vowelsUpper\n        var vowelsLowerAll = vowelsLower\n        var vowelsAllSet\
    \ = vowelsAll.toSet\n        var vowelsUpperAllSet = vowelsUpperAll.toSet\n  \
    \      var vowelsLowerAllSet = vowelsLowerAll.toSet\n        var vowelsAllSetReverse\
    \ = vowelsAllSet.tail.reverse\n        var vowelsUpperAllSetReverse = vowelsUpperAllSet.tail.reverse\n\
    \        var vowelsLowerAllSetReverse = vowelsLowerAllSet.tail.reverse\n     \
    \   val vowelsAllSetReverseIter = vowelsAllSetReverse.iterator\n        val vowelsUpperAllSetReverseIter\
    \ = vowelsUpperAllSetReverse.iterator\n        val vowelsLowerAllSetReverseIter\
    \ = vowelsLowerAllSetReverse.iterator\n        val vowelsAllSetReverseIterNext\
    \ = vowelsAllSetReverseIter.next\n        val vowelsUpperAllSetReverseIterNext\
    \ = vowelsUpperAllSetReverseIter.next\n        val vowelsLowerAllSetReverseIterNext\
    \ = vowelsLowerAllSetReverseIter.next\n        val vowelsAllSetReverseIterNext2\
    \ = vowelsAllSetReverseIterNext.next\n        val vowelsUpperAllSetReverseIterNext2\
    \ = vowelsUpperAllSetReverseIterNext.next\n        val vowelsLowerAllSetReverseIterNext2\
    \ = vowelsLowerAllSetReverseIterNext.next\n        while (vowelsAllSetReverseIterNext2\
    \ != null) {\n            vowelsAllSetReverseIterNext = vowelsAllSetReverseIterNext2\n\
    \            vowelsUpperAllSetReverseIterNext = vowelsUpperAllSetReverseIterNext2\n\
    \            vowelsLowerAllSetReverseIterNext = vowelsLowerAllSetReverseIterNext2\n\
    \            vowelsAllSetReverseIterNext2 = vowelsAllSetReverseIterNext2.next\n\
    \            vowelsUpperAllSetReverseIterNext2 = vowelsUpperAllSetReverseIterNext2.next\n\
    \            vowelsLowerAllSetReverseIterNext2 = vowelsLowerAllSetReverseIterNext2.next\n\
    \        }\n        val vowelsAllIter = vowelsAllIterator.filter(c => !vowelsAllSetReverse.contains(c))\n\
    \        var vowelsUpperIter", "        val vowels = Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")\n        var result = \"\"\n        for (i <- 0 until word.length)\
    \ {\n            if (vowels.contains(word.charAt(i))) {\n                result\
    \ = word.charAt(i)\n                break\n            }\n        }\n        result",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var\
    \ leftVowels = Set[String]();\n        var rightVowels = Set[String]();\n    \
    \    for (c <- word) {\n            if (vowels.contains(c)) leftVowels += c;\n\
    \            else rightVowels += c;\n        }\n        val v1 = rightVowels.min[(String,\
    \ String, String, String)];\n        val v2 = leftVowels.min[(String, String,\
    \ String, String)];\n        if (v1 == v2) return \"\";\n        return v2;",
  "        def searchByVowel (word : String) : String = {\n            val vowels\
    \ = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\")\n            for (i <- 0 until word.length){\n                if (vowels(word.charAt(i))\
    \ == word.charAt(word.length)){\n                    word.substring(0, i)\n  \
    \              } else {\n                    word.substring(i)\n             \
    \   }\n            }\n        }\n        def searchByConsonant (word : String)\
    \ : String = {\n            val consonants = mutable.List(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n            for (i <- 0 until word.length){\n\
    \                if (consonants(word.charAt(i)) == word.charAt(word.length)){\n\
    \                    word.substring(0, i)\n                } else {\n        \
    \            word.substring(i)\n                }\n            }\n        }\n\
    \        val vowels = searchByVowel(word)\n        val consonants = searchByConsonant(word)\n\
    \        if (vowels == \"\" && consonants == \"\"){\n            \"\"\n      \
    \  } else {\n            val index = vowels.indexOf(consonants, 0)\n         \
    \   if (index < 0){\n                \"\"\n            } else {\n            \
    \    vowels(index)\n            }\n        }", "        val vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ start = word.lastIndexWhile(_ != 'a')\n        val end = word.lastIndexWhile(_\
    \ != 'e')\n        if (start < 0 || end < 0 || end < start) {\n            return\
    \ \"\"\n        }\n        var start = word.length\n        var end = word.length\n\
    \        while (start > 0 && start < word.length && vowels.contains(word.charAt(start)))\
    \ {\n            start--\n        }\n        while (end > 0 && end < word.length\
    \ && vowels.contains(word.charAt(end))) {\n            end++\n        }\n    \
    \    if (start >= end || end < start) {\n            return \"\"\n        }\n\
    \        val vowel = word.substring(start + 1, end)\n        if (vowel.equals(\"\
    a\")) return \"\"\n        if (vowel.equals(\"e\")) return \"\"\n        if (vowel.equals(\"\
    i\")) return \"\"\n        if (vowel.equals(\"o\")) return \"\"\n        if (vowel.equals(\"\
    u\")) return \"\"\n        return vowel", "        var result : String = \"\"\n\
    \        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        for (vowel\
    \ <- vowels) {\n            val index = word.lastIndexOf(vowel, word.length -\
    \ 2)\n            if (index > 0) result = vowel\n        }\n        return result",
  "        val charSeq = word.substring(2, word.length-1)\n        val vowelSeq =\
    \ List('u', 'U', 'a', 'A')\n        val vowelCountSeq = vowelSeq.map(x => (x,\
    \ word.count(x => x == x)))\n        val vowelCountSeqWithIndex = vowelCountSeq.zipWithIndex\n\
    \        val vowelCountSeqWithIndexSortedByCount = vowelCountSeqWithIndex.sortBy{case\
    \ (vowelCount, index) => vowelCount}\n        val vowelCountSeqWithIndexSortedByIndexAndCount\
    \ = vowelCountSeqWithIndexSortedByCount.sortBy{case (vowelCount, index) => index}\n\
    \        vowelCountSeqWithIndexSortedByIndexAndCount.find(_._1 == vowelSeq.head).get._2\
    \ match {\n            case x if x > 0 => vowelSeq.head\n            case x if\
    \ x < 0 => \"\"\n            case _ => \"\"\n        }", "        def getVowels(word\
    \ : String) : List[Char] = {\n            def getVowels(word : String) : List[Char]\
    \ = {\n                if (word.length <= 0)\n                    return Nil\n\
    \                val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \           val first = word.head\n                if (vowels(0) < first && vowels(0)\
    \ < word.last)\n                    getVowels(word.tail)\n                else\
    \ {\n                    if (vowels(0) < first || vowels(0) < word.last)\n   \
    \                     getVowels(word.tail)\n                    else\n       \
    \                 vowels\n                }\n            }\n            getVowels(word)\n\
    \        }\n        val vowels = getVowels(word)\n        if (vowels.length <=\
    \ 0)\n            return \"\"\n        val vowelIndex = vowels.indexOf(0)\n  \
    \      if (vowelIndex < 0 || vowelIndex == 0)\n            return \"\"\n     \
    \   val leftConsonantIndex = vowelIndex - 1\n        val rightConsonantIndex =\
    \ vowelIndex + 1\n        val firstCharacter = word.charAt(leftConsonantIndex\
    \ - 1)\n        val lastCharacter = word.charAt(rightConsonantIndex - 1)\n   \
    \     val leftConsonant = word.substring(0, leftConsonantIndex)\n        val rightConsonant\
    \ = word.substring(0, rightConsonantIndex)\n        val allVowels = vowels.toList\
    \ ++ List(firstCharacter, lastCharacter)\n        if (allVowels.contain(leftConsonant))\
    \ {\n            if (allVowels.contain(rightConsonant))\n                return\
    \ \"\"\n            val leftVowelIndex = vowels.indexOf(leftConsonant)\n     \
    \       val rightVowelIndex = vowels.indexOf(rightConsonant)\n            if (leftVowelIndex\
    \ < 0 || leftVowelIndex == 0 || leftVowelIndex == leftConsonantIndex + 1)\n  \
    \              return \"\"\n            if (rightVowelIndex < 0 || rightVowelIndex\
    \ == 0 || rightVowelIndex == rightConsonantIndex + 1)\n                return\
    \ \"\"\n            val leftVowel = vowels(leftVowelIndex)\n            val rightVowel\
    \ = vowels(rightVowelIndex)\n            val leftFirstCharacter = word.substring(0,\
    \ leftConsonantIndex - 1)\n            val leftLastCharacter = word.substring(0,\
    \ rightConsonantIndex - 1)\n            val rightFirstCharacter = word.substring(leftConsonantIndex\
    \ + 1, rightConsonantIndex + 1)\n            val rightLastCharacter = word.substring(rightConsonantIndex\
    \ + 1, word.length - 1)\n            if (leftFirstCharacter == leftConsonant)\n\
    \                if (rightFirstCharact", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val vowelsReversed = vowels.reverse \n        val result = word.splitRight(vowels.size)\n\
    \            .zip(vowelsReversed)\n            .filter{case (left, right) => left\
    \ == right}\n            .map(_._1)\n            .mkString\n\n        result.isEmpty()\
    \ ? \"\" : result", '        // Your code goes here', "        val vowels = \"\
    aeiou\"\n        val vowelList = new mutable.HashSet[String]()\n        val wordList\
    \ = word.split(\" \")\n        wordList.foreach {\n            item => vowelList.add(item.toUpperCase)\n\
    \        }\n        val reversedWord = wordList.reverse\n        val consonantsList\
    \ = reversedWord.filter(_ !in vowels)\n        val consonantsSet = consonantsList.toSet\n\
    \        val consonantsCount = consonantsSet.size \n        if(vowelCount < wordList.size){\n\
    \            return \"\"\n        }else{\n            val closest = wordList.zip(consonantsSet).minBy\
    \ { case (word,consonant) => Math.abs(consonant-word) }\n            vowelList.toSet.contains(closest.get._2)\n\
    \        }", "        val vowels : mutable.Set[String] = mutable.Set(\"a\",\"\
    e\",\"i\",\"o\",\"u\")\n        var bestVowel : String = empty\n        var bestDistance\
    \ : Int = -1\n        var firstIndex : Int = word.lastIndex.toInt\n        var\
    \ lastIndex : Int = word.lastIndex.toInt\n        if(firstIndex < lastIndex)\n\
    \            for(i <- firstIndex to lastIndex) {\n                val current\
    \ : String = word(i)\n                val candidateVowels = vowels.intersect(current.toUpperCase).toSet\n\
    \                val candidateDistance : Int = candidateVowels.size - 1\n    \
    \            if(candidateDistance < bestDistance)\n                    bestDistance\
    \ = candidateDistance\n                for(j <- candidateVowels.reverse to 0 by\
    \ -1) {\n                    val c : String = candidateVowels(j)\n           \
    \         if(current == c)\n                        return c\n               \
    \ }\n            }\n        bestVowel", "        val vowels = \"aeiouAEIOU\"\n\
    \        val wordList = new mutable.HashSet[String]()\n        val wordArray =\
    \ word.split(\"\").reverse\n        for (i <- 0 to wordArray.length - 1) {\n \
    \           if (vowels.contains(wordArray(i))) {\n                wordList.add(wordArray(i))\n\
    \            }\n        }\n        return if (wordList.size == 0) \"\" else wordList.minBy(_.length)",
  "      def vowel(str : String) : Boolean = {\n        val strLen = str.length\n\
    \        for ( i <- 0 until strLen ) {\n          if ( (str.charAt(i) == 'a' ||\
    \ str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i)\
    \ == 'u') && str.charAt(i) != str.charAt(i-1) ) \n            false\n        \
    \  else\n            true\n        }\n      }\n      def isVowel(str : String)\
    \ : Boolean = {\n        val strLen = str.length\n        for ( i <- 0 until strLen\
    \ ) {\n          if ( (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i)\
    \ == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') && str.charAt(i) !=\
    \ str.charAt(i+1) ) \n            false\n          else\n            true\n  \
    \      }\n      }\n      def isConsonant(str : String) : Boolean = {\n       \
    \ val strLen = str.length\n        for ( i <- 0 until strLen ) {\n          if\
    \ ( (str.charAt(i) != 'a' && str.charAt(i) != 'e' && str.charAt(i) != 'i' && str.charAt(i)\
    \ != 'o' && str.charAt(i) != 'u') && str.charAt(i) != str.charAt(i+1) ) \n   \
    \         false\n          else\n            true\n        }\n      }\n      def\
    \ isInVowel(str : String) : Boolean = {\n        val strLen = str.length\n   \
    \     for ( i <- 0 until strLen ) {\n          if ( (str.charAt(i) == 'a' || str.charAt(i)\
    \ == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u')\
    \ && str.charAt(i) != str.charAt(i-1) ) \n            false\n          else\n\
    \            true\n        }\n      }\n      def isInConsonant(str : String) :\
    \ Boolean = {\n        val strLen = str.length\n        for ( i <- 0 until strLen\
    \ ) {\n          if ( (str.charAt(i) != 'a' && str.charAt(i) != 'e' && str.charAt(i)\
    \ != 'i' && str.charAt(i) != 'o' && str.charAt(i) != 'u') && str.charAt(i) !=\
    \ str.charAt(i+1) ) \n            false\n          else\n            true\n  \
    \      }\n      }\n      def isInBoth(str : String) : Boolean = {\n        val\
    \ strLen = str.length\n        for ( i <- 0 until strLen ) {\n          if ( (str.charAt(i)\
    \ == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o'\
    \ || str.charAt(i) == 'u') && str.charAt(i) != str.charAt(i+1) ) \n          \
    \  ", "        // check left side of word is consonant\n        if(word.length\
    \ >= 2 && !word.substring(0, 1).isLetter){\n            return \"\"\n        }\n\
    \        // create two sets to store the consonants and vowels in the right side\n\
    \        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        \n        // get each letter from the right side of word and add it\
    \ into vowel and consonants\n        val rightSideLetters = word.substring(word.length\
    \ -1)\n        vowels ++= rightSideLetters.filter(letter => vowels.contains(letter))\n\
    \        consonants ++= rightSideLetters.filter(letter => !vowels.contains(letter))\n\
    \        \n        // return the vowel that stands between two consonants from\
    \ the right side of the word\n        if(vowels.size == 1){\n            return\
    \ vowels.head\n        }else if(vowels.size == 2){\n            return consonants.min\n\
    \        }else{\n            return \"\"\n        }", "        val vowels = \"\
    aeiouAEIOU\"\n        val array = word.filter(x => vowels.contains(x))\n     \
    \   var resultStr = \"\"\n        var flag = false\n        var vowelCount = 0\n\
    \        for (i <- 0 until array.length-1) {\n            if (array(i).equals(\"\
    y\") || array(i).equals(\"o\") || array(i).equals(\"u\") || array(i).equals(\"\
    A\") || array(i).equals(\"E\") || array(i).equals(\"I\") || array(i).equals(\"\
    O\") || array(i).equals(\"U\")) {\n                vowelCount += 1\n         \
    \       if (vowelCount > 1) {\n                    flag = true\n             \
    \   }\n            }\n        }\n        if (!flag) {\n            return resultStr\n\
    \        }\n        var i = 0\n        while (vowelCount > 1) {\n            if\
    \ (word(i).equals(\"y\") || word(i).equals(\"o\") || word(i).equals(\"u\") ||\
    \ word(i).equals(\"A\") || word(i).equals(\"E\") || word(i).equals(\"I\") || word(i).equals(\"\
    O\") || word(i).equals(\"U\")) {\n                vowelCount -= 1\n          \
    \  }\n            i += 1\n        }\n        resultStr = word.substring(i, word.length-1)\n\
    \        return resultStr", "        if (word == null || word.length == 0) \n\
    \            return \"\";\n\n        val vowels = mutable.Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        // the right side of last consonant from the right\
    \ side of given word\n        val r = word.last.charAt(word.length-1)\n      \
    \  // The closest vowel is the left side of first vowel from the right side of\
    \ the given word\n        val w = word.charAt(word.length-1)\n\n        if (vowels.contains(w)\
    \ && vowels.contains(r))\n            return w;\n        else if (vowels.contains(w))\n\
    \            return \"\";\n        else if (vowels.contains(r))\n            return\
    \ \"\";\n        else\n            return \"\";", "        val vowels = Array(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n        var vowel\
    \ = 0\n        var result = ''\n        val strLen = word.length\n        for\
    \ ((i, s) <- 0 until strLen ) {\n            if(vowels.contains(word.charAt(strLen\
    \ - i - 1))) {\n                vowel = i\n            }\n        }\n        if(vowel\
    \ == vowels.length) {\n            result = word.charAt(strLen - vowel - 1)\n\
    \        } else {\n            result = word.charAt(strLen - vowel)\n        }\n\
    \        return result", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val vowelsWithoutCaps = Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsWithoutCaps\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"A\")\n        val letters = word.toCharArray\n        val vowelFound = Array.ofDim[Char]((letters.size\
    \ - 1).toInt)\n        val consonantFound = Array.ofDim[Char]((letters.size -\
    \ 1).toInt)\n\n        for(i <- 0 until letters.size - 1) {\n            val letter\
    \ = letters(i)\n\n            if((letter == 'a') || (letter == 'A')) {\n     \
    \           vowelFound(i) = letter\n            }\n            else if((letter\
    \ == 'e') || (letter == 'E')) {\n                vowelFound(i) = letter\n    \
    \        }\n            else if((letter == 'i') || (letter == 'I')) {\n      \
    \          vowelFound(i) = letter\n            }\n            else if((letter\
    \ == 'o') || (letter == 'O')) {\n                vowelFound(i) = letter\n    \
    \        }\n            else if((letter == 'u') || (letter == 'U')) {\n      \
    \          vowelFound(i) = letter\n            }\n\n            if((letter ==\
    \ 'b') || (letter == 'B')) {\n                consonantFound(i) = letter\n   \
    \         }\n            else if((letter == 'c') || (letter == 'C')) {\n     \
    \           consonantFound(i) = letter\n            }\n            else if((letter\
    \ == 'd') || (letter == 'D')) {\n                consonantFound(i) = letter\n\
    \            }\n            else if((letter == 'f') || (letter == 'F')) {\n  \
    \              consonantFound(i) = letter\n            }\n            else if((letter\
    \ == 'g') || (letter == 'G')) {\n                consonantFound(i) = letter\n\
    \            }\n            else if((letter == 'h') || (letter == 'H')) {\n  \
    \              consonantFound(i) = letter\n            }\n            else if((letter\
    \ == 'j') || (letter == 'J')) {\n                consonantFound(i) = letter\n\
    \            }\n            else if((letter == 'k') || (letter == 'K')) {\n  \
    \              consonantFound(i) = letter\n            }\n            else if((letter\
    \ == 'l') ", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\");\n        val wordToCheck = word.split(\"\")\n        var closestVowel\
    \ = \"\"\n        var closestConsonant = \"\"\n        var consonantIndex = 0;\n\
    \        var vowelIndex = 0;\n        for (index = 0; index <= word.length - 1;\
    \ index++) {\n            val letter = wordToCheck(index);\n            val letter\
    \ = letter.toLowerCase // to handle case of vowel before a consonant\n       \
    \     if (consonantIndex < consonants.size)\n            {\n                if\
    \ (letter contains consonants(consonantIndex)) {\n                    closestConsonant\
    \ = letter\n                    consonantIndex = consonantIndex + 1\n        \
    \        } else if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\" || letter == \"y\") {\n                    closestConsonant\
    \ = letter\n                    consonantIndex = consonantIndex + 1\n        \
    \        }\n            }\n            else\n            {\n                if\
    \ (vowelIndex < vowels.size)\n                {\n                    if (letter\
    \ contains vowels(vowelIndex)) {\n                        closestVowel = letter\n\
    \                        vowelIndex = vowelIndex + 1\n                    } else\
    \ if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\"\
    \ || letter == \"u\" || letter == \"y\") {\n                        closestVowel\
    \ = letter\n                        vowelIndex = vowelIndex + 1\n            \
    \        }\n                }\n                else\n                {\n     \
    \               if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\" || letter == \"y\") {\n                        closestVowel\
    \ = letter\n                    }\n                }\n            }\n        }\n\
    \        closestVowel", "        val vowels = List('a','e','i','o','u')\n    \
    \    val vowelsFound = mutable.MutableList[Boolean]()\n        var closestVowel\
    \ = \"\"\n        for(i <- 0 until word.length - 1){\n            val currChar\
    \ = word.charAt(i)\n            if(vowelsFound.getOrElse(currChar,false) == false){\n\
    \                for(j <- 0 until vowels.length - 1){\n                    val\
    \ currVowel = vowels(j)\n                    if(currChar == currVowel){\n    \
    \                    vowelsFound.set(currChar,true)\n                    }\n \
    \               }\n            }\n        }\n        vowelsFound.foreach {\n \
    \           case true => {\n                closestVowel = vowels(vowels.indexOf(_)+1)\n\
    \            }\n        }\n        closestVowel", "        def findVowel(index\
    \ : Int, word : String) : Option[String] = {\n            val i = index + 1\n\
    \            val j = word.lastIndex + 1\n            var found : Option[String]\
    \ = None\n            if (word.charAt(i) == word.charAt(j)) {\n              \
    \  if (i == j) {\n                    found =\n                        Some(word.substring(i,\
    \ j))\n                } else {\n                    val x = i\n             \
    \       val y = j\n                    while (x < j) {\n                     \
    \   val z = x + 1\n                        if (word.charAt(z) == word.charAt(y))\
    \ {\n                            val v = word.substring(z, y)\n              \
    \              val r = findVowel(z, v)\n                            val c = findVowel(y,\
    \ v)\n                            val s = findVowel(x, v)\n                  \
    \          if (r.isDefined && c.isDefined && s.isDefined) {\n                \
    \                found = Some(v)\n                            }\n            \
    \            }\n                        val z = x - 1\n                      \
    \  if (word.charAt(z) == word.charAt(y)) {\n                            val v\
    \ = word.substring(z, y)\n                            val r = findVowel(z, v)\n\
    \                            val c = findVowel(y, v)\n                       \
    \     val s = findVowel(x, v)\n                            if (r.isDefined &&\
    \ c.isDefined && s.isDefined) {\n                                found = Some(v)\n\
    \                            }\n                        }\n                  \
    \      val y = y - 1\n                    }\n                }\n            }\n\
    \            found\n        }\n        findVowel(word.length, word)", "      \
    \  if (word == null || word.isEmpty || word.charAt(word.length-1) == ' ') {\n\
    \            return \"\"\n        }\n\n        var vowelsBetween = List(word.charAt(word.length-1),\
    \ word.charAt(word.length-2))\n        val firstVowel = vowelsBetween.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        val secondVowel\
    \ = vowelsBetween.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n\n        if (firstVowel.isEmpty || secondVowel.isEmpty) {\n    \
    \        return \"\"\n        }\n\n        var i = 0\n        var minDiff = math.min(firstVowel.length,\
    \ secondVowel.length)\n        val vowels = firstVowel.take(minDiff).intersect(secondVowel.take(minDiff)).toSet\n\
    \        var minVowel = vowels.min.asInstanceOf[Char]\n        var maxVowel =\
    \ vowels.max.asInstanceOf[Char]\n\n        for(v <- vowels) {\n            var\
    \ i = 0\n            var min = math.min(firstVowel.length, secondVowel.length)\n\
    \            while(i < min) {\n                var diff = firstVowel.charAt(i)\
    \ - v\n                if (diff <= 0) {\n                    diff = firstVowel.charAt(i)\
    \ - v\n                }\n                if(diff > 0) {\n                   \
    \ i++\n                    min = math.min(firstVowel.length, secondVowel.length)\n\
    \                }\n            }\n            while(i < min) {\n            \
    \    var diff = secondVowel.charAt(i) - v\n                if(diff <= 0) {\n \
    \                   diff = secondVowel.charAt(i) - v\n                }\n    \
    \            if(diff > 0) {\n                    i++\n                    min\
    \ = math.min(firstVowel.length, secondVowel.length)\n                }\n     \
    \       }\n            if(min == 0) {\n                minDiff = min\n       \
    \         minVowel = v\n                maxVowel = v\n            }\n        }\n\
    \        if (minDiff == 0) {\n            return \"\"\n        }\n        return\
    \ minVowel", "        def vowels(w: Char) = {\n            w.toLower.toArray.filterNot(('a'\
    \ to 'z').contains)\n        }\n        val arr = word.trim\n        val idx =\
    \ arr.lastIndexOf('a')\n        val lastIndex = arr.lastIndexOf('z')\n       \
    \ val first = vowels(arr(idx+1))\n        val last = vowels(arr(lastIndex-1))\n\
    \        val c = arr(idx+2)\n        if(!c.isEmpty && vowels(c).contains(first)\
    \ && vowels(c).contains(last))\n            first + last\n        else\n     \
    \       \"\"", "        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        var firstVowel : Int = 0\n        var lastVowel : Int = 0\n        var\
    \ count = 0\n        for (v <- vowels) {\n            val vIndex = word.indexOf(v,\
    \ lastVowel + 1)\n            if (vIndex == -1) \n                break\n    \
    \        lastVowel = vIndex\n            count += 1\n        }\n        if (count\
    \ == 0) \n            return \"\"\n        var vIndex = 0\n        var firstIndex\
    \ = word.lastIndexOf('u')\n        if (firstIndex == -1)\n            firstIndex\
    \ = 0\n        for (v <- vowels) {\n            val vIndex = word.indexOf(v, firstIndex\
    \ + 1)\n            if (vIndex == -1) \n                break\n            firstVowel\
    \ = vIndex\n        }\n        var i = 0\n        while (i < count && word.charAt(lastVowel\
    \ + i) != 'u') i += 1\n        if (word.charAt(lastVowel + i) == 'u')\n      \
    \      i += 1\n        var j = count\n        while (j > 0 && !word.charAt(lastVowel\
    \ + i - 1) != 'u') j -= 1\n        if (word.charAt(lastVowel + i) == 'u')\n  \
    \          i += 1\n        val left = word.substring(0, firstVowel)\n        val\
    \ right = word.substring(firstVowel + i, lastVowel)\n        val leftIndex = 0\n\
    \        val rightIndex = 0\n        var i = 0\n        while (i < left.length\
    \ && i < right.length) {\n            if (left.charAt(i) != right.charAt(i))\n\
    \                break\n            i += 1\n        }\n        val closest = left.substring(leftIndex,\
    \ i)\n        if (closest == \"\")\n            closest = \"U\"\n        val rest\
    \ = right.substring(i + 2, lastVowel)\n        if (rest == \"\")\n           \
    \ rest = \"U\"\n        val result = closest + rest\n        result ", "     \
    \   val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsIndex\
    \ : Int = 0\n        var wordIndex : Int = 0\n        var vowelsLength : Int =\
    \ vowels.length\n        var result : String = null\n\n        while(wordIndex\
    \ < word.length){\n            if (vowels(wordIndex).toLowerCase == vowels(vowelsIndex).toLowerCase){\n\
    \                vowelsIndex += 1\n                vowelsLength += 1\n       \
    \     } else {\n                vowelsIndex = vowelsLength - 1\n            }\n\
    \            wordIndex += 1\n        }\n\n        result = (word.length/vowelsLength)*vowelsIndex\n\
    \        if(result>=0)\n            vowels(result).toLowerCase\n        else\n\
    \            \"\"", "        val vowels = \"aeiouAEIOU\"\n        val vowelsLower\
    \ = \"aeiouaieou\"\n        val vowelsUpper = \"AIEOU\"\n        var i = 0\n \
    \       var j = 0\n        var foundVowel : String = \"\"\n        var vowelLength\
    \ = 0\n        var vowelIndex = 0\n        var consonantIndex = 0\n        var\
    \ consonantLength = 0\n        var consonants = word.toLowerCase().toList\n\n\
    \        if (vowels.contains(consonants(0)) && vowels.contains(consonants(consonants.length\
    \ - 1))) {\n            vowelLength = consonants(0).toString.length\n        \
    \    vowelIndex = consonants.length - 1\n            vowelLength = vowelLength\
    \ - vowels(vowelIndex).length\n        }\n\n        if (vowelsLower.contains(consonants(0))\
    \ && vowelsLower.contains(consonants(consonants.length - 1))) {\n            vowelLength\
    \ = consonants(0).toString.length\n            vowelIndex = consonants.length\
    \ - 1\n            vowelLength = vowelLength - vowels(vowelIndex).length\n   \
    \     }\n\n        if (vowelsUpper.contains(consonants(0)) && vowelsUpper.contains(consonants(consonants.length\
    \ - 1))) {\n            vowelLength = consonants(0).toString.length\n        \
    \    vowelIndex = consonants.length - 1\n            vowelLength = vowelLength\
    \ - vowels(vowelIndex).length\n        }\n\n        while (i < vowelLength &&\
    \ j < consonantLength) {\n            if (vowels(vowelIndex) == consonants(consonantIndex))\
    \ {\n                foundVowel = consonants(consonantIndex)\n               \
    \ consonantIndex = consonantIndex + 1\n                if (consonantIndex == consonants.length)\
    \ {\n                    consonantIndex = 0\n                    consonantLength\
    \ = consonantLength + 1\n                }\n                i = i + 1\n      \
    \          j = 0\n            }\n            else if (consonants(consonantIndex).compareTo(consonants(consonantIndex\
    \ - 1)) == 0) {\n                foundVowel = consonants(consonantIndex - 1)\n\
    \                consonantIndex = consonantIndex - 1\n                i = i\n\
    \                j = 0\n            }\n            else if (consonants(consonantIndex).compareTo(consonants(consonantIndex\
    \ + 1)) == 0) {\n                foundVowel = consonants(consonantIndex + 1)\n\
    \                consonantIndex = consonantIndex + 1\n                i = i\n\
    \                j = 0\n            }\n            else if (vowels(vowelIndex).compareTo(consonants(consonantIndex))\
    \ == ", "        def closest(s:String):String={\n            val vowels = mutable.HashSet(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n            val vowelsAndCons = vowels ++ Set(s.charAt(0),\
    \ s.charAt(s.length-1))\n            vowelsAndCons.foldRight(\"\")( (x,y) =>{\n\
    \                val m = y.toLowerCase match {\n                    case \"a\"\
    ..\"e\"    => -1\n                    case \"i\"..\"o\"    => -1\n           \
    \         case \"u\"..\"u\" => -1\n                    case _ => 0\n         \
    \       }\n                val m = math.min(m, x.toLowerCase match {\n       \
    \             case \"a\"..\"e\"    => -1\n                    case \"i\"..\"o\"\
    \    => -1\n                    case \"u\"..\"u\" => -1\n                    case\
    \ _ => 0\n                })\n                val s = x.toLowerCase match {\n\
    \                    case \"a\"..\"e\"    => \"e\"\n                    case \"\
    i\"..\"o\"    => \"o\"\n                    case \"u\"..\"u\" => \"u\"\n     \
    \               case _ => x\n                }\n                s.charAt(m)\n\
    \            })\n        }\n        val vowels = mutable.HashSet(\"a\",\"e\",\"\
    i\",\"o\",\"u\")\n        val cons = vowels ++ Set(word.charAt(word.length-1),\
    \ word.charAt(word.length))\n        cons.foldRight(\"\")((x,y) => {\n       \
    \     val m = y.toLowerCase match {\n                case \"a\"..\"e\"    => -1\n\
    \                case \"i\"..\"o\"    => -1\n                case \"u\"..\"u\"\
    \ => -1\n                case _ => 0\n            }\n            val m = math.min(m,\
    \ x.toLowerCase match {\n                case \"a\"..\"e\"    => -1\n        \
    \        case \"i\"..\"o\"    => -1\n                case \"u\"..\"u\" => -1\n\
    \                case _ => 0\n            })\n            val s = x.toLowerCase\
    \ match {\n                case \"a\"..\"e\"    => \"e\"\n                case\
    \ \"i\"..\"o\"    => \"o\"\n                case \"u\"..\"u\" => \"u\"\n     \
    \           case _ => x\n            }\n            s.charAt(m)\n        })",
  "        val vowels = \"AEIOUaeiouAEIOUaeiou\".toUpperCase\n        val vowelsArray\
    \ = vowels.toCharArray\n        val vowelsSet = vowelsArray.toSet\n        val\
    \ consonants = \"bcdfghjklmnpqrstvwxz\".toUpperCase\n        val consonantsArray\
    \ = consonants.toCharArray\n        val consonantsSet = consonantsArray.toSet\n\
    \        val reversedWord = word.reverse\n        val vowelIndicesArray = reversedWord.substring(0,reversedWord.length).reverse.groupBy(e\
    \ => vowelsSet.contains(e)).map(_._2).toArray\n        var vowelIndex = 0\n  \
    \      val rightIndex = word.lastIndexOf(' ')\n        val rightIndex = if(rightIndex\
    \ < 0) word.length else rightIndex\n        val rightVowels = word.substring(rightIndex).reverse.groupBy(e\
    \ => vowelsSet.contains(e)).map(_._2).toArray\n        var rightVowelIndex = 0\n\
    \        val leftIndex = word.indexOf(reversedWord.charAt(reversedWord.length\
    \ - 1))\n        val leftIndex = if(leftIndex < 0) word.length else leftIndex\n\
    \        val leftVowels = word.substring(0,leftIndex).reverse.groupBy(e => vowelsSet.contains(e)).map(_._2).toArray\n\
    \        var leftVowelIndex = 0\n        val rightVowelIndex = word.substring(rightIndex).lastIndexOf('\
    \ ')\n        val rightVowelIndex = if(rightVowelIndex < 0) 0 else rightVowelIndex\n\
    \        var foundVowelIndex = -1\n        var foundRightVowelIndex = -1\n   \
    \     var foundLeftVowelIndex = -1\n        val vowelsCount = vowelIndicesArray.length\n\
    \        val rightVowelsCount = rightVowels.length\n        val leftVowelsCount\
    \ = leftVowels.length\n        if(vowelsCount > rightVowelsCount && vowelsCount\
    \ > leftVowelsCount) foundVowelIndex = vowelIndicesArray(0)\n        if(rightVowelsCount\
    \ > vowelsCount && rightVowelsCount > leftVowelsCount) foundRightVowelIndex =\
    \ rightVowelIndices(0)\n        if(leftVowelsCount > vowelsCount && leftVowelsCount\
    \ > rightVowelsCount) foundLeftVowelIndex = leftVowelIndices(0)\n        if(foundVowelIndex\
    \ != -1 && foundRightVowelIndex != -1 ", "        var vowel = \"\"\n        var\
    \ leftConsonant = word.last.charAt(word.length - 2)\n        var rightConsonant\
    \ = word.last.charAt(word.length - 1)\n        for (c <- word.last until word.length-1)\
    \ {\n            if (c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") ||\
    \ c.equals(\"o\") || c.equals(\"u\")) {\n                vowel = vowel + c\n \
    \           } else if (c.equals(leftConsonant) || c.equals(rightConsonant)) {\n\
    \                break\n            } else {\n                vowel = vowel +\
    \ c\n            }\n        }\n        vowel", "        def getVowelPosition(w:String)\
    \ : Int = {\n            val pos = w.toCharArray.zipWithIndex.find { \n      \
    \          case (c,i) => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' \n            }.getOrElse(throw new IllegalArgumentException(\"word must\
    \ have English letter\"))\n            pos\n        }\n        val vowels = Set(\"\
    aeiou\")\n        val vowelsCount = word.flatMap(vowels.contains).size\n     \
    \   val consonants = word.filter(c => c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u').flatMap(_.toChar)\n        if (vowelsCount == 0 && consonants.size\
    \ > 0) {\n            return word.find(c => vowels.contains(c.toLowerCase)).orElse\
    \ \"\"\n        } else if (vowelsCount > 0 && consonants.size == 0) {\n      \
    \      return word.find(c => vowels.contains(c.toLowerCase)).orElse \"\"\n   \
    \     } else if (vowelsCount == 0 && consonants.size > 0) {\n            return\
    \ word.find(c => vowels.contains(c.toLowerCase)).orElse \"\"\n        } else {\n\
    \            val pos = getVowelPosition(word)\n            if (pos == consonants.size\
    \ - 1) {\n                return word.find(c => vowels.contains(c.toLowerCase)).orElse\
    \ \"\"\n            } else if (pos < consonants.size) {\n                return\
    \ word.find(c => vowels.contains(c.toLowerCase)).orElse \"\"\n            } else\
    \ {\n                return word.find(c => vowels.contains(c.toLowerCase)).orElse\
    \ \"\"\n            }\n        }", "      var vowels = \"aeiou\"\n      var left\
    \ = 0\n      var right = word.length - 1\n      var result = \"\"\n      while\
    \ (left < right) {\n        var mid = left + (right - left) / 2\n        var v1\
    \ = vowels.find(word(mid).equalsIgnoreCase)\n        if (v1 == -1) {\n       \
    \   result = word(mid)\n          left = mid\n        } else {\n          result\
    \ = v1 + result\n          left = mid + 1\n        }\n        var v2 = vowels.find(word(mid).equalsIgnoreCase)\n\
    \        if (v2 == -1) {\n          right = mid\n        } else {\n          right\
    \ = mid\n        }\n      }\n      result", "        if (word.isEmpty) return\
    \ \"\";\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\");\n      \
    \  def getNextConsonant(word : String) : String = {\n            val index = word.length\
    \ - 1;\n            while (index >= 0 && word.isEmpty) {\n                if (word.charAt(index)\
    \ == 'z') return word.substring(0, index);\n                if (word.charAt(index)\
    \ == 'y') return word.substring(0, index);\n                index--;\n       \
    \     }\n            return \"\";\n        }\n        def getNextVowel(word :\
    \ String) : String = {\n            val index = word.length - 1;\n           \
    \ while (index >= 0 && word.isEmpty) {\n                if (word.charAt(index)\
    \ == 'z' || word.charAt(index) == 'y') return word.substring(0, index);\n    \
    \            index--;\n            }\n            return \"\";\n        }\n  \
    \      val words = word.split(\"\");\n        var previous = getNextConsonant(word);\n\
    \        val vowelConsonants = vowels.map(c => c +: previous);\n        val nextVowelConsonants\
    \ = vowelConsonants.map(c => c +: getNextVowel(previous));\n        val nextVowelConsonantString\
    \ = nextVowelConsonants.mkString(\"\");\n        var result = words.get(0) + nextVowelConsonantString;\n\
    \        val length = words.length - 1;\n        for (i <- 1 to length) {\n  \
    \          val newVowel = words.get(i) + nextVowelConsonantString;\n         \
    \   if (vowelConsonants.exists(c => newVowel.indexOf(c) != -1)) {\n          \
    \      result = newVowel;\n            }\n        }\n        return result;",
  "        var vowel = Set('a', 'e', 'i', 'o', 'u')\n        var vowelIndex = word.lastIndexOfAny(vowel)\n\
    \        var newWord = word.substring(vowelIndex+1, word.length)\n        var\
    \ searchVowel = word.substring((vowelIndex+1), word.length)\n        var vowelIndex\
    \ = searchVowel.lastIndexOfAny(vowel)\n        var newSearchVowel = searchVowel.substring(vowelIndex+1,\
    \ searchVowel.length)\n        var vowelIndex = newSearchVowel.lastIndexOfAny(vowel)\n\
    \        var newNewSearchVowel = newSearchVowel.substring(vowelIndex+1, newSearchVowel.length)\n\
    \        if(newWord.length <= vowelIndex){\n            return \"\"\n        }\n\
    \        if(newNewSearchVowel.length <= vowelIndex){\n            return \"\"\n\
    \        }\n        if(newNewSearchVowel.startsWith(newWord.substring(vowelIndex+1,\
    \ newWord.length))){\n            return newWord.substring(vowelIndex+1, newWord.length)\n\
    \        }\n        if(newNewSearchVowel.startsWith(newWord.substring(vowelIndex+1,\
    \ newNewSearchVowel.length))){\n            return newWord.substring(vowelIndex+1,\
    \ newWord.length)\n        }\n        return \"\"", "        var vowels : Set[String]\
    \ = Set()\n        val lowerCaseWord = word.toLowerCase\n        val lastConsonantIndex\
    \ = lowerCaseWord.length - 1\n        for (i <- lastConsonantIndex - 1 until 0){\n\
    \            if (lowerCaseWord(i) == \"a\" || lowerCaseWord(i) == \"e\" || lowerCaseWord(i)\
    \ == \"i\" || lowerCaseWord(i) == \"o\" || lowerCaseWord(i) == \"u\") {\n    \
    \            vowels += lowerCaseWord(i)\n            }\n        }\n        if\
    \ (vowels.isEmpty)\n            return \"\"\n        val newVowelIndex = vowels.lastIndexOf(\"\
    a\") + 2\n        return vowels.take(newVowelIndex).mkString", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var result : String\
    \ = \"\";\n        val count = word.count(letter => vowels.contains(letter))\n\
    \        if(count > 1){\n            val endIndex = word.lastIndexOfAny(vowels)\n\
    \            val start = word.lastIndexOfAny(vowels, endIndex+1)\n           \
    \ if(start < endIndex){\n                val vowel = word.substring(endIndex+1,\
    \ start)\n                result = vowel\n            }\n        }\n        return\
    \ result", "        val letters: Array[String] = word.toCharArray\n        val\
    \ vowels: Set[String] = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants:\
    \ Set[String] = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    z\")\n        var index: Int = 0\n        var vowelsIndex = 0\n        var vowelsLength\
    \ = 0\n\n        // check if the word has vowels at the begining or at the end\n\
    \        if(vowels.contains(letters(0))){\n            vowelsLength = vowels.size\
    \ - 1\n        }else if(vowels.contains(letters(letters.size-1))){\n         \
    \   vowelsLength = vowels.size\n        }else{\n            return \"\"\n    \
    \    }\n\n        while(vowelsIndex < vowelsLength){\n            if(consonants.contains(letters((index\
    \ + vowelsIndex)))){\n                index = index + vowelsIndex\n          \
    \      vowelsIndex = vowelsIndex + 1\n            }else if(consonants.contains(letters((index\
    \ - vowelsIndex)))){\n                index = index - vowelsIndex\n          \
    \      vowelsIndex = vowelsIndex + 1\n            }else{\n                return\
    \ \"\"\n            }\n        }\n        return vowels.find(letters => letters.contains(letters(index)))",
  "        val vowels = new mutable.HashSet[String]()\n        val consonants = new\
    \ mutable.HashSet[String]()\n        var first = 0\n        var last = word.length\
    \ - 1\n        while (first < last) {\n            if (vowels.contains(word.substring(first\
    \ + 1, last))) {\n                return word.substring(first + 1, last)\n   \
    \         }\n            if (consonants.contains(word.substring(first + 1, last)))\
    \ {\n                last -= 1\n            } else {\n                last -=\
    \ 1\n                first += 1\n            }\n        }\n        return \"\"",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"u\")\n  \
    \      val vowelIndex =\n          word.zipWithIndex.find { case (vowel, index)\
    \ => vowels.contains(vowel) } match {\n            case (Some(vowel), index) =>\
    \ index\n            case (_, -1) => -1\n          }\n        val firstVowelIndex\
    \ = vowelIndex - 1\n        val lastVowelIndex = vowelIndex + 1\n        if (firstVowelIndex\
    \ < 0) {\n          return \"\"\n        }\n        if (lastVowelIndex > word.length\
    \ - 1) {\n          return \"\"\n        }\n        var index = firstVowelIndex\n\
    \        while (vowels.contains(word.charAt(index))) {\n          index = index\
    \ - 1\n        }\n        return word.charAt(index) + word.substring(index + 1,\
    \ lastVowelIndex)", "        var vowels : Set[String] = Set()\n        val wordLength\
    \ = word.length\n        var vowelIndex = 0\n        var vowelCount = 0\n    \
    \    var currentVowel : String = \"\"\n        var currentCount : Int = 0\n  \
    \      var nextVowel : String = \"\"\n        var nextCount : Int = 0\n      \
    \  var currentCount : Int = 0\n        while(vowelIndex < wordLength){\n     \
    \       currentVowel = word.charAt(vowelIndex).toUpperCase\n            if(currentVowel.toLowerCase\
    \ == \"a\" || currentVowel.toLowerCase == \"e\" || currentVowel.toLowerCase ==\
    \ \"i\" || currentVowel.toLowerCase == \"o\" || currentVowel.toLowerCase == \"\
    u\" || currentVowel.toLowerCase == \"y\"){\n                vowelIndex = vowelIndex\
    \ + 1\n                currentCount = currentCount + 1\n                currentVowel\
    \ = word.charAt(vowelIndex).toUpperCase\n                if(currentCount > vowelCount){\n\
    \                    vowelCount = currentCount\n                    nextVowel\
    \ = currentVowel\n                    nextCount = vowelCount\n               \
    \ }\n            }\n            vowelIndex = vowelIndex + 1\n        }\n     \
    \   if(nextCount < vowelCount){\n            vowelIndex = wordLength\n       \
    \     while(vowelIndex > 0){\n                currentVowel = word.charAt(vowelIndex).toUpperCase\n\
    \                if(currentVowel.toLowerCase == \"a\" || currentVowel.toLowerCase\
    \ == \"e\" || currentVowel.toLowerCase == \"i\" || currentVowel.toLowerCase ==\
    \ \"o\" || currentVowel.toLowerCase == \"u\" || currentVowel.toLowerCase == \"\
    y\"){\n                    vowelIndex = vowelIndex - 1\n                    currentCount\
    \ = currentCount + 1\n                    currentVowel = word.charAt(vowelIndex).toUpperCase\n\
    \                    if(currentCount > vowelCount){\n                        vowelCount\
    \ = currentCount\n                        nextVowel = currentVowel\n         \
    \               nextCount = vowelCount\n                    }\n              \
    \  }\n                vowelIndex = vowelIndex - 1\n            }\n        }\n\
    \        if(nextCount >= vowelCount){\n            return nextVowel\n        }else{\n\
    \            return \"\"\n        }", "        val vowels = \"AEIOUaeiou\"\n \
    \       val vowelsCount = vowels.toList.count\n        var minDistance = 1\n \
    \       var bestVowel : String = \"\"\n        var index = word.length - 1\n \
    \       for (index <- 0 to word.length - vowelsCount) {\n            val subWord\
    \ = word.substring(index, index + vowelsCount)\n            val distance = getLevenshteinDistance(subWord,\
    \ vowels)\n            if (distance < minDistance) {\n                minDistance\
    \ = distance\n                bestVowel = subWord\n            }\n        }\n\
    \        bestVowel", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".toList\n       \
    \ val vowelsCount = word.groupBy(x => vowels.indexOf(x)).map(x => x._2).sum\n\
    \        val consonantsCount = word.groupBy(x => consonants.indexOf(x)).map(x\
    \ => x._2).sum\n        val currentVowelCount = word.length - (consonantsCount\
    \ + vowelsCount)\n        val currentVowel = word.substring(consonantsCount, word.length)\n\
    \        var closestVowel = \"\"\n        var closestVowelIndex = 0\n        //\
    \ Loop through the given word and find the closest vowel met \n        // the\
    \ following condition: \n        // 1. One vowel must stay right before the end\
    \ of the word\n        // 2. One vowel must stay right before the consonant\n\
    \        // 3. Two vowels must stay in the word\n        for(i <- 0 until currentVowelCount)\
    \ {\n            val thisVowel = word.substring(i, currentVowel)\n           \
    \ if(thisVowel.contains(vowels.mkString)) {\n                if(closestVowelIndex\
    \ < i) {\n                    closestVowelIndex = i\n                }\n     \
    \       }\n            val thisVowelIndex = thisVowel.lastIndexOf(vowels.mkString)\n\
    \            if(thisVowelIndex != -1) {\n                if(closestVowelIndex\
    \ < thisVowelIndex) {\n                    closestVowelIndex = thisVowelIndex\n\
    \                }\n            }\n        }\n        closestVowel = word.substring(closestVowelIndex\
    \ + vowelsCount, word.length)\n        return closestVowel", "        def getConsonants(word\
    \ : String) : List[String] = {\n            val consonants = List(\n         \
    \       \"b\", \"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"\n                )\n\
    \            val consonantsList = consonants.toList\n            val consonantsSet\
    \ = consonants.toSet\n            val chars = word.map(c => c.toUpperCase).filter(c=>consonantsSet.contains(c))\n\
    \            val newList = word.filter(c=>consonantsSet.contains(c))\n       \
    \     val allConsonants = consonantsList.filter(c=>chars.contains(c))\n      \
    \      val rest = chars.filter(c=>!consonantsSet.contains(c))\n            consonantsList\
    \ ++ rest\n        }\n        def getVowels(word : String) : List[String] = {\n\
    \            val vowels = List(\n                \"a\",\"e\",\"i\",\"o\",\"u\"\
    \n                )\n            val vowelsList = vowels.toList\n            val\
    \ vowelsSet = vowels.toSet\n            val chars = word.map(c => c.toUpperCase).filter(c=>vowelsSet.contains(c))\n\
    \            val newList = word.filter(c=>vowelsSet.contains(c))\n           \
    \ val allConsonants = vowelsList.filter(c=>chars.contains(c))\n            val\
    \ rest = chars.filter(c=>!vowelsSet.contains(c))\n            vowelsList ++ rest\n\
    \        }\n        val vowels = getVowels(word)\n        val consonants = getConsonants(word)\n\
    \        var closestVowel = \"\"\n        val length = vowels.size\n        var\
    \ distance = 0\n        var index = 0\n        while (index < length){\n     \
    \       if (vowels(index) == consonants(length-1)){\n                val distance\
    \ = math.abs(consonants.indexOf( vowels(index) ) - consonants.indexOf( vowels(length-1)))\n\
    \                if(closestVowel.length < vowels(index)){\n                  \
    \  closestVowel = vowels(index)\n                }\n                if(distance\
    \ < distance){\n                    distance = distance\n                }\n \
    \           }\n            index += 1\n        }\n        closestVowel", "   \
    \     val vowels = \"aeiouAEIOU\".toSet\n        val startIndex = word.indexOfLast(\"\
    a\")\n        if (startIndex == -1)\n            return \"\"\n        val endIndex\
    \ = word.lastIndexOf(\"u\")\n        if (endIndex == -1)\n            return \"\
    \"\n        val start = word.substring(startIndex + 1)\n        val end = word.substring(endIndex\
    \ + 1)\n        for (i <- vowels.iterator) {\n            if (word.indexOf(i)\
    \ >= 0)\n                return \"\"\n        }\n        val charSet = scala.collection.mutable.Set[Char]()\n\
    \        charSet ++= start.toCharArray\n        charSet ++= end.toCharArray\n\
    \        charSet.iterator", "        // get the last letter of given word.\n \
    \       val lastChar = word.last\n        // find the vowel between last char\
    \ and next char from right.\n        // return empty string if no vowel found.\n\
    \        val nextChar = word.slice(word.length - 1, 1)\n        val index = word.indexOf(\"\
    o\") + 1 // to prevent using an index for \"o\"\n        val i = word.indexOf(\"\
    o\", index) + 1\n        val j = word.indexOf(\"e\", i)\n        if (word.indexOf(lastChar,\
    \ i + 1) > 0 &&\n            word.indexOf(nextChar, j) > 0 &&\n            word.indexOf(lastChar,\
    \ j + 1) > 0 &&\n            word.indexOf(nextChar, i + 1) > 0 &&\n          \
    \  word.indexOf(lastChar, j) > 0 &&\n            word.indexOf(nextChar, j + 1)\
    \ > 0 &&\n            word.indexOf(lastChar, j) > 0 &&\n            word.indexOf(nextChar,\
    \ j) > 0 &&\n            word.indexOf(lastChar, j) > 0 &&\n            word.indexOf(nextChar,\
    \ j + 1) > 0\n            ) \n                word.slice(word.indexOf(\"o\"),\
    \ word.indexOf(\"o\"))\n                else\n                \"\"", "       \
    \ val vowel = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelCount\
    \ = word.count(_.toLowerCase.contains(vowel.mkString))\n        if(vowelCount\
    \ == 0){\n            return \"\"\n        }\n        val consonantCount = word.count(c\
    \ => c.toLowerCase.startsWith(\"a\"))\n        val right = word.slice(consonantCount,\
    \ word.length)\n        val left = right.takeWhile(_ => !_.toLowerCase.contains(vowel.mkString))\n\
    \        if(left.isEmpty){\n            return \"\"\n        }\n        val leftVowelCount\
    \ = left.count(_.toLowerCase.contains(vowel.mkString))\n        if(leftVowelCount\
    \ > vowelCount){\n            return \"\"\n        }\n        val index = (left.lastIndex\
    \ - leftVowelCount + consonantCount) % vowel.length\n        val vowelIndex =\
    \ vowel.indexOf(vowel(index))\n        val start = word.take(vowelIndex).lastIndex\n\
    \        val end = start + vowel.length\n        return word.substring(start,\
    \ end)", "        var vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val vowels = vowelSet.toSeq.filter(x =>\
    \ word.toLowerCase().indexOf(x.toString) > -1)\n        var result = \"0\"\n \
    \       var flag = 0\n        for( i <- 0 to word.length - 1 ) {\n           \
    \ if( vowels.exists(x => word.indexOf(x) > i) ) {\n                var vowelIndex\
    \ = word.indexOf(x)\n                while( vowelIndex < i && flag == 0 ) {\n\
    \                    if( word.charAt(vowelIndex) != x.toString ) \n          \
    \              flag = 1\n                    vowelIndex += 1\n               \
    \ }\n                if( flag == 0 ) {\n                    result = word.charAt(vowelIndex\
    \ - 1)\n                }\n            }\n        }\n        return result", " \
    \       var prevIndex = 0\n        var index = word.length - 1\n        var vowels\
    \ = \"aeiouAEIOU\".toList\n        // If there is only one consonant, then return\
    \ empty string\n        if (word.length < 2) return \"\"\n        while (index\
    \ >= 0) {\n            var currentChar = word.charAt(index)\n            if (vowels.contains(currentChar))\
    \ {\n                var nextVowelIndex = findVowelIndex(word, index, prevIndex)\
    \ + 1\n                return if (nextVowelIndex == prevIndex) {\n           \
    \         nextVowelIndex\n                } else findVowelIndex(word, index, nextVowelIndex)\n\
    \            }\n            index--\n        }\n        return \"\"", "      \
    \  val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val first = word.indexOf(\"\
    a\");\n        val last  = word.lastIndexOf(\"u\");\n        if(first<0 || last<0\
    \ || first>last || first>last)\n            return \"\";\n        val firstVowel\
    \ = word.substring(first, last - 1).indexOf(\"a\");\n        val lastVowel  =\
    \ word.substring(last - 1, word.length).indexOf(\"a\");\n        val secondVowel\
    \ = word.substring(word.length, word.length).indexOf(\"u\");\n        if(firstVowel<0\
    \ || firstVowel>secondVowel)\n            return \"\";\n        if(lastVowel<0\
    \ || lastVowel>secondVowel)\n            return \"\";\n        if(firstVowel<0)\n\
    \            return word.substring(firstVowel, word.length).substring(0,lastVowel);\n\
    \        if(lastVowel<0)\n            return word.substring(firstVowel, word.length).substring(lastVowel,\
    \ word.length);\n        val firstVowelIndex = word.substring(firstVowel, word.length).indexOf(\"\
    a\");\n        val lastVowelIndex = word.substring(word.length, word.length).indexOf(\"\
    u\");\n        if(lastVowelIndex<0 || lastVowelIndex>secondVowel)\n          \
    \  return \"\";\n        if(firstVowelIndex<0)\n            return word.substring(firstVowelIndex,\
    \ lastVowelIndex).substring(0,lastVowel);\n        if(lastVowelIndex<0)\n    \
    \        return word.substring(firstVowelIndex, lastVowelIndex).substring(lastVowel,\
    \ lastVowel);\n        val secondVowelIndex = word.substring(word.length, word.length).indexOf(\"\
    u\");\n        val vowel = word.substring(firstVowelIndex, secondVowelIndex).substring(0,lastVowel);\n\
    \        return vowel;", "        val wordList = List(word, word.trimRight(word),\
    \ word.trimRight(word.trimRight(word)))\n        val vowelList = List(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelSet = vowelList.toSet\n   \
    \     val vowelCount = vowelList.toList.groupBy(e => e).values.map(_.length).max\n\
    \        val vowelSetSize = vowelSet.size\n        val vowelSetMax = vowelSet.max\n\
    \        val vowelSetMin = vowelSet.min\n        val vowelSetSum = vowelSet.sum\n\
    \        val vowelSetCount = (vowelSet - vowelSet).size\n        val vowelSetSize\
    \ = vowelSetSize\n        val vowelSetMax = vowelSetMax\n        val vowelSetMin\
    \ = vowelSetMin\n        val vowelSetSum = vowelSetSum\n        val vowelSetCount\
    \ = (vowelSet - vowelSet).size\n        val vowelSetSize = vowelSetSize\n    \
    \    val vowelSetMax = vowelSetMax\n        val vowelSetMin = vowelSetMin\n  \
    \      val vowelSetSum = vowelSetSum\n        val vowelSetCount = (vowelSet -\
    \ vowelSet).size\n        val vowelSetSize = vowelSetSize\n        val vowelSetMax\
    \ = vowelSetMax\n        val vowelSetMin = vowelSetMin\n        val vowelSetSum\
    \ = vowelSetSum\n        val vowelSetCount = (vowelSet - vowelSet).size\n    \
    \    val vowelSetSize = vowelSetSize\n        val vowelSetMax = vowelSetMax\n\
    \        val vowelSetMin = vowelSetMin\n        val vowelSetSum = vowelSetSum\n\
    \        val vowelSetCount = (vowelSet - vowelSet).size\n        val vowelSetSize\
    \ = vowelSetSize\n        val vowelSetMax = vowelSetMax\n        val vowelSetMin\
    \ = vowelSetMin\n        val vowelSetSum = vowelSetSum\n        val vowelSetCount\
    \ = (vowelSet - vowelSet).size\n        val vowelSetSize = vowelSetSize\n    \
    \    val vowelSetMax = vowelSetMax\n        val vowelSetMin = vowelSetMin\n  \
    \      val vowelSetSum = vowelSetSum\n        val vowelSetCount = (vowelSet -\
    \ vowelSet).size\n        val vowelSetSize = vowelSetSize\n        val vowelSetMax\
    \ = vowelSetMax\n        val vowelSetMin = vowelSetMin\n        val vowelSetSum\
    \ = vowelSetSum\n        val vowelSetCount = (vowelSet - vowelSet).size\n    \
    \    val vowelSetSize = vowelSetSize\n        val vowelSetMax = vowelSetMax",
  "        val vowels = scala.util.Properties.runtime.getProperties.(\"java.util.ResourceBundle\"\
    ).getString\n        val vowelList = vowels.split(\",\")\n        val index =\
    \ word.lastIndexOf(\"u\")\n        val index2 = word.lastIndexOf(\"U\")\n    \
    \    if(index != -1 && index2 != -1){\n            if(Math.abs(index - index2)\
    \ <= 1){\n                return word.substring(index+2,index2+2)\n          \
    \  }\n        }\n        return \"\"", "        var minIndex = -1\n        var\
    \ minDistance = 1e10\n        var vowels = List(\"a\",\"e\",\"i\",\"o\",\"u\"\
    ,\"A\",\"E\",\"I\",\"O\",\"U\")\n        for {\n            i <- 0 until word.length\n\
    \        } yield {\n            val currentDistance = Math.abs(i - vowels.indexOf(word.charAt(word.length\
    \ - (word.charAt(i).toInt - 1)).toChar))\n            if (currentDistance < minDistance)\
    \ {\n                minDistance = currentDistance\n                minIndex =\
    \ i\n            }\n        }\n        if (minDistance == 1e10) return \"\"\n\
    \        if (minDistance == 0) return word.charAt(minIndex)\n        return word.charAt(minIndex)\
    \ + word.charAt(word.length - minIndex - 1)", "        val vowel = \"aeiouAEIOU\"\
    .toSet\n        def vowelCount(word : String) : Int = {\n            val vowel\
    \ = \"aeiouAEIOU\".toSet\n            val word = word.trim\n            var count\
    \ : Int = 0\n            var i : Int = 0\n            while (i < word.length)\
    \ {\n                if (word.charAt(i) == vowel(i)) {\n                    count\
    \ += 1\n                }\n                i += 1\n            }\n           \
    \ return count\n        }\n        def searchVowel(word : String) : String = {\n\
    \            val vowel = \"aeiouAEIOU\".toSet\n            var i : Int = 0\n \
    \           var j : Int = word.length - 1\n            var vowelIndex : Int =\
    \ 0\n            var vowelCount : Int = vowelCount(word)\n            while (i\
    \ < j && vowelCount > 0) {\n                if (word.charAt(i) == vowel(i)) {\n\
    \                    vowelCount -= 1\n                }\n                if (word.charAt(i)\
    \ == vowel(j)) {\n                    vowelCount += 1\n                }\n   \
    \             i += 1\n                j -= 1\n            }\n            if (vowelCount\
    \ > 0) {\n                return \"\"\n            } else {\n                return\
    \ word.substring(vowelIndex)\n            }\n        }\n        val wordList =\
    \ word.split(\"\\\\s+\")\n        val finalWordList = wordList.filter(l => l.length\
    \ >= 2 && !l.startsWith(\"\\\\s\")) // remove empty lines\n        val finalVowels\
    \ = finalWordList.map(searchVowel)\n        val finalVowelsList = finalVowels.filter(l\
    \ => l.nonEmpty)\n        var finalVowelListIndex = 0\n        val maxVowel =\
    \ finalVowelsList.map(v => v.length).max\n        val minVowel = finalVowelsList.map(v\
    \ => v.length).min\n        val maxIndexOfVowel = finalVowelsList.toList.map(_.length).indexOf(maxVowel)\n\
    \        val minIndexOfVowel = finalVowelsList.toList.map(_.length).indexOf(minVowel)\n\
    \        val finalVowel = finalVowelsList.toList.get(maxIndexOfVowel)\n      \
    \  return finalVowel", '        if (word == "") "" else getClosestVowel(word.tail.tail)',
  "        var vowels : Set[Char] = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \   var vowels_count : Int = vowels.size\n        var min_dist : Double = Double.MaxValue\n\
    \        var min_dist : Char = \"\"\n        var len : Int = word.length\n   \
    \     var i : Int = 0\n        while (i < len) {\n            if (vowels_count\
    \ > 0) {\n                val char : Char = word.charAt(i)\n                if\
    \ (vowels.contains(char)) {\n                    vowels_count -= 1\n         \
    \       } else {\n                    if (min_dist > Math.abs(char - word.charAt(i)))\
    \ {\n                        min_dist = Math.abs(char - word.charAt(i))\n    \
    \                    min_dist = min_dist / len\n                        min_dist\
    \ = min_dist.toDouble\n                    }\n                }\n            }\n\
    \            i += 1\n        }\n        if (vowels_count == 0) {\n           \
    \ return \"\"\n        } else if (min_dist > 0.1) {\n            return \"\"\n\
    \        } else {\n            val min_dist_chr = min_dist.toInt\n           \
    \ val min_dist_char = min_dist/len.toDouble\n            val min_dist_chr_char\
    \ = min_dist_char.toInt\n            if (min_dist_chr > min_dist_chr_char) {\n\
    \                return \"\"\n            } else {\n                return min_dist_chr\n\
    \            }\n        }", "        val vowels = Set(\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n        var res = \"\"\n        var vowel = \"\"\n        word.lastOption.toList.foreach(l\
    \ => {\n            if (vowels.contains(l.toLowerCase(Locale.ROOT))) {\n     \
    \           vowel = l\n            }\n        })\n        for (i <- 1 to (word.length\
    \ - 1)) {\n            if (vowels.contains(word.charAt(i).toLowerCase(Locale.ROOT)))\
    \ {\n                if (word.charAt(i) == vowel) {\n                    res =\
    \ word.substring(word.length - vowel.length, 1)\n                    break\n \
    \               }\n            }\n        }\n        if (res.length == 0) {\n\
    \            res = word.lastOption\n        }\n        return res", "        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\")\n        var wordArray = word.split(\"\")\n        wordArray = wordArray.reverse.takeWhile(x\
    \ => !vowels.contains(x)).reverse\n        val resultArray = wordArray.toArray\n\
    \        if (resultArray.length <= 1) \"\"\n        else {\n            var i\
    \ = 0\n            val minPos = wordArray.length - 2\n            val minDiff\
    \ = math.abs(resultArray(i) - resultArray(minPos)) + 2\n            for (i <-\
    \ 0 until minPos) {\n                val diff = math.abs(resultArray(i) - resultArray(minPos))\n\
    \                if (diff < minDiff) minDiff = diff\n            }\n         \
    \   val finalResult = resultArray(minPos)\n            vowels.find(x => x == finalResult)\n\
    \        }", "        var vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        var vowelIndex = word.size\n        var leftIndex = word.lastIndexOf(\"\
    a\")\n        var rightIndex = word.lastIndexOf(\"e\")\n        var leftCount\
    \ = word.lastIndexOf(\"a\") + 1 == word.lastIndexOf(\"e\")\n        var rightCount\
    \ = word.lastIndexOf(\"e\") + 1 == word.lastIndexOf(\"i\")\n        var leftFound\
    \ = false\n        var rightFound = false\n        while (!leftFound || !rightFound)\
    \ {\n            if ((leftIndex - leftCount >= 0) && (rightIndex - rightCount\
    \ >= 0) && (leftIndex - leftCount > rightIndex - rightCount)) {\n            \
    \    if (vowels.exists(word.substring(leftIndex - leftCount, leftIndex).contains))\
    \ {\n                    leftIndex = leftIndex - leftCount\n                 \
    \   leftFound = true\n                } else {\n                    leftIndex\
    \ = leftIndex - 1\n                }\n            } else if (leftIndex - leftCount\
    \ >= 0) {\n                if (vowels.exists(word.substring(leftIndex - leftCount,\
    \ leftIndex).contains)) {\n                    leftIndex = leftIndex - leftCount\n\
    \                    leftFound = true\n                } else {\n            \
    \        leftIndex = leftIndex - 1\n                }\n            } else {\n\
    \                if ((rightIndex - rightCount >= 0) && (rightIndex - rightCount\
    \ > leftIndex - leftCount)) {\n                    if (vowels.exists(word.substring(rightIndex\
    \ - rightCount, rightIndex).contains)) {\n                        rightIndex =\
    \ rightIndex - rightCount\n                        rightFound = true\n       \
    \             } else {\n                        rightIndex = rightIndex - 1\n\
    \                    }\n                } else if (rightIndex - rightCount >=\
    \ 0) {\n                    if (vowels.exists(word.substring(rightIndex - rightCount,\
    \ rightIndex).contains)) {\n                        rightIndex = rightIndex -\
    \ rightCount\n                        rightFound = true\n                    }\
    \ else {\n                        rightIndex = rightIndex - 1\n              \
    \      }\n                } else {\n                    rightIndex = word.lastIndexOf(\"\
    e\")\n                    rightFound = true\n                }\n            }\n\
    \        }\n        vowelIndex = leftIndex\n        val vowel = word.substring(vowelIndex,\
    \ vowelIndex + 1).trim\n        return vowel", "        var vowels = Set[Char](\
    \ 'a', 'e', 'i', 'o', 'u' );\n        var vowelCount = word.count(\"a\");\n\n\
    \        var lastIndex = word.lastIndexOf('u');\n        if (lastIndex >= 0) {\n\
    \            vowelCount += word.lastIndexOf('u') - lastIndex + 1;\n        }\n\
    \        var resultIndex =0;\n        for (i <- word.indices) {\n            if\
    \ (vowels.contains(word.charAt(i)) && vowelCount == 0)\n                resultIndex\
    \ = i;\n            vowelCount += 1;\n        }\n\n        if (vowelCount > 0)\
    \ {\n            var result = word.substring(resultIndex, resultIndex + vowelCount);\n\
    \            if (result.isEmpty) result = \"\";\n        }\n        else result\
    \ = \"\";\n        return result;", "        // First we split up the word into\
    \ two lists consonants and vowels\n        val consonants = word.filter(_ >= 'A'\
    \ && _ <= 'Z')\n        val vowels      = word.filter(_ >= 'a' && _ <= 'z')\n\
    \        // Then we sort the two lists and iterate over the vowel until we find\
    \ one \n        // that stands between two consonants from the right side of the\
    \ word.\n        // If the two consonants met in the right side of the word, return\
    \ that vowel.\n        val vowelIterator = vowels.dropWhile(_.compareToIgnoreCase(consonants.last)\
    \ < 0) \n                              .takeWhile(_.compareToIgnoreCase(consonants.last)\
    \ < 0) \n                              .dropWhile(_.compareToIgnoreCase(consonants.last)\
    \ < 0) \n                              .takeWhile(_.compareToIgnoreCase(consonants.last)\
    \ < 0) \n                              .iterator\n        if(vowelIterator.hasNext)\
    \ {\n            vowelIterator.next\n        } else {\n            \"\"\n    \
    \    }", "        val consonants = consonantsFromEnds(word)\n        val vowels\
    \ = vowelsFromEnd(word)\n        val vowelsSet = vowels.toSet\n        val consonantsSet\
    \ = consonants.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n   \
    \     val consonantsSetIterator = consonantsSet.iterator\n        var results\
    \ : String = \"\"\n        while(vowelsSetIterator.hasNext && consonantsSetIterator.hasNext)\
    \ {\n            if(vowelsSetIterator.next() == consonantsSetIterator.next())\n\
    \                results = vowelsSetIterator.next() \n        }\n        results",
  "        if (word.length < 2) return \"\"\n        val vowels = \"aeiouAEIOU\"\n\
    \        val vowelIndexes = vowels.zipWithIndex.filter{ case (a, i) => word.charAt(i)\
    \ != a }\n        return vowelIndexes.map(_.first).map{ i => vowels.charAt(i)\
    \ }.getOrElse(\"\")", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        var vowelPosition = 0\n        val arr = new Array[Int](word.length)\n\
    \        for ( i <- 0 until word.length ) {\n            arr(i) = word.charAt(i).toChar.toInt\n\
    \        }\n        var minVowelIndex = 0\n        val min = math.min(arr(vowelPosition\
    \ + 1), arr(vowelPosition + 2))\n        for (i <- 0 until vowels.length ) {\n\
    \            if (arr(vowelPosition + i) == min) {\n                minVowelIndex\
    \ = i\n                break\n            }\n        }\n        vowels.find(vowel\
    \ => arr(vowelPosition + minVowelIndex + 1) == vowel)", "        val vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n        var result = \"\"\n        val wordArray\
    \ = word.split(\"\")\n        val wordLength = wordArray.length\n        if (wordLength\
    \ <= 1) {\n            result = \"\"\n        }\n        else {\n            wordArray.zipWithIndex.foreach\
    \ { case (item, index) =>\n                val right = index + 1\n           \
    \     val left = right - 1\n                if (wordLength >= index + 1) {\n \
    \                   if (vowels.contains(wordArray(right).toLowerCase) && \n  \
    \                      vowels.contains(wordArray(left).toLowerCase)) {\n     \
    \                   if (result != \"\" && result != wordArray(right)) {\n    \
    \                        result = \"\"\n                        }\n          \
    \              result = wordArray(right)\n                    }\n            \
    \    }\n            }\n        }\n        result", "        val consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        val vowels = \"aeiouAEIOU\"\
    ;\n        val vowel_consonants = \"AaEeIiOoUu\";\n        val vowel_consonant_index\
    \ = consonants.indexOf(vowel_consonants);\n        val index = word.indexOfFirst(consonants)\n\
    \        var vowelIndex = 0;\n        while (index > -1) {\n            if (vowels.contains(word.charAt(index\
    \ + vowel_consonant_index))) {\n                vowelIndex = index;\n        \
    \    }\n            index = word.indexOfFirst(consonants, index + 1);\n      \
    \  }\n        if (vowelIndex != 0) word.substring(vowelIndex, word.length);\n\
    \        else \"\";", "        val consonantsList = new ListBuffer[String]()\n\
    \        val vowelsList = new ListBuffer[String]()\n\n        for(i <- 0 until\
    \ word.length){\n            val char = word.charAt(i)\n            if(char.equals('a'))\
    \ vowelsList ++= List(\"a\",\"e\",\"i\",\"o\",\"u\")\n            if(char.equals('e'))\
    \ vowelsList ++= List(\"e\",\"i\",\"o\",\"u\")\n            if(char.equals('i'))\
    \ vowelsList ++= List(\"i\",\"o\",\"u\")\n            if(char.equals('o')) vowelsList\
    \ ++= List(\"o\",\"u\")\n            if(char.equals('u')) vowelsList ++= List(\"\
    u\")\n\n            if(!vowelsList.contains(char)) consonantsList ++= List(char)\n\
    \        }\n        val lastVowelIndex = vowelsList.length-1\n        val vowel\
    \ = vowelsList(lastVowelIndex)\n\n        val consonants = consonantsList.toList.reverse\n\
    \        val lastConsonantIndex = consonants.length-1\n        val consonant =\
    \ consonants(lastConsonantIndex)\n\n        if(vowel.equals(consonant)){\n   \
    \         return \"\"\n        }\n        if(vowel.equals(lastConsonant)){\n \
    \           return vowel\n        }\n        if(vowel.equals(lastVowelIndex)){\n\
    \            return consonant\n        }\n        return \"\"", "        val vowels\
    \ = Array(\"a\",\"e\",\"i\",\"o\",\"u\")\n        val vowels2 = Array(\"a\",\"\
    e\",\"i\",\"o\",\"u\",\"y\")\n        val vowels3 = Array(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"y\",\"u\")\n        val vowels4 = Array(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\")\n        val vowels5 = Array(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\",\"g\")\n        val vowels6 = Array(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\")\n        val vowels7 = Array(\"a\",\"\
    e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\")\n        val vowels8\
    \ = Array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"\
    k\")\n        val vowels9 = Array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"\
    r\",\"g\",\"u\",\"c\",\"k\",\"s\")\n        val vowels10 = Array(\"a\",\"e\",\"\
    i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"k\",\"s\",\"v\")\n     \
    \   val vowels11 = Array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\"\
    ,\"u\",\"c\",\"k\",\"s\",\"v\",\"y\")\n        val vowels12 = Array(\"a\",\"e\"\
    ,\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"k\",\"s\",\"v\",\"y\"\
    ,\"i\")\n        val vowels13 = Array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\"\
    ,\"r\",\"g\",\"u\",\"c\",\"k\",\"s\",\"v\",\"y\",\"i\",\"r\")\n        val vowels14\
    \ = Array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"\
    k\",\"s\",\"v\",\"y\",\"i\",\"r\",\"g\")\n        val vowels15 = Array(\"a\",\"\
    e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"k\",\"s\",\"v\",\"\
    y\",\"i\",\"r\",\"g\",\"k\")\n        val vowels16 = Array(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"y\",\"u\",\"r\",\"g\",\"u\",\"c\",\"k\",\"s\",\"", "        var position\
    \ = 1\n        var vowel = word.charAt(position)\n        var index = 0\n    \
    \    while (index != -1) {\n            if (word.charAt(index) == vowel) {\n \
    \               index = index + 1\n                position = index\n        \
    \    }\n            else {\n                index = word.lastIndexOf(\"aeiouy\"\
    , index)\n            }\n        }\n        return \"\"", "        val vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\")\n        var current = 0\n        var\
    \ min = 1000\n        var result: String = null\n        for(i <- word.indices)\
    \ {\n            if(vowels.contains(word.charAt(i))) {\n                current\
    \ = i\n                val length = word.size - 1\n                for(j <- current\
    \ + 1 to length) {\n                    val candidate = word.substring(j, j +\
    \ 1)\n                    val pos = candidate.indexOf(candidate.last)\n      \
    \              if(pos > 0 && pos < min) {\n                        min = pos\n\
    \                        result = candidate\n                    }\n         \
    \       }\n            }\n        }\n        return result", "        var count\
    \ = 0\n        var vowel = \"\"\n        val reverse = word reverse\n        val\
    \ reverseList = reverse.toList\n        val reverseSubset = reverseList.slice(2,\
    \ reverseList.length)\n\n        val vowelSet = List(\"a\",\"e\",\"i\",\"o\",\"\
    u\")\n        var firstVowel = \"\"\n        for(i <- 0 until reverseList.length){\n\
    \            if(vowelSet.contains(reverseList(i)){\n                firstVowel\
    \ = reverseList(i)\n                count = count+1\n            }\n        }\n\
    \n        if(reverseList.length > 2){\n            val vowelSet2 = List(\"a\"\
    ,\"e\",\"i\",\"o\",\"u\")\n            var secondVowel = \"\"\n            for(i\
    \ <- reverseList.length until reverseList.length - 1){\n                if(vowelSet2.contains(reverseList(i)){\n\
    \                    secondVowel = reverseList(i)\n                    count =\
    \ count+1\n                }\n            }\n            if(firstVowel != \"\"\
    \ && secondVowel != \"\"){\n                if(reverseList.length > 1){\n    \
    \                val closestVowel = firstVowel.min(secondVowel)\n            \
    \        if(closestVowel != \"\"){\n                        return closestVowel\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ vowel", "        val pattern = word splitBy (_===\"a\")\n        val vowels\
    \ = pattern map (x => x takeWhile (_!==\"z\")) toList\n        val vowelsSet =\
    \ vowels sort\n        val isVowel = vowelsSet.contains(pattern(0).toLowerCase)\n\
    \        if(isVowel) {\n            val index = vowels.indexOf(pattern(0).toLowerCase)\n\
    \            if (index < vowels.lastIndexOf(pattern(0).toLowerCase)) {\n     \
    \           vowels(index+1)\n            } else {\n                vowels(index-1)\n\
    \            }\n        } else {\n            \"\"\n        }", "        var vowel\
    \ = word.substring(word.length - 2, word.length - 1)\n        var vowelIndex =\
    \ 0\n        var index = 0\n        while (index < word.length && vowelIndex <\
    \ vowel.length && vowel(vowelIndex) <=> word(index) <=> vowel(vowelIndex)) {\n\
    \            index += 1\n            vowelIndex += 1\n        }\n        if (vowelIndex\
    \ == vowel.length) {\n            if (vowel.nonEmpty) {\n                return\
    \ vowel\n            }\n            return \"\"\n        }\n        return word.substring(index\
    \ - 1, index)", "         val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n         if (word.length > 0) {\n             val head = word.last\n\
    \             val vowelIndex = vowels.indexOf(head)\n             val start =\
    \ vowelIndex + 1\n             val end = word.length - 1\n             val vowelEnd\
    \ = vowels.indexOf(word.last)\n             val vowelStart = vowelEnd + 1\n  \
    \           val vowels = word.substring(start, end).split('')\n             val\
    \ wordLength = word.length\n             if (wordLength == 1) {\n            \
    \     \"\"\n             } else if (wordLength > 2) {\n                 getClosestVowel(word.substring(vowelStart\
    \ - 1, vowelEnd + 1))\n             } else if (wordLength == 2) {\n          \
    \       if (vowelStart < vowelEnd) {\n                     getClosestVowel(word.substring(vowelStart\
    \ - 1, vowelEnd + 1))\n                 } else {\n                     \"\"\n\
    \                 }\n             } else {\n                 \"\"\n          \
    \   }\n         } else {\n             \"\"\n         }", "        val vowels\
    \ = \"a\" :: \"e\" :: \"i\" :: \"o\" :: \"u\" :: \"y\" :: \"A\" :: \"E\" :: \"\
    I\" :: \"O\" :: \"U\" :: \"Y\" :: Nil\n        var vowelIndex = 0\n        var\
    \ temp = 0\n        var vowelLen = vowels.length\n        var wordLen = word.length\n\
    \        var result = \"\"\n        for (i <- 0 until wordLen) {\n           \
    \ temp = word(i)\n            for (j <- 0 until vowelLen) {\n                if\
    \ (temp == vowels(j)) {\n                    if (j == vowelLen-1) {\n        \
    \                result += temp\n                        vowelIndex += 1\n   \
    \                     break\n                    }\n                    vowelIndex\
    \ += 1\n                    break\n                }\n            }\n        }\n\
    \        return result", "        var vowelIndex = word.indexOf(\"aeiouy\")\n\
    \        if (vowelIndex > 0) {\n            return \"\"\n        }\n        vowelIndex\
    \ = word.indexOf(\"uioy\")\n        if (vowelIndex > 0) {\n            return\
    \ \"\"\n        }\n        vowelIndex = word.indexOf(\"ouiy\")\n        if (vowelIndex\
    \ > 0) {\n            return \"\"\n        }\n        vowelIndex = word.indexOf(\"\
    iy\")\n        if (vowelIndex > 0) {\n            return \"\"\n        }\n   \
    \     vowelIndex = word.indexOf(\"eoui\")\n        if (vowelIndex > 0) {\n   \
    \         return \"\"\n        }\n        vowelIndex = word.indexOf(\"eeou\")\n\
    \        if (vowelIndex > 0) {\n            return \"\"\n        }\n        vowelIndex\
    \ = word.indexOf(\"ieou\")\n        if (vowelIndex > 0) {\n            return\
    \ \"\"\n        }\n        vowelIndex = word.indexOf(\"iooy\")\n        if (vowelIndex\
    \ > 0) {\n            return \"\"\n        }\n        vowelIndex = word.indexOf(\"\
    oyay\")\n        if (vowelIndex > 0) {\n            return \"\"\n        }\n \
    \       vowelIndex = word.indexOf(\"uyay\")\n        if (vowelIndex > 0) {\n \
    \           return \"\"\n        }\n        vowelIndex = word.indexOf(\"ay\")\n\
    \        if (vowelIndex > 0) {\n            return \"\"\n        }\n        vowelIndex\
    \ = word.indexOf(\"eay\")\n        if (vowelIndex > 0) {\n            return \"\
    \"\n        }\n        vowelIndex = word.indexOf(\"iay\")\n        if (vowelIndex\
    \ > 0) {\n            return \"\"\n        }\n        vowelIndex = word.indexOf(\"\
    oi\")\n        if (vowelIndex > 0) {\n            return \"\"\n        }\n   \
    \     vowelIndex = word.indexOf(\"ou\")\n        if (vowelIndex > 0) {\n     \
    \       return \"\"\n        }\n        vowelIndex = word.indexOf(\"y\")\n   \
    \     if (vowelIndex > 0) {\n            return \"\"\n        }\n        vowelIndex\
    \ = word.indexOf(\"u\")\n        if (vowelIndex > 0) {\n            return \"\"\
    \n        }\n        vowelIndex = word.indexOf(\"a\")\n        if (vowelIndex\
    \ > 0) {\n            return \"\"\n        }\n        vowelIndex = word.indexOf(\"\
    e\")\n        if (vowelIndex > 0) {\n            return \"\"\n        }\n    \
    \    vowelIndex = word.indexOf(\"i\")\n        if (vowelIndex > 0) {\n       \
    \     return \"\"\n        }\n        vowelIndex = word.indexOf(\"o\")\n     \
    \   if (vowelIndex > 0) {\n            return \"\"\n        }\n        vowelIndex\
    \ = word.indexOf(\"u\")\n        if (vowelIndex > 0) {\n            return \"\"\
    \n        }\n        vowelIndex = word.indexOf(\"a\")\n        if (vowelIndex\
    \ > 0) {\n            return \"\"\n        }\n        vowelIndex = word.indexOf(\"\
    e\")\n        if (vowelIndex > 0) {\n            return \"\"\n        }\n    \
    \    vowelIndex = word.indexOf(\"i\")\n        if (vowelIndex > 0) {\n       \
    \     return \"\"\n        }\n", "       val vowels = List('u', 'U', 'a', 'A')\n\
    \        val count = word.length - 1\n        val vowelIndexList = word.substring(count,\
    \ count+1).split(\"u\").map(_.toLowerCase).toSet\n        vowelIndexList match\
    \ {\n            case Nil => \"\"\n            case vowels :: _ => vowels.minBy(v\
    \ => word.indexOf(v.toLowerCase + v.charAt(1))).toLowerCase\n        }", "   \
    \     //1\n        val vowels = \"aeiouAEIOU\".toList\n        //2\n        var\
    \ result = \"null\"\n        //3\n        for (x<-vowels.reverse) {\n        \
    \    //4\n            for (y<-vowels.reverse) {\n                //5\n       \
    \         if (word.indexOf(x.toString) >= 0) {\n                    //6\n    \
    \                if (word.indexOf(y.toString) >= 0) {\n                      \
    \  //7\n                        //8\n                        if (word.indexOf(x.toString)\
    \ < word.indexOf(y.toString)) {\n                            //9\n           \
    \                 result = x\n                            break\n            \
    \            } else {\n                            //10\n                    \
    \        result = y\n                            break\n                     \
    \   }\n                    } else {\n                        //11\n          \
    \              result = x\n                        break\n                   \
    \ }\n                } else {\n                    //12\n                    result\
    \ = y\n                    break\n                }\n            }\n        }\n\
    \        result", "        var vowels = \"aeiouAEIOU\".toList\n        var currentVowel\
    \ = \"\"\n        var lastVowel = \"\"\n\n        for(i <- 0 until word.length){\n\
    \            if(vowels.contains(word.charAt(i))){\n                if(currentVowel\
    \ != \"\"){\n                    if(word.charAt(i) != currentVowel){\n       \
    \                 lastVowel = currentVowel\n                    }\n          \
    \          currentVowel = word.charAt(i)\n                }else{\n           \
    \         currentVowel = word.charAt(i)\n                }\n            }else{\n\
    \                currentVowel = \"\"\n            }\n        }\n        if(currentVowel\
    \ != \"\"){\n            vowels.remove(word.charAt(word.length-1))\n         \
    \   if(word.charAt(word.length-2) != lastVowel){\n                lastVowel =\
    \ word.charAt(word.length-2)\n            }\n        }\n        return lastVowel",
  "        val firstCons = word.lastIndexWhere(Character.isLetter)\n        val lastCons\
    \ = word.lastIndexWhere(Character.isLetterOrDigit)\n        if (firstCons == lastCons)\
    \ {\n            if (word.charAt(firstCons) == \"a\" && !word.startsWith(\"ab\"\
    ) && !word.startsWith(\"abv\") && !word.startsWith(\"abs\")) {\n             \
    \   \"\"\n            } else {\n                word.charAt(firstCons)\n     \
    \       }\n        } else {\n            val lowerWord = word.substring(0, firstCons)\n\
    \            val upperWord = word.substring(firstCons, lastCons)\n           \
    \ var lowerIndex = upperWord.lastIndexWhere(Character.isLetter)\n            var\
    \ upperIndex = upperWord.lastIndexWhere(Character.isLetterOrDigit)\n         \
    \   while (lowerIndex < upperIndex) {\n                lowerIndex = upperWord.lastIndexWhere(Character.isLetter,\
    \ lowerIndex + 1)\n                upperIndex = upperWord.lastIndexWhere(Character.isLetterOrDigit,\
    \ lowerIndex + 1)\n            }\n            val lowerString = upperWord.substring(lowerIndex,\
    \ lowerIndex + 1).mkString\n            val upperString = upperWord.substring(lowerIndex\
    \ + 1, upperIndex).mkString\n            var vowel = \"\"\n            if (lowerString.equalsIgnoreCase(upperString))\
    \ {\n                vowel = lowerString\n            } else {\n             \
    \   vowel = upperString\n            }\n            vowel\n        }", "     \
    \   def checkConsonant(index : Int, letters : String, found : mutable.Set[String])\
    \ : Unit = {\n            if(letters.isEmpty) found.add(\"\")\n            else\
    \ {\n                if(index+1 >= letters.length) found.add(letters.substring(index))\n\
    \                else {\n                    if(letters.charAt(index+1).matches(\"\
    [aeiouAEIOU]\"))\n                        checkConsonant(index+1, letters.substring(index+1),\
    \ found)\n                    else checkConsonant(index+1, letters.substring(index),\
    \ found)\n                }\n            }\n        }\n        val letters = word.split(\"\
    \").map(_.toLowerCase).toSet\n        val found = mutable.Set[String]()\n    \
    \    checkConsonant(0, letters, found)\n        found.toSeq.minBy(_.length)",
  "        val pattern = Pattern.compile(\"[aeiou]\", Pattern.UNICODE_CHARACTER_CLASS)\n\
    \        val vowels = mutable.ListBuffer.empty[String]\n        var index = 0\n\
    \        var closestVowel = \"\"\n        while(index != -1){\n            val\
    \ result = pattern.matcher(word).find() match {\n                case true =>\n\
    \                    if(index < (word.length())){\n                        val\
    \ c = word.charAt(index)\n                        if(vowels.contains(c)) {\n \
    \                           closestVowel = closestVowel + c\n                \
    \            closestVowel = closestVowel\n                        } else {\n \
    \                           vowels.append(c)\n                        }\n    \
    \                    index++\n                    } else {\n                 \
    \       closestVowel = \"\"\n                    }\n                case _ =>\
    \ closestVowel = \"\"\n            }\n        }\n        closestVowel", "    \
    \    val vowelList = new mutable.ListBuffer[Char]()\n        val consonantList\
    \ = new mutable.ListBuffer[Char]()\n        val consonantsLength =word.length-1\n\
    \        val vowelsLength =word.length\n\n        for(index <- consonantsLength\
    \ to vowelsLength){\n            if(word.charAt(index) == 'a' || word.charAt(index)\
    \ == 'e' || word.charAt(index) == 'i' || word.charAt(index) == 'o' || word.charAt(index)\
    \ == 'u'){\n                consonantList += word.charAt(index)\n            }\n\
    \            else{\n                vowelList += word.charAt(index)\n        \
    \    }\n        }\n        if (consonantList.isEmpty || vowelList.isEmpty)\n \
    \           return \"\"\n        consonantList.sortWith((x,y)=>{return x<y}).last\n\
    \        vowelList.sortWith((x,y)=>{return x<y}).last", "        var vowel : String\
    \ = \"\"\n        for (i <- word.length + 1 to word.length -1) {\n           \
    \ if (word.substring(i, i+1).contains(\"aeiou\")) {\n                vowel = word.substring(i,\
    \ i+1)\n            }\n        }\n        return vowel", "        val vowels =\
    \ \"AEIOUaeiou\"\n        val reversed = new ListBuffer[Char]()\n        for (v\
    \ <- vowels) {\n            reversed.prepend(v)\n            reversed.prepend(v)\n\
    \        }\n        val indices = word.zipWithIndex.filter { case (c,i) =>\n \
    \           val ind = reversed.indexOf(c)\n            reversed.slice(ind,ind\
    \ + 2).forall(vowels.contains)\n        }.map(_._2).max\n        val lastVowels\
    \ = indices.map(i => reversed.slice(indices.size - 1 - i, indices.size - 1 - i\
    \ + 1).mkString(\"\")).mkString(\"\")\n        if (lastVowels.isEmpty) {\n   \
    \         \"\"\n        } else {\n            lastVowels\n        }", "      \
    \  var firstVowel = vowels.head\n        var secondVowel = vowels.last\n     \
    \   var vowelIndex = 0\n        var foundIndex = 0\n        var isFirstVowel =\
    \ false\n        var isSecondVowel = false\n        var lastVowelIndex = 0\n \
    \       var firstVowelIndex = 0\n        var secondVowelIndex = 0\n        var\
    \ wordArray = word.split(\"\")\n        for(index <- 0 until wordArray.length){\n\
    \            if(isFirstVowel){\n                if(wordArray[index].equals(firstVowel)){\n\
    \                    foundIndex = index\n                    isFirstVowel = false\n\
    \                    isSecondVowel = true\n                    wordIndex++\n \
    \               }\n            }\n            if(isSecondVowel){\n           \
    \     if(wordArray[index].equals(secondVowel)){\n                    foundIndex\
    \ = index\n                    isFirstVowel = true\n                    isSecondVowel\
    \ = false\n                    wordIndex++\n                }\n            }\n\
    \            if(wordArray[index].equals(firstVowel)){\n                firstVowelIndex\
    \ = index\n                isFirstVowel = true\n                wordIndex++\n\
    \            }\n            if(wordArray[index].equals(secondVowel)){\n      \
    \          secondVowelIndex = index\n                isFirstVowel = true\n   \
    \             wordIndex++\n            }\n        }\n        if(foundIndex ==\
    \ -1){\n            return \"\"\n        }\n        while(vowelIndex != -1){\n\
    \            if(wordArray[vowelIndex].equals(firstVowel) || wordArray[vowelIndex].equals(secondVowel)){\n\
    \                lastVowelIndex = vowelIndex\n            }\n            vowelIndex--\n\
    \        }\n        if(vowelIndex != -1){\n            vowelIndex--\n        }\n\
    \        if(wordArray[vowelIndex].equals(firstVowel) && isFirstVowel){\n     \
    \       vowelIndex--\n            isFirstVowel = false\n            firstVowelIndex--\n\
    \        }\n        if(wordArray[vowelIndex].equals(secondVowel) && isSecondVowel){\n\
    \            vowelIndex--\n            isSecondVowel = false\n            secondVowelIndex--\n\
    \        }\n        if(vowelIndex == -1){\n            return \"\"\n        }\n\
    \        if(lastVowelIndex != -1){\n            return wordArray.substring(lastVowelIndex\
    \ + 1, foundIndex).substring(0,1)\n        }\n        if(firstVowelIndex != -1){\n\
    \            return wordArray.substring(firstVowelIndex + 1, foundIndex).substring(0,1)\n\
    \        }\n        if(secondVowelIndex != -1){\n            return wordArray.substring(secondVow",
  "        var vowel = \"u\" // assume first vowel is u\n        var prevVowel = \"\
    u\" // assume first vowel is u\n        var cons = word.substring(0,word.indexOf('a'))\
    \ //assuming 'a' is the beginning of the word\n        var endCons = word.substring(word.indexOf('a')+1,\
    \ word.length) //assuming 'a' is the beginning of the word\n        // iterate\
    \ through all consonants in the word and find the closest vowel that is \n   \
    \     // not the same as the first vowel in the beginning of the word\n      \
    \  for (c <- cons) {\n            if(vowel != prevVowel) {\n                vowel\
    \ = c\n                prevVowel = vowel\n            }\n        }\n        //\
    \ if the vowel was not found in the beginning of the word, find the closest vowel\
    \ \n        // not the same as the last vowel in the end of the word\n       \
    \ if(vowel != prevVowel) {\n            for (c <- endCons) {\n               \
    \ if(c!=vowel) {\n                    vowel = c\n                    prevVowel\
    \ = vowel\n                }\n            }\n        }\n        return vowel",
  "        var start = -1\n        var end = -1\n        var result = \"\"\n     \
    \   word.foreach(c => \n            c match {\n                case 'a' | 'e'\
    \ | 'i' | 'o' | 'u' => start = word.indexOf(c)\n                case \"A\" | \"\
    E\" | \"I\" | \"O\" | \"U\" => start = word.indexOf(c)\n                case _\
    \ =>\n                case _ =>\n                case _ =>\n                case\
    \ _ =>\n                case _ =>\n                case _ =>\n               \
    \ case _ =>\n            })\n        word.foreach(c => {\n            c match\
    \ {\n                case 'a' | 'e' | 'i' | 'o' | 'u' => end = word.indexOf(c)\n\
    \                case \"A\" | \"E\" | \"I\" | \"O\" | \"U\" => end = word.indexOf(c)\n\
    \                case _ =>\n                case _ =>\n                case _\
    \ =>\n                case _ =>\n                case _ =>\n                case\
    \ _ =>\n            })\n            \n            if(start >= 0 && end >= 0) {\n\
    \                var mid = start + (end - start) / 2\n                result match\
    \ {\n                    case \"\" => result = word.charAt(mid)\n            \
    \        case _ => result = word.charAt(mid)\n                }\n            }\n\
    \        })\n        \n        return result", '        // Your code here', " \
    \       val vowels = \"a\xC1\xC0A\xC2\xC3\u0102\u0100\u0104\xC5\u0104\xC7\u0106\
    \u010A\u010C\u0107\u0109\u010B\u010F\u010E\xD3\xD2\xD4\xD5\xD6\u0150\u014F\u014E\
    \xDC\u016E\u016C\u016A\u016C\u0168\u016A\u0170\u016E\u0172\u0174\u0175\u0176\xDD\
    \u0179\u017B\u0179\u017D\xDF\u017D\u017A\u017C\u017E\u011D\u011F\u011E\u011C\u011F\
    \u011D\u0121\u0120\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012A\u012B\
    \u012C\u012D\u012E\u012F\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\
    \u0139\u013A\u013B\u013C\u013D\u013E\u013F\u0140\u0141\u0142\u0143\u0144\u0145\
    \u0146\u0147\u0148\u0149\u014B\u014C\u014D\u014E\u014F\u0150\u0151\u0152\u0153\
    \u0154\u0155\u0156\u0157\u0158\u0159\u015A\u015B\u015C\u015D\u015E\u015F\u0160\
    \u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016A\u016B\u016C\u016D\
    \u016E\u016F\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017A\
    \u017B\u017C\u017D\u017E\u017F\xC0\xC1\xC2\xC3\u0102\u0100\u0104\xC5\u0104\xC7\
    \u0106\u010A\u010C\u0107\u0109\u010B\u010F\u010E\xD3\xD2\xD4\xD5\xD6\u0150\u014F\
    \u014E\xDC\u016E\u016C\u016A\u016C\u0168\u016A\u0170\u016E\u0172\u0174\u0175\u0176\
    \xDD\u0179\u017B\u0179\u017D\xDF\u017D\u017A\u017C\u017E\u011D\u011F\u011E\u011C\
    \u011F\u011D\u0121\u0120\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012A\
    \u012B\u012C\u012D\u012E\u012F\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\
    \u0138\u0139\u013A\u013B\u013C\u013D\u013E\u013F\u0140\u0141\u0142\u0143\u0144\
    \u0145\u0146\u0147\u0148\u0149\u014B\u014C\u014D\u014E\u014F\u0150\u0151\u0152\
    \uFFFD", "        if (word.indexOf(\"a\") != -1 || word.indexOf(\"e\") != -1 ||\
    \ word.indexOf(\"i\") != -1 || word.indexOf(\"o\") != -1 || word.indexOf(\"u\"\
    ) != -1) {\n            var vowels = \"aeiouAEIOU\"\n            var vowelIndex\
    \ = 0\n            var vowelIndexEnd = word.length - 1;\n            while (vowelIndex\
    \ < vowelIndexEnd) {\n                var vowel = vowels(vowelIndex);\n      \
    \          var vowelNext = vowels(vowelIndex + 1);\n                if (vowelNext\
    \ == vowel) {\n                    vowelIndex += 2\n                } else {\n\
    \                    var index = word.indexOf(vowel);\n                    if\
    \ (index != -1) {\n                        if (index < vowelIndexEnd) {\n    \
    \                        vowelIndex = index\n                        } else {\n\
    \                            vowelIndexEnd = index - 1\n                     \
    \   }\n                    }\n                }\n            }\n            return\
    \ word.substring(vowelIndex + 1, vowelIndexEnd + 1);\n        } else {\n     \
    \       return \"\"\n        }", "        val wordWithVowel = word.filter( _.isLetter\
    \ || _.isUpperCase || _.isLowerCase ).reverse\n        val vowel = wordWithVowel.filter(x\
    \ => x match {\n            case s if s.startsWith(\"a\") || s.startsWith(\"e\"\
    ) || s.startsWith(\"i\") || s.startsWith(\"o\") || s.startsWith(\"u\") => true\n\
    \            case _ => false\n        })\n        return vowel.headOption.map(\
    \ x => x.toLowerCase ).getOrElse(\"\")", "        val vowelMap : Map[Char,Int]\
    \ = word.map(x => (x.toLowerCase , 1)).toMap\n        val v1 = vowelMap.get('u')\n\
    \        val v2 = vowelMap.get('v')\n        val v3 = vowelMap.get('w')\n    \
    \    val v4 = vowelMap.get('x')\n        val v5 = vowelMap.get('y')\n        val\
    \ v6 = vowelMap.get('z')\n        val conMap : Map[Char,Int] = word.map(x => (x.toLowerCase\
    \ , 1)).toMap\n        val c1 = conMap.get('c')\n        val c2 = conMap.get('d')\n\
    \        val c3 = conMap.get('e')\n        val c4 = conMap.get('f')\n        val\
    \ c5 = conMap.get('g')\n        val c6 = conMap.get('h')\n        val c7 = conMap.get('i')\n\
    \        val c8 = conMap.get('j')\n        val c9 = conMap.get('k')\n        val\
    \ c10 = conMap.get('l')\n        val c11 = conMap.get('m')\n        val c12 =\
    \ conMap.get('n')\n        val c13 = conMap.get('o')\n        val c14 = conMap.get('p')\n\
    \        val c15 = conMap.get('q')\n        val c16 = conMap.get('r')\n      \
    \  val c17 = conMap.get('s')\n        val c18 = conMap.get('t')\n        val c19\
    \ = conMap.get('u')\n        val c20 = conMap.get('v')\n        val c21 = conMap.get('w')\n\
    \        val c22 = conMap.get('x')\n        val c23 = conMap.get('y')\n      \
    \  val c24 = conMap.get('z')\n        val c25 = conMap.get('a')\n        val c26\
    \ = conMap.get('b')\n        val c27 = conMap.get('c')\n        val c28 = conMap.get('d')\n\
    \        val c29 = conMap.get('e')\n        val c30 = conMap.get('f')\n      \
    \  val c31 = conMap.get('g')\n        val c32 = conMap.get('h')\n        val c33\
    \ = conMap.get('i')\n        val c34 = conMap.get('j')\n        val c35 = conMap.get('k')\n\
    \        val c36 = conMap.get('l')\n        val c37 = conMap.get('m')\n      \
    \  val c38 = conMap.get('n')\n        val c39 = conMap.get('o')\n        val c40\
    \ = conMap", "        var vowel = word.tail.charAt(word.tail.length-1).toChar\n\
    \        var consonant = word.charAt(word.length-1)\n\n        var firstVowelFound\
    \ = false \n        var secondVowelFound = false\n\n        var vowelsIndex =\
    \ 0\n        var vowelsCount = word.length\n\n        var consonantsIndex = 0\n\
    \        var consonantsCount = word.length\n\n        var minimumVowelIndex =\
    \ 0\n        var minimumVowelCount = 0\n\n        word.lastIndexWhile((letter)\
    \ =>{\n            if(letter ==='a'){\n                if(firstVowelFound){\n\
    \                    firstVowelFound = false\n                    return false\n\
    \                }else{\n                    vowelsIndex++\n                 \
    \   vowelsCount--\n                    vowel = word.substring(vowelsIndex,vowelsCount).toChar\n\
    \                    vowelsCount -= vowel.length\n                    vowelsIndex\
    \ += vowel.length\n                    return true\n                }\n      \
    \      }else if(letter ==='e'){\n                if(secondVowelFound){\n     \
    \               secondVowelFound = false\n                    return false\n \
    \               }else{\n                    vowelsIndex++\n                  \
    \  vowelsCount--\n                    vowel = word.substring(vowelsIndex,vowelsCount).toChar\n\
    \                    vowelsCount -= vowel.length\n                    vowelsIndex\
    \ += vowel.length\n                    return true\n                }\n      \
    \      }else if(letter ==='i'){\n                consonantsIndex++\n         \
    \       consonantsCount--\n                consonant = word.substring(consonantsIndex,consonantsCount).toChar\n\
    \                consonantsCount -= consonant.length\n                consonantsIndex\
    \ += consonant.length\n                return true\n            }else if(letter\
    \ ==='o'){\n                consonantsIndex++\n                consonantsCount--\n\
    \                consonant = word.substring(consonantsIndex,consonantsCount).toChar\n\
    \                consonantsCount -= consonant.length\n                consonantsIndex\
    \ += consonant.length\n                return true\n            }else if(letter\
    \ ==='u'){\n                consonantsIndex++\n                consonantsCount--\n\
    \                consonant = word.substring(consonantsIndex,consonantsCount).toChar\n\
    \                consonantsCount -= consonant.length\n                consonantsIndex\
    \ += consonant.length\n                return true\n            }else if(letter\
    \ ==='y'){\n                consonantsIndex++\n                consonantsCount--\n\
    \                consonant = word.substring(consonantsIndex,consonantsCount).toChar\n\
    \                consonantsCount -= consonant.length\n                consonantsIndex\
    \ += con"]
stop_tokens:
- "\n    }\n"
