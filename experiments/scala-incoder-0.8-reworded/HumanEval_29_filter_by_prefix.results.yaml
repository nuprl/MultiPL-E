language: scala
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixedStrings\
    \ = strings.map { s => if (s.startsWith(prefix)) s else s\"$prefix$s\" }\n   \
    \     strings.length != prefixedStrings.length ||\n            prefixedStrings.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjgl76lm.scala:12:28\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            prefixedStrings.distinct\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    List[String]\n\e[31m   |\e[0m            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.get(prefix\
    \ :: Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptd_wa5pj.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.get(prefix :: Nil)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value get is not a member of List[String]\
    \ - did you mean strings.seq?\n1 error found\n"
  stdout: ''
  timestamp: 1659979066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var newList = strings;\n\
    \        for(i <- 0 until newList.size) {\n            if(newList(i).startsWith(prefix))\
    \ {\n                newList = newList.filter(_ != newList(i))\n            }\n\
    \        }\n        newList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.filterByPrefix$$anonfun$1(tmpnp_isk74.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.filterByPrefix(tmpnp_isk74.scala:15)\n\
    \tat Problem$.main(tmpnp_isk74.scala:20)\n\tat Problem.main(tmpnp_isk74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      require(strings.nonEmpty)\n\
    \      require(prefix.nonEmpty)\n      strings.filter(s => s.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.filterByPrefix(tmp69ykplo2.scala:10)\n\tat Problem$.main(tmp69ykplo2.scala:15)\n\
    \tat Problem.main(tmp69ykplo2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(\
    \ s => s.startsWith(prefix) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // filter the strings\n\
    \        strings.filter(s => s.startsWith(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.flatMap\
    \ { string =>\n            if (string.startsWith(prefix)) List(string)\n     \
    \       else List()\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String].filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppbocs_9m.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(s\
    \ => s.startsWith(prefix))\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             end of statement expected\
    \ but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings .filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) {\n            strings\n        } else {\n            strings.filter(x\
    \ => x.startsWith(prefix))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = ListBuffer.empty[String]\n\
    \        strings.foreach(s => if(s.startsWith(prefix)) result :+= s)\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for (x <- strings) {\n            if (x.startsWith(prefix))\
    \ {\n                result += x\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzodp2xg.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixWithIndex\
    \ = strings.map(s => s + prefix).zipWithIndex\n        val prefixIndex = strings.zipWithIndex.filter(p\
    \ => p._1.startsWith(prefix))\n        val prefixWithIndexForPrefix = prefixIndex.map(p\
    \ => p._2)\n        val filtered = prefixWithIndexForPrefix.zip(prefixWithIndexForPrefix.tail).filter(x\
    \ => x._2._1.startsWith(prefix))\n        filtered.map(_._1).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9704tn33.scala:13:100 -----------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfiltered\e[0m = prefixWithIndexForPrefix.zip(prefixWithIndexForPrefix.tail).filter(\e\
    [36mx\e[0m => x._2._1.startsWith(prefix))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ _1 is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9704tn33.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        filtered.map(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (prefix != \"\
    \") strings.filter(_ startsWith prefix)\n        else strings\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filterNot(_\
    \ == prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqas92_9r.scala:14)\n\tat Problem.main(tmpqas92_9r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (prefix != null\
    \ && strings == null) {\n            return Nil\n        }\n        strings.filter\
    \ { s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Filter an input\
    \ list of strings only for ones that start with a given prefix.\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6v7bek6.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings ==\
    \ Nil) return Nil\n        if (strings.length <= 1) return strings\n        if\
    \ (prefix.length != strings(0).length) return strings\n        \n        strings.filter\
    \ { x => x.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.length\
    \ match {\n            case 0 => strings\n            case 1 => if (strings(0).startsWith(prefix))\
    \ {strings}\n            else {strings(0)}\n            case _ => strings.filter(str\
    \ => str.startsWith(prefix))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp70zaqott.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33melse\e[0m {strings(\e\
    [31m0\e[0m)}\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Found:    String\n\e[31m   |\e[0m                 \
    \ Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(_.startsWith(prefix)).map(_.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqxp3bo8.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(_.startsWith(prefix)).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (prefix == \"\
    \") {\n            strings\n        } else {\n            strings.filter{ str\
    \ =>\n                str.startsWith(prefix)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def hasPrefix(s\
    \ : String) : Boolean = s.startsWith(prefix)\n\n        def findPrefix(s : String)\
    \ : List[String] = if (hasPrefix(s))\n                s.drop(prefix.length)\n\
    \            else\n                s\n        stringList.filter { s => findPrefix(s)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6s1w1pvk.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                s.drop(prefix.length)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Found:    String\n\e[31m   |\e[0m                Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6s1w1pvk.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                s\n\e[31m\e[31m   |\e[0m            \
    \    ^\e[0m\n\e[31m   |\e[0m                Found:    (s : String)\n\e[31m   |\e\
    [0m                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6s1w1pvk.scala:16:8 -------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        stringList.filter { \e[36ms\e[0m => findPrefix(s)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String].filter(\
    \ x => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2s_x_7ol.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(\
    \ x => x.startsWith(prefix))\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             end of statement expected\
    \ but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings if strings.head\
    \ == prefix else strings\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjyeu0h5u.scala:10:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings \e[33mif\e[0m strings.head == prefix\
    \ \e[33melse\e[0m strings\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m\
    \   |\e[0m                end of statement expected but 'if' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = new\
    \ ListBuffer[String]\n        for(s <- strings) if(s.startsWith(prefix)) result\
    \ += s\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(elem\
    \ => elem.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var strings = strings\n\
    \        var prefix2 = prefix\n        // Remove the prefix from the list of strings\n\
    \        prefix2 =\n            if (prefix.length == 0) prefix\n            else\
    \ {\n                if (prefix2.length == 0) \"\"\n                else if (prefix2.charAt(0)\
    \ == prefix) prefix2.substring(1)\n                else \"\"\n            }\n\
    \        var filtered = List[String]()\n        for (string <- strings) {\n  \
    \          var string2 = string\n            var prefix3 = prefix2\n         \
    \   prefix3 =\n                if (prefix3.length == 0) \"\"\n               \
    \ else if (prefix3.charAt(prefix3.length-1) == prefix) prefix3.substring(0, prefix3.length-1)\n\
    \                else \"\"\n            if (prefix3.equals(prefix2)) {\n     \
    \           filtered = filtered :+ string\n            }\n        }\n        return\
    \ filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfc5a5aqn.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mstrings\e[0m = strings\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35mstrings\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpfc5a5aqn.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (prefix2.charAt(\e\
    [31m0\e[0m) == prefix) prefix2.substring(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter{\
    \ s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979076
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filteredStrings\
    \ = strings\n        var prefixIndex = strings.lastIndexOf(prefix);\n        while(prefixIndex\
    \ > -1) {\n            filteredStrings = filteredStrings.dropRight(1)\n      \
    \      prefixIndex = strings.lastIndexOf(prefix, prefixIndex + 1);\n        }\n\
    \        filteredStrings\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        string\n      \
    \      ::\n            strings.filter{ s => s.startsWith(prefix) }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ghsjdu.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Iterate through\
    \ the strings and append the ones that match the\n        // prefix to the result.\n\
    \        strings.filter(s => s.startsWith(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String].filter(\
    \ s => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6ym9eh3q.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(\
    \ s => s.startsWith(prefix))\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             end of statement expected\
    \ but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings match {\n\
    \            case Nil => Nil\n            case a :: rest => a startsWith prefix\
    \ match {\n                case true => filterByPrefix(rest, prefix)\n       \
    \         case false => a::Nil\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1sw3p7k.scala:20)\n\tat Problem.main(tmpf1sw3p7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Complete the\
    \ body of the function\n        var filteredList = List[String]()\n        var\
    \ index = 0\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                filteredList ::= string\n                index += 1\n   \
    \         }\n        }\n        if (index < filteredList.length) {\n         \
    \   filterByPrefix(filteredList, prefix)\n        } else {\n            filteredList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def helper(current\
    \ : List[String], prefix : String) : List[String] = {\n            current match\
    \ {\n                case Nil => Nil\n                case xs => xs match {\n\
    \                    case \"a\" :: rest => helper(rest, prefix)\n            \
    \        case \"b\" :: rest => helper(rest, prefix)\n                    case\
    \ \"c\" :: rest => helper(rest, prefix)\n                    case \"d\" :: rest\
    \ => helper(rest, prefix)\n                    case \"e\" :: rest => helper(rest,\
    \ prefix)\n                    case \"f\" :: rest => helper(rest, prefix)\n  \
    \                  case \"g\" :: rest => helper(rest, prefix)\n              \
    \      case \"h\" :: rest => helper(rest, prefix)\n                    case \"\
    i\" :: rest => helper(rest, prefix)\n                    case \"j\" :: rest =>\
    \ helper(rest, prefix)\n                    case \"k\" :: rest => helper(rest,\
    \ prefix)\n                    case \"l\" :: rest => helper(rest, prefix)\n  \
    \                  case \"m\" :: rest => helper(rest, prefix)\n              \
    \      case \"n\" :: rest => helper(rest, prefix)\n                    case \"\
    o\" :: rest => helper(rest, prefix)\n                    case \"p\" :: rest =>\
    \ helper(rest, prefix)\n                    case \"q\" :: rest => helper(rest,\
    \ prefix)\n                    case \"r\" :: rest => helper(rest, prefix)\n  \
    \                  case \"s\" :: rest => helper(rest, prefix)\n              \
    \      case \"t\" :: rest => helper(rest, prefix)\n                    case \"\
    u\" :: rest => helper(rest, prefix)\n                    case \"v\" :: rest =>\
    \ helper(rest, prefix)\n                    case \"w\" :: rest => helper(rest,\
    \ prefix)\n                    case \"x\" :: rest => helper(rest, prefix)\n  \
    \                  case \"y\" :: rest => helper(rest, prefix)\n              \
    \      case \"z\" :: rest => helper(rest, prefix)\n                    case \"\
    \" :: rest => helper(rest, prefix)\n                    case _ => Nil\n      \
    \          }\n            }\n        }\n        return helper(strings, prefix)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpemx6gbp_.scala:49)\n\tat Problem.main(tmpemx6gbp_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filterNot(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70iqb7mo.scala:14)\n\tat Problem.main(tmp70iqb7mo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filterNot(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70iqb7mo.scala:14)\n\tat Problem.main(tmp70iqb7mo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.length\
    \ == 0 || strings(0).startsWith(prefix) match {\n            case true => strings\n\
    \            case false => strings.tail\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxf07gdl.scala:17)\n\tat Problem.main(tmpnxf07gdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.collect\
    \ {\n            case str if (str.startsWith(prefix)) => str\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n       strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result: List[String]\
    \ = Nil\n        // For every string in the list check if it starts with the prefix.\n\
    \        for (string <- strings) {\n            if(string.startsWith(prefix))\
    \ {\n                // If the string starts with the prefix, add it to the result\
    \ list.\n                result = string :: result\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings filter\
    \ { s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var prefixed =\
    \ strings;\n        for ( i <- prefixed.length; prefixed(i) != prefix) {\n   \
    \         prefixed = prefixed.take(i-1)\n        }\n        return prefixed;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnbk7ju5m.scala:11:57 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m ( i <- prefixed.length; prefixed(i)\
    \ != prefix) {\n\e[31m\e[31m   |\e[0m                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \        '<-' expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnbk7ju5m.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mfor\e[0m ( i <- prefixed.length; prefixed(i) != prefix) {\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 value foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Use an immutable\
    \ HashSet, which will allow for O(1) contains.\n        var ret = new mutable.HashSet[String]()\n\
    \        var i = 0\n        // If we're at the end of our input list, we're done.\n\
    \        while(i < strings.length) {\n            if(strings.lift(i).startsWith(prefix))\
    \ {\n                ret.add(strings.lift(i))\n            }\n            i +=\
    \ 1\n        }\n        ret.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprntw929a.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprntw929a.scala:15:31\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(strings.lift(i).startsWith(prefix))\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value startsWith is not a member of Option[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String]\
    \ match {\n            case head :: tail if (head.startsWith(prefix)) => head\
    \ :: filterByPrefix(tail, prefix)\n            case _ => strings\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph_l8nxin.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             end of statement expected but 'match'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings ==\
    \ null || strings.length == 0 || prefix == null || prefix.length == 0) {\n   \
    \         return Nil\n        }\n\n        val startsWith = strings.headOption.filter(_.startsWith(prefix))\n\
    \        val prefixSize = prefix.length\n\n        // Find the starting position\
    \ of each of the matching strings. \n        var start = startsWith.indexWhere(_.startsWith(prefix))\n\
    \        val result = startsWith.takeWhile(_ => start != startsWith.length)\n\n\
    \        // If no matching prefix was found, then the entire input list is returned.\n\
    \        if (start == startsWith.length) {\n            strings; \n        } else\
    \ {\n            result.map { s =>\n                val rest = strings.drop(start)\n\
    \                if (rest.lastOption.exists(_.startsWith(prefix))) {\n       \
    \             s; \n                } else {\n                    s\"$prefix $s\"\
    \n                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw1zl3qf1.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mstart\e[0m = startsWith.indexWhere(_.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    value indexWhere is not a member of Option[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw1zl3qf1.scala:25:23 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            result.map { \e[36ms\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mIterable\e\
    [0m[String]\n\e[31m   |\e[0m            Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m26 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = strings.drop(start)\n\
    \e[31m27 |\e[0m                \e[33mif\e[0m (rest.lastOption.exists(_.startsWith(prefix)))\
    \ {\n\e[31m28 |\e[0m                    s; \n\e[31m29 |\e[0m                }\
    \ \e[33melse\e[0m {\n\e[31m30 |\e[0m                    \e[31ms\"\e[0m$prefix\e\
    [31m \e[0m$s\e[31m\"\e[0m\n\e[31m31 |\e[0m                }\n\e[31m32 |\e[0m \
    \           }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Write your solution\
    \ here\n        if (strings == null || prefix == null) {\n            List[String]()\n\
    \        } else if (strings == null || prefix == null) {\n            List[String]()\n\
    \        } else if (strings.isEmpty) {\n            List[String]()\n        }\
    \ else if (prefix.isEmpty) {\n            strings\n        } else {\n        \
    \    strings.filter(prefix contains _)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptd6j74ao.scala:25)\n\tat Problem.main(tmptd6j74ao.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Use a mutable.HashMap\
    \ to keep track of already seen prefixes.\n        val prefixes = mutable.HashMap[String,\
    \ List[String]]()\n        // The results are accumulated in the `result` list.\n\
    \        val result: List[String] = Nil\n        strings.foreach(x => {\n    \
    \        if(x.startsWith(prefix)){\n                if(prefixes.contains(prefix)){\n\
    \                    // The key was already seen, append the existing list to\
    \ the new list.\n                    result += prefixes.get(prefix).asInstanceOf[List[String]]\n\
    \                }\n                // The key was not seen before, create a new\
    \ list with the current value.\n                result += Nil\n              \
    \  // Store the value in the map.\n                prefixes += prefix -> Nil\n\
    \            } else {\n                // The key is not prefixed with the prefix,\
    \ so append the current value to the\n                // existing list that corresponds\
    \ to the key.\n                result += prefixes.get(prefix).asInstanceOf[List[String]]\n\
    \                // Store the value in the map.\n                prefixes += prefix\
    \ -> Nil\n            }\n        })\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzialal2l.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzialal2l.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    result\
    \ += prefixes.get(prefix).asInstanceOf[\e[35mList\e[0m[\e[35mString\e[0m]]\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ += is not a member of List[String] - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzialal2l.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += Nil\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzialal2l.scala:27:23 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                result += prefixes.get(prefix).asInstanceOf[\e[35mList\e[0m[\e\
    [35mString\e[0m]]\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      value += is not a member of List[String] - did you mean result.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings filter\
    \ (_.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings.filter((string)\
    \ => string.startsWith(prefix))\n        strings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmprurxx7pr.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter((\e[36mstring\e[0m)\
    \ => string.startsWith(prefix))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) strings::Nil\n        else strings.takeWhile((string : String) => string.startsWith(prefix))::filterByPrefix(strings.dropWhile((string\
    \ : String) => string.startsWith(prefix)), prefix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l5pu2ys.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (strings.length\
    \ == \e[31m0\e[0m) strings::Nil\n\e[31m\e[31m   |\e[0m                       \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (strings : List[String])\n\e[31m   |\e[0m                               \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l5pu2ys.scala:11:30\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m strings.takeWhile((string\
    \ : String) => string.startsWith(prefix))::filterByPrefix(strings.dropWhile((string\
    \ : String) => string.startsWith(prefix)), prefix)\n\e[31m\e[31m   |\e[0m    \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter{\
    \ s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings (_ startsWith\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1et_7i19.scala:10:17 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings (_ startsWith prefix)\n\e[31m\e[31m \
    \  |\e[0m                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 startsWith prefix.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x=>x.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val newStrings\
    \ = mutable.ArrayBuffer.empty[String]\n        strings forEach {s =>\n       \
    \     if(s.startsWith(prefix)) {\n                newStrings += s\n          \
    \  }\n        }\n        newStrings.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyqcgd6.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewStrings\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpddyqcgd6.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings forEach {\e[36ms\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue forEach is not a\
    \ member of List[String] - did you mean strings.foreach?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(string=>string.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbyai487.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36mstring\e[0m=>string.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String].filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0p34bhg_.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter(_.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         end of statement expected but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        (strings filter\
    \ (x => x.startsWith(prefix)) toList) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjxgjuh92.scala:10:58 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        (strings filter (\e[36mx\e[0m => x.startsWith(prefix))\
    \ toList) \n\e[31m\e[31m   |\e[0m                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(\
    \ _.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def match(strings\
    \ : List[String], prefix : String) : List[String] = {\n            strings in\
    \ prefix match {\n                case true => strings\n                case _\
    \ => strings.filter(s => s.startsWith(prefix))\n            }\n        }\n   \
    \     match(strings, prefix)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpin15hnuj.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mdef\e[0m \e[33mmatch\e[0m(strings : List[String],\
    \ prefix : String) : List[String] = {\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            an identifier expected, but 'match' found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpin15hnuj.scala:17:5\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings.filter(s\
    \ => s.startsWith(prefix))\n        if (strings.isEmpty) strings else strings.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpivxl6s5_.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpivxl6s5_.scala:11:50 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (strings.isEmpty) strings \e[33melse\e\
    [0m strings.head\n\e[31m\e[31m   |\e[0m                                      \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \    Found:    String\n\e[31m   |\e[0m                                       \
    \   Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ (s => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Create a mutable\
    \ list of strings\n        val stringList = new mutable.MutableList[String](strings)\n\
    \        // Filter the strings by removing the ones that don't start with the\
    \ prefix\n        val result = stringList.filter(s => s.startsWith(prefix))\n\
    \        // Return the list of strings\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfk9xez14.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mstringList\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m](strings)\n\e[31m\e[31m   |\e[0m   \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var stringsToKeep\
    \ = mutable.ListBuffer.empty[String]\n        strings.foreach(s => {\n       \
    \     if (s.startsWith(prefix)) {\n                stringsToKeep += s\n      \
    \      }\n        })\n        stringsToKeep.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5si364h.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mstringsToKeep\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // This code will\
    \ filter the input list based on the prefix.\n        // We need to store the\
    \ results of this filter in a list.\n        // A list is initialized using the\
    \ `new List` function.\n        // >>> val result = new ListBuffer[String]()\n\
    \        // >>> val prefix = \"a\"\n        // >>> filterByPrefix((List[String](\"\
    abc\", \"bcd\", \"cde\", \"array\")), prefix)\n        // (List[String](\"abc\"\
    , \"array\"))\n        strings.filter(x => x.startsWith(prefix))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) strings\n        else if (strings.length == 1) strings else strings.head\
    \ :: filterByPrefix(strings.tail, prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5slhojjp.scala:15)\n\tat Problem.main(tmp5slhojjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp014znb9o.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result: List[String]\
    \ = Nil\n        for ( x <- strings ) if ( x.startsWith(prefix) ) result :+= x\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefix = prefix.toLowerCase\n\
    \        strings = strings.filter(s => s.startsWith(prefix))\n        return strings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkocgmba6.scala:10:21 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = prefix.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mprefix\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpkocgmba6.scala:11:16 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings = strings.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Your code here\n\
    \        return strings\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ix98dw3.scala:15)\n\tat Problem.main(tmp1ix98dw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val newStrings:\
    \ List[String] = strings.filterNot(_.startsWith(prefix))\n        newStrings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr29qx1r6.scala:15)\n\tat Problem.main(tmpr29qx1r6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixes =\
    \ strings.map(_.charAt(0).toInt)\n        strings.filter(s => prefixes.contains(s.charAt(0).toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw_9e8rt.scala:15)\n\tat Problem.main(tmplw_9e8rt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixes =\
    \ mutable.HashSet[String]()\n        for (str <- strings) {\n            if (prefixes.contains(str.substring(0,prefix.length)))\
    \ {\n                prefixes += str.substring(0,prefix.length).toCharArray\n\
    \            }\n        }\n        for (str <- strings) {\n            if (prefixes.contains(str.substring(0,prefix.length)))\
    \ {\n                yield str\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpv4ih1bu9.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33myield\e[0m str\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m                Illegal start\
    \ of statement\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4ih1bu9.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mprefixes\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // O(n log n)\n\
    \        // Filter the list by iterating once over the list for each prefix\n\
    \        // O(n^2)\n        // List is first sorted before filtering\n       \
    \ // O(n log n)\n        strings = strings.sortBy(s => s.indexOfPrefix(prefix))\n\
    \        // O(n)\n        var result = List[String]()\n        for (str <- strings)\
    \ {\n            if (str.startsWith(prefix))\n                result ::: str\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplux3d0rx.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        strings = strings.sortBy(\e[36ms\e[0m => s.indexOfPrefix(prefix))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           value indexOfPrefix is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmplux3d0rx.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        strings = strings.sortBy(\e[36ms\e[0m => s.indexOfPrefix(prefix))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m\
    \ \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplux3d0rx.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                result :::\
    \ str\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value ::: is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659979092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0)\n            strings\n        else if (strings.head.startsWith(prefix))\n\
    \            strings\n        else\n            strings.filter(_ => _.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfzc3rlh5.scala:15:32 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            strings.filter(_ => _.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2.startsWith(prefix).\n1 error found\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var matchedStrings\
    \ = List.empty[String]\n        for ( i <- strings.indices)\n            if (\
    \ strings(i).startsWith(prefix) )\n                matchedStrings = matchedStrings\
    \ :+ strings(i)\n        return matchedStrings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings ==\
    \ null || strings.isEmpty)\n            return strings\n        if (prefix.length\
    \ > strings.get(0).length)\n            return strings\n\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbo5krwru.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (prefix.length > strings.get(\e\
    [31m0\e[0m).length)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value get is not a member of List[String] - did you mean\
    \ strings.seq?\n1 error found\n"
  stdout: ''
  timestamp: 1659979091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n       strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Only keep strings\
    \ that start with prefix\n        def keepString(str : String) : Boolean = str.startsWith(prefix)\n\
    \        // Filter only valid strings\n        def keepStrings(strs : List[String])\
    \ : List[String] = strs.filter(keepString)\n        // Filter valid strings from\
    \ input list\n        def filterByPrefix(strings : List[String], prefix : String)\
    \ : List[String] = strings.filter(keepStrings)\n        filterByPrefix(strings,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnx1_k09n.scala:15:100\
    \ -------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mfilterByPrefix\e\
    [0m(\e[36mstrings\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mprefix\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = strings.filter(keepStrings)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                      Found:    (strs : String)\n\e[31m   |\e\
    [0m                                               Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        (strings) match\
    \ {\n            case Nil => Nil\n            case head :: tail => if (head.startsWith(prefix))\
    \ head :: filterByPrefix(tail, prefix)\n            else filterByPrefix(tail,\
    \ prefix)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result: List[String]\
    \ = List()\n        strings.foreach(string => {\n            if(string.startsWith(prefix))\
    \ {\n                result = result :+ string\n            }\n        })\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filteredStrings\
    \ = strings\n        var filteredPrefix = prefix\n        var filteredStringsIndex\
    \ = 0\n        var filteredPrefixIndex = 0\n        while (filteredStringsIndex\
    \ < filteredStrings.length) {\n            if (filteredStrings(filteredStringsIndex).startsWith(filteredPrefix))\
    \ {\n                filteredStringsIndex += 1\n            } else {\n       \
    \         filteredStringsIndex += 1\n                filteredPrefixIndex += 1\n\
    \            }\n        }\n        filteredStrings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr7xqzk_o.scala:26)\n\tat Problem.main(tmpr7xqzk_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp014znb9o.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\n\
    \            return strings\n        if (strings.head != prefix)\n           \
    \ return strings\n        else\n            return filterByPrefix(strings.tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp64n5za6l.scala:19)\n\tat Problem.main(tmp64n5za6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String]\
    \ match {\n            case Nil => Nil\n            case _ => {\n            \
    \    var filteredStrings = List[String]()\n                strings.foreach(s =>\
    \ {\n                    if (s.startsWith(prefix)) {\n                       \
    \ filteredStrings += s\n                    }\n                })\n          \
    \      filteredStrings\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5lu0bogj.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             end of statement expected but 'match'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659979090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Solution 1:\
    \ use a filter with a regex to exclude prefix strings\n        strings.filterNot(s\
    \ => s.startsWith(prefix))\n        // Solution 2: use a filter with a regex\n\
    \        //strings.filterNot(s => s.matches(prefix + \"$\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphgwivpkd.scala:17)\n\tat Problem.main(tmphgwivpkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if(strings.isEmpty)\
    \ {\n            strings\n        }\n        else {\n            strings.filter(_\
    \ startsWith prefix)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def prefixMatcher(prefix\
    \ : String) : String => Boolean = {\n            (str : String) => str.startsWith(prefix)\n\
    \        }\n        strings.filterNot(prefixMatcher(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb4j_9d7.scala:17)\n\tat Problem.main(tmpcb4j_9d7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = strings;\n\
    \        result.foreach { s =>\n            if (s.startsWith(prefix)) {\n    \
    \            result = result filter { x => x != s }\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyr7e21ma.scala:20)\n\tat Problem.main(tmpyr7e21ma.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String]\
    \ match {\n            case Nil => Nil\n            case _ => strings.filter(_\
    \ startsWith prefix)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_23x9o6b.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             end of statement expected but 'match'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s\
    \ => s.startsWith(prefix)))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = strings\n\
    \        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result = result :: strings.filter(x => x != string)\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4eqt5rwz.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                result = result\
    \ :: strings.filter(\e[36mx\e[0m => x != string)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (result : List[String])\n\e[31m   |\e[0m                         Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val result = stringListBuffer[String]()\n\
    \        for(elem <- strings) {\n            if(!elem.startsWith(prefix)) {\n\
    \                result += elem\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwewcvz_w.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = stringListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: stringListBuffer\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.length\
    \ <= 0 || strings.head != prefix\n            ? Nil\n            : strings.tail.takeWhile(_.startsWith(prefix)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp4ao8bk0.scala:12:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            : strings.tail.takeWhile(_.startsWith(prefix)).toList\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '(' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4ao8bk0.scala:11:12 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length <= \e[31m0\e[0m || strings.head\
    \ != prefix\n\e[31m11 |\e[0m            ? Nil\n\e[31m\e[31m   |\e[0m         \
    \                                      ^\e[0m\n\e[31m   |\e[0m            value\
    \ ? is not a member of String.\n\e[31m   |\e[0m            Note that `?` is treated\
    \ as an infix operator in Scala 3.\n\e[31m   |\e[0m            If you do not want\
    \ that, insert a `;` or empty line in front\n\e[31m   |\e[0m            or drop\
    \ any spaces behind the operator.\n2 errors found\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Filter the input\
    \ list of strings only for ones that start with a given prefix.\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // The 'prefix'\
    \ argument can be omitted in the call to the function 'filter'.\n        if (prefix\
    \ == \"\") {\n          strings\n        } else {\n            strings.filter(s\
    \ => s.startsWith(prefix))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter{\n\
    \            string: String => {\n                if (string.startsWith(prefix))\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprtosxqjm.scala:11:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[36mstring\e[0m: \e[35mString\e[0m => {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0mparentheses\
    \ are required around the parameter of a lambda\n\e[31m   |\e[0mThis construct\
    \ can be rewritten automatically under -rewrite -source 3.0-migration.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ { s => \n            s.startsWith(prefix) \n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings\
    \ filter (s => s.startsWith(prefix))\n        strings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnlemhv9y.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings filter (\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.length\
    \ > 0 match {\n            case true => {\n                prefix match {\n  \
    \                  case _ if prefix.length == 1 => {\n                       \
    \ strings.filter(_.startsWith(prefix))\n                    }\n              \
    \      case _ => {\n                        val prefix1 = prefix.substring(0,\
    \ prefix.length - 1)\n                        strings.filter(_.startsWith(prefix1))\n\
    \                    }\n                }\n            }\n            case false\
    \ => strings\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hxafg5i.scala:27)\n\tat Problem.main(tmp7hxafg5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ { s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ return strings\n        strings.find(s => s.startsWith(prefix))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj6metytq.scala:11:20\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        strings.find(\e[36ms\e\
    [0m => s.startsWith(prefix))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m \
    \  |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6v7bek6.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(\
    \ _.startsWith(prefix) )\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String].filter\
    \ {_.startsWith(prefix)}\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbelwdt8x.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m].filter\
    \ {_.startsWith(prefix)}\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             end of statement expected but\
    \ '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41j9h0th.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(_.startsWith(prefix))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val filtered =\
    \ strings.filter(_.startsWith(prefix))\n        strings.filterNot(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_dw2cwu.scala:15)\n\tat Problem.main(tmpp_dw2cwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var returnList:\
    \ List[String] = List()\n        for (x <- strings) {\n            val prefix\
    \ = x.substring(0,prefix.length)\n            if (prefix == prefix) {\n      \
    \          returnList ::= x\n            }\n        }\n        returnList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkdvm7zsc.scala:12:39 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mprefix\e[0m = x.substring(\e\
    [31m0\e[0m,prefix.length)\n\e[31m\e[31m   |\e[0m                             \
    \          ^\e[0m\n\e[31m   |\e[0m                                       Recursive\
    \ \e[33mvalue\e[0m \e[35mprefix\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings.filter((string\
    \ : String) => {\n            (string.length >= prefix.length) && (string.substring(0,\
    \ prefix.length) == prefix)\n        })\n        strings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6gkfrtw2.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter((\e[36mstring\e[0m :\
    \ \e[35mString\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Reassignment to val strings\n\e[31m11 |\e[0m            (string.length\
    \ >= prefix.length) && (string.substring(\e[31m0\e[0m, prefix.length) == prefix)\n\
    \e[31m12 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings ==\
    \ null || prefix.length == 0) {\n            strings\n        } else {\n     \
    \       strings.filter(_.startsWith(prefix))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if(strings.length\
    \ == 0) strings\n        else if(strings(0) != prefix) strings\n        else {\n\
    \            val stringList = new mutable.ArrayBuffer[String]()\n            stringList+=strings\n\
    \            val prefixList = new mutable.ArrayBuffer[String]()\n            prefixList+=prefix\n\
    \            for(i <-stringList.length-1 to 0 by -1){\n                if(stringList(i).substring(0,\
    \ prefix.length) == prefix){\n                    stringList.remove(i)\n     \
    \               prefixList.remove(i)\n                }\n            }\n     \
    \       stringList.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpexg94msg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mstringList\e[0m = \e\
    [33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpexg94msg.scala:15:33 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mprefixList\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List[String]()\n        strings.foreach { s => if (s.startsWith(prefix)) result\
    \ += s }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoe6g3k7q.scala:11:64 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        strings.foreach { \e[36ms\e[0m => \e[33mif\e\
    [0m (s.startsWith(prefix)) result += s }\n\e[31m\e[31m   |\e[0m              \
    \                                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            strings.headOption\n        } else {\n            val prefix\
    \ = prefix.toLowerCase\n            strings.filter{ s =>\n                s.startsWith(prefix)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6zjpqwj.scala:11:20\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            strings.headOption\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m   |\e[0m           \
    \ Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpe6zjpqwj.scala:13:25 ---------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mprefix\e[0m = prefix.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mprefix\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) strings\n        else if (strings(0) == prefix) strings.drop(1)\n    \
    \    else filterByPrefix(strings.dropRight(1), prefix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4mmno0c.scala:16)\n\tat Problem.main(tmpt4mmno0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: List[String]\
    \ match {\n            case Nil => Nil\n            case x :: Nil =>\n       \
    \         x startsWith prefix match {\n                    case true => Nil\n\
    \                    case _ => x :: Nil\n                }\n            case x\
    \ :: y =>\n                x startsWith prefix match {\n                    case\
    \ true => y filter (s => s startsWith prefix)\n                    case _ => y\
    \ filter (s => s startsWith prefix) :: x\n                }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvudsg8ru.scala:10:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[35mList\e[0m[\e[35mString\e[0m] \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                             end of statement expected but 'match'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659979102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6v7bek6.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixedList\
    \ = strings.map(s => (s.startsWith(prefix))) \n        val uniques = prefixedList.map(a\
    \ => a.toSet).distinct\n        return uniques.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr08xpuv1.scala:11:46 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36muniques\e[0m = prefixedList.map(\e\
    [36ma\e[0m => a.toSet).distinct\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        value toSet is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659979105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(\
    \ s => s.startsWith(prefix) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var newStrings\
    \ = mutable.MutableList[String]()\n        for (string <- strings) {\n       \
    \     if (string.startsWith(prefix)) {\n                newStrings += string\n\
    \            }\n        }\n        newStrings.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabcsn5ir.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mnewStrings\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if(strings.isEmpty)\
    \ {\n            return strings\n        }\n        if(strings.head == prefix)\
    \ {\n            strings.head :: filterByPrefix(strings.tail, prefix)\n      \
    \  }\n        else {\n            filterByPrefix(strings.tail, prefix)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdjyiacx6.scala:22)\n\tat Problem.main(tmpdjyiacx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter\
    \ {\n            strings.contains(_)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v6s77uv.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter {\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: stringList\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(_.startsWith(prefix)).filter(s\
    \ => s !=\"\").mkString\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjykw3ilb.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(_.startsWith(prefix)).filter(\e\
    [36ms\e[0m => s !=\e[31m\"\"\e[0m).mkString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: stringList\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ {\n            _.startsWith(prefix)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filtered =\
    \ new mutable.ListBuffer[String]()\n        for (i<- 0 to strings.length - 1)\
    \ {\n            if (strings(i).startsWith(prefix))\n                filtered\
    \ += strings(i)\n        }\n        filtered.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsajgz3q.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mfiltered\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.collect\
    \ {\n            case s if (s.startsWith(prefix)) => s\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings\
    \ filter { s => s.startsWith(prefix) }\n        strings\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpkuhcyh1v.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings filter { \e[36ms\e[0m => s.startsWith(prefix)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dn3ime4.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36mx\e[0m => x.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filtered: List[String]\
    \ = Nil\n        for (str <- strings) {\n            if (str.startsWith(prefix))\
    \ {\n                filtered = filtered :+ str\n            }\n        }\n  \
    \      return filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(\
    \ string => string.startsWith(prefix) )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // For each string\
    \ in the list, take every substring that starts with prefix,\n        // and put\
    \ them in a new list, called 'result'.\n        var result = List[String]()\n\
    \        strings.foreach(str => \n            // Add the first part of the string\
    \ to the list\n            if(str.startsWith(prefix)) { result += str }\n    \
    \        // For each substring after the first, check if it starts with prefix\n\
    \            else {\n                var prefix = str.substring(0,prefix.length).toLowerCase\n\
    \                // If it does, add it to the result list\n                if(str.substring(prefix.length,str.length).startsWith(prefix))\
    \ { result += str }\n            }\n        )\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvmswtz58.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(str.startsWith(prefix)) { result\
    \ += str }\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvmswtz58.scala:18:45 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mvar\e[0m \e[36mprefix\e[0m = str.substring(\e\
    [31m0\e[0m,prefix.length).toLowerCase\n\e[31m\e[31m   |\e[0m                 \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \           Recursive \e[33mvariable\e[0m \e[35mprefix\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvmswtz58.scala:20:88 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m(str.substring(prefix.length,str.length).startsWith(prefix))\
    \ { result += str }\n\e[31m\e[31m   |\e[0m                                   \
    \                                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ <= 0) return strings\n        if (strings(0) != prefix) return strings\n   \
    \     val result : List[String] = strings(1).toList.filterNot(strings.contains(_))\n\
    \        filterByPrefix(result,prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ttzkm1q.scala:12:63\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = strings(\e[31m1\e[0m).toList.filterNot(strings.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    List[\e[1m\e\
    [31mChar\e[0m]\n\e[31m   |\e[0m                                    Required: List[\e\
    [1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings(0) must\
    \ startsWith prefix\n        strings(strings.size-1) must endsWith prefix\n  \
    \      strings.slice(1,strings.size-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphz2oc7bt.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings(\e[31m0\e[0m) must startsWith prefix\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ must is not a member of String - did you mean String.wait?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphz2oc7bt.scala:10:24 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        strings(\e[31m0\e[0m) must startsWith prefix\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Not found: startsWith\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(stringList.headOption.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0rtfa0p.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(stringList.headOption.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def check(i: Int,\
    \ prefixedStrings : List[String], strings : List[String]) : List[String] = {\n\
    \            if (i >= strings.length)\n                return prefixedStrings\n\
    \            val string = strings(i)\n            if (string.startsWith(prefix))\n\
    \                check(i+1, prefixedStrings :+ string, strings)\n            else\n\
    \                check(i+1, prefixedStrings, strings)\n        }\n        check(0,Nil,strings)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Create a list\
    \ to hold the filtered results.\n        val filteredResults = ListBuffer[String]()\n\
    \n        // Iterate over all strings and add them to the result list if they\
    \ start with prefix.\n        strings.foreach(x => {\n            if (x.startsWith(prefix))\
    \ {\n                filteredResults += x\n            }\n        })\n\n     \
    \   // Return the filtered result list.\n        filteredResults.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6v7bek6.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val newStrings\
    \ = strings.filter (_ .startsWith (prefix))\n        newStrings\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings: for (s\
    \ <- strings) yield {\n            val prefixAndRest = prefix +: s\n         \
    \   if ((prefixAndRest.length == prefix) && (prefixAndRest.head == prefix))\n\
    \                s\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpya4js2uy.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings: \e[33mfor\e[0m (s <- strings) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m       \
    \          an identifier expected, but 'for' found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0)\n            return strings\n        if (strings.length == 1)\n      \
    \      return strings\n        var result: List[String] = Nil\n        val currentPrefix:\
    \ String = strings.head\n        if (currentPrefix.length == prefix.length)\n\
    \            result = strings.filter(s => s.startsWith(prefix))\n        else\n\
    \            result = strings.filter(s => s.startsWith(prefix))\n        filterByPrefix(result,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.toSet filter\
    \ (x => x.startsWith(prefix)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkzfck_ak.scala:10:30 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.toSet filter (\e[36mx\e[0m => x.startsWith(prefix)).toList\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                       Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter x.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings.filter(s\
    \ => s.startsWith(prefix))\n        strings.length == 0 ?\n            strings\n\
    \            : strings\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpajcqlgws.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings.filter(\e[36ms\e[0m => s.startsWith(prefix))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val strings\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpajcqlgws.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            : strings\n\e[31m\e[31m   |\e[0m        \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m              Not found: type strings\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpajcqlgws.scala:11:28\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        strings.length ==\
    \ \e[31m0\e[0m ?\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e\
    [31m   |\e[0m                          value ? is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ { i => i.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var newStrings\
    \ = strings\n        var newPrefix = prefix\n        // Loop and remove matching\
    \ prefix\n        while (newPrefix == newStrings.head) {\n            newStrings\
    \ = newStrings.tail\n        }\n        // Return filtered list\n        newStrings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.filterByPrefix(tmpd62yfclo.scala:13)\n\
    \tat Problem$.main(tmpd62yfclo.scala:20)\n\tat Problem.main(tmpd62yfclo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringFilter {\
    \ s => s.startsWith(prefix) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxdk6qsma.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringFilter { \e[36ms\e[0m => s.startsWith(prefix)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: stringFilter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        stringList.flatMap(\
    \ _.startsWith(prefix) ).filter(!_.isEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgpq_e5x.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        stringList.flatMap( _.startsWith(prefix) ).filter(!_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ stringList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      var ret: List[String]\
    \ = Nil\n      for ((s, i) <- strings.zipWithIndex if s.startsWith(prefix)) {\n\
    \        ret = s :: ret\n      }\n      ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if(strings.isEmpty)\
    \ {\n            return strings\n        }\n        if(strings.head == prefix)\
    \ {\n            filterByPrefix(strings.tail, prefix)\n        }\n        else\
    \ {\n            strings\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84ljv568.scala:22)\n\tat Problem.main(tmp84ljv568.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Filter out all\
    \ strings that don't start with the prefix.\n        strings.filter(string =>\
    \ string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // For every string\
    \ in the list, if its prefix matches with our prefix parameter,\n        // add\
    \ it to the output list.\n        strings.filter(x => x.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixes =\
    \ mutable.Set[String]()\n        strings.foreach(s => prefixes += s.prefix(prefix))\n\
    \        strings.filter(s => prefixes contains s.prefix(prefix))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkwx6j7k.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprefixes\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings ==\
    \ Nil)\n            return Nil\n        else if (strings.isEmpty)\n          \
    \  return strings\n        else {\n            var result: List[String] = Nil\n\
    \            strings.head :: filterByPrefix(strings.tail, prefix)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnz_8oiau.scala:21)\n\tat Problem.main(tmpnz_8oiau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter\
    \ {\n            str =>\n                if (str.startsWith(prefix))\n       \
    \             str\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1a28enk.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m\
    \ (str.startsWith(prefix))\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Found:    Unit\n\e[31m   |\e[0m                Required:\
    \ Boolean\n\e[31m   |\e[0m                Maybe you are missing an else part for\
    \ the conditional?\n\e[31m13 |\e[0m                    str\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Your code goes\
    \ here.\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7i8gy6x5.scala:9:81\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterByPrefix\e\
    [0m(\e[36mstrings\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mprefix\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \           Found:    Unit\n\e[31m   |\e[0m                                  \
    \                Required: List[String]\n\e[31m10 |\e[0m        \e[34m// Your\
    \ code goes here.\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // filter function\n\
    \        def filterFunction(element : String) : Boolean = {\n            // return\
    \ true if the element's prefix matches the prefix\n            // of the prefix\
    \ list passed to the filterByPrefix function\n            element.startsWith(prefix)\n\
    \        }\n        // filter the strings and keep only the elements that pass\
    \ the filter\n        // function\n        strings.filter(filterFunction)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s:\
    \ String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.length\
    \ <= 0 || strings(0) startsWith prefix\n            ? strings\n            : filterByPrefix(strings.tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1uaxmd97.scala:12:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            : filterByPrefix(strings.tail, prefix)\n\e\
    [31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m       \
    \                     end of statement expected but '(' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1uaxmd97.scala:10:38 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.length <= \e[31m0\e[0m || strings(\e\
    [31m0\e[0m) startsWith prefix\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found: \
    \   String\n\e[31m   |\e[0m                               Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1uaxmd97.scala:11:12\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        strings.length <=\
    \ \e[31m0\e[0m || strings(\e[31m0\e[0m) startsWith prefix\n\e[31m11 |\e[0m   \
    \         ? strings\n\e[31m\e[31m   |\e[0m                                   \
    \                  ^\e[0m\n\e[31m   |\e[0m            value ? is not a member\
    \ of String.\n\e[31m   |\e[0m            Note that `?` is treated as an infix\
    \ operator in Scala 3.\n\e[31m   |\e[0m            If you do not want that, insert\
    \ a `;` or empty line in front\n\e[31m   |\e[0m            or drop any spaces\
    \ behind the operator.\n3 errors found\n"
  stdout: ''
  timestamp: 1659979119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_(0)\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gxmomm2.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.filter(_(\e[31m0\e[0m) startsWith prefix)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value startsWith is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp014znb9o.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = new\
    \ ListBuffer[String]()\n        for ( x <- strings ) {\n            if ( x.startsWith(prefix)\
    \ ) {\n                result += x\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.get.filter(_\
    \ startsWith prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdvii6_z.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.get.filter(_ startsWith prefix)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value get is not a member\
    \ of List[String] - did you mean strings.seq?\n1 error found\n"
  stdout: ''
  timestamp: 1659979120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val result: mutable.Buffer[String]\
    \ = mutable.Buffer[String]()\n        for (string <- strings) {\n            if\
    \ (string.startsWith(prefix)) {\n                result += string\n          \
    \  }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9icbvi9.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.Buffer[\e\
    [35mString\e[0m] = mutable.Buffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9icbvi9.scala:10:45\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.Buffer[\e[35mString\e[0m] = mutable.Buffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Write your code\
    \ here.\n        var stringFilters = strings.filter(_ => _.startsWith(prefix))\n\
    \        val filtered = mutable.Set.empty[String]\n        for (item <- stringFilters)\n\
    \            filtered += item\n        return filtered.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpoglpf8jv.scala:11:48 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mstringFilters\e[0m = strings.filter(_\
    \ => _.startsWith(prefix))\n\e[31m\e[31m   |\e[0m                            \
    \                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.startsWith(prefix).\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoglpf8jv.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfiltered\e[0m = mutable.Set.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.flatMap(s\
    \ => if(s.startsWith(prefix)) Some(s) else None)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp014znb9o.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: string\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = Nil\n        var index = 0\n        while (index < strings.size) {\n     \
    \       if (strings.apply(index).startsWith(prefix)) {\n                result\
    \ = result ::: List(strings.apply(index))\n            }\n            index =\
    \ index + 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = strings\n\
    \        var prefixes = Set[String]()\n        prefixes += prefix\n        var\
    \ filtered = result.filter(_.startsWith(prefix))\n        var remainingPrefixes\
    \ = prefixes.toList\n        while (filtered.nonEmpty && remainingPrefixes.nonEmpty)\
    \ {\n            filtered = filtered.filter(_ => !remainingPrefixes.contains(_.substring(1)))\n\
    \            remainingPrefixes = remainingPrefixes.filter(_ => !prefixes.contains(_.substring(1)))\n\
    \        }\n        return filtered\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwwhlx839.scala:16:72 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            filtered = filtered.filter(_ => !remainingPrefixes.contains(_.substring(\e\
    [31m1\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \                               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3.substring(1).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpwwhlx839.scala:17:81 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            remainingPrefixes = remainingPrefixes.filter(_\
    \ => !prefixes.contains(_.substring(\e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$5 of expanded function:\n\
    \e[31m   |\e[0m   _$5 => _$5.substring(1).\n2 errors found\n"
  stdout: ''
  timestamp: 1659979120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // use contains\
    \ to check whether a String starts with a given prefix\n        // contains in\
    \ scala is a method on String and checks whether a given string starts with a\
    \ given prefix\n        if(strings.exists(s => s.startsWith(prefix))){\n     \
    \       return strings // return a list of strings starts with given prefix\n\
    \        }else{\n            return Nil\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplf0nh6yf.scala:20)\n\tat Problem.main(tmplf0nh6yf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings = strings\
    \ match {\n            case Nil => Nil\n            case h::t if h.startsWith(prefix)\
    \ => h::t\n            case _ => strings\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphlppy1zf.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings = strings \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Reassignment to val strings\n\
    \e[31m11 |\e[0m            \e[33mcase\e[0m Nil => Nil\n\e[31m12 |\e[0m       \
    \     \e[33mcase\e[0m h::t \e[33mif\e[0m h.startsWith(prefix) => h::t\n\e[31m13\
    \ |\e[0m            \e[33mcase\e[0m _ => strings\n\e[31m14 |\e[0m        }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979120
