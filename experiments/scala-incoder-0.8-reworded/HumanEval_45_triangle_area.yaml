name: HumanEval_45_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given length of a side and high return area for a triangle.\n    // >>>\
  \ triangleArea((5l), (3l))\n    // (7.5f)\n    def triangleArea(a : Long, h : Long)\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l),\
  \ (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l),\
  \ (8l)) == (40.0f));\n    }\n\n}\n"
completions: ["        val b = h * a / 2\n        val c = 2 * math.sqrt(b * b - h\
    \ * h)\n        val area = math.sqrt(b * b + c * c)\n        area", "        val\
    \ area = (h * h) / 2.0 // side of triangle \n        val h2 = (a * h) / 2.0\n\
    \        val a2 = (a * a) / 2.0\n        val b2 = (a * h) / 2.0\n        val c2\
    \ = (a * h2) / 2.0\n        val area2 = a2 + b2 + c2 \n        (area - area2)\
    \ / a", "        var area = 0.0f\n        val d = h * 2.0 - 3.0\n        if (a\
    \ == 0.0)\n            area = 0.0f\n        else if (h > a)\n            area\
    \ = d * (h - a) / 2.0f\n        else\n            area = d * h / 2.0f\n      \
    \  area", "        val triangle = (h / 2l) * math.tan(math.pi/3l)\n        val\
    \ area = (triangle * a) / 2l\n        area", "        val tw = a.toFloat\n   \
    \     val th = h.toFloat\n        val area = (tw * th) * 0.5f\n        area",
  "        val b = h * a\n        val c = h * h - a * b\n        val area = b * b\
    \ * Math.sqrt(c)\n        a", "        val area = (a / 2.0) * (h / 2.0)\n    \
    \    (if (a > h) (area) else (h)) * (Math.sqrt(5.0) / 2.0)", "        val s =\
    \ (a * h) / 2\n        val area = math.sqrt(s * (s - a) * (s - h))\n        area",
  "        // (2l / 3l) * (2l / 3l)\n        val area = (2*h)/a\n        return area.toFloat",
  "        val n = h / 2\n        val area = scala.math.sqrt(math.pow(n, 2) * math.pow(a,\
    \ 2))\n        area", "      val h = (h / (6l - 3l)).toFloat\n      val a = (a\
    \ * (6l - 3l)).toFloat\n      val area = (4 * h * h) - a\n      area", "     \
    \ val area = ((a.toDouble * h) / 4.0f) - (((a.toDouble * h) / 4.0f) - ((h / 2.0f)\
    \ * a))\n      return area", "        var h1 = h/2\n        var h2 = h1\n    \
    \    var area = 0.0f\n        while (a > 0 && h2 > 0) {\n            area += h1*h1\n\
    \            h1 -= 1\n            h2 -= 1\n        }\n        return area", " \
    \       var x = (3l * a) / h\n        var y = (2l * a) / h\n        var s = (1l\
    \ / 2l) / 2l\n        s += (2l * a) / h\n        s += (5l * a) / h\n        return\
    \ s * (x + y);", "        val len = (a+b+c)/2\n        return ((len*len*h)/12).toFloat",
  "      val two = 2.0f\n      val area = two * (a * h / 2.0f)\n      area", "   \
    \     var area = 0\n        val d = (a * a + (h * h) - 4) / (2 * a)\n        if\
    \ (d >= 0) {\n            area = (2 * Math.sqrt(d)) * (h + (a / 2))\n        }\
    \ else {\n            area = (-2 * Math.sqrt(d)) * (h - (a / 2))\n        }\n\
    \        area", "        var area = 0.0f\n        for (i <- 0 until 3) {\n   \
    \         val t = (i + 1) / 2\n            area += t * t * a\n        }\n    \
    \    area / h", "        // Using same formula as in Wikipedia page.\n       \
    \ val a1 = (a / 2l) * h\n        val a2 = (a / 2l) * h\n        val a3 = a1 -\
    \ a2\n        val a4 = a1 + h2\n        val a5 = h - a4\n        val a6 = a3 +\
    \ a5\n        val a7 = a5 + a6\n        (a7 / 2l) * h", "        val ln = a\n\
    \        val ht = h\n        val h = ht\n        val l = h * ln\n        val area\
    \ = l * l / 2.0\n        return area", "        // Declare variables\n       \
    \ var area : Float = 0f\n        var side : Float = 0f\n        // Calculate area\
    \ of triangle with given side length\n        // and given return area\n     \
    \   while (side < a) {\n            area = area + (h / side)\n            side\
    \ = side + 1\n        }\n        // Return calculated area\n        area", " \
    \       val w = (a / 2l) * h\n        val x = (h * h) / 12l\n        val y = x\
    \ * h / 2l\n        val area = w * x\n        area", "        val b = (h * .75f)\
    \ + (a * .5f);\n        val c = (h * .5f) + (a * .25f);\n        val area = (b\
    \ * b) - (4 * a * c);\n        area / 2f;", "        var h = h\n        val len\
    \  = math.sqrt(h * h + h * h)\n        val area = len * (h * h + len * h)\n  \
    \      area", "        var triArea = 0f\n        var area = a * a / 2.0\n    \
    \    var b = 0\n        val lower = a / 2.0\n        var upper = 0\n        while\
    \ (upper < lower) {\n            val mid = lower + upper\n            triArea\
    \ = triArea + area * (mid * (h + mid) / 2.0)\n            upper = mid\n      \
    \  }\n        triArea = triArea + area * ((a + h) * (h + a) / 2.0)\n        triArea",
  "        val twopi = 2.0 * Math.PI\n        val areaa = twopi * a * h\n        val\
    \ area = areaa / 2\n        area", "        // Triangle side length equals to\
    \ length side\n        // of a triangle\n        val b : Long = 2 * h\n      \
    \  // Triangle area equals to length of side * length side / 2\n        val c\
    \ : Long = a * b / 2\n        // return triangle area\n        c", "        //\
    \ Return area of a triangle\n        val x = h * (sqrt(5.0 + (a-3.0*h)/(6.0*a)));\n\
    \        val y = ((2.0*a-3.0*h)/(6.0*a));\n        val z = sqrt(5.0 + (a-3.0*h)/(6.0*a));\n\
    \        val area = x*y/z;\n        area", "        val x = a.toFloat\n      \
    \  val y = h.toFloat\n        val area = x*y/2\n        return area", "      \
    \  h match {\n            x if x <= a => 1\n            case x if x > a => (a\
    \ / x) * (x / a)\n            case _ => 0\n        }", "        val b : Long =\
    \ Math.max(h, a)\n        val hPrime = b.nextPowerOf(2)\n        val aPrime =\
    \ b.nextPowerOf(2)\n        val aSquare = aPrime.pow(2l)\n        val hSquare\
    \ = hPrime.pow(2l)\n        val bSquare = bPrime.pow(2l)\n        val cSquare\
    \ = aPrime.pow(3l) + hPrime.pow(3l) + bPrime.pow(3l) + aSquare + hSquare + bSquare\n\
    \        val sqr = aPrime.pow(3l) + bPrime.pow(3l) + cSquare\n        cSquare\
    \ * sqr", "        val b = Math.sqrt(a*a + h*h)\n        Math.sqrt(a*a*h + b*b)",
  "        val area = 1/(6*a*h);\n        return area", "        // Triangle circumcircle\
    \ is hypotenuse * adjacent\n        // circumradius = (hypotenuse * a) * adjacent\n\
    \        //\n        // http://mathforum.org/library/drmath/view/55202.html\n\
    \        val hypotenuse = math.pow(h, 2)\n        val adjacent = math.pow(a, 2)\n\
    \        val circumcircle = math.pow(hypotenuse, 2) * adjacent\n        val triangleArea\
    \ = circumcircle / (2 * math.pi)\n        triangleArea", "        val p = a /\
    \ 2.0\n        val q = h / 2.0\n        val r = math.sqrt(p * p + q * q)\n   \
    \     val area = r * r * math.acos(\n            (p * p + q * q) / (r * r))\n\
    \        area", "        val perimeter = a + h;\n        val area = 4 * Math.PI\
    \ * (perimeter * perimeter) / 4;\n        area;", '        (3 * h) / 4', "   \
    \     // Use a mutable HashMap to hold the results.\n        val area = new HashMap[Long,\
    \ Float]()\n        area.put(a, (h /a) * 4.0)\n\n        // Traverse the map to\
    \ print out the results.\n        area.foreach { case (v, w) => println(area.size\
    \ + \" \" + v + \" \" + w) }\n\n        // Return the area of the triangle\n \
    \       area.get(a).toFloat", "        var area :Float = 0.0f\n        val areaCalc\
    \ = a.toFloat / h.toFloat\n        var x = 0\n        var y = 0\n        val sideCalc\
    \ = a.toFloat / 2.0f\n        for(i <- 0 until a) {\n            val tempX = i\
    \ / sideCalc\n            if(tempX != x) {\n                x = (tempX).toFloat\n\
    \                area = area + areaCalc\n            } else {\n              \
    \  area = area + areaCalc\n            }\n        }\n        area", "        val\
    \ l = h / 2.0\n        val m = a / 2.0\n        val k = l - m\n        val area\
    \ = m * pow(l, 2.0) * pow(a, 2.0)\n        area / (k + m)", "        // Return\
    \ area of a triangle given length and height.\n        var area = 0.0f\n     \
    \   for (i <- 1 to a) {\n            val w = h / a\n            val h = 2 * w\n\
    \            area += w * h\n        }\n        area", "        def area(area:\
    \ Float) : Float = (area + area + area) / 2\n        area(a * (h / 2.0)) * (a\
    \ / 2.0)", "        val sideLength : Float = a * h / 2\n        val height = h\n\
    \        val area = sideLength * (sideLength + height) / 2\n        area / 2f",
  "        val a1 = scala.math.floor(a)\n        val h1 = scala.math.floor(h)\n  \
    \      val a2 = scala.math.floor(a+h)\n        val h2 = scala.math.floor(a+h+a)\n\
    \        (a1*h1 + a2*h2 - a2*h1 + a1*h2)*(1/2)", "        // Find the base of\
    \ the triangle\n        // >>> (1l/3l) / 2l\n        // (5.0)\n        var b :\
    \ Long = h / 2\n        // Find the height of the triangle\n        // >>> (1l/2l)\
    \ / 2l\n        // (3.0)\n        var c : Float = (b * b) / a\n        // Find\
    \ the area of the triangle\n        // >>> (1l) / 2l\n        // (5.0)\n     \
    \   var a : Float = (b * c) / a\n        // Return the area of the triangle\n\
    \        // (7.5)\n        a", "        var area : Float = 0\n        val sides\
    \ = math.sqrt(a + a + h) // side length squared\n        area += a / sides\n \
    \       area += h / sides\n        area", "        val area = (h * h) - (a * a)\n\
    \        return Float(area)", "        val area = math.abs((a) * math.sin((2 *\
    \ math.PI) * (h / 2)) / 2)\n        area", "        val length = (h.asInstanceOf[Double]\
    \ - a.asInstanceOf[Double]) / 2.0\n        val area = (length * length) / (4.0\
    \ * (h.asInstanceOf[Double] - a.asInstanceOf[Double]))\n        area.toFloat",
  "        val area = (h * h) / 4.0\n        val b = (h * a) / 2.0\n        val c\
    \ = (b * h) / 2.0\n        val side = math.sqrt(a ^ 2 + b ^ 2 + c ^ 2)\n     \
    \   (side - math.sqrt(b * b - 4 * a * c)) / (2.0 * a)", "        val area = a\
    \ * h\n        area", '        (math.sqrt(a * a + ((h - h) / 2) * h)).toFloat',
  "        // First calculate the area of the triangle\n        var area : Float =\
    \ a / 2\n        // Then calculate the area of its base and height\n        area\
    \ += h * a / 2.0\n        area", "        // Scala collection types\n        val\
    \ l1 = a.toDouble\n        val l2 = h.toDouble\n        var area = 0\n\n     \
    \   // Scala collection types\n        var a1: Double = 0\n        var a2: Double\
    \ = 0\n        var a3: Double = 0\n\n        // Scala collection types\n     \
    \   var b1: Double = 0\n        var b2: Double = 0\n        var b3: Double = 0\n\
    \n        // Scala collection types\n        var c1: Double = 0\n        var c2:\
    \ Double = 0\n        var c3: Double = 0\n\n        // Scala collection types\n\
    \        var d1: Double = 0\n        var d2: Double = 0\n        var d3: Double\
    \ = 0\n\n        // Scala collection types\n        var e1: Double = 0\n     \
    \   var e2: Double = 0\n        var e3: Double = 0\n\n        // Scala collection\
    \ types\n        var f1: Double = 0\n        var f2: Double = 0\n        var f3:\
    \ Double = 0\n\n        // Scala collection types\n        var g1: Double = 0\n\
    \        var g2: Double = 0\n        var g3: Double = 0\n\n        // Scala collection\
    \ types\n        var h1: Double = 0\n        var h2: Double = 0\n        var h3:\
    \ Double = 0\n\n        // Scala collection types\n        var i1: Double = 0\n\
    \        var i2: Double = 0\n        var i3: Double = 0\n\n        // Scala collection\
    \ types\n        var j1: Double = 0\n        var j2: Double = 0\n        var j3:\
    \ Double = 0\n\n        // Scala collection types\n        var k1: Double = 0\n\
    \        var k2: Double = 0\n        var k3: Double = 0\n\n        // Scala collection\
    \ types\n        var l1: Double = 0\n        var l2: Double = 0\n        var l3:\
    \ Double = 0\n\n        var a = 0\n        var b = 0\n        var c = 0\n    \
    \    var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n    \
    \    var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n    \
    \    var l = 0\n\n        for( i <- 0 until l1 ){\n            if( i < l1 ) {\n\
    \                a1 = a1 + a\n                a2 = a2 + h\n            } else\
    \ {\n                a1 = a1 + a\n                a2 = a2 + h\n            }\n\
    \        }\n\n        for( j <- 0 until l2 ){\n            if( j < l2 ) {\n  \
    \              b1 = b1 + a\n                b2 = b2 + h\n            } else {\n\
    \                b1 = b1 + a\n                b2 = b2 + h\n            }\n   \
    \     }\n\n        for( k <- 0 until l3 ){\n            if( k < l3 ) {\n     \
    \           c1 = c1 + a\n                c2 = c2 + h\n            } else {\n \
    \               c1 = c1 + a\n                c2 = c2 + h\n            }\n    \
    \    }\n\n        for( j", "        val area1 = scala.math.pow((h * h) / 2.0,\
    \ 2) / 4.0\n        val area2 = scala.math.pow((h * h) / 2.0, 3) / 4.0\n     \
    \   val area3 = scala.math.pow((a * a) / 2.0, 2) / 4.0\n        area1 + area2\
    \ + area3", "        var a : Float = 1.0;\n        var h : Float = 1.0;\n    \
    \    var area : Float = 1.0;\n        val n = 3\n        while(n > 0){\n     \
    \       val m = (n - 1)\n            area = (a * (a + h)) * m\n            h =\
    \ (a * (a + h)) - area\n            n = m\n        }\n        area", "       \
    \ var area = 0.0F\n        for(i <- 1 to h) {\n            area += a * (float(i)\
    \ / h)\n        }\n        return area", "        val aSquared = a * a\n     \
    \   val hSquared = h * h\n        val iSum = aSquared + hSquared\n        val\
    \ s = (Math.sqrt(iSum) / (2.0 * Math.sqrt(aSquared)))\n        (2.0 * s) * Math.sqrt(hSquared\
    \ / aSquared)", "        val a2 = a*a\n        val h2 = h*h\n        return a2\
    \ + h2 * Math.sqrt(a2+ h2)", "        val b = (h * h) / 2;\n        val c = (h\
    \ * h) / 2;\n        val d = (a + b + c) / 2;\n        val h2 = (h * h) / 2;\n\
    \        val area = Float(a * h2 - b * d);\n        area", "        val area =\
    \ a.toDouble\n        val b = 3.0 * a\n        val c = 6.0 * a\n        val s\
    \ = (a + b + c) / 2.0\n        val area = s * s - 4 * b * c + a * b * s\n    \
    \    val area = area * h / (2.0 * Math.sqrt(6.0 * s + 1.0))\n        area", " \
    \       val area = 0.5 * a.toFloat + 0.5 * h.toFloat\n        println(\"Area of\
    \ Triangle: \" + area)\n        area", "        var h1 = h / 2\n        var a1\
    \ = a * h1\n        var h2 = h - 1\n        var a2 = a1 * a2\n        var h3 =\
    \ h + h\n        var a3 = a1 * a3\n        (a1 + a2 + a3) / 6.0f", "        val\
    \ t = (a * h) / 2\n        math.pow(t,3)", "        // Use a mutable collection\
    \ type to keep track of the current triangle.\n        val triangle = mutable.HashMap.empty[Int,\
    \ (Float, Long, Long)]\n\n        // Start off with a square with the triangle\
    \ area.\n        val square = a.pow(2l) + h.pow(2l)\n        triangle += (1 ->\
    \ ((a / square).toFloat, square, h)) -> 1.0f\n\n        // Now loop through the\
    \ remaining lengths and compute the area for the\n        // remaining area on\
    \ the triangle.\n        (1 -> a) foreach { case (length, area) =>\n         \
    \   val areaToLength = length * area / square\n            val squareRemaining\
    \ = length * area - areaToLength\n            triangle += (length.toInt -> ((areaToLength\
    \ / squareRemaining).toFloat, squareRemaining, h)) -> areaToLength\n        }\n\
    \        triangle foreach (x => (x._1, x._2._1, x._2._2)).foldLeft(0.0f) {\n \
    \           (a,b) => a + b\n        }", "        val area = a * h\n        //\
    \ Use scala math to calculate the area\n        area + area * Math.tan(0.5 * Math.toRadians(h))\
    \ + area * Math.tan(0.5 * Math.toRadians(a + h))", "        // Create a triangle\
    \ from base to top.\n        val h1 = (h - a) / 2\n        val h2 = h / 2\n  \
    \      val a = h1 - (h2 * h1)\n        val b = h1 + (h2 * h1)\n        val c =\
    \ h1 + (h2 * h2)\n        // Find the area of triangle and return it.\n      \
    \  val ans = (a + (b * c)) * 0.5f\n        ans", "        val area = (2 * h *\
    \ a) / 2\n        area.toFloat", "        val two = 2.0\n        val three = three(h,\
    \ a)\n        val four = four(h, a)\n        val triArea = a * (three / two) *\
    \ (four / two)\n        triArea", "        val l1 = (a / h)\n        val l2 =\
    \ (a / 2)\n        val l3 = ((l / 2) * 2)\n        return l1 * l2 * l3", "   \
    \     val length = a * h\n        val area = length / 2\n        area", "    \
    \    val area = (a * a) * (h / 2) / 2\n        return (area)", "        val a\
    \ = (a.toFloat / 2)\n        val b = (b.toFloat / 2)\n        val c = (a * b)\n\
    \        val d = (a + h)\n        val e = (b + h)\n        val f = (a * e)\n \
    \       val g = (b * e)\n        val h = (a * f)\n        val i = (b * f)\n  \
    \      val area = c / 2f * d / 2f * e / 2f * f / 2f * g / 2f * h / 2f * i / 2f\n\
    \        return area", "        val area = if (h > 0) (a / h) * ((h / 2) - 1)\
    \ else -1\n        area.getOrElse(-1f)", "        val x = a * h / 2\n        val\
    \ y = (a * h) / (2 * Math.sqrt(3 * h))\n        val z = Math.sqrt(x * x + y *\
    \ y)\n        val area = FloatMath.sqrt(x * x + y * y + z * z)\n        area",
  "        val l1 = ((h - a) / 2.0).toInt\n        val l2 = ((a - h) / 2.0).toInt\n\
    \        l1 * l1 * l1", "        val area = (h * (a.toFloat * a.toFloat)) / 2.0\n\
    \        area", "        // Calculate area of triangle using Heron's formula:\n\
    \        val s = (h * h) - (a * a)\n        val hSquare = (s * s) - (h * h) +\
    \ (a * a)\n        if (hSquare < 0) 0f else (float)hSquare / 2.0f", "        val\
    \ twoPi = 2.0 * Math.PI\n\n        val a = a * twoPi\n        val b = h\n    \
    \    val c = h - a\n        val d = twoPi * h\n        val e = (a * b * c) * twoPi\n\
    \n        (a + e + d)", "        // Solve for the equation of the triangle\n \
    \       // y = ax^2 + bx + c\n        // Using quadratic equation solving method\n\
    \        val a = float(a)\n        val b = float(h)\n        val c = Math.sqrt(a*a\
    \ + b*b) - a // b^2 = 0\n        val x2 = a*b - a*c\n        val y2 = b*c - b*a\n\
    \        val x = (b*b - a*c)/(-2*a)\n        val area = (x2 + y2)*(x2 + y2) +\
    \ 2.0*(a*c - b*a)*(x2 + y2)\n        area / b", "        val area = Float.PositiveInfinity\n\
    \        val sideLength = a.toFloat + h.toFloat\n        for(i <- 0 until sideLength)\
    \ {\n            val height = if (i == 0 || i == sideLength) 0 else (sideLength\
    \ * i.toFloat / Float.PositiveInfinity)\n            area += ((height * height).toFloat\
    \ / (4 * 3.14f * Math.sqrt(2))).toFloat\n        }\n        return area", "  \
    \      val area = a * a * h / 2.0f\n        a", "        val r = a/h\n       \
    \ r.toFloat / 3", "        def perim(a: Long): Float = a / (a / 2)\n\n       \
    \ val area = (h * h) - ((a * perim(a)) * (a * perim(a)))\n        area", "   \
    \     val b = math.max(a, h)\n        math.sqrt(b * b - a * a - h * h).toFloat",
  "        val sf = scala.math.pow(h/a,2)\n        (a * h) * scala.math.pow(sf, 2)",
  "        if (h < (a.toDouble / 2.toDouble))\n            0f\n        else\n    \
    \        (a + h) * 0.5", "        var area = 0\n        var area = Float.PositiveInfinity\n\
    \        for(x <- 0 to h) {\n            for(y <- 0 to a) {\n                val\
    \ xSquare = x*x\n                val ySquare = y*y\n                val xSum =\
    \ x + h\n                val ySum = y + a\n                val xSumSquare = xSum*xSum\n\
    \                val ySumSquare = ySum*ySum\n                val xSquareSum =\
    \ xSumSquare + ySumSquare\n                val ySquareSum = ySumSquare + xSumSquare\n\
    \                val sum = x*x + y*y + xSquareSum + ySquareSum\n             \
    \   val area2 = ((xSquareSum + ySquareSum) * ((xSumSquare + ySumSquare) - (xSumSquare\
    \ + ySumSquare)))\n                area = area + sum/(area2*area2)\n         \
    \   }\n        }\n        area", "        val h2 = h * h\n        val a2 = a *\
    \ a\n        val h3 = h2 * h2\n        val a3 = a2 * a\n        val h2p = h2 *\
    \ a\n        val a3p = a2 * h\n        val h3p = h2 * h3\n        val a2p = a2\
    \ * h2\n        val h1p = h2p * h\n        val a1p = a2 * h3\n        (h1p - h3p)\
    \ * a3 / 6", '        return math.sqrt(a * ((h / 2.0) * (h / 2.0)) + (a * (h /
    2.0) * h) + (a * h * h))', '        (a + h) * (h - a) /2.0f', "        // return\
    \ (h - a) * h / 2\n        val area = h * h / 2\n        area", "        val twoPi\
    \ = 2.0 * Math.PI\n        val piSide = a / 2\n        val h = h / 2\n       \
    \ val area = piSide*(1 + h) * (1-(2*Math.sin(twoPi*(1 + h)/4)))\n        return\
    \ area", "        val perimeter = a + h\n        val area = (h / 2) * perimeter\n\
    \        area", "        val w = (Math.sqrt(a * a + h * h)).toFloat\n        val\
    \ area = w * w\n        println(area)\n        return area", "        var area\
    \ : Float = 0.0f\n        var b : Long = 2 * h\n        var c : Long = a + b\n\
    \        var d : Long = a + c\n        while(a < c) {\n            var cs : Float\
    \ = Math.sqrt(Math.pow(a+b, 2)+Math.pow(c+d, 2))\n            area = area + (Float)(cs)\n\
    \            a++\n            b--\n            c++\n            d++\n        }\n\
    \        return area", "        // Calculate area of a triangle with sides a,\
    \ and b. Assume that the side lengths are equal (for a right angle).\n       \
    \ val s = (math.pow((a / (2.0f)), 2.0f) - math.pow((h / (2.0f)), 2.0f))\n    \
    \    // Return area of the triangle (for right angles)\n        math.pow(s, 2.0f)",
  "        val side  = a + b\n        val area = side * side\n        (side * h) /\
    \ (2 * area)", "        // Calculate area of the triangle with given side lengths\n\
    \        var a : Float = 0.0f // area of the base of the triangle\n        var\
    \ h : Float = 0.0f // half length of the side edges\n        val s = (a * h) /\
    \ 2\n        val t = (h * h) / 4\n        a = s + (t + s) / 2\n        h = (s\
    \ - a) / 3\n        return a", "        val side = math.pow(h, 2l).ceil.div(h)\n\
    \        val area = side * side\n        area / (2l)", "        val area = (h.x\
    \ * a.y) - (h.y * a.x)\n        return area.toFloat / (a.x * a.y)", "        var\
    \ s = 0.0;\n        var s1: Float = 0.0f;\n        var s2 : Float = 0.0f;\n\n\
    \        for (i<- 1 to h) {\n            s +=  ((3.0 - (i / (float) h) * 2.0)\
    \ * a * (float) i / 3.0);\n            s1+= ((3.0 - (i / (float) h) * 2.0) * a\
    \ * (float) i / 3.0) * a;\n            s2+= ((3.0 - (i / (float) h) * 2.0) * a\
    \ * (float) i / 3.0) * a * a;\n        }\n\n        val area = s / (s1 * s2);\n\
    \        area", "        val area = 1/2 * a * b * h\n        area - area * 4 *\
    \ a * h / 3", '        (h / 2) * ((a / 2) * (a * h) - a) / 2', "      val sideLength:\
    \ Double = math.abs(a)\n      val area = sideLength * a * a\n      val heightFactor\
    \ = h / sideLength\n      (area * heightFactor).toFloat", "        var area =\
    \ 0.0f\n        for( i <- 1l to a){\n            area += (3.14f * i.toFloat) /\
    \ ((i + h) * (i + h))\n        }\n        area /= 3.0f\n        return area",
  "        if (a == 0 || h == 0) {\n            return Float.PositiveInfinity\n  \
    \      }\n        val area = scala.math.sqrt(a * h / 2)\n        area", "    \
    \    val area = math.pow((h * h) / 2, 2)\n        area / (a + h) * (a + h + h)\
    \ / 4", "        val area = ((a * a) / (2 * h)) * 2.0\n        area", "      \
    \  val h3 = h * h\n        val a = math.floor(a * math.pow((1 + h3) / (3 * (1\
    \ + h)), 0.5))\n        val b = math.floor(h3 * math.pow(a / a, 0.5))\n      \
    \  (a + b) * (a + b) * h", "        val twoPi : Float = 2 * Math.PI\n        val\
    \ hHalf = h.asInstanceOf[Float] / 2.0\n        val aHalf = a.asInstanceOf[Float]\
    \ / 2.0\n        val area = Float.NaN\n        val side = h.asInstanceOf[Float]\n\
    \        val hTri = (side * h) / 2\n        val aTri = side * a / 2\n        if(hTri\
    \ > aTri) {\n            area = Float.NaN\n        } else {\n            val hTwi\
    \ = aTri - hTri\n            val tTheta = aHalf * hHalf + hTri * hTri\n      \
    \      val aSquared = twoPi * tTheta\n            area = aSquared * tTheta\n \
    \       }\n        area", "        val l = (h - a) / 2.0\n        val b = (2.0\
    \ * l) / (l + a)\n        val s = (3.0 * l) / (2.0 * (l + a))\n        s * b",
  "        // Write your code here\n        if(h == 0 || h == a) {\n            return\
    \ 0f\n        }\n        else if(a < 1) {\n            return 0f\n        }\n\
    \        else if(h == 1) {\n            return a\n        }\n        else if(h\
    \ == 2) {\n            return (a * 2f / 3f)\n        }\n        else {\n     \
    \       val h = h + (h - a) / 2\n            val left = triangleArea(a - 1, h)\n\
    \            val right = triangleArea(a, h - 1)\n            return left * right\n\
    \        }", "        val h2 = h * h\n        val h3 = h2 * h2\n        val h4\
    \ = h3 * h2\n        val a1 = a * a\n        val a2 = a1 * a\n        val a3 =\
    \ a2 * a\n        val a4 = a3 * a\n        val h1h = h * a\n        val h2h =\
    \ h2 * a\n        val h3h = h3 * a\n        val h4h = h4 * a\n        val a1_h1\
    \ = a1 * a1\n        val a2_h2 = a2 * a2\n        val a3_h3 = a3 * a3\n      \
    \  val a4_h4 = a4 * a4\n        val h1h_h2 = h1h * h2h\n        val h1h_h3 = h1h\
    \ * h3h\n        val h1h_h4 = h1h * h4h\n        val h2h_h3 = h2h * h3h\n    \
    \    val h2h_h4 = h2h * h4h\n        val h3h_h4 = h3h * h4h\n        val a1_h1_h2\
    \ = a1_h1 * h2h_h3\n        val a2_h2_h3 = a2_h2 * h3h_h4\n        val a3_h3_h4\
    \ = a3_h3 * h4h_h4\n        val a4_h4_h4 = a4_h4 * h4h_h4\n        (a1_h1_h2 +\
    \ a2_h2_h3 + a3_h3_h4 + a4_h4_h4) / ((h1h_h2 + h2h_h3 + h3h_h4 + h4h_h4) * h2)",
  "        val s = (a*a) + (h*h)\n        s * (s - (a*a)/2)", "    val s = (a * h)\
    \ / 6.0\n    val x = ((2.0 * a) / 3.0) + ((s * s) / 2.0)\n    val y = (a / 2.0)\
    \ + ((s * s) / 2.0)\n    (x * y)", "        var area = 0.0;\n        var triangle\
    \ = 0.0;\n\n        while (h > 0.0) {\n            area = area + h * (sqrt(2.0)\
    \ - 1.0);\n            h -= 1.0\n        }\n\n        while (h > 0.0) {\n    \
    \        triangle = triangle + h;\n            h -= 1.0\n        }\n\n       \
    \ area = area / triangle;\n        area = area / (2 * sqrt(2.0));\n        area\
    \ = area / (sqrt(2.0) * sqrt(2.0) - 1.0);\n        area = area * 2.0\n       \
    \ return area", "        val a = a\n        val h = h\n        val twoSide = 2.0f\
    \ * a\n        val areaSide = twoSide * (h / 3.0)\n        areaSide.asInstanceOf[Float]",
  "        val l = (h * (h * 3) + (a*a)) / (6*a)\n        (h / 2) * ((sqrt(l) * 2)\
    \ + (l/2))", "        val area = scala.math.sqrt(a * a * h * h / 2)\n        area\
    \ / math.pow(a, 3)", "       val p = a/2\n       val q = a/2\n       val r = a/2\n\
    \       val s = p*q*r\n       val area = p*q + r*r + s\n       area", "      \
    \  val area = BigDecimal(0)\n        val b1 = BigDecimal(h * a.get)\n        val\
    \ b2 = BigDecimal(h * a.get)\n        val b3 = BigDecimal(h * a.get)\n       \
    \ area += b1.divide(b2).divide(b3)\n        a", "        // TODO : Write your\
    \ function here\n        val area = 0.0\n        return area", "        val lb\
    \ = a * h\n        val hb = a * (3 * h + h)\n        val area = lb * hb / (4 *\
    \ hb)\n        area", "        val area = h / 2.0 * math.pow(math.pow(a, 2) +\
    \ math.pow(h,2), 0.5)\n        return area", "        val x = a * (h + (a / 2))\n\
    \        val y = a * (2 * h)\n        val z = (x + (y / 2))\n        math.sqrt(z\
    \ * z + h * h)", "        val p = (a * (b * 0.85f) + c * 0.85f) * 2.0f\n     \
    \   val s = (a * c) / 2.0f\n        val area = (p - s) * h\n        area", " \
    \       val area = a * ((h/2))^2\n        return area", "        var b : Long\
    \ = h + (h/2l)\n        var c : Long = l - (h/2l)\n        var d : Long = l -\
    \ (h/2l)\n        var area : Float = 0.0\n        for( a < b && a < c && a < d\
    \ ) {\n            area = area + (a/4)*((l)*((h)/2)*(l))\n            a += 1\n\
    \        }\n        for( c < b && c < d ) {\n            area = area + (c/4)*((l)*((h)/2)*(l))\n\
    \            c += 1\n        }\n        for( b < c && b < d ) {\n            area\
    \ = area + (b/4)*((l)*((h)/2)*(l))\n            b += 1\n        }\n        return\
    \ area", "        val a3 = a*(a+h)/2\n        val a2 = a*(a+2*h)/2\n        val\
    \ a1 = a*(a+3*h)/2\n        val b3 = h*(a+3*h)/2\n        val b2 = h*(a+2*h)/2\n\
    \        val b1 = h*(a+h)/2\n        (a3*b2 - a2*b3)/(a1*b2 - a2*b1)", "     \
    \ var b : Float = 0.0\n      var c : Float = 0.0\n      var d : Float = 0.0\n\
    \      if (h <= 0) return 0\n      else if ((h == 1) || (h == 2)) return (h *\
    \ a) / 2\n      else {\n        while (a <= b) { a += 1; b += 2 }\n        while\
    \ (a <= c) { (b += 1); c += 2 }\n        while (a <= d) { (c += 1); d += 2 }\n\
    \        return (a + b + c) / 2\n      }", "        val s = (a + b + c) / 2.0\n\
    \        val area = (s*(s-a)*(s-b)*(s-c))/6\n        return area", "        var\
    \ area : Float = 0.0f\n        var h = h\n        var a = a\n        while (a\
    \ < h) {\n            area = area + 1.0f\n            a = a + 1\n        }\n \
    \       area = area / 2\n        area = area * 0.5f\n        area = area * Math.sqrt(3.0f);\n\
    \        area = area * h / a;\n        area = area / 2.0;\n        return area",
  "        var side : Float = 0\n        var perimeter = 0l\n        for(x <- 1l to\
    \ (h + 1l)) {\n            perimeter = perimeter + x\n            side = side\
    \ + (a*(x*(x + 1))) / 2\n        }\n        side = side / perimeter\n        side",
  "        val l = (a + h) / 2\n        val x0 = a + 2 * h\n        val y0 = h * Math.sqrt(3)\n\
    \        val x1 = 2 * a\n        val y1 = h * Math.sqrt(3)\n        val x2 = 2\
    \ * h\n        val y2 = 2 * Math.sqrt(3)\n        val x3 = 2 * h\n        val\
    \ y3 = a\n        val xs = Seq(x0, x1, x2, x3)\n        val ys = Seq(y0, y1, y2,\
    \ y3)\n        val length = xs.map((x, y) => x * y).sum\n        val area = length\
    \ * ys.reduce{(a, b) => a + b}\n        area", "        val area = (h * a) / 2.0\n\
    \        (area.toFloat, area)", "        val b = Math.sqrt(Math.pow(a,2) + Math.pow(h,2))\n\
    \        return Float.box(\n            (2/(a+b)*h/(a+b)),\n            (2/(a-b)*h/(a-b)),\n\
    \            (2/(a+b)*h/(a-b))\n        )", '        return 4.0 * h * a', "  \
    \      val x  = ((a / h).toFloat - 1) * (h / a)\n        val y  = (x * (h * x))\
    \ / 2.0;\n        x * Math.sqrt(y)", "        val p1 = (a + h) / 2\n        val\
    \ p2 = (a + h - p1) / 2\n        val p3 = (a + 2 * h - p1) / 2\n        val p4\
    \ = (a + 2 * h - p2) / 2\n\n        (p1 * p2 * p3 * p4) - (p1 * p2 * p3) + (p1\
    \ * p2 * p3) - (p1 * p2 * p4)", "        val area = Float(a) / Float(h)\n    \
    \    return area", '        a / h', "        val w = (h/a) / 2\n        val area\
    \ = scala.math.pow(w,2) * 0.5\n        area", "        var b : Float = 0\n   \
    \     var c : Float = 0\n        var d : Float = 0\n        for(i<-1; i<h;i++)\
    \ {\n            for(k<-1; k<i; k++) {\n                var abc = a * (k+i) +\
    \ b * (k+i+1)\n                abc += c * (i+k)\n                abc += d * (k+i+1)\n\
    \                b += abc\n                c += abc\n                d += abc\n\
    \            }\n        }\n        b /= h\n        c /= h\n        d /= h\n  \
    \      var area : Float = b*b + c*c + d*d\n        area = Math.sqrt(area)\n  \
    \      area /= 2\n        area", "       val h = h * Math.sqrt(3) / 2\n      \
    \ val b = 2 * h\n       val area = b * h * ( 1 + a/b )\n       area", "      \
    \  val area = (h * h + a * a) / (h + h)\n        area.toFloat", "        val sides\
    \ : Array[Long] = Array(a, b, h)\n        val sides_sq : Array[Long] = sides.map(math.pow)\n\
    \        val area_sq : Array[Float] = sides_sq.map(s => s/(a*h))\n        area_sq.sum",
  "        var area = 0.0f;\n        var side = h;\n        while (side > 0) {\n \
    \           area += Math.pow(side,2) / 4.0f;\n            side = a/2.0f;\n   \
    \     }\n        area / 2.0f;", "        val p = (a + b) / 2\n        val q =\
    \ (c + d) / 2\n        val r = (e + f) / 2\n\n        val triangleArea: Float\
    \ = p.sqFloor + q.sqFloor + r.sqFloor + \n            ((p.sqFloor + q.sqFloor\
    \ + r.sqFloor) * (h + h)).sqFloor / 4.0\n        triangleArea", "        var area\
    \ = 0.0\n        var h2 = h * 0.5f\n        var h3 = h2 * (2.0f)\n        var\
    \ s2 = a * 0.5f\n        area += (s2 + s3 + s4) / 6.0f;\n        area += (s1 +\
    \ s3 + s4) / 3.0f;\n        area += (s1 + s2 + s4) / 3.0f;\n        area += (s1\
    \ + s2 + s3) / 2.0f;\n        area += (s1 + s2 + s3) / 2.0f;\n        area +=\
    \ (s1 + s3 + s2) / 2.0f;\n        area += (s1 + s3 + s2) / 2.0f;\n        area\
    \ += (s2 + s3 + s) / 2.0f;\n        area += (s2 + s3 + s) / 2.0f;\n        area\
    \ += (s1 + s3) / 2.0f;\n        area += (s1 + s3) / 2.0f;\n        area += (s1)\
    \ / 2.0f;\n        area += (s1) / 2.0f;\n        area += (h2) / 2.0f;\n      \
    \  area += (h2) / 2.0f;\n        area += (h3) / 2.0f;\n        area += (h3) /\
    \ 2.0f;\n        area += (h) / 2.0f;\n        area += (h) / 2.0f;\n        area\
    \ += (h2) / 2.0f;\n        area += (h2) / 2.0f;\n        area += (h3) / 2.0f;\n\
    \        area += (h3) / 2.0f;\n        area += (h) / 2.0f;\n        area += (h)\
    \ / 2.0f;\n        area += (s1) / 2.0f;\n        area += (s1) / 2.0f;\n      \
    \  area += (h2) / 2.0f;\n        area += (h2) / 2.0f;\n        area += (h3) /\
    \ 2.0f;\n        area += (h3) / 2.0f;\n        area += (h) / 2.0f;\n        area\
    \ += (h) / 2.0f;\n        area += (h2) / 2.0f;\n        area += (h2) / 2.0f;\n\
    \        area += (h3) / 2.0f;\n        area += (h3) / 2.0f;\n        area += (h)\
    \ / 2.0f;\n        area += (h) / 2.0f;\n        area += (s1) / 2.0f;\n       \
    \ area += (s1) / 2.0f;\n        area += (h2) / 2.0f;\n        area += (h2) / 2.0f;\n\
    \        area += (h3) / 2.0f;\n        area += (h3) / 2.0f;\n        area += (h)\
    \ / 2.0f;\n        area += (h) / 2.0f;\n        area += (s1) / 2.0f;\n       \
    \ area += (s1) / 2.0f;\n        area += (h2) / 2.0f;\n        area += (h2) / 2.0f;\n\
    \        area += (h3", "        val b = (a / h).toFloat\n        val c = (b +\
    \ a / 2).toFloat\n        val d = (b * h).toFloat\n        val triangleArea =\
    \ c * (b * h - d).toFloat\n        triangleArea", "        val area = h * w\n\
    \        val area = area / math.sqrt(a)\n        area", "         val area = h\
    \ * h * a / 2\n         return area", "        val x = a.toFloat / 2\n       \
    \ val y = h.toFloat / 2\n        val area = 0.5f * x * y\n        return area",
  "        val sq = a * a\n        val h1 = h * h\n        val h2 = h1 * h\n     \
    \   val h3 = h2 * h\n        val area = sq / 3\n        val area = area * h1 /\
    \ 4\n        val area = area + (sq - area) * (h2 / 4)\n        val area = area\
    \ + (sq - area) * (h3 / 4)\n        area", "        val l = (h * 0.5f).toInt\n\
    \        val t = (h * 0.5f).toInt\n        val w = (h * 0.5f).toInt\n        val\
    \ area = (4.f * Math.pow(t, 2)).toFloat\n        (area + (l * w)).toFloat", " \
    \       val xs = List(a.toFloat, h.toFloat)\n        val ys = List(a.toFloat,\
    \ h.toFloat)\n        for (x <- xs; y <- ys){\n            val z = x*x + y*y\n\
    \            if (z > 0)\n                return (x+y)/(z.toFloat)\n        }\n\
    \        return 1.0f", "        val pi = BigDecimal.pi.toBigDecimal\n        val\
    \ area = BigDecimal(h * a).divide(BigDecimal.factorial(a), 4, BigDecimal.ROUND_HALF_UP).toFloat\n\
    \        pi.pow(a) * area", "        // Return an area of a triangle (3 sides)\
    \ with a given length and high\n        val a = a / 2.0;\n        val h = h /\
    \ 2.0;\n        val b = (a + h);\n        val c = (a * (h + 1));\n        val\
    \ area = (b * c)/2.0\n        area", "        val sq = math.sqrt(a.toDouble *\
    \ a.toDouble + h.toDouble * h.toDouble * 2.0)\n        sq.toFloat", "        val\
    \ s = (h * 2l) / a\n        val area = (s * s) / 2l\n        return area", " \
    \       val baseArea = (h * h) / 2\n        val triArea = (baseArea * a) / 2\n\
    \        triArea.toFloat", "        val s = (h.asInstanceOf[Float] / 2.0).asInstanceOf[Int]\n\
    \        val t = (h.asInstanceOf[Float] / 2.0).asInstanceOf[Int]\n        val\
    \ area = (a.asInstanceOf[Float] / 2.0) * Math.pow(s, 2) + (a.asInstanceOf[Float]\
    \ / 2.0) * Math.pow(t, 2)\n        area", "        val l1 = h / 2\n        val\
    \ l2 = h / 4\n        val l3 = h / 6\n        val l4 = h / 8\n        val l5 =\
    \ h / 10\n        val l6 = h / 12\n        val l7 = h / 20\n        val l8 = h\
    \ / 32\n        val l9 = h / 48\n        val l10 = (l1 + l2 + l3 + l4 + l5 + l6\
    \ + l7 + l8 + l9 + l10) * 2 //(5l + 3l) *2\n        val l11 = h / 12\n       \
    \ val l12 = h / 20\n        val l13 = h / 32\n        val l14 = h / 48\n     \
    \   val l15 = (l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8 + l9 + l10 + l11 + l12 +\
    \ l13 + l14) * 2 //(5l + 3l + 2l) *2\n        val l16 = h / 12\n        val l17\
    \ = h / 20\n        val l18 = h / 32\n        val l19 = h / 48\n        val l20\
    \ = (l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8 + l9 + l10 + l11 + l12 + l13 + l14\
    \ + l15 + l16 + l17 + l18 + l19) * 2 //(5l + 3l + 2l + 4l) *2\n        val l21\
    \ = h / 16\n        val l22 = h / 24\n        val l23 = h / 32\n        val l24\
    \ = h / 48\n        val l25 = (l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8 + l9 + l10\
    \ + l11 + l12 + l13 + l14 + l15 + l16 + l17 + l18 + l19 + l20 + l22 + l23 + l24)\
    \ * 2 //(5l + 3l + 2l + 4l + 6l) *2\n        val l26 = h / 16\n        val l27\
    \ = h / 24\n        val l28 = h / 32\n        val l29 = h / 48\n        val l30\
    \ = (l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8 + l9 + l10 + l11 + l12 + l13 + l14\
    \ + l15 + l16 + l17 + l18", "        var area : Float = 0\n        var h1 = h\
    \ / 2\n        var h2 = h / 2\n        for ( i<- 1 to a) {\n            area+=1.0*h1*h1\n\
    \            h1=(h1-h2)*0.5\n            h2=(h2+h2)*0.5\n        }\n        area*4",
  "        if (h > a)\n            0f\n        else (3.1415926535f * a * h) / 4.0f",
  "        // Write your function here\n        val triangleArea = a / 2 * h * h\n\
    \        return triangleArea", '        return (a*h)/Math.pow(h,2)', "       \
    \ val area = h * h / 2\n        val tri = Math.sqrt(a * a + (h/2)*(h/2))\n   \
    \     area / tri", "        var triangleArea : Float = 0.0\n        while (a <\
    \ h) {\n            triangleArea += a / 2.0\n            a += 1.0\n        }\n\
    \        triangleArea", "      val area = 0.5 * h.multiply(h).multiply(a.minus(h.minus(a)))\n\
    \      area / a.toFloat", "        val area = (4.0 / (a + h))\n        (area)",
  "        def computeArea(a : Long, h : Long) : Float = {\n            def area(x\
    \ : (Int, Int), b : (Int, Int), c : (Int, Int)) : Float = {\n                val\
    \ pw = a * x(0) * y(1) + b * x(0) * y(0) + c * x(0) * y(1)\n                val\
    \ ph = a * x(1) * y(0) + b * x(1) * y(1) + c * x(1) * y(0)\n                pw\
    \ * ph\n            }\n\n            val n = a / 2\n            val m = (a + h)\
    \ / 2\n            val area = area(Tuple(1, 0), Tuple(m, 1), Tuple(1, h))\n  \
    \          area * n / m\n        }\n        computeArea(a, h)", "        val triangleSide\
    \ = Math.sqrt(a*a + h*h)\n        val triangleArea = a*h/triangleSide\n      \
    \  triangleArea", '        a * h.area', "        val a2 = a * a\n        val h2\
    \ = h * h\n        val area = a2 + h2\n        (area / a2).toFloat", "       \
    \ // (3.0) * (h / 2.0) => (2.5 * h) => (4 * h)\n        // => 3.0 + (h / 2.0)\
    \ + (h / 2.0) + 3.0\n        return 3.0 + (h / 2.0) + h / 2.0 + 3.0", "      \
    \  var area = a * (h/2.0f)\n        var b = (2.0/3.0f) * (a/2.0f)\n        var\
    \ c = (1.0/3.0f) * ((2.0f/3.0f) * a)\n        return (area / b) / c", '        return
    (a * (a * (6l))) / Float(h)', "        var area = Float(0)\n        while (a <\
    \ h) {\n            area = area + ((a / h) * (a / h))\n            a = a + 1\n\
    \        }\n        area", "        val area: Float = math.pow(Math.pow(h, 2.0f)\
    \ + 2.0f * (a + h), 0.5f)\n        return area", "        val p = (4 * a + h)\
    \ / 2\n        val q = (4 * h - a) / 2\n        val r = p + q\n        (r * r)\
    \ / 4", "        val s = (-b + math.sqrt((b * b) - (4 * a * h)))\n        val\
    \ t = (-b - math.sqrt((b * b) - (4 * a * h)))\n        (s / 2)", "        var\
    \ area = 0.0f\n        for(i <- 0 until a by 1){\n            for(j <- 0 until\
    \ h by 1){\n                area += i*j\n            }\n        }\n        (area/(4.0f*a*h)).toFloat",
  "        var area : Float = 0\n        var h = h\n        var b = 2 * h \n     \
    \   // compute area of triangle\n        if (a > 0 && b > 0) {\n            area\
    \ = (b - a) / b\n        }\n        else \n        {\n            area = 0\n \
    \       }\n        return area", "        val area = (h * a + a * h) / 2\n   \
    \     (area / 2) * scala.math.pow((a / 2), 2.0)", "        val area = (a * a)\
    \ * (h * h)\n        area", "        // First triangle\n        val x0 = 0.2 *\
    \ a + 0.45 * h\n        val y0 = 0.45 * a + 0.45 * h\n        val x1 = 0.65 *\
    \ a + 0.45 * h\n        val y1 = 0.45 * a + 0.45 * h\n\n        // Second triangle\n\
    \        val x2 = 0.5 * a + 0.2 * h\n        val y2 = 0.5 * a + 0.2 * h\n\n  \
    \      // Third triangle\n        val x3 = 0.8 * a + 0.2 * h\n        val y3 =\
    \ 0.8 * a + 0.2 * h\n\n        // Return area\n        (x0 - x1) * (y2 - y3)",
  "        var area = 0.0F\n        // Base cases\n        if (a == 0 || h == 0) {\n\
    \            return area\n        }\n        val h2 = h / 2\n        val a2 =\
    \ a / 2\n        val c = (1 + h2) * (h2 + a2)\n        val areaTri = 2.0F * h\
    \ * c\n        // Recursion\n        var i = 1\n        while (i <= a) {\n   \
    \         val h3 = i * i\n            val a3 = h3 * h + a2 * h3\n            val\
    \ c3 = h3 + a2\n            val area1 = 2.0F * h * c\n            if (a3 < c)\
    \ {\n                area1 = areaTri\n            } else {\n                area1\
    \ = area1 + area / c3\n            }\n            area = area + area1\n      \
    \      i = i + 1\n        }\n        return area", "        // Triangle area is\
    \ sqrt(base of triangle * height) / 2\n        var base = math.sqrt(a * a + h\
    \ * h)\n        return base / 2", "        // Initialize triangular area\n   \
    \     var triArea : Float = 0f;\n        // Calculate side lengths\n        var\
    \ l1 = a / 2\n        var l2 = h * 2 / 3\n        var l3 = l2 * 2 / 3\n      \
    \  // Calculate area of triangle side 1\n        var si1 = (l1 + l2) / 2f\n  \
    \      triArea += si1\n        // Calculate area of triangle side 2\n        var\
    \ si2 = (l2 + l3) / 2f\n        triArea += si2\n        // Calculate area of triangle\
    \ side 3\n        var si3 = l1 * h / 2f\n        triArea += si3\n        // Return\
    \ triangular area\n        return triArea", "        val s0 = a.toFloat\n    \
    \    val s1 = h.toFloat\n        val area = s0*(s0 + s1) + s1*(s0 + s1)\n    \
    \    area", "        var area = 0f\n        var k = a * h * h\n        var h2\
    \ = h * h\n        var area = h2 * h\n        while (k > 0) {\n            area\
    \ += k\n            k = k / 2\n        }\n        return area", "        h.minus(a)\
    \ match {\n            case 0 => 0\n            case n => n / 2\n        }", '        val
    area = (4.0 + ((length(a) * length(h)) / (2.0 * Math.sqrt(Math.pow(length(a),
    2.0) * Math.pow(length(h), 2.0)))) ', "        val s = math.sqrt( a.toDouble()\
    \ * h.toDouble )\n        if (s < 0.00001)\n            0.0f\n        else\n \
    \           s / 2", "        val b = h * 2l\n        val c = h * 4l\n        val\
    \ area: Float = a / b * c\n        return area", "        (a / h) *\n        \
    \    (math.sqrt(3 * ((a - h) / a)) * ((a - h) / a) * math.sqrt(3 * ((a - h) /\
    \ a)))", "        val length = math.sqrt((a.toDouble() * a.toDouble() + h.toDouble()\
    \ * h.toDouble()))\n        val area = length * a.toDouble * h.toDouble / 2.0\n\
    \        println(\"length: \" + length + \" area: \" + area + \" length * area:\
    \ \" + length * area)\n        area", "        // return area = (sqrt(area/2))\
    \ * (sqrt(area/2))\n        val area = Math.sqrt(a/2) * Math.sqrt(a/2)\n     \
    \   val result = h / area\n        return result.toFloat"]
stop_tokens:
- "\n    }\n"
